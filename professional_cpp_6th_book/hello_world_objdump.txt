
hello_world:     file format elf64-x86-64
hello_world


Disassembly of section .init:

0000000000404000 <_init>:
  404000:	48 83 ec 08          	sub    $0x8,%rsp
  404004:	48 8b 05 d5 1f 02 00 	mov    0x21fd5(%rip),%rax        # 425fe0 <__gmon_start__@Base>
  40400b:	48 85 c0             	test   %rax,%rax
  40400e:	74 02                	je     404012 <_init+0x12>
  404010:	ff d0                	call   *%rax
  404012:	48 83 c4 08          	add    $0x8,%rsp
  404016:	c3                   	ret

Disassembly of section .plt:

0000000000404020 <_ZSt8to_charsPcS_f@plt-0x10>:
  404020:	ff 35 ca 1f 02 00    	push   0x21fca(%rip)        # 425ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
  404026:	ff 25 cc 1f 02 00    	jmp    *0x21fcc(%rip)        # 425ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
  40402c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404030 <_ZSt8to_charsPcS_f@plt>:
  404030:	ff 25 ca 1f 02 00    	jmp    *0x21fca(%rip)        # 426000 <_ZSt8to_charsPcS_f@GLIBCXX_3.4.29>
  404036:	68 00 00 00 00       	push   $0x0
  40403b:	e9 e0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404040 <frexpf@plt>:
  404040:	ff 25 c2 1f 02 00    	jmp    *0x21fc2(%rip)        # 426008 <frexpf@GLIBC_2.2.5>
  404046:	68 01 00 00 00       	push   $0x1
  40404b:	e9 d0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404050 <_ZSt8to_charsPcS_eSt12chars_format@plt>:
  404050:	ff 25 ba 1f 02 00    	jmp    *0x21fba(%rip)        # 426010 <_ZSt8to_charsPcS_eSt12chars_format@GLIBCXX_3.4.29>
  404056:	68 02 00 00 00       	push   $0x2
  40405b:	e9 c0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404060 <_ZNKSt6localeeqERKS_@plt>:
  404060:	ff 25 b2 1f 02 00    	jmp    *0x21fb2(%rip)        # 426018 <_ZNKSt6localeeqERKS_@GLIBCXX_3.4>
  404066:	68 03 00 00 00       	push   $0x3
  40406b:	e9 b0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404070 <_ZSt8to_charsPcS_d@plt>:
  404070:	ff 25 aa 1f 02 00    	jmp    *0x21faa(%rip)        # 426020 <_ZSt8to_charsPcS_d@GLIBCXX_3.4.29>
  404076:	68 04 00 00 00       	push   $0x4
  40407b:	e9 a0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404080 <__udivti3@plt>:
  404080:	ff 25 a2 1f 02 00    	jmp    *0x21fa2(%rip)        # 426028 <__udivti3@GCC_3.0>
  404086:	68 05 00 00 00       	push   $0x5
  40408b:	e9 90 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404090 <_ZSt17__throw_bad_allocv@plt>:
  404090:	ff 25 9a 1f 02 00    	jmp    *0x21f9a(%rip)        # 426030 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
  404096:	68 06 00 00 00       	push   $0x6
  40409b:	e9 80 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040a0 <__cxa_begin_catch@plt>:
  4040a0:	ff 25 92 1f 02 00    	jmp    *0x21f92(%rip)        # 426038 <__cxa_begin_catch@CXXABI_1.3>
  4040a6:	68 07 00 00 00       	push   $0x7
  4040ab:	e9 70 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040b0 <strlen@plt>:
  4040b0:	ff 25 8a 1f 02 00    	jmp    *0x21f8a(%rip)        # 426040 <strlen@GLIBC_2.2.5>
  4040b6:	68 08 00 00 00       	push   $0x8
  4040bb:	e9 60 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>:
  4040c0:	ff 25 82 1f 02 00    	jmp    *0x21f82(%rip)        # 426048 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@GLIBCXX_3.4.21>
  4040c6:	68 09 00 00 00       	push   $0x9
  4040cb:	e9 50 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040d0 <_ZNKSt9basic_iosIcSt11char_traitsIcEE5rdbufEv@plt>:
  4040d0:	ff 25 7a 1f 02 00    	jmp    *0x21f7a(%rip)        # 426050 <_ZNKSt9basic_iosIcSt11char_traitsIcEE5rdbufEv@GLIBCXX_3.4>
  4040d6:	68 0a 00 00 00       	push   $0xa
  4040db:	e9 40 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040e0 <memcmp@plt>:
  4040e0:	ff 25 72 1f 02 00    	jmp    *0x21f72(%rip)        # 426058 <memcmp@GLIBC_2.2.5>
  4040e6:	68 0b 00 00 00       	push   $0xb
  4040eb:	e9 30 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@plt>:
  4040f0:	ff 25 6a 1f 02 00    	jmp    *0x21f6a(%rip)        # 426060 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@GLIBCXX_3.4>
  4040f6:	68 0c 00 00 00       	push   $0xc
  4040fb:	e9 20 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404100 <_ZNSo6sentryD1Ev@plt>:
  404100:	ff 25 62 1f 02 00    	jmp    *0x21f62(%rip)        # 426068 <_ZNSo6sentryD1Ev@GLIBCXX_3.4>
  404106:	68 0d 00 00 00       	push   $0xd
  40410b:	e9 10 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404110 <__cxa_allocate_exception@plt>:
  404110:	ff 25 5a 1f 02 00    	jmp    *0x21f5a(%rip)        # 426070 <__cxa_allocate_exception@CXXABI_1.3>
  404116:	68 0e 00 00 00       	push   $0xe
  40411b:	e9 00 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404120 <__gttf2@plt>:
  404120:	ff 25 52 1f 02 00    	jmp    *0x21f52(%rip)        # 426078 <__gttf2@GCC_4.3.0>
  404126:	68 0f 00 00 00       	push   $0xf
  40412b:	e9 f0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404130 <_ZSt20__throw_length_errorPKc@plt>:
  404130:	ff 25 4a 1f 02 00    	jmp    *0x21f4a(%rip)        # 426080 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
  404136:	68 10 00 00 00       	push   $0x10
  40413b:	e9 e0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404140 <memset@plt>:
  404140:	ff 25 42 1f 02 00    	jmp    *0x21f42(%rip)        # 426088 <memset@GLIBC_2.2.5>
  404146:	68 11 00 00 00       	push   $0x11
  40414b:	e9 d0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404150 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@plt>:
  404150:	ff 25 3a 1f 02 00    	jmp    *0x21f3a(%rip)        # 426090 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@GLIBCXX_3.4.21>
  404156:	68 12 00 00 00       	push   $0x12
  40415b:	e9 c0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404160 <_ZSt8to_charsPcS_e@plt>:
  404160:	ff 25 32 1f 02 00    	jmp    *0x21f32(%rip)        # 426098 <_ZSt8to_charsPcS_e@GLIBCXX_3.4.29>
  404166:	68 13 00 00 00       	push   $0x13
  40416b:	e9 b0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404170 <_ZSt8to_charsPcS_dSt12chars_format@plt>:
  404170:	ff 25 2a 1f 02 00    	jmp    *0x21f2a(%rip)        # 4260a0 <_ZSt8to_charsPcS_dSt12chars_format@GLIBCXX_3.4.29>
  404176:	68 14 00 00 00       	push   $0x14
  40417b:	e9 a0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404180 <_ZSt8to_charsPcS_dSt12chars_formati@plt>:
  404180:	ff 25 22 1f 02 00    	jmp    *0x21f22(%rip)        # 4260a8 <_ZSt8to_charsPcS_dSt12chars_formati@GLIBCXX_3.4.29>
  404186:	68 15 00 00 00       	push   $0x15
  40418b:	e9 90 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404190 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>:
  404190:	ff 25 1a 1f 02 00    	jmp    *0x21f1a(%rip)        # 4260b0 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@GLIBCXX_3.4.21>
  404196:	68 16 00 00 00       	push   $0x16
  40419b:	e9 80 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041a0 <_ZNSt6localeC1ERKS_@plt>:
  4041a0:	ff 25 12 1f 02 00    	jmp    *0x21f12(%rip)        # 4260b8 <_ZNSt6localeC1ERKS_@GLIBCXX_3.4>
  4041a6:	68 17 00 00 00       	push   $0x17
  4041ab:	e9 70 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041b0 <_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate@plt>:
  4041b0:	ff 25 0a 1f 02 00    	jmp    *0x21f0a(%rip)        # 4260c0 <_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate@GLIBCXX_3.4>
  4041b6:	68 18 00 00 00       	push   $0x18
  4041bb:	e9 60 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041c0 <_ZSt20__throw_system_errori@plt>:
  4041c0:	ff 25 02 1f 02 00    	jmp    *0x21f02(%rip)        # 4260c8 <_ZSt20__throw_system_errori@GLIBCXX_3.4.11>
  4041c6:	68 19 00 00 00       	push   $0x19
  4041cb:	e9 50 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041d0 <_ZSt19__throw_logic_errorPKc@plt>:
  4041d0:	ff 25 fa 1e 02 00    	jmp    *0x21efa(%rip)        # 4260d0 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  4041d6:	68 1a 00 00 00       	push   $0x1a
  4041db:	e9 40 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041e0 <__cxa_free_exception@plt>:
  4041e0:	ff 25 f2 1e 02 00    	jmp    *0x21ef2(%rip)        # 4260d8 <__cxa_free_exception@CXXABI_1.3>
  4041e6:	68 1b 00 00 00       	push   $0x1b
  4041eb:	e9 30 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041f0 <_ZSt8to_charsPcS_DF128_St12chars_format@plt>:
  4041f0:	ff 25 ea 1e 02 00    	jmp    *0x21eea(%rip)        # 4260e0 <_ZSt8to_charsPcS_DF128_St12chars_format@GLIBCXX_3.4.31>
  4041f6:	68 1c 00 00 00       	push   $0x1c
  4041fb:	e9 20 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404200 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@plt>:
  404200:	ff 25 e2 1e 02 00    	jmp    *0x21ee2(%rip)        # 4260e8 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@GLIBCXX_3.4.21>
  404206:	68 1d 00 00 00       	push   $0x1d
  40420b:	e9 10 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404210 <_ZSt28__throw_bad_array_new_lengthv@plt>:
  404210:	ff 25 da 1e 02 00    	jmp    *0x21eda(%rip)        # 4260f0 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
  404216:	68 1e 00 00 00       	push   $0x1e
  40421b:	e9 00 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404220 <_ZNSo6sentryC1ERSo@plt>:
  404220:	ff 25 d2 1e 02 00    	jmp    *0x21ed2(%rip)        # 4260f8 <_ZNSo6sentryC1ERSo@GLIBCXX_3.4>
  404226:	68 1f 00 00 00       	push   $0x1f
  40422b:	e9 f0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404230 <memcpy@plt>:
  404230:	ff 25 ca 1e 02 00    	jmp    *0x21eca(%rip)        # 426100 <memcpy@GLIBC_2.14>
  404236:	68 20 00 00 00       	push   $0x20
  40423b:	e9 e0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404240 <_ZSt8to_charsPcS_DF128_St12chars_formati@plt>:
  404240:	ff 25 c2 1e 02 00    	jmp    *0x21ec2(%rip)        # 426108 <_ZSt8to_charsPcS_DF128_St12chars_formati@GLIBCXX_3.4.31>
  404246:	68 21 00 00 00       	push   $0x21
  40424b:	e9 d0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404250 <_ZNKSt7__cxx118numpunctIcE8truenameEv@plt>:
  404250:	ff 25 ba 1e 02 00    	jmp    *0x21eba(%rip)        # 426110 <_ZNKSt7__cxx118numpunctIcE8truenameEv@GLIBCXX_3.4.21>
  404256:	68 22 00 00 00       	push   $0x22
  40425b:	e9 c0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404260 <_ZdlPv@plt>:
  404260:	ff 25 b2 1e 02 00    	jmp    *0x21eb2(%rip)        # 426118 <_ZdlPv@GLIBCXX_3.4>
  404266:	68 23 00 00 00       	push   $0x23
  40426b:	e9 b0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404270 <_Znwm@plt>:
  404270:	ff 25 aa 1e 02 00    	jmp    *0x21eaa(%rip)        # 426120 <_Znwm@GLIBCXX_3.4>
  404276:	68 24 00 00 00       	push   $0x24
  40427b:	e9 a0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404280 <_ZSt8to_charsPcS_fSt12chars_format@plt>:
  404280:	ff 25 a2 1e 02 00    	jmp    *0x21ea2(%rip)        # 426128 <_ZSt8to_charsPcS_fSt12chars_format@GLIBCXX_3.4.29>
  404286:	68 25 00 00 00       	push   $0x25
  40428b:	e9 90 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404290 <_ZdlPvm@plt>:
  404290:	ff 25 9a 1e 02 00    	jmp    *0x21e9a(%rip)        # 426130 <_ZdlPvm@CXXABI_1.3.9>
  404296:	68 26 00 00 00       	push   $0x26
  40429b:	e9 80 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042a0 <_ZSt8to_charsPcS_eSt12chars_formati@plt>:
  4042a0:	ff 25 92 1e 02 00    	jmp    *0x21e92(%rip)        # 426138 <_ZSt8to_charsPcS_eSt12chars_formati@GLIBCXX_3.4.29>
  4042a6:	68 27 00 00 00       	push   $0x27
  4042ab:	e9 70 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042b0 <_ZNSt13runtime_errorD2Ev@plt>:
  4042b0:	ff 25 8a 1e 02 00    	jmp    *0x21e8a(%rip)        # 426140 <_ZNSt13runtime_errorD2Ev@GLIBCXX_3.4>
  4042b6:	68 28 00 00 00       	push   $0x28
  4042bb:	e9 60 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042c0 <memchr@plt>:
  4042c0:	ff 25 82 1e 02 00    	jmp    *0x21e82(%rip)        # 426148 <memchr@GLIBC_2.2.5>
  4042c6:	68 29 00 00 00       	push   $0x29
  4042cb:	e9 50 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042d0 <_ZSt8to_charsPcS_fSt12chars_formati@plt>:
  4042d0:	ff 25 7a 1e 02 00    	jmp    *0x21e7a(%rip)        # 426150 <_ZSt8to_charsPcS_fSt12chars_formati@GLIBCXX_3.4.29>
  4042d6:	68 2a 00 00 00       	push   $0x2a
  4042db:	e9 40 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042e0 <exit@plt>:
  4042e0:	ff 25 72 1e 02 00    	jmp    *0x21e72(%rip)        # 426158 <exit@GLIBC_2.2.5>
  4042e6:	68 2b 00 00 00       	push   $0x2b
  4042eb:	e9 30 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042f0 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>:
  4042f0:	ff 25 6a 1e 02 00    	jmp    *0x21e6a(%rip)        # 426160 <_ZNKSt7__cxx118numpunctIcE8groupingEv@GLIBCXX_3.4.21>
  4042f6:	68 2c 00 00 00       	push   $0x2c
  4042fb:	e9 20 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404300 <_ZNSt6locale7classicEv@plt>:
  404300:	ff 25 62 1e 02 00    	jmp    *0x21e62(%rip)        # 426168 <_ZNSt6locale7classicEv@GLIBCXX_3.4>
  404306:	68 2d 00 00 00       	push   $0x2d
  40430b:	e9 10 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404310 <_ZNKSt13runtime_error4whatEv@plt>:
  404310:	ff 25 5a 1e 02 00    	jmp    *0x21e5a(%rip)        # 426170 <_ZNKSt13runtime_error4whatEv@GLIBCXX_3.4>
  404316:	68 2e 00 00 00       	push   $0x2e
  40431b:	e9 00 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@plt>:
  404320:	ff 25 52 1e 02 00    	jmp    *0x21e52(%rip)        # 426178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@GLIBCXX_3.4.31>
  404326:	68 2f 00 00 00       	push   $0x2f
  40432b:	e9 f0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404330 <_ZNSt6localeD1Ev@plt>:
  404330:	ff 25 4a 1e 02 00    	jmp    *0x21e4a(%rip)        # 426180 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  404336:	68 30 00 00 00       	push   $0x30
  40433b:	e9 e0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404340 <__unordtf2@plt>:
  404340:	ff 25 42 1e 02 00    	jmp    *0x21e42(%rip)        # 426188 <__unordtf2@GCC_4.3.0>
  404346:	68 31 00 00 00       	push   $0x31
  40434b:	e9 d0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404350 <__cxa_rethrow@plt>:
  404350:	ff 25 3a 1e 02 00    	jmp    *0x21e3a(%rip)        # 426190 <__cxa_rethrow@CXXABI_1.3>
  404356:	68 32 00 00 00       	push   $0x32
  40435b:	e9 c0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404360 <_ZNSt15basic_streambufIcSt11char_traitsIcEE5sputnEPKcl@plt>:
  404360:	ff 25 32 1e 02 00    	jmp    *0x21e32(%rip)        # 426198 <_ZNSt15basic_streambufIcSt11char_traitsIcEE5sputnEPKcl@GLIBCXX_3.4>
  404366:	68 33 00 00 00       	push   $0x33
  40436b:	e9 b0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404370 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
  404370:	ff 25 2a 1e 02 00    	jmp    *0x21e2a(%rip)        # 4261a0 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
  404376:	68 34 00 00 00       	push   $0x34
  40437b:	e9 a0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404380 <frexpl@plt>:
  404380:	ff 25 22 1e 02 00    	jmp    *0x21e22(%rip)        # 4261a8 <frexpl@GLIBC_2.2.5>
  404386:	68 35 00 00 00       	push   $0x35
  40438b:	e9 90 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404390 <__umodti3@plt>:
  404390:	ff 25 1a 1e 02 00    	jmp    *0x21e1a(%rip)        # 4261b0 <__umodti3@GCC_3.0>
  404396:	68 36 00 00 00       	push   $0x36
  40439b:	e9 80 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043a0 <_ZNKSo6sentrycvbEv@plt>:
  4043a0:	ff 25 12 1e 02 00    	jmp    *0x21e12(%rip)        # 4261b8 <_ZNKSo6sentrycvbEv@GLIBCXX_3.4>
  4043a6:	68 37 00 00 00       	push   $0x37
  4043ab:	e9 70 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043b0 <_ZNKSt6locale4nameB5cxx11Ev@plt>:
  4043b0:	ff 25 0a 1e 02 00    	jmp    *0x21e0a(%rip)        # 4261c0 <_ZNKSt6locale4nameB5cxx11Ev@GLIBCXX_3.4.21>
  4043b6:	68 38 00 00 00       	push   $0x38
  4043bb:	e9 60 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043c0 <memmove@plt>:
  4043c0:	ff 25 02 1e 02 00    	jmp    *0x21e02(%rip)        # 4261c8 <memmove@GLIBC_2.2.5>
  4043c6:	68 39 00 00 00       	push   $0x39
  4043cb:	e9 50 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043d0 <__cxa_end_catch@plt>:
  4043d0:	ff 25 fa 1d 02 00    	jmp    *0x21dfa(%rip)        # 4261d0 <__cxa_end_catch@CXXABI_1.3>
  4043d6:	68 3a 00 00 00       	push   $0x3a
  4043db:	e9 40 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043e0 <__gxx_personality_v0@plt>:
  4043e0:	ff 25 f2 1d 02 00    	jmp    *0x21df2(%rip)        # 4261d8 <__gxx_personality_v0@CXXABI_1.3>
  4043e6:	68 3b 00 00 00       	push   $0x3b
  4043eb:	e9 30 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043f0 <_ZSt8to_charsPcS_DF128_@plt>:
  4043f0:	ff 25 ea 1d 02 00    	jmp    *0x21dea(%rip)        # 4261e0 <_ZSt8to_charsPcS_DF128_@GLIBCXX_3.4.31>
  4043f6:	68 3c 00 00 00       	push   $0x3c
  4043fb:	e9 20 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404400 <__cxa_throw@plt>:
  404400:	ff 25 e2 1d 02 00    	jmp    *0x21de2(%rip)        # 4261e8 <__cxa_throw@CXXABI_1.3>
  404406:	68 3d 00 00 00       	push   $0x3d
  40440b:	e9 10 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404410 <_Unwind_Resume@plt>:
  404410:	ff 25 da 1d 02 00    	jmp    *0x21dda(%rip)        # 4261f0 <_Unwind_Resume@GCC_3.0>
  404416:	68 3e 00 00 00       	push   $0x3e
  40441b:	e9 00 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404420 <toupper@plt>:
  404420:	ff 25 d2 1d 02 00    	jmp    *0x21dd2(%rip)        # 4261f8 <toupper@GLIBC_2.2.5>
  404426:	68 3f 00 00 00       	push   $0x3f
  40442b:	e9 f0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404430 <frexp@plt>:
  404430:	ff 25 ca 1d 02 00    	jmp    *0x21dca(%rip)        # 426200 <frexp@GLIBC_2.2.5>
  404436:	68 40 00 00 00       	push   $0x40
  40443b:	e9 e0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404440 <_ZNSt13runtime_errorC2EPKc@plt>:
  404440:	ff 25 c2 1d 02 00    	jmp    *0x21dc2(%rip)        # 426208 <_ZNSt13runtime_errorC2EPKc@GLIBCXX_3.4.21>
  404446:	68 41 00 00 00       	push   $0x41
  40444b:	e9 d0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404450 <__cxa_pure_virtual@plt>:
  404450:	ff 25 ba 1d 02 00    	jmp    *0x21dba(%rip)        # 426210 <__cxa_pure_virtual@CXXABI_1.3>
  404456:	68 42 00 00 00       	push   $0x42
  40445b:	e9 c0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404460 <fwrite@plt>:
  404460:	ff 25 b2 1d 02 00    	jmp    *0x21db2(%rip)        # 426218 <fwrite@GLIBC_2.2.5>
  404466:	68 43 00 00 00       	push   $0x43
  40446b:	e9 b0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404470 <_ZNSt6localeC1Ev@plt>:
  404470:	ff 25 aa 1d 02 00    	jmp    *0x21daa(%rip)        # 426220 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  404476:	68 44 00 00 00       	push   $0x44
  40447b:	e9 a0 fb ff ff       	jmp    404020 <_init+0x20>

Disassembly of section .text:

0000000000404480 <_start>:
  404480:	31 ed                	xor    %ebp,%ebp
  404482:	49 89 d1             	mov    %rdx,%r9
  404485:	5e                   	pop    %rsi
  404486:	48 89 e2             	mov    %rsp,%rdx
  404489:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40448d:	50                   	push   %rax
  40448e:	54                   	push   %rsp
  40448f:	45 31 c0             	xor    %r8d,%r8d
  404492:	31 c9                	xor    %ecx,%ecx
  404494:	48 c7 c7 8d 45 40 00 	mov    $0x40458d,%rdi
  40449b:	ff 15 37 1b 02 00    	call   *0x21b37(%rip)        # 425fd8 <__libc_start_main@GLIBC_2.34>
  4044a1:	f4                   	hlt
  4044a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4044a9:	00 00 00
  4044ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004044b0 <_dl_relocate_static_pie>:
  4044b0:	c3                   	ret
  4044b1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4044b8:	00 00 00
  4044bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004044c0 <deregister_tm_clones>:
  4044c0:	b8 38 62 42 00       	mov    $0x426238,%eax
  4044c5:	48 3d 38 62 42 00    	cmp    $0x426238,%rax
  4044cb:	74 13                	je     4044e0 <deregister_tm_clones+0x20>
  4044cd:	b8 00 00 00 00       	mov    $0x0,%eax
  4044d2:	48 85 c0             	test   %rax,%rax
  4044d5:	74 09                	je     4044e0 <deregister_tm_clones+0x20>
  4044d7:	bf 38 62 42 00       	mov    $0x426238,%edi
  4044dc:	ff e0                	jmp    *%rax
  4044de:	66 90                	xchg   %ax,%ax
  4044e0:	c3                   	ret
  4044e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4044e8:	00 00 00 00
  4044ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004044f0 <register_tm_clones>:
  4044f0:	be 38 62 42 00       	mov    $0x426238,%esi
  4044f5:	48 81 ee 38 62 42 00 	sub    $0x426238,%rsi
  4044fc:	48 89 f0             	mov    %rsi,%rax
  4044ff:	48 c1 ee 3f          	shr    $0x3f,%rsi
  404503:	48 c1 f8 03          	sar    $0x3,%rax
  404507:	48 01 c6             	add    %rax,%rsi
  40450a:	48 d1 fe             	sar    %rsi
  40450d:	74 11                	je     404520 <register_tm_clones+0x30>
  40450f:	b8 00 00 00 00       	mov    $0x0,%eax
  404514:	48 85 c0             	test   %rax,%rax
  404517:	74 07                	je     404520 <register_tm_clones+0x30>
  404519:	bf 38 62 42 00       	mov    $0x426238,%edi
  40451e:	ff e0                	jmp    *%rax
  404520:	c3                   	ret
  404521:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  404528:	00 00 00 00
  40452c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404530 <__do_global_dtors_aux>:
  404530:	f3 0f 1e fa          	endbr64
  404534:	80 3d 35 1e 02 00 00 	cmpb   $0x0,0x21e35(%rip)        # 426370 <completed.0>
  40453b:	75 13                	jne    404550 <__do_global_dtors_aux+0x20>
  40453d:	55                   	push   %rbp
  40453e:	48 89 e5             	mov    %rsp,%rbp
  404541:	e8 7a ff ff ff       	call   4044c0 <deregister_tm_clones>
  404546:	c6 05 23 1e 02 00 01 	movb   $0x1,0x21e23(%rip)        # 426370 <completed.0>
  40454d:	5d                   	pop    %rbp
  40454e:	c3                   	ret
  40454f:	90                   	nop
  404550:	c3                   	ret
  404551:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  404558:	00 00 00 00
  40455c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404560 <frame_dummy>:
  404560:	f3 0f 1e fa          	endbr64
  404564:	eb 8a                	jmp    4044f0 <register_tm_clones>

0000000000404566 <_ZN7my_func3fooEv>:
namespace my_func {
	// no need to use std::
	using namespace std;

	void foo(void)
	{
  404566:	55                   	push   %rbp
  404567:	48 89 e5             	mov    %rsp,%rbp
		println("In {}", __FUNCTION__);
  40456a:	b8 05 00 00 00       	mov    $0x5,%eax
  40456f:	ba 42 b1 41 00       	mov    $0x41b142,%edx
  404574:	48 89 c1             	mov    %rax,%rcx
  404577:	48 89 d0             	mov    %rdx,%rax
  40457a:	ba 48 b1 41 00       	mov    $0x41b148,%edx
  40457f:	48 89 cf             	mov    %rcx,%rdi
  404582:	48 89 c6             	mov    %rax,%rsi
  404585:	e8 b6 3d 00 00       	call   408340 <_ZSt7printlnIJRA4_KcEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_>
	}
  40458a:	90                   	nop
  40458b:	5d                   	pop    %rbp
  40458c:	c3                   	ret

000000000040458d <main>:
}

using namespace my_func;

int main(void)
{
  40458d:	55                   	push   %rbp
  40458e:	48 89 e5             	mov    %rsp,%rbp
  404591:	41 57                	push   %r15
  404593:	41 56                	push   %r14
  404595:	41 55                	push   %r13
  404597:	41 54                	push   %r12
  404599:	53                   	push   %rbx
  40459a:	48 83 ec 38          	sub    $0x38,%rsp
  40459e:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
  4045a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4045a6:	90                   	nop

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
  4045a7:	90                   	nop
	std::string s {"Hallo \"Professional C++\" Buch :-)"};
  4045a8:	48 8d 55 c3          	lea    -0x3d(%rbp),%rdx
  4045ac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4045b0:	be 88 b1 41 00       	mov    $0x41b188,%esi
  4045b5:	48 89 c7             	mov    %rax,%rdi
  4045b8:	e8 95 22 00 00       	call   406852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
  4045bd:	90                   	nop
	std::println("{}", s);
  4045be:	41 be 02 00 00 00    	mov    $0x2,%r14d
  4045c4:	41 bf aa b1 41 00    	mov    $0x41b1aa,%r15d
  4045ca:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4045ce:	4c 89 f6             	mov    %r14,%rsi
  4045d1:	4c 89 f9             	mov    %r15,%rcx
  4045d4:	48 89 c2             	mov    %rax,%rdx
  4045d7:	48 89 f7             	mov    %rsi,%rdi
  4045da:	48 89 ce             	mov    %rcx,%rsi
  4045dd:	e8 91 44 00 00       	call   408a73 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>

	// std::cerr
	std::println(std::cerr, "Error code: {}", -1);
  4045e2:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%rbp)
  4045e9:	41 bc 0e 00 00 00    	mov    $0xe,%r12d
  4045ef:	41 bd ad b1 41 00    	mov    $0x41b1ad,%r13d
  4045f5:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
  4045f9:	4c 89 e6             	mov    %r12,%rsi
  4045fc:	4c 89 ea             	mov    %r13,%rdx
  4045ff:	48 89 c1             	mov    %rax,%rcx
  404602:	bf 60 62 42 00       	mov    $0x426260,%edi
  404607:	e8 b7 44 00 00       	call   408ac3 <_ZSt7printlnIJiEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS3_>

	// within the namespaces using scope resolution operator
	my_func::foo();
  40460c:	e8 55 ff ff ff       	call   404566 <_ZN7my_func3fooEv>
	// using directive
	foo();
  404611:	e8 50 ff ff ff       	call   404566 <_ZN7my_func3fooEv>

	exit (EXIT_SUCCESS);
  404616:	bf 00 00 00 00       	mov    $0x0,%edi
  40461b:	e8 c0 fc ff ff       	call   4042e0 <exit@plt>
}
  404620:	48 89 c3             	mov    %rax,%rbx
  404623:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  404627:	48 89 c7             	mov    %rax,%rdi
  40462a:	e8 03 2f 00 00       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40462f:	48 89 d8             	mov    %rbx,%rax
  404632:	48 89 c7             	mov    %rax,%rdi
  404635:	e8 d6 fd ff ff       	call   404410 <_Unwind_Resume@plt>

000000000040463a <_ZSt21is_constant_evaluatedv>:
  40463a:	55                   	push   %rbp
  40463b:	48 89 e5             	mov    %rsp,%rbp
  40463e:	b8 00 00 00 00       	mov    $0x0,%eax
  404643:	5d                   	pop    %rbp
  404644:	c3                   	ret

0000000000404645 <_ZSteqSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    { return weak_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    [[nodiscard]]
    friend constexpr bool
    operator==(strong_ordering __v, __cmp_cat::__unspec) noexcept
  404645:	55                   	push   %rbp
  404646:	48 89 e5             	mov    %rsp,%rbp
  404649:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value == 0; }
  40464d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  404651:	84 c0                	test   %al,%al
  404653:	0f 94 c0             	sete   %al
  404656:	5d                   	pop    %rbp
  404657:	c3                   	ret

0000000000404658 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
  404658:	55                   	push   %rbp
  404659:	48 89 e5             	mov    %rsp,%rbp
  40465c:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value < 0; }
  404660:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  404664:	c0 e8 07             	shr    $0x7,%al
  404667:	5d                   	pop    %rbp
  404668:	c3                   	ret

0000000000404669 <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
  404669:	55                   	push   %rbp
  40466a:	48 89 e5             	mov    %rsp,%rbp
  40466d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404671:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404675:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404679:	5d                   	pop    %rbp
  40467a:	c3                   	ret

000000000040467b <_ZN9__gnu_cxx5__ops15__iter_less_valEv>:
  };

  _GLIBCXX20_CONSTEXPR
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }
  40467b:	55                   	push   %rbp
  40467c:	48 89 e5             	mov    %rsp,%rbp
  40467f:	90                   	nop
  404680:	5d                   	pop    %rbp
  404681:	c3                   	ret

0000000000404682 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>:
  };

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }
  404682:	55                   	push   %rbp
  404683:	48 89 e5             	mov    %rsp,%rbp
  404686:	90                   	nop
  404687:	5d                   	pop    %rbp
  404688:	c3                   	ret

0000000000404689 <_ZSt8to_charsPcS_mi>:
_GLIBCXX_TO_CHARS(signed short)
_GLIBCXX_TO_CHARS(unsigned short)
_GLIBCXX_TO_CHARS(signed int)
_GLIBCXX_TO_CHARS(unsigned int)
_GLIBCXX_TO_CHARS(signed long)
_GLIBCXX_TO_CHARS(unsigned long)
  404689:	55                   	push   %rbp
  40468a:	48 89 e5             	mov    %rsp,%rbp
  40468d:	48 83 ec 20          	sub    $0x20,%rsp
  404691:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404695:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404699:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40469d:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  4046a0:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  4046a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4046a7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4046ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4046af:	48 89 c7             	mov    %rax,%rdi
  4046b2:	e8 e4 28 00 00       	call   406f9b <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i>
  4046b7:	c9                   	leave
  4046b8:	c3                   	ret

00000000004046b9 <_ZSt11__bit_widthIjEiT_>:
      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
    }

  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
  4046b9:	55                   	push   %rbp
  4046ba:	48 89 e5             	mov    %rsp,%rbp
  4046bd:	48 83 ec 20          	sub    $0x20,%rsp
  4046c1:	89 7d ec             	mov    %edi,-0x14(%rbp)
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  4046c4:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  4046cb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4046ce:	89 c7                	mov    %eax,%edi
  4046d0:	e8 cc 2b 00 00       	call   4072a1 <_ZSt13__countl_zeroIjEiT_>
  4046d5:	ba 20 00 00 00       	mov    $0x20,%edx
  4046da:	29 c2                	sub    %eax,%edx
  4046dc:	89 d0                	mov    %edx,%eax
    }
  4046de:	c9                   	leave
  4046df:	c3                   	ret

00000000004046e0 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  4046e0:	55                   	push   %rbp
  4046e1:	48 89 e5             	mov    %rsp,%rbp
  4046e4:	48 83 ec 10          	sub    $0x10,%rsp
  4046e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
  4046f0:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
  4046f5:	84 c0                	test   %al,%al
  4046f7:	74 15                	je     40470e <_ZNSt11char_traitsIcE6assignERcRKc+0x2e>
	  std::construct_at(__builtin_addressof(__c1), __c2);
  4046f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4046fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404701:	48 89 d6             	mov    %rdx,%rsi
  404704:	48 89 c7             	mov    %rax,%rdi
  404707:	e8 d6 2b 00 00       	call   4072e2 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	else
#endif
	__c1 = __c2;
      }
  40470c:	eb 0d                	jmp    40471b <_ZNSt11char_traitsIcE6assignERcRKc+0x3b>
	__c1 = __c2;
  40470e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404712:	0f b6 10             	movzbl (%rax),%edx
  404715:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404719:	88 10                	mov    %dl,(%rax)
      }
  40471b:	90                   	nop
  40471c:	c9                   	leave
  40471d:	c3                   	ret

000000000040471e <_ZNSt11char_traitsIcE2eqERKcS2_>:

      static _GLIBCXX_CONSTEXPR bool
      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  40471e:	55                   	push   %rbp
  40471f:	48 89 e5             	mov    %rsp,%rbp
  404722:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404726:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
  40472a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40472e:	0f b6 10             	movzbl (%rax),%edx
  404731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404735:	0f b6 00             	movzbl (%rax),%eax
  404738:	38 c2                	cmp    %al,%dl
  40473a:	0f 94 c0             	sete   %al
  40473d:	5d                   	pop    %rbp
  40473e:	c3                   	ret

000000000040473f <_ZNSt11char_traitsIcE2ltERKcS2_>:

      static _GLIBCXX_CONSTEXPR bool
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  40473f:	55                   	push   %rbp
  404740:	48 89 e5             	mov    %rsp,%rbp
  404743:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404747:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	// LWG 467.
	return (static_cast<unsigned char>(__c1)
  40474b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40474f:	0f b6 00             	movzbl (%rax),%eax
  404752:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
  404754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404758:	0f b6 00             	movzbl (%rax),%eax
  40475b:	38 c2                	cmp    %al,%dl
  40475d:	0f 92 c0             	setb   %al
      }
  404760:	5d                   	pop    %rbp
  404761:	c3                   	ret

0000000000404762 <_ZNSt11char_traitsIcE7compareEPKcS2_m>:

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
  404762:	55                   	push   %rbp
  404763:	48 89 e5             	mov    %rsp,%rbp
  404766:	48 83 ec 30          	sub    $0x30,%rsp
  40476a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40476e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404772:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      {
	if (__n == 0)
  404776:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40477b:	75 0a                	jne    404787 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
  40477d:	b8 00 00 00 00       	mov    $0x0,%eax
  404782:	e9 99 00 00 00       	jmp    404820 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
  404787:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  40478c:	84 c0                	test   %al,%al
  40478e:	74 78                	je     404808 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	  {
	    for (size_t __i = 0; __i < __n; ++__i)
  404790:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  404797:	00
  404798:	eb 5d                	jmp    4047f7 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
  40479a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40479e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047a2:	48 01 c2             	add    %rax,%rdx
  4047a5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4047a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047ad:	48 01 c8             	add    %rcx,%rax
  4047b0:	48 89 d6             	mov    %rdx,%rsi
  4047b3:	48 89 c7             	mov    %rax,%rdi
  4047b6:	e8 84 ff ff ff       	call   40473f <_ZNSt11char_traitsIcE2ltERKcS2_>
  4047bb:	84 c0                	test   %al,%al
  4047bd:	74 07                	je     4047c6 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
  4047bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4047c4:	eb 5a                	jmp    404820 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
  4047c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4047ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047ce:	48 01 c2             	add    %rax,%rdx
  4047d1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4047d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047d9:	48 01 c8             	add    %rcx,%rax
  4047dc:	48 89 d6             	mov    %rdx,%rsi
  4047df:	48 89 c7             	mov    %rax,%rdi
  4047e2:	e8 58 ff ff ff       	call   40473f <_ZNSt11char_traitsIcE2ltERKcS2_>
  4047e7:	84 c0                	test   %al,%al
  4047e9:	74 07                	je     4047f2 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
  4047eb:	b8 01 00 00 00       	mov    $0x1,%eax
  4047f0:	eb 2e                	jmp    404820 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
  4047f2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  4047f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047fb:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  4047ff:	72 99                	jb     40479a <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
  404801:	b8 00 00 00 00       	mov    $0x0,%eax
  404806:	eb 18                	jmp    404820 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
  404808:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40480c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404810:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404814:	48 89 ce             	mov    %rcx,%rsi
  404817:	48 89 c7             	mov    %rax,%rdi
  40481a:	e8 c1 f8 ff ff       	call   4040e0 <memcmp@plt>
  40481f:	90                   	nop
      }
  404820:	c9                   	leave
  404821:	c3                   	ret

0000000000404822 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
  404822:	55                   	push   %rbp
  404823:	48 89 e5             	mov    %rsp,%rbp
  404826:	48 83 ec 10          	sub    $0x10,%rsp
  40482a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40482e:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  404833:	84 c0                	test   %al,%al
  404835:	74 0e                	je     404845 <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
  404837:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40483b:	48 89 c7             	mov    %rax,%rdi
  40483e:	e8 2d 13 00 00       	call   405b70 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
  404843:	eb 0d                	jmp    404852 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
  404845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404849:	48 89 c7             	mov    %rax,%rdi
  40484c:	e8 5f f8 ff ff       	call   4040b0 <strlen@plt>
  404851:	90                   	nop
      }
  404852:	c9                   	leave
  404853:	c3                   	ret

0000000000404854 <_ZNSt11char_traitsIcE4findEPKcmRS1_>:

      static _GLIBCXX17_CONSTEXPR const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
  404854:	55                   	push   %rbp
  404855:	48 89 e5             	mov    %rsp,%rbp
  404858:	48 83 ec 20          	sub    $0x20,%rsp
  40485c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404860:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404864:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  404868:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40486d:	75 07                	jne    404876 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x22>
	  return 0;
  40486f:	b8 00 00 00 00       	mov    $0x0,%eax
  404874:	eb 3f                	jmp    4048b5 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x61>
  404876:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  40487b:	84 c0                	test   %al,%al
  40487d:	74 19                	je     404898 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x44>
	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
  40487f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404883:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404887:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40488b:	48 89 ce             	mov    %rcx,%rsi
  40488e:	48 89 c7             	mov    %rax,%rdi
  404891:	e8 0e 1a 00 00       	call   4062a4 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_>
  404896:	eb 1d                	jmp    4048b5 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x61>
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
  404898:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40489c:	0f b6 00             	movzbl (%rax),%eax
  40489f:	0f be c8             	movsbl %al,%ecx
  4048a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4048a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4048aa:	89 ce                	mov    %ecx,%esi
  4048ac:	48 89 c7             	mov    %rax,%rdi
  4048af:	e8 0c fa ff ff       	call   4042c0 <memchr@plt>
  4048b4:	90                   	nop
      }
  4048b5:	c9                   	leave
  4048b6:	c3                   	ret

00000000004048b7 <_ZNSt11char_traitsIcE4moveEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
  4048b7:	55                   	push   %rbp
  4048b8:	48 89 e5             	mov    %rsp,%rbp
  4048bb:	48 83 ec 20          	sub    $0x20,%rsp
  4048bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4048c3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4048c7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  4048cb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4048d0:	75 06                	jne    4048d8 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x21>
	  return __s1;
  4048d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4048d6:	eb 3a                	jmp    404912 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
  4048d8:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  4048dd:	84 c0                	test   %al,%al
  4048df:	74 19                	je     4048fa <_ZNSt11char_traitsIcE4moveEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
  4048e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4048e5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4048e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4048ed:	48 89 ce             	mov    %rcx,%rsi
  4048f0:	48 89 c7             	mov    %rax,%rdi
  4048f3:	e8 2a 2a 00 00       	call   407322 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>
  4048f8:	eb 18                	jmp    404912 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
  4048fa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4048fe:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404906:	48 89 ce             	mov    %rcx,%rsi
  404909:	48 89 c7             	mov    %rax,%rdi
  40490c:	e8 af fa ff ff       	call   4043c0 <memmove@plt>
  404911:	90                   	nop
      }
  404912:	c9                   	leave
  404913:	c3                   	ret

0000000000404914 <_ZNSt11char_traitsIcE4copyEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
  404914:	55                   	push   %rbp
  404915:	48 89 e5             	mov    %rsp,%rbp
  404918:	48 83 ec 20          	sub    $0x20,%rsp
  40491c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404920:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404924:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  404928:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40492d:	75 06                	jne    404935 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x21>
	  return __s1;
  40492f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404933:	eb 40                	jmp    404975 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
  404935:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  40493a:	84 c0                	test   %al,%al
  40493c:	74 19                	je     404957 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
  40493e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404942:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404946:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40494a:	48 89 ce             	mov    %rcx,%rsi
  40494d:	48 89 c7             	mov    %rax,%rdi
  404950:	e8 31 2a 00 00       	call   407386 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
  404955:	eb 1e                	jmp    404975 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  404957:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40495b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40495f:	48 89 d1             	mov    %rdx,%rcx
  404962:	48 89 c6             	mov    %rax,%rsi
  404965:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404969:	48 89 c2             	mov    %rax,%rdx
  40496c:	48 89 cf             	mov    %rcx,%rdi
  40496f:	e8 bc f8 ff ff       	call   404230 <memcpy@plt>
  404974:	90                   	nop
      }
  404975:	c9                   	leave
  404976:	c3                   	ret

0000000000404977 <_ZNSt11char_traitsIcE6assignEPcmc>:

      static _GLIBCXX20_CONSTEXPR char_type*
      assign(char_type* __s, size_t __n, char_type __a)
  404977:	55                   	push   %rbp
  404978:	48 89 e5             	mov    %rsp,%rbp
  40497b:	48 83 ec 20          	sub    $0x20,%rsp
  40497f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404983:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404987:	89 d0                	mov    %edx,%eax
  404989:	88 45 ec             	mov    %al,-0x14(%rbp)
      {
	if (__n == 0)
  40498c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  404991:	75 06                	jne    404999 <_ZNSt11char_traitsIcE6assignEPcmc+0x22>
	  return __s;
  404993:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404997:	eb 39                	jmp    4049d2 <_ZNSt11char_traitsIcE6assignEPcmc+0x5b>
  404999:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  40499e:	84 c0                	test   %al,%al
  4049a0:	74 19                	je     4049bb <_ZNSt11char_traitsIcE6assignEPcmc+0x44>
	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
  4049a2:	0f be 55 ec          	movsbl -0x14(%rbp),%edx
  4049a6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4049aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049ae:	48 89 ce             	mov    %rcx,%rsi
  4049b1:	48 89 c7             	mov    %rax,%rdi
  4049b4:	e8 5b 2a 00 00       	call   407414 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc>
  4049b9:	eb 17                	jmp    4049d2 <_ZNSt11char_traitsIcE6assignEPcmc+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
  4049bb:	0f be 4d ec          	movsbl -0x14(%rbp),%ecx
  4049bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4049c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049c7:	89 ce                	mov    %ecx,%esi
  4049c9:	48 89 c7             	mov    %rax,%rdi
  4049cc:	e8 6f f7 ff ff       	call   404140 <memset@plt>
  4049d1:	90                   	nop
      }
  4049d2:	c9                   	leave
  4049d3:	c3                   	ret

00000000004049d4 <_ZSt10__sv_checkmmPKc>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  // Helper for basic_string and basic_string_view members.
  constexpr size_t
  __sv_check(size_t __size, size_t __pos, const char* __s)
  {
  4049d4:	55                   	push   %rbp
  4049d5:	48 89 e5             	mov    %rsp,%rbp
  4049d8:	48 83 ec 20          	sub    $0x20,%rsp
  4049dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4049e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4049e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if (__pos > __size)
  4049e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4049ec:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4049f0:	73 1e                	jae    404a10 <_ZSt10__sv_checkmmPKc+0x3c>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
  4049f2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4049f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4049fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4049fe:	48 89 c6             	mov    %rax,%rsi
  404a01:	bf 10 b0 41 00       	mov    $0x41b010,%edi
  404a06:	b8 00 00 00 00       	mov    $0x0,%eax
  404a0b:	e8 60 f9 ff ff       	call   404370 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
				   "(which is %zu)"), __s, __pos, __size);
    return __pos;
  404a10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  }
  404a14:	c9                   	leave
  404a15:	c3                   	ret

0000000000404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_data() const
      { return _M_dataplus._M_p; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_local_data()
  404a16:	55                   	push   %rbp
  404a17:	48 89 e5             	mov    %rsp,%rbp
  404a1a:	48 83 ec 10          	sub    $0x10,%rsp
  404a1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  404a22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a26:	48 83 c0 10          	add    $0x10,%rax
  404a2a:	48 89 c7             	mov    %rax,%rdi
  404a2d:	e8 02 00 00 00       	call   404a34 <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>
#else
	return pointer(_M_local_buf);
#endif
      }
  404a32:	c9                   	leave
  404a33:	c3                   	ret

0000000000404a34 <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
  404a34:	55                   	push   %rbp
  404a35:	48 89 e5             	mov    %rsp,%rbp
  404a38:	48 83 ec 10          	sub    $0x10,%rsp
  404a3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  404a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a44:	48 89 c7             	mov    %rax,%rdi
  404a47:	e8 02 00 00 00       	call   404a4e <_ZSt9addressofIcEPT_RS0_>
  404a4c:	c9                   	leave
  404a4d:	c3                   	ret

0000000000404a4e <_ZSt9addressofIcEPT_RS0_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
  404a4e:	55                   	push   %rbp
  404a4f:	48 89 e5             	mov    %rsp,%rbp
  404a52:	48 83 ec 10          	sub    $0x10,%rsp
  404a56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  404a5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a5e:	48 89 c7             	mov    %rax,%rdi
  404a61:	e8 02 00 00 00       	call   404a68 <_ZSt11__addressofIcEPT_RS0_>
  404a66:	c9                   	leave
  404a67:	c3                   	ret

0000000000404a68 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  404a68:	55                   	push   %rbp
  404a69:	48 89 e5             	mov    %rsp,%rbp
  404a6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  404a70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a74:	5d                   	pop    %rbp
  404a75:	c3                   	ret

0000000000404a76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
  404a76:	55                   	push   %rbp
  404a77:	48 89 e5             	mov    %rsp,%rbp
  404a7a:	48 83 ec 40          	sub    $0x40,%rsp
  404a7e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404a82:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  404a86:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404a8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a8e:	48 89 c7             	mov    %rax,%rdi
  404a91:	e8 2c 00 00 00       	call   404ac2 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
  404a96:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404a9a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  404a9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404aa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404aa6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  404aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404aae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  404ab2:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  404ab3:	90                   	nop
  404ab4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404ab8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  404abc:	48 89 10             	mov    %rdx,(%rax)
  404abf:	90                   	nop
  404ac0:	c9                   	leave
  404ac1:	c3                   	ret

0000000000404ac2 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
  404ac2:	55                   	push   %rbp
  404ac3:	48 89 e5             	mov    %rsp,%rbp
  404ac6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  404aca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ace:	5d                   	pop    %rbp
  404acf:	c3                   	ret

0000000000404ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      struct _Alloc_hider : allocator_type // TODO check __is_final
  404ad0:	55                   	push   %rbp
  404ad1:	48 89 e5             	mov    %rsp,%rbp
  404ad4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404ad8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404adc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      ~allocator() _GLIBCXX_NOTHROW { }
  404ae0:	90                   	nop
  404ae1:	90                   	nop
  404ae2:	5d                   	pop    %rbp
  404ae3:	c3                   	ret

0000000000404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:

      /**
       *  @brief  Default constructor creates an empty string.
       */
      _GLIBCXX20_CONSTEXPR
      basic_string()
  404ae4:	55                   	push   %rbp
  404ae5:	48 89 e5             	mov    %rsp,%rbp
  404ae8:	53                   	push   %rbx
  404ae9:	48 83 ec 38          	sub    $0x38,%rsp
  404aed:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
  404af1:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  404af5:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  404af9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  404afd:	90                   	nop
      allocator() _GLIBCXX_NOTHROW { }
  404afe:	90                   	nop
  404aff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404b03:	48 89 c7             	mov    %rax,%rdi
  404b06:	e8 0b ff ff ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  404b0b:	48 89 c1             	mov    %rax,%rcx
  404b0e:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  404b12:	48 89 c2             	mov    %rax,%rdx
  404b15:	48 89 ce             	mov    %rcx,%rsi
  404b18:	48 89 df             	mov    %rbx,%rdi
  404b1b:	e8 56 ff ff ff       	call   404a76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
      ~allocator() _GLIBCXX_NOTHROW { }
  404b20:	90                   	nop
  404b21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404b25:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
  404b29:	e8 0c fb ff ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  404b2e:	84 c0                	test   %al,%al
  404b30:	74 28                	je     404b5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x76>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  404b32:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  404b39:	00
  404b3a:	eb 17                	jmp    404b53 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x6f>
	    _M_local_buf[__i] = _CharT();
  404b3c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404b40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404b44:	48 01 d0             	add    %rdx,%rax
  404b47:	48 83 c0 10          	add    $0x10,%rax
  404b4b:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  404b4e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  404b53:	48 83 7d e0 0f       	cmpq   $0xf,-0x20(%rbp)
  404b58:	76 e2                	jbe    404b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x58>
      }
  404b5a:	90                   	nop
      {
	_M_init_local_buf();
	_M_set_length(0);
  404b5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404b5f:	be 00 00 00 00       	mov    $0x0,%esi
  404b64:	48 89 c7             	mov    %rax,%rdi
  404b67:	e8 7a 29 00 00       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  404b6c:	90                   	nop
  404b6d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  404b71:	c9                   	leave
  404b72:	c3                   	ret

0000000000404b73 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
#endif

  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404b73:	55                   	push   %rbp
  404b74:	48 89 e5             	mov    %rsp,%rbp
  404b77:	89 7d dc             	mov    %edi,-0x24(%rbp)
  404b7a:	89 75 d8             	mov    %esi,-0x28(%rbp)
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      unsigned __n = 1;
  404b7d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404b84:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404b87:	0f af c0             	imul   %eax,%eax
  404b8a:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404b8d:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404b90:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404b93:	0f af c2             	imul   %edx,%eax
  404b96:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404b99:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404b9c:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404ba0:	89 c0                	mov    %eax,%eax
  404ba2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
  404ba6:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404ba9:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  404bac:	73 05                	jae    404bb3 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x40>
  404bae:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bb1:	eb 46                	jmp    404bf9 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b2) return __n + 1;
  404bb3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404bb6:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  404bb9:	73 08                	jae    404bc3 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x50>
  404bbb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bbe:	83 c0 01             	add    $0x1,%eax
  404bc1:	eb 36                	jmp    404bf9 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b3) return __n + 2;
  404bc3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404bc6:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  404bc9:	73 08                	jae    404bd3 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
  404bcb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bce:	83 c0 02             	add    $0x2,%eax
  404bd1:	eb 26                	jmp    404bf9 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b4) return __n + 3;
  404bd3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404bd6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404bda:	73 08                	jae    404be4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x71>
  404bdc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bdf:	83 c0 03             	add    $0x3,%eax
  404be2:	eb 15                	jmp    404bf9 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  __value /= __b4;
  404be4:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404be7:	ba 00 00 00 00       	mov    $0x0,%edx
  404bec:	48 f7 75 e8          	divq   -0x18(%rbp)
  404bf0:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  __n += 4;
  404bf3:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404bf7:	eb ad                	jmp    404ba6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x33>
	}
    }
  404bf9:	5d                   	pop    %rbp
  404bfa:	c3                   	ret

0000000000404bfb <_ZNSt8__detail14__to_chars_lenImEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404bfb:	55                   	push   %rbp
  404bfc:	48 89 e5             	mov    %rsp,%rbp
  404bff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404c03:	89 75 d4             	mov    %esi,-0x2c(%rbp)
      unsigned __n = 1;
  404c06:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404c0d:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c10:	0f af c0             	imul   %eax,%eax
  404c13:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404c16:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c19:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404c1c:	0f af c2             	imul   %edx,%eax
  404c1f:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404c22:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c25:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404c29:	89 c0                	mov    %eax,%eax
  404c2b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404c2f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c32:	89 c0                	mov    %eax,%eax
  404c34:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404c38:	73 05                	jae    404c3f <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x44>
  404c3a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c3d:	eb 4b                	jmp    404c8a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b2) return __n + 1;
  404c3f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  404c42:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404c46:	73 08                	jae    404c50 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x55>
  404c48:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c4b:	83 c0 01             	add    $0x1,%eax
  404c4e:	eb 3a                	jmp    404c8a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b3) return __n + 2;
  404c50:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404c53:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404c57:	73 08                	jae    404c61 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x66>
  404c59:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c5c:	83 c0 02             	add    $0x2,%eax
  404c5f:	eb 29                	jmp    404c8a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b4) return __n + 3;
  404c61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404c65:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404c69:	73 08                	jae    404c73 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x78>
  404c6b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c6e:	83 c0 03             	add    $0x3,%eax
  404c71:	eb 17                	jmp    404c8a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  __value /= __b4;
  404c73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404c77:	ba 00 00 00 00       	mov    $0x0,%edx
  404c7c:	48 f7 75 e8          	divq   -0x18(%rbp)
  404c80:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  __n += 4;
  404c84:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404c88:	eb a5                	jmp    404c2f <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x34>
    }
  404c8a:	5d                   	pop    %rbp
  404c8b:	c3                   	ret

0000000000404c8c <_ZNSt8__detail14__to_chars_lenIyEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404c8c:	55                   	push   %rbp
  404c8d:	48 89 e5             	mov    %rsp,%rbp
  404c90:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404c94:	89 75 d4             	mov    %esi,-0x2c(%rbp)
      unsigned __n = 1;
  404c97:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404c9e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404ca1:	0f af c0             	imul   %eax,%eax
  404ca4:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404ca7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404caa:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404cad:	0f af c2             	imul   %edx,%eax
  404cb0:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404cb3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404cb6:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404cba:	89 c0                	mov    %eax,%eax
  404cbc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404cc0:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404cc3:	89 c0                	mov    %eax,%eax
  404cc5:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404cc9:	73 05                	jae    404cd0 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x44>
  404ccb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404cce:	eb 4b                	jmp    404d1b <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b2) return __n + 1;
  404cd0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  404cd3:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404cd7:	73 08                	jae    404ce1 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x55>
  404cd9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404cdc:	83 c0 01             	add    $0x1,%eax
  404cdf:	eb 3a                	jmp    404d1b <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b3) return __n + 2;
  404ce1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404ce4:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404ce8:	73 08                	jae    404cf2 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x66>
  404cea:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404ced:	83 c0 02             	add    $0x2,%eax
  404cf0:	eb 29                	jmp    404d1b <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b4) return __n + 3;
  404cf2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404cf6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404cfa:	73 08                	jae    404d04 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x78>
  404cfc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404cff:	83 c0 03             	add    $0x3,%eax
  404d02:	eb 17                	jmp    404d1b <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  __value /= __b4;
  404d04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404d08:	ba 00 00 00 00       	mov    $0x0,%edx
  404d0d:	48 f7 75 e8          	divq   -0x18(%rbp)
  404d11:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  __n += 4;
  404d15:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404d19:	eb a5                	jmp    404cc0 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x34>
    }
  404d1b:	5d                   	pop    %rbp
  404d1c:	c3                   	ret
  404d1d:	90                   	nop

0000000000404d1e <_ZNKSt8ios_base6getlocEv>:
     *  If @c imbue(loc) has previously been called, then this function
     *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),
     *  the global C++ locale.
    */
    locale
    getloc() const
  404d1e:	55                   	push   %rbp
  404d1f:	48 89 e5             	mov    %rsp,%rbp
  404d22:	48 83 ec 10          	sub    $0x10,%rsp
  404d26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d2a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _M_ios_locale; }
  404d2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d32:	48 8d 90 d0 00 00 00 	lea    0xd0(%rax),%rdx
  404d39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d3d:	48 89 d6             	mov    %rdx,%rsi
  404d40:	48 89 c7             	mov    %rax,%rdi
  404d43:	e8 58 f4 ff ff       	call   4041a0 <_ZNSt6localeC1ERKS_@plt>
  404d48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d4c:	c9                   	leave
  404d4d:	c3                   	ret

0000000000404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
  404d4e:	55                   	push   %rbp
  404d4f:	48 89 e5             	mov    %rsp,%rbp
  404d52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  404d56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d5a:	48 8b 40 08          	mov    0x8(%rax),%rax
  404d5e:	5d                   	pop    %rbp
  404d5f:	c3                   	ret

0000000000404d60 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>:
    template<>
      class __extent_storage<dynamic_extent>
      {
      public:
	constexpr
	__extent_storage(size_t __extent) noexcept
  404d60:	55                   	push   %rbp
  404d61:	48 89 e5             	mov    %rsp,%rbp
  404d64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_extent_value(__extent)
  404d6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d70:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404d74:	48 89 10             	mov    %rdx,(%rax)
	{ }
  404d77:	90                   	nop
  404d78:	5d                   	pop    %rbp
  404d79:	c3                   	ret

0000000000404d7a <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>:

	constexpr size_t
	_M_extent() const noexcept
  404d7a:	55                   	push   %rbp
  404d7b:	48 89 e5             	mov    %rsp,%rbp
  404d7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return this->_M_extent_value; }
  404d82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d86:	48 8b 00             	mov    (%rax),%rax
  404d89:	5d                   	pop    %rbp
  404d8a:	c3                   	ret

0000000000404d8b <_ZNSt9__unicode17__is_scalar_valueEDi>:
namespace __unicode
{
  // A Unicode code point that is not a high or low surrogate.
  constexpr bool
  __is_scalar_value(char32_t __c)
  {
  404d8b:	55                   	push   %rbp
  404d8c:	48 89 e5             	mov    %rsp,%rbp
  404d8f:	89 7d fc             	mov    %edi,-0x4(%rbp)
    if (__c < 0xD800) [[likely]]
  404d92:	81 7d fc ff d7 00 00 	cmpl   $0xd7ff,-0x4(%rbp)
  404d99:	77 07                	ja     404da2 <_ZNSt9__unicode17__is_scalar_valueEDi+0x17>
      return true;
  404d9b:	b8 01 00 00 00       	mov    $0x1,%eax
  404da0:	eb 1f                	jmp    404dc1 <_ZNSt9__unicode17__is_scalar_valueEDi+0x36>
    return 0xDFFF < __c && __c <= 0x10FFFF;
  404da2:	81 7d fc ff df 00 00 	cmpl   $0xdfff,-0x4(%rbp)
  404da9:	76 10                	jbe    404dbb <_ZNSt9__unicode17__is_scalar_valueEDi+0x30>
  404dab:	81 7d fc ff ff 10 00 	cmpl   $0x10ffff,-0x4(%rbp)
  404db2:	77 07                	ja     404dbb <_ZNSt9__unicode17__is_scalar_valueEDi+0x30>
  404db4:	b8 01 00 00 00       	mov    $0x1,%eax
  404db9:	eb 05                	jmp    404dc0 <_ZNSt9__unicode17__is_scalar_valueEDi+0x35>
  404dbb:	b8 00 00 00 00       	mov    $0x0,%eax
  404dc0:	90                   	nop
  }
  404dc1:	5d                   	pop    %rbp
  404dc2:	c3                   	ret
  404dc3:	90                   	nop

0000000000404dc4 <_ZNKSt9__unicode5_ReplclEv>:
  // Based on https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2728r6.html#add-the-transcoding-iterator-template

  struct _Repl
  {
    constexpr char32_t
    operator()() const noexcept
  404dc4:	55                   	push   %rbp
  404dc5:	48 89 e5             	mov    %rsp,%rbp
  404dc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return 0xFFFD; }
  404dcc:	b8 fd ff 00 00       	mov    $0xfffd,%eax
  404dd1:	5d                   	pop    %rbp
  404dd2:	c3                   	ret

0000000000404dd3 <_ZNSt9__unicode9__v15_1_013__field_widthEDi>:
#endif

  // The field width of a code point.
  constexpr int
  __field_width(char32_t __c) noexcept
  {
  404dd3:	55                   	push   %rbp
  404dd4:	48 89 e5             	mov    %rsp,%rbp
  404dd7:	48 83 ec 20          	sub    $0x20,%rsp
  404ddb:	89 7d ec             	mov    %edi,-0x14(%rbp)
    if (__c < __width_edges[0]) [[likely]]
  404dde:	ba 00 11 00 00       	mov    $0x1100,%edx
  404de3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404de6:	39 d0                	cmp    %edx,%eax
  404de8:	73 07                	jae    404df1 <_ZNSt9__unicode9__v15_1_013__field_widthEDi+0x1e>
      return 1;
  404dea:	b8 01 00 00 00       	mov    $0x1,%eax
  404def:	eb 48                	jmp    404e39 <_ZNSt9__unicode9__v15_1_013__field_widthEDi+0x66>
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }
  404df1:	b9 80 b8 41 00       	mov    $0x41b880,%ecx

    auto* __p = std::upper_bound(__width_edges, std::end(__width_edges), __c);
  404df6:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  404dfa:	48 89 c2             	mov    %rax,%rdx
  404dfd:	48 89 ce             	mov    %rcx,%rsi
  404e00:	bf 60 b5 41 00       	mov    $0x41b560,%edi
  404e05:	e8 21 32 00 00       	call   40802b <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>
  404e0a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (__p - __width_edges) % 2 + 1;
  404e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e12:	48 2d 60 b5 41 00    	sub    $0x41b560,%rax
  404e18:	48 c1 f8 02          	sar    $0x2,%rax
  404e1c:	48 89 c2             	mov    %rax,%rdx
  404e1f:	48 89 d0             	mov    %rdx,%rax
  404e22:	48 c1 f8 3f          	sar    $0x3f,%rax
  404e26:	48 c1 e8 3f          	shr    $0x3f,%rax
  404e2a:	48 01 c2             	add    %rax,%rdx
  404e2d:	83 e2 01             	and    $0x1,%edx
  404e30:	48 29 c2             	sub    %rax,%rdx
  404e33:	48 89 d0             	mov    %rdx,%rax
  404e36:	83 c0 01             	add    $0x1,%eax
  }
  404e39:	c9                   	leave
  404e3a:	c3                   	ret

0000000000404e3b <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>:

  // @pre c <= 0x10FFFF
  constexpr _Gcb_property
  __grapheme_cluster_break_property(char32_t __c) noexcept
  {
  404e3b:	55                   	push   %rbp
  404e3c:	48 89 e5             	mov    %rsp,%rbp
  404e3f:	48 83 ec 30          	sub    $0x30,%rsp
  404e43:	89 7d dc             	mov    %edi,-0x24(%rbp)
    constexpr uint32_t __mask = (1 << __gcb_shift_bits) - 1;
  404e46:	c7 45 fc 0f 00 00 00 	movl   $0xf,-0x4(%rbp)
  404e4d:	b8 10 d3 41 00       	mov    $0x41d310,%eax
    auto* __end = std::end(__gcb_edges);
  404e52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    auto* __p = std::lower_bound(__gcb_edges, __end,
				 (__c << __gcb_shift_bits) | __mask);
  404e56:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404e59:	c1 e0 04             	shl    $0x4,%eax
  404e5c:	83 c8 0f             	or     $0xf,%eax
  404e5f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    auto* __p = std::lower_bound(__gcb_edges, __end,
  404e62:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  404e66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404e6a:	48 89 c6             	mov    %rax,%rsi
  404e6d:	bf 80 b8 41 00       	mov    $0x41b880,%edi
  404e72:	e8 e6 31 00 00       	call   40805d <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>
  404e77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    return _Gcb_property(__p[-1] & __mask);
  404e7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404e7f:	48 83 e8 04          	sub    $0x4,%rax
  404e83:	8b 00                	mov    (%rax),%eax
  404e85:	83 e0 0f             	and    $0xf,%eax
  }
  404e88:	c9                   	leave
  404e89:	c3                   	ret

0000000000404e8a <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>:

  constexpr bool
  __is_incb_linker(char32_t __c) noexcept
  {
  404e8a:	55                   	push   %rbp
  404e8b:	48 89 e5             	mov    %rsp,%rbp
  404e8e:	48 83 ec 20          	sub    $0x20,%rsp
  404e92:	89 7d ec             	mov    %edi,-0x14(%rbp)
  404e95:	b8 28 d3 41 00       	mov    $0x41d328,%eax
    const auto __end = std::end(__incb_linkers);
  404e9a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    // Array is small enough that linear search is faster than binary search.
    return std::find(__incb_linkers, __end, __c) != __end;
  404e9e:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  404ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ea6:	48 89 c6             	mov    %rax,%rsi
  404ea9:	bf 10 d3 41 00       	mov    $0x41d310,%edi
  404eae:	e8 dc 31 00 00       	call   40808f <_ZSt4findIPKDiDiET_S2_S2_RKT0_>
  404eb3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  404eb7:	0f 95 c0             	setne  %al
  }
  404eba:	c9                   	leave
  404ebb:	c3                   	ret

0000000000404ebc <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>:

  // @pre c <= 0x10FFFF
  constexpr _InCB
  __incb_property(char32_t __c) noexcept
  {
  404ebc:	55                   	push   %rbp
  404ebd:	48 89 e5             	mov    %rsp,%rbp
  404ec0:	48 83 ec 30          	sub    $0x30,%rsp
  404ec4:	89 7d dc             	mov    %edi,-0x24(%rbp)
    if ((__c << 2) < __incb_edges[0]) [[likely]]
  404ec7:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404eca:	c1 e0 02             	shl    $0x2,%eax
  404ecd:	ba 02 0c 00 00       	mov    $0xc02,%edx
  404ed2:	39 d0                	cmp    %edx,%eax
  404ed4:	73 07                	jae    404edd <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi+0x21>
      return _InCB(0);
  404ed6:	b8 00 00 00 00       	mov    $0x0,%eax
  404edb:	eb 42                	jmp    404f1f <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi+0x63>

    constexpr uint32_t __mask = 0x3;
  404edd:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%rbp)
  404ee4:	b8 54 d9 41 00       	mov    $0x41d954,%eax
    auto* __end = std::end(__incb_edges);
  404ee9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
  404eed:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404ef0:	c1 e0 02             	shl    $0x2,%eax
  404ef3:	83 c8 03             	or     $0x3,%eax
  404ef6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404ef9:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  404efd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f01:	48 89 c6             	mov    %rax,%rsi
  404f04:	bf 40 d3 41 00       	mov    $0x41d340,%edi
  404f09:	e8 4f 31 00 00       	call   40805d <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>
  404f0e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    return _InCB(__p[-1] & __mask);
  404f12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f16:	48 83 e8 04          	sub    $0x4,%rax
  404f1a:	8b 00                	mov    (%rax),%eax
  404f1c:	83 e0 03             	and    $0x3,%eax
  }
  404f1f:	c9                   	leave
  404f20:	c3                   	ret

0000000000404f21 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>:

  constexpr bool
  __is_extended_pictographic(char32_t __c)
  {
  404f21:	55                   	push   %rbp
  404f22:	48 89 e5             	mov    %rsp,%rbp
  404f25:	48 83 ec 20          	sub    $0x20,%rsp
  404f29:	89 7d ec             	mov    %edi,-0x14(%rbp)
    if (__c < __xpicto_edges[0]) [[likely]]
  404f2c:	ba a9 00 00 00       	mov    $0xa9,%edx
  404f31:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404f34:	39 d0                	cmp    %edx,%eax
  404f36:	73 07                	jae    404f3f <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi+0x1e>
      return 0;
  404f38:	b8 00 00 00 00       	mov    $0x0,%eax
  404f3d:	eb 34                	jmp    404f73 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi+0x52>
  404f3f:	b9 d0 db 41 00       	mov    $0x41dbd0,%ecx

    auto* __p = std::upper_bound(__xpicto_edges, std::end(__xpicto_edges), __c);
  404f44:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  404f48:	48 89 c2             	mov    %rax,%rdx
  404f4b:	48 89 ce             	mov    %rcx,%rsi
  404f4e:	bf 60 d9 41 00       	mov    $0x41d960,%edi
  404f53:	e8 d3 30 00 00       	call   40802b <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>
  404f58:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (__p - __xpicto_edges) % 2;
  404f5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f60:	48 2d 60 d9 41 00    	sub    $0x41d960,%rax
  404f66:	48 c1 f8 02          	sar    $0x2,%rax
  404f6a:	83 e0 01             	and    $0x1,%eax
  404f6d:	48 85 c0             	test   %rax,%rax
  404f70:	0f 95 c0             	setne  %al
  }
  404f73:	c9                   	leave
  404f74:	c3                   	ret
  404f75:	90                   	nop

0000000000404f76 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base8_M_resetEDiNS0_13_Gcb_propertyE>:
    _XPicto _M_xpicto_seq_state = _XPicto::_Init;
    unsigned char _M_RI_count = 0;
    bool _M_incb_linker_seen = false;

    constexpr void
    _M_reset(char32_t __c, _Gcb_property __p)
  404f76:	55                   	push   %rbp
  404f77:	48 89 e5             	mov    %rsp,%rbp
  404f7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f7e:	89 75 f4             	mov    %esi,-0xc(%rbp)
  404f81:	89 55 f0             	mov    %edx,-0x10(%rbp)
    {
      _M_c = __c;
  404f84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f88:	8b 55 f4             	mov    -0xc(%rbp),%edx
  404f8b:	89 10                	mov    %edx,(%rax)
      _M_prop = __p;
  404f8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f91:	8b 55 f0             	mov    -0x10(%rbp),%edx
  404f94:	89 50 04             	mov    %edx,0x4(%rax)
      _M_xpicto_seq_state = _XPicto::_Init;
  404f97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f9b:	c6 40 08 00          	movb   $0x0,0x8(%rax)
      _M_RI_count = 0;
  404f9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fa3:	c6 40 09 00          	movb   $0x0,0x9(%rax)
      _M_incb_linker_seen = false;
  404fa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fab:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
    }
  404faf:	90                   	nop
  404fb0:	5d                   	pop    %rbp
  404fb1:	c3                   	ret

0000000000404fb2 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_xpicto_seq_state(char32_t __c, _Gcb_property __p)
  404fb2:	55                   	push   %rbp
  404fb3:	48 89 e5             	mov    %rsp,%rbp
  404fb6:	48 83 ec 20          	sub    $0x20,%rsp
  404fba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404fbe:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  404fc1:	89 55 e0             	mov    %edx,-0x20(%rbp)
    {
      if (_M_xpicto_seq_state == _XPicto::_Failed)
  404fc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404fc8:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  404fcc:	3c 03                	cmp    $0x3,%al
  404fce:	0f 84 87 00 00 00    	je     40505b <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0xa9>
	return;

      auto __next_state = _XPicto::_Failed;
  404fd4:	c6 45 ff 03          	movb   $0x3,-0x1(%rbp)
      if (_M_xpicto_seq_state != _XPicto::_Zwj) // i.e. Init or Matched
  404fd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404fdc:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  404fe0:	3c 01                	cmp    $0x1,%al
  404fe2:	74 42                	je     405026 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x74>
	{
	  if (__p == _Gcb_property::_Gcb_ZWJ)
  404fe4:	83 7d e0 0a          	cmpl   $0xa,-0x20(%rbp)
  404fe8:	75 29                	jne    405013 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x61>
	    {
	      if (_M_xpicto_seq_state == _XPicto::_Matched)
  404fea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404fee:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  404ff2:	3c 02                	cmp    $0x2,%al
  404ff4:	75 06                	jne    404ffc <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x4a>
		__next_state = _XPicto::_Zwj;
  404ff6:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  404ffa:	eb 52                	jmp    40504e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	      // We check _M_c here so that we do the lookup at most once,
	      // and only for clusters containing at least one ZWJ.
	      else if (__is_extended_pictographic(_M_c))
  404ffc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405000:	8b 00                	mov    (%rax),%eax
  405002:	89 c7                	mov    %eax,%edi
  405004:	e8 18 ff ff ff       	call   404f21 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>
  405009:	84 c0                	test   %al,%al
  40500b:	74 41                	je     40504e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
		__next_state = _XPicto::_Zwj;
  40500d:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  405011:	eb 3b                	jmp    40504e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    }
	  else if (__p == _Gcb_property::_Gcb_Extend)
  405013:	83 7d e0 04          	cmpl   $0x4,-0x20(%rbp)
  405017:	75 35                	jne    40504e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    __next_state = _M_xpicto_seq_state; // no change
  405019:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40501d:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  405021:	88 45 ff             	mov    %al,-0x1(%rbp)
  405024:	eb 28                	jmp    40504e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
      else // Zwj
	{
	  // This assumes that all \p{Extended_Pictographic} emoji have
	  // Grapheme_Cluster_Break=Other.
	  if (__p == _Gcb_property::_Gcb_Other
		&& __is_extended_pictographic(__c))
  405026:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  40502a:	75 15                	jne    405041 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x8f>
  40502c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40502f:	89 c7                	mov    %eax,%edi
  405031:	e8 eb fe ff ff       	call   404f21 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>
  405036:	84 c0                	test   %al,%al
  405038:	74 07                	je     405041 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x8f>
  40503a:	b8 01 00 00 00       	mov    $0x1,%eax
  40503f:	eb 05                	jmp    405046 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x94>
  405041:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (__p == _Gcb_property::_Gcb_Other
  405046:	84 c0                	test   %al,%al
  405048:	74 04                	je     40504e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    __next_state = _XPicto::_Matched;
  40504a:	c6 45 ff 02          	movb   $0x2,-0x1(%rbp)
	}
      _M_xpicto_seq_state = __next_state;
  40504e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405052:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  405056:	88 50 08             	mov    %dl,0x8(%rax)
  405059:	eb 01                	jmp    40505c <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0xaa>
	return;
  40505b:	90                   	nop
    }
  40505c:	c9                   	leave
  40505d:	c3                   	ret

000000000040505e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_ri_count(_Gcb_property __p)
  40505e:	55                   	push   %rbp
  40505f:	48 89 e5             	mov    %rsp,%rbp
  405062:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405066:	89 75 f4             	mov    %esi,-0xc(%rbp)
    {
      if (__p == _Gcb_property::_Gcb_Regional_Indicator)
  405069:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  40506d:	75 14                	jne    405083 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE+0x25>
	++_M_RI_count;
  40506f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405073:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  405077:	8d 50 01             	lea    0x1(%rax),%edx
  40507a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40507e:	88 50 09             	mov    %dl,0x9(%rax)
      else
	_M_RI_count = 0;
    }
  405081:	eb 08                	jmp    40508b <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE+0x2d>
	_M_RI_count = 0;
  405083:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405087:	c6 40 09 00          	movb   $0x0,0x9(%rax)
    }
  40508b:	90                   	nop
  40508c:	5d                   	pop    %rbp
  40508d:	c3                   	ret

000000000040508e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_incb_state(char32_t __c, _Gcb_property)
  40508e:	55                   	push   %rbp
  40508f:	48 89 e5             	mov    %rsp,%rbp
  405092:	48 83 ec 10          	sub    $0x10,%rsp
  405096:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40509a:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40509d:	89 55 f0             	mov    %edx,-0x10(%rbp)
    {
      if (__is_incb_linker(__c))
  4050a0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4050a3:	89 c7                	mov    %eax,%edi
  4050a5:	e8 e0 fd ff ff       	call   404e8a <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>
  4050aa:	84 c0                	test   %al,%al
  4050ac:	74 08                	je     4050b6 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE+0x28>
	_M_incb_linker_seen = true;
  4050ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4050b2:	c6 40 0a 01          	movb   $0x1,0xa(%rax)
    }
  4050b6:	90                   	nop
  4050b7:	c9                   	leave
  4050b8:	c3                   	ret

00000000004050b9 <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>:
  // return its corresponding base-10 value, otherwise return a value >= 127.
  // If _DecOnly is false: if the character is an alphanumeric digit, then
  // return its corresponding base-36 value, otherwise return a value >= 127.
  template<bool _DecOnly = false>
    _GLIBCXX20_CONSTEXPR unsigned char
    __from_chars_alnum_to_val(unsigned char __c)
  4050b9:	55                   	push   %rbp
  4050ba:	48 89 e5             	mov    %rsp,%rbp
  4050bd:	89 f8                	mov    %edi,%eax
  4050bf:	88 45 fc             	mov    %al,-0x4(%rbp)
    {
      if _GLIBCXX17_CONSTEXPR (_DecOnly)
	return static_cast<unsigned char>(__c - '0');
      else
	return __from_chars_alnum_to_val_table<_DecOnly>::value.__data[__c];
  4050c2:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  4050c6:	48 98                	cltq
  4050c8:	0f b6 80 e0 db 41 00 	movzbl 0x41dbe0(%rax),%eax
    }
  4050cf:	5d                   	pop    %rbp
  4050d0:	c3                   	ret
  4050d1:	90                   	nop

00000000004050d2 <_ZNSt12format_errorC1EPKc>:
  // [format.error], class format_error
  class format_error : public runtime_error
  {
  public:
    explicit format_error(const string& __what) : runtime_error(__what) { }
    explicit format_error(const char* __what) : runtime_error(__what) { }
  4050d2:	55                   	push   %rbp
  4050d3:	48 89 e5             	mov    %rsp,%rbp
  4050d6:	48 83 ec 10          	sub    $0x10,%rsp
  4050da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4050e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4050e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4050ea:	48 89 d6             	mov    %rdx,%rsi
  4050ed:	48 89 c7             	mov    %rax,%rdi
  4050f0:	e8 4b f3 ff ff       	call   404440 <_ZNSt13runtime_errorC2EPKc@plt>
  4050f5:	ba 30 e0 41 00       	mov    $0x41e030,%edx
  4050fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4050fe:	48 89 10             	mov    %rdx,(%rax)
  405101:	90                   	nop
  405102:	c9                   	leave
  405103:	c3                   	ret

0000000000405104 <_ZNSt12format_errorD1Ev>:
  class format_error : public runtime_error
  405104:	55                   	push   %rbp
  405105:	48 89 e5             	mov    %rsp,%rbp
  405108:	48 83 ec 10          	sub    $0x10,%rsp
  40510c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405110:	ba 30 e0 41 00       	mov    $0x41e030,%edx
  405115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405119:	48 89 10             	mov    %rdx,(%rax)
  40511c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405120:	48 89 c7             	mov    %rax,%rdi
  405123:	e8 88 f1 ff ff       	call   4042b0 <_ZNSt13runtime_errorD2Ev@plt>
  405128:	90                   	nop
  405129:	c9                   	leave
  40512a:	c3                   	ret
  40512b:	90                   	nop

000000000040512c <_ZNSt12format_errorD0Ev>:
  40512c:	55                   	push   %rbp
  40512d:	48 89 e5             	mov    %rsp,%rbp
  405130:	48 83 ec 10          	sub    $0x10,%rsp
  405134:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405138:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40513c:	48 89 c7             	mov    %rax,%rdi
  40513f:	e8 c0 ff ff ff       	call   405104 <_ZNSt12format_errorD1Ev>
  405144:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405148:	be 10 00 00 00       	mov    $0x10,%esi
  40514d:	48 89 c7             	mov    %rax,%rdi
  405150:	e8 3b f1 ff ff       	call   404290 <_ZdlPvm@plt>
  405155:	c9                   	leave
  405156:	c3                   	ret

0000000000405157 <_ZSt20__throw_format_errorPKc>:

  /// @cond undocumented
  [[noreturn]]
  inline void
  __throw_format_error(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
  405157:	55                   	push   %rbp
  405158:	48 89 e5             	mov    %rsp,%rbp
  40515b:	41 54                	push   %r12
  40515d:	53                   	push   %rbx
  40515e:	48 83 ec 10          	sub    $0x10,%rsp
  405162:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405166:	bf 10 00 00 00       	mov    $0x10,%edi
  40516b:	e8 a0 ef ff ff       	call   404110 <__cxa_allocate_exception@plt>
  405170:	48 89 c3             	mov    %rax,%rbx
  405173:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405177:	48 89 c6             	mov    %rax,%rsi
  40517a:	48 89 df             	mov    %rbx,%rdi
  40517d:	e8 50 ff ff ff       	call   4050d2 <_ZNSt12format_errorC1EPKc>
  405182:	ba 04 51 40 00       	mov    $0x405104,%edx
  405187:	be f8 e1 41 00       	mov    $0x41e1f8,%esi
  40518c:	48 89 df             	mov    %rbx,%rdi
  40518f:	e8 6c f2 ff ff       	call   404400 <__cxa_throw@plt>
  405194:	49 89 c4             	mov    %rax,%r12
  405197:	48 89 df             	mov    %rbx,%rdi
  40519a:	e8 41 f0 ff ff       	call   4041e0 <__cxa_free_exception@plt>
  40519f:	4c 89 e0             	mov    %r12,%rax
  4051a2:	48 89 c7             	mov    %rax,%rdi
  4051a5:	e8 66 f2 ff ff       	call   404410 <_Unwind_Resume@plt>

00000000004051aa <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>:
  // XXX use named functions for each constexpr error?

  [[noreturn]]
  inline void
  __unmatched_left_brace_in_format_string()
  { __throw_format_error("format error: unmatched '{' in format string"); }
  4051aa:	55                   	push   %rbp
  4051ab:	48 89 e5             	mov    %rsp,%rbp
  4051ae:	bf 48 b0 41 00       	mov    $0x41b048,%edi
  4051b3:	e8 9f ff ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004051b8 <_ZNSt8__format40__unmatched_right_brace_in_format_stringEv>:

  [[noreturn]]
  inline void
  __unmatched_right_brace_in_format_string()
  { __throw_format_error("format error: unmatched '}' in format string"); }
  4051b8:	55                   	push   %rbp
  4051b9:	48 89 e5             	mov    %rsp,%rbp
  4051bc:	bf 78 b0 41 00       	mov    $0x41b078,%edi
  4051c1:	e8 91 ff ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004051c6 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>:

  [[noreturn]]
  inline void
  __conflicting_indexing_in_format_string()
  { __throw_format_error("format error: conflicting indexing style in format string"); }
  4051c6:	55                   	push   %rbp
  4051c7:	48 89 e5             	mov    %rsp,%rbp
  4051ca:	bf a8 b0 41 00       	mov    $0x41b0a8,%edi
  4051cf:	e8 83 ff ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004051d4 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>:

  [[noreturn]]
  inline void
  __invalid_arg_id_in_format_string()
  { __throw_format_error("format error: invalid arg-id in format string"); }
  4051d4:	55                   	push   %rbp
  4051d5:	48 89 e5             	mov    %rsp,%rbp
  4051d8:	bf e8 b0 41 00       	mov    $0x41b0e8,%edi
  4051dd:	e8 75 ff ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004051e2 <_ZNSt8__format29__failed_to_parse_format_specEv>:

  [[noreturn]]
  inline void
  __failed_to_parse_format_spec()
  { __throw_format_error("format error: failed to parse format-spec"); }
  4051e2:	55                   	push   %rbp
  4051e3:	48 89 e5             	mov    %rsp,%rbp
  4051e6:	bf 18 b1 41 00       	mov    $0x41b118,%edi
  4051eb:	e8 67 ff ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004051f0 <_ZNSt8__format10__is_digitEc>:
  template<typename _Context>
    size_t
    __int_from_arg(const basic_format_arg<_Context>& __arg);

  constexpr bool __is_digit(char __c)
  { return std::__detail::__from_chars_alnum_to_val(__c) < 10; }
  4051f0:	55                   	push   %rbp
  4051f1:	48 89 e5             	mov    %rsp,%rbp
  4051f4:	48 83 ec 10          	sub    $0x10,%rsp
  4051f8:	89 f8                	mov    %edi,%eax
  4051fa:	88 45 fc             	mov    %al,-0x4(%rbp)
  4051fd:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  405201:	0f b6 c0             	movzbl %al,%eax
  405204:	89 c7                	mov    %eax,%edi
  405206:	e8 ae fe ff ff       	call   4050b9 <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>
  40520b:	3c 09                	cmp    $0x9,%al
  40520d:	0f 96 c0             	setbe  %al
  405210:	c9                   	leave
  405211:	c3                   	ret

0000000000405212 <_ZNSt8__format11__is_xdigitEc>:

  constexpr bool __is_xdigit(char __c)
  { return std::__detail::__from_chars_alnum_to_val(__c) < 16; }
  405212:	55                   	push   %rbp
  405213:	48 89 e5             	mov    %rsp,%rbp
  405216:	48 83 ec 10          	sub    $0x10,%rsp
  40521a:	89 f8                	mov    %edi,%eax
  40521c:	88 45 fc             	mov    %al,-0x4(%rbp)
  40521f:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  405223:	0f b6 c0             	movzbl %al,%eax
  405226:	89 c7                	mov    %eax,%edi
  405228:	e8 8c fe ff ff       	call   4050b9 <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>
  40522d:	3c 0f                	cmp    $0xf,%al
  40522f:	0f 96 c0             	setbe  %al
  405232:	c9                   	leave
  405233:	c3                   	ret

0000000000405234 <_ZNSt8__format16_Optional_localeC1ERKSt6locale>:
  struct _Optional_locale
  {
    [[__gnu__::__always_inline__]]
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }

    _Optional_locale(const locale& __loc) noexcept
  405234:	55                   	push   %rbp
  405235:	48 89 e5             	mov    %rsp,%rbp
  405238:	48 83 ec 10          	sub    $0x10,%rsp
  40523c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405240:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    : _M_loc(__loc), _M_hasval(true)
  405244:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405248:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40524c:	48 89 d6             	mov    %rdx,%rsi
  40524f:	48 89 c7             	mov    %rax,%rdi
  405252:	e8 49 ef ff ff       	call   4041a0 <_ZNSt6localeC1ERKS_@plt>
  405257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40525b:	c6 40 08 01          	movb   $0x1,0x8(%rax)
    { }
  40525f:	90                   	nop
  405260:	c9                   	leave
  405261:	c3                   	ret

0000000000405262 <_ZNSt8__format16_Optional_localeD1Ev>:
	  _M_hasval = true;
	}
      return *this;
    }

    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
  405262:	55                   	push   %rbp
  405263:	48 89 e5             	mov    %rsp,%rbp
  405266:	48 83 ec 10          	sub    $0x10,%rsp
  40526a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40526e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405272:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  405276:	84 c0                	test   %al,%al
  405278:	74 0c                	je     405286 <_ZNSt8__format16_Optional_localeD1Ev+0x24>
  40527a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40527e:	48 89 c7             	mov    %rax,%rdi
  405281:	e8 aa f0 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  405286:	90                   	nop
  405287:	c9                   	leave
  405288:	c3                   	ret
  405289:	90                   	nop

000000000040528a <_ZNSt8__format16_Optional_locale5valueEv>:
	}
      return *this;
    }

    const locale&
    value() noexcept
  40528a:	55                   	push   %rbp
  40528b:	48 89 e5             	mov    %rsp,%rbp
  40528e:	48 83 ec 10          	sub    $0x10,%rsp
  405292:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if (!_M_hasval)
  405296:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40529a:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  40529e:	83 f0 01             	xor    $0x1,%eax
  4052a1:	84 c0                	test   %al,%al
  4052a3:	74 14                	je     4052b9 <_ZNSt8__format16_Optional_locale5valueEv+0x2f>
	{
	  std::construct_at(&_M_loc);
  4052a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052a9:	48 89 c7             	mov    %rax,%rdi
  4052ac:	e8 16 2e 00 00       	call   4080c7 <_ZSt12construct_atISt6localeJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	  _M_hasval = true;
  4052b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052b5:	c6 40 08 01          	movb   $0x1,0x8(%rax)
	}
      return _M_loc;
  4052b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4052bd:	c9                   	leave
  4052be:	c3                   	ret
  4052bf:	90                   	nop

00000000004052c0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
  using _GLIBCXX_STD_C::vector;

  // A sink that fills a sequence (e.g. std::string, std::vector, std::deque).
  // Writes to a buffer then appends that to the sequence when it fills up.
  template<typename _Seq>
    class _Seq_sink final : public _Buf_sink<typename _Seq::value_type>
  4052c0:	55                   	push   %rbp
  4052c1:	48 89 e5             	mov    %rsp,%rbp
  4052c4:	48 83 ec 10          	sub    $0x10,%rsp
  4052c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4052cc:	ba b8 df 41 00       	mov    $0x41dfb8,%edx
  4052d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052d5:	48 89 10             	mov    %rdx,(%rax)
  4052d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052dc:	48 05 20 01 00 00    	add    $0x120,%rax
  4052e2:	48 89 c7             	mov    %rax,%rdi
  4052e5:	e8 48 22 00 00       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4052ea:	90                   	nop
  4052eb:	c9                   	leave
  4052ec:	c3                   	ret

00000000004052ed <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:
#endif

  [[nodiscard]]
  inline string
  vformat(string_view __fmt, format_args __args)
  {
  4052ed:	55                   	push   %rbp
  4052ee:	48 89 e5             	mov    %rsp,%rbp
  4052f1:	53                   	push   %rbx
  4052f2:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  4052f9:	48 89 bd 28 fe ff ff 	mov    %rdi,-0x1d8(%rbp)
  405300:	48 89 f0             	mov    %rsi,%rax
  405303:	48 89 d6             	mov    %rdx,%rsi
  405306:	48 89 c0             	mov    %rax,%rax
  405309:	ba 00 00 00 00       	mov    $0x0,%edx
  40530e:	48 89 f2             	mov    %rsi,%rdx
  405311:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  405318:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  40531f:	48 89 c8             	mov    %rcx,%rax
  405322:	4c 89 c1             	mov    %r8,%rcx
  405325:	48 89 c0             	mov    %rax,%rax
  405328:	ba 00 00 00 00       	mov    $0x0,%edx
  40532d:	48 89 ca             	mov    %rcx,%rdx
  405330:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  405337:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
      { }
  40533e:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405345:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  405349:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  40534d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405351:	48 8d 50 20          	lea    0x20(%rax),%rdx
  405355:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  405359:	48 89 d6             	mov    %rdx,%rsi
  40535c:	48 89 c7             	mov    %rax,%rdi
  40535f:	e8 34 62 00 00       	call   40b598 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  405364:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  405368:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40536c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405370:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  405377:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  40537e:	ba 08 e0 41 00       	mov    $0x41e008,%edx
  405383:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405387:	48 89 10             	mov    %rdx,(%rax)
  40538a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40538e:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  405395:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
  40539c:	48 89 41 08          	mov    %rax,0x8(%rcx)
  4053a0:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  4053a4:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4053a8:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4053af:	48 89 c7             	mov    %rax,%rdi
  4053b2:	e8 33 65 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4053b7:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  4053bb:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  4053bc:	ba e0 df 41 00       	mov    $0x41dfe0,%edx
  4053c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4053c5:	48 89 10             	mov    %rdx,(%rax)
      { }
  4053c8:	90                   	nop
      { }
  4053c9:	b8 b8 df 41 00       	mov    $0x41dfb8,%eax
  4053ce:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  4053d5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4053dc:	48 05 20 01 00 00    	add    $0x120,%rax
  4053e2:	48 89 c7             	mov    %rax,%rdi
  4053e5:	e8 fa f6 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  4053ea:	90                   	nop
  4053eb:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4053f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  4053f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4053fa:	48 89 c7             	mov    %rax,%rdi
  4053fd:	e8 c1 61 00 00       	call   40b5c3 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  405402:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405406:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  405407:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40540b:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  405412:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  405419:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  405420:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  405427:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
  40542e:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  405435:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  40543c:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  405443:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
  40544a:	48 8d 85 58 fe ff ff 	lea    -0x1a8(%rbp),%rax
  405451:	48 89 c7             	mov    %rax,%rdi
  405454:	e8 5a 45 00 00       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  405459:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
  405460:	48 8b b5 40 fe ff ff 	mov    -0x1c0(%rbp),%rsi
  405467:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  40546e:	48 8b 00             	mov    (%rax),%rax
  405471:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  405477:	48 89 c7             	mov    %rax,%rdi
  40547a:	e8 8e 4e 00 00       	call   40a30d <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  40547f:	90                   	nop
    __format::_Str_sink<char> __buf;
    std::vformat_to(__buf.out(), __fmt, __args);
    return std::move(__buf).get();
  405480:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405487:	48 89 c7             	mov    %rax,%rdi
  40548a:	e8 6a 2c 00 00       	call   4080f9 <_ZSt4moveIRNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEONSt16remove_referenceIT_E4typeEOSB_>
  40548f:	48 89 c2             	mov    %rax,%rdx
  405492:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  405499:	48 89 d6             	mov    %rdx,%rsi
  40549c:	48 89 c7             	mov    %rax,%rdi
  40549f:	e8 64 2c 00 00       	call   408108 <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv>
  4054a4:	90                   	nop
  }
  4054a5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4054ac:	48 89 c7             	mov    %rax,%rdi
  4054af:	e8 0c fe ff ff       	call   4052c0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
    return std::move(__buf).get();
  4054b4:	eb 1d                	jmp    4054d3 <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x1e6>
  }
  4054b6:	48 89 c3             	mov    %rax,%rbx
  4054b9:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4054c0:	48 89 c7             	mov    %rax,%rdi
  4054c3:	e8 f8 fd ff ff       	call   4052c0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  4054c8:	48 89 d8             	mov    %rbx,%rax
  4054cb:	48 89 c7             	mov    %rax,%rdi
  4054ce:	e8 3d ef ff ff       	call   404410 <_Unwind_Resume@plt>
  4054d3:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4054da:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4054de:	c9                   	leave
  4054df:	c3                   	ret

00000000004054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>:
      }
#endif

      [[nodiscard]]
      constexpr pointer
      data() const noexcept
  4054e0:	55                   	push   %rbp
  4054e1:	48 89 e5             	mov    %rsp,%rbp
  4054e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_ptr; }
  4054e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4054ec:	48 8b 00             	mov    (%rax),%rax
  4054ef:	5d                   	pop    %rbp
  4054f0:	c3                   	ret
  4054f1:	90                   	nop

00000000004054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>:
      size() const noexcept
  4054f2:	55                   	push   %rbp
  4054f3:	48 89 e5             	mov    %rsp,%rbp
  4054f6:	48 83 ec 10          	sub    $0x10,%rsp
  4054fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_extent._M_extent(); }
  4054fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405502:	48 83 c0 08          	add    $0x8,%rax
  405506:	48 89 c7             	mov    %rax,%rdi
  405509:	e8 6c f8 ff ff       	call   404d7a <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>
  40550e:	c9                   	leave
  40550f:	c3                   	ret

0000000000405510 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  inline void
  vprint_nonunicode(FILE* __stream, string_view __fmt, format_args __args)
  {
  405510:	55                   	push   %rbp
  405511:	48 89 e5             	mov    %rsp,%rbp
  405514:	53                   	push   %rbx
  405515:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
  40551c:	48 89 bd 18 fe ff ff 	mov    %rdi,-0x1e8(%rbp)
  405523:	48 89 f0             	mov    %rsi,%rax
  405526:	48 89 d6             	mov    %rdx,%rsi
  405529:	48 89 c0             	mov    %rax,%rax
  40552c:	ba 00 00 00 00       	mov    $0x0,%edx
  405531:	48 89 f2             	mov    %rsi,%rdx
  405534:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  40553b:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
  405542:	48 89 c8             	mov    %rcx,%rax
  405545:	4c 89 c1             	mov    %r8,%rcx
  405548:	48 89 c0             	mov    %rax,%rax
  40554b:	ba 00 00 00 00       	mov    $0x0,%edx
  405550:	48 89 ca             	mov    %rcx,%rdx
  405553:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  40555a:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
      { }
  405561:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405568:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  40556c:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  405570:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405574:	48 8d 50 20          	lea    0x20(%rax),%rdx
  405578:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40557c:	48 89 d6             	mov    %rdx,%rsi
  40557f:	48 89 c7             	mov    %rax,%rdi
  405582:	e8 11 60 00 00       	call   40b598 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  405587:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  40558b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40558f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405593:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  40559a:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  4055a1:	ba 08 e0 41 00       	mov    $0x41e008,%edx
  4055a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4055aa:	48 89 10             	mov    %rdx,(%rax)
  4055ad:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4055b1:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  4055b8:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
  4055bf:	48 89 41 08          	mov    %rax,0x8(%rcx)
  4055c3:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  4055c7:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4055cb:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  4055d2:	48 89 c7             	mov    %rax,%rdi
  4055d5:	e8 10 63 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4055da:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  4055de:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  4055df:	ba e0 df 41 00       	mov    $0x41dfe0,%edx
  4055e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4055e8:	48 89 10             	mov    %rdx,(%rax)
      { }
  4055eb:	90                   	nop
      { }
  4055ec:	b8 b8 df 41 00       	mov    $0x41dfb8,%eax
  4055f1:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  4055f8:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4055ff:	48 05 20 01 00 00    	add    $0x120,%rax
  405605:	48 89 c7             	mov    %rax,%rdi
  405608:	e8 d7 f4 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  40560d:	90                   	nop
  40560e:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405615:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  405619:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40561d:	48 89 c7             	mov    %rax,%rdi
  405620:	e8 9e 5f 00 00       	call   40b5c3 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  405625:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405629:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  40562a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40562e:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  405635:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40563c:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  405643:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  40564a:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
  405651:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  405658:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  40565f:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  405666:	48 89 95 28 fe ff ff 	mov    %rdx,-0x1d8(%rbp)
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
  40566d:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  405674:	48 89 c7             	mov    %rax,%rdi
  405677:	e8 37 43 00 00       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40567c:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
  405683:	48 8b b5 30 fe ff ff 	mov    -0x1d0(%rbp),%rsi
  40568a:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  405691:	48 8b 00             	mov    (%rax),%rax
  405694:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40569a:	48 89 c7             	mov    %rax,%rdi
  40569d:	e8 6b 4c 00 00       	call   40a30d <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  4056a2:	90                   	nop
    __format::_Str_sink<char> __buf;
    std::vformat_to(__buf.out(), __fmt, __args);
    auto __out = __buf.view();
  4056a3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4056aa:	48 89 c7             	mov    %rax,%rdi
  4056ad:	e8 42 2b 00 00       	call   4081f4 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>
  4056b2:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  4056b9:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
  4056c0:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4056c7:	48 89 c7             	mov    %rax,%rdi
  4056ca:	e8 23 fe ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4056cf:	48 89 c3             	mov    %rax,%rbx
  4056d2:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4056d9:	48 89 c7             	mov    %rax,%rdi
  4056dc:	e8 ff fd ff ff       	call   4054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  4056e1:	48 89 c7             	mov    %rax,%rdi
  4056e4:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4056eb:	48 89 c1             	mov    %rax,%rcx
  4056ee:	48 89 da             	mov    %rbx,%rdx
  4056f1:	be 01 00 00 00       	mov    $0x1,%esi
  4056f6:	e8 65 ed ff ff       	call   404460 <fwrite@plt>
  4056fb:	48 89 c3             	mov    %rax,%rbx
  4056fe:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  405705:	48 89 c7             	mov    %rax,%rdi
  405708:	e8 e5 fd ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40570d:	48 39 c3             	cmp    %rax,%rbx
  405710:	0f 95 c0             	setne  %al
  405713:	84 c0                	test   %al,%al
  405715:	74 0a                	je     405721 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x211>
      __throw_system_error(EIO);
  405717:	bf 05 00 00 00       	mov    $0x5,%edi
  40571c:	e8 9f ea ff ff       	call   4041c0 <_ZSt20__throw_system_errori@plt>
  }
  405721:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405728:	48 89 c7             	mov    %rax,%rdi
  40572b:	e8 90 fb ff ff       	call   4052c0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  405730:	eb 1d                	jmp    40574f <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x23f>
  405732:	48 89 c3             	mov    %rax,%rbx
  405735:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40573c:	48 89 c7             	mov    %rax,%rdi
  40573f:	e8 7c fb ff ff       	call   4052c0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  405744:	48 89 d8             	mov    %rbx,%rax
  405747:	48 89 c7             	mov    %rax,%rdi
  40574a:	e8 c1 ec ff ff       	call   404410 <_Unwind_Resume@plt>
  40574f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405753:	c9                   	leave
  405754:	c3                   	ret

0000000000405755 <_ZSt14vprint_unicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:

  inline void
  vprint_unicode(FILE* __stream, string_view __fmt, format_args __args)
  {
  405755:	55                   	push   %rbp
  405756:	48 89 e5             	mov    %rsp,%rbp
  405759:	48 83 ec 30          	sub    $0x30,%rsp
  40575d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405761:	48 89 f0             	mov    %rsi,%rax
  405764:	48 89 d6             	mov    %rdx,%rsi
  405767:	48 89 c0             	mov    %rax,%rax
  40576a:	ba 00 00 00 00       	mov    $0x0,%edx
  40576f:	48 89 f2             	mov    %rsi,%rdx
  405772:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405776:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40577a:	48 89 c8             	mov    %rcx,%rax
  40577d:	4c 89 c1             	mov    %r8,%rcx
  405780:	48 89 c0             	mov    %rax,%rax
  405783:	ba 00 00 00 00       	mov    $0x0,%edx
  405788:	48 89 ca             	mov    %rcx,%rdx
  40578b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40578f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
#if !defined(_WIN32) || defined(__CYGWIN__)
    // For most targets we don't need to do anything special to write
    // Unicode to a terminal.
    std::vprint_nonunicode(__stream, __fmt, __args);
  405793:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  405797:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40579b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40579f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4057a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4057a7:	49 89 f8             	mov    %rdi,%r8
  4057aa:	48 89 c7             	mov    %rax,%rdi
  4057ad:	e8 5e fd ff ff       	call   405510 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>

    // Otherwise just write the string to the file as vprint_nonunicode does.
    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
      __throw_system_error(EIO);
#endif
  }
  4057b2:	90                   	nop
  4057b3:	c9                   	leave
  4057b4:	c3                   	ret

00000000004057b5 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:

#if __cpp_lib_print // C++ >= 23

  inline void
  vprint_nonunicode(ostream& __os, string_view __fmt, format_args __args)
  {
  4057b5:	55                   	push   %rbp
  4057b6:	48 89 e5             	mov    %rsp,%rbp
  4057b9:	53                   	push   %rbx
  4057ba:	48 81 ec 18 02 00 00 	sub    $0x218,%rsp
  4057c1:	48 89 bd 08 fe ff ff 	mov    %rdi,-0x1f8(%rbp)
  4057c8:	48 89 f0             	mov    %rsi,%rax
  4057cb:	48 89 d6             	mov    %rdx,%rsi
  4057ce:	48 89 c0             	mov    %rax,%rax
  4057d1:	ba 00 00 00 00       	mov    $0x0,%edx
  4057d6:	48 89 f2             	mov    %rsi,%rdx
  4057d9:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  4057e0:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
  4057e7:	48 89 c8             	mov    %rcx,%rax
  4057ea:	4c 89 c1             	mov    %r8,%rcx
  4057ed:	48 89 c0             	mov    %rax,%rax
  4057f0:	ba 00 00 00 00       	mov    $0x0,%edx
  4057f5:	48 89 ca             	mov    %rcx,%rdx
  4057f8:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  4057ff:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
    ostream::sentry __cerb(__os);
  405806:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  40580d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  405811:	48 89 d6             	mov    %rdx,%rsi
  405814:	48 89 c7             	mov    %rax,%rdi
  405817:	e8 04 ea ff ff       	call   404220 <_ZNSo6sentryC1ERSo@plt>
    if (__cerb)
  40581c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  405820:	48 89 c7             	mov    %rax,%rdi
  405823:	e8 78 eb ff ff       	call   4043a0 <_ZNKSo6sentrycvbEv@plt>
  405828:	84 c0                	test   %al,%al
  40582a:	0f 84 c6 01 00 00    	je     4059f6 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x241>
      { }
  405830:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405837:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      : _Sink<_CharT>(_M_buf)
  40583b:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40583f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405843:	48 8d 50 20          	lea    0x20(%rax),%rdx
  405847:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40584b:	48 89 d6             	mov    %rdx,%rsi
  40584e:	48 89 c7             	mov    %rax,%rdi
  405851:	e8 42 5d 00 00       	call   40b598 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  405856:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
  40585a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40585e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405862:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  405866:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  40586a:	ba 08 e0 41 00       	mov    $0x41e008,%edx
  40586f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  405873:	48 89 10             	mov    %rdx,(%rax)
  405876:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40587a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40587e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  405882:	48 89 41 08          	mov    %rax,0x8(%rcx)
  405886:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  40588a:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  40588e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  405892:	48 89 c7             	mov    %rax,%rdi
  405895:	e8 50 60 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40589a:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  40589e:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  40589f:	ba e0 df 41 00       	mov    $0x41dfe0,%edx
  4058a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4058a8:	48 89 10             	mov    %rdx,(%rax)
      { }
  4058ab:	90                   	nop
      { }
  4058ac:	b8 b8 df 41 00       	mov    $0x41dfb8,%eax
  4058b1:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4058b8:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4058bf:	48 05 20 01 00 00    	add    $0x120,%rax
  4058c5:	48 89 c7             	mov    %rax,%rdi
  4058c8:	e8 17 f2 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  4058cd:	90                   	nop
      {
	__format::_Str_sink<char> __buf;
	std::vformat_to(__buf.out(), __os.getloc(), __fmt, __args);
  4058ce:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  4058d5:	48 8b 00             	mov    (%rax),%rax
  4058d8:	48 83 e8 18          	sub    $0x18,%rax
  4058dc:	48 8b 00             	mov    (%rax),%rax
  4058df:	48 89 c2             	mov    %rax,%rdx
  4058e2:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  4058e9:	48 01 c2             	add    %rax,%rdx
  4058ec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4058f0:	48 89 d6             	mov    %rdx,%rsi
  4058f3:	48 89 c7             	mov    %rax,%rdi
  4058f6:	e8 23 f4 ff ff       	call   404d1e <_ZNKSt8ios_base6getlocEv>
  4058fb:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405902:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  405906:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40590a:	48 89 c7             	mov    %rax,%rdi
  40590d:	e8 b1 5c 00 00       	call   40b5c3 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  405912:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405916:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  405917:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40591b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  405922:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  405929:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  405930:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  405937:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  40593e:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  405945:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  40594c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  405953:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
      return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc);
  40595a:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  405961:	48 89 c7             	mov    %rax,%rdi
  405964:	e8 4a 40 00 00       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  405969:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  40596d:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  405974:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  40597b:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  405982:	48 8b 00             	mov    (%rax),%rax
  405985:	49 89 f8             	mov    %rdi,%r8
  405988:	48 89 c7             	mov    %rax,%rdi
  40598b:	e8 7d 49 00 00       	call   40a30d <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  405990:	90                   	nop
  405991:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405995:	48 89 c7             	mov    %rax,%rdi
  405998:	e8 93 e9 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	auto __out = __buf.view();
  40599d:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4059a4:	48 89 c7             	mov    %rax,%rdi
  4059a7:	e8 48 28 00 00       	call   4081f4 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>
  4059ac:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4059b0:	48 89 55 98          	mov    %rdx,-0x68(%rbp)

	__try
	  {
	    std::__ostream_write(__os, __out.data(), __out.size());
  4059b4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4059b8:	48 89 c7             	mov    %rax,%rdi
  4059bb:	e8 32 fb ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4059c0:	48 89 c3             	mov    %rax,%rbx
  4059c3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4059c7:	48 89 c7             	mov    %rax,%rdi
  4059ca:	e8 11 fb ff ff       	call   4054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  4059cf:	48 89 c1             	mov    %rax,%rcx
  4059d2:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  4059d9:	48 89 da             	mov    %rbx,%rdx
  4059dc:	48 89 ce             	mov    %rcx,%rsi
  4059df:	48 89 c7             	mov    %rax,%rdi
  4059e2:	e8 d9 28 00 00       	call   4082c0 <_ZSt15__ostream_writeIcSt11char_traitsIcEEvRSt13basic_ostreamIT_T0_EPKS3_l>
	    __os._M_setstate(ios_base::badbit);
	    __throw_exception_again;
	  }
	__catch(...)
	  { __os._M_setstate(ios_base::badbit); }
      }
  4059e7:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4059ee:	48 89 c7             	mov    %rax,%rdi
  4059f1:	e8 ca f8 ff ff       	call   4052c0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  }
  4059f6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4059fa:	48 89 c7             	mov    %rax,%rdi
  4059fd:	e8 fe e6 ff ff       	call   404100 <_ZNSo6sentryD1Ev@plt>
  405a02:	e9 d0 00 00 00       	jmp    405ad7 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x322>
	std::vformat_to(__buf.out(), __os.getloc(), __fmt, __args);
  405a07:	48 89 c3             	mov    %rax,%rbx
  405a0a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405a0e:	48 89 c7             	mov    %rax,%rdi
  405a11:	e8 1a e9 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  405a16:	e9 96 00 00 00       	jmp    405ab1 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2fc>
	__catch(const __cxxabiv1::__forced_unwind&)
  405a1b:	48 83 fa 01          	cmp    $0x1,%rdx
  405a1f:	75 3c                	jne    405a5d <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2a8>
  405a21:	48 89 c7             	mov    %rax,%rdi
  405a24:	e8 77 e6 ff ff       	call   4040a0 <__cxa_begin_catch@plt>
  405a29:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    __os._M_setstate(ios_base::badbit);
  405a2d:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405a34:	48 8b 00             	mov    (%rax),%rax
  405a37:	48 83 e8 18          	sub    $0x18,%rax
  405a3b:	48 8b 00             	mov    (%rax),%rax
  405a3e:	48 89 c2             	mov    %rax,%rdx
  405a41:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405a48:	48 01 d0             	add    %rdx,%rax
  405a4b:	be 01 00 00 00       	mov    $0x1,%esi
  405a50:	48 89 c7             	mov    %rax,%rdi
  405a53:	e8 98 e6 ff ff       	call   4040f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@plt>
	    __throw_exception_again;
  405a58:	e8 f3 e8 ff ff       	call   404350 <__cxa_rethrow@plt>
	__catch(...)
  405a5d:	48 89 c7             	mov    %rax,%rdi
  405a60:	e8 3b e6 ff ff       	call   4040a0 <__cxa_begin_catch@plt>
	  { __os._M_setstate(ios_base::badbit); }
  405a65:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405a6c:	48 8b 00             	mov    (%rax),%rax
  405a6f:	48 83 e8 18          	sub    $0x18,%rax
  405a73:	48 8b 00             	mov    (%rax),%rax
  405a76:	48 89 c2             	mov    %rax,%rdx
  405a79:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405a80:	48 01 d0             	add    %rdx,%rax
  405a83:	be 01 00 00 00       	mov    $0x1,%esi
  405a88:	48 89 c7             	mov    %rax,%rdi
  405a8b:	e8 60 e6 ff ff       	call   4040f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@plt>
  405a90:	e8 3b e9 ff ff       	call   4043d0 <__cxa_end_catch@plt>
  405a95:	e9 4d ff ff ff       	jmp    4059e7 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x232>
	  }
  405a9a:	48 89 c3             	mov    %rax,%rbx
  405a9d:	e8 2e e9 ff ff       	call   4043d0 <__cxa_end_catch@plt>
  405aa2:	eb 0d                	jmp    405ab1 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2fc>
	  { __os._M_setstate(ios_base::badbit); }
  405aa4:	48 89 c3             	mov    %rax,%rbx
  405aa7:	e8 24 e9 ff ff       	call   4043d0 <__cxa_end_catch@plt>
  405aac:	eb 03                	jmp    405ab1 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2fc>
      }
  405aae:	48 89 c3             	mov    %rax,%rbx
  405ab1:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405ab8:	48 89 c7             	mov    %rax,%rdi
  405abb:	e8 00 f8 ff ff       	call   4052c0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  }
  405ac0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  405ac4:	48 89 c7             	mov    %rax,%rdi
  405ac7:	e8 34 e6 ff ff       	call   404100 <_ZNSo6sentryD1Ev@plt>
  405acc:	48 89 d8             	mov    %rbx,%rax
  405acf:	48 89 c7             	mov    %rax,%rdi
  405ad2:	e8 39 e9 ff ff       	call   404410 <_Unwind_Resume@plt>
  405ad7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405adb:	c9                   	leave
  405adc:	c3                   	ret

0000000000405add <_ZSt14vprint_unicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:

  inline void
  vprint_unicode(ostream& __os, string_view __fmt, format_args __args)
  {
  405add:	55                   	push   %rbp
  405ade:	48 89 e5             	mov    %rsp,%rbp
  405ae1:	48 83 ec 30          	sub    $0x30,%rsp
  405ae5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405ae9:	48 89 f0             	mov    %rsi,%rax
  405aec:	48 89 d6             	mov    %rdx,%rsi
  405aef:	48 89 c0             	mov    %rax,%rax
  405af2:	ba 00 00 00 00       	mov    $0x0,%edx
  405af7:	48 89 f2             	mov    %rsi,%rdx
  405afa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405afe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405b02:	48 89 c8             	mov    %rcx,%rax
  405b05:	4c 89 c1             	mov    %r8,%rcx
  405b08:	48 89 c0             	mov    %rax,%rax
  405b0b:	ba 00 00 00 00       	mov    $0x0,%edx
  405b10:	48 89 ca             	mov    %rcx,%rdx
  405b13:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  405b17:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
#if !defined(_WIN32) || defined(__CYGWIN__)
    // For most targets we don't need to do anything special to write
    // Unicode to a terminal.
    std::vprint_nonunicode(__os, __fmt, __args);
  405b1b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  405b1f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  405b23:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  405b27:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405b2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b2f:	49 89 f8             	mov    %rdi,%r8
  405b32:	48 89 c7             	mov    %rax,%rdi
  405b35:	e8 7b fc ff ff       	call   4057b5 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
	  }
	__catch(...)
	  { __os._M_setstate(ios_base::badbit); }
      }
#endif // _WIN32
  }
  405b3a:	90                   	nop
  405b3b:	c9                   	leave
  405b3c:	c3                   	ret
  405b3d:	90                   	nop

0000000000405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      [[__gnu__::__nonnull__]]
      constexpr
      basic_string_view(const _CharT* __str) noexcept
  405b3e:	55                   	push   %rbp
  405b3f:	48 89 e5             	mov    %rsp,%rbp
  405b42:	48 83 ec 10          	sub    $0x10,%rsp
  405b46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
  405b4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b52:	48 89 c7             	mov    %rax,%rdi
  405b55:	e8 c8 ec ff ff       	call   404822 <_ZNSt11char_traitsIcE6lengthEPKc>
  405b5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405b5e:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
  405b61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b65:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405b69:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  405b6d:	90                   	nop
  405b6e:	c9                   	leave
  405b6f:	c3                   	ret

0000000000405b70 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
  405b70:	55                   	push   %rbp
  405b71:	48 89 e5             	mov    %rsp,%rbp
  405b74:	48 83 ec 20          	sub    $0x20,%rsp
  405b78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
  405b7c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405b83:	00
      while (!eq(__p[__i], char_type()))
  405b84:	eb 05                	jmp    405b8b <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
  405b86:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
  405b8b:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  405b8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405b93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b97:	48 01 c2             	add    %rax,%rdx
  405b9a:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  405b9e:	48 89 c6             	mov    %rax,%rsi
  405ba1:	48 89 d7             	mov    %rdx,%rdi
  405ba4:	e8 0d 00 00 00       	call   405bb6 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
  405ba9:	83 f0 01             	xor    $0x1,%eax
  405bac:	84 c0                	test   %al,%al
  405bae:	75 d6                	jne    405b86 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
  405bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  405bb4:	c9                   	leave
  405bb5:	c3                   	ret

0000000000405bb6 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
  405bb6:	55                   	push   %rbp
  405bb7:	48 89 e5             	mov    %rsp,%rbp
  405bba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405bbe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
  405bc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405bc6:	0f b6 10             	movzbl (%rax),%edx
  405bc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405bcd:	0f b6 00             	movzbl (%rax),%eax
  405bd0:	38 c2                	cmp    %al,%dl
  405bd2:	0f 94 c0             	sete   %al
  405bd5:	5d                   	pop    %rbp
  405bd6:	c3                   	ret
  405bd7:	90                   	nop

0000000000405bd8 <_ZNSt8__format8_ScannerIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>:
      _Scanner(basic_string_view<_CharT> __str, size_t __nargs = -1)
  405bd8:	55                   	push   %rbp
  405bd9:	48 89 e5             	mov    %rsp,%rbp
  405bdc:	48 83 ec 20          	sub    $0x20,%rsp
  405be0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405be4:	48 89 f0             	mov    %rsi,%rax
  405be7:	48 89 d6             	mov    %rdx,%rsi
  405bea:	48 89 c0             	mov    %rax,%rax
  405bed:	ba 00 00 00 00       	mov    $0x0,%edx
  405bf2:	48 89 f2             	mov    %rsi,%rdx
  405bf5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405bf9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405bfd:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
      : _M_pc(__str, __nargs)
  405c01:	ba 98 df 41 00       	mov    $0x41df98,%edx
  405c06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c0a:	48 89 10             	mov    %rdx,(%rax)
  405c0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c11:	48 8d 78 08          	lea    0x8(%rax),%rdi
  405c15:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  405c19:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405c1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405c21:	48 89 d6             	mov    %rdx,%rsi
  405c24:	48 89 c2             	mov    %rax,%rdx
  405c27:	e8 04 00 00 00       	call   405c30 <_ZNSt26basic_format_parse_contextIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>
      { }
  405c2c:	90                   	nop
  405c2d:	c9                   	leave
  405c2e:	c3                   	ret
  405c2f:	90                   	nop

0000000000405c30 <_ZNSt26basic_format_parse_contextIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>:
      basic_format_parse_context(basic_string_view<_CharT> __fmt,
  405c30:	55                   	push   %rbp
  405c31:	48 89 e5             	mov    %rsp,%rbp
  405c34:	48 83 ec 20          	sub    $0x20,%rsp
  405c38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c3c:	48 89 f0             	mov    %rsi,%rax
  405c3f:	48 89 d6             	mov    %rdx,%rsi
  405c42:	48 89 c0             	mov    %rax,%rax
  405c45:	ba 00 00 00 00       	mov    $0x0,%edx
  405c4a:	48 89 f2             	mov    %rsi,%rdx
  405c4d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405c51:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405c55:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
  405c59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405c5d:	48 89 c7             	mov    %rax,%rdi
  405c60:	e8 41 00 00 00       	call   405ca6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
  405c65:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405c69:	48 89 02             	mov    %rax,(%rdx)
  405c6c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405c70:	48 89 c7             	mov    %rax,%rdi
  405c73:	e8 40 00 00 00       	call   405cb8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>
  405c78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405c7c:	48 89 42 08          	mov    %rax,0x8(%rdx)
  405c80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c84:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  405c8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c8f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  405c96:	00
  405c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c9b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405c9f:	48 89 50 20          	mov    %rdx,0x20(%rax)
      { }
  405ca3:	90                   	nop
  405ca4:	c9                   	leave
  405ca5:	c3                   	ret

0000000000405ca6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>:

      // [string.view.iterators], iterator support

      [[nodiscard]]
      constexpr const_iterator
      begin() const noexcept
  405ca6:	55                   	push   %rbp
  405ca7:	48 89 e5             	mov    %rsp,%rbp
  405caa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
  405cae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cb2:	48 8b 40 08          	mov    0x8(%rax),%rax
  405cb6:	5d                   	pop    %rbp
  405cb7:	c3                   	ret

0000000000405cb8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>:

      [[nodiscard]]
      constexpr const_iterator
      end() const noexcept
  405cb8:	55                   	push   %rbp
  405cb9:	48 89 e5             	mov    %rsp,%rbp
  405cbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str + this->_M_len; }
  405cc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cc4:	48 8b 50 08          	mov    0x8(%rax),%rdx
  405cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ccc:	48 8b 00             	mov    (%rax),%rax
  405ccf:	48 01 d0             	add    %rdx,%rax
  405cd2:	5d                   	pop    %rbp
  405cd3:	c3                   	ret

0000000000405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:

      // [string.view.capacity], capacity

      [[nodiscard]]
      constexpr size_type
      size() const noexcept
  405cd4:	55                   	push   %rbp
  405cd5:	48 89 e5             	mov    %rsp,%rbp
  405cd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
  405cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ce0:	48 8b 00             	mov    (%rax),%rax
  405ce3:	5d                   	pop    %rbp
  405ce4:	c3                   	ret
  405ce5:	90                   	nop

0000000000405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>:

      // [string.view.access], element access

      [[nodiscard]]
      constexpr const_reference
      operator[](size_type __pos) const noexcept
  405ce6:	55                   	push   %rbp
  405ce7:	48 89 e5             	mov    %rsp,%rbp
  405cea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405cee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405cf2:	b8 00 00 00 00       	mov    $0x0,%eax
      {
	__glibcxx_assert(__pos < this->_M_len);
  405cf7:	84 c0                	test   %al,%al
  405cf9:	74 14                	je     405d0f <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm+0x29>
  405cfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cff:	48 8b 00             	mov    (%rax),%rax
  405d02:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  405d06:	0f 93 c0             	setae  %al
  405d09:	0f b6 c0             	movzbl %al,%eax
  405d0c:	48 85 c0             	test   %rax,%rax
	return *(this->_M_str + __pos);
  405d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405d13:	48 8b 50 08          	mov    0x8(%rax),%rdx
  405d17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405d1b:	48 01 d0             	add    %rdx,%rax
      }
  405d1e:	5d                   	pop    %rbp
  405d1f:	c3                   	ret

0000000000405d20 <_ZNSt8__format8_ScannerIcE7_M_scanEv>:
      _M_scan()
  405d20:	55                   	push   %rbp
  405d21:	48 89 e5             	mov    %rsp,%rbp
  405d24:	53                   	push   %rbx
  405d25:	48 83 ec 68          	sub    $0x68,%rsp
  405d29:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
	basic_string_view<_CharT> __fmt = _M_fmt_str();
  405d2d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405d31:	48 89 c7             	mov    %rax,%rdi
  405d34:	e8 dd 03 00 00       	call   406116 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405d39:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405d3d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
  405d41:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405d45:	48 89 c7             	mov    %rax,%rdi
  405d48:	e8 87 ff ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  405d4d:	48 83 f8 02          	cmp    $0x2,%rax
  405d51:	75 37                	jne    405d8a <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405d53:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405d57:	be 00 00 00 00       	mov    $0x0,%esi
  405d5c:	48 89 c7             	mov    %rax,%rdi
  405d5f:	e8 82 ff ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405d64:	0f b6 00             	movzbl (%rax),%eax
  405d67:	3c 7b                	cmp    $0x7b,%al
  405d69:	75 1f                	jne    405d8a <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405d6b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405d6f:	be 01 00 00 00       	mov    $0x1,%esi
  405d74:	48 89 c7             	mov    %rax,%rdi
  405d77:	e8 6a ff ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405d7c:	0f b6 00             	movzbl (%rax),%eax
  405d7f:	3c 7d                	cmp    $0x7d,%al
  405d81:	75 07                	jne    405d8a <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405d83:	b8 01 00 00 00       	mov    $0x1,%eax
  405d88:	eb 05                	jmp    405d8f <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6f>
  405d8a:	b8 00 00 00 00       	mov    $0x0,%eax
  405d8f:	84 c0                	test   %al,%al
  405d91:	74 55                	je     405de8 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0xc8>
	    _M_pc.advance_to(begin() + 1);
  405d93:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405d97:	48 8d 58 08          	lea    0x8(%rax),%rbx
  405d9b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405d9f:	48 89 c7             	mov    %rax,%rdi
  405da2:	e8 b7 03 00 00       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  405da7:	48 83 c0 01          	add    $0x1,%rax
  405dab:	48 89 c6             	mov    %rax,%rsi
  405dae:	48 89 df             	mov    %rbx,%rdi
  405db1:	e8 5e 05 00 00       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	    _M_format_arg(_M_pc.next_arg_id());
  405db6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405dba:	48 8b 00             	mov    (%rax),%rax
  405dbd:	48 83 c0 08          	add    $0x8,%rax
  405dc1:	48 8b 18             	mov    (%rax),%rbx
  405dc4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405dc8:	48 83 c0 08          	add    $0x8,%rax
  405dcc:	48 89 c7             	mov    %rax,%rdi
  405dcf:	e8 0c 08 00 00       	call   4065e0 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  405dd4:	48 89 c2             	mov    %rax,%rdx
  405dd7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405ddb:	48 89 d6             	mov    %rdx,%rsi
  405dde:	48 89 c7             	mov    %rax,%rdi
  405de1:	ff d3                	call   *%rbx
	    return;
  405de3:	e9 28 03 00 00       	jmp    406110 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3f0>
	size_t __lbr = __fmt.find('{');
  405de8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405dec:	ba 00 00 00 00       	mov    $0x0,%edx
  405df1:	be 7b 00 00 00       	mov    $0x7b,%esi
  405df6:	48 89 c7             	mov    %rax,%rdi
  405df9:	e8 26 04 00 00       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405dfe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t __rbr = __fmt.find('}');
  405e02:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405e06:	ba 00 00 00 00       	mov    $0x0,%edx
  405e0b:	be 7d 00 00 00       	mov    $0x7d,%esi
  405e10:	48 89 c7             	mov    %rax,%rdi
  405e13:	e8 0c 04 00 00       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405e18:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (__fmt.size())
  405e1c:	e9 d5 02 00 00       	jmp    4060f6 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
	    auto __cmp = __lbr <=> __rbr;
  405e21:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405e25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405e29:	48 39 c2             	cmp    %rax,%rdx
  405e2c:	74 11                	je     405e3f <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x11f>
  405e2e:	48 39 c2             	cmp    %rax,%rdx
  405e31:	73 06                	jae    405e39 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x119>
  405e33:	c6 45 af ff          	movb   $0xff,-0x51(%rbp)
  405e37:	eb 0a                	jmp    405e43 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x123>
  405e39:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  405e3d:	eb 04                	jmp    405e43 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x123>
  405e3f:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
	    if (__cmp == 0)
  405e43:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
  405e47:	89 c7                	mov    %eax,%edi
  405e49:	e8 f7 e7 ff ff       	call   404645 <_ZSteqSt15strong_orderingNSt9__cmp_cat8__unspecE>
  405e4e:	84 c0                	test   %al,%al
  405e50:	74 49                	je     405e9b <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x17b>
		_M_on_chars(end());
  405e52:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e56:	48 8b 00             	mov    (%rax),%rax
  405e59:	48 8b 18             	mov    (%rax),%rbx
  405e5c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e60:	48 89 c7             	mov    %rax,%rdi
  405e63:	e8 26 03 00 00       	call   40618e <_ZNKSt8__format8_ScannerIcE3endEv>
  405e68:	48 89 c2             	mov    %rax,%rdx
  405e6b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e6f:	48 89 d6             	mov    %rdx,%rsi
  405e72:	48 89 c7             	mov    %rax,%rdi
  405e75:	ff d3                	call   *%rbx
		_M_pc.advance_to(end());
  405e77:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e7b:	48 8d 58 08          	lea    0x8(%rax),%rbx
  405e7f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e83:	48 89 c7             	mov    %rax,%rdi
  405e86:	e8 03 03 00 00       	call   40618e <_ZNKSt8__format8_ScannerIcE3endEv>
  405e8b:	48 89 c6             	mov    %rax,%rsi
  405e8e:	48 89 df             	mov    %rbx,%rdi
  405e91:	e8 7e 04 00 00       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  405e96:	e9 75 02 00 00       	jmp    406110 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3f0>
	    else if (__cmp < 0)
  405e9b:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
  405e9f:	89 c7                	mov    %eax,%edi
  405ea1:	e8 b2 e7 ff ff       	call   404658 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
  405ea6:	84 c0                	test   %al,%al
  405ea8:	0f 84 71 01 00 00    	je     40601f <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x2ff>
		if (__lbr + 1 == __fmt.size()
  405eae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405eb2:	48 8d 58 01          	lea    0x1(%rax),%rbx
  405eb6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405eba:	48 89 c7             	mov    %rax,%rdi
  405ebd:	e8 12 fe ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
  405ec2:	48 39 c3             	cmp    %rax,%rbx
  405ec5:	74 25                	je     405eec <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1cc>
  405ec7:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  405ecc:	75 25                	jne    405ef3 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d3>
  405ece:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405ed2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  405ed6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405eda:	48 89 d6             	mov    %rdx,%rsi
  405edd:	48 89 c7             	mov    %rax,%rdi
  405ee0:	e8 01 fe ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405ee5:	0f b6 00             	movzbl (%rax),%eax
  405ee8:	3c 7b                	cmp    $0x7b,%al
  405eea:	74 07                	je     405ef3 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d3>
  405eec:	b8 01 00 00 00       	mov    $0x1,%eax
  405ef1:	eb 05                	jmp    405ef8 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d8>
  405ef3:	b8 00 00 00 00       	mov    $0x0,%eax
		if (__lbr + 1 == __fmt.size()
  405ef8:	84 c0                	test   %al,%al
  405efa:	74 05                	je     405f01 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1e1>
		  __format::__unmatched_left_brace_in_format_string();
  405efc:	e8 a9 f2 ff ff       	call   4051aa <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
		const bool __is_escape = __fmt[__lbr + 1] == '{';
  405f01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f05:	48 8d 50 01          	lea    0x1(%rax),%rdx
  405f09:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405f0d:	48 89 d6             	mov    %rdx,%rsi
  405f10:	48 89 c7             	mov    %rax,%rdi
  405f13:	e8 ce fd ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405f18:	0f b6 00             	movzbl (%rax),%eax
  405f1b:	3c 7b                	cmp    $0x7b,%al
  405f1d:	0f 94 c0             	sete   %al
  405f20:	88 45 d7             	mov    %al,-0x29(%rbp)
		iterator __last = begin() + __lbr + int(__is_escape);
  405f23:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f27:	48 89 c7             	mov    %rax,%rdi
  405f2a:	e8 2f 02 00 00       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  405f2f:	0f b6 4d d7          	movzbl -0x29(%rbp),%ecx
  405f33:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405f37:	48 01 ca             	add    %rcx,%rdx
  405f3a:	48 01 d0             	add    %rdx,%rax
  405f3d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		_M_on_chars(__last);
  405f41:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f45:	48 8b 00             	mov    (%rax),%rax
  405f48:	48 8b 08             	mov    (%rax),%rcx
  405f4b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405f4f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f53:	48 89 d6             	mov    %rdx,%rsi
  405f56:	48 89 c7             	mov    %rax,%rdi
  405f59:	ff d1                	call   *%rcx
		_M_pc.advance_to(__last + 1);
  405f5b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f5f:	48 83 c0 08          	add    $0x8,%rax
  405f63:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405f67:	48 83 c2 01          	add    $0x1,%rdx
  405f6b:	48 89 d6             	mov    %rdx,%rsi
  405f6e:	48 89 c7             	mov    %rax,%rdi
  405f71:	e8 9e 03 00 00       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
		__fmt = _M_fmt_str();
  405f76:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f7a:	48 89 c7             	mov    %rax,%rdi
  405f7d:	e8 94 01 00 00       	call   406116 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405f82:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405f86:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		if (__is_escape)
  405f8a:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  405f8e:	74 36                	je     405fc6 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x2a6>
		    if (__rbr != __fmt.npos)
  405f90:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  405f95:	74 10                	je     405fa7 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x287>
		      __rbr -= __lbr + 2;
  405f97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405f9b:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  405f9f:	48 83 e8 02          	sub    $0x2,%rax
  405fa3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    __lbr = __fmt.find('{');
  405fa7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405fab:	ba 00 00 00 00       	mov    $0x0,%edx
  405fb0:	be 7b 00 00 00       	mov    $0x7b,%esi
  405fb5:	48 89 c7             	mov    %rax,%rdi
  405fb8:	e8 67 02 00 00       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405fbd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  405fc1:	e9 30 01 00 00       	jmp    4060f6 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
		    _M_on_replacement_field();
  405fc6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405fca:	48 89 c7             	mov    %rax,%rdi
  405fcd:	e8 02 04 00 00       	call   4063d4 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv>
		    __fmt = _M_fmt_str();
  405fd2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405fd6:	48 89 c7             	mov    %rax,%rdi
  405fd9:	e8 38 01 00 00       	call   406116 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405fde:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405fe2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		    __lbr = __fmt.find('{');
  405fe6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405fea:	ba 00 00 00 00       	mov    $0x0,%edx
  405fef:	be 7b 00 00 00       	mov    $0x7b,%esi
  405ff4:	48 89 c7             	mov    %rax,%rdi
  405ff7:	e8 28 02 00 00       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405ffc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    __rbr = __fmt.find('}');
  406000:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406004:	ba 00 00 00 00       	mov    $0x0,%edx
  406009:	be 7d 00 00 00       	mov    $0x7d,%esi
  40600e:	48 89 c7             	mov    %rax,%rdi
  406011:	e8 0e 02 00 00       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  406016:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40601a:	e9 d7 00 00 00       	jmp    4060f6 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
		if (++__rbr == __fmt.size() || __fmt[__rbr] != '}')
  40601f:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  406024:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406028:	48 89 c7             	mov    %rax,%rdi
  40602b:	e8 a4 fc ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  406030:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  406034:	74 1a                	je     406050 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x330>
  406036:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40603a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40603e:	48 89 d6             	mov    %rdx,%rsi
  406041:	48 89 c7             	mov    %rax,%rdi
  406044:	e8 9d fc ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  406049:	0f b6 00             	movzbl (%rax),%eax
  40604c:	3c 7d                	cmp    $0x7d,%al
  40604e:	74 07                	je     406057 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x337>
  406050:	b8 01 00 00 00       	mov    $0x1,%eax
  406055:	eb 05                	jmp    40605c <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x33c>
  406057:	b8 00 00 00 00       	mov    $0x0,%eax
  40605c:	84 c0                	test   %al,%al
  40605e:	74 05                	je     406065 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x345>
		  __format::__unmatched_right_brace_in_format_string();
  406060:	e8 53 f1 ff ff       	call   4051b8 <_ZNSt8__format40__unmatched_right_brace_in_format_stringEv>
		iterator __last = begin() + __rbr;
  406065:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406069:	48 89 c7             	mov    %rax,%rdi
  40606c:	e8 ed 00 00 00       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  406071:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  406075:	48 01 d0             	add    %rdx,%rax
  406078:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		_M_on_chars(__last);
  40607c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406080:	48 8b 00             	mov    (%rax),%rax
  406083:	48 8b 08             	mov    (%rax),%rcx
  406086:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40608a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40608e:	48 89 d6             	mov    %rdx,%rsi
  406091:	48 89 c7             	mov    %rax,%rdi
  406094:	ff d1                	call   *%rcx
		_M_pc.advance_to(__last + 1);
  406096:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40609a:	48 83 c0 08          	add    $0x8,%rax
  40609e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4060a2:	48 83 c2 01          	add    $0x1,%rdx
  4060a6:	48 89 d6             	mov    %rdx,%rsi
  4060a9:	48 89 c7             	mov    %rax,%rdi
  4060ac:	e8 63 02 00 00       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
		__fmt = _M_fmt_str();
  4060b1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4060b5:	48 89 c7             	mov    %rax,%rdi
  4060b8:	e8 59 00 00 00       	call   406116 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  4060bd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4060c1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		if (__lbr != __fmt.npos)
  4060c5:	48 83 7d e8 ff       	cmpq   $0xffffffffffffffff,-0x18(%rbp)
  4060ca:	74 10                	je     4060dc <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3bc>
		  __lbr -= __rbr + 1;
  4060cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060d0:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  4060d4:	48 83 e8 01          	sub    $0x1,%rax
  4060d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		__rbr = __fmt.find('}');
  4060dc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4060e0:	ba 00 00 00 00       	mov    $0x0,%edx
  4060e5:	be 7d 00 00 00       	mov    $0x7d,%esi
  4060ea:	48 89 c7             	mov    %rax,%rdi
  4060ed:	e8 32 01 00 00       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4060f2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (__fmt.size())
  4060f6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4060fa:	48 89 c7             	mov    %rax,%rdi
  4060fd:	e8 d2 fb ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  406102:	48 85 c0             	test   %rax,%rax
  406105:	0f 95 c0             	setne  %al
  406108:	84 c0                	test   %al,%al
  40610a:	0f 85 11 fd ff ff    	jne    405e21 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x101>
      }
  406110:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  406114:	c9                   	leave
  406115:	c3                   	ret

0000000000406116 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>:
      _M_fmt_str() const noexcept
  406116:	55                   	push   %rbp
  406117:	48 89 e5             	mov    %rsp,%rbp
  40611a:	53                   	push   %rbx
  40611b:	48 83 ec 28          	sub    $0x28,%rsp
  40611f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return {begin(), end()}; }
  406123:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406127:	48 89 c7             	mov    %rax,%rdi
  40612a:	e8 2f 00 00 00       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  40612f:	48 89 c3             	mov    %rax,%rbx
  406132:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406136:	48 89 c7             	mov    %rax,%rdi
  406139:	e8 50 00 00 00       	call   40618e <_ZNKSt8__format8_ScannerIcE3endEv>
  40613e:	48 89 c2             	mov    %rax,%rdx
  406141:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  406145:	48 89 de             	mov    %rbx,%rsi
  406148:	48 89 c7             	mov    %rax,%rdi
  40614b:	e8 6e 00 00 00       	call   4061be <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
  406150:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406154:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406158:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40615c:	c9                   	leave
  40615d:	c3                   	ret

000000000040615e <_ZNKSt8__format8_ScannerIcE5beginEv>:
      constexpr iterator begin() const noexcept { return _M_pc.begin(); }
  40615e:	55                   	push   %rbp
  40615f:	48 89 e5             	mov    %rsp,%rbp
  406162:	48 83 ec 10          	sub    $0x10,%rsp
  406166:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40616a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40616e:	48 83 c0 08          	add    $0x8,%rax
  406172:	48 89 c7             	mov    %rax,%rdi
  406175:	e8 02 00 00 00       	call   40617c <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  40617a:	c9                   	leave
  40617b:	c3                   	ret

000000000040617c <_ZNKSt26basic_format_parse_contextIcE5beginEv>:
      constexpr const_iterator begin() const noexcept { return _M_begin; }
  40617c:	55                   	push   %rbp
  40617d:	48 89 e5             	mov    %rsp,%rbp
  406180:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406184:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406188:	48 8b 00             	mov    (%rax),%rax
  40618b:	5d                   	pop    %rbp
  40618c:	c3                   	ret
  40618d:	90                   	nop

000000000040618e <_ZNKSt8__format8_ScannerIcE3endEv>:
      constexpr iterator end() const noexcept { return _M_pc.end(); }
  40618e:	55                   	push   %rbp
  40618f:	48 89 e5             	mov    %rsp,%rbp
  406192:	48 83 ec 10          	sub    $0x10,%rsp
  406196:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40619a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40619e:	48 83 c0 08          	add    $0x8,%rax
  4061a2:	48 89 c7             	mov    %rax,%rdi
  4061a5:	e8 02 00 00 00       	call   4061ac <_ZNKSt26basic_format_parse_contextIcE3endEv>
  4061aa:	c9                   	leave
  4061ab:	c3                   	ret

00000000004061ac <_ZNKSt26basic_format_parse_contextIcE3endEv>:
      constexpr const_iterator end() const noexcept { return _M_end; }
  4061ac:	55                   	push   %rbp
  4061ad:	48 89 e5             	mov    %rsp,%rbp
  4061b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061b8:	48 8b 40 08          	mov    0x8(%rax),%rax
  4061bc:	5d                   	pop    %rbp
  4061bd:	c3                   	ret

00000000004061be <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>:
	basic_string_view(_It __first, _End __last)
  4061be:	55                   	push   %rbp
  4061bf:	48 89 e5             	mov    %rsp,%rbp
  4061c2:	48 83 ec 20          	sub    $0x20,%rsp
  4061c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4061ce:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _M_len(__last - __first), _M_str(std::to_address(__first))
  4061d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4061d6:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  4061da:	48 89 c2             	mov    %rax,%rdx
  4061dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061e1:	48 89 10             	mov    %rdx,(%rax)
  4061e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4061e8:	48 89 c7             	mov    %rax,%rdi
  4061eb:	e8 0b 00 00 00       	call   4061fb <_ZSt10to_addressIKcEPT_S2_>
  4061f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4061f4:	48 89 42 08          	mov    %rax,0x8(%rdx)
	{ }
  4061f8:	90                   	nop
  4061f9:	c9                   	leave
  4061fa:	c3                   	ret

00000000004061fb <_ZSt10to_addressIKcEPT_S2_>:
   * @return @c __ptr
   * @ingroup pointer_abstractions
  */
  template<typename _Tp>
    constexpr _Tp*
    to_address(_Tp* __ptr) noexcept
  4061fb:	55                   	push   %rbp
  4061fc:	48 89 e5             	mov    %rsp,%rbp
  4061ff:	48 83 ec 10          	sub    $0x10,%rsp
  406203:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__to_address(__ptr); }
  406207:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40620b:	48 89 c7             	mov    %rax,%rdi
  40620e:	e8 02 00 00 00       	call   406215 <_ZSt12__to_addressIKcEPT_S2_>
  406213:	c9                   	leave
  406214:	c3                   	ret

0000000000406215 <_ZSt12__to_addressIKcEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
  406215:	55                   	push   %rbp
  406216:	48 89 e5             	mov    %rsp,%rbp
  406219:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __ptr;
  40621d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  406221:	5d                   	pop    %rbp
  406222:	c3                   	ret
  406223:	90                   	nop

0000000000406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
  406224:	55                   	push   %rbp
  406225:	48 89 e5             	mov    %rsp,%rbp
  406228:	48 83 ec 40          	sub    $0x40,%rsp
  40622c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  406230:	89 f0                	mov    %esi,%eax
  406232:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406236:	88 45 d4             	mov    %al,-0x2c(%rbp)
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
  406239:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
  406240:	ff
      if (__pos < this->_M_len)
  406241:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406245:	48 8b 00             	mov    (%rax),%rax
  406248:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40624c:	73 50                	jae    40629e <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm+0x7a>
	{
	  const size_type __n = this->_M_len - __pos;
  40624e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406252:	48 8b 00             	mov    (%rax),%rax
  406255:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  406259:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
  40625d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406261:	48 8b 50 08          	mov    0x8(%rax),%rdx
  406265:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406269:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40626d:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  406271:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406275:	48 89 c6             	mov    %rax,%rsi
  406278:	48 89 cf             	mov    %rcx,%rdi
  40627b:	e8 d4 e5 ff ff       	call   404854 <_ZNSt11char_traitsIcE4findEPKcmRS1_>
  406280:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__p)
  406284:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  406289:	74 13                	je     40629e <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm+0x7a>
	    __ret = __p - this->_M_str;
  40628b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40628f:	48 8b 40 08          	mov    0x8(%rax),%rax
  406293:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406297:	48 29 c2             	sub    %rax,%rdx
  40629a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	}
      return __ret;
  40629e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4062a2:	c9                   	leave
  4062a3:	c3                   	ret

00000000004062a4 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_>:
    char_traits<_CharT>::
  4062a4:	55                   	push   %rbp
  4062a5:	48 89 e5             	mov    %rsp,%rbp
  4062a8:	48 83 ec 30          	sub    $0x30,%rsp
  4062ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4062b0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4062b4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      for (std::size_t __i = 0; __i < __n; ++__i)
  4062b8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4062bf:	00
  4062c0:	eb 30                	jmp    4062f2 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x4e>
        if (eq(__s[__i], __a))
  4062c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4062c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4062ca:	48 01 c2             	add    %rax,%rdx
  4062cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4062d1:	48 89 c6             	mov    %rax,%rsi
  4062d4:	48 89 d7             	mov    %rdx,%rdi
  4062d7:	e8 da f8 ff ff       	call   405bb6 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
  4062dc:	84 c0                	test   %al,%al
  4062de:	74 0d                	je     4062ed <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x49>
          return __s + __i;
  4062e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4062e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4062e8:	48 01 d0             	add    %rdx,%rax
  4062eb:	eb 14                	jmp    406301 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x5d>
      for (std::size_t __i = 0; __i < __n; ++__i)
  4062ed:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  4062f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4062f6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4062fa:	72 c6                	jb     4062c2 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x1e>
      return 0;
  4062fc:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  406301:	c9                   	leave
  406302:	c3                   	ret
  406303:	90                   	nop

0000000000406304 <_ZNSt8__format8_ScannerIcE11_M_on_charsEPKc>:
      constexpr virtual void _M_on_chars(iterator) { }
  406304:	55                   	push   %rbp
  406305:	48 89 e5             	mov    %rsp,%rbp
  406308:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40630c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406310:	90                   	nop
  406311:	5d                   	pop    %rbp
  406312:	c3                   	ret
  406313:	90                   	nop

0000000000406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>:
      advance_to(const_iterator __it) noexcept
  406314:	55                   	push   %rbp
  406315:	48 89 e5             	mov    %rsp,%rbp
  406318:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40631c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_begin = __it; }
  406320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406324:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406328:	48 89 10             	mov    %rdx,(%rax)
  40632b:	90                   	nop
  40632c:	5d                   	pop    %rbp
  40632d:	c3                   	ret

000000000040632e <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
  40632e:	55                   	push   %rbp
  40632f:	48 89 e5             	mov    %rsp,%rbp
  406332:	48 83 ec 10          	sub    $0x10,%rsp
  406336:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
  40633a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40633e:	48 89 c7             	mov    %rax,%rdi
  406341:	e8 0a 00 00 00       	call   406350 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>
  406346:	48 89 c7             	mov    %rax,%rdi
  406349:	e8 10 00 00 00       	call   40635e <_ZNSt10__pair_getILm0EE10__move_getItPKcEEOT_OSt4pairIS4_T0_E>
  40634e:	c9                   	leave
  40634f:	c3                   	ret

0000000000406350 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
  406350:	55                   	push   %rbp
  406351:	48 89 e5             	mov    %rsp,%rbp
  406354:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  406358:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40635c:	5d                   	pop    %rbp
  40635d:	c3                   	ret

000000000040635e <_ZNSt10__pair_getILm0EE10__move_getItPKcEEOT_OSt4pairIS4_T0_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
  40635e:	55                   	push   %rbp
  40635f:	48 89 e5             	mov    %rsp,%rbp
  406362:	48 83 ec 10          	sub    $0x10,%rsp
  406366:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return std::forward<_Tp1>(__pair.first); }
  40636a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40636e:	48 89 c7             	mov    %rax,%rdi
  406371:	e8 02 00 00 00       	call   406378 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
  406376:	c9                   	leave
  406377:	c3                   	ret

0000000000406378 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  406378:	55                   	push   %rbp
  406379:	48 89 e5             	mov    %rsp,%rbp
  40637c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  406380:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406384:	5d                   	pop    %rbp
  406385:	c3                   	ret

0000000000406386 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
  406386:	55                   	push   %rbp
  406387:	48 89 e5             	mov    %rsp,%rbp
  40638a:	48 83 ec 10          	sub    $0x10,%rsp
  40638e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
  406392:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406396:	48 89 c7             	mov    %rax,%rdi
  406399:	e8 b2 ff ff ff       	call   406350 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>
  40639e:	48 89 c7             	mov    %rax,%rdi
  4063a1:	e8 02 00 00 00       	call   4063a8 <_ZNSt10__pair_getILm1EE10__move_getItPKcEEOT0_OSt4pairIT_S4_E>
  4063a6:	c9                   	leave
  4063a7:	c3                   	ret

00000000004063a8 <_ZNSt10__pair_getILm1EE10__move_getItPKcEEOT0_OSt4pairIT_S4_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
  4063a8:	55                   	push   %rbp
  4063a9:	48 89 e5             	mov    %rsp,%rbp
  4063ac:	48 83 ec 10          	sub    $0x10,%rsp
  4063b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return std::forward<_Tp2>(__pair.second); }
  4063b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063b8:	48 83 c0 08          	add    $0x8,%rax
  4063bc:	48 89 c7             	mov    %rax,%rdi
  4063bf:	e8 02 00 00 00       	call   4063c6 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
  4063c4:	c9                   	leave
  4063c5:	c3                   	ret

00000000004063c6 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4063c6:	55                   	push   %rbp
  4063c7:	48 89 e5             	mov    %rsp,%rbp
  4063ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4063ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063d2:	5d                   	pop    %rbp
  4063d3:	c3                   	ret

00000000004063d4 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv>:
      constexpr void _M_on_replacement_field()
  4063d4:	55                   	push   %rbp
  4063d5:	48 89 e5             	mov    %rsp,%rbp
  4063d8:	53                   	push   %rbx
  4063d9:	48 83 ec 48          	sub    $0x48,%rsp
  4063dd:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __next = begin();
  4063e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4063e5:	48 89 c7             	mov    %rax,%rdi
  4063e8:	e8 71 fd ff ff       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  4063ed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (*__next == '}')
  4063f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4063f5:	0f b6 00             	movzbl (%rax),%eax
  4063f8:	3c 7d                	cmp    $0x7d,%al
  4063fa:	75 19                	jne    406415 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x41>
	  __id = _M_pc.next_arg_id();
  4063fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406400:	48 83 c0 08          	add    $0x8,%rax
  406404:	48 89 c7             	mov    %rax,%rdi
  406407:	e8 d4 01 00 00       	call   4065e0 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  40640c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  406410:	e9 3a 01 00 00       	jmp    40654f <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	else if (*__next == ':')
  406415:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406419:	0f b6 00             	movzbl (%rax),%eax
  40641c:	3c 3a                	cmp    $0x3a,%al
  40641e:	75 35                	jne    406455 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x81>
	    __id = _M_pc.next_arg_id();
  406420:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406424:	48 83 c0 08          	add    $0x8,%rax
  406428:	48 89 c7             	mov    %rax,%rdi
  40642b:	e8 b0 01 00 00       	call   4065e0 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  406430:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    _M_pc.advance_to(++__next);
  406434:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406438:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40643c:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  406441:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406445:	48 89 c6             	mov    %rax,%rsi
  406448:	48 89 d7             	mov    %rdx,%rdi
  40644b:	e8 c4 fe ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  406450:	e9 fa 00 00 00       	jmp    40654f <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	    auto [__i, __ptr] = __format::__parse_arg_id(begin(), end());
  406455:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406459:	48 89 c7             	mov    %rax,%rdi
  40645c:	e8 2d fd ff ff       	call   40618e <_ZNKSt8__format8_ScannerIcE3endEv>
  406461:	48 89 c3             	mov    %rax,%rbx
  406464:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406468:	48 89 c7             	mov    %rax,%rdi
  40646b:	e8 ee fc ff ff       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  406470:	48 89 de             	mov    %rbx,%rsi
  406473:	48 89 c7             	mov    %rax,%rdi
  406476:	e8 15 1f 00 00       	call   408390 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>
  40647b:	89 c1                	mov    %eax,%ecx
  40647d:	48 89 d0             	mov    %rdx,%rax
  406480:	89 4d c0             	mov    %ecx,-0x40(%rbp)
  406483:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406487:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40648b:	48 89 c7             	mov    %rax,%rdi
  40648e:	e8 9b fe ff ff       	call   40632e <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  406493:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406497:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40649b:	48 89 c7             	mov    %rax,%rdi
  40649e:	e8 e3 fe ff ff       	call   406386 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  4064a3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
  4064a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064ab:	48 8b 00             	mov    (%rax),%rax
  4064ae:	48 85 c0             	test   %rax,%rax
  4064b1:	74 1c                	je     4064cf <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0xfb>
  4064b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064b7:	48 8b 00             	mov    (%rax),%rax
  4064ba:	0f b6 00             	movzbl (%rax),%eax
  4064bd:	3c 7d                	cmp    $0x7d,%al
  4064bf:	74 13                	je     4064d4 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x100>
  4064c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064c5:	48 8b 00             	mov    (%rax),%rax
  4064c8:	0f b6 00             	movzbl (%rax),%eax
  4064cb:	3c 3a                	cmp    $0x3a,%al
  4064cd:	74 05                	je     4064d4 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x100>
	      __format::__invalid_arg_id_in_format_string();
  4064cf:	e8 00 ed ff ff       	call   4051d4 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
	    _M_pc.check_arg_id(__id = __i);
  4064d4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4064d8:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4064dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4064e0:	0f b7 00             	movzwl (%rax),%eax
  4064e3:	0f b7 c0             	movzwl %ax,%eax
  4064e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4064ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4064ee:	48 89 c6             	mov    %rax,%rsi
  4064f1:	48 89 d7             	mov    %rdx,%rdi
  4064f4:	e8 b7 1f 00 00       	call   4084b0 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>
	    if (*__ptr == ':')
  4064f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064fd:	48 8b 00             	mov    (%rax),%rax
  406500:	0f b6 00             	movzbl (%rax),%eax
  406503:	3c 3a                	cmp    $0x3a,%al
  406505:	75 2e                	jne    406535 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x161>
		_M_pc.advance_to(++__ptr);
  406507:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40650b:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40650f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406513:	48 8b 00             	mov    (%rax),%rax
  406516:	48 8d 48 01          	lea    0x1(%rax),%rcx
  40651a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40651e:	48 89 08             	mov    %rcx,(%rax)
  406521:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406525:	48 8b 00             	mov    (%rax),%rax
  406528:	48 89 c6             	mov    %rax,%rsi
  40652b:	48 89 d7             	mov    %rdx,%rdi
  40652e:	e8 e1 fd ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  406533:	eb 1a                	jmp    40654f <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	      _M_pc.advance_to(__ptr);
  406535:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406539:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40653d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406541:	48 8b 00             	mov    (%rax),%rax
  406544:	48 89 c6             	mov    %rax,%rsi
  406547:	48 89 d7             	mov    %rdx,%rdi
  40654a:	e8 c5 fd ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	_M_format_arg(__id);
  40654f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406553:	48 8b 00             	mov    (%rax),%rax
  406556:	48 83 c0 08          	add    $0x8,%rax
  40655a:	48 8b 08             	mov    (%rax),%rcx
  40655d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406561:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406565:	48 89 d6             	mov    %rdx,%rsi
  406568:	48 89 c7             	mov    %rax,%rdi
  40656b:	ff d1                	call   *%rcx
	if (begin() == end() || *begin() != '}')
  40656d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406571:	48 89 c7             	mov    %rax,%rdi
  406574:	e8 e5 fb ff ff       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  406579:	48 89 c3             	mov    %rax,%rbx
  40657c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406580:	48 89 c7             	mov    %rax,%rdi
  406583:	e8 06 fc ff ff       	call   40618e <_ZNKSt8__format8_ScannerIcE3endEv>
  406588:	48 39 c3             	cmp    %rax,%rbx
  40658b:	74 13                	je     4065a0 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1cc>
  40658d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406591:	48 89 c7             	mov    %rax,%rdi
  406594:	e8 c5 fb ff ff       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  406599:	0f b6 00             	movzbl (%rax),%eax
  40659c:	3c 7d                	cmp    $0x7d,%al
  40659e:	74 07                	je     4065a7 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1d3>
  4065a0:	b8 01 00 00 00       	mov    $0x1,%eax
  4065a5:	eb 05                	jmp    4065ac <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1d8>
  4065a7:	b8 00 00 00 00       	mov    $0x0,%eax
  4065ac:	84 c0                	test   %al,%al
  4065ae:	74 05                	je     4065b5 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1e1>
	  __format::__unmatched_left_brace_in_format_string();
  4065b0:	e8 f5 eb ff ff       	call   4051aa <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
	_M_pc.advance_to(begin() + 1); // Move past '}'
  4065b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4065b9:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4065bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4065c1:	48 89 c7             	mov    %rax,%rdi
  4065c4:	e8 95 fb ff ff       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  4065c9:	48 83 c0 01          	add    $0x1,%rax
  4065cd:	48 89 c6             	mov    %rax,%rsi
  4065d0:	48 89 df             	mov    %rbx,%rdi
  4065d3:	e8 3c fd ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
      }
  4065d8:	90                   	nop
  4065d9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4065dd:	c9                   	leave
  4065de:	c3                   	ret
  4065df:	90                   	nop

00000000004065e0 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>:
      next_arg_id()
  4065e0:	55                   	push   %rbp
  4065e1:	48 89 e5             	mov    %rsp,%rbp
  4065e4:	48 83 ec 10          	sub    $0x10,%rsp
  4065e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (_M_indexing == _Manual)
  4065ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4065f0:	8b 40 10             	mov    0x10(%rax),%eax
  4065f3:	83 f8 01             	cmp    $0x1,%eax
  4065f6:	75 05                	jne    4065fd <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x1d>
	  __format::__conflicting_indexing_in_format_string();
  4065f8:	e8 c9 eb ff ff       	call   4051c6 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>
	_M_indexing = _Auto;
  4065fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406601:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%rax)
	if (std::is_constant_evaluated())
  406608:	e8 2d e0 ff ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  40660d:	84 c0                	test   %al,%al
  40660f:	74 1a                	je     40662b <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x4b>
	  if (_M_next_arg_id == _M_num_args)
  406611:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406615:	48 8b 50 18          	mov    0x18(%rax),%rdx
  406619:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40661d:	48 8b 40 20          	mov    0x20(%rax),%rax
  406621:	48 39 c2             	cmp    %rax,%rdx
  406624:	75 05                	jne    40662b <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x4b>
	    __format::__invalid_arg_id_in_format_string();
  406626:	e8 a9 eb ff ff       	call   4051d4 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
	return _M_next_arg_id++;
  40662b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40662f:	48 8b 40 18          	mov    0x18(%rax),%rax
  406633:	48 8d 48 01          	lea    0x1(%rax),%rcx
  406637:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40663b:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
      }
  40663f:	c9                   	leave
  406640:	c3                   	ret
  406641:	90                   	nop

0000000000406642 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  406642:	55                   	push   %rbp
  406643:	48 89 e5             	mov    %rsp,%rbp
  406646:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  40664a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40664e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  406652:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406656:	48 8b 00             	mov    (%rax),%rax
  406659:	48 8b 0a             	mov    (%rdx),%rcx
  40665c:	48 89 08             	mov    %rcx,(%rax)
  40665f:	8b 52 08             	mov    0x8(%rdx),%edx
  406662:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  406665:	90                   	nop
  406666:	5d                   	pop    %rbp
  406667:	c3                   	ret

0000000000406668 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  406668:	55                   	push   %rbp
  406669:	48 89 e5             	mov    %rsp,%rbp
  40666c:	48 83 ec 10          	sub    $0x10,%rsp
  406670:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  406674:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406678:	48 8b 00             	mov    (%rax),%rax
  40667b:	48 8b 10             	mov    (%rax),%rdx
  40667e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406682:	48 8b 40 08          	mov    0x8(%rax),%rax
  406686:	48 8b 00             	mov    (%rax),%rax
  406689:	48 39 c2             	cmp    %rax,%rdx
  40668c:	74 11                	je     40669f <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  40668e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406692:	48 8b 00             	mov    (%rax),%rax
  406695:	48 8b 00             	mov    (%rax),%rax
  406698:	0f b6 00             	movzbl (%rax),%eax
  40669b:	3c 7d                	cmp    $0x7d,%al
  40669d:	75 17                	jne    4066b6 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  40669f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066a3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4066a7:	48 89 c7             	mov    %rax,%rdi
  4066aa:	e8 93 ff ff ff       	call   406642 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  4066af:	b8 01 00 00 00       	mov    $0x1,%eax
  4066b4:	eb 05                	jmp    4066bb <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  4066b6:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  4066bb:	c9                   	leave
  4066bc:	c3                   	ret
  4066bd:	90                   	nop

00000000004066be <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  4066be:	55                   	push   %rbp
  4066bf:	48 89 e5             	mov    %rsp,%rbp
  4066c2:	48 83 ec 60          	sub    $0x60,%rsp
  4066c6:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4066ca:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	auto __first = __pc.begin();
  4066ce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4066d2:	48 89 c7             	mov    %rax,%rdi
  4066d5:	e8 a2 fa ff ff       	call   40617c <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  4066da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const auto __last = __pc.end();
  4066de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4066e2:	48 89 c7             	mov    %rax,%rdi
  4066e5:	e8 c2 fa ff ff       	call   4061ac <_ZNKSt26basic_format_parse_contextIcE3endEv>
  4066ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	_Spec<_CharT> __spec{};
  4066ee:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  4066f5:	00
  4066f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4066fd:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	auto __finalize = [this, &__spec] {
  406704:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406708:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40670c:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  406710:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  406714:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  406718:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40671c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  406720:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406724:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  406728:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  40672c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406730:	48 89 c7             	mov    %rax,%rdi
  406733:	e8 30 ff ff ff       	call   406668 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  406738:	84 c0                	test   %al,%al
  40673a:	74 09                	je     406745 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  40673c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406740:	e9 ca 00 00 00       	jmp    40680f <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  406745:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406749:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40674d:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  406751:	48 89 ce             	mov    %rcx,%rsi
  406754:	48 89 c7             	mov    %rax,%rdi
  406757:	e8 c8 1e 00 00       	call   408624 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  40675c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  406760:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406764:	48 89 c7             	mov    %rax,%rdi
  406767:	e8 fc fe ff ff       	call   406668 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40676c:	84 c0                	test   %al,%al
  40676e:	74 09                	je     406779 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0xbb>
	  return __first;
  406770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406774:	e9 96 00 00 00       	jmp    40680f <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_width(__first, __last, __pc);
  406779:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40677d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  406781:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  406785:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  406789:	48 89 c7             	mov    %rax,%rdi
  40678c:	e8 25 20 00 00       	call   4087b6 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  406791:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  406795:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406799:	48 89 c7             	mov    %rax,%rdi
  40679c:	e8 c7 fe ff ff       	call   406668 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4067a1:	84 c0                	test   %al,%al
  4067a3:	74 06                	je     4067ab <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0xed>
	  return __first;
  4067a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067a9:	eb 64                	jmp    40680f <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_precision(__first, __last, __pc);
  4067ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4067af:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4067b3:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4067b7:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  4067bb:	48 89 c7             	mov    %rax,%rdi
  4067be:	e8 91 20 00 00       	call   408854 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>
  4067c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  4067c7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4067cb:	48 89 c7             	mov    %rax,%rdi
  4067ce:	e8 95 fe ff ff       	call   406668 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4067d3:	84 c0                	test   %al,%al
  4067d5:	74 06                	je     4067dd <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x11f>
	  return __first;
  4067d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067db:	eb 32                	jmp    40680f <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	if (*__first == 's')
  4067dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067e1:	0f b6 00             	movzbl (%rax),%eax
  4067e4:	3c 73                	cmp    $0x73,%al
  4067e6:	75 0c                	jne    4067f4 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x136>
	  ++__first;
  4067e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067ec:	48 83 c0 01          	add    $0x1,%rax
  4067f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  4067f4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4067f8:	48 89 c7             	mov    %rax,%rdi
  4067fb:	e8 68 fe ff ff       	call   406668 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  406800:	84 c0                	test   %al,%al
  406802:	74 06                	je     40680a <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x14c>
	  return __first;
  406804:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406808:	eb 05                	jmp    40680f <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__format::__failed_to_parse_format_spec();
  40680a:	e8 d3 e9 ff ff       	call   4051e2 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  40680f:	c9                   	leave
  406810:	c3                   	ret
  406811:	90                   	nop

0000000000406812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
  406812:	55                   	push   %rbp
  406813:	48 89 e5             	mov    %rsp,%rbp
  406816:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40681a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40681e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406822:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406826:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40682a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40682e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  406832:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406836:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40683a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40683e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  406842:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  406843:	90                   	nop
	: allocator_type(__a), _M_p(__dat) { }
  406844:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406848:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40684c:	48 89 10             	mov    %rdx,(%rax)
  40684f:	90                   	nop
  406850:	5d                   	pop    %rbp
  406851:	c3                   	ret

0000000000406852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  406852:	55                   	push   %rbp
  406853:	48 89 e5             	mov    %rsp,%rbp
  406856:	53                   	push   %rbx
  406857:	48 83 ec 38          	sub    $0x38,%rsp
  40685b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40685f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  406863:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
  406867:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40686b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40686f:	48 89 c7             	mov    %rax,%rdi
  406872:	e8 9f e1 ff ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  406877:	48 89 c1             	mov    %rax,%rcx
  40687a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40687e:	48 89 c2             	mov    %rax,%rdx
  406881:	48 89 ce             	mov    %rcx,%rsi
  406884:	48 89 df             	mov    %rbx,%rdi
  406887:	e8 86 ff ff ff       	call   406812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
  40688c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  406891:	75 0a                	jne    40689d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x4b>
	  std::__throw_logic_error(__N("basic_string: "
  406893:	bf 50 b1 41 00       	mov    $0x41b150,%edi
  406898:	e8 33 d9 ff ff       	call   4041d0 <_ZSt19__throw_logic_errorPKc@plt>
	const _CharT* __end = __s + traits_type::length(__s);
  40689d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4068a1:	48 89 c7             	mov    %rax,%rdi
  4068a4:	e8 79 df ff ff       	call   404822 <_ZNSt11char_traitsIcE6lengthEPKc>
  4068a9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4068ad:	48 01 d0             	add    %rdx,%rax
  4068b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
  4068b4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4068b8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4068bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4068c0:	48 89 ce             	mov    %rcx,%rsi
  4068c3:	48 89 c7             	mov    %rax,%rdi
  4068c6:	e8 85 20 00 00       	call   408950 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
  4068cb:	eb 1a                	jmp    4068e7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x95>
  4068cd:	48 89 c3             	mov    %rax,%rbx
  4068d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4068d4:	48 89 c7             	mov    %rax,%rdi
  4068d7:	e8 f4 e1 ff ff       	call   404ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  4068dc:	48 89 d8             	mov    %rbx,%rax
  4068df:	48 89 c7             	mov    %rax,%rdi
  4068e2:	e8 29 db ff ff       	call   404410 <_Unwind_Resume@plt>
  4068e7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4068eb:	c9                   	leave
  4068ec:	c3                   	ret
  4068ed:	90                   	nop

00000000004068ee <_ZNSt8__format15__formatter_intIcE8_M_parseIiEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  4068ee:	55                   	push   %rbp
  4068ef:	48 89 e5             	mov    %rsp,%rbp
  4068f2:	48 83 ec 10          	sub    $0x10,%rsp
  4068f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4068fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  4068fe:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  406902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406906:	ba 01 00 00 00       	mov    $0x1,%edx
  40690b:	48 89 ce             	mov    %rcx,%rsi
  40690e:	48 89 c7             	mov    %rax,%rdi
  406911:	e8 7e 00 00 00       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  406916:	c9                   	leave
  406917:	c3                   	ret

0000000000406918 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  406918:	55                   	push   %rbp
  406919:	48 89 e5             	mov    %rsp,%rbp
  40691c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  406920:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406924:	48 8b 50 08          	mov    0x8(%rax),%rdx
  406928:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40692c:	48 8b 00             	mov    (%rax),%rax
  40692f:	48 8b 0a             	mov    (%rdx),%rcx
  406932:	48 89 08             	mov    %rcx,(%rax)
  406935:	8b 52 08             	mov    0x8(%rdx),%edx
  406938:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  40693b:	90                   	nop
  40693c:	5d                   	pop    %rbp
  40693d:	c3                   	ret

000000000040693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>:
	auto __finished = [&] {
  40693e:	55                   	push   %rbp
  40693f:	48 89 e5             	mov    %rsp,%rbp
  406942:	48 83 ec 10          	sub    $0x10,%rsp
  406946:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  40694a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40694e:	48 8b 00             	mov    (%rax),%rax
  406951:	48 8b 10             	mov    (%rax),%rdx
  406954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406958:	48 8b 40 08          	mov    0x8(%rax),%rax
  40695c:	48 8b 00             	mov    (%rax),%rax
  40695f:	48 39 c2             	cmp    %rax,%rdx
  406962:	74 11                	je     406975 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x37>
  406964:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406968:	48 8b 00             	mov    (%rax),%rax
  40696b:	48 8b 00             	mov    (%rax),%rax
  40696e:	0f b6 00             	movzbl (%rax),%eax
  406971:	3c 7d                	cmp    $0x7d,%al
  406973:	75 17                	jne    40698c <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x4e>
	      __finalize();
  406975:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406979:	48 8b 40 10          	mov    0x10(%rax),%rax
  40697d:	48 89 c7             	mov    %rax,%rdi
  406980:	e8 93 ff ff ff       	call   406918 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE_clEv>
	      return true;
  406985:	b8 01 00 00 00       	mov    $0x1,%eax
  40698a:	eb 05                	jmp    406991 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x53>
	  return false;
  40698c:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  406991:	c9                   	leave
  406992:	c3                   	ret
  406993:	90                   	nop

0000000000406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>:
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
  406994:	55                   	push   %rbp
  406995:	48 89 e5             	mov    %rsp,%rbp
  406998:	48 83 ec 70          	sub    $0x70,%rsp
  40699c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4069a0:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4069a4:	89 55 9c             	mov    %edx,-0x64(%rbp)
	_Spec<_CharT> __spec{};
  4069a7:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  4069ae:	00
  4069af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  4069b6:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	__spec._M_type = __type;
  4069bd:	8b 45 9c             	mov    -0x64(%rbp),%eax
  4069c0:	83 e0 0f             	and    $0xf,%eax
  4069c3:	83 e0 0f             	and    $0xf,%eax
  4069c6:	8d 14 c5 00 00 00 00 	lea    0x0(,%rax,8),%edx
  4069cd:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4069d1:	83 e0 87             	and    $0xffffff87,%eax
  4069d4:	09 d0                	or     %edx,%eax
  4069d6:	88 45 f5             	mov    %al,-0xb(%rbp)
	const auto __last = __pc.end();
  4069d9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4069dd:	48 89 c7             	mov    %rax,%rdi
  4069e0:	e8 c7 f7 ff ff       	call   4061ac <_ZNKSt26basic_format_parse_contextIcE3endEv>
  4069e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  4069e9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4069ed:	48 89 c7             	mov    %rax,%rdi
  4069f0:	e8 87 f7 ff ff       	call   40617c <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  4069f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  4069f9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4069fd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406a01:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406a05:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  406a09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  406a0d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406a11:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  406a15:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406a19:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  406a1d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  406a21:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406a25:	48 89 c7             	mov    %rax,%rdi
  406a28:	e8 11 ff ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406a2d:	84 c0                	test   %al,%al
  406a2f:	74 09                	je     406a3a <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0xa6>
	  return __first;
  406a31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406a35:	e9 68 02 00 00       	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  406a3a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406a3e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406a42:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406a46:	48 89 ce             	mov    %rcx,%rsi
  406a49:	48 89 c7             	mov    %rax,%rdi
  406a4c:	e8 d3 1b 00 00       	call   408624 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  406a51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406a55:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406a59:	48 89 c7             	mov    %rax,%rdi
  406a5c:	e8 dd fe ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406a61:	84 c0                	test   %al,%al
  406a63:	74 09                	je     406a6e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0xda>
	  return __first;
  406a65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406a69:	e9 34 02 00 00       	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_sign(__first, __last);
  406a6e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406a72:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406a76:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406a7a:	48 89 ce             	mov    %rcx,%rsi
  406a7d:	48 89 c7             	mov    %rax,%rdi
  406a80:	e8 eb 20 00 00       	call   408b70 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>
  406a85:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406a89:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406a8d:	48 89 c7             	mov    %rax,%rdi
  406a90:	e8 a9 fe ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406a95:	84 c0                	test   %al,%al
  406a97:	74 09                	je     406aa2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x10e>
	  return __first;
  406a99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406a9d:	e9 00 02 00 00       	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_alternate_form(__first, __last);
  406aa2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406aa6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406aaa:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406aae:	48 89 ce             	mov    %rcx,%rsi
  406ab1:	48 89 c7             	mov    %rax,%rdi
  406ab4:	e8 13 21 00 00       	call   408bcc <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>
  406ab9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406abd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406ac1:	48 89 c7             	mov    %rax,%rdi
  406ac4:	e8 75 fe ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406ac9:	84 c0                	test   %al,%al
  406acb:	74 09                	je     406ad6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x142>
	  return __first;
  406acd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406ad1:	e9 cc 01 00 00       	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_zero_fill(__first, __last);
  406ad6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406ada:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406ade:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406ae2:	48 89 ce             	mov    %rcx,%rsi
  406ae5:	48 89 c7             	mov    %rax,%rdi
  406ae8:	e8 11 21 00 00       	call   408bfe <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>
  406aed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406af1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406af5:	48 89 c7             	mov    %rax,%rdi
  406af8:	e8 41 fe ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406afd:	84 c0                	test   %al,%al
  406aff:	74 09                	je     406b0a <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x176>
	  return __first;
  406b01:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406b05:	e9 98 01 00 00       	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_width(__first, __last, __pc);
  406b0a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406b0e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406b12:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  406b16:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406b1a:	48 89 c7             	mov    %rax,%rdi
  406b1d:	e8 94 1c 00 00       	call   4087b6 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  406b22:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406b26:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406b2a:	48 89 c7             	mov    %rax,%rdi
  406b2d:	e8 0c fe ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406b32:	84 c0                	test   %al,%al
  406b34:	74 09                	je     406b3f <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x1ab>
	  return __first;
  406b36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406b3a:	e9 63 01 00 00       	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_locale(__first, __last);
  406b3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406b43:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406b47:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406b4b:	48 89 ce             	mov    %rcx,%rsi
  406b4e:	48 89 c7             	mov    %rax,%rdi
  406b51:	e8 da 20 00 00       	call   408c30 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>
  406b56:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406b5a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406b5e:	48 89 c7             	mov    %rax,%rdi
  406b61:	e8 d8 fd ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406b66:	84 c0                	test   %al,%al
  406b68:	74 09                	je     406b73 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x1df>
	  return __first;
  406b6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406b6e:	e9 2f 01 00 00       	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	switch (*__first)
  406b73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406b77:	0f b6 00             	movzbl (%rax),%eax
  406b7a:	0f be c0             	movsbl %al,%eax
  406b7d:	83 e8 42             	sub    $0x42,%eax
  406b80:	83 f8 36             	cmp    $0x36,%eax
  406b83:	0f 87 fe 00 00 00    	ja     406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
  406b89:	89 c0                	mov    %eax,%eax
  406b8b:	48 8b 04 c5 e0 dc 41 	mov    0x41dce0(,%rax,8),%rax
  406b92:	00
  406b93:	ff e0                	jmp    *%rax
	    __spec._M_type = _Pres_b;
  406b95:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406b99:	83 e0 87             	and    $0xffffff87,%eax
  406b9c:	83 c8 10             	or     $0x10,%eax
  406b9f:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406ba2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406ba6:	48 83 c0 01          	add    $0x1,%rax
  406baa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406bae:	e9 d4 00 00 00       	jmp    406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_B;
  406bb3:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406bb7:	83 e0 87             	and    $0xffffff87,%eax
  406bba:	83 c8 18             	or     $0x18,%eax
  406bbd:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406bc0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406bc4:	48 83 c0 01          	add    $0x1,%rax
  406bc8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406bcc:	e9 b6 00 00 00       	jmp    406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    if (__type != _AsBool)
  406bd1:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  406bd5:	0f 84 a8 00 00 00    	je     406c83 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2ef>
		__spec._M_type = _Pres_c;
  406bdb:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406bdf:	83 e0 87             	and    $0xffffff87,%eax
  406be2:	83 c8 38             	or     $0x38,%eax
  406be5:	88 45 f5             	mov    %al,-0xb(%rbp)
		++__first;
  406be8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406bec:	48 83 c0 01          	add    $0x1,%rax
  406bf0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406bf4:	e9 8a 00 00 00       	jmp    406c83 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2ef>
	    __spec._M_type = _Pres_d;
  406bf9:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406bfd:	83 e0 87             	and    $0xffffff87,%eax
  406c00:	83 c8 08             	or     $0x8,%eax
  406c03:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c0a:	48 83 c0 01          	add    $0x1,%rax
  406c0e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c12:	eb 73                	jmp    406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_o;
  406c14:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c18:	83 e0 87             	and    $0xffffff87,%eax
  406c1b:	83 c8 20             	or     $0x20,%eax
  406c1e:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c25:	48 83 c0 01          	add    $0x1,%rax
  406c29:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c2d:	eb 58                	jmp    406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_x;
  406c2f:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c33:	83 e0 87             	and    $0xffffff87,%eax
  406c36:	83 c8 28             	or     $0x28,%eax
  406c39:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c40:	48 83 c0 01          	add    $0x1,%rax
  406c44:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c48:	eb 3d                	jmp    406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_X;
  406c4a:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c4e:	83 e0 87             	and    $0xffffff87,%eax
  406c51:	83 c8 30             	or     $0x30,%eax
  406c54:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c5b:	48 83 c0 01          	add    $0x1,%rax
  406c5f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c63:	eb 22                	jmp    406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    if (__type == _AsBool)
  406c65:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  406c69:	75 1b                	jne    406c86 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f2>
		__spec._M_type = _Pres_s; // same value (and meaning) as "none"
  406c6b:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c6f:	83 e0 87             	and    $0xffffff87,%eax
  406c72:	88 45 f5             	mov    %al,-0xb(%rbp)
		++__first;
  406c75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c79:	48 83 c0 01          	add    $0x1,%rax
  406c7d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c81:	eb 03                	jmp    406c86 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f2>
	    break;
  406c83:	90                   	nop
  406c84:	eb 01                	jmp    406c87 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    break;
  406c86:	90                   	nop
	if (__finished())
  406c87:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406c8b:	48 89 c7             	mov    %rax,%rdi
  406c8e:	e8 ab fc ff ff       	call   40693e <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406c93:	84 c0                	test   %al,%al
  406c95:	74 06                	je     406c9d <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x309>
	  return __first;
  406c97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c9b:	eb 05                	jmp    406ca2 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__format::__failed_to_parse_format_spec();
  406c9d:	e8 40 e5 ff ff       	call   4051e2 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  406ca2:	c9                   	leave
  406ca3:	c3                   	ret

0000000000406ca4 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406ca4:	55                   	push   %rbp
  406ca5:	48 89 e5             	mov    %rsp,%rbp
  406ca8:	48 83 ec 30          	sub    $0x30,%rsp
  406cac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406cb0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406cb4:	89 d0                	mov    %edx,%eax
  406cb6:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  406cb9:	88 45 dc             	mov    %al,-0x24(%rbp)
  406cbc:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  406cc1:	84 c0                	test   %al,%al
  406cc3:	74 30                	je     406cf5 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x51>
  406cc5:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
  406cc9:	0f 9e c0             	setle  %al
  406ccc:	0f b6 c0             	movzbl %al,%eax
  406ccf:	48 85 c0             	test   %rax,%rax
  406cd2:	75 0f                	jne    406ce3 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x3f>
  406cd4:	83 7d d8 24          	cmpl   $0x24,-0x28(%rbp)
  406cd8:	0f 9f c0             	setg   %al
  406cdb:	0f b6 c0             	movzbl %al,%eax
  406cde:	48 85 c0             	test   %rax,%rax
  406ce1:	74 07                	je     406cea <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x46>
  406ce3:	b8 01 00 00 00       	mov    $0x1,%eax
  406ce8:	eb 05                	jmp    406cef <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x4b>
  406cea:	b8 00 00 00 00       	mov    $0x0,%eax
  406cef:	0f b6 c0             	movzbl %al,%eax
  406cf2:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  406cf5:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  406cf9:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__first == __last) [[__unlikely__]]
  406cfc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d00:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406d04:	75 20                	jne    406d26 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  406d06:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  406d0a:	4c 89 ca             	mov    %r9,%rdx
  406d0d:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406d14:	ff ff ff
  406d17:	48 21 d0             	and    %rdx,%rax
  406d1a:	48 83 c8 4b          	or     $0x4b,%rax
  406d1e:	49 89 c1             	mov    %rax,%r9
  406d21:	e9 f3 00 00 00       	jmp    406e19 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
      if (__value == 0)
  406d26:	80 7d dc 00          	cmpb   $0x0,-0x24(%rbp)
  406d2a:	75 2a                	jne    406d56 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xb2>
	  *__first = '0';
  406d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d30:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  406d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d37:	48 83 c0 01          	add    $0x1,%rax
  406d3b:	49 89 c0             	mov    %rax,%r8
  406d3e:	4c 89 ca             	mov    %r9,%rdx
  406d41:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406d48:	ff ff ff
  406d4b:	48 21 d0             	and    %rdx,%rax
  406d4e:	49 89 c1             	mov    %rax,%r9
  406d51:	e9 c3 00 00 00       	jmp    406e19 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
      switch (__base)
  406d56:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406d5a:	74 28                	je     406d84 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xe0>
  406d5c:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406d60:	0f 8f 96 00 00 00    	jg     406dfc <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
  406d66:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406d6a:	74 36                	je     406da2 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xfe>
  406d6c:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406d70:	0f 8f 86 00 00 00    	jg     406dfc <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
  406d76:	83 7d d8 02          	cmpl   $0x2,-0x28(%rbp)
  406d7a:	74 62                	je     406dde <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x13a>
  406d7c:	83 7d d8 08          	cmpl   $0x8,-0x28(%rbp)
  406d80:	74 3e                	je     406dc0 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x11c>
  406d82:	eb 78                	jmp    406dfc <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  406d84:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406d87:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406d8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d8f:	48 89 ce             	mov    %rcx,%rsi
  406d92:	48 89 c7             	mov    %rax,%rdi
  406d95:	e8 df 1e 00 00       	call   408c79 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>
  406d9a:	49 89 c0             	mov    %rax,%r8
  406d9d:	49 89 d1             	mov    %rdx,%r9
  406da0:	eb 77                	jmp    406e19 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  406da2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406da5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406da9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406dad:	48 89 ce             	mov    %rcx,%rsi
  406db0:	48 89 c7             	mov    %rax,%rdi
  406db3:	e8 fc 1f 00 00       	call   408db4 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>
  406db8:	49 89 c0             	mov    %rax,%r8
  406dbb:	49 89 d1             	mov    %rdx,%r9
  406dbe:	eb 59                	jmp    406e19 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  406dc0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406dc3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406dc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406dcb:	48 89 ce             	mov    %rcx,%rsi
  406dce:	48 89 c7             	mov    %rax,%rdi
  406dd1:	e8 6b 20 00 00       	call   408e41 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>
  406dd6:	49 89 c0             	mov    %rax,%r8
  406dd9:	49 89 d1             	mov    %rdx,%r9
  406ddc:	eb 3b                	jmp    406e19 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  406dde:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406de1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406de9:	48 89 ce             	mov    %rcx,%rsi
  406dec:	48 89 c7             	mov    %rax,%rdi
  406def:	e8 7a 21 00 00       	call   408f6e <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>
  406df4:	49 89 c0             	mov    %rax,%r8
  406df7:	49 89 d1             	mov    %rdx,%r9
  406dfa:	eb 1d                	jmp    406e19 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  406dfc:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  406dff:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406e02:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406e06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e0a:	48 89 c7             	mov    %rax,%rdi
  406e0d:	e8 0b 22 00 00       	call   40901d <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>
  406e12:	49 89 c0             	mov    %rax,%r8
  406e15:	49 89 d1             	mov    %rdx,%r9
  406e18:	90                   	nop
    }
  406e19:	4c 89 c0             	mov    %r8,%rax
  406e1c:	4c 89 ca             	mov    %r9,%rdx
  406e1f:	c9                   	leave
  406e20:	c3                   	ret

0000000000406e21 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406e21:	55                   	push   %rbp
  406e22:	48 89 e5             	mov    %rsp,%rbp
  406e25:	48 83 ec 30          	sub    $0x30,%rsp
  406e29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406e2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406e31:	89 55 dc             	mov    %edx,-0x24(%rbp)
  406e34:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  406e37:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  406e3c:	84 c0                	test   %al,%al
  406e3e:	74 30                	je     406e70 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x4f>
  406e40:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
  406e44:	0f 9e c0             	setle  %al
  406e47:	0f b6 c0             	movzbl %al,%eax
  406e4a:	48 85 c0             	test   %rax,%rax
  406e4d:	75 0f                	jne    406e5e <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x3d>
  406e4f:	83 7d d8 24          	cmpl   $0x24,-0x28(%rbp)
  406e53:	0f 9f c0             	setg   %al
  406e56:	0f b6 c0             	movzbl %al,%eax
  406e59:	48 85 c0             	test   %rax,%rax
  406e5c:	74 07                	je     406e65 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x44>
  406e5e:	b8 01 00 00 00       	mov    $0x1,%eax
  406e63:	eb 05                	jmp    406e6a <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x49>
  406e65:	b8 00 00 00 00       	mov    $0x0,%eax
  406e6a:	0f b6 c0             	movzbl %al,%eax
  406e6d:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  406e70:	8b 45 dc             	mov    -0x24(%rbp),%eax
  406e73:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__first == __last) [[__unlikely__]]
  406e76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e7a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406e7e:	75 20                	jne    406ea0 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x7f>
	return { __last, errc::value_too_large };
  406e80:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  406e84:	4c 89 ca             	mov    %r9,%rdx
  406e87:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406e8e:	ff ff ff
  406e91:	48 21 d0             	and    %rdx,%rax
  406e94:	48 83 c8 4b          	or     $0x4b,%rax
  406e98:	49 89 c1             	mov    %rax,%r9
  406e9b:	e9 f3 00 00 00       	jmp    406f93 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
      if (__value == 0)
  406ea0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  406ea4:	75 2a                	jne    406ed0 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xaf>
	  *__first = '0';
  406ea6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406eaa:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  406ead:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406eb1:	48 83 c0 01          	add    $0x1,%rax
  406eb5:	49 89 c0             	mov    %rax,%r8
  406eb8:	4c 89 ca             	mov    %r9,%rdx
  406ebb:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406ec2:	ff ff ff
  406ec5:	48 21 d0             	and    %rdx,%rax
  406ec8:	49 89 c1             	mov    %rax,%r9
  406ecb:	e9 c3 00 00 00       	jmp    406f93 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
      switch (__base)
  406ed0:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406ed4:	74 28                	je     406efe <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xdd>
  406ed6:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406eda:	0f 8f 96 00 00 00    	jg     406f76 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
  406ee0:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406ee4:	74 36                	je     406f1c <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xfb>
  406ee6:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406eea:	0f 8f 86 00 00 00    	jg     406f76 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
  406ef0:	83 7d d8 02          	cmpl   $0x2,-0x28(%rbp)
  406ef4:	74 62                	je     406f58 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x137>
  406ef6:	83 7d d8 08          	cmpl   $0x8,-0x28(%rbp)
  406efa:	74 3e                	je     406f3a <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x119>
  406efc:	eb 78                	jmp    406f76 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  406efe:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f01:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f09:	48 89 ce             	mov    %rcx,%rsi
  406f0c:	48 89 c7             	mov    %rax,%rdi
  406f0f:	e8 65 1d 00 00       	call   408c79 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>
  406f14:	49 89 c0             	mov    %rax,%r8
  406f17:	49 89 d1             	mov    %rdx,%r9
  406f1a:	eb 77                	jmp    406f93 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  406f1c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f1f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f27:	48 89 ce             	mov    %rcx,%rsi
  406f2a:	48 89 c7             	mov    %rax,%rdi
  406f2d:	e8 82 1e 00 00       	call   408db4 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>
  406f32:	49 89 c0             	mov    %rax,%r8
  406f35:	49 89 d1             	mov    %rdx,%r9
  406f38:	eb 59                	jmp    406f93 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  406f3a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f3d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f45:	48 89 ce             	mov    %rcx,%rsi
  406f48:	48 89 c7             	mov    %rax,%rdi
  406f4b:	e8 f1 1e 00 00       	call   408e41 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>
  406f50:	49 89 c0             	mov    %rax,%r8
  406f53:	49 89 d1             	mov    %rdx,%r9
  406f56:	eb 3b                	jmp    406f93 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  406f58:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f5b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f63:	48 89 ce             	mov    %rcx,%rsi
  406f66:	48 89 c7             	mov    %rax,%rdi
  406f69:	e8 00 20 00 00       	call   408f6e <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>
  406f6e:	49 89 c0             	mov    %rax,%r8
  406f71:	49 89 d1             	mov    %rdx,%r9
  406f74:	eb 1d                	jmp    406f93 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  406f76:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  406f79:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f7c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f84:	48 89 c7             	mov    %rax,%rdi
  406f87:	e8 91 20 00 00       	call   40901d <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>
  406f8c:	49 89 c0             	mov    %rax,%r8
  406f8f:	49 89 d1             	mov    %rdx,%r9
  406f92:	90                   	nop
    }
  406f93:	4c 89 c0             	mov    %r8,%rax
  406f96:	4c 89 ca             	mov    %r9,%rdx
  406f99:	c9                   	leave
  406f9a:	c3                   	ret

0000000000406f9b <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406f9b:	55                   	push   %rbp
  406f9c:	48 89 e5             	mov    %rsp,%rbp
  406f9f:	48 83 ec 30          	sub    $0x30,%rsp
  406fa3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406fa7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406fab:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406faf:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  406fb2:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  406fb7:	84 c0                	test   %al,%al
  406fb9:	74 30                	je     406feb <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x50>
  406fbb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%rbp)
  406fbf:	0f 9e c0             	setle  %al
  406fc2:	0f b6 c0             	movzbl %al,%eax
  406fc5:	48 85 c0             	test   %rax,%rax
  406fc8:	75 0f                	jne    406fd9 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x3e>
  406fca:	83 7d d4 24          	cmpl   $0x24,-0x2c(%rbp)
  406fce:	0f 9f c0             	setg   %al
  406fd1:	0f b6 c0             	movzbl %al,%eax
  406fd4:	48 85 c0             	test   %rax,%rax
  406fd7:	74 07                	je     406fe0 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x45>
  406fd9:	b8 01 00 00 00       	mov    $0x1,%eax
  406fde:	eb 05                	jmp    406fe5 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x4a>
  406fe0:	b8 00 00 00 00       	mov    $0x0,%eax
  406fe5:	0f b6 c0             	movzbl %al,%eax
  406fe8:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  406feb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406fef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  406ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406ff7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406ffb:	75 20                	jne    40701d <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  406ffd:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  407001:	4c 89 ca             	mov    %r9,%rdx
  407004:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  40700b:	ff ff ff
  40700e:	48 21 d0             	and    %rdx,%rax
  407011:	48 83 c8 4b          	or     $0x4b,%rax
  407015:	49 89 c1             	mov    %rax,%r9
  407018:	e9 f9 00 00 00       	jmp    407116 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
      if (__value == 0)
  40701d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  407022:	75 2a                	jne    40704e <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0xb3>
	  *__first = '0';
  407024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407028:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  40702b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40702f:	48 83 c0 01          	add    $0x1,%rax
  407033:	49 89 c0             	mov    %rax,%r8
  407036:	4c 89 ca             	mov    %r9,%rdx
  407039:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  407040:	ff ff ff
  407043:	48 21 d0             	and    %rdx,%rax
  407046:	49 89 c1             	mov    %rax,%r9
  407049:	e9 c8 00 00 00       	jmp    407116 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
      switch (__base)
  40704e:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  407052:	74 28                	je     40707c <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0xe1>
  407054:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  407058:	0f 8f 9a 00 00 00    	jg     4070f8 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
  40705e:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  407062:	74 37                	je     40709b <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x100>
  407064:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  407068:	0f 8f 8a 00 00 00    	jg     4070f8 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
  40706e:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
  407072:	74 65                	je     4070d9 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x13e>
  407074:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  407078:	74 40                	je     4070ba <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x11f>
  40707a:	eb 7c                	jmp    4070f8 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  40707c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407080:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407084:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407088:	48 89 ce             	mov    %rcx,%rsi
  40708b:	48 89 c7             	mov    %rax,%rdi
  40708e:	e8 c5 20 00 00       	call   409158 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>
  407093:	49 89 c0             	mov    %rax,%r8
  407096:	49 89 d1             	mov    %rdx,%r9
  407099:	eb 7b                	jmp    407116 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  40709b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40709f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4070a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4070a7:	48 89 ce             	mov    %rcx,%rsi
  4070aa:	48 89 c7             	mov    %rax,%rdi
  4070ad:	e8 0d 22 00 00       	call   4092bf <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>
  4070b2:	49 89 c0             	mov    %rax,%r8
  4070b5:	49 89 d1             	mov    %rdx,%r9
  4070b8:	eb 5c                	jmp    407116 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  4070ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4070be:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4070c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4070c6:	48 89 ce             	mov    %rcx,%rsi
  4070c9:	48 89 c7             	mov    %rax,%rdi
  4070cc:	e8 7f 22 00 00       	call   409350 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>
  4070d1:	49 89 c0             	mov    %rax,%r8
  4070d4:	49 89 d1             	mov    %rdx,%r9
  4070d7:	eb 3d                	jmp    407116 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  4070d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4070dd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4070e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4070e5:	48 89 ce             	mov    %rcx,%rsi
  4070e8:	48 89 c7             	mov    %rax,%rdi
  4070eb:	e8 a0 23 00 00       	call   409490 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>
  4070f0:	49 89 c0             	mov    %rax,%r8
  4070f3:	49 89 d1             	mov    %rdx,%r9
  4070f6:	eb 1e                	jmp    407116 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  4070f8:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  4070fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4070ff:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  407103:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407107:	48 89 c7             	mov    %rax,%rdi
  40710a:	e8 35 24 00 00       	call   409544 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>
  40710f:	49 89 c0             	mov    %rax,%r8
  407112:	49 89 d1             	mov    %rdx,%r9
  407115:	90                   	nop
    }
  407116:	4c 89 c0             	mov    %r8,%rax
  407119:	4c 89 ca             	mov    %r9,%rdx
  40711c:	c9                   	leave
  40711d:	c3                   	ret

000000000040711e <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  40711e:	55                   	push   %rbp
  40711f:	48 89 e5             	mov    %rsp,%rbp
  407122:	48 83 ec 30          	sub    $0x30,%rsp
  407126:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40712a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40712e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  407132:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  407135:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  40713a:	84 c0                	test   %al,%al
  40713c:	74 30                	je     40716e <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x50>
  40713e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%rbp)
  407142:	0f 9e c0             	setle  %al
  407145:	0f b6 c0             	movzbl %al,%eax
  407148:	48 85 c0             	test   %rax,%rax
  40714b:	75 0f                	jne    40715c <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x3e>
  40714d:	83 7d d4 24          	cmpl   $0x24,-0x2c(%rbp)
  407151:	0f 9f c0             	setg   %al
  407154:	0f b6 c0             	movzbl %al,%eax
  407157:	48 85 c0             	test   %rax,%rax
  40715a:	74 07                	je     407163 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x45>
  40715c:	b8 01 00 00 00       	mov    $0x1,%eax
  407161:	eb 05                	jmp    407168 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x4a>
  407163:	b8 00 00 00 00       	mov    $0x0,%eax
  407168:	0f b6 c0             	movzbl %al,%eax
  40716b:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  40716e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407172:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  407176:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40717a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40717e:	75 20                	jne    4071a0 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  407180:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  407184:	4c 89 ca             	mov    %r9,%rdx
  407187:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  40718e:	ff ff ff
  407191:	48 21 d0             	and    %rdx,%rax
  407194:	48 83 c8 4b          	or     $0x4b,%rax
  407198:	49 89 c1             	mov    %rax,%r9
  40719b:	e9 f9 00 00 00       	jmp    407299 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
      if (__value == 0)
  4071a0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4071a5:	75 2a                	jne    4071d1 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0xb3>
	  *__first = '0';
  4071a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4071ab:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  4071ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4071b2:	48 83 c0 01          	add    $0x1,%rax
  4071b6:	49 89 c0             	mov    %rax,%r8
  4071b9:	4c 89 ca             	mov    %r9,%rdx
  4071bc:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  4071c3:	ff ff ff
  4071c6:	48 21 d0             	and    %rdx,%rax
  4071c9:	49 89 c1             	mov    %rax,%r9
  4071cc:	e9 c8 00 00 00       	jmp    407299 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
      switch (__base)
  4071d1:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  4071d5:	74 28                	je     4071ff <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0xe1>
  4071d7:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  4071db:	0f 8f 9a 00 00 00    	jg     40727b <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
  4071e1:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  4071e5:	74 37                	je     40721e <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x100>
  4071e7:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  4071eb:	0f 8f 8a 00 00 00    	jg     40727b <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
  4071f1:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
  4071f5:	74 65                	je     40725c <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x13e>
  4071f7:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  4071fb:	74 40                	je     40723d <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x11f>
  4071fd:	eb 7c                	jmp    40727b <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  4071ff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407203:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407207:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40720b:	48 89 ce             	mov    %rcx,%rsi
  40720e:	48 89 c7             	mov    %rax,%rdi
  407211:	e8 42 1f 00 00       	call   409158 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>
  407216:	49 89 c0             	mov    %rax,%r8
  407219:	49 89 d1             	mov    %rdx,%r9
  40721c:	eb 7b                	jmp    407299 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  40721e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407222:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407226:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40722a:	48 89 ce             	mov    %rcx,%rsi
  40722d:	48 89 c7             	mov    %rax,%rdi
  407230:	e8 8a 20 00 00       	call   4092bf <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>
  407235:	49 89 c0             	mov    %rax,%r8
  407238:	49 89 d1             	mov    %rdx,%r9
  40723b:	eb 5c                	jmp    407299 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  40723d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407241:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407245:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407249:	48 89 ce             	mov    %rcx,%rsi
  40724c:	48 89 c7             	mov    %rax,%rdi
  40724f:	e8 fc 20 00 00       	call   409350 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>
  407254:	49 89 c0             	mov    %rax,%r8
  407257:	49 89 d1             	mov    %rdx,%r9
  40725a:	eb 3d                	jmp    407299 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  40725c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407260:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407264:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407268:	48 89 ce             	mov    %rcx,%rsi
  40726b:	48 89 c7             	mov    %rax,%rdi
  40726e:	e8 1d 22 00 00       	call   409490 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>
  407273:	49 89 c0             	mov    %rax,%r8
  407276:	49 89 d1             	mov    %rdx,%r9
  407279:	eb 1e                	jmp    407299 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  40727b:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  40727e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407282:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  407286:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40728a:	48 89 c7             	mov    %rax,%rdi
  40728d:	e8 b2 22 00 00       	call   409544 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>
  407292:	49 89 c0             	mov    %rax,%r8
  407295:	49 89 d1             	mov    %rdx,%r9
  407298:	90                   	nop
    }
  407299:	4c 89 c0             	mov    %r8,%rax
  40729c:	4c 89 ca             	mov    %r9,%rdx
  40729f:	c9                   	leave
  4072a0:	c3                   	ret

00000000004072a1 <_ZSt13__countl_zeroIjEiT_>:
    __countl_zero(_Tp __x) noexcept
  4072a1:	55                   	push   %rbp
  4072a2:	48 89 e5             	mov    %rsp,%rbp
  4072a5:	89 7d dc             	mov    %edi,-0x24(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  4072a8:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
      if (__x == 0)
  4072af:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  4072b3:	75 07                	jne    4072bc <_ZSt13__countl_zeroIjEiT_+0x1b>
        return _Nd;
  4072b5:	b8 20 00 00 00       	mov    $0x20,%eax
  4072ba:	eb 24                	jmp    4072e0 <_ZSt13__countl_zeroIjEiT_+0x3f>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  4072bc:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  4072c3:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  4072ca:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  constexpr int __diff = _Nd_u - _Nd;
  4072d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	  return __builtin_clz(__x) - __diff;
  4072d8:	0f bd 45 dc          	bsr    -0x24(%rbp),%eax
  4072dc:	83 f0 1f             	xor    $0x1f,%eax
  4072df:	90                   	nop
    }
  4072e0:	5d                   	pop    %rbp
  4072e1:	c3                   	ret

00000000004072e2 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cpp_constexpr_dynamic_alloc // >= C++20
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
  4072e2:	55                   	push   %rbp
  4072e3:	48 89 e5             	mov    %rsp,%rbp
  4072e6:	53                   	push   %rbx
  4072e7:	48 83 ec 18          	sub    $0x18,%rsp
  4072eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4072ef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  4072f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4072f7:	48 89 c6             	mov    %rax,%rsi
  4072fa:	bf 01 00 00 00       	mov    $0x1,%edi
  4072ff:	e8 65 d3 ff ff       	call   404669 <_ZnwmPv>
  407304:	48 89 c3             	mov    %rax,%rbx
  407307:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40730b:	48 89 c7             	mov    %rax,%rdi
  40730e:	e8 72 23 00 00       	call   409685 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
  407313:	0f b6 00             	movzbl (%rax),%eax
  407316:	88 03                	mov    %al,(%rbx)
  407318:	48 89 d8             	mov    %rbx,%rax
  40731b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40731f:	c9                   	leave
  407320:	c3                   	ret
  407321:	90                   	nop

0000000000407322 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>:
    char_traits<_CharT>::
  407322:	55                   	push   %rbp
  407323:	48 89 e5             	mov    %rsp,%rbp
  407326:	48 83 ec 20          	sub    $0x20,%rsp
  40732a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40732e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407332:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n == 0)
  407336:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40733b:	75 06                	jne    407343 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x21>
	return __s1;
  40733d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407341:	eb 41                	jmp    407384 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x62>
  407343:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  407348:	84 c0                	test   %al,%al
  40734a:	74 1d                	je     407369 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x47>
	    copy(__s1, __s2, __n);
  40734c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407350:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  407354:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407358:	48 89 ce             	mov    %rcx,%rsi
  40735b:	48 89 c7             	mov    %rax,%rdi
  40735e:	e8 23 00 00 00       	call   407386 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  return __s1;
  407363:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407367:	eb 1b                	jmp    407384 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x62>
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
  407369:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40736d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  407371:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407375:	48 89 ce             	mov    %rcx,%rsi
  407378:	48 89 c7             	mov    %rax,%rdi
  40737b:	e8 40 d0 ff ff       	call   4043c0 <memmove@plt>
      return __s1;
  407380:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  407384:	c9                   	leave
  407385:	c3                   	ret

0000000000407386 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>:
    char_traits<_CharT>::
  407386:	55                   	push   %rbp
  407387:	48 89 e5             	mov    %rsp,%rbp
  40738a:	48 83 ec 30          	sub    $0x30,%rsp
  40738e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407392:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407396:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__n == 0)
  40739a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40739f:	75 06                	jne    4073a7 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x21>
	return __s1;
  4073a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4073a5:	eb 6a                	jmp    407411 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x8b>
  4073a7:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  4073ac:	84 c0                	test   %al,%al
  4073ae:	74 40                	je     4073f0 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x6a>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  4073b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4073b7:	00
  4073b8:	eb 26                	jmp    4073e0 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x5a>
	    std::construct_at(__s1 + __i, __s2[__i]);
  4073ba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4073be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073c2:	48 01 c2             	add    %rax,%rdx
  4073c5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4073c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073cd:	48 01 c8             	add    %rcx,%rax
  4073d0:	48 89 d6             	mov    %rdx,%rsi
  4073d3:	48 89 c7             	mov    %rax,%rdi
  4073d6:	e8 07 ff ff ff       	call   4072e2 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  4073db:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  4073e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073e4:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  4073e8:	72 d0                	jb     4073ba <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x34>
	  return __s1;
  4073ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4073ee:	eb 21                	jmp    407411 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x8b>
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
  4073f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4073f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4073f8:	48 89 d1             	mov    %rdx,%rcx
  4073fb:	48 89 c6             	mov    %rax,%rsi
  4073fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407402:	48 89 c2             	mov    %rax,%rdx
  407405:	48 89 cf             	mov    %rcx,%rdi
  407408:	e8 23 ce ff ff       	call   404230 <memcpy@plt>
      return __s1;
  40740d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  407411:	c9                   	leave
  407412:	c3                   	ret
  407413:	90                   	nop

0000000000407414 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc>:
    char_traits<_CharT>::
  407414:	55                   	push   %rbp
  407415:	48 89 e5             	mov    %rsp,%rbp
  407418:	48 83 ec 30          	sub    $0x30,%rsp
  40741c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407420:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407424:	89 d0                	mov    %edx,%eax
  407426:	88 45 dc             	mov    %al,-0x24(%rbp)
  407429:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  40742e:	84 c0                	test   %al,%al
  407430:	74 39                	je     40746b <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x57>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  407432:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407439:	00
  40743a:	eb 1f                	jmp    40745b <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x47>
	    std::construct_at(__s + __i, __a);
  40743c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407444:	48 01 c2             	add    %rax,%rdx
  407447:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40744b:	48 89 c6             	mov    %rax,%rsi
  40744e:	48 89 d7             	mov    %rdx,%rdi
  407451:	e8 3d 22 00 00       	call   409693 <_ZSt12construct_atIcJRcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  407456:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  40745b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40745f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407463:	72 d7                	jb     40743c <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x28>
	  return __s;
  407465:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407469:	eb 2b                	jmp    407496 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x82>
	  if (__n)
  40746b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  407470:	74 20                	je     407492 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x7e>
	      __builtin_memcpy(&__c, __builtin_addressof(__a), 1);
  407472:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  407476:	88 45 f7             	mov    %al,-0x9(%rbp)
	      __builtin_memset(__s, __c, __n);
  407479:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  40747d:	0f b6 c8             	movzbl %al,%ecx
  407480:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  407484:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407488:	89 ce                	mov    %ecx,%esi
  40748a:	48 89 c7             	mov    %rax,%rdi
  40748d:	e8 ae cc ff ff       	call   404140 <memset@plt>
      return __s;
  407492:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  407496:	c9                   	leave
  407497:	c3                   	ret

0000000000407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
	return *(this->_M_str + this->_M_len - 1);
      }

      [[nodiscard]]
      constexpr const_pointer
      data() const noexcept
  407498:	55                   	push   %rbp
  407499:	48 89 e5             	mov    %rsp,%rbp
  40749c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
  4074a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074a4:	48 8b 40 08          	mov    0x8(%rax),%rax
  4074a8:	5d                   	pop    %rbp
  4074a9:	c3                   	ret

00000000004074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>:
      basic_string_view(const _CharT* __str, size_type __len) noexcept
  4074aa:	55                   	push   %rbp
  4074ab:	48 89 e5             	mov    %rsp,%rbp
  4074ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4074b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4074b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : _M_len{__len}, _M_str{__str}
  4074ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4074c2:	48 89 10             	mov    %rdx,(%rax)
  4074c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074c9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4074cd:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  4074d1:	90                   	nop
  4074d2:	5d                   	pop    %rbp
  4074d3:	c3                   	ret

00000000004074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
  4074d4:	55                   	push   %rbp
  4074d5:	48 89 e5             	mov    %rsp,%rbp
  4074d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus._M_p; }
  4074dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074e0:	48 8b 00             	mov    (%rax),%rax
  4074e3:	5d                   	pop    %rbp
  4074e4:	c3                   	ret
  4074e5:	90                   	nop

00000000004074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>:
      _M_set_length(size_type __n)
  4074e6:	55                   	push   %rbp
  4074e7:	48 89 e5             	mov    %rsp,%rbp
  4074ea:	48 83 ec 20          	sub    $0x20,%rsp
  4074ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4074f2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_length(__n);
  4074f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4074fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4074fe:	48 89 d6             	mov    %rdx,%rsi
  407501:	48 89 c7             	mov    %rax,%rdi
  407504:	e8 c9 21 00 00       	call   4096d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	traits_type::assign(_M_data()[__n], _CharT());
  407509:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  40750d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407511:	48 89 c7             	mov    %rax,%rdi
  407514:	e8 bb ff ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  407519:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40751d:	48 01 c2             	add    %rax,%rdx
  407520:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  407524:	48 89 c6             	mov    %rax,%rsi
  407527:	48 89 d7             	mov    %rdx,%rdi
  40752a:	e8 b1 d1 ff ff       	call   4046e0 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40752f:	90                   	nop
  407530:	c9                   	leave
  407531:	c3                   	ret

0000000000407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
      ~basic_string()
  407532:	55                   	push   %rbp
  407533:	48 89 e5             	mov    %rsp,%rbp
  407536:	48 83 ec 10          	sub    $0x10,%rsp
  40753a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_dispose(); }
  40753e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407542:	48 89 c7             	mov    %rax,%rdi
  407545:	e8 a4 21 00 00       	call   4096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  40754a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40754e:	48 89 c7             	mov    %rax,%rdi
  407551:	e8 7a d5 ff ff       	call   404ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  407556:	90                   	nop
  407557:	c9                   	leave
  407558:	c3                   	ret

0000000000407559 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    _GLIBCXX23_CONSTEXPR void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  407559:	55                   	push   %rbp
  40755a:	48 89 e5             	mov    %rsp,%rbp
  40755d:	48 83 ec 78          	sub    $0x78,%rsp
  407561:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  407568:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%rbp)
  40756e:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      constexpr char __digits[201] =
  407574:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  40757b:	32 30 33
  40757e:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  407585:	36 30 37
  407588:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40758f:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  407596:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  40759d:	30 31 31
  4075a0:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  4075a7:	34 31 35
  4075aa:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4075b1:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  4075b8:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  4075bf:	38 31 39
  4075c2:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  4075c9:	32 32 33
  4075cc:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4075d3:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  4075da:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  4075e1:	36 32 37
  4075e4:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  4075eb:	30 33 31
  4075ee:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4075f5:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  4075fc:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  407603:	34 33 35
  407606:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  40760d:	38 33 39
  407610:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407617:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  40761e:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  407625:	32 34 33
  407628:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  40762f:	36 34 37
  407632:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407639:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  407640:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  407647:	30 35 31
  40764a:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  407651:	34 35 35
  407654:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407658:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40765c:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  407663:	38 35 39
  407666:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  40766d:	32 36 33
  407670:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407674:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407678:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  40767f:	36 36 37
  407682:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  407689:	30 37 31
  40768c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407690:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407694:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  40769b:	34 37 35
  40769e:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  4076a5:	38 37 39
  4076a8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4076ac:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4076b0:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  4076b7:	32 38 33
  4076ba:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  4076c1:	36 38 37
  4076c4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4076c8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4076cc:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  4076d3:	30 39 31
  4076d6:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  4076dd:	34 39 35
  4076e0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4076e4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4076e8:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  4076ef:	39 35 39
  4076f2:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  4076f9:	39 39 00
  4076fc:	48 89 45 d9          	mov    %rax,-0x27(%rbp)
  407700:	48 89 55 e1          	mov    %rdx,-0x1f(%rbp)
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
  407704:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  40770a:	83 e8 01             	sub    $0x1,%eax
  40770d:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  407710:	e9 80 00 00 00       	jmp    407795 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x23c>
	{
	  auto const __num = (__val % 100) * 2;
  407715:	8b 8d 10 ff ff ff    	mov    -0xf0(%rbp),%ecx
  40771b:	89 c8                	mov    %ecx,%eax
  40771d:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
  407724:	48 c1 e8 20          	shr    $0x20,%rax
  407728:	c1 e8 05             	shr    $0x5,%eax
  40772b:	6b d0 64             	imul   $0x64,%eax,%edx
  40772e:	89 c8                	mov    %ecx,%eax
  407730:	29 d0                	sub    %edx,%eax
  407732:	01 c0                	add    %eax,%eax
  407734:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val /= 100;
  407737:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  40773d:	89 c0                	mov    %eax,%eax
  40773f:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
  407746:	48 c1 e8 20          	shr    $0x20,%rax
  40774a:	c1 e8 05             	shr    $0x5,%eax
  40774d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407753:	8b 45 f4             	mov    -0xc(%rbp),%eax
  407756:	8d 48 01             	lea    0x1(%rax),%ecx
  407759:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40775c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  407763:	48 01 c2             	add    %rax,%rdx
  407766:	89 c8                	mov    %ecx,%eax
  407768:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  40776f:	ff
  407770:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  407772:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407775:	83 e8 01             	sub    $0x1,%eax
  407778:	89 c2                	mov    %eax,%edx
  40777a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  407781:	48 01 c2             	add    %rax,%rdx
  407784:	8b 45 f4             	mov    -0xc(%rbp),%eax
  407787:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  40778e:	ff
  40778f:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  407791:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  407795:	83 bd 10 ff ff ff 63 	cmpl   $0x63,-0xf0(%rbp)
  40779c:	0f 87 73 ff ff ff    	ja     407715 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x1bc>
	}
      if (__val >= 10)
  4077a2:	83 bd 10 ff ff ff 09 	cmpl   $0x9,-0xf0(%rbp)
  4077a9:	76 3e                	jbe    4077e9 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x290>
	{
	  auto const __num = __val * 2;
  4077ab:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  4077b1:	01 c0                	add    %eax,%eax
  4077b3:	89 45 f8             	mov    %eax,-0x8(%rbp)
	  __first[1] = __digits[__num + 1];
  4077b6:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4077b9:	8d 48 01             	lea    0x1(%rax),%ecx
  4077bc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4077c3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4077c7:	89 c8                	mov    %ecx,%eax
  4077c9:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  4077d0:	ff
  4077d1:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  4077d3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4077d6:	0f b6 94 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%edx
  4077dd:	ff
  4077de:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4077e5:	88 10                	mov    %dl,(%rax)
	}
      else
	__first[0] = '0' + __val;
    }
  4077e7:	eb 14                	jmp    4077fd <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x2a4>
	__first[0] = '0' + __val;
  4077e9:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  4077ef:	83 c0 30             	add    $0x30,%eax
  4077f2:	89 c2                	mov    %eax,%edx
  4077f4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4077fb:	88 10                	mov    %dl,(%rax)
    }
  4077fd:	90                   	nop
  4077fe:	c9                   	leave
  4077ff:	c3                   	ret

0000000000407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
  407800:	55                   	push   %rbp
  407801:	48 89 e5             	mov    %rsp,%rbp
  407804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  407808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40780c:	5d                   	pop    %rbp
  40780d:	c3                   	ret

000000000040780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
  40780e:	55                   	push   %rbp
  40780f:	48 89 e5             	mov    %rsp,%rbp
  407812:	53                   	push   %rbx
  407813:	48 83 ec 18          	sub    $0x18,%rsp
  407817:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (_M_data() == _M_local_data())
  40781b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40781f:	48 89 c7             	mov    %rax,%rdi
  407822:	e8 ad fc ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  407827:	48 89 c3             	mov    %rax,%rbx
  40782a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40782e:	48 89 c7             	mov    %rax,%rdi
  407831:	e8 f2 1e 00 00       	call   409728 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  407836:	48 39 c3             	cmp    %rax,%rbx
  407839:	0f 94 c0             	sete   %al
  40783c:	84 c0                	test   %al,%al
  40783e:	74 13                	je     407853 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x45>
	    if (_M_string_length > _S_local_capacity)
  407840:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407844:	48 8b 40 08          	mov    0x8(%rax),%rax
  407848:	48 83 f8 0f          	cmp    $0xf,%rax
	    return true;
  40784c:	b8 01 00 00 00       	mov    $0x1,%eax
  407851:	eb 05                	jmp    407858 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x4a>
	return false;
  407853:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  407858:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40785c:	c9                   	leave
  40785d:	c3                   	ret

000000000040785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      length() const _GLIBCXX_NOEXCEPT
  40785e:	55                   	push   %rbp
  40785f:	48 89 e5             	mov    %rsp,%rbp
  407862:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  407866:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40786a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40786e:	5d                   	pop    %rbp
  40786f:	c3                   	ret

0000000000407870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
      basic_string(basic_string&& __str) noexcept
  407870:	55                   	push   %rbp
  407871:	48 89 e5             	mov    %rsp,%rbp
  407874:	41 54                	push   %r12
  407876:	53                   	push   %rbx
  407877:	48 83 ec 40          	sub    $0x40,%rsp
  40787b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40787f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
  407883:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  407887:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40788b:	48 89 c7             	mov    %rax,%rdi
  40788e:	e8 6d ff ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  407893:	48 89 c7             	mov    %rax,%rdi
  407896:	e8 27 d2 ff ff       	call   404ac2 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
  40789b:	49 89 c4             	mov    %rax,%r12
  40789e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4078a2:	48 89 c7             	mov    %rax,%rdi
  4078a5:	e8 6c d1 ff ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4078aa:	4c 89 e2             	mov    %r12,%rdx
  4078ad:	48 89 c6             	mov    %rax,%rsi
  4078b0:	48 89 df             	mov    %rbx,%rdi
  4078b3:	e8 be d1 ff ff       	call   404a76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
	if (__str._M_is_local())
  4078b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4078bc:	48 89 c7             	mov    %rax,%rdi
  4078bf:	e8 4a ff ff ff       	call   40780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  4078c4:	84 c0                	test   %al,%al
  4078c6:	74 67                	je     40792f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xbf>
  4078c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4078cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
  4078d0:	e8 65 cd ff ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  4078d5:	84 c0                	test   %al,%al
  4078d7:	74 28                	je     407901 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x91>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4078d9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  4078e0:	00
  4078e1:	eb 17                	jmp    4078fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x8a>
	    _M_local_buf[__i] = _CharT();
  4078e3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4078e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4078eb:	48 01 d0             	add    %rdx,%rax
  4078ee:	48 83 c0 10          	add    $0x10,%rax
  4078f2:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4078f5:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  4078fa:	48 83 7d e0 0f       	cmpq   $0xf,-0x20(%rbp)
  4078ff:	76 e2                	jbe    4078e3 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x73>
      }
  407901:	90                   	nop
			      __str.length() + 1);
  407902:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407906:	48 89 c7             	mov    %rax,%rdi
  407909:	e8 50 ff ff ff       	call   40785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
  40790e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  407912:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407916:	48 8d 48 10          	lea    0x10(%rax),%rcx
  40791a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40791e:	48 83 c0 10          	add    $0x10,%rax
  407922:	48 89 ce             	mov    %rcx,%rsi
  407925:	48 89 c7             	mov    %rax,%rdi
  407928:	e8 e7 cf ff ff       	call   404914 <_ZNSt11char_traitsIcE4copyEPcPKcm>
  40792d:	eb 35                	jmp    407964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xf4>
	    _M_data(__str._M_data());
  40792f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407933:	48 89 c7             	mov    %rax,%rdi
  407936:	e8 99 fb ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40793b:	48 89 c2             	mov    %rax,%rdx
  40793e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407942:	48 89 d6             	mov    %rdx,%rsi
  407945:	48 89 c7             	mov    %rax,%rdi
  407948:	e8 f9 1d 00 00       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__str._M_allocated_capacity);
  40794d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407951:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407955:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407959:	48 89 d6             	mov    %rdx,%rsi
  40795c:	48 89 c7             	mov    %rax,%rdi
  40795f:	e8 fc 1d 00 00       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	_M_length(__str.length());
  407964:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407968:	48 89 c7             	mov    %rax,%rdi
  40796b:	e8 ee fe ff ff       	call   40785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  407970:	48 89 c2             	mov    %rax,%rdx
  407973:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407977:	48 89 d6             	mov    %rdx,%rsi
  40797a:	48 89 c7             	mov    %rax,%rdi
  40797d:	e8 50 1d 00 00       	call   4096d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
  407982:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407986:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40798a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40798e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (std::is_constant_evaluated())
  407992:	e8 a3 cc ff ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  407997:	84 c0                	test   %al,%al
  407999:	74 28                	je     4079c3 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x153>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  40799b:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  4079a2:	00
  4079a3:	eb 17                	jmp    4079bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x14c>
	    _M_local_buf[__i] = _CharT();
  4079a5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4079a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4079ad:	48 01 d0             	add    %rdx,%rax
  4079b0:	48 83 c0 10          	add    $0x10,%rax
  4079b4:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4079b7:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  4079bc:	48 83 7d c8 0f       	cmpq   $0xf,-0x38(%rbp)
  4079c1:	76 e2                	jbe    4079a5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x135>
      }
  4079c3:	90                   	nop
	return _M_local_data();
  4079c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079c8:	48 89 c7             	mov    %rax,%rdi
  4079cb:	e8 46 d0 ff ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4079d0:	48 89 c2             	mov    %rax,%rdx
  4079d3:	90                   	nop
	__str._M_data(__str._M_use_local_data());
  4079d4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4079d8:	48 89 d6             	mov    %rdx,%rsi
  4079db:	48 89 c7             	mov    %rax,%rdi
  4079de:	e8 63 1d 00 00       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	__str._M_set_length(0);
  4079e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4079e7:	be 00 00 00 00       	mov    $0x0,%esi
  4079ec:	48 89 c7             	mov    %rax,%rdi
  4079ef:	e8 f2 fa ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  4079f4:	90                   	nop
  4079f5:	48 83 c4 40          	add    $0x40,%rsp
  4079f9:	5b                   	pop    %rbx
  4079fa:	41 5c                	pop    %r12
  4079fc:	5d                   	pop    %rbp
  4079fd:	c3                   	ret

00000000004079fe <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  4079fe:	55                   	push   %rbp
  4079ff:	48 89 e5             	mov    %rsp,%rbp
  407a02:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  407a09:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  407a10:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  407a16:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
      constexpr char __digits[201] =
  407a1d:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  407a24:	32 30 33
  407a27:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  407a2e:	36 30 37
  407a31:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  407a38:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  407a3f:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  407a46:	30 31 31
  407a49:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  407a50:	34 31 35
  407a53:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407a5a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  407a61:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  407a68:	38 31 39
  407a6b:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  407a72:	32 32 33
  407a75:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407a7c:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  407a83:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  407a8a:	36 32 37
  407a8d:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  407a94:	30 33 31
  407a97:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407a9e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  407aa5:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  407aac:	34 33 35
  407aaf:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  407ab6:	38 33 39
  407ab9:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407ac0:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  407ac7:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  407ace:	32 34 33
  407ad1:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  407ad8:	36 34 37
  407adb:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407ae2:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  407ae9:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  407af0:	30 35 31
  407af3:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  407afa:	34 35 35
  407afd:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407b04:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  407b0b:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  407b12:	38 35 39
  407b15:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  407b1c:	32 36 33
  407b1f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407b23:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407b27:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  407b2e:	36 36 37
  407b31:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  407b38:	30 37 31
  407b3b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407b3f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407b43:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  407b4a:	34 37 35
  407b4d:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  407b54:	38 37 39
  407b57:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407b5b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407b5f:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  407b66:	32 38 33
  407b69:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  407b70:	36 38 37
  407b73:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407b77:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  407b7b:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  407b82:	30 39 31
  407b85:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  407b8c:	34 39 35
  407b8f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407b93:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  407b97:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  407b9e:	39 35 39
  407ba1:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  407ba8:	39 39 00
  407bab:	48 89 45 c9          	mov    %rax,-0x37(%rbp)
  407baf:	48 89 55 d1          	mov    %rdx,-0x2f(%rbp)
      unsigned __pos = __len - 1;
  407bb3:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  407bb9:	83 e8 01             	sub    $0x1,%eax
  407bbc:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  407bbf:	e9 b4 00 00 00       	jmp    407c78 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x27a>
	  auto const __num = (__val % 100) * 2;
  407bc4:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  407bcb:	48 89 c8             	mov    %rcx,%rax
  407bce:	48 c1 e8 02          	shr    $0x2,%rax
  407bd2:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407bd9:	c2 f5 28
  407bdc:	48 f7 e2             	mul    %rdx
  407bdf:	48 c1 ea 02          	shr    $0x2,%rdx
  407be3:	48 89 d0             	mov    %rdx,%rax
  407be6:	48 c1 e0 02          	shl    $0x2,%rax
  407bea:	48 01 d0             	add    %rdx,%rax
  407bed:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  407bf4:	00
  407bf5:	48 01 d0             	add    %rdx,%rax
  407bf8:	48 c1 e0 02          	shl    $0x2,%rax
  407bfc:	48 29 c1             	sub    %rax,%rcx
  407bff:	48 89 ca             	mov    %rcx,%rdx
  407c02:	48 8d 04 12          	lea    (%rdx,%rdx,1),%rax
  407c06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val /= 100;
  407c0a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407c11:	48 c1 e8 02          	shr    $0x2,%rax
  407c15:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407c1c:	c2 f5 28
  407c1f:	48 f7 e2             	mul    %rdx
  407c22:	48 89 d0             	mov    %rdx,%rax
  407c25:	48 c1 e8 02          	shr    $0x2,%rax
  407c29:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407c30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407c34:	48 83 c0 01          	add    $0x1,%rax
  407c38:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  407c3b:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407c42:	48 01 ca             	add    %rcx,%rdx
  407c45:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407c4c:	ff
  407c4d:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  407c4f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407c52:	83 e8 01             	sub    $0x1,%eax
  407c55:	89 c2                	mov    %eax,%edx
  407c57:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407c5e:	48 01 c2             	add    %rax,%rdx
  407c61:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
  407c68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407c6c:	48 01 c8             	add    %rcx,%rax
  407c6f:	0f b6 00             	movzbl (%rax),%eax
  407c72:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  407c74:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  407c78:	48 83 bd f8 fe ff ff 	cmpq   $0x63,-0x108(%rbp)
  407c7f:	63
  407c80:	0f 87 3e ff ff ff    	ja     407bc4 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x1c6>
      if (__val >= 10)
  407c86:	48 83 bd f8 fe ff ff 	cmpq   $0x9,-0x108(%rbp)
  407c8d:	09
  407c8e:	76 47                	jbe    407cd7 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x2d9>
	  auto const __num = __val * 2;
  407c90:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407c97:	48 01 c0             	add    %rax,%rax
  407c9a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __first[1] = __digits[__num + 1];
  407c9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ca2:	48 83 c0 01          	add    $0x1,%rax
  407ca6:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407cad:	48 83 c2 01          	add    $0x1,%rdx
  407cb1:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407cb8:	ff
  407cb9:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  407cbb:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  407cc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407cc6:	48 01 d0             	add    %rdx,%rax
  407cc9:	0f b6 10             	movzbl (%rax),%edx
  407ccc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407cd3:	88 10                	mov    %dl,(%rax)
    }
  407cd5:	eb 15                	jmp    407cec <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x2ee>
	__first[0] = '0' + __val;
  407cd7:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407cde:	83 c0 30             	add    $0x30,%eax
  407ce1:	89 c2                	mov    %eax,%edx
  407ce3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407cea:	88 10                	mov    %dl,(%rax)
    }
  407cec:	90                   	nop
  407ced:	c9                   	leave
  407cee:	c3                   	ret

0000000000407cef <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  407cef:	55                   	push   %rbp
  407cf0:	48 89 e5             	mov    %rsp,%rbp
  407cf3:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  407cfa:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  407d01:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  407d07:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
      constexpr char __digits[201] =
  407d0e:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  407d15:	32 30 33
  407d18:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  407d1f:	36 30 37
  407d22:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  407d29:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  407d30:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  407d37:	30 31 31
  407d3a:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  407d41:	34 31 35
  407d44:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407d4b:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  407d52:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  407d59:	38 31 39
  407d5c:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  407d63:	32 32 33
  407d66:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407d6d:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  407d74:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  407d7b:	36 32 37
  407d7e:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  407d85:	30 33 31
  407d88:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407d8f:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  407d96:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  407d9d:	34 33 35
  407da0:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  407da7:	38 33 39
  407daa:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407db1:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  407db8:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  407dbf:	32 34 33
  407dc2:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  407dc9:	36 34 37
  407dcc:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407dd3:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  407dda:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  407de1:	30 35 31
  407de4:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  407deb:	34 35 35
  407dee:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407df5:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  407dfc:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  407e03:	38 35 39
  407e06:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  407e0d:	32 36 33
  407e10:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407e14:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407e18:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  407e1f:	36 36 37
  407e22:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  407e29:	30 37 31
  407e2c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407e30:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407e34:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  407e3b:	34 37 35
  407e3e:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  407e45:	38 37 39
  407e48:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407e4c:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407e50:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  407e57:	32 38 33
  407e5a:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  407e61:	36 38 37
  407e64:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407e68:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  407e6c:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  407e73:	30 39 31
  407e76:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  407e7d:	34 39 35
  407e80:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407e84:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  407e88:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  407e8f:	39 35 39
  407e92:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  407e99:	39 39 00
  407e9c:	48 89 45 c9          	mov    %rax,-0x37(%rbp)
  407ea0:	48 89 55 d1          	mov    %rdx,-0x2f(%rbp)
      unsigned __pos = __len - 1;
  407ea4:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  407eaa:	83 e8 01             	sub    $0x1,%eax
  407ead:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  407eb0:	e9 b4 00 00 00       	jmp    407f69 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x27a>
	  auto const __num = (__val % 100) * 2;
  407eb5:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  407ebc:	48 89 c8             	mov    %rcx,%rax
  407ebf:	48 c1 e8 02          	shr    $0x2,%rax
  407ec3:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407eca:	c2 f5 28
  407ecd:	48 f7 e2             	mul    %rdx
  407ed0:	48 c1 ea 02          	shr    $0x2,%rdx
  407ed4:	48 89 d0             	mov    %rdx,%rax
  407ed7:	48 c1 e0 02          	shl    $0x2,%rax
  407edb:	48 01 d0             	add    %rdx,%rax
  407ede:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  407ee5:	00
  407ee6:	48 01 d0             	add    %rdx,%rax
  407ee9:	48 c1 e0 02          	shl    $0x2,%rax
  407eed:	48 29 c1             	sub    %rax,%rcx
  407ef0:	48 89 ca             	mov    %rcx,%rdx
  407ef3:	48 8d 04 12          	lea    (%rdx,%rdx,1),%rax
  407ef7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val /= 100;
  407efb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407f02:	48 c1 e8 02          	shr    $0x2,%rax
  407f06:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407f0d:	c2 f5 28
  407f10:	48 f7 e2             	mul    %rdx
  407f13:	48 89 d0             	mov    %rdx,%rax
  407f16:	48 c1 e8 02          	shr    $0x2,%rax
  407f1a:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407f21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f25:	48 83 c0 01          	add    $0x1,%rax
  407f29:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  407f2c:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407f33:	48 01 ca             	add    %rcx,%rdx
  407f36:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407f3d:	ff
  407f3e:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  407f40:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407f43:	83 e8 01             	sub    $0x1,%eax
  407f46:	89 c2                	mov    %eax,%edx
  407f48:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407f4f:	48 01 c2             	add    %rax,%rdx
  407f52:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
  407f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f5d:	48 01 c8             	add    %rcx,%rax
  407f60:	0f b6 00             	movzbl (%rax),%eax
  407f63:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  407f65:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  407f69:	48 83 bd f8 fe ff ff 	cmpq   $0x63,-0x108(%rbp)
  407f70:	63
  407f71:	0f 87 3e ff ff ff    	ja     407eb5 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x1c6>
      if (__val >= 10)
  407f77:	48 83 bd f8 fe ff ff 	cmpq   $0x9,-0x108(%rbp)
  407f7e:	09
  407f7f:	76 47                	jbe    407fc8 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x2d9>
	  auto const __num = __val * 2;
  407f81:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407f88:	48 01 c0             	add    %rax,%rax
  407f8b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __first[1] = __digits[__num + 1];
  407f8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407f93:	48 83 c0 01          	add    $0x1,%rax
  407f97:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407f9e:	48 83 c2 01          	add    $0x1,%rdx
  407fa2:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407fa9:	ff
  407faa:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  407fac:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  407fb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407fb7:	48 01 d0             	add    %rdx,%rax
  407fba:	0f b6 10             	movzbl (%rax),%edx
  407fbd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407fc4:	88 10                	mov    %dl,(%rax)
    }
  407fc6:	eb 15                	jmp    407fdd <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x2ee>
	__first[0] = '0' + __val;
  407fc8:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407fcf:	83 c0 30             	add    $0x30,%eax
  407fd2:	89 c2                	mov    %eax,%edx
  407fd4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407fdb:	88 10                	mov    %dl,(%rax)
    }
  407fdd:	90                   	nop
  407fde:	c9                   	leave
  407fdf:	c3                   	ret

0000000000407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>:
      operator __sv_type() const noexcept
  407fe0:	55                   	push   %rbp
  407fe1:	48 89 e5             	mov    %rsp,%rbp
  407fe4:	53                   	push   %rbx
  407fe5:	48 83 ec 28          	sub    $0x28,%rsp
  407fe9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return __sv_type(data(), size()); }
  407fed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407ff1:	48 89 c7             	mov    %rax,%rdi
  407ff4:	e8 55 cd ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  407ff9:	48 89 c3             	mov    %rax,%rbx
  407ffc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408000:	48 89 c7             	mov    %rax,%rdi
  408003:	e8 74 17 00 00       	call   40977c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  408008:	48 89 c1             	mov    %rax,%rcx
  40800b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40800f:	48 89 da             	mov    %rbx,%rdx
  408012:	48 89 ce             	mov    %rcx,%rsi
  408015:	48 89 c7             	mov    %rax,%rdi
  408018:	e8 8d f4 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40801d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408021:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408025:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408029:	c9                   	leave
  40802a:	c3                   	ret

000000000040802b <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>:
   *  @ingroup binary_search_algorithms
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  40802b:	55                   	push   %rbp
  40802c:	48 89 e5             	mov    %rsp,%rbp
  40802f:	48 83 ec 20          	sub    $0x20,%rsp
  408033:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408037:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40803b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __glibcxx_function_requires(_LessThanOpConcept<
	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_partitioned_upper(__first, __last, __val);

      return std::__upper_bound(__first, __last, __val,
				__gnu_cxx::__ops::__val_less_iter());
  40803f:	e8 3e c6 ff ff       	call   404682 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>
      return std::__upper_bound(__first, __last, __val,
  408044:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408048:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40804c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408050:	48 89 ce             	mov    %rcx,%rsi
  408053:	48 89 c7             	mov    %rax,%rdi
  408056:	e8 49 17 00 00       	call   4097a4 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_>
    }
  40805b:	c9                   	leave
  40805c:	c3                   	ret

000000000040805d <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>:
   *  @ingroup binary_search_algorithms
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  40805d:	55                   	push   %rbp
  40805e:	48 89 e5             	mov    %rsp,%rbp
  408061:	48 83 ec 20          	sub    $0x20,%rsp
  408065:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408069:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40806d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __glibcxx_function_requires(_LessThanOpConcept<
	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
      __glibcxx_requires_partitioned_lower(__first, __last, __val);

      return std::__lower_bound(__first, __last, __val,
				__gnu_cxx::__ops::__iter_less_val());
  408071:	e8 05 c6 ff ff       	call   40467b <_ZN9__gnu_cxx5__ops15__iter_less_valEv>
      return std::__lower_bound(__first, __last, __val,
  408076:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40807a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40807e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408082:	48 89 ce             	mov    %rcx,%rsi
  408085:	48 89 c7             	mov    %rax,%rdi
  408088:	e8 f5 17 00 00       	call   409882 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_>
    }
  40808d:	c9                   	leave
  40808e:	c3                   	ret

000000000040808f <_ZSt4findIPKDiDiET_S2_S2_RKT0_>:
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  40808f:	55                   	push   %rbp
  408090:	48 89 e5             	mov    %rsp,%rbp
  408093:	48 83 ec 20          	sub    $0x20,%rsp
  408097:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40809b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40809f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
		typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last,
  4080a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4080a7:	48 89 c7             	mov    %rax,%rdi
  4080aa:	e8 b1 18 00 00       	call   409960 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKDiEENS0_16_Iter_equals_valIT_EERS4_>
  4080af:	48 89 c2             	mov    %rax,%rdx
  4080b2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4080b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080ba:	48 89 ce             	mov    %rcx,%rsi
  4080bd:	48 89 c7             	mov    %rax,%rdi
  4080c0:	e8 c0 18 00 00       	call   409985 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_>
			    __gnu_cxx::__ops::__iter_equals_val(__val));
    }
  4080c5:	c9                   	leave
  4080c6:	c3                   	ret

00000000004080c7 <_ZSt12construct_atISt6localeJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
  4080c7:	55                   	push   %rbp
  4080c8:	48 89 e5             	mov    %rsp,%rbp
  4080cb:	53                   	push   %rbx
  4080cc:	48 83 ec 18          	sub    $0x18,%rsp
  4080d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  4080d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4080d8:	48 89 c6             	mov    %rax,%rsi
  4080db:	bf 08 00 00 00       	mov    $0x8,%edi
  4080e0:	e8 84 c5 ff ff       	call   404669 <_ZnwmPv>
  4080e5:	48 89 c3             	mov    %rax,%rbx
  4080e8:	48 89 df             	mov    %rbx,%rdi
  4080eb:	e8 80 c3 ff ff       	call   404470 <_ZNSt6localeC1Ev@plt>
  4080f0:	48 89 d8             	mov    %rbx,%rax
  4080f3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4080f7:	c9                   	leave
  4080f8:	c3                   	ret

00000000004080f9 <_ZSt4moveIRNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
  4080f9:	55                   	push   %rbp
  4080fa:	48 89 e5             	mov    %rsp,%rbp
  4080fd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  408101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408105:	5d                   	pop    %rbp
  408106:	c3                   	ret
  408107:	90                   	nop

0000000000408108 <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv>:
      get() &&
  408108:	55                   	push   %rbp
  408109:	48 89 e5             	mov    %rsp,%rbp
  40810c:	53                   	push   %rbx
  40810d:	48 83 ec 38          	sub    $0x38,%rsp
  408111:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408115:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	if (this->_M_used().size() != 0)
  408119:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40811d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  408121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408125:	48 8d 58 08          	lea    0x8(%rax),%rbx
  408129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40812d:	48 83 c0 08          	add    $0x8,%rax
  408131:	48 89 c7             	mov    %rax,%rdi
  408134:	e8 b1 37 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  408139:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40813d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408141:	48 8d 50 18          	lea    0x18(%rax),%rdx
  408145:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408149:	48 89 c6             	mov    %rax,%rsi
  40814c:	48 89 d7             	mov    %rdx,%rdi
  40814f:	e8 bb 37 00 00       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  408154:	48 89 c6             	mov    %rax,%rsi
  408157:	48 89 df             	mov    %rbx,%rdi
  40815a:	e8 ef 37 00 00       	call   40b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40815f:	90                   	nop
	if (this->_M_used().size() != 0)
  408160:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408164:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408168:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40816c:	48 89 c7             	mov    %rax,%rdi
  40816f:	e8 7e d3 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  408174:	48 85 c0             	test   %rax,%rax
  408177:	0f 95 c0             	setne  %al
  40817a:	84 c0                	test   %al,%al
  40817c:	74 0c                	je     40818a <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv+0x82>
	  _Seq_sink::_M_overflow();
  40817e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408182:	48 89 c7             	mov    %rax,%rdi
  408185:	e8 44 25 00 00       	call   40a6ce <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	return std::move(_M_seq);
  40818a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40818e:	48 05 20 01 00 00    	add    $0x120,%rax
  408194:	48 89 c7             	mov    %rax,%rdi
  408197:	e8 fa 15 00 00       	call   409796 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
  40819c:	48 89 c2             	mov    %rax,%rdx
  40819f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4081a3:	48 89 d6             	mov    %rdx,%rsi
  4081a6:	48 89 c7             	mov    %rax,%rdi
  4081a9:	e8 c2 f6 ff ff       	call   407870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      }
  4081ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4081b2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4081b6:	c9                   	leave
  4081b7:	c3                   	ret

00000000004081b8 <_ZNKSt6ranges8__access5_DataclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>:

    public:
      template<__maybe_borrowed_range _Tp>
	requires __member_data<_Tp> || __begin_data<_Tp>
	constexpr auto
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
  4081b8:	55                   	push   %rbp
  4081b9:	48 89 e5             	mov    %rsp,%rbp
  4081bc:	48 83 ec 10          	sub    $0x10,%rsp
  4081c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4081c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  if constexpr (__member_data<_Tp>)
	    return __t.data();
  4081c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4081cc:	48 89 c7             	mov    %rax,%rdi
  4081cf:	e8 d6 25 00 00       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
	  else
	    return std::to_address(_Begin{}(__t));
	}
  4081d4:	c9                   	leave
  4081d5:	c3                   	ret

00000000004081d6 <_ZNKSt6ranges8__access5_SizeclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  4081d6:	55                   	push   %rbp
  4081d7:	48 89 e5             	mov    %rsp,%rbp
  4081da:	48 83 ec 10          	sub    $0x10,%rsp
  4081de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4081e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.size();
  4081e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4081ea:	48 89 c7             	mov    %rax,%rdi
  4081ed:	e8 5c cb ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
	}
  4081f2:	c9                   	leave
  4081f3:	c3                   	ret

00000000004081f4 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>:
      view()
  4081f4:	55                   	push   %rbp
  4081f5:	48 89 e5             	mov    %rsp,%rbp
  4081f8:	53                   	push   %rbx
  4081f9:	48 83 ec 48          	sub    $0x48,%rsp
  4081fd:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __s = this->_M_used();
  408201:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408205:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  408209:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40820d:	48 8d 58 08          	lea    0x8(%rax),%rbx
  408211:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408215:	48 83 c0 08          	add    $0x8,%rax
  408219:	48 89 c7             	mov    %rax,%rdi
  40821c:	e8 c9 36 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  408221:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408225:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408229:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40822d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408231:	48 89 c6             	mov    %rax,%rsi
  408234:	48 89 d7             	mov    %rdx,%rdi
  408237:	e8 d3 36 00 00       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40823c:	48 89 c6             	mov    %rax,%rsi
  40823f:	48 89 df             	mov    %rbx,%rdi
  408242:	e8 07 37 00 00       	call   40b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  408247:	90                   	nop
	auto __s = this->_M_used();
  408248:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40824c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (_M_seq.size())
  408250:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408254:	48 05 20 01 00 00    	add    $0x120,%rax
  40825a:	48 89 c7             	mov    %rax,%rdi
  40825d:	e8 ec ca ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  408262:	48 85 c0             	test   %rax,%rax
  408265:	0f 95 c0             	setne  %al
  408268:	84 c0                	test   %al,%al
  40826a:	74 46                	je     4082b2 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0xbe>
	    if (__s.size() != 0)
  40826c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408270:	48 89 c7             	mov    %rax,%rdi
  408273:	e8 7a d2 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  408278:	48 85 c0             	test   %rax,%rax
  40827b:	0f 95 c0             	setne  %al
  40827e:	84 c0                	test   %al,%al
  408280:	74 0c                	je     40828e <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0x9a>
	      _Seq_sink::_M_overflow();
  408282:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408286:	48 89 c7             	mov    %rax,%rdi
  408289:	e8 40 24 00 00       	call   40a6ce <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	    return _M_seq;
  40828e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408292:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  408299:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40829d:	48 89 d6             	mov    %rdx,%rsi
  4082a0:	48 89 c7             	mov    %rax,%rdi
  4082a3:	e8 1c 25 00 00       	call   40a7c4 <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>
  4082a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4082ac:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4082b0:	eb 08                	jmp    4082ba <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0xc6>
	return __s;
  4082b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4082b6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
      }
  4082ba:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4082be:	c9                   	leave
  4082bf:	c3                   	ret

00000000004082c0 <_ZSt15__ostream_writeIcSt11char_traitsIcEEvRSt13basic_ostreamIT_T0_EPKS3_l>:

  /// @cond undocumented

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
  4082c0:	55                   	push   %rbp
  4082c1:	48 89 e5             	mov    %rsp,%rbp
  4082c4:	48 83 ec 30          	sub    $0x30,%rsp
  4082c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4082cc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4082d0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits>       __ostream_type;
      typedef typename __ostream_type::ios_base    __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
  4082d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082d8:	48 8b 00             	mov    (%rax),%rax
  4082db:	48 83 e8 18          	sub    $0x18,%rax
  4082df:	48 8b 00             	mov    (%rax),%rax
  4082e2:	48 89 c2             	mov    %rax,%rdx
  4082e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082e9:	48 01 d0             	add    %rdx,%rax
  4082ec:	48 89 c7             	mov    %rax,%rdi
  4082ef:	e8 dc bd ff ff       	call   4040d0 <_ZNKSt9basic_iosIcSt11char_traitsIcEE5rdbufEv@plt>
  4082f4:	48 89 c1             	mov    %rax,%rcx
  4082f7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4082fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4082ff:	48 89 c6             	mov    %rax,%rsi
  408302:	48 89 cf             	mov    %rcx,%rdi
  408305:	e8 56 c0 ff ff       	call   404360 <_ZNSt15basic_streambufIcSt11char_traitsIcEE5sputnEPKcl@plt>
  40830a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__put != __n)
  40830e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408312:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  408316:	74 25                	je     40833d <_ZSt15__ostream_writeIcSt11char_traitsIcEEvRSt13basic_ostreamIT_T0_EPKS3_l+0x7d>
	__out.setstate(__ios_base::badbit);
  408318:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40831c:	48 8b 00             	mov    (%rax),%rax
  40831f:	48 83 e8 18          	sub    $0x18,%rax
  408323:	48 8b 00             	mov    (%rax),%rax
  408326:	48 89 c2             	mov    %rax,%rdx
  408329:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40832d:	48 01 d0             	add    %rdx,%rax
  408330:	be 01 00 00 00       	mov    $0x1,%esi
  408335:	48 89 c7             	mov    %rax,%rdi
  408338:	e8 73 be ff ff       	call   4041b0 <_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate@plt>
    }
  40833d:	90                   	nop
  40833e:	c9                   	leave
  40833f:	c3                   	ret

0000000000408340 <_ZSt7printlnIJRA4_KcEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_>:
		 std::format(__fmt, std::forward<_Args>(__args)...));
    }

  template<typename... _Args>
    inline void
    println(format_string<_Args...> __fmt, _Args&&... __args)
  408340:	55                   	push   %rbp
  408341:	48 89 e5             	mov    %rsp,%rbp
  408344:	53                   	push   %rbx
  408345:	48 83 ec 28          	sub    $0x28,%rsp
  408349:	48 89 f8             	mov    %rdi,%rax
  40834c:	48 89 c1             	mov    %rax,%rcx
  40834f:	bb 00 00 00 00       	mov    $0x0,%ebx
  408354:	48 89 f3             	mov    %rsi,%rbx
  408357:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  40835b:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
  40835f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { std::println(stdout, __fmt, std::forward<_Args>(__args)...); }
  408363:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408367:	48 89 c7             	mov    %rax,%rdi
  40836a:	e8 d2 24 00 00       	call   40a841 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
  40836f:	48 89 c1             	mov    %rax,%rcx
  408372:	48 8b 05 c7 de 01 00 	mov    0x1dec7(%rip),%rax        # 426240 <stdout@GLIBC_2.2.5>
  408379:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40837d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408381:	48 89 c7             	mov    %rax,%rdi
  408384:	e8 c6 24 00 00       	call   40a84f <_ZSt7printlnIJRA4_KcEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS7_>
  408389:	90                   	nop
  40838a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40838e:	c9                   	leave
  40838f:	c3                   	ret

0000000000408390 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>:
    __parse_arg_id(const _CharT* __first, const _CharT* __last)
  408390:	55                   	push   %rbp
  408391:	48 89 e5             	mov    %rsp,%rbp
  408394:	48 83 ec 70          	sub    $0x70,%rsp
  408398:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40839c:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
      if (__first == __last)
  4083a0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4083a4:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
      if (*__first == '0')
  4083a8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4083ac:	0f b6 00             	movzbl (%rax),%eax
  4083af:	3c 30                	cmp    $0x30,%al
  4083b1:	75 37                	jne    4083ea <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x5a>
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
  4083b3:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  4083ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4083be:	48 83 c0 01          	add    $0x1,%rax
  4083c2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4083c6:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  4083ca:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  4083ce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4083d2:	48 89 ce             	mov    %rcx,%rsi
  4083d5:	48 89 c7             	mov    %rax,%rdi
  4083d8:	e8 2d 25 00 00       	call   40a90a <_ZNSt4pairItPKcEC1IiS1_EEOT_OT0_>
  4083dd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4083e1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4083e5:	e9 c0 00 00 00       	jmp    4084aa <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
      if ('1' <= *__first && *__first <= '9')
  4083ea:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4083ee:	0f b6 00             	movzbl (%rax),%eax
  4083f1:	3c 30                	cmp    $0x30,%al
  4083f3:	0f 8e 83 00 00 00    	jle    40847c <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xec>
  4083f9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4083fd:	0f b6 00             	movzbl (%rax),%eax
  408400:	3c 39                	cmp    $0x39,%al
  408402:	7f 78                	jg     40847c <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xec>
	  const unsigned short __id = *__first - '0';
  408404:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408408:	0f b6 00             	movzbl (%rax),%eax
  40840b:	66 98                	cbtw
  40840d:	83 e8 30             	sub    $0x30,%eax
  408410:	66 89 45 ae          	mov    %ax,-0x52(%rbp)
	  const auto __next = __first + 1;
  408414:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408418:	48 83 c0 01          	add    $0x1,%rax
  40841c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
  408420:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408424:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  408428:	74 16                	je     408440 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xb0>
  40842a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40842e:	0f b6 00             	movzbl (%rax),%eax
  408431:	3c 2f                	cmp    $0x2f,%al
  408433:	7e 0b                	jle    408440 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xb0>
  408435:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408439:	0f b6 00             	movzbl (%rax),%eax
  40843c:	3c 39                	cmp    $0x39,%al
  40843e:	7e 21                	jle    408461 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xd1>
	    return {__id, __next};
  408440:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  408444:	48 8d 4d ae          	lea    -0x52(%rbp),%rcx
  408448:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40844c:	48 89 ce             	mov    %rcx,%rsi
  40844f:	48 89 c7             	mov    %rax,%rdi
  408452:	e8 f9 24 00 00       	call   40a950 <_ZNSt4pairItPKcEC1ERKtRKS1_>
  408457:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40845b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40845f:	eb 49                	jmp    4084aa <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
	    return __format::__parse_integer(__first, __last);
  408461:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  408465:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408469:	48 89 d6             	mov    %rdx,%rsi
  40846c:	48 89 c7             	mov    %rax,%rdi
  40846f:	e8 0c 25 00 00       	call   40a980 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>
  408474:	48 89 d1             	mov    %rdx,%rcx
  408477:	48 89 ca             	mov    %rcx,%rdx
  40847a:	eb 2e                	jmp    4084aa <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
      return {0, nullptr};
  40847c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  408483:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40848a:	00
  40848b:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  40848f:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
  408493:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408497:	48 89 ce             	mov    %rcx,%rsi
  40849a:	48 89 c7             	mov    %rax,%rdi
  40849d:	e8 9e 25 00 00       	call   40aa40 <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>
  4084a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4084a6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4084aa:	89 c1                	mov    %eax,%ecx
  4084ac:	89 c8                	mov    %ecx,%eax
  4084ae:	c9                   	leave
  4084af:	c3                   	ret

00000000004084b0 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>:
      check_arg_id(size_t __id)
  4084b0:	55                   	push   %rbp
  4084b1:	48 89 e5             	mov    %rsp,%rbp
  4084b4:	48 83 ec 10          	sub    $0x10,%rsp
  4084b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4084bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (_M_indexing == _Auto)
  4084c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4084c4:	8b 40 10             	mov    0x10(%rax),%eax
  4084c7:	83 f8 02             	cmp    $0x2,%eax
  4084ca:	75 05                	jne    4084d1 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x21>
	  __format::__conflicting_indexing_in_format_string();
  4084cc:	e8 f5 cc ff ff       	call   4051c6 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>
	_M_indexing = _Manual;
  4084d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4084d5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
	if (std::is_constant_evaluated())
  4084dc:	e8 59 c1 ff ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  4084e1:	84 c0                	test   %al,%al
  4084e3:	74 13                	je     4084f8 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x48>
	  if (__id >= _M_num_args)
  4084e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4084e9:	48 8b 40 20          	mov    0x20(%rax),%rax
  4084ed:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  4084f1:	72 05                	jb     4084f8 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x48>
	    __format::__invalid_arg_id_in_format_string();
  4084f3:	e8 dc cc ff ff       	call   4051d4 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
      }
  4084f8:	90                   	nop
  4084f9:	c9                   	leave
  4084fa:	c3                   	ret
  4084fb:	90                   	nop

00000000004084fc <_ZNKSt6ranges8__access6_BeginclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  4084fc:	55                   	push   %rbp
  4084fd:	48 89 e5             	mov    %rsp,%rbp
  408500:	48 83 ec 10          	sub    $0x10,%rsp
  408504:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408508:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  40850c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408510:	48 89 c7             	mov    %rax,%rdi
  408513:	e8 6e 25 00 00       	call   40aa86 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5beginEv>
	}
  408518:	c9                   	leave
  408519:	c3                   	ret

000000000040851a <_ZNKSt6ranges8__access4_EndclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40851a:	55                   	push   %rbp
  40851b:	48 89 e5             	mov    %rsp,%rbp
  40851e:	48 83 ec 10          	sub    $0x10,%rsp
  408522:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408526:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  40852a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40852e:	48 89 c7             	mov    %rax,%rdi
  408531:	e8 62 25 00 00       	call   40aa98 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE3endEv>
	}
  408536:	c9                   	leave
  408537:	c3                   	ret

0000000000408538 <_ZNKSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5emptyEv>:
      constexpr bool empty() const { return ranges::empty(_M_base); }
  408538:	55                   	push   %rbp
  408539:	48 89 e5             	mov    %rsp,%rbp
  40853c:	48 83 ec 10          	sub    $0x10,%rsp
  408540:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408544:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408548:	48 89 c6             	mov    %rax,%rsi
  40854b:	bf 07 b0 41 00       	mov    $0x41b007,%edi
  408550:	e8 03 00 00 00       	call   408558 <_ZNKSt6ranges8__access6_EmptyclIRKNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEbOT_>
  408555:	c9                   	leave
  408556:	c3                   	ret
  408557:	90                   	nop

0000000000408558 <_ZNKSt6ranges8__access6_EmptyclIRKNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEbOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  408558:	55                   	push   %rbp
  408559:	48 89 e5             	mov    %rsp,%rbp
  40855c:	48 83 ec 10          	sub    $0x10,%rsp
  408560:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408564:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return bool(__t.empty());
  408568:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40856c:	48 89 c7             	mov    %rax,%rdi
  40856f:	e8 02 00 00 00       	call   408576 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5emptyEv>
	}
  408574:	c9                   	leave
  408575:	c3                   	ret

0000000000408576 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5emptyEv>:
      begin() requires (!copyable<_It>)
      { return std::move(_M_begin); }

      constexpr _Sent end() const { return _M_end; }

      constexpr bool empty() const { return _M_begin == _M_end; }
  408576:	55                   	push   %rbp
  408577:	48 89 e5             	mov    %rsp,%rbp
  40857a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40857e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408582:	48 8b 10             	mov    (%rax),%rdx
  408585:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408589:	48 8b 40 08          	mov    0x8(%rax),%rax
  40858d:	48 39 c2             	cmp    %rax,%rdx
  408590:	0f 94 c0             	sete   %al
  408593:	5d                   	pop    %rbp
  408594:	c3                   	ret
  408595:	90                   	nop

0000000000408596 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE8_M_beginIS4_S4_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  408596:	55                   	push   %rbp
  408597:	48 89 e5             	mov    %rsp,%rbp
  40859a:	48 83 ec 20          	sub    $0x20,%rsp
  40859e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4085a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4085a6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4085aa:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  4085ae:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4085b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4085b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4085ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4085be:	48 89 c7             	mov    %rax,%rdi
  4085c1:	e8 72 25 00 00       	call   40ab38 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  4085c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4085ca:	c9                   	leave
  4085cb:	c3                   	ret

00000000004085cc <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5beginEv>:
      constexpr auto begin()
  4085cc:	55                   	push   %rbp
  4085cd:	48 89 e5             	mov    %rsp,%rbp
  4085d0:	53                   	push   %rbx
  4085d1:	48 83 ec 18          	sub    $0x18,%rsp
  4085d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4085d9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  4085dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4085e1:	48 89 c6             	mov    %rax,%rsi
  4085e4:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  4085e9:	e8 2c ff ff ff       	call   40851a <_ZNKSt6ranges8__access4_EndclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>
  4085ee:	48 89 c3             	mov    %rax,%rbx
  4085f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4085f5:	48 89 c6             	mov    %rax,%rsi
  4085f8:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  4085fd:	e8 fa fe ff ff       	call   4084fc <_ZNKSt6ranges8__access6_BeginclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>
  408602:	48 89 c2             	mov    %rax,%rdx
  408605:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408609:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40860d:	48 89 d9             	mov    %rbx,%rcx
  408610:	48 89 c7             	mov    %rax,%rdi
  408613:	e8 7e ff ff ff       	call   408596 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE8_M_beginIS4_S4_EEDaT_T0_>
  408618:	90                   	nop
  408619:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40861d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408621:	c9                   	leave
  408622:	c3                   	ret
  408623:	90                   	nop

0000000000408624 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>:
      _M_parse_fill_and_align(iterator __first, iterator __last) noexcept
  408624:	55                   	push   %rbp
  408625:	48 89 e5             	mov    %rsp,%rbp
  408628:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40862f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  408636:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  40863d:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	if (*__first != '{')
  408644:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40864b:	0f b6 00             	movzbl (%rax),%eax
  40864e:	3c 7b                	cmp    $0x7b,%al
  408650:	0f 84 57 01 00 00    	je     4087ad <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x189>
		_Utf32_view<ranges::subrange<iterator>> __uv({__first, __last});
  408656:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  40865d:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  408664:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  408668:	48 89 ce             	mov    %rcx,%rsi
  40866b:	48 89 c7             	mov    %rax,%rdi
  40866e:	e8 37 24 00 00       	call   40aaaa <_ZNSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EEC1IS2_EET_S2_>
  408673:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  408677:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40867b:	48 89 d6             	mov    %rdx,%rsi
  40867e:	48 89 c7             	mov    %rax,%rdi
  408681:	e8 6e 24 00 00       	call   40aaf4 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEEC1EOS6_>
		if (!__uv.empty())
  408686:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40868a:	48 89 c7             	mov    %rax,%rdi
  40868d:	e8 a6 fe ff ff       	call   408538 <_ZNKSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5emptyEv>
  408692:	83 f0 01             	xor    $0x1,%eax
  408695:	84 c0                	test   %al,%al
  408697:	0f 84 bc 00 00 00    	je     408759 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
		    auto __beg = __uv.begin();
  40869d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  4086a4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  4086a8:	48 89 d6             	mov    %rdx,%rsi
  4086ab:	48 89 c7             	mov    %rax,%rdi
  4086ae:	e8 19 ff ff ff       	call   4085cc <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5beginEv>
		    char32_t __c = *__beg++;
  4086b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4086b7:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
  4086be:	ba 00 00 00 00       	mov    $0x0,%edx
  4086c3:	48 89 ce             	mov    %rcx,%rsi
  4086c6:	48 89 c7             	mov    %rax,%rdi
  4086c9:	e8 fe 24 00 00       	call   40abcc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEi>
  4086ce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4086d2:	48 89 c7             	mov    %rax,%rdi
  4086d5:	e8 4c 25 00 00       	call   40ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  4086da:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    if (__is_scalar_value(__c))
  4086dd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4086e0:	89 c7                	mov    %eax,%edi
  4086e2:	e8 a4 c6 ff ff       	call   404d8b <_ZNSt9__unicode17__is_scalar_valueEDi>
  4086e7:	84 c0                	test   %al,%al
  4086e9:	74 6e                	je     408759 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
		      if (auto __next = __beg.base(); __next != __last)
  4086eb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  4086f2:	48 89 c7             	mov    %rax,%rdi
  4086f5:	e8 56 25 00 00       	call   40ac50 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>
  4086fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4086fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408702:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
  408709:	74 4e                	je     408759 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
			if (_Align __align = _S_align(*__next))
  40870b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40870f:	0f b6 00             	movzbl (%rax),%eax
  408712:	0f be c0             	movsbl %al,%eax
  408715:	89 c7                	mov    %eax,%edi
  408717:	e8 4e 25 00 00       	call   40ac6a <_ZNSt8__format5_SpecIcE8_S_alignEc>
  40871c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  40871f:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  408723:	74 34                	je     408759 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
			    _M_fill = __c;
  408725:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40872c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40872f:	89 50 08             	mov    %edx,0x8(%rax)
			    _M_align = __align;
  408732:	8b 45 ec             	mov    -0x14(%rbp),%eax
  408735:	83 e0 03             	and    $0x3,%eax
  408738:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  40873f:	83 e0 03             	and    $0x3,%eax
  408742:	89 c1                	mov    %eax,%ecx
  408744:	0f b6 02             	movzbl (%rdx),%eax
  408747:	83 e0 fc             	and    $0xfffffffc,%eax
  40874a:	09 c8                	or     %ecx,%eax
  40874c:	88 02                	mov    %al,(%rdx)
			    return ++__next;
  40874e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  408753:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408757:	eb 5b                	jmp    4087b4 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x190>
	    if (_Align __align = _S_align(__first[0]))
  408759:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  408760:	0f b6 00             	movzbl (%rax),%eax
  408763:	0f be c0             	movsbl %al,%eax
  408766:	89 c7                	mov    %eax,%edi
  408768:	e8 fd 24 00 00       	call   40ac6a <_ZNSt8__format5_SpecIcE8_S_alignEc>
  40876d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  408770:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  408774:	74 37                	je     4087ad <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x189>
		_M_fill = ' ';
  408776:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40877d:	c7 40 08 20 00 00 00 	movl   $0x20,0x8(%rax)
		_M_align = __align;
  408784:	8b 45 e8             	mov    -0x18(%rbp),%eax
  408787:	83 e0 03             	and    $0x3,%eax
  40878a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  408791:	83 e0 03             	and    $0x3,%eax
  408794:	89 c1                	mov    %eax,%ecx
  408796:	0f b6 02             	movzbl (%rdx),%eax
  408799:	83 e0 fc             	and    $0xfffffffc,%eax
  40879c:	09 c8                	or     %ecx,%eax
  40879e:	88 02                	mov    %al,(%rdx)
		return __first + 1;
  4087a0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4087a7:	48 83 c0 01          	add    $0x1,%rax
  4087ab:	eb 07                	jmp    4087b4 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x190>
	return __first;
  4087ad:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
      }
  4087b4:	c9                   	leave
  4087b5:	c3                   	ret

00000000004087b6 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>:
      _M_parse_width(iterator __first, iterator __last,
  4087b6:	55                   	push   %rbp
  4087b7:	48 89 e5             	mov    %rsp,%rbp
  4087ba:	48 83 ec 30          	sub    $0x30,%rsp
  4087be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4087c2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4087c6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4087ca:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	bool __arg_id = false;
  4087ce:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
	if (*__first == '0')
  4087d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4087d6:	0f b6 00             	movzbl (%rax),%eax
  4087d9:	3c 30                	cmp    $0x30,%al
  4087db:	75 0a                	jne    4087e7 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x31>
	  __throw_format_error("format error: width must be non-zero in "
  4087dd:	bf c0 b1 41 00       	mov    $0x41b1c0,%edi
  4087e2:	e8 70 c9 ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
  4087e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4087eb:	48 8d 78 04          	lea    0x4(%rax),%rdi
  4087ef:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4087f3:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  4087f7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4087fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4087ff:	49 89 c8             	mov    %rcx,%r8
  408802:	48 89 d1             	mov    %rdx,%rcx
  408805:	48 89 fa             	mov    %rdi,%rdx
  408808:	48 89 c7             	mov    %rax,%rdi
  40880b:	e8 99 24 00 00       	call   40aca9 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>
  408810:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__next != __first)
  408814:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408818:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40881c:	74 30                	je     40884e <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x98>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
  40881e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  408822:	84 c0                	test   %al,%al
  408824:	74 07                	je     40882d <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x77>
  408826:	ba 02 00 00 00       	mov    $0x2,%edx
  40882b:	eb 05                	jmp    408832 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x7c>
  40882d:	ba 01 00 00 00       	mov    $0x1,%edx
  408832:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408836:	0f b6 d2             	movzbl %dl,%edx
  408839:	83 e2 03             	and    $0x3,%edx
  40883c:	89 d1                	mov    %edx,%ecx
  40883e:	c1 e1 07             	shl    $0x7,%ecx
  408841:	0f b7 10             	movzwl (%rax),%edx
  408844:	66 81 e2 7f fe       	and    $0xfe7f,%dx
  408849:	09 ca                	or     %ecx,%edx
  40884b:	66 89 10             	mov    %dx,(%rax)
	return __next;
  40884e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  408852:	c9                   	leave
  408853:	c3                   	ret

0000000000408854 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>:
      _M_parse_precision(iterator __first, iterator __last,
  408854:	55                   	push   %rbp
  408855:	48 89 e5             	mov    %rsp,%rbp
  408858:	48 83 ec 30          	sub    $0x30,%rsp
  40885c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408860:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408864:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  408868:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (__first[0] != '.')
  40886c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408870:	0f b6 00             	movzbl (%rax),%eax
  408873:	3c 2e                	cmp    $0x2e,%al
  408875:	74 09                	je     408880 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x2c>
	  return __first;
  408877:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40887b:	e9 8a 00 00 00       	jmp    40890a <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0xb6>
	iterator __next = ++__first;
  408880:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  408885:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408889:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	bool __arg_id = false;
  40888d:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
	if (__next != __last)
  408891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408895:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  408899:	74 2d                	je     4088c8 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x74>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
  40889b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40889f:	48 8d 78 06          	lea    0x6(%rax),%rdi
  4088a3:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4088a7:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  4088ab:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4088af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088b3:	49 89 c8             	mov    %rcx,%r8
  4088b6:	48 89 d1             	mov    %rdx,%rcx
  4088b9:	48 89 fa             	mov    %rdi,%rdx
  4088bc:	48 89 c7             	mov    %rax,%rdi
  4088bf:	e8 e5 23 00 00       	call   40aca9 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>
  4088c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__next == __first)
  4088c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4088cc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4088d0:	75 0a                	jne    4088dc <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x88>
	  __throw_format_error("format error: missing precision after '.' in "
  4088d2:	bf f8 b1 41 00       	mov    $0x41b1f8,%edi
  4088d7:	e8 7b c8 ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
  4088dc:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  4088e0:	84 c0                	test   %al,%al
  4088e2:	74 07                	je     4088eb <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x97>
  4088e4:	ba 02 00 00 00       	mov    $0x2,%edx
  4088e9:	eb 05                	jmp    4088f0 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x9c>
  4088eb:	ba 01 00 00 00       	mov    $0x1,%edx
  4088f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4088f4:	83 e2 03             	and    $0x3,%edx
  4088f7:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
  4088fa:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  4088fe:	83 e2 f9             	and    $0xfffffff9,%edx
  408901:	09 ca                	or     %ecx,%edx
  408903:	88 50 01             	mov    %dl,0x1(%rax)
	return __next;
  408906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40890a:	c9                   	leave
  40890b:	c3                   	ret

000000000040890c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
  40890c:	55                   	push   %rbp
  40890d:	48 89 e5             	mov    %rsp,%rbp
  408910:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408914:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40891c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408920:	48 89 10             	mov    %rdx,(%rax)
  408923:	90                   	nop
  408924:	5d                   	pop    %rbp
  408925:	c3                   	ret

0000000000408926 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
  408926:	55                   	push   %rbp
  408927:	48 89 e5             	mov    %rsp,%rbp
  40892a:	48 83 ec 10          	sub    $0x10,%rsp
  40892e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408936:	48 8b 00             	mov    (%rax),%rax
  408939:	48 85 c0             	test   %rax,%rax
  40893c:	74 0f                	je     40894d <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
  40893e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408942:	48 8b 00             	mov    (%rax),%rax
  408945:	48 89 c7             	mov    %rax,%rdi
  408948:	e8 a1 0d 00 00       	call   4096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  40894d:	90                   	nop
  40894e:	c9                   	leave
  40894f:	c3                   	ret

0000000000408950 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
  408950:	55                   	push   %rbp
  408951:	48 89 e5             	mov    %rsp,%rbp
  408954:	48 83 ec 70          	sub    $0x70,%rsp
  408958:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40895c:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  408960:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  408964:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408968:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40896c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408970:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
  408974:	90                   	nop
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
  408975:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408979:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40897d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408981:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      return __last - __first;
  408985:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408989:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
			     std::__iterator_category(__first));
  40898d:	90                   	nop
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  40898e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (__dnew > size_type(_S_local_capacity))
  408992:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408996:	48 83 f8 0f          	cmp    $0xf,%rax
  40899a:	76 3f                	jbe    4089db <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8b>
	    _M_data(_M_create(__dnew, size_type(0)));
  40899c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  4089a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4089a4:	ba 00 00 00 00       	mov    $0x0,%edx
  4089a9:	48 89 ce             	mov    %rcx,%rsi
  4089ac:	48 89 c7             	mov    %rax,%rdi
  4089af:	e8 90 24 00 00       	call   40ae44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  4089b4:	48 89 c2             	mov    %rax,%rdx
  4089b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4089bb:	48 89 d6             	mov    %rdx,%rsi
  4089be:	48 89 c7             	mov    %rax,%rdi
  4089c1:	e8 80 0d 00 00       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
  4089c6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4089ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4089ce:	48 89 d6             	mov    %rdx,%rsi
  4089d1:	48 89 c7             	mov    %rax,%rdi
  4089d4:	e8 87 0d 00 00       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  4089d9:	eb 3a                	jmp    408a15 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc5>
  4089db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4089df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (std::is_constant_evaluated())
  4089e3:	e8 52 bc ff ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  4089e8:	84 c0                	test   %al,%al
  4089ea:	74 28                	je     408a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc4>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4089ec:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  4089f3:	00
  4089f4:	eb 17                	jmp    408a0d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xbd>
	    _M_local_buf[__i] = _CharT();
  4089f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4089fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4089fe:	48 01 d0             	add    %rdx,%rax
  408a01:	48 83 c0 10          	add    $0x10,%rax
  408a05:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  408a08:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  408a0d:	48 83 7d d8 0f       	cmpq   $0xf,-0x28(%rbp)
  408a12:	76 e2                	jbe    4089f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xa6>
      }
  408a14:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
  408a15:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  408a19:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  408a1d:	48 89 d6             	mov    %rdx,%rsi
  408a20:	48 89 c7             	mov    %rax,%rdi
  408a23:	e8 e4 fe ff ff       	call   40890c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
  408a28:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a2c:	48 89 c7             	mov    %rax,%rdi
  408a2f:	e8 a0 ea ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  408a34:	48 89 c1             	mov    %rax,%rcx
  408a37:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  408a3b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408a3f:	48 89 c6             	mov    %rax,%rsi
  408a42:	48 89 cf             	mov    %rcx,%rdi
  408a45:	e8 bd 24 00 00       	call   40af07 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
  408a4a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  408a51:	00

	_M_set_length(__dnew);
  408a52:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  408a56:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a5a:	48 89 d6             	mov    %rdx,%rsi
  408a5d:	48 89 c7             	mov    %rax,%rdi
  408a60:	e8 81 ea ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  408a65:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  408a69:	48 89 c7             	mov    %rax,%rdi
  408a6c:	e8 b5 fe ff ff       	call   408926 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
  408a71:	c9                   	leave
  408a72:	c3                   	ret

0000000000408a73 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
    println(format_string<_Args...> __fmt, _Args&&... __args)
  408a73:	55                   	push   %rbp
  408a74:	48 89 e5             	mov    %rsp,%rbp
  408a77:	53                   	push   %rbx
  408a78:	48 83 ec 28          	sub    $0x28,%rsp
  408a7c:	48 89 f8             	mov    %rdi,%rax
  408a7f:	48 89 c1             	mov    %rax,%rcx
  408a82:	bb 00 00 00 00       	mov    $0x0,%ebx
  408a87:	48 89 f3             	mov    %rsi,%rbx
  408a8a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  408a8e:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
  408a92:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { std::println(stdout, __fmt, std::forward<_Args>(__args)...); }
  408a96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408a9a:	48 89 c7             	mov    %rax,%rdi
  408a9d:	e8 9a 24 00 00       	call   40af3c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
  408aa2:	48 89 c1             	mov    %rax,%rcx
  408aa5:	48 8b 05 94 d7 01 00 	mov    0x1d794(%rip),%rax        # 426240 <stdout@GLIBC_2.2.5>
  408aac:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  408ab0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408ab4:	48 89 c7             	mov    %rax,%rdi
  408ab7:	e8 8e 24 00 00       	call   40af4a <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>
  408abc:	90                   	nop
  408abd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408ac1:	c9                   	leave
  408ac2:	c3                   	ret

0000000000408ac3 <_ZSt7printlnIJiEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS3_>:
	std::vprint_nonunicode(__os, __fmt.get(), __fmtargs);
    }

  template<typename... _Args>
    inline void
    println(ostream& __os, format_string<_Args...> __fmt, _Args&&... __args)
  408ac3:	55                   	push   %rbp
  408ac4:	48 89 e5             	mov    %rsp,%rbp
  408ac7:	41 55                	push   %r13
  408ac9:	41 54                	push   %r12
  408acb:	53                   	push   %rbx
  408acc:	48 83 ec 48          	sub    $0x48,%rsp
  408ad0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  408ad4:	48 89 f0             	mov    %rsi,%rax
  408ad7:	48 89 d6             	mov    %rdx,%rsi
  408ada:	48 89 c0             	mov    %rax,%rax
  408add:	ba 00 00 00 00       	mov    $0x0,%edx
  408ae2:	48 89 f2             	mov    %rsi,%rdx
  408ae5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408ae9:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  408aed:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    {
      std::print(__os, "{}\n",
		 std::format(__fmt, std::forward<_Args>(__args)...));
  408af1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  408af5:	48 89 c7             	mov    %rax,%rdi
  408af8:	e8 fe 1d 00 00       	call   40a8fb <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  408afd:	48 89 c1             	mov    %rax,%rcx
  408b00:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408b04:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  408b08:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  408b0c:	48 89 c7             	mov    %rax,%rdi
  408b0f:	e8 e2 24 00 00       	call   40aff6 <_ZSt6formatIJiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS8_>
      std::print(__os, "{}\n",
  408b14:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  408b1a:	41 bd 33 b2 41 00    	mov    $0x41b233,%r13d
  408b20:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  408b24:	4c 89 e6             	mov    %r12,%rsi
  408b27:	4c 89 ef             	mov    %r13,%rdi
  408b2a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408b2e:	48 89 d1             	mov    %rdx,%rcx
  408b31:	48 89 fa             	mov    %rdi,%rdx
  408b34:	48 89 c7             	mov    %rax,%rdi
  408b37:	e8 79 25 00 00       	call   40b0b5 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  408b3c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408b40:	48 89 c7             	mov    %rax,%rdi
  408b43:	e8 ea e9 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  408b48:	eb 1a                	jmp    408b64 <_ZSt7printlnIJiEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS3_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  408b4a:	48 89 c3             	mov    %rax,%rbx
  408b4d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408b51:	48 89 c7             	mov    %rax,%rdi
  408b54:	e8 d9 e9 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  408b59:	48 89 d8             	mov    %rbx,%rax
  408b5c:	48 89 c7             	mov    %rax,%rdi
  408b5f:	e8 ac b8 ff ff       	call   404410 <_Unwind_Resume@plt>
    }
  408b64:	48 83 c4 48          	add    $0x48,%rsp
  408b68:	5b                   	pop    %rbx
  408b69:	41 5c                	pop    %r12
  408b6b:	41 5d                	pop    %r13
  408b6d:	5d                   	pop    %rbp
  408b6e:	c3                   	ret
  408b6f:	90                   	nop

0000000000408b70 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>:
      _M_parse_sign(iterator __first, iterator) noexcept
  408b70:	55                   	push   %rbp
  408b71:	48 89 e5             	mov    %rsp,%rbp
  408b74:	48 83 ec 30          	sub    $0x30,%rsp
  408b78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408b7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408b80:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (_Sign __sign = _S_sign(*__first))
  408b84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408b88:	0f b6 00             	movzbl (%rax),%eax
  408b8b:	0f be c0             	movsbl %al,%eax
  408b8e:	89 c7                	mov    %eax,%edi
  408b90:	e8 d9 25 00 00       	call   40b16e <_ZNSt8__format5_SpecIcE7_S_signEc>
  408b95:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408b98:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  408b9c:	74 28                	je     408bc6 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_+0x56>
	    _M_sign = __sign;
  408b9e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408ba1:	83 e0 03             	and    $0x3,%eax
  408ba4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408ba8:	83 e0 03             	and    $0x3,%eax
  408bab:	8d 0c 85 00 00 00 00 	lea    0x0(,%rax,4),%ecx
  408bb2:	0f b6 02             	movzbl (%rdx),%eax
  408bb5:	83 e0 f3             	and    $0xfffffff3,%eax
  408bb8:	09 c8                	or     %ecx,%eax
  408bba:	88 02                	mov    %al,(%rdx)
	    return __first + 1;
  408bbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408bc0:	48 83 c0 01          	add    $0x1,%rax
  408bc4:	eb 04                	jmp    408bca <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_+0x5a>
	return __first;
  408bc6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      }
  408bca:	c9                   	leave
  408bcb:	c3                   	ret

0000000000408bcc <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>:
      _M_parse_alternate_form(iterator __first, iterator) noexcept
  408bcc:	55                   	push   %rbp
  408bcd:	48 89 e5             	mov    %rsp,%rbp
  408bd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408bd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408bd8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == '#')
  408bdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408be0:	0f b6 00             	movzbl (%rax),%eax
  408be3:	3c 23                	cmp    $0x23,%al
  408be5:	75 11                	jne    408bf8 <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_+0x2c>
	    _M_alt = true;
  408be7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408beb:	0f b6 10             	movzbl (%rax),%edx
  408bee:	83 ca 10             	or     $0x10,%edx
  408bf1:	88 10                	mov    %dl,(%rax)
	    ++__first;
  408bf3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  408bf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  408bfc:	5d                   	pop    %rbp
  408bfd:	c3                   	ret

0000000000408bfe <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>:
      _M_parse_zero_fill(iterator __first, iterator /* __last */) noexcept
  408bfe:	55                   	push   %rbp
  408bff:	48 89 e5             	mov    %rsp,%rbp
  408c02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408c0a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == '0')
  408c0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c12:	0f b6 00             	movzbl (%rax),%eax
  408c15:	3c 30                	cmp    $0x30,%al
  408c17:	75 11                	jne    408c2a <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_+0x2c>
	    _M_zero_fill = true;
  408c19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c1d:	0f b6 10             	movzbl (%rax),%edx
  408c20:	83 ca 40             	or     $0x40,%edx
  408c23:	88 10                	mov    %dl,(%rax)
	    ++__first;
  408c25:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  408c2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  408c2e:	5d                   	pop    %rbp
  408c2f:	c3                   	ret

0000000000408c30 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>:
      _M_parse_locale(iterator __first, iterator /* __last */) noexcept
  408c30:	55                   	push   %rbp
  408c31:	48 89 e5             	mov    %rsp,%rbp
  408c34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408c3c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == 'L')
  408c40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c44:	0f b6 00             	movzbl (%rax),%eax
  408c47:	3c 4c                	cmp    $0x4c,%al
  408c49:	75 11                	jne    408c5c <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_+0x2c>
	    _M_localized = true;
  408c4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c4f:	0f b6 10             	movzbl (%rax),%edx
  408c52:	83 ca 20             	or     $0x20,%edx
  408c55:	88 10                	mov    %dl,(%rax)
	    ++__first;
  408c57:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  408c5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  408c60:	5d                   	pop    %rbp
  408c61:	c3                   	ret

0000000000408c62 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  408c62:	55                   	push   %rbp
  408c63:	48 89 e5             	mov    %rsp,%rbp
  408c66:	48 83 ec 10          	sub    $0x10,%rsp
  408c6a:	89 7d fc             	mov    %edi,-0x4(%rbp)
    { return std::__bit_width(__value); }
  408c6d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408c70:	89 c7                	mov    %eax,%edi
  408c72:	e8 42 ba ff ff       	call   4046b9 <_ZSt11__bit_widthIjEiT_>
  408c77:	c9                   	leave
  408c78:	c3                   	ret

0000000000408c79 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  408c79:	55                   	push   %rbp
  408c7a:	48 89 e5             	mov    %rsp,%rbp
  408c7d:	48 83 ec 50          	sub    $0x50,%rsp
  408c81:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408c85:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408c89:	89 55 bc             	mov    %edx,-0x44(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  408c8c:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408c8f:	89 c7                	mov    %eax,%edi
  408c91:	e8 cc ff ff ff       	call   408c62 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  408c96:	83 c0 03             	add    $0x3,%eax
  408c99:	c1 e8 02             	shr    $0x2,%eax
  408c9c:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408c9f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408ca3:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  408ca7:	48 89 c2             	mov    %rax,%rdx
  408caa:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408cad:	48 39 c2             	cmp    %rax,%rdx
  408cb0:	0f 9c c0             	setl   %al
  408cb3:	0f b6 c0             	movzbl %al,%eax
  408cb6:	48 85 c0             	test   %rax,%rax
  408cb9:	74 1c                	je     408cd7 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x5e>
	  __res.ptr = __last;
  408cbb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408cbf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408cc3:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408cca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408cce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408cd2:	e9 db 00 00 00       	jmp    408db2 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x139>
      constexpr char __digits[] = {
  408cd7:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  408cde:	35 36 37
  408ce1:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  408ce8:	64 65 66
  408ceb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408cef:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      unsigned __pos = __len - 1;
  408cf3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408cf6:	83 e8 01             	sub    $0x1,%eax
  408cf9:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  408cfc:	eb 4b                	jmp    408d49 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0xd0>
	  auto __num = __val & 0xF;
  408cfe:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408d01:	83 e0 0f             	and    $0xf,%eax
  408d04:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 4;
  408d07:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[__pos] = __digits[__num];
  408d0b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408d0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408d12:	48 01 c2             	add    %rax,%rdx
  408d15:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408d18:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  408d1d:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  408d1f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408d22:	83 e0 0f             	and    $0xf,%eax
  408d25:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 4;
  408d28:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[__pos - 1] = __digits[__num];
  408d2c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408d2f:	83 e8 01             	sub    $0x1,%eax
  408d32:	89 c2                	mov    %eax,%edx
  408d34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408d38:	48 01 c2             	add    %rax,%rdx
  408d3b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408d3e:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  408d43:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  408d45:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  408d49:	81 7d bc ff 00 00 00 	cmpl   $0xff,-0x44(%rbp)
  408d50:	77 ac                	ja     408cfe <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x85>
      if (__val >= 0x10)
  408d52:	83 7d bc 0f          	cmpl   $0xf,-0x44(%rbp)
  408d56:	76 2f                	jbe    408d87 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x10e>
	  const auto __num = __val & 0xF;
  408d58:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408d5b:	83 e0 0f             	and    $0xf,%eax
  408d5e:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val >>= 4;
  408d61:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[1] = __digits[__num];
  408d65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408d69:	48 8d 50 01          	lea    0x1(%rax),%rdx
  408d6d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  408d70:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  408d75:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  408d77:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408d7a:	0f b6 54 05 d0       	movzbl -0x30(%rbp,%rax,1),%edx
  408d7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408d83:	88 10                	mov    %dl,(%rax)
  408d85:	eb 0e                	jmp    408d95 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x11c>
	__first[0] = __digits[__val];
  408d87:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408d8a:	0f b6 54 05 d0       	movzbl -0x30(%rbp,%rax,1),%edx
  408d8f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408d93:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408d95:	8b 55 f8             	mov    -0x8(%rbp),%edx
  408d98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408d9c:	48 01 d0             	add    %rdx,%rax
  408d9f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  408da3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  408daa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408dae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408db2:	c9                   	leave
  408db3:	c3                   	ret

0000000000408db4 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  408db4:	55                   	push   %rbp
  408db5:	48 89 e5             	mov    %rsp,%rbp
  408db8:	48 83 ec 40          	sub    $0x40,%rsp
  408dbc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408dc0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408dc4:	89 55 cc             	mov    %edx,-0x34(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  408dc7:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408dca:	be 0a 00 00 00       	mov    $0xa,%esi
  408dcf:	89 c7                	mov    %eax,%edi
  408dd1:	e8 9d bd ff ff       	call   404b73 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  408dd6:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408dd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408ddd:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  408de1:	48 89 c2             	mov    %rax,%rdx
  408de4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408de7:	48 39 c2             	cmp    %rax,%rdx
  408dea:	0f 9c c0             	setl   %al
  408ded:	0f b6 c0             	movzbl %al,%eax
  408df0:	48 85 c0             	test   %rax,%rax
  408df3:	74 19                	je     408e0e <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_+0x5a>
	  __res.ptr = __last;
  408df5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408df9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408dfd:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408e04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408e08:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408e0c:	eb 31                	jmp    408e3f <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_+0x8b>
      __detail::__to_chars_10_impl(__first, __len, __val);
  408e0e:	8b 55 cc             	mov    -0x34(%rbp),%edx
  408e11:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  408e14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408e18:	89 ce                	mov    %ecx,%esi
  408e1a:	48 89 c7             	mov    %rax,%rdi
  408e1d:	e8 37 e7 ff ff       	call   407559 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
      __res.ptr = __first + __len;
  408e22:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408e25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408e29:	48 01 d0             	add    %rdx,%rax
  408e2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  408e30:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  408e37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408e3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408e3f:	c9                   	leave
  408e40:	c3                   	ret

0000000000408e41 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  408e41:	55                   	push   %rbp
  408e42:	48 89 e5             	mov    %rsp,%rbp
  408e45:	48 83 ec 40          	sub    $0x40,%rsp
  408e49:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408e4d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408e51:	89 55 cc             	mov    %edx,-0x34(%rbp)
      unsigned __len = 0;
  408e54:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  408e5b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408e5e:	89 c7                	mov    %eax,%edi
  408e60:	e8 fd fd ff ff       	call   408c62 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  408e65:	83 c0 02             	add    $0x2,%eax
  408e68:	89 c2                	mov    %eax,%edx
  408e6a:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  408e6f:	48 0f af c2          	imul   %rdx,%rax
  408e73:	48 c1 e8 20          	shr    $0x20,%rax
  408e77:	d1 e8                	shr    %eax
  408e79:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408e7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408e80:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  408e84:	48 89 c2             	mov    %rax,%rdx
  408e87:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408e8a:	48 39 c2             	cmp    %rax,%rdx
  408e8d:	0f 9c c0             	setl   %al
  408e90:	0f b6 c0             	movzbl %al,%eax
  408e93:	48 85 c0             	test   %rax,%rax
  408e96:	74 1c                	je     408eb4 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x73>
	  __res.ptr = __last;
  408e98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408e9c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408ea0:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408ea7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408eab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408eaf:	e9 b8 00 00 00       	jmp    408f6c <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x12b>
      unsigned __pos = __len - 1;
  408eb4:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408eb7:	83 e8 01             	sub    $0x1,%eax
  408eba:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  408ebd:	eb 49                	jmp    408f08 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0xc7>
	  auto __num = __val & 7;
  408ebf:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408ec2:	83 e0 07             	and    $0x7,%eax
  408ec5:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 3;
  408ec8:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[__pos] = '0' + __num;
  408ecc:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408ecf:	8d 48 30             	lea    0x30(%rax),%ecx
  408ed2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408ed5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408ed9:	48 01 d0             	add    %rdx,%rax
  408edc:	89 ca                	mov    %ecx,%edx
  408ede:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  408ee0:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408ee3:	83 e0 07             	and    $0x7,%eax
  408ee6:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 3;
  408ee9:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[__pos - 1] = '0' + __num;
  408eed:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408ef0:	8d 50 30             	lea    0x30(%rax),%edx
  408ef3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408ef6:	83 e8 01             	sub    $0x1,%eax
  408ef9:	89 c1                	mov    %eax,%ecx
  408efb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408eff:	48 01 c8             	add    %rcx,%rax
  408f02:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  408f04:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  408f08:	83 7d cc 3f          	cmpl   $0x3f,-0x34(%rbp)
  408f0c:	77 b1                	ja     408ebf <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x7e>
      if (__val >= 010)
  408f0e:	83 7d cc 07          	cmpl   $0x7,-0x34(%rbp)
  408f12:	76 2d                	jbe    408f41 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x100>
	  auto const __num = __val & 7;
  408f14:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408f17:	83 e0 07             	and    $0x7,%eax
  408f1a:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val >>= 3;
  408f1d:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[1] = '0' + __num;
  408f21:	8b 45 f4             	mov    -0xc(%rbp),%eax
  408f24:	8d 50 30             	lea    0x30(%rax),%edx
  408f27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f2b:	48 83 c0 01          	add    $0x1,%rax
  408f2f:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  408f31:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408f34:	83 c0 30             	add    $0x30,%eax
  408f37:	89 c2                	mov    %eax,%edx
  408f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f3d:	88 10                	mov    %dl,(%rax)
  408f3f:	eb 0e                	jmp    408f4f <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x10e>
	__first[0] = '0' + __val;
  408f41:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408f44:	83 c0 30             	add    $0x30,%eax
  408f47:	89 c2                	mov    %eax,%edx
  408f49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f4d:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408f4f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  408f52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f56:	48 01 d0             	add    %rdx,%rax
  408f59:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  408f5d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  408f64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408f68:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408f6c:	c9                   	leave
  408f6d:	c3                   	ret

0000000000408f6e <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  408f6e:	55                   	push   %rbp
  408f6f:	48 89 e5             	mov    %rsp,%rbp
  408f72:	48 83 ec 40          	sub    $0x40,%rsp
  408f76:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408f7a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408f7e:	89 55 cc             	mov    %edx,-0x34(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  408f81:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408f84:	89 c7                	mov    %eax,%edi
  408f86:	e8 d7 fc ff ff       	call   408c62 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  408f8b:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408f8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408f92:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  408f96:	48 89 c2             	mov    %rax,%rdx
  408f99:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408f9c:	48 39 c2             	cmp    %rax,%rdx
  408f9f:	0f 9c c0             	setl   %al
  408fa2:	0f b6 c0             	movzbl %al,%eax
  408fa5:	48 85 c0             	test   %rax,%rax
  408fa8:	74 19                	je     408fc3 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x55>
	  __res.ptr = __last;
  408faa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408fae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408fb2:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408fb9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408fbd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408fc1:	eb 58                	jmp    40901b <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0xad>
      unsigned __pos = __len - 1;
  408fc3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408fc6:	83 e8 01             	sub    $0x1,%eax
  408fc9:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  408fcc:	eb 23                	jmp    408ff1 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x83>
	  __first[__pos--] = '0' + (__val & 1);
  408fce:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408fd1:	83 e0 01             	and    $0x1,%eax
  408fd4:	83 c0 30             	add    $0x30,%eax
  408fd7:	89 c6                	mov    %eax,%esi
  408fd9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  408fdd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408fe0:	8d 50 ff             	lea    -0x1(%rax),%edx
  408fe3:	89 55 fc             	mov    %edx,-0x4(%rbp)
  408fe6:	89 c0                	mov    %eax,%eax
  408fe8:	48 01 c8             	add    %rcx,%rax
  408feb:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  408fee:	d1 6d cc             	shrl   -0x34(%rbp)
      while (__pos)
  408ff1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  408ff5:	75 d7                	jne    408fce <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x60>
      __first[0] = '1';
  408ff7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408ffb:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  408ffe:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409001:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409005:	48 01 d0             	add    %rdx,%rax
  409008:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  40900c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  409013:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409017:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  40901b:	c9                   	leave
  40901c:	c3                   	ret

000000000040901d <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  40901d:	55                   	push   %rbp
  40901e:	48 89 e5             	mov    %rsp,%rbp
  409021:	48 83 ec 70          	sub    $0x70,%rsp
  409025:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  409029:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  40902d:	89 55 9c             	mov    %edx,-0x64(%rbp)
  409030:	89 4d 98             	mov    %ecx,-0x68(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  409033:	8b 55 98             	mov    -0x68(%rbp),%edx
  409036:	8b 45 9c             	mov    -0x64(%rbp),%eax
  409039:	89 d6                	mov    %edx,%esi
  40903b:	89 c7                	mov    %eax,%edi
  40903d:	e8 31 bb ff ff       	call   404b73 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  409042:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409045:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409049:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  40904d:	48 89 c2             	mov    %rax,%rdx
  409050:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409053:	48 39 c2             	cmp    %rax,%rdx
  409056:	0f 9c c0             	setl   %al
  409059:	0f b6 c0             	movzbl %al,%eax
  40905c:	48 85 c0             	test   %rax,%rax
  40905f:	74 1c                	je     40907d <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0x60>
	  __res.ptr = __last;
  409061:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409065:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  409069:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  409070:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409074:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409078:	e9 bf 00 00 00       	jmp    40913c <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0x11f>
      unsigned __pos = __len - 1;
  40907d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409080:	83 e8 01             	sub    $0x1,%eax
  409083:	89 45 fc             	mov    %eax,-0x4(%rbp)
      constexpr char __digits[] = {
  409086:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  40908d:	35 36 37
  409090:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  409097:	64 65 66
  40909a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40909e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4090a2:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  4090a9:	6c 6d 6e
  4090ac:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  4090b3:	74 75 76
  4090b6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4090ba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4090be:	c7 45 d0 77 78 79 7a 	movl   $0x7a797877,-0x30(%rbp)
      while (__val >= (unsigned)__base)
  4090c5:	eb 42                	jmp    409109 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0xec>
	  auto const __quo = __val / __base;
  4090c7:	8b 7d 98             	mov    -0x68(%rbp),%edi
  4090ca:	8b 45 9c             	mov    -0x64(%rbp),%eax
  4090cd:	ba 00 00 00 00       	mov    $0x0,%edx
  4090d2:	f7 f7                	div    %edi
  4090d4:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  auto const __rem = __val % __base;
  4090d7:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  4090da:	8b 45 9c             	mov    -0x64(%rbp),%eax
  4090dd:	ba 00 00 00 00       	mov    $0x0,%edx
  4090e2:	f7 f1                	div    %ecx
  4090e4:	89 55 f0             	mov    %edx,-0x10(%rbp)
	  __first[__pos--] = __digits[__rem];
  4090e7:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4090ea:	0f b6 54 05 b0       	movzbl -0x50(%rbp,%rax,1),%edx
  4090ef:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  4090f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4090f6:	8d 48 ff             	lea    -0x1(%rax),%ecx
  4090f9:	89 4d fc             	mov    %ecx,-0x4(%rbp)
  4090fc:	89 c0                	mov    %eax,%eax
  4090fe:	48 01 f0             	add    %rsi,%rax
  409101:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  409103:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409106:	89 45 9c             	mov    %eax,-0x64(%rbp)
      while (__val >= (unsigned)__base)
  409109:	8b 45 98             	mov    -0x68(%rbp),%eax
  40910c:	39 45 9c             	cmp    %eax,-0x64(%rbp)
  40910f:	73 b6                	jae    4090c7 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0xaa>
      *__first = __digits[__val];
  409111:	8b 45 9c             	mov    -0x64(%rbp),%eax
  409114:	0f b6 54 05 b0       	movzbl -0x50(%rbp,%rax,1),%edx
  409119:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40911d:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  40911f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409122:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409126:	48 01 d0             	add    %rdx,%rax
  409129:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  40912d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  409134:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409138:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  40913c:	c9                   	leave
  40913d:	c3                   	ret

000000000040913e <_ZNSt8__detail16__to_chars_len_2ImEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  40913e:	55                   	push   %rbp
  40913f:	48 89 e5             	mov    %rsp,%rbp
  409142:	48 83 ec 10          	sub    $0x10,%rsp
  409146:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__bit_width(__value); }
  40914a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40914e:	48 89 c7             	mov    %rax,%rdi
  409151:	e8 55 20 00 00       	call   40b1ab <_ZSt11__bit_widthImEiT_>
  409156:	c9                   	leave
  409157:	c3                   	ret

0000000000409158 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  409158:	55                   	push   %rbp
  409159:	48 89 e5             	mov    %rsp,%rbp
  40915c:	48 83 ec 60          	sub    $0x60,%rsp
  409160:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  409164:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  409168:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  40916c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409170:	48 89 c7             	mov    %rax,%rdi
  409173:	e8 c6 ff ff ff       	call   40913e <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  409178:	83 c0 03             	add    $0x3,%eax
  40917b:	c1 e8 02             	shr    $0x2,%eax
  40917e:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409181:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409185:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  409189:	48 89 c2             	mov    %rax,%rdx
  40918c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40918f:	48 39 c2             	cmp    %rax,%rdx
  409192:	0f 9c c0             	setl   %al
  409195:	0f b6 c0             	movzbl %al,%eax
  409198:	48 85 c0             	test   %rax,%rax
  40919b:	74 1c                	je     4091b9 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x61>
	  __res.ptr = __last;
  40919d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4091a1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  4091a5:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  4091ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4091b0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4091b4:	e9 04 01 00 00       	jmp    4092bd <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x165>
      constexpr char __digits[] = {
  4091b9:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  4091c0:	35 36 37
  4091c3:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  4091ca:	64 65 66
  4091cd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4091d1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      unsigned __pos = __len - 1;
  4091d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4091d8:	83 e8 01             	sub    $0x1,%eax
  4091db:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  4091de:	eb 5d                	jmp    40923d <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0xe5>
	  auto __num = __val & 0xF;
  4091e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4091e4:	83 e0 0f             	and    $0xf,%eax
  4091e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 4;
  4091eb:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[__pos] = __digits[__num];
  4091f0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4091f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4091f7:	48 01 c2             	add    %rax,%rdx
  4091fa:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  4091fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409202:	48 01 c8             	add    %rcx,%rax
  409205:	0f b6 00             	movzbl (%rax),%eax
  409208:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  40920a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40920e:	83 e0 0f             	and    $0xf,%eax
  409211:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 4;
  409215:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[__pos - 1] = __digits[__num];
  40921a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40921d:	83 e8 01             	sub    $0x1,%eax
  409220:	89 c2                	mov    %eax,%edx
  409222:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409226:	48 01 c2             	add    %rax,%rdx
  409229:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  40922d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409231:	48 01 c8             	add    %rcx,%rax
  409234:	0f b6 00             	movzbl (%rax),%eax
  409237:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  409239:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  40923d:	48 81 7d a8 ff 00 00 	cmpq   $0xff,-0x58(%rbp)
  409244:	00
  409245:	77 99                	ja     4091e0 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x88>
      if (__val >= 0x10)
  409247:	48 83 7d a8 0f       	cmpq   $0xf,-0x58(%rbp)
  40924c:	76 3e                	jbe    40928c <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x134>
	  const auto __num = __val & 0xF;
  40924e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409252:	83 e0 0f             	and    $0xf,%eax
  409255:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __val >>= 4;
  409259:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[1] = __digits[__num];
  40925e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409262:	48 8d 50 01          	lea    0x1(%rax),%rdx
  409266:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  40926a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40926e:	48 01 c8             	add    %rcx,%rax
  409271:	0f b6 00             	movzbl (%rax),%eax
  409274:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  409276:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40927a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40927e:	48 01 d0             	add    %rdx,%rax
  409281:	0f b6 10             	movzbl (%rax),%edx
  409284:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409288:	88 10                	mov    %dl,(%rax)
  40928a:	eb 14                	jmp    4092a0 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x148>
	__first[0] = __digits[__val];
  40928c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  409290:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409294:	48 01 d0             	add    %rdx,%rax
  409297:	0f b6 10             	movzbl (%rax),%edx
  40929a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40929e:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  4092a0:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4092a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4092a7:	48 01 d0             	add    %rdx,%rax
  4092aa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  4092ae:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  4092b5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4092b9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  4092bd:	c9                   	leave
  4092be:	c3                   	ret

00000000004092bf <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  4092bf:	55                   	push   %rbp
  4092c0:	48 89 e5             	mov    %rsp,%rbp
  4092c3:	48 83 ec 40          	sub    $0x40,%rsp
  4092c7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4092cb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4092cf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  4092d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4092d7:	be 0a 00 00 00       	mov    $0xa,%esi
  4092dc:	48 89 c7             	mov    %rax,%rdi
  4092df:	e8 17 b9 ff ff       	call   404bfb <_ZNSt8__detail14__to_chars_lenImEEjT_i>
  4092e4:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  4092e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4092eb:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4092ef:	48 89 c2             	mov    %rax,%rdx
  4092f2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4092f5:	48 39 c2             	cmp    %rax,%rdx
  4092f8:	0f 9c c0             	setl   %al
  4092fb:	0f b6 c0             	movzbl %al,%eax
  4092fe:	48 85 c0             	test   %rax,%rax
  409301:	74 19                	je     40931c <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_+0x5d>
	  __res.ptr = __last;
  409303:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409307:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  40930b:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  409312:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409316:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40931a:	eb 32                	jmp    40934e <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_+0x8f>
      __detail::__to_chars_10_impl(__first, __len, __val);
  40931c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  409320:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  409323:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409327:	89 ce                	mov    %ecx,%esi
  409329:	48 89 c7             	mov    %rax,%rdi
  40932c:	e8 cd e6 ff ff       	call   4079fe <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>
      __res.ptr = __first + __len;
  409331:	8b 55 fc             	mov    -0x4(%rbp),%edx
  409334:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409338:	48 01 d0             	add    %rdx,%rax
  40933b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  40933f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  409346:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40934a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  40934e:	c9                   	leave
  40934f:	c3                   	ret

0000000000409350 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  409350:	55                   	push   %rbp
  409351:	48 89 e5             	mov    %rsp,%rbp
  409354:	48 83 ec 50          	sub    $0x50,%rsp
  409358:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40935c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  409360:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      unsigned __len = 0;
  409364:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  40936b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40936f:	48 89 c7             	mov    %rax,%rdi
  409372:	e8 c7 fd ff ff       	call   40913e <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  409377:	83 c0 02             	add    $0x2,%eax
  40937a:	89 c2                	mov    %eax,%edx
  40937c:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  409381:	48 0f af c2          	imul   %rdx,%rax
  409385:	48 c1 e8 20          	shr    $0x20,%rax
  409389:	d1 e8                	shr    %eax
  40938b:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  40938e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409392:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  409396:	48 89 c2             	mov    %rax,%rdx
  409399:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40939c:	48 39 c2             	cmp    %rax,%rdx
  40939f:	0f 9c c0             	setl   %al
  4093a2:	0f b6 c0             	movzbl %al,%eax
  4093a5:	48 85 c0             	test   %rax,%rax
  4093a8:	74 1c                	je     4093c6 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x76>
	  __res.ptr = __last;
  4093aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4093ae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  4093b2:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  4093b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4093bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4093c1:	e9 c8 00 00 00       	jmp    40948e <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x13e>
      unsigned __pos = __len - 1;
  4093c6:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4093c9:	83 e8 01             	sub    $0x1,%eax
  4093cc:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  4093cf:	eb 51                	jmp    409422 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0xd2>
	  auto __num = __val & 7;
  4093d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4093d5:	83 e0 07             	and    $0x7,%eax
  4093d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 3;
  4093dc:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[__pos] = '0' + __num;
  4093e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4093e5:	8d 48 30             	lea    0x30(%rax),%ecx
  4093e8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4093eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4093ef:	48 01 d0             	add    %rdx,%rax
  4093f2:	89 ca                	mov    %ecx,%edx
  4093f4:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  4093f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4093fa:	83 e0 07             	and    $0x7,%eax
  4093fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 3;
  409401:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[__pos - 1] = '0' + __num;
  409406:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40940a:	8d 50 30             	lea    0x30(%rax),%edx
  40940d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409410:	83 e8 01             	sub    $0x1,%eax
  409413:	89 c1                	mov    %eax,%ecx
  409415:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409419:	48 01 c8             	add    %rcx,%rax
  40941c:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  40941e:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  409422:	48 83 7d b8 3f       	cmpq   $0x3f,-0x48(%rbp)
  409427:	77 a8                	ja     4093d1 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x81>
      if (__val >= 010)
  409429:	48 83 7d b8 07       	cmpq   $0x7,-0x48(%rbp)
  40942e:	76 32                	jbe    409462 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x112>
	  auto const __num = __val & 7;
  409430:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409434:	83 e0 07             	and    $0x7,%eax
  409437:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __val >>= 3;
  40943b:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[1] = '0' + __num;
  409440:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409444:	8d 50 30             	lea    0x30(%rax),%edx
  409447:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40944b:	48 83 c0 01          	add    $0x1,%rax
  40944f:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  409451:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409455:	83 c0 30             	add    $0x30,%eax
  409458:	89 c2                	mov    %eax,%edx
  40945a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40945e:	88 10                	mov    %dl,(%rax)
  409460:	eb 0f                	jmp    409471 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x121>
	__first[0] = '0' + __val;
  409462:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409466:	83 c0 30             	add    $0x30,%eax
  409469:	89 c2                	mov    %eax,%edx
  40946b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40946f:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  409471:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409474:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409478:	48 01 d0             	add    %rdx,%rax
  40947b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  40947f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  409486:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40948a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  40948e:	c9                   	leave
  40948f:	c3                   	ret

0000000000409490 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  409490:	55                   	push   %rbp
  409491:	48 89 e5             	mov    %rsp,%rbp
  409494:	48 83 ec 40          	sub    $0x40,%rsp
  409498:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40949c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4094a0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  4094a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4094a8:	48 89 c7             	mov    %rax,%rdi
  4094ab:	e8 8e fc ff ff       	call   40913e <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  4094b0:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  4094b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4094b7:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4094bb:	48 89 c2             	mov    %rax,%rdx
  4094be:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4094c1:	48 39 c2             	cmp    %rax,%rdx
  4094c4:	0f 9c c0             	setl   %al
  4094c7:	0f b6 c0             	movzbl %al,%eax
  4094ca:	48 85 c0             	test   %rax,%rax
  4094cd:	74 19                	je     4094e8 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x58>
	  __res.ptr = __last;
  4094cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4094d3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  4094d7:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  4094de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4094e2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4094e6:	eb 5a                	jmp    409542 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0xb2>
      unsigned __pos = __len - 1;
  4094e8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4094eb:	83 e8 01             	sub    $0x1,%eax
  4094ee:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  4094f1:	eb 25                	jmp    409518 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x88>
	  __first[__pos--] = '0' + (__val & 1);
  4094f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4094f7:	83 e0 01             	and    $0x1,%eax
  4094fa:	83 c0 30             	add    $0x30,%eax
  4094fd:	89 c6                	mov    %eax,%esi
  4094ff:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  409503:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409506:	8d 50 ff             	lea    -0x1(%rax),%edx
  409509:	89 55 fc             	mov    %edx,-0x4(%rbp)
  40950c:	89 c0                	mov    %eax,%eax
  40950e:	48 01 c8             	add    %rcx,%rax
  409511:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  409514:	48 d1 6d c8          	shrq   -0x38(%rbp)
      while (__pos)
  409518:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40951c:	75 d5                	jne    4094f3 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x63>
      __first[0] = '1';
  40951e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409522:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  409525:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409528:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40952c:	48 01 d0             	add    %rdx,%rax
  40952f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  409533:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  40953a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40953e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  409542:	c9                   	leave
  409543:	c3                   	ret

0000000000409544 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  409544:	55                   	push   %rbp
  409545:	48 89 e5             	mov    %rsp,%rbp
  409548:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40954c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  409550:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  409554:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  409558:	89 4d 84             	mov    %ecx,-0x7c(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  40955b:	8b 55 84             	mov    -0x7c(%rbp),%edx
  40955e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  409562:	89 d6                	mov    %edx,%esi
  409564:	48 89 c7             	mov    %rax,%rdi
  409567:	e8 8f b6 ff ff       	call   404bfb <_ZNSt8__detail14__to_chars_lenImEEjT_i>
  40956c:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  40956f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  409573:	48 2b 45 98          	sub    -0x68(%rbp),%rax
  409577:	48 89 c2             	mov    %rax,%rdx
  40957a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40957d:	48 39 c2             	cmp    %rax,%rdx
  409580:	0f 9c c0             	setl   %al
  409583:	0f b6 c0             	movzbl %al,%eax
  409586:	48 85 c0             	test   %rax,%rax
  409589:	74 1c                	je     4095a7 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x63>
	  __res.ptr = __last;
  40958b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40958f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  409593:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  40959a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40959e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4095a2:	e9 dc 00 00 00       	jmp    409683 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x13f>
      unsigned __pos = __len - 1;
  4095a7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4095aa:	83 e8 01             	sub    $0x1,%eax
  4095ad:	89 45 fc             	mov    %eax,-0x4(%rbp)
      constexpr char __digits[] = {
  4095b0:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  4095b7:	35 36 37
  4095ba:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  4095c1:	64 65 66
  4095c4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4095c8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4095cc:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  4095d3:	6c 6d 6e
  4095d6:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  4095dd:	74 75 76
  4095e0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4095e4:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4095e8:	c7 45 c0 77 78 79 7a 	movl   $0x7a797877,-0x40(%rbp)
      while (__val >= (unsigned)__base)
  4095ef:	eb 56                	jmp    409647 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x103>
	  auto const __quo = __val / __base;
  4095f1:	8b 45 84             	mov    -0x7c(%rbp),%eax
  4095f4:	48 63 f8             	movslq %eax,%rdi
  4095f7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4095fb:	ba 00 00 00 00       	mov    $0x0,%edx
  409600:	48 f7 f7             	div    %rdi
  409603:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  auto const __rem = __val % __base;
  409607:	8b 45 84             	mov    -0x7c(%rbp),%eax
  40960a:	48 63 c8             	movslq %eax,%rcx
  40960d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  409611:	ba 00 00 00 00       	mov    $0x0,%edx
  409616:	48 f7 f1             	div    %rcx
  409619:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __first[__pos--] = __digits[__rem];
  40961d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  409621:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409625:	48 01 d0             	add    %rdx,%rax
  409628:	0f b6 10             	movzbl (%rax),%edx
  40962b:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  40962f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409632:	8d 48 ff             	lea    -0x1(%rax),%ecx
  409635:	89 4d fc             	mov    %ecx,-0x4(%rbp)
  409638:	89 c0                	mov    %eax,%eax
  40963a:	48 01 f0             	add    %rsi,%rax
  40963d:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  40963f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409643:	48 89 45 88          	mov    %rax,-0x78(%rbp)
      while (__val >= (unsigned)__base)
  409647:	8b 45 84             	mov    -0x7c(%rbp),%eax
  40964a:	89 c0                	mov    %eax,%eax
  40964c:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
  409650:	73 9f                	jae    4095f1 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0xad>
      *__first = __digits[__val];
  409652:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  409656:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40965a:	48 01 d0             	add    %rdx,%rax
  40965d:	0f b6 10             	movzbl (%rax),%edx
  409660:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409664:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  409666:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409669:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40966d:	48 01 d0             	add    %rdx,%rax
  409670:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  409674:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  40967b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40967f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  409683:	c9                   	leave
  409684:	c3                   	ret

0000000000409685 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  409685:	55                   	push   %rbp
  409686:	48 89 e5             	mov    %rsp,%rbp
  409689:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40968d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409691:	5d                   	pop    %rbp
  409692:	c3                   	ret

0000000000409693 <_ZSt12construct_atIcJRcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
  409693:	55                   	push   %rbp
  409694:	48 89 e5             	mov    %rsp,%rbp
  409697:	53                   	push   %rbx
  409698:	48 83 ec 18          	sub    $0x18,%rsp
  40969c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4096a0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  4096a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4096a8:	48 89 c6             	mov    %rax,%rsi
  4096ab:	bf 01 00 00 00       	mov    $0x1,%edi
  4096b0:	e8 b4 af ff ff       	call   404669 <_ZnwmPv>
  4096b5:	48 89 c3             	mov    %rax,%rbx
  4096b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4096bc:	48 89 c7             	mov    %rax,%rdi
  4096bf:	e8 11 1b 00 00       	call   40b1d5 <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>
  4096c4:	0f b6 00             	movzbl (%rax),%eax
  4096c7:	88 03                	mov    %al,(%rbx)
  4096c9:	48 89 d8             	mov    %rbx,%rax
  4096cc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4096d0:	c9                   	leave
  4096d1:	c3                   	ret

00000000004096d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>:
      _M_length(size_type __length)
  4096d2:	55                   	push   %rbp
  4096d3:	48 89 e5             	mov    %rsp,%rbp
  4096d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4096da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_string_length = __length; }
  4096de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096e2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4096e6:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4096ea:	90                   	nop
  4096eb:	5d                   	pop    %rbp
  4096ec:	c3                   	ret
  4096ed:	90                   	nop

00000000004096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
  4096ee:	55                   	push   %rbp
  4096ef:	48 89 e5             	mov    %rsp,%rbp
  4096f2:	48 83 ec 10          	sub    $0x10,%rsp
  4096f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!_M_is_local())
  4096fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096fe:	48 89 c7             	mov    %rax,%rdi
  409701:	e8 08 e1 ff ff       	call   40780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  409706:	83 f0 01             	xor    $0x1,%eax
  409709:	84 c0                	test   %al,%al
  40970b:	74 17                	je     409724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x36>
	  _M_destroy(_M_allocated_capacity);
  40970d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409711:	48 8b 50 10          	mov    0x10(%rax),%rdx
  409715:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409719:	48 89 d6             	mov    %rdx,%rsi
  40971c:	48 89 c7             	mov    %rax,%rdi
  40971f:	e8 c0 1a 00 00       	call   40b1e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
      }
  409724:	90                   	nop
  409725:	c9                   	leave
  409726:	c3                   	ret
  409727:	90                   	nop

0000000000409728 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
  409728:	55                   	push   %rbp
  409729:	48 89 e5             	mov    %rsp,%rbp
  40972c:	48 83 ec 10          	sub    $0x10,%rsp
  409730:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  409734:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409738:	48 83 c0 10          	add    $0x10,%rax
  40973c:	48 89 c7             	mov    %rax,%rdi
  40973f:	e8 18 1c 00 00       	call   40b35c <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>
      }
  409744:	c9                   	leave
  409745:	c3                   	ret

0000000000409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
  409746:	55                   	push   %rbp
  409747:	48 89 e5             	mov    %rsp,%rbp
  40974a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40974e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_dataplus._M_p = __p; }
  409752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409756:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40975a:	48 89 10             	mov    %rdx,(%rax)
  40975d:	90                   	nop
  40975e:	5d                   	pop    %rbp
  40975f:	c3                   	ret

0000000000409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>:
      _M_capacity(size_type __capacity)
  409760:	55                   	push   %rbp
  409761:	48 89 e5             	mov    %rsp,%rbp
  409764:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409768:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_allocated_capacity = __capacity; }
  40976c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409770:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409774:	48 89 50 10          	mov    %rdx,0x10(%rax)
  409778:	90                   	nop
  409779:	5d                   	pop    %rbp
  40977a:	c3                   	ret
  40977b:	90                   	nop

000000000040977c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      const _CharT*
      data() const _GLIBCXX_NOEXCEPT
  40977c:	55                   	push   %rbp
  40977d:	48 89 e5             	mov    %rsp,%rbp
  409780:	48 83 ec 10          	sub    $0x10,%rsp
  409784:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
  409788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40978c:	48 89 c7             	mov    %rax,%rdi
  40978f:	e8 40 dd ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  409794:	c9                   	leave
  409795:	c3                   	ret

0000000000409796 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
  409796:	55                   	push   %rbp
  409797:	48 89 e5             	mov    %rsp,%rbp
  40979a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40979e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4097a2:	5d                   	pop    %rbp
  4097a3:	c3                   	ret

00000000004097a4 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_>:
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  4097a4:	55                   	push   %rbp
  4097a5:	48 89 e5             	mov    %rsp,%rbp
  4097a8:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  4097ac:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4097b0:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4097b4:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4097b8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4097bc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4097c0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4097c4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4097c8:	90                   	nop
      return std::__distance(__first, __last,
  4097c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4097cd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4097d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4097d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      return __last - __first;
  4097d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4097dd:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  4097e1:	48 c1 f8 02          	sar    $0x2,%rax
			     std::__iterator_category(__first));
  4097e5:	90                   	nop
      _DistanceType __len = std::distance(__first, __last);
  4097e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  4097ea:	e9 82 00 00 00       	jmp    409871 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xcd>
	  _DistanceType __half = __len >> 1;
  4097ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4097f3:	48 d1 f8             	sar    %rax
  4097f6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  _ForwardIterator __middle = __first;
  4097fa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4097fe:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  409802:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409806:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    __attribute__((__always_inline__))
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  40980a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40980e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  409812:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  409816:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40981a:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  40981b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40981f:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  409823:	48 89 d6             	mov    %rdx,%rsi
  409826:	48 89 c7             	mov    %rax,%rdi
  409829:	e8 9a 2e 00 00       	call   40c6c8 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>
    }
  40982e:	90                   	nop
	  if (__comp(__val, __middle))
  40982f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  409833:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  409837:	48 8d 45 87          	lea    -0x79(%rbp),%rax
  40983b:	48 89 ce             	mov    %rcx,%rsi
  40983e:	48 89 c7             	mov    %rax,%rdi
  409841:	e8 30 1b 00 00       	call   40b376 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKDiPS3_EEbRT_T0_>
  409846:	84 c0                	test   %al,%al
  409848:	74 0a                	je     409854 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xb0>
	    __len = __half;
  40984a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40984e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409852:	eb 1d                	jmp    409871 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xcd>
	      __first = __middle;
  409854:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409858:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	      ++__first;
  40985c:	48 83 45 98 04       	addq   $0x4,-0x68(%rbp)
	      __len = __len - __half - 1;
  409861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409865:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  409869:	48 83 e8 01          	sub    $0x1,%rax
  40986d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  409871:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  409876:	0f 8f 73 ff ff ff    	jg     4097ef <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0x4b>
      return __first;
  40987c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    }
  409880:	c9                   	leave
  409881:	c3                   	ret

0000000000409882 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_>:
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  409882:	55                   	push   %rbp
  409883:	48 89 e5             	mov    %rsp,%rbp
  409886:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40988a:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40988e:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  409892:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  409896:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40989a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40989e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4098a2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4098a6:	90                   	nop
      return std::__distance(__first, __last,
  4098a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4098ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4098af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4098b3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      return __last - __first;
  4098b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4098bb:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  4098bf:	48 c1 f8 02          	sar    $0x2,%rax
			     std::__iterator_category(__first));
  4098c3:	90                   	nop
      _DistanceType __len = std::distance(__first, __last);
  4098c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  4098c8:	e9 82 00 00 00       	jmp    40994f <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xcd>
	  _DistanceType __half = __len >> 1;
  4098cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4098d1:	48 d1 f8             	sar    %rax
  4098d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  _ForwardIterator __middle = __first;
  4098d8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4098dc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  4098e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4098e4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  4098e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4098ec:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4098f0:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  4098f4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4098f8:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  4098f9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4098fd:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  409901:	48 89 d6             	mov    %rdx,%rsi
  409904:	48 89 c7             	mov    %rax,%rdi
  409907:	e8 e4 2d 00 00       	call   40c6f0 <_ZSt9__advanceIPKjlEvRT_T0_St26random_access_iterator_tag>
    }
  40990c:	90                   	nop
	  if (__comp(__middle, __val))
  40990d:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  409911:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  409915:	48 8d 45 87          	lea    -0x79(%rbp),%rax
  409919:	48 89 ce             	mov    %rcx,%rsi
  40991c:	48 89 c7             	mov    %rax,%rdi
  40991f:	e8 76 1a 00 00       	call   40b39a <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPKjS3_EEbT_RT0_>
  409924:	84 c0                	test   %al,%al
  409926:	74 1f                	je     409947 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xc5>
	      __first = __middle;
  409928:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40992c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	      ++__first;
  409930:	48 83 45 98 04       	addq   $0x4,-0x68(%rbp)
	      __len = __len - __half - 1;
  409935:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409939:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40993d:	48 83 e8 01          	sub    $0x1,%rax
  409941:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409945:	eb 08                	jmp    40994f <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xcd>
	    __len = __half;
  409947:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40994b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  40994f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  409954:	0f 8f 73 ff ff ff    	jg     4098cd <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0x4b>
      return __first;
  40995a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    }
  40995e:	c9                   	leave
  40995f:	c3                   	ret

0000000000409960 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKDiEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
  409960:	55                   	push   %rbp
  409961:	48 89 e5             	mov    %rsp,%rbp
  409964:	48 83 ec 20          	sub    $0x20,%rsp
  409968:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _Iter_equals_val<_Value>(__val); }
  40996c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409970:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  409974:	48 89 d6             	mov    %rdx,%rsi
  409977:	48 89 c7             	mov    %rax,%rdi
  40997a:	e8 3f 1a 00 00       	call   40b3be <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEC1ERS2_>
  40997f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409983:	c9                   	leave
  409984:	c3                   	ret

0000000000409985 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
  409985:	55                   	push   %rbp
  409986:	48 89 e5             	mov    %rsp,%rbp
  409989:	48 83 ec 20          	sub    $0x20,%rsp
  40998d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409991:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409995:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  409999:	90                   	nop
    {
      return __find_if(__first, __last, __pred,
  40999a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40999e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4099a2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4099a6:	48 89 ce             	mov    %rcx,%rsi
  4099a9:	48 89 c7             	mov    %rax,%rdi
  4099ac:	e8 27 1a 00 00       	call   40b3d8 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag>
		       std::__iterator_category(__first));
    }
  4099b1:	c9                   	leave
  4099b2:	c3                   	ret

00000000004099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
  4099b3:	55                   	push   %rbp
  4099b4:	48 89 e5             	mov    %rsp,%rbp
  4099b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4099bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4099bf:	5d                   	pop    %rbp
  4099c0:	c3                   	ret
  4099c1:	90                   	nop

00000000004099c2 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clISt9monostateEEDaSJ_>:
	    std::visit_format_arg([&](auto& __arg) {
  4099c2:	55                   	push   %rbp
  4099c3:	48 89 e5             	mov    %rsp,%rbp
  4099c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4099ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4099ce:	90                   	nop
  4099cf:	5d                   	pop    %rbp
  4099d0:	c3                   	ret
  4099d1:	90                   	nop

00000000004099d2 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_>:
  4099d2:	55                   	push   %rbp
  4099d3:	48 89 e5             	mov    %rsp,%rbp
  4099d6:	53                   	push   %rbx
  4099d7:	48 83 ec 48          	sub    $0x48,%rsp
  4099db:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4099df:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
		  size_t __len = 4 + !__arg;
  4099e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4099e7:	0f b6 00             	movzbl (%rax),%eax
  4099ea:	83 f0 01             	xor    $0x1,%eax
  4099ed:	0f b6 c0             	movzbl %al,%eax
  4099f0:	83 c0 04             	add    $0x4,%eax
  4099f3:	48 98                	cltq
  4099f5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  const char* __chars[] = { "false", "true" };
  4099f9:	48 c7 45 d0 37 b2 41 	movq   $0x41b237,-0x30(%rbp)
  409a00:	00
  409a01:	48 c7 45 d8 3d b2 41 	movq   $0x41b23d,-0x28(%rbp)
  409a08:	00
		  if (auto __res = __sink_out._M_reserve(__len))
  409a09:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409a0d:	48 8b 00             	mov    (%rax),%rax
  409a10:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409a14:	48 89 d6             	mov    %rdx,%rsi
  409a17:	48 89 c7             	mov    %rax,%rdi
  409a1a:	e8 6b 00 00 00       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409a1f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  409a23:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  409a27:	48 89 c7             	mov    %rax,%rdi
  409a2a:	e8 f5 1c 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409a2f:	84 c0                	test   %al,%al
  409a31:	74 50                	je     409a83 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_+0xb1>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
  409a33:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409a37:	0f b6 00             	movzbl (%rax),%eax
  409a3a:	0f b6 c0             	movzbl %al,%eax
  409a3d:	48 98                	cltq
  409a3f:	48 8b 5c c5 d0       	mov    -0x30(%rbp,%rax,8),%rbx
  409a44:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  409a48:	48 89 c7             	mov    %rax,%rdi
  409a4b:	e8 ec 1c 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409a50:	48 89 c1             	mov    %rax,%rcx
  409a53:	48 89 de             	mov    %rbx,%rsi
  409a56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409a5a:	48 89 c2             	mov    %rax,%rdx
  409a5d:	48 89 cf             	mov    %rcx,%rdi
  409a60:	e8 cb a7 ff ff       	call   404230 <memcpy@plt>
		      __res._M_bump(__len);
  409a65:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409a69:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  409a6d:	48 89 d6             	mov    %rdx,%rsi
  409a70:	48 89 c7             	mov    %rax,%rdi
  409a73:	e8 e6 1c 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409a78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409a7c:	48 8b 40 08          	mov    0x8(%rax),%rax
  409a80:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409a83:	90                   	nop
  409a84:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409a88:	c9                   	leave
  409a89:	c3                   	ret

0000000000409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>:
      _M_reserve(size_t __n) const
  409a8a:	55                   	push   %rbp
  409a8b:	48 89 e5             	mov    %rsp,%rbp
  409a8e:	48 83 ec 10          	sub    $0x10,%rsp
  409a92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409a96:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_sink->_M_reserve(__n); }
  409a9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a9e:	48 8b 00             	mov    (%rax),%rax
  409aa1:	48 8b 00             	mov    (%rax),%rax
  409aa4:	48 83 c0 08          	add    $0x8,%rax
  409aa8:	48 8b 08             	mov    (%rax),%rcx
  409aab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409aaf:	48 8b 00             	mov    (%rax),%rax
  409ab2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409ab6:	48 89 d6             	mov    %rdx,%rsi
  409ab9:	48 89 c7             	mov    %rax,%rdi
  409abc:	ff d1                	call   *%rcx
  409abe:	c9                   	leave
  409abf:	c3                   	ret

0000000000409ac0 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_>:
	    std::visit_format_arg([&](auto& __arg) {
  409ac0:	55                   	push   %rbp
  409ac1:	48 89 e5             	mov    %rsp,%rbp
  409ac4:	53                   	push   %rbx
  409ac5:	48 83 ec 28          	sub    $0x28,%rsp
  409ac9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409acd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  if (auto __res = __sink_out._M_reserve(1))
  409ad1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409ad5:	48 8b 00             	mov    (%rax),%rax
  409ad8:	be 01 00 00 00       	mov    $0x1,%esi
  409add:	48 89 c7             	mov    %rax,%rdi
  409ae0:	e8 a5 ff ff ff       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409ae5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  409ae9:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  409aed:	48 89 c7             	mov    %rax,%rdi
  409af0:	e8 2f 1c 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409af5:	84 c0                	test   %al,%al
  409af7:	74 31                	je     409b2a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_+0x6a>
		      *__res.get() = __arg;
  409af9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409afd:	0f b6 18             	movzbl (%rax),%ebx
  409b00:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  409b04:	48 89 c7             	mov    %rax,%rdi
  409b07:	e8 30 1c 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409b0c:	88 18                	mov    %bl,(%rax)
		      __res._M_bump(1);
  409b0e:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  409b12:	be 01 00 00 00       	mov    $0x1,%esi
  409b17:	48 89 c7             	mov    %rax,%rdi
  409b1a:	e8 3f 1c 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409b1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409b23:	48 8b 40 08          	mov    0x8(%rax),%rax
  409b27:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409b2a:	90                   	nop
  409b2b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409b2f:	c9                   	leave
  409b30:	c3                   	ret
  409b31:	90                   	nop

0000000000409b32 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_>:
  409b32:	55                   	push   %rbp
  409b33:	48 89 e5             	mov    %rsp,%rbp
  409b36:	48 83 ec 30          	sub    $0x30,%rsp
  409b3a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409b3e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  409b42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409b46:	8b 00                	mov    (%rax),%eax
  409b48:	c1 e8 1f             	shr    $0x1f,%eax
  409b4b:	88 45 fb             	mov    %al,-0x5(%rbp)
		  if (__neg)
  409b4e:	80 7d fb 00          	cmpb   $0x0,-0x5(%rbp)
  409b52:	74 0d                	je     409b61 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0x2f>
		    __uval = make_unsigned_t<_Tp>(~__arg) + 1u;
  409b54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409b58:	8b 00                	mov    (%rax),%eax
  409b5a:	f7 d8                	neg    %eax
  409b5c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  409b5f:	eb 09                	jmp    409b6a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0x38>
		    __uval = __arg;
  409b61:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409b65:	8b 00                	mov    (%rax),%eax
  409b67:	89 45 fc             	mov    %eax,-0x4(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409b6a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409b6d:	be 0a 00 00 00       	mov    $0xa,%esi
  409b72:	89 c7                	mov    %eax,%edi
  409b74:	e8 fa af ff ff       	call   404b73 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  409b79:	89 45 f4             	mov    %eax,-0xc(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409b7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409b80:	48 8b 00             	mov    (%rax),%rax
  409b83:	0f b6 4d fb          	movzbl -0x5(%rbp),%ecx
  409b87:	8b 55 f4             	mov    -0xc(%rbp),%edx
  409b8a:	01 ca                	add    %ecx,%edx
  409b8c:	89 d2                	mov    %edx,%edx
  409b8e:	48 89 d6             	mov    %rdx,%rsi
  409b91:	48 89 c7             	mov    %rax,%rdi
  409b94:	e8 f1 fe ff ff       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409b99:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409b9d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409ba1:	48 89 c7             	mov    %rax,%rdi
  409ba4:	e8 7b 1b 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409ba9:	84 c0                	test   %al,%al
  409bab:	74 58                	je     409c05 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0xd3>
		      auto __ptr = __res.get();
  409bad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409bb1:	48 89 c7             	mov    %rax,%rdi
  409bb4:	e8 83 1b 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409bb9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  409bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409bc1:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409bc4:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  409bc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409bcc:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  409bd0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  409bd3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409bd6:	89 c6                	mov    %eax,%esi
  409bd8:	48 89 cf             	mov    %rcx,%rdi
  409bdb:	e8 79 d9 ff ff       	call   407559 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409be0:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  409be4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409be7:	01 d0                	add    %edx,%eax
  409be9:	89 c2                	mov    %eax,%edx
  409beb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409bef:	48 89 d6             	mov    %rdx,%rsi
  409bf2:	48 89 c7             	mov    %rax,%rdi
  409bf5:	e8 64 1b 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409bfa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409bfe:	48 8b 40 08          	mov    0x8(%rax),%rax
  409c02:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409c05:	90                   	nop
  409c06:	c9                   	leave
  409c07:	c3                   	ret

0000000000409c08 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_>:
  409c08:	55                   	push   %rbp
  409c09:	48 89 e5             	mov    %rsp,%rbp
  409c0c:	48 83 ec 30          	sub    $0x30,%rsp
  409c10:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409c14:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  409c18:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		    __uval = __arg;
  409c1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409c20:	8b 00                	mov    (%rax),%eax
  409c22:	89 45 f8             	mov    %eax,-0x8(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409c25:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409c28:	be 0a 00 00 00       	mov    $0xa,%esi
  409c2d:	89 c7                	mov    %eax,%edi
  409c2f:	e8 3f af ff ff       	call   404b73 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  409c34:	89 45 f4             	mov    %eax,-0xc(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409c37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c3b:	48 8b 00             	mov    (%rax),%rax
  409c3e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  409c41:	48 89 d6             	mov    %rdx,%rsi
  409c44:	48 89 c7             	mov    %rax,%rdi
  409c47:	e8 3e fe ff ff       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409c4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409c50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409c54:	48 89 c7             	mov    %rax,%rdi
  409c57:	e8 c8 1a 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409c5c:	84 c0                	test   %al,%al
  409c5e:	74 48                	je     409ca8 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_+0xa0>
		      auto __ptr = __res.get();
  409c60:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409c64:	48 89 c7             	mov    %rax,%rdi
  409c67:	e8 d0 1a 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409c6c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  409c70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409c74:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409c77:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409c7a:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  409c7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409c81:	89 ce                	mov    %ecx,%esi
  409c83:	48 89 c7             	mov    %rax,%rdi
  409c86:	e8 ce d8 ff ff       	call   407559 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409c8b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  409c8e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409c92:	48 89 d6             	mov    %rdx,%rsi
  409c95:	48 89 c7             	mov    %rax,%rdi
  409c98:	e8 c1 1a 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409c9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409ca1:	48 8b 40 08          	mov    0x8(%rax),%rax
  409ca5:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409ca8:	90                   	nop
  409ca9:	c9                   	leave
  409caa:	c3                   	ret
  409cab:	90                   	nop

0000000000409cac <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_>:
  409cac:	55                   	push   %rbp
  409cad:	48 89 e5             	mov    %rsp,%rbp
  409cb0:	48 83 ec 30          	sub    $0x30,%rsp
  409cb4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409cb8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  409cbc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409cc0:	48 8b 00             	mov    (%rax),%rax
  409cc3:	48 c1 e8 3f          	shr    $0x3f,%rax
  409cc7:	88 45 f7             	mov    %al,-0x9(%rbp)
		  if (__neg)
  409cca:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  409cce:	74 10                	je     409ce0 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0x34>
		    __uval = make_unsigned_t<_Tp>(~__arg) + 1u;
  409cd0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409cd4:	48 8b 00             	mov    (%rax),%rax
  409cd7:	48 f7 d8             	neg    %rax
  409cda:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409cde:	eb 0b                	jmp    409ceb <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0x3f>
		    __uval = __arg;
  409ce0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409ce4:	48 8b 00             	mov    (%rax),%rax
  409ce7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409cef:	be 0a 00 00 00       	mov    $0xa,%esi
  409cf4:	48 89 c7             	mov    %rax,%rdi
  409cf7:	e8 90 af ff ff       	call   404c8c <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
  409cfc:	89 45 f0             	mov    %eax,-0x10(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409cff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409d03:	48 8b 00             	mov    (%rax),%rax
  409d06:	0f b6 4d f7          	movzbl -0x9(%rbp),%ecx
  409d0a:	8b 55 f0             	mov    -0x10(%rbp),%edx
  409d0d:	01 ca                	add    %ecx,%edx
  409d0f:	89 d2                	mov    %edx,%edx
  409d11:	48 89 d6             	mov    %rdx,%rsi
  409d14:	48 89 c7             	mov    %rax,%rdi
  409d17:	e8 6e fd ff ff       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409d1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409d20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409d24:	48 89 c7             	mov    %rax,%rdi
  409d27:	e8 f8 19 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409d2c:	84 c0                	test   %al,%al
  409d2e:	74 59                	je     409d89 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0xdd>
		      auto __ptr = __res.get();
  409d30:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409d34:	48 89 c7             	mov    %rax,%rdi
  409d37:	e8 00 1a 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409d3c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  409d40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409d44:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409d47:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  409d4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409d4f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  409d53:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  409d57:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409d5a:	89 c6                	mov    %eax,%esi
  409d5c:	48 89 cf             	mov    %rcx,%rdi
  409d5f:	e8 8b df ff ff       	call   407cef <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409d64:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  409d68:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409d6b:	01 d0                	add    %edx,%eax
  409d6d:	89 c2                	mov    %eax,%edx
  409d6f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409d73:	48 89 d6             	mov    %rdx,%rsi
  409d76:	48 89 c7             	mov    %rax,%rdi
  409d79:	e8 e0 19 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409d7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409d82:	48 8b 40 08          	mov    0x8(%rax),%rax
  409d86:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409d89:	90                   	nop
  409d8a:	c9                   	leave
  409d8b:	c3                   	ret

0000000000409d8c <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_>:
  409d8c:	55                   	push   %rbp
  409d8d:	48 89 e5             	mov    %rsp,%rbp
  409d90:	48 83 ec 40          	sub    $0x40,%rsp
  409d94:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  409d98:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  const bool __neg = __arg < 0;
  409d9c:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		    __uval = __arg;
  409da0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409da4:	48 8b 00             	mov    (%rax),%rax
  409da7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409dab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409daf:	be 0a 00 00 00       	mov    $0xa,%esi
  409db4:	48 89 c7             	mov    %rax,%rdi
  409db7:	e8 d0 ae ff ff       	call   404c8c <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
  409dbc:	89 45 ec             	mov    %eax,-0x14(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409dbf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409dc3:	48 8b 00             	mov    (%rax),%rax
  409dc6:	8b 55 ec             	mov    -0x14(%rbp),%edx
  409dc9:	48 89 d6             	mov    %rdx,%rsi
  409dcc:	48 89 c7             	mov    %rax,%rdi
  409dcf:	e8 b6 fc ff ff       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409dd4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409dd8:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409ddc:	48 89 c7             	mov    %rax,%rdi
  409ddf:	e8 40 19 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409de4:	84 c0                	test   %al,%al
  409de6:	74 49                	je     409e31 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_+0xa5>
		      auto __ptr = __res.get();
  409de8:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409dec:	48 89 c7             	mov    %rax,%rdi
  409def:	e8 48 19 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409df4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		      *__ptr = '-';
  409df8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409dfc:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409dff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409e03:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  409e06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409e0a:	89 ce                	mov    %ecx,%esi
  409e0c:	48 89 c7             	mov    %rax,%rdi
  409e0f:	e8 db de ff ff       	call   407cef <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409e14:	8b 55 ec             	mov    -0x14(%rbp),%edx
  409e17:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409e1b:	48 89 d6             	mov    %rdx,%rsi
  409e1e:	48 89 c7             	mov    %rax,%rdi
  409e21:	e8 38 19 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409e26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409e2a:	48 8b 40 08          	mov    0x8(%rax),%rax
  409e2e:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409e31:	90                   	nop
  409e32:	c9                   	leave
  409e33:	c3                   	ret

0000000000409e34 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIfEEDaSJ_>:
  409e34:	55                   	push   %rbp
  409e35:	48 89 e5             	mov    %rsp,%rbp
  409e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409e3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409e40:	90                   	nop
  409e41:	5d                   	pop    %rbp
  409e42:	c3                   	ret
  409e43:	90                   	nop

0000000000409e44 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIdEEDaSJ_>:
  409e44:	55                   	push   %rbp
  409e45:	48 89 e5             	mov    %rsp,%rbp
  409e48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409e4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409e50:	90                   	nop
  409e51:	5d                   	pop    %rbp
  409e52:	c3                   	ret
  409e53:	90                   	nop

0000000000409e54 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIeEEDaSJ_>:
  409e54:	55                   	push   %rbp
  409e55:	48 89 e5             	mov    %rsp,%rbp
  409e58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409e5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409e60:	90                   	nop
  409e61:	5d                   	pop    %rbp
  409e62:	c3                   	ret
  409e63:	90                   	nop

0000000000409e64 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_>:
  409e64:	55                   	push   %rbp
  409e65:	48 89 e5             	mov    %rsp,%rbp
  409e68:	41 54                	push   %r12
  409e6a:	53                   	push   %rbx
  409e6b:	48 83 ec 30          	sub    $0x30,%rsp
  409e6f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  409e73:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  string_view __sv = __arg;
  409e77:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409e7b:	48 8b 10             	mov    (%rax),%rdx
  409e7e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409e82:	48 89 d6             	mov    %rdx,%rsi
  409e85:	48 89 c7             	mov    %rax,%rdi
  409e88:	e8 b1 bc ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
  409e8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409e91:	48 8b 18             	mov    (%rax),%rbx
  409e94:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409e98:	48 89 c7             	mov    %rax,%rdi
  409e9b:	e8 34 be ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409ea0:	48 89 c6             	mov    %rax,%rsi
  409ea3:	48 89 df             	mov    %rbx,%rdi
  409ea6:	e8 df fb ff ff       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409eab:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409eaf:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409eb3:	48 89 c7             	mov    %rax,%rdi
  409eb6:	e8 69 18 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409ebb:	84 c0                	test   %al,%al
  409ebd:	74 64                	je     409f23 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_+0xbf>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
  409ebf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409ec3:	48 89 c7             	mov    %rax,%rdi
  409ec6:	e8 09 be ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409ecb:	48 89 c3             	mov    %rax,%rbx
  409ece:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409ed2:	48 89 c7             	mov    %rax,%rdi
  409ed5:	e8 be d5 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  409eda:	49 89 c4             	mov    %rax,%r12
  409edd:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409ee1:	48 89 c7             	mov    %rax,%rdi
  409ee4:	e8 53 18 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409ee9:	4c 89 e1             	mov    %r12,%rcx
  409eec:	48 89 da             	mov    %rbx,%rdx
  409eef:	48 89 ce             	mov    %rcx,%rsi
  409ef2:	48 89 c7             	mov    %rax,%rdi
  409ef5:	e8 36 a3 ff ff       	call   404230 <memcpy@plt>
		      __res._M_bump(__sv.size());
  409efa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409efe:	48 89 c7             	mov    %rax,%rdi
  409f01:	e8 ce bd ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409f06:	48 89 c2             	mov    %rax,%rdx
  409f09:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409f0d:	48 89 d6             	mov    %rdx,%rsi
  409f10:	48 89 c7             	mov    %rax,%rdi
  409f13:	e8 46 18 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409f18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409f1c:	48 8b 40 08          	mov    0x8(%rax),%rax
  409f20:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409f23:	90                   	nop
  409f24:	48 83 c4 30          	add    $0x30,%rsp
  409f28:	5b                   	pop    %rbx
  409f29:	41 5c                	pop    %r12
  409f2b:	5d                   	pop    %rbp
  409f2c:	c3                   	ret
  409f2d:	90                   	nop

0000000000409f2e <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_>:
  409f2e:	55                   	push   %rbp
  409f2f:	48 89 e5             	mov    %rsp,%rbp
  409f32:	41 54                	push   %r12
  409f34:	53                   	push   %rbx
  409f35:	48 83 ec 30          	sub    $0x30,%rsp
  409f39:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  409f3d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  string_view __sv = __arg;
  409f41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409f45:	48 8b 50 08          	mov    0x8(%rax),%rdx
  409f49:	48 8b 00             	mov    (%rax),%rax
  409f4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409f50:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
  409f54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409f58:	48 8b 18             	mov    (%rax),%rbx
  409f5b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f5f:	48 89 c7             	mov    %rax,%rdi
  409f62:	e8 6d bd ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409f67:	48 89 c6             	mov    %rax,%rsi
  409f6a:	48 89 df             	mov    %rbx,%rdi
  409f6d:	e8 18 fb ff ff       	call   409a8a <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409f72:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409f76:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409f7a:	48 89 c7             	mov    %rax,%rdi
  409f7d:	e8 a2 17 00 00       	call   40b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409f82:	84 c0                	test   %al,%al
  409f84:	74 64                	je     409fea <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_+0xbc>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
  409f86:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f8a:	48 89 c7             	mov    %rax,%rdi
  409f8d:	e8 42 bd ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409f92:	48 89 c3             	mov    %rax,%rbx
  409f95:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f99:	48 89 c7             	mov    %rax,%rdi
  409f9c:	e8 f7 d4 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  409fa1:	49 89 c4             	mov    %rax,%r12
  409fa4:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409fa8:	48 89 c7             	mov    %rax,%rdi
  409fab:	e8 8c 17 00 00       	call   40b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409fb0:	4c 89 e1             	mov    %r12,%rcx
  409fb3:	48 89 da             	mov    %rbx,%rdx
  409fb6:	48 89 ce             	mov    %rcx,%rsi
  409fb9:	48 89 c7             	mov    %rax,%rdi
  409fbc:	e8 6f a2 ff ff       	call   404230 <memcpy@plt>
		      __res._M_bump(__sv.size());
  409fc1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409fc5:	48 89 c7             	mov    %rax,%rdi
  409fc8:	e8 07 bd ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409fcd:	48 89 c2             	mov    %rax,%rdx
  409fd0:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409fd4:	48 89 d6             	mov    %rdx,%rsi
  409fd7:	48 89 c7             	mov    %rax,%rdi
  409fda:	e8 7f 17 00 00       	call   40b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409fdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409fe3:	48 8b 40 08          	mov    0x8(%rax),%rax
  409fe7:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409fea:	90                   	nop
  409feb:	48 83 c4 30          	add    $0x30,%rsp
  409fef:	5b                   	pop    %rbx
  409ff0:	41 5c                	pop    %r12
  409ff2:	5d                   	pop    %rbp
  409ff3:	c3                   	ret

0000000000409ff4 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKvEEDaSJ_>:
  409ff4:	55                   	push   %rbp
  409ff5:	48 89 e5             	mov    %rsp,%rbp
  409ff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409ffc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a000:	90                   	nop
  40a001:	5d                   	pop    %rbp
  40a002:	c3                   	ret
  40a003:	90                   	nop

000000000040a004 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clINSt16basic_format_argIS4_E6handleEEEDaSJ_>:
  40a004:	55                   	push   %rbp
  40a005:	48 89 e5             	mov    %rsp,%rbp
  40a008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a00c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a010:	90                   	nop
  40a011:	5d                   	pop    %rbp
  40a012:	c3                   	ret
  40a013:	90                   	nop

000000000040a014 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clInEEDaSJ_>:
  40a014:	55                   	push   %rbp
  40a015:	48 89 e5             	mov    %rsp,%rbp
  40a018:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a01c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a020:	90                   	nop
  40a021:	5d                   	pop    %rbp
  40a022:	c3                   	ret
  40a023:	90                   	nop

000000000040a024 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIoEEDaSJ_>:
  40a024:	55                   	push   %rbp
  40a025:	48 89 e5             	mov    %rsp,%rbp
  40a028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a02c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a030:	90                   	nop
  40a031:	5d                   	pop    %rbp
  40a032:	c3                   	ret
  40a033:	90                   	nop

000000000040a034 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIDF128_EEDaSJ_>:
  40a034:	55                   	push   %rbp
  40a035:	48 89 e5             	mov    %rsp,%rbp
  40a038:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a03c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a040:	90                   	nop
  40a041:	5d                   	pop    %rbp
  40a042:	c3                   	ret
  40a043:	90                   	nop

000000000040a044 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  40a044:	55                   	push   %rbp
  40a045:	48 89 e5             	mov    %rsp,%rbp
  40a048:	48 83 ec 30          	sub    $0x30,%rsp
  40a04c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a050:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a054:	89 d0                	mov    %edx,%eax
  40a056:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  40a059:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  40a05d:	89 c0                	mov    %eax,%eax
  40a05f:	48 8b 04 c5 98 de 41 	mov    0x41de98(,%rax,8),%rax
  40a066:	00
  40a067:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  40a069:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a06d:	48 89 c7             	mov    %rax,%rdi
  40a070:	e8 68 15 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a075:	48 89 c2             	mov    %rax,%rdx
  40a078:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a07c:	48 89 c6             	mov    %rax,%rsi
  40a07f:	48 89 d7             	mov    %rdx,%rdi
  40a082:	e8 3b f9 ff ff       	call   4099c2 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clISt9monostateEEDaSJ_>
  40a087:	e9 2b 02 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  40a08c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a090:	48 89 c7             	mov    %rax,%rdi
  40a093:	e8 45 15 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a098:	48 89 c2             	mov    %rax,%rdx
  40a09b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a09f:	48 89 c6             	mov    %rax,%rsi
  40a0a2:	48 89 d7             	mov    %rdx,%rdi
  40a0a5:	e8 28 f9 ff ff       	call   4099d2 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_>
  40a0aa:	e9 08 02 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  40a0af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a0b3:	48 89 c7             	mov    %rax,%rdi
  40a0b6:	e8 22 15 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a0bb:	48 89 c2             	mov    %rax,%rdx
  40a0be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a0c2:	48 89 c6             	mov    %rax,%rsi
  40a0c5:	48 89 d7             	mov    %rdx,%rdi
  40a0c8:	e8 f3 f9 ff ff       	call   409ac0 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_>
  40a0cd:	e9 e5 01 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  40a0d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a0d6:	48 89 c7             	mov    %rax,%rdi
  40a0d9:	e8 ff 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a0de:	48 89 c2             	mov    %rax,%rdx
  40a0e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a0e5:	48 89 c6             	mov    %rax,%rsi
  40a0e8:	48 89 d7             	mov    %rdx,%rdi
  40a0eb:	e8 42 fa ff ff       	call   409b32 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_>
  40a0f0:	e9 c2 01 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  40a0f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a0f9:	48 89 c7             	mov    %rax,%rdi
  40a0fc:	e8 dc 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a101:	48 89 c2             	mov    %rax,%rdx
  40a104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a108:	48 89 c6             	mov    %rax,%rsi
  40a10b:	48 89 d7             	mov    %rdx,%rdi
  40a10e:	e8 f5 fa ff ff       	call   409c08 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_>
  40a113:	e9 9f 01 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  40a118:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a11c:	48 89 c7             	mov    %rax,%rdi
  40a11f:	e8 b9 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a124:	48 89 c2             	mov    %rax,%rdx
  40a127:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a12b:	48 89 c6             	mov    %rax,%rsi
  40a12e:	48 89 d7             	mov    %rdx,%rdi
  40a131:	e8 76 fb ff ff       	call   409cac <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_>
  40a136:	e9 7c 01 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  40a13b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a13f:	48 89 c7             	mov    %rax,%rdi
  40a142:	e8 96 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a147:	48 89 c2             	mov    %rax,%rdx
  40a14a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a14e:	48 89 c6             	mov    %rax,%rsi
  40a151:	48 89 d7             	mov    %rdx,%rdi
  40a154:	e8 33 fc ff ff       	call   409d8c <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_>
  40a159:	e9 59 01 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  40a15e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a162:	48 89 c7             	mov    %rax,%rdi
  40a165:	e8 73 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a16a:	48 89 c2             	mov    %rax,%rdx
  40a16d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a171:	48 89 c6             	mov    %rax,%rsi
  40a174:	48 89 d7             	mov    %rdx,%rdi
  40a177:	e8 b8 fc ff ff       	call   409e34 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIfEEDaSJ_>
  40a17c:	e9 36 01 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  40a181:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a185:	48 89 c7             	mov    %rax,%rdi
  40a188:	e8 50 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a18d:	48 89 c2             	mov    %rax,%rdx
  40a190:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a194:	48 89 c6             	mov    %rax,%rsi
  40a197:	48 89 d7             	mov    %rdx,%rdi
  40a19a:	e8 a5 fc ff ff       	call   409e44 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIdEEDaSJ_>
  40a19f:	e9 13 01 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  40a1a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1a8:	48 89 c7             	mov    %rax,%rdi
  40a1ab:	e8 2d 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a1b0:	48 89 c2             	mov    %rax,%rdx
  40a1b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a1b7:	48 89 c6             	mov    %rax,%rsi
  40a1ba:	48 89 d7             	mov    %rdx,%rdi
  40a1bd:	e8 92 fc ff ff       	call   409e54 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIeEEDaSJ_>
  40a1c2:	e9 f0 00 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  40a1c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1cb:	48 89 c7             	mov    %rax,%rdi
  40a1ce:	e8 0a 14 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a1d3:	48 89 c2             	mov    %rax,%rdx
  40a1d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a1da:	48 89 c6             	mov    %rax,%rsi
  40a1dd:	48 89 d7             	mov    %rdx,%rdi
  40a1e0:	e8 7f fc ff ff       	call   409e64 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_>
  40a1e5:	e9 cd 00 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  40a1ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1ee:	48 89 c7             	mov    %rax,%rdi
  40a1f1:	e8 e7 13 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a1f6:	48 89 c2             	mov    %rax,%rdx
  40a1f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a1fd:	48 89 c6             	mov    %rax,%rsi
  40a200:	48 89 d7             	mov    %rdx,%rdi
  40a203:	e8 26 fd ff ff       	call   409f2e <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_>
  40a208:	e9 aa 00 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  40a20d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a211:	48 89 c7             	mov    %rax,%rdi
  40a214:	e8 c4 13 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a219:	48 89 c2             	mov    %rax,%rdx
  40a21c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a220:	48 89 c6             	mov    %rax,%rsi
  40a223:	48 89 d7             	mov    %rdx,%rdi
  40a226:	e8 c9 fd ff ff       	call   409ff4 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKvEEDaSJ_>
  40a22b:	e9 87 00 00 00       	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  40a230:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a234:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  40a238:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a23c:	48 89 c7             	mov    %rax,%rdi
  40a23f:	e8 99 13 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a244:	48 89 c2             	mov    %rax,%rdx
  40a247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a24b:	48 89 c6             	mov    %rax,%rsi
  40a24e:	48 89 d7             	mov    %rdx,%rdi
  40a251:	e8 ae fd ff ff       	call   40a004 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clINSt16basic_format_argIS4_E6handleEEEDaSJ_>
  40a256:	eb 5f                	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  40a258:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a25c:	48 89 c7             	mov    %rax,%rdi
  40a25f:	e8 79 13 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a264:	48 89 c2             	mov    %rax,%rdx
  40a267:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a26b:	48 89 c6             	mov    %rax,%rsi
  40a26e:	48 89 d7             	mov    %rdx,%rdi
  40a271:	e8 9e fd ff ff       	call   40a014 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clInEEDaSJ_>
  40a276:	eb 3f                	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  40a278:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a27c:	48 89 c7             	mov    %rax,%rdi
  40a27f:	e8 59 13 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a284:	48 89 c2             	mov    %rax,%rdx
  40a287:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a28b:	48 89 c6             	mov    %rax,%rsi
  40a28e:	48 89 d7             	mov    %rdx,%rdi
  40a291:	e8 8e fd ff ff       	call   40a024 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIoEEDaSJ_>
  40a296:	eb 1f                	jmp    40a2b7 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  40a298:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a29c:	48 89 c7             	mov    %rax,%rdi
  40a29f:	e8 39 13 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a2a4:	48 89 c2             	mov    %rax,%rdx
  40a2a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a2ab:	48 89 c6             	mov    %rax,%rsi
  40a2ae:	48 89 d7             	mov    %rdx,%rdi
  40a2b1:	e8 7e fd ff ff       	call   40a034 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIDF128_EEDaSJ_>
  40a2b6:	90                   	nop
	}
  40a2b7:	c9                   	leave
  40a2b8:	c3                   	ret

000000000040a2b9 <_ZSt16visit_format_argIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_S5_EDcOS6_St16basic_format_argIS8_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  40a2b9:	55                   	push   %rbp
  40a2ba:	48 89 e5             	mov    %rsp,%rbp
  40a2bd:	53                   	push   %rbx
  40a2be:	48 83 ec 18          	sub    $0x18,%rsp
  40a2c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  40a2c6:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  40a2ca:	0f b6 d8             	movzbl %al,%ebx
  40a2cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a2d1:	48 89 c7             	mov    %rax,%rdi
  40a2d4:	e8 04 13 00 00       	call   40b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a2d9:	89 da                	mov    %ebx,%edx
  40a2db:	48 89 c6             	mov    %rax,%rsi
  40a2de:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  40a2e2:	e8 5d fd ff ff       	call   40a044 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE>
  40a2e7:	90                   	nop
    }
  40a2e8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a2ec:	c9                   	leave
  40a2ed:	c3                   	ret

000000000040a2ee <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>:
      ~basic_format_context() = default;
  40a2ee:	55                   	push   %rbp
  40a2ef:	48 89 e5             	mov    %rsp,%rbp
  40a2f2:	48 83 ec 10          	sub    $0x10,%rsp
  40a2f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a2fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a2fe:	48 83 c0 18          	add    $0x18,%rax
  40a302:	48 89 c7             	mov    %rax,%rdi
  40a305:	e8 58 af ff ff       	call   405262 <_ZNSt8__format16_Optional_localeD1Ev>
  40a30a:	90                   	nop
  40a30b:	c9                   	leave
  40a30c:	c3                   	ret

000000000040a30d <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>:
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
  40a30d:	55                   	push   %rbp
  40a30e:	48 89 e5             	mov    %rsp,%rbp
  40a311:	53                   	push   %rbx
  40a312:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
  40a319:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  40a320:	48 89 f0             	mov    %rsi,%rax
  40a323:	48 89 d6             	mov    %rdx,%rsi
  40a326:	48 89 c0             	mov    %rax,%rax
  40a329:	ba 00 00 00 00       	mov    $0x0,%edx
  40a32e:	48 89 f2             	mov    %rsi,%rdx
  40a331:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
  40a338:	48 89 95 88 fd ff ff 	mov    %rdx,-0x278(%rbp)
  40a33f:	48 89 8d 90 fd ff ff 	mov    %rcx,-0x270(%rbp)
  40a346:	4c 89 85 78 fd ff ff 	mov    %r8,-0x288(%rbp)
      _Iter_sink<_CharT, _Out> __sink(std::move(__out));
  40a34d:	48 8d 85 98 fd ff ff 	lea    -0x268(%rbp),%rax
  40a354:	48 89 c7             	mov    %rax,%rdi
  40a357:	e8 57 f6 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40a35c:	48 8b 00             	mov    (%rax),%rax
  40a35f:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  40a366:	48 c7 45 e8 ff ff ff 	movq   $0xffffffffffffffff,-0x18(%rbp)
  40a36d:	ff
      : _M_out(std::move(__out)), _M_max(__max)
  40a36e:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  40a375:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  40a379:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  40a37d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a381:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40a385:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40a389:	48 89 d6             	mov    %rdx,%rsi
  40a38c:	48 89 c7             	mov    %rax,%rdi
  40a38f:	e8 04 12 00 00       	call   40b598 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  40a394:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  40a398:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a39c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40a3a0:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40a3a7:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  40a3ae:	ba 08 e0 41 00       	mov    $0x41e008,%edx
  40a3b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a3b7:	48 89 10             	mov    %rdx,(%rax)
  40a3ba:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40a3be:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  40a3c5:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40a3cc:	48 89 41 08          	mov    %rax,0x8(%rcx)
  40a3d0:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  40a3d4:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40a3d8:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
  40a3df:	48 89 c7             	mov    %rax,%rdi
  40a3e2:	e8 03 15 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a3e7:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  40a3eb:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  40a3ec:	ba e0 df 41 00       	mov    $0x41dfe0,%edx
  40a3f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a3f5:	48 89 10             	mov    %rdx,(%rax)
      { }
  40a3f8:	90                   	nop
      : _M_out(std::move(__out)), _M_max(__max)
  40a3f9:	b8 70 df 41 00       	mov    $0x41df70,%eax
  40a3fe:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  40a405:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
  40a40c:	48 89 c7             	mov    %rax,%rdi
  40a40f:	e8 9f f5 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40a414:	48 8b 00             	mov    (%rax),%rax
  40a417:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40a41e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a422:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40a429:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  40a430:	00 00 00 00
      { }
  40a434:	90                   	nop
      _Sink_iter<_CharT> __sink_out;
  40a435:	48 c7 85 38 fe ff ff 	movq   $0x0,-0x1c8(%rbp)
  40a43c:	00 00 00 00
	__sink_out = __out; // Already a sink iterator, safe to use post-move.
  40a440:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40a447:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
  40a44e:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40a455:	48 89 c7             	mov    %rax,%rdi
  40a458:	e8 77 b8 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40a45d:	48 83 f8 02          	cmp    $0x2,%rax
  40a461:	75 3d                	jne    40a4a0 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  40a463:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40a46a:	be 00 00 00 00       	mov    $0x0,%esi
  40a46f:	48 89 c7             	mov    %rax,%rdi
  40a472:	e8 6f b8 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40a477:	0f b6 00             	movzbl (%rax),%eax
  40a47a:	3c 7b                	cmp    $0x7b,%al
  40a47c:	75 22                	jne    40a4a0 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  40a47e:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40a485:	be 01 00 00 00       	mov    $0x1,%esi
  40a48a:	48 89 c7             	mov    %rax,%rdi
  40a48d:	e8 54 b8 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40a492:	0f b6 00             	movzbl (%rax),%eax
  40a495:	3c 7d                	cmp    $0x7d,%al
  40a497:	75 07                	jne    40a4a0 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  40a499:	b8 01 00 00 00       	mov    $0x1,%eax
  40a49e:	eb 05                	jmp    40a4a5 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x198>
  40a4a0:	b8 00 00 00 00       	mov    $0x0,%eax
  40a4a5:	84 c0                	test   %al,%al
  40a4a7:	0f 84 23 01 00 00    	je     40a5d0 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2c3>
	    bool __done = false;
  40a4ad:	c6 85 af fd ff ff 00 	movb   $0x0,-0x251(%rbp)
  40a4b4:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  40a4bb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a4bf:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40a4c6:	00
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40a4c7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40a4cb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _Arg_value() : _M_none() { }
  40a4cf:	90                   	nop
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40a4d0:	c6 45 90 00          	movb   $0x0,-0x70(%rbp)
  40a4d4:	90                   	nop
	if (__i < _M_packed_size)
  40a4d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a4d9:	0f b6 00             	movzbl (%rax),%eax
  40a4dc:	83 e0 0f             	and    $0xf,%eax
  40a4df:	0f b6 c0             	movzbl %al,%eax
  40a4e2:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40a4e6:	73 3a                	jae    40a522 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x215>
	    __arg._M_type = _M_type(__i);
  40a4e8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a4ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a4f0:	48 89 d6             	mov    %rdx,%rsi
  40a4f3:	48 89 c7             	mov    %rax,%rdi
  40a4f6:	e8 8f 22 00 00       	call   40c78a <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>
  40a4fb:	88 45 90             	mov    %al,-0x70(%rbp)
	    __arg._M_val = _M_values[__i];
  40a4fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a502:	48 8b 40 08          	mov    0x8(%rax),%rax
  40a506:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a50a:	48 c1 e2 04          	shl    $0x4,%rdx
  40a50e:	48 01 d0             	add    %rdx,%rax
  40a511:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40a515:	48 8b 00             	mov    (%rax),%rax
  40a518:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40a51c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	return __arg;
  40a520:	eb 4a                	jmp    40a56c <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
  40a522:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a526:	0f b6 00             	movzbl (%rax),%eax
  40a529:	83 e0 0f             	and    $0xf,%eax
  40a52c:	84 c0                	test   %al,%al
  40a52e:	75 3c                	jne    40a56c <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
  40a530:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a534:	48 8b 00             	mov    (%rax),%rax
  40a537:	48 c1 e8 04          	shr    $0x4,%rax
  40a53b:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40a53f:	73 2b                	jae    40a56c <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
	  __arg = _M_args[__i];
  40a541:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a545:	48 8b 40 08          	mov    0x8(%rax),%rax
  40a549:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a54d:	48 c1 e2 05          	shl    $0x5,%rdx
  40a551:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  40a555:	48 8b 01             	mov    (%rcx),%rax
  40a558:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  40a55c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40a560:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40a564:	0f b6 41 10          	movzbl 0x10(%rcx),%eax
  40a568:	88 45 90             	mov    %al,-0x70(%rbp)
	return __arg;
  40a56b:	90                   	nop
  40a56c:	90                   	nop
	    std::visit_format_arg([&](auto& __arg) {
  40a56d:	48 8d 85 38 fe ff ff 	lea    -0x1c8(%rbp),%rax
  40a574:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40a578:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
  40a57f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40a583:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  40a587:	48 83 ec 20          	sub    $0x20,%rsp
  40a58b:	48 89 e1             	mov    %rsp,%rcx
  40a58e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40a592:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40a596:	48 89 01             	mov    %rax,(%rcx)
  40a599:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40a59d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40a5a1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40a5a5:	48 89 41 10          	mov    %rax,0x10(%rcx)
  40a5a9:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  40a5ad:	48 89 f7             	mov    %rsi,%rdi
  40a5b0:	e8 04 fd ff ff       	call   40a2b9 <_ZSt16visit_format_argIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_S5_EDcOS6_St16basic_format_argIS8_E>
  40a5b5:	48 83 c4 20          	add    $0x20,%rsp
	    if (__done)
  40a5b9:	0f b6 85 af fd ff ff 	movzbl -0x251(%rbp),%eax
  40a5c0:	84 c0                	test   %al,%al
  40a5c2:	74 0c                	je     40a5d0 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2c3>
		  return __sink_out;
  40a5c4:	48 8b 9d 38 fe ff ff 	mov    -0x1c8(%rbp),%rbx
  40a5cb:	e9 b6 00 00 00       	jmp    40a686 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x379>
		     ? _Context(__args, __sink_out)
  40a5d0:	48 83 bd 78 fd ff ff 	cmpq   $0x0,-0x288(%rbp)
  40a5d7:	00
  40a5d8:	75 26                	jne    40a600 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2f3>
      auto __ctx = __loc == nullptr
  40a5da:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  40a5e1:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  40a5e8:	48 8b 30             	mov    (%rax),%rsi
  40a5eb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40a5ef:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a5f6:	48 89 c7             	mov    %rax,%rdi
  40a5f9:	e8 98 11 00 00       	call   40b796 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_>
  40a5fe:	eb 2e                	jmp    40a62e <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x321>
  40a600:	48 8b bd 78 fd ff ff 	mov    -0x288(%rbp),%rdi
  40a607:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  40a60e:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  40a615:	48 8b 30             	mov    (%rax),%rsi
  40a618:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40a61c:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a623:	49 89 f8             	mov    %rdi,%r8
  40a626:	48 89 c7             	mov    %rax,%rdi
  40a629:	e8 da 11 00 00       	call   40b808 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_RKSt6locale>
      _Formatting_scanner<_Sink_iter<_CharT>, _CharT> __scanner(__ctx, __fmt);
  40a62e:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  40a635:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  40a63c:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
  40a643:	48 8d bd d0 fd ff ff 	lea    -0x230(%rbp),%rdi
  40a64a:	48 89 d1             	mov    %rdx,%rcx
  40a64d:	48 89 c2             	mov    %rax,%rdx
  40a650:	e8 25 12 00 00       	call   40b87a <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEC1ERSt20basic_format_contextIS2_cESt17basic_string_viewIcSt11char_traitsIcEE>
      __scanner._M_scan();
  40a655:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  40a65c:	48 89 c7             	mov    %rax,%rdi
  40a65f:	e8 bc b6 ff ff       	call   405d20 <_ZNSt8__format8_ScannerIcE7_M_scanEv>
	return __ctx.out();
  40a664:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a66b:	48 89 c7             	mov    %rax,%rdi
  40a66e:	e8 55 12 00 00       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40a673:	48 89 c3             	mov    %rax,%rbx
  40a676:	90                   	nop
    }
  40a677:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a67e:	48 89 c7             	mov    %rax,%rdi
  40a681:	e8 68 fc ff ff       	call   40a2ee <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>
  40a686:	48 89 d8             	mov    %rbx,%rax
  40a689:	eb 1d                	jmp    40a6a8 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x39b>
  40a68b:	48 89 c3             	mov    %rax,%rbx
  40a68e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a695:	48 89 c7             	mov    %rax,%rdi
  40a698:	e8 51 fc ff ff       	call   40a2ee <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>
  40a69d:	48 89 d8             	mov    %rbx,%rax
  40a6a0:	48 89 c7             	mov    %rax,%rdi
  40a6a3:	e8 68 9d ff ff       	call   404410 <_Unwind_Resume@plt>
  40a6a8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a6ac:	c9                   	leave
  40a6ad:	c3                   	ret

000000000040a6ae <_ZNKSt4spanIcLm18446744073709551615EE5emptyEv>:
      empty() const noexcept
  40a6ae:	55                   	push   %rbp
  40a6af:	48 89 e5             	mov    %rsp,%rbp
  40a6b2:	48 83 ec 10          	sub    $0x10,%rsp
  40a6b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size() == 0; }
  40a6ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a6be:	48 89 c7             	mov    %rax,%rdi
  40a6c1:	e8 2c ae ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40a6c6:	48 85 c0             	test   %rax,%rax
  40a6c9:	0f 94 c0             	sete   %al
  40a6cc:	c9                   	leave
  40a6cd:	c3                   	ret

000000000040a6ce <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>:
      _M_overflow() override
  40a6ce:	55                   	push   %rbp
  40a6cf:	48 89 e5             	mov    %rsp,%rbp
  40a6d2:	41 54                	push   %r12
  40a6d4:	53                   	push   %rbx
  40a6d5:	48 83 ec 40          	sub    $0x40,%rsp
  40a6d9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __s = this->_M_used();
  40a6dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a6e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40a6e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a6e9:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40a6ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a6f1:	48 83 c0 08          	add    $0x8,%rax
  40a6f5:	48 89 c7             	mov    %rax,%rdi
  40a6f8:	e8 ed 11 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a6fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40a701:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a705:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a709:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a70d:	48 89 c6             	mov    %rax,%rsi
  40a710:	48 89 d7             	mov    %rdx,%rdi
  40a713:	e8 f7 11 00 00       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40a718:	48 89 c6             	mov    %rax,%rsi
  40a71b:	48 89 df             	mov    %rbx,%rdi
  40a71e:	e8 2b 12 00 00       	call   40b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40a723:	90                   	nop
	auto __s = this->_M_used();
  40a724:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40a728:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__s.empty()) [[unlikely]]
  40a72c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a730:	48 89 c7             	mov    %rax,%rdi
  40a733:	e8 76 ff ff ff       	call   40a6ae <_ZNKSt4spanIcLm18446744073709551615EE5emptyEv>
  40a738:	84 c0                	test   %al,%al
  40a73a:	75 56                	jne    40a792 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv+0xc4>
	  _M_seq.append(__s.data(), __s.size());
  40a73c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a740:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  40a747:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a74b:	48 89 c7             	mov    %rax,%rdi
  40a74e:	e8 9f ad ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40a753:	49 89 c4             	mov    %rax,%r12
  40a756:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a75a:	48 89 c7             	mov    %rax,%rdi
  40a75d:	e8 7e ad ff ff       	call   4054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40a762:	4c 89 e2             	mov    %r12,%rdx
  40a765:	48 89 c6             	mov    %rax,%rsi
  40a768:	48 89 df             	mov    %rbx,%rdi
  40a76b:	e8 42 12 00 00       	call   40b9b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>
	this->_M_rewind();
  40a770:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a774:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { _M_next = _M_span.begin(); }
  40a778:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a77c:	48 83 c0 08          	add    $0x8,%rax
  40a780:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  40a784:	48 89 c7             	mov    %rax,%rdi
  40a787:	e8 5e 11 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a78c:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40a790:	eb 01                	jmp    40a793 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv+0xc5>
	  return; // Nothing in the buffer to transfer to _M_seq.
  40a792:	90                   	nop
      }
  40a793:	48 83 c4 40          	add    $0x40,%rsp
  40a797:	5b                   	pop    %rbx
  40a798:	41 5c                	pop    %r12
  40a79a:	5d                   	pop    %rbp
  40a79b:	c3                   	ret

000000000040a79c <_ZSt12__to_addressIcEPT_S1_>:
    __to_address(_Tp* __ptr) noexcept
  40a79c:	55                   	push   %rbp
  40a79d:	48 89 e5             	mov    %rsp,%rbp
  40a7a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __ptr;
  40a7a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40a7a8:	5d                   	pop    %rbp
  40a7a9:	c3                   	ret

000000000040a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  This is a pointer to the character sequence held by the string.
       *  Modifying the characters in the sequence is allowed.
      */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      _CharT*
      data() noexcept
  40a7aa:	55                   	push   %rbp
  40a7ab:	48 89 e5             	mov    %rsp,%rbp
  40a7ae:	48 83 ec 10          	sub    $0x10,%rsp
  40a7b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
  40a7b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a7ba:	48 89 c7             	mov    %rax,%rdi
  40a7bd:	e8 12 cd ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40a7c2:	c9                   	leave
  40a7c3:	c3                   	ret

000000000040a7c4 <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>:
	span(_Range&& __range)
  40a7c4:	55                   	push   %rbp
  40a7c5:	48 89 e5             	mov    %rsp,%rbp
  40a7c8:	53                   	push   %rbx
  40a7c9:	48 83 ec 18          	sub    $0x18,%rsp
  40a7cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a7d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: span(ranges::data(__range), ranges::size(__range))
  40a7d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a7d9:	48 89 c6             	mov    %rax,%rsi
  40a7dc:	bf 06 b0 41 00       	mov    $0x41b006,%edi
  40a7e1:	e8 f0 d9 ff ff       	call   4081d6 <_ZNKSt6ranges8__access5_SizeclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>
  40a7e6:	48 89 c3             	mov    %rax,%rbx
  40a7e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a7ed:	48 89 c6             	mov    %rax,%rsi
  40a7f0:	bf 08 b0 41 00       	mov    $0x41b008,%edi
  40a7f5:	e8 be d9 ff ff       	call   4081b8 <_ZNKSt6ranges8__access5_DataclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>
  40a7fa:	48 89 c1             	mov    %rax,%rcx
  40a7fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a801:	48 89 da             	mov    %rbx,%rdx
  40a804:	48 89 ce             	mov    %rcx,%rsi
  40a807:	48 89 c7             	mov    %rax,%rdi
  40a80a:	e8 2d 0d 00 00       	call   40b53c <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
	}
  40a80f:	90                   	nop
  40a810:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a814:	c9                   	leave
  40a815:	c3                   	ret

000000000040a816 <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
  40a816:	55                   	push   %rbp
  40a817:	48 89 e5             	mov    %rsp,%rbp
  40a81a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a81e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__b < __a)
  40a822:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a826:	48 8b 10             	mov    (%rax),%rdx
  40a829:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a82d:	48 8b 00             	mov    (%rax),%rax
  40a830:	48 39 c2             	cmp    %rax,%rdx
  40a833:	73 06                	jae    40a83b <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
  40a835:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a839:	eb 04                	jmp    40a83f <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
  40a83b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40a83f:	5d                   	pop    %rbp
  40a840:	c3                   	ret

000000000040a841 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a841:	55                   	push   %rbp
  40a842:	48 89 e5             	mov    %rsp,%rbp
  40a845:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a849:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a84d:	5d                   	pop    %rbp
  40a84e:	c3                   	ret

000000000040a84f <_ZSt7printlnIJRA4_KcEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS7_>:
    println(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40a84f:	55                   	push   %rbp
  40a850:	48 89 e5             	mov    %rsp,%rbp
  40a853:	41 55                	push   %r13
  40a855:	41 54                	push   %r12
  40a857:	53                   	push   %rbx
  40a858:	48 83 ec 48          	sub    $0x48,%rsp
  40a85c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40a860:	48 89 f0             	mov    %rsi,%rax
  40a863:	48 89 d6             	mov    %rdx,%rsi
  40a866:	48 89 c0             	mov    %rax,%rax
  40a869:	ba 00 00 00 00       	mov    $0x0,%edx
  40a86e:	48 89 f2             	mov    %rsi,%rdx
  40a871:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40a875:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40a879:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40a87d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a881:	48 89 c7             	mov    %rax,%rdi
  40a884:	e8 b8 ff ff ff       	call   40a841 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
  40a889:	48 89 c1             	mov    %rax,%rcx
  40a88c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a890:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40a894:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40a898:	48 89 c7             	mov    %rax,%rdi
  40a89b:	e8 eb 11 00 00       	call   40ba8b <_ZSt6formatIJRA4_KcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>
      std::print(__stream, "{}\n",
  40a8a0:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  40a8a6:	41 bd 33 b2 41 00    	mov    $0x41b233,%r13d
  40a8ac:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40a8b0:	4c 89 e6             	mov    %r12,%rsi
  40a8b3:	4c 89 ef             	mov    %r13,%rdi
  40a8b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a8ba:	48 89 d1             	mov    %rdx,%rcx
  40a8bd:	48 89 fa             	mov    %rdi,%rdx
  40a8c0:	48 89 c7             	mov    %rax,%rdi
  40a8c3:	e8 82 12 00 00       	call   40bb4a <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40a8c8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a8cc:	48 89 c7             	mov    %rax,%rdi
  40a8cf:	e8 5e cc ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  40a8d4:	eb 1a                	jmp    40a8f0 <_ZSt7printlnIJRA4_KcEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS7_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40a8d6:	48 89 c3             	mov    %rax,%rbx
  40a8d9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a8dd:	48 89 c7             	mov    %rax,%rdi
  40a8e0:	e8 4d cc ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40a8e5:	48 89 d8             	mov    %rbx,%rax
  40a8e8:	48 89 c7             	mov    %rax,%rdi
  40a8eb:	e8 20 9b ff ff       	call   404410 <_Unwind_Resume@plt>
    }
  40a8f0:	48 83 c4 48          	add    $0x48,%rsp
  40a8f4:	5b                   	pop    %rbx
  40a8f5:	41 5c                	pop    %r12
  40a8f7:	41 5d                	pop    %r13
  40a8f9:	5d                   	pop    %rbp
  40a8fa:	c3                   	ret

000000000040a8fb <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a8fb:	55                   	push   %rbp
  40a8fc:	48 89 e5             	mov    %rsp,%rbp
  40a8ff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a903:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a907:	5d                   	pop    %rbp
  40a908:	c3                   	ret
  40a909:	90                   	nop

000000000040a90a <_ZNSt4pairItPKcEC1IiS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40a90a:	55                   	push   %rbp
  40a90b:	48 89 e5             	mov    %rsp,%rbp
  40a90e:	48 83 ec 20          	sub    $0x20,%rsp
  40a912:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a916:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a91a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40a91e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a922:	48 89 c7             	mov    %rax,%rdi
  40a925:	e8 d1 ff ff ff       	call   40a8fb <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  40a92a:	8b 00                	mov    (%rax),%eax
  40a92c:	89 c2                	mov    %eax,%edx
  40a92e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a932:	66 89 10             	mov    %dx,(%rax)
  40a935:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a939:	48 89 c7             	mov    %rax,%rdi
  40a93c:	e8 85 ba ff ff       	call   4063c6 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
  40a941:	48 8b 10             	mov    (%rax),%rdx
  40a944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a948:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
  40a94c:	90                   	nop
  40a94d:	c9                   	leave
  40a94e:	c3                   	ret
  40a94f:	90                   	nop

000000000040a950 <_ZNSt4pairItPKcEC1ERKtRKS1_>:
      pair(const _T1& __x, const _T2& __y)
  40a950:	55                   	push   %rbp
  40a951:	48 89 e5             	mov    %rsp,%rbp
  40a954:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a958:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a95c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : first(__x), second(__y)
  40a960:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a964:	0f b7 10             	movzwl (%rax),%edx
  40a967:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a96b:	66 89 10             	mov    %dx,(%rax)
  40a96e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a972:	48 8b 10             	mov    (%rax),%rdx
  40a975:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a979:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  40a97d:	90                   	nop
  40a97e:	5d                   	pop    %rbp
  40a97f:	c3                   	ret

000000000040a980 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>:
    __parse_integer(const _CharT* __first, const _CharT* __last)
  40a980:	55                   	push   %rbp
  40a981:	48 89 e5             	mov    %rsp,%rbp
  40a984:	48 83 ec 60          	sub    $0x60,%rsp
  40a988:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40a98c:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
      if (__first == __last)
  40a990:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a994:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
	  const auto __start = __first;
  40a998:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a99c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  unsigned short __val = 0;
  40a9a0:	66 c7 45 be 00 00    	movw   $0x0,-0x42(%rbp)
	  if (__detail::__from_chars_alnum<true>(__first, __last, __val, 10)
  40a9a6:	48 8d 55 be          	lea    -0x42(%rbp),%rdx
  40a9aa:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40a9ae:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  40a9b2:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40a9b7:	48 89 c7             	mov    %rax,%rdi
  40a9ba:	e8 56 12 00 00       	call   40bc15 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i>
		&& __first != __start) [[likely]]
  40a9bf:	84 c0                	test   %al,%al
  40a9c1:	74 11                	je     40a9d4 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x54>
  40a9c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a9c7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40a9cb:	74 07                	je     40a9d4 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x54>
  40a9cd:	b8 01 00 00 00       	mov    $0x1,%eax
  40a9d2:	eb 05                	jmp    40a9d9 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x59>
  40a9d4:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (__detail::__from_chars_alnum<true>(__first, __last, __val, 10)
  40a9d9:	84 c0                	test   %al,%al
  40a9db:	74 21                	je     40a9fe <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x7e>
	    return {__val, __first};
  40a9dd:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
  40a9e1:	48 8d 4d be          	lea    -0x42(%rbp),%rcx
  40a9e5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a9e9:	48 89 ce             	mov    %rcx,%rsi
  40a9ec:	48 89 c7             	mov    %rax,%rdi
  40a9ef:	e8 40 13 00 00       	call   40bd34 <_ZNSt4pairItPKcEC1IRtRS1_EEOT_OT0_>
  40a9f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40a9f8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a9fc:	eb 2e                	jmp    40aa2c <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0xac>
      return {0, nullptr};
  40a9fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40aa05:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40aa0c:	00
  40aa0d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  40aa11:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
  40aa15:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40aa19:	48 89 ce             	mov    %rcx,%rsi
  40aa1c:	48 89 c7             	mov    %rax,%rdi
  40aa1f:	e8 1c 00 00 00       	call   40aa40 <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>
  40aa24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40aa28:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  40aa2c:	89 c1                	mov    %eax,%ecx
  40aa2e:	89 c8                	mov    %ecx,%eax
  40aa30:	c9                   	leave
  40aa31:	c3                   	ret

000000000040aa32 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40aa32:	55                   	push   %rbp
  40aa33:	48 89 e5             	mov    %rsp,%rbp
  40aa36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40aa3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa3e:	5d                   	pop    %rbp
  40aa3f:	c3                   	ret

000000000040aa40 <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40aa40:	55                   	push   %rbp
  40aa41:	48 89 e5             	mov    %rsp,%rbp
  40aa44:	48 83 ec 20          	sub    $0x20,%rsp
  40aa48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40aa4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40aa50:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40aa54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40aa58:	48 89 c7             	mov    %rax,%rdi
  40aa5b:	e8 9b fe ff ff       	call   40a8fb <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  40aa60:	8b 00                	mov    (%rax),%eax
  40aa62:	89 c2                	mov    %eax,%edx
  40aa64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa68:	66 89 10             	mov    %dx,(%rax)
  40aa6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aa6f:	48 89 c7             	mov    %rax,%rdi
  40aa72:	e8 bb ff ff ff       	call   40aa32 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
  40aa77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa7b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40aa82:	00
	{ }
  40aa83:	90                   	nop
  40aa84:	c9                   	leave
  40aa85:	c3                   	ret

000000000040aa86 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5beginEv>:
      begin() const requires copyable<_It>
  40aa86:	55                   	push   %rbp
  40aa87:	48 89 e5             	mov    %rsp,%rbp
  40aa8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_begin; }
  40aa8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa92:	48 8b 00             	mov    (%rax),%rax
  40aa95:	5d                   	pop    %rbp
  40aa96:	c3                   	ret
  40aa97:	90                   	nop

000000000040aa98 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE3endEv>:
      constexpr _Sent end() const { return _M_end; }
  40aa98:	55                   	push   %rbp
  40aa99:	48 89 e5             	mov    %rsp,%rbp
  40aa9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40aaa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aaa4:	48 8b 40 08          	mov    0x8(%rax),%rax
  40aaa8:	5d                   	pop    %rbp
  40aaa9:	c3                   	ret

000000000040aaaa <_ZNSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EEC1IS2_EET_S2_>:
      subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s)
  40aaaa:	55                   	push   %rbp
  40aaab:	48 89 e5             	mov    %rsp,%rbp
  40aaae:	48 83 ec 30          	sub    $0x30,%rsp
  40aab2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40aab6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40aaba:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_begin(std::move(__i)), _M_end(__s)
  40aabe:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40aac2:	48 89 c7             	mov    %rax,%rdi
  40aac5:	e8 ae 12 00 00       	call   40bd78 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
  40aaca:	48 8b 10             	mov    (%rax),%rdx
  40aacd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aad1:	48 89 10             	mov    %rdx,(%rax)
  40aad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aad8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40aadc:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40aae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aae4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40aae8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40aaef:	00
	  constexpr _Size(_Tp = {}) { }
  40aaf0:	90                   	nop
      { }
  40aaf1:	90                   	nop
  40aaf2:	c9                   	leave
  40aaf3:	c3                   	ret

000000000040aaf4 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEEC1EOS6_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  40aaf4:	55                   	push   %rbp
  40aaf5:	48 89 e5             	mov    %rsp,%rbp
  40aaf8:	48 83 ec 10          	sub    $0x10,%rsp
  40aafc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ab00:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ab04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ab08:	48 89 c7             	mov    %rax,%rdi
  40ab0b:	e8 76 12 00 00       	call   40bd86 <_ZSt7forwardINSt6ranges8subrangeIPKcS3_LNS0_13subrange_kindE1EEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40ab10:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40ab14:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40ab18:	48 8b 00             	mov    (%rax),%rax
  40ab1b:	48 89 01             	mov    %rax,(%rcx)
  40ab1e:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40ab22:	90                   	nop
  40ab23:	c9                   	leave
  40ab24:	c3                   	ret
  40ab25:	90                   	nop

000000000040ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() { return _M_first_and_curr._M_curr; }
  40ab26:	55                   	push   %rbp
  40ab27:	48 89 e5             	mov    %rsp,%rbp
  40ab2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ab2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab32:	48 83 c0 10          	add    $0x10,%rax
  40ab36:	5d                   	pop    %rbp
  40ab37:	c3                   	ret

000000000040ab38 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>:
      _Utf_iterator(_Iter __first, _Iter __it, _Sent __last)
  40ab38:	55                   	push   %rbp
  40ab39:	48 89 e5             	mov    %rsp,%rbp
  40ab3c:	48 83 ec 20          	sub    $0x20,%rsp
  40ab40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ab44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ab48:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ab4c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_first_and_curr{__first, __it}, _M_last(__last)
  40ab50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab54:	48 8d 48 08          	lea    0x8(%rax),%rcx
  40ab58:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ab5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ab60:	48 89 c6             	mov    %rax,%rsi
  40ab63:	48 89 cf             	mov    %rcx,%rdi
  40ab66:	e8 29 12 00 00       	call   40bd94 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>
  40ab6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab6f:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  40ab73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab77:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  40ab7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab7f:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
  40ab83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab87:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab8b:	48 89 50 20          	mov    %rdx,0x20(%rax)
	if (_M_curr() != _M_last)
  40ab8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab93:	48 89 c7             	mov    %rax,%rdi
  40ab96:	e8 8b ff ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40ab9b:	48 8b 10             	mov    (%rax),%rdx
  40ab9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aba2:	48 8b 40 20          	mov    0x20(%rax),%rax
  40aba6:	48 39 c2             	cmp    %rax,%rdx
  40aba9:	0f 95 c0             	setne  %al
  40abac:	84 c0                	test   %al,%al
  40abae:	74 0e                	je     40abbe <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_+0x86>
	  _M_read();
  40abb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abb4:	48 89 c7             	mov    %rax,%rdi
  40abb7:	e8 02 12 00 00       	call   40bdbe <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>
      }
  40abbc:	eb 0a                	jmp    40abc8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_+0x90>
	  _M_buf = {};
  40abbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abc2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      }
  40abc8:	90                   	nop
  40abc9:	c9                   	leave
  40abca:	c3                   	ret
  40abcb:	90                   	nop

000000000040abcc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEi>:
      operator++(int)
  40abcc:	55                   	push   %rbp
  40abcd:	48 89 e5             	mov    %rsp,%rbp
  40abd0:	53                   	push   %rbx
  40abd1:	48 83 ec 28          	sub    $0x28,%rsp
  40abd5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40abd9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40abdd:	89 55 dc             	mov    %edx,-0x24(%rbp)
	auto __tmp = *this;
  40abe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40abe4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40abe8:	48 8b 0a             	mov    (%rdx),%rcx
  40abeb:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
  40abef:	48 89 08             	mov    %rcx,(%rax)
  40abf2:	48 89 58 08          	mov    %rbx,0x8(%rax)
  40abf6:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  40abfa:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
  40abfe:	48 89 48 10          	mov    %rcx,0x10(%rax)
  40ac02:	48 89 58 18          	mov    %rbx,0x18(%rax)
  40ac06:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  40ac0a:	48 89 50 20          	mov    %rdx,0x20(%rax)
	++*this;
  40ac0e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ac12:	48 89 c7             	mov    %rax,%rdi
  40ac15:	e8 c0 11 00 00       	call   40bdda <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
	return __tmp;
  40ac1a:	90                   	nop
      }
  40ac1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ac1f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ac23:	c9                   	leave
  40ac24:	c3                   	ret
  40ac25:	90                   	nop

000000000040ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>:
      operator*() const { return _M_buf[_M_buf_index]; }
  40ac26:	55                   	push   %rbp
  40ac27:	48 89 e5             	mov    %rsp,%rbp
  40ac2a:	48 83 ec 10          	sub    $0x10,%rsp
  40ac2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ac32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40ac3a:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
  40ac3e:	0f b6 d2             	movzbl %dl,%edx
  40ac41:	48 89 d6             	mov    %rdx,%rsi
  40ac44:	48 89 c7             	mov    %rax,%rdi
  40ac47:	e8 9a 12 00 00       	call   40bee6 <_ZNKSt5arrayIDiLm1EEixEm>
  40ac4c:	8b 00                	mov    (%rax),%eax
  40ac4e:	c9                   	leave
  40ac4f:	c3                   	ret

000000000040ac50 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>:
      base() const requires forward_iterator<_Iter>
  40ac50:	55                   	push   %rbp
  40ac51:	48 89 e5             	mov    %rsp,%rbp
  40ac54:	48 83 ec 10          	sub    $0x10,%rsp
  40ac58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_curr(); }
  40ac5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac60:	48 89 c7             	mov    %rax,%rdi
  40ac63:	e8 a0 12 00 00       	call   40bf08 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40ac68:	c9                   	leave
  40ac69:	c3                   	ret

000000000040ac6a <_ZNSt8__format5_SpecIcE8_S_alignEc>:
      _S_align(_CharT __c) noexcept
  40ac6a:	55                   	push   %rbp
  40ac6b:	48 89 e5             	mov    %rsp,%rbp
  40ac6e:	89 f8                	mov    %edi,%eax
  40ac70:	88 45 fc             	mov    %al,-0x4(%rbp)
	switch (__c)
  40ac73:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  40ac77:	83 f8 5e             	cmp    $0x5e,%eax
  40ac7a:	74 1f                	je     40ac9b <_ZNSt8__format5_SpecIcE8_S_alignEc+0x31>
  40ac7c:	83 f8 5e             	cmp    $0x5e,%eax
  40ac7f:	7f 21                	jg     40aca2 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x38>
  40ac81:	83 f8 3c             	cmp    $0x3c,%eax
  40ac84:	74 07                	je     40ac8d <_ZNSt8__format5_SpecIcE8_S_alignEc+0x23>
  40ac86:	83 f8 3e             	cmp    $0x3e,%eax
  40ac89:	74 09                	je     40ac94 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x2a>
  40ac8b:	eb 15                	jmp    40aca2 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x38>
	  case '<': return _Align_left;
  40ac8d:	b8 01 00 00 00       	mov    $0x1,%eax
  40ac92:	eb 13                	jmp    40aca7 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  case '>': return _Align_right;
  40ac94:	b8 02 00 00 00       	mov    $0x2,%eax
  40ac99:	eb 0c                	jmp    40aca7 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  case '^': return _Align_centre;
  40ac9b:	b8 03 00 00 00       	mov    $0x3,%eax
  40aca0:	eb 05                	jmp    40aca7 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  default: return _Align_default;
  40aca2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40aca7:	5d                   	pop    %rbp
  40aca8:	c3                   	ret

000000000040aca9 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>:
      _S_parse_width_or_precision(iterator __first, iterator __last,
  40aca9:	55                   	push   %rbp
  40acaa:	48 89 e5             	mov    %rsp,%rbp
  40acad:	48 83 ec 70          	sub    $0x70,%rsp
  40acb1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40acb5:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40acb9:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40acbd:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40acc1:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
	if (__format::__is_digit(*__first))
  40acc5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40acc9:	0f b6 00             	movzbl (%rax),%eax
  40accc:	0f be c0             	movsbl %al,%eax
  40accf:	89 c7                	mov    %eax,%edi
  40acd1:	e8 1a a5 ff ff       	call   4051f0 <_ZNSt8__format10__is_digitEc>
  40acd6:	84 c0                	test   %al,%al
  40acd8:	74 73                	je     40ad4d <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xa4>
	    auto [__v, __ptr] = __format::__parse_integer(__first, __last);
  40acda:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40acde:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ace2:	48 89 d6             	mov    %rdx,%rsi
  40ace5:	48 89 c7             	mov    %rax,%rdi
  40ace8:	e8 93 fc ff ff       	call   40a980 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>
  40aced:	89 c1                	mov    %eax,%ecx
  40acef:	48 89 d0             	mov    %rdx,%rax
  40acf2:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  40acf5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40acf9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40acfd:	48 89 c7             	mov    %rax,%rdi
  40ad00:	e8 29 b6 ff ff       	call   40632e <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40ad05:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40ad09:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40ad0d:	48 89 c7             	mov    %rax,%rdi
  40ad10:	e8 71 b6 ff ff       	call   406386 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40ad15:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    if (!__ptr)
  40ad19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ad1d:	48 8b 00             	mov    (%rax),%rax
  40ad20:	48 85 c0             	test   %rax,%rax
  40ad23:	75 0a                	jne    40ad2f <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x86>
	      __throw_format_error("format error: invalid width or precision "
  40ad25:	bf 48 b2 41 00       	mov    $0x41b248,%edi
  40ad2a:	e8 28 a4 ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	    __first = __ptr;
  40ad2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ad33:	48 8b 00             	mov    (%rax),%rax
  40ad36:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	    __val = __v;
  40ad3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ad3e:	0f b7 10             	movzwl (%rax),%edx
  40ad41:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ad45:	66 89 10             	mov    %dx,(%rax)
  40ad48:	e9 f1 00 00 00       	jmp    40ae3e <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x195>
	else if (*__first == '{')
  40ad4d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ad51:	0f b6 00             	movzbl (%rax),%eax
  40ad54:	3c 7b                	cmp    $0x7b,%al
  40ad56:	0f 85 e2 00 00 00    	jne    40ae3e <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x195>
	    __arg_id = true;
  40ad5c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ad60:	c6 00 01             	movb   $0x1,(%rax)
	    ++__first;
  40ad63:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
	    if (__first == __last)
  40ad68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ad6c:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40ad70:	75 05                	jne    40ad77 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xce>
	      __format::__unmatched_left_brace_in_format_string();
  40ad72:	e8 33 a4 ff ff       	call   4051aa <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
	    if (*__first == '}')
  40ad77:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ad7b:	0f b6 00             	movzbl (%rax),%eax
  40ad7e:	3c 7d                	cmp    $0x7d,%al
  40ad80:	75 1a                	jne    40ad9c <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xf3>
	      __val = __pc.next_arg_id();
  40ad82:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ad86:	48 89 c7             	mov    %rax,%rdi
  40ad89:	e8 52 b8 ff ff       	call   4065e0 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  40ad8e:	89 c2                	mov    %eax,%edx
  40ad90:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ad94:	66 89 10             	mov    %dx,(%rax)
  40ad97:	e9 9d 00 00 00       	jmp    40ae39 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x190>
		auto [__v, __ptr] = __format::__parse_arg_id(__first, __last);
  40ad9c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40ada0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ada4:	48 89 d6             	mov    %rdx,%rsi
  40ada7:	48 89 c7             	mov    %rax,%rdi
  40adaa:	e8 e1 d5 ff ff       	call   408390 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>
  40adaf:	89 c1                	mov    %eax,%ecx
  40adb1:	48 89 d0             	mov    %rdx,%rax
  40adb4:	89 4d c0             	mov    %ecx,-0x40(%rbp)
  40adb7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40adbb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40adbf:	48 89 c7             	mov    %rax,%rdi
  40adc2:	e8 67 b5 ff ff       	call   40632e <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40adc7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40adcb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40adcf:	48 89 c7             	mov    %rax,%rdi
  40add2:	e8 af b5 ff ff       	call   406386 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40add7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
  40addb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40addf:	48 8b 00             	mov    (%rax),%rax
  40ade2:	48 85 c0             	test   %rax,%rax
  40ade5:	74 1b                	je     40ae02 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x159>
  40ade7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40adeb:	48 8b 00             	mov    (%rax),%rax
  40adee:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  40adf2:	74 0e                	je     40ae02 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x159>
  40adf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40adf8:	48 8b 00             	mov    (%rax),%rax
  40adfb:	0f b6 00             	movzbl (%rax),%eax
  40adfe:	3c 7d                	cmp    $0x7d,%al
  40ae00:	74 05                	je     40ae07 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x15e>
		  __format::__invalid_arg_id_in_format_string();
  40ae02:	e8 cd a3 ff ff       	call   4051d4 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
		__first = __ptr;
  40ae07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ae0b:	48 8b 00             	mov    (%rax),%rax
  40ae0e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		__pc.check_arg_id(__v);
  40ae12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae16:	0f b7 00             	movzwl (%rax),%eax
  40ae19:	0f b7 d0             	movzwl %ax,%edx
  40ae1c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ae20:	48 89 d6             	mov    %rdx,%rsi
  40ae23:	48 89 c7             	mov    %rax,%rdi
  40ae26:	e8 85 d6 ff ff       	call   4084b0 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>
		__val = __v;
  40ae2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae2f:	0f b7 10             	movzwl (%rax),%edx
  40ae32:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ae36:	66 89 10             	mov    %dx,(%rax)
	    ++__first; // past the '}'
  40ae39:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
	return __first;
  40ae3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
      }
  40ae42:	c9                   	leave
  40ae43:	c3                   	ret

000000000040ae44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40ae44:	55                   	push   %rbp
  40ae45:	48 89 e5             	mov    %rsp,%rbp
  40ae48:	53                   	push   %rbx
  40ae49:	48 83 ec 28          	sub    $0x28,%rsp
  40ae4d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ae51:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40ae55:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__capacity > max_size())
  40ae59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ae5d:	48 8b 18             	mov    (%rax),%rbx
  40ae60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ae64:	48 89 c7             	mov    %rax,%rdi
  40ae67:	e8 bc 10 00 00       	call   40bf28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40ae6c:	48 39 d8             	cmp    %rbx,%rax
  40ae6f:	0f 92 c0             	setb   %al
  40ae72:	84 c0                	test   %al,%al
  40ae74:	74 0a                	je     40ae80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x3c>
	std::__throw_length_error(__N("basic_string::_M_create"));
  40ae76:	bf 80 b2 41 00       	mov    $0x41b280,%edi
  40ae7b:	e8 b0 92 ff ff       	call   404130 <_ZSt20__throw_length_errorPKc@plt>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
  40ae80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ae84:	48 8b 00             	mov    (%rax),%rax
  40ae87:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40ae8b:	73 52                	jae    40aedf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
  40ae8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ae91:	48 8b 10             	mov    (%rax),%rdx
  40ae94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ae98:	48 01 c0             	add    %rax,%rax
  40ae9b:	48 39 c2             	cmp    %rax,%rdx
  40ae9e:	73 3f                	jae    40aedf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
	  __capacity = 2 * __old_capacity;
  40aea0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40aea4:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40aea8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aeac:	48 89 10             	mov    %rdx,(%rax)
	  if (__capacity > max_size())
  40aeaf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aeb3:	48 8b 18             	mov    (%rax),%rbx
  40aeb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aeba:	48 89 c7             	mov    %rax,%rdi
  40aebd:	e8 66 10 00 00       	call   40bf28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40aec2:	48 39 d8             	cmp    %rbx,%rax
  40aec5:	0f 92 c0             	setb   %al
  40aec8:	84 c0                	test   %al,%al
  40aeca:	74 13                	je     40aedf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
	    __capacity = max_size();
  40aecc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aed0:	48 89 c7             	mov    %rax,%rdi
  40aed3:	e8 50 10 00 00       	call   40bf28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40aed8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aedc:	48 89 02             	mov    %rax,(%rdx)
      return _S_allocate(_M_get_allocator(), __capacity + 1);
  40aedf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aee3:	48 8b 00             	mov    (%rax),%rax
  40aee6:	48 8d 58 01          	lea    0x1(%rax),%rbx
  40aeea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aeee:	48 89 c7             	mov    %rax,%rdi
  40aef1:	e8 0a c9 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40aef6:	48 89 de             	mov    %rbx,%rsi
  40aef9:	48 89 c7             	mov    %rax,%rdi
  40aefc:	e8 53 10 00 00       	call   40bf54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
    }
  40af01:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40af05:	c9                   	leave
  40af06:	c3                   	ret

000000000040af07 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
  40af07:	55                   	push   %rbp
  40af08:	48 89 e5             	mov    %rsp,%rbp
  40af0b:	48 83 ec 20          	sub    $0x20,%rsp
  40af0f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40af13:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40af17:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
  40af1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40af1f:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40af23:	48 89 c2             	mov    %rax,%rdx
  40af26:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40af2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40af2e:	48 89 ce             	mov    %rcx,%rsi
  40af31:	48 89 c7             	mov    %rax,%rdi
  40af34:	e8 9f 10 00 00       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40af39:	90                   	nop
  40af3a:	c9                   	leave
  40af3b:	c3                   	ret

000000000040af3c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40af3c:	55                   	push   %rbp
  40af3d:	48 89 e5             	mov    %rsp,%rbp
  40af40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40af44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40af48:	5d                   	pop    %rbp
  40af49:	c3                   	ret

000000000040af4a <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>:
    println(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40af4a:	55                   	push   %rbp
  40af4b:	48 89 e5             	mov    %rsp,%rbp
  40af4e:	41 55                	push   %r13
  40af50:	41 54                	push   %r12
  40af52:	53                   	push   %rbx
  40af53:	48 83 ec 48          	sub    $0x48,%rsp
  40af57:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40af5b:	48 89 f0             	mov    %rsi,%rax
  40af5e:	48 89 d6             	mov    %rdx,%rsi
  40af61:	48 89 c0             	mov    %rax,%rax
  40af64:	ba 00 00 00 00       	mov    $0x0,%edx
  40af69:	48 89 f2             	mov    %rsi,%rdx
  40af6c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40af70:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40af74:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40af78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40af7c:	48 89 c7             	mov    %rax,%rdi
  40af7f:	e8 b8 ff ff ff       	call   40af3c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
  40af84:	48 89 c1             	mov    %rax,%rcx
  40af87:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40af8b:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40af8f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40af93:	48 89 c7             	mov    %rax,%rdi
  40af96:	e8 87 10 00 00       	call   40c022 <_ZSt6formatIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES5_St19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>
      std::print(__stream, "{}\n",
  40af9b:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  40afa1:	41 bd 33 b2 41 00    	mov    $0x41b233,%r13d
  40afa7:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40afab:	4c 89 e6             	mov    %r12,%rsi
  40afae:	4c 89 ef             	mov    %r13,%rdi
  40afb1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40afb5:	48 89 d1             	mov    %rdx,%rcx
  40afb8:	48 89 fa             	mov    %rdi,%rdx
  40afbb:	48 89 c7             	mov    %rax,%rdi
  40afbe:	e8 87 0b 00 00       	call   40bb4a <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40afc3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40afc7:	48 89 c7             	mov    %rax,%rdi
  40afca:	e8 63 c5 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  40afcf:	eb 1a                	jmp    40afeb <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40afd1:	48 89 c3             	mov    %rax,%rbx
  40afd4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40afd8:	48 89 c7             	mov    %rax,%rdi
  40afdb:	e8 52 c5 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40afe0:	48 89 d8             	mov    %rbx,%rax
  40afe3:	48 89 c7             	mov    %rax,%rdi
  40afe6:	e8 25 94 ff ff       	call   404410 <_Unwind_Resume@plt>
    }
  40afeb:	48 83 c4 48          	add    $0x48,%rsp
  40afef:	5b                   	pop    %rbx
  40aff0:	41 5c                	pop    %r12
  40aff2:	41 5d                	pop    %r13
  40aff4:	5d                   	pop    %rbp
  40aff5:	c3                   	ret

000000000040aff6 <_ZSt6formatIJiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS8_>:
#endif

  template<typename... _Args>
    [[nodiscard]]
    inline string
    format(format_string<_Args...> __fmt, _Args&&... __args)
  40aff6:	55                   	push   %rbp
  40aff7:	48 89 e5             	mov    %rsp,%rbp
  40affa:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40affe:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40b002:	48 89 f0             	mov    %rsi,%rax
  40b005:	48 89 d6             	mov    %rdx,%rsi
  40b008:	48 89 c0             	mov    %rax,%rax
  40b00b:	ba 00 00 00 00       	mov    $0x0,%edx
  40b010:	48 89 f2             	mov    %rsi,%rdx
  40b013:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40b017:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40b01b:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40b01f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40b023:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40b027:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b02b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40b02f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b033:	48 89 c7             	mov    %rax,%rdi
  40b036:	e8 84 1e 00 00       	call   40cebf <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJiEE11_S_make_eltIiEENS_10_Arg_valueIS4_EERT_>
  40b03b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b03f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40b043:	90                   	nop
      return _Store(__fmt_args...);
  40b044:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b048:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b04c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40b050:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40b054:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b058:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b05c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40b060:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40b064:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40b068:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b06c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b070:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b074:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40b078:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40b07c:	48 89 d6             	mov    %rdx,%rsi
  40b07f:	48 89 c7             	mov    %rax,%rdi
  40b082:	e8 3b 12 00 00       	call   40c2c2 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJiEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40b087:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40b08b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40b08f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40b093:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  40b097:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40b09b:	49 89 c1             	mov    %rax,%r9
  40b09e:	48 89 d0             	mov    %rdx,%rax
  40b0a1:	49 89 f0             	mov    %rsi,%r8
  40b0a4:	4c 89 ce             	mov    %r9,%rsi
  40b0a7:	48 89 c2             	mov    %rax,%rdx
  40b0aa:	e8 3e a2 ff ff       	call   4052ed <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
  40b0af:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40b0b3:	c9                   	leave
  40b0b4:	c3                   	ret

000000000040b0b5 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
    print(ostream& __os, format_string<_Args...> __fmt, _Args&&... __args)
  40b0b5:	55                   	push   %rbp
  40b0b6:	48 89 e5             	mov    %rsp,%rbp
  40b0b9:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40b0bd:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40b0c1:	48 89 f0             	mov    %rsi,%rax
  40b0c4:	48 89 d6             	mov    %rdx,%rsi
  40b0c7:	48 89 c0             	mov    %rax,%rax
  40b0ca:	ba 00 00 00 00       	mov    $0x0,%edx
  40b0cf:	48 89 f2             	mov    %rsi,%rdx
  40b0d2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40b0d6:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40b0da:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40b0de:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40b0e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40b0e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b0ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40b0ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b0f2:	48 89 c7             	mov    %rax,%rdi
  40b0f5:	e8 fe 1d 00 00       	call   40cef8 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40b0fa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b0fe:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40b102:	90                   	nop
      return _Store(__fmt_args...);
  40b103:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b107:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b10b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40b10f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40b113:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b117:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b11b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40b11f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      auto __fmtargs = std::make_format_args(__args...);
  40b123:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40b127:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b12b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40b12f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	std::vprint_unicode(__os, __fmt.get(), __fmtargs);
  40b133:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  40b137:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b13b:	48 89 d6             	mov    %rdx,%rsi
  40b13e:	48 89 c7             	mov    %rax,%rdi
  40b141:	e8 de 11 00 00       	call   40c324 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40b146:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40b14a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40b14e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40b152:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40b156:	48 89 c7             	mov    %rax,%rdi
  40b159:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40b15d:	49 89 f0             	mov    %rsi,%r8
  40b160:	48 89 fe             	mov    %rdi,%rsi
  40b163:	48 89 c7             	mov    %rax,%rdi
  40b166:	e8 72 a9 ff ff       	call   405add <_ZSt14vprint_unicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
    }
  40b16b:	90                   	nop
  40b16c:	c9                   	leave
  40b16d:	c3                   	ret

000000000040b16e <_ZNSt8__format5_SpecIcE7_S_signEc>:
      _S_sign(_CharT __c) noexcept
  40b16e:	55                   	push   %rbp
  40b16f:	48 89 e5             	mov    %rsp,%rbp
  40b172:	89 f8                	mov    %edi,%eax
  40b174:	88 45 fc             	mov    %al,-0x4(%rbp)
	switch (__c)
  40b177:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  40b17b:	83 f8 2d             	cmp    $0x2d,%eax
  40b17e:	74 16                	je     40b196 <_ZNSt8__format5_SpecIcE7_S_signEc+0x28>
  40b180:	83 f8 2d             	cmp    $0x2d,%eax
  40b183:	7f 1f                	jg     40b1a4 <_ZNSt8__format5_SpecIcE7_S_signEc+0x36>
  40b185:	83 f8 20             	cmp    $0x20,%eax
  40b188:	74 13                	je     40b19d <_ZNSt8__format5_SpecIcE7_S_signEc+0x2f>
  40b18a:	83 f8 2b             	cmp    $0x2b,%eax
  40b18d:	75 15                	jne    40b1a4 <_ZNSt8__format5_SpecIcE7_S_signEc+0x36>
	  case '+': return _Sign_plus;
  40b18f:	b8 01 00 00 00       	mov    $0x1,%eax
  40b194:	eb 13                	jmp    40b1a9 <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  case '-': return _Sign_minus;
  40b196:	b8 02 00 00 00       	mov    $0x2,%eax
  40b19b:	eb 0c                	jmp    40b1a9 <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  case ' ': return _Sign_space;
  40b19d:	b8 03 00 00 00       	mov    $0x3,%eax
  40b1a2:	eb 05                	jmp    40b1a9 <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  default:  return _Sign_default;
  40b1a4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40b1a9:	5d                   	pop    %rbp
  40b1aa:	c3                   	ret

000000000040b1ab <_ZSt11__bit_widthImEiT_>:
    __bit_width(_Tp __x) noexcept
  40b1ab:	55                   	push   %rbp
  40b1ac:	48 89 e5             	mov    %rsp,%rbp
  40b1af:	48 83 ec 20          	sub    $0x20,%rsp
  40b1b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  40b1b7:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  40b1be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b1c2:	48 89 c7             	mov    %rax,%rdi
  40b1c5:	e8 bc 11 00 00       	call   40c386 <_ZSt13__countl_zeroImEiT_>
  40b1ca:	ba 40 00 00 00       	mov    $0x40,%edx
  40b1cf:	29 c2                	sub    %eax,%edx
  40b1d1:	89 d0                	mov    %edx,%eax
    }
  40b1d3:	c9                   	leave
  40b1d4:	c3                   	ret

000000000040b1d5 <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40b1d5:	55                   	push   %rbp
  40b1d6:	48 89 e5             	mov    %rsp,%rbp
  40b1d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40b1dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b1e1:	5d                   	pop    %rbp
  40b1e2:	c3                   	ret
  40b1e3:	90                   	nop

000000000040b1e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>:
      _M_destroy(size_type __size) throw()
  40b1e4:	55                   	push   %rbp
  40b1e5:	48 89 e5             	mov    %rsp,%rbp
  40b1e8:	41 54                	push   %r12
  40b1ea:	53                   	push   %rbx
  40b1eb:	48 83 ec 40          	sub    $0x40,%rsp
  40b1ef:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40b1f3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40b1f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40b1fb:	4c 8d 60 01          	lea    0x1(%rax),%r12
  40b1ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b203:	48 89 c7             	mov    %rax,%rdi
  40b206:	e8 c9 c2 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b20b:	48 89 c3             	mov    %rax,%rbx
  40b20e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b212:	48 89 c7             	mov    %rax,%rdi
  40b215:	e8 e6 c5 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40b21a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40b21e:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
  40b222:	4c 89 65 d8          	mov    %r12,-0x28(%rbp)
  40b226:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b22a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b22e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b232:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40b236:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b23a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b23e:	b8 00 00 00 00       	mov    $0x0,%eax

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
  40b243:	84 c0                	test   %al,%al
  40b245:	74 0e                	je     40b255 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm+0x71>
	  {
	    ::operator delete(__p);
  40b247:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b24b:	48 89 c7             	mov    %rax,%rdi
  40b24e:	e8 0d 90 ff ff       	call   404260 <_ZdlPv@plt>
	    return;
  40b253:	eb 17                	jmp    40b26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm+0x88>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
  40b255:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40b259:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40b25d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b261:	48 89 ce             	mov    %rcx,%rsi
  40b264:	48 89 c7             	mov    %rax,%rdi
  40b267:	e8 ae 21 00 00       	call   40d41a <_ZNSt15__new_allocatorIcE10deallocateEPcm>
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      [[__gnu__::__always_inline__]]
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
  40b26c:	90                   	nop
  40b26d:	90                   	nop
  40b26e:	48 83 c4 40          	add    $0x40,%rsp
  40b272:	5b                   	pop    %rbx
  40b273:	41 5c                	pop    %r12
  40b275:	5d                   	pop    %rbp
  40b276:	c3                   	ret
  40b277:	90                   	nop

000000000040b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
  40b278:	55                   	push   %rbp
  40b279:	48 89 e5             	mov    %rsp,%rbp
  40b27c:	48 83 ec 10          	sub    $0x10,%rsp
  40b280:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _M_is_local() ? size_type(_S_local_capacity)
  40b284:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b288:	48 89 c7             	mov    %rax,%rdi
  40b28b:	e8 7e c5 ff ff       	call   40780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  40b290:	84 c0                	test   %al,%al
  40b292:	74 07                	je     40b29b <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x23>
  40b294:	b8 0f 00 00 00       	mov    $0xf,%eax
	                     : _M_allocated_capacity;
  40b299:	eb 08                	jmp    40b2a3 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x2b>
	return _M_is_local() ? size_type(_S_local_capacity)
  40b29b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b29f:	48 8b 40 10          	mov    0x10(%rax),%rax
      }
  40b2a3:	c9                   	leave
  40b2a4:	c3                   	ret
  40b2a5:	90                   	nop

000000000040b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    basic_string<_CharT, _Traits, _Alloc>::
  40b2a6:	55                   	push   %rbp
  40b2a7:	48 89 e5             	mov    %rsp,%rbp
  40b2aa:	53                   	push   %rbx
  40b2ab:	48 83 ec 28          	sub    $0x28,%rsp
  40b2af:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b2b3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    reserve(size_type __res)
    {
      const size_type __capacity = capacity();
  40b2b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b2bb:	48 89 c7             	mov    %rax,%rdi
  40b2be:	e8 b5 ff ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40b2c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2968. Inconsistencies between basic_string reserve and
      // vector/unordered_map/unordered_set reserve functions
      // P0966 reserve should not shrink
      if (__res <= __capacity)
  40b2c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b2cb:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40b2cf:	0f 83 80 00 00 00    	jae    40b355 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm+0xaf>
	return;

      pointer __tmp = _M_create(__res, __capacity);
  40b2d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b2d9:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  40b2dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b2e1:	48 89 ce             	mov    %rcx,%rsi
  40b2e4:	48 89 c7             	mov    %rax,%rdi
  40b2e7:	e8 58 fb ff ff       	call   40ae44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  40b2ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      this->_S_copy(__tmp, _M_data(), length() + 1);
  40b2f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b2f4:	48 89 c7             	mov    %rax,%rdi
  40b2f7:	e8 62 c5 ff ff       	call   40785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40b2fc:	48 8d 58 01          	lea    0x1(%rax),%rbx
  40b300:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b304:	48 89 c7             	mov    %rax,%rdi
  40b307:	e8 c8 c1 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b30c:	48 89 c1             	mov    %rax,%rcx
  40b30f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b313:	48 89 da             	mov    %rbx,%rdx
  40b316:	48 89 ce             	mov    %rcx,%rsi
  40b319:	48 89 c7             	mov    %rax,%rdi
  40b31c:	e8 b7 0c 00 00       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
  40b321:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b325:	48 89 c7             	mov    %rax,%rdi
  40b328:	e8 c1 e3 ff ff       	call   4096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__tmp);
  40b32d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b331:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b335:	48 89 d6             	mov    %rdx,%rsi
  40b338:	48 89 c7             	mov    %rax,%rdi
  40b33b:	e8 06 e4 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__res);
  40b340:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40b344:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b348:	48 89 d6             	mov    %rdx,%rsi
  40b34b:	48 89 c7             	mov    %rax,%rdi
  40b34e:	e8 0d e4 ff ff       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  40b353:	eb 01                	jmp    40b356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm+0xb0>
	return;
  40b355:	90                   	nop
    }
  40b356:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b35a:	c9                   	leave
  40b35b:	c3                   	ret

000000000040b35c <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>:
      pointer_to(element_type& __r) noexcept
  40b35c:	55                   	push   %rbp
  40b35d:	48 89 e5             	mov    %rsp,%rbp
  40b360:	48 83 ec 10          	sub    $0x10,%rsp
  40b364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  40b368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b36c:	48 89 c7             	mov    %rax,%rdi
  40b36f:	e8 57 10 00 00       	call   40c3cb <_ZSt9addressofIKcEPT_RS1_>
  40b374:	c9                   	leave
  40b375:	c3                   	ret

000000000040b376 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKDiPS3_EEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
  40b376:	55                   	push   %rbp
  40b377:	48 89 e5             	mov    %rsp,%rbp
  40b37a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b37e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b382:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return __val < *__it; }
  40b386:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b38a:	8b 10                	mov    (%rax),%edx
  40b38c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b390:	8b 00                	mov    (%rax),%eax
  40b392:	39 c2                	cmp    %eax,%edx
  40b394:	0f 92 c0             	setb   %al
  40b397:	5d                   	pop    %rbp
  40b398:	c3                   	ret
  40b399:	90                   	nop

000000000040b39a <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPKjS3_EEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
  40b39a:	55                   	push   %rbp
  40b39b:	48 89 e5             	mov    %rsp,%rbp
  40b39e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b3a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b3a6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return *__it < __val; }
  40b3aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b3ae:	8b 10                	mov    (%rax),%edx
  40b3b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b3b4:	8b 00                	mov    (%rax),%eax
  40b3b6:	39 c2                	cmp    %eax,%edx
  40b3b8:	0f 92 c0             	setb   %al
  40b3bb:	5d                   	pop    %rbp
  40b3bc:	c3                   	ret
  40b3bd:	90                   	nop

000000000040b3be <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
  40b3be:	55                   	push   %rbp
  40b3bf:	48 89 e5             	mov    %rsp,%rbp
  40b3c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b3c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_value(__value)
  40b3ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b3ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b3d2:	48 89 10             	mov    %rdx,(%rax)
      { }
  40b3d5:	90                   	nop
  40b3d6:	5d                   	pop    %rbp
  40b3d7:	c3                   	ret

000000000040b3d8 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
  40b3d8:	55                   	push   %rbp
  40b3d9:	48 89 e5             	mov    %rsp,%rbp
  40b3dc:	48 83 ec 30          	sub    $0x30,%rsp
  40b3e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b3e4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b3e8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	__trip_count = (__last - __first) >> 2;
  40b3ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b3f0:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40b3f4:	48 c1 f8 02          	sar    $0x2,%rax
  40b3f8:	48 c1 f8 02          	sar    $0x2,%rax
  40b3fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __trip_count > 0; --__trip_count)
  40b400:	e9 99 00 00 00       	jmp    40b49e <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xc6>
	  if (__pred(__first))
  40b405:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b409:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b40d:	48 89 d6             	mov    %rdx,%rsi
  40b410:	48 89 c7             	mov    %rax,%rdi
  40b413:	e8 00 13 00 00       	call   40c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b418:	84 c0                	test   %al,%al
  40b41a:	74 09                	je     40b425 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x4d>
	    return __first;
  40b41c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b420:	e9 14 01 00 00       	jmp    40b539 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b425:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b42a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b42e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b432:	48 89 d6             	mov    %rdx,%rsi
  40b435:	48 89 c7             	mov    %rax,%rdi
  40b438:	e8 db 12 00 00       	call   40c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b43d:	84 c0                	test   %al,%al
  40b43f:	74 09                	je     40b44a <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x72>
	    return __first;
  40b441:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b445:	e9 ef 00 00 00       	jmp    40b539 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b44a:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b44f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b453:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b457:	48 89 d6             	mov    %rdx,%rsi
  40b45a:	48 89 c7             	mov    %rax,%rdi
  40b45d:	e8 b6 12 00 00       	call   40c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b462:	84 c0                	test   %al,%al
  40b464:	74 09                	je     40b46f <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x97>
	    return __first;
  40b466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b46a:	e9 ca 00 00 00       	jmp    40b539 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b46f:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b474:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b478:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b47c:	48 89 d6             	mov    %rdx,%rsi
  40b47f:	48 89 c7             	mov    %rax,%rdi
  40b482:	e8 91 12 00 00       	call   40c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b487:	84 c0                	test   %al,%al
  40b489:	74 09                	je     40b494 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xbc>
	    return __first;
  40b48b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b48f:	e9 a5 00 00 00       	jmp    40b539 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b494:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
      for (; __trip_count > 0; --__trip_count)
  40b499:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
  40b49e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40b4a3:	0f 8f 5c ff ff ff    	jg     40b405 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x2d>
      switch (__last - __first)
  40b4a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b4ad:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40b4b1:	48 c1 f8 02          	sar    $0x2,%rax
  40b4b5:	48 83 f8 03          	cmp    $0x3,%rax
  40b4b9:	74 14                	je     40b4cf <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xf7>
  40b4bb:	48 83 f8 03          	cmp    $0x3,%rax
  40b4bf:	7f 74                	jg     40b535 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x15d>
  40b4c1:	48 83 f8 01          	cmp    $0x1,%rax
  40b4c5:	74 4c                	je     40b513 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x13b>
  40b4c7:	48 83 f8 02          	cmp    $0x2,%rax
  40b4cb:	74 24                	je     40b4f1 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x119>
  40b4cd:	eb 66                	jmp    40b535 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x15d>
	  if (__pred(__first))
  40b4cf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b4d3:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b4d7:	48 89 d6             	mov    %rdx,%rsi
  40b4da:	48 89 c7             	mov    %rax,%rdi
  40b4dd:	e8 36 12 00 00       	call   40c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b4e2:	84 c0                	test   %al,%al
  40b4e4:	74 06                	je     40b4ec <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x114>
	    return __first;
  40b4e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b4ea:	eb 4d                	jmp    40b539 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b4ec:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b4f1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b4f5:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b4f9:	48 89 d6             	mov    %rdx,%rsi
  40b4fc:	48 89 c7             	mov    %rax,%rdi
  40b4ff:	e8 14 12 00 00       	call   40c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b504:	84 c0                	test   %al,%al
  40b506:	74 06                	je     40b50e <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x136>
	    return __first;
  40b508:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b50c:	eb 2b                	jmp    40b539 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b50e:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b513:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b517:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b51b:	48 89 d6             	mov    %rdx,%rsi
  40b51e:	48 89 c7             	mov    %rax,%rdi
  40b521:	e8 f2 11 00 00       	call   40c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b526:	84 c0                	test   %al,%al
  40b528:	74 06                	je     40b530 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x158>
	    return __first;
  40b52a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b52e:	eb 09                	jmp    40b539 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b530:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  return __last;
  40b535:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  40b539:	c9                   	leave
  40b53a:	c3                   	ret
  40b53b:	90                   	nop

000000000040b53c <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>:
	span(_It __first, size_type __count)
  40b53c:	55                   	push   %rbp
  40b53d:	48 89 e5             	mov    %rsp,%rbp
  40b540:	48 83 ec 20          	sub    $0x20,%rsp
  40b544:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b548:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b54c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _M_ptr(std::to_address(__first)), _M_extent(__count)
  40b550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b554:	48 89 c7             	mov    %rax,%rdi
  40b557:	e8 21 00 00 00       	call   40b57d <_ZSt10to_addressIcEPT_S1_>
  40b55c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b560:	48 89 02             	mov    %rax,(%rdx)
  40b563:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b567:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40b56b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b56f:	48 89 c6             	mov    %rax,%rsi
  40b572:	48 89 d7             	mov    %rdx,%rdi
  40b575:	e8 e6 97 ff ff       	call   404d60 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>
	}
  40b57a:	90                   	nop
  40b57b:	c9                   	leave
  40b57c:	c3                   	ret

000000000040b57d <_ZSt10to_addressIcEPT_S1_>:
    to_address(_Tp* __ptr) noexcept
  40b57d:	55                   	push   %rbp
  40b57e:	48 89 e5             	mov    %rsp,%rbp
  40b581:	48 83 ec 10          	sub    $0x10,%rsp
  40b585:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__to_address(__ptr); }
  40b589:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b58d:	48 89 c7             	mov    %rax,%rdi
  40b590:	e8 07 f2 ff ff       	call   40a79c <_ZSt12__to_addressIcEPT_S1_>
  40b595:	c9                   	leave
  40b596:	c3                   	ret
  40b597:	90                   	nop

000000000040b598 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>:
	span(type_identity_t<element_type> (&__arr)[_ArrayExtent]) noexcept
  40b598:	55                   	push   %rbp
  40b599:	48 89 e5             	mov    %rsp,%rbp
  40b59c:	48 83 ec 10          	sub    $0x10,%rsp
  40b5a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b5a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: span(static_cast<pointer>(__arr), _ArrayExtent)
  40b5a8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40b5ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b5b0:	ba 00 01 00 00       	mov    $0x100,%edx
  40b5b5:	48 89 ce             	mov    %rcx,%rsi
  40b5b8:	48 89 c7             	mov    %rax,%rdi
  40b5bb:	e8 7c ff ff ff       	call   40b53c <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
	{ }
  40b5c0:	90                   	nop
  40b5c1:	c9                   	leave
  40b5c2:	c3                   	ret

000000000040b5c3 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
  40b5c3:	55                   	push   %rbp
  40b5c4:	48 89 e5             	mov    %rsp,%rbp
  40b5c7:	48 83 ec 10          	sub    $0x10,%rsp
  40b5cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  40b5cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b5d3:	48 89 c7             	mov    %rax,%rdi
  40b5d6:	e8 a0 11 00 00       	call   40c77b <_ZSt11__addressofINSt8__format5_SinkIcEEEPT_RS3_>
  40b5db:	c9                   	leave
  40b5dc:	c3                   	ret

000000000040b5dd <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40b5dd:	55                   	push   %rbp
  40b5de:	48 89 e5             	mov    %rsp,%rbp
  40b5e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40b5e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b5e9:	5d                   	pop    %rbp
  40b5ea:	c3                   	ret
  40b5eb:	90                   	nop

000000000040b5ec <_ZNSt8__format5_SinkIcE10_M_reserveEm>:
      _M_reserve(size_t __n)
  40b5ec:	55                   	push   %rbp
  40b5ed:	48 89 e5             	mov    %rsp,%rbp
  40b5f0:	53                   	push   %rbx
  40b5f1:	48 83 ec 58          	sub    $0x58,%rsp
  40b5f5:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40b5f9:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  40b5fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b601:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  40b605:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b609:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40b60d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b611:	48 83 c0 08          	add    $0x8,%rax
  40b615:	48 89 c7             	mov    %rax,%rdi
  40b618:	e8 cd 02 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40b61d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b621:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b625:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b629:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40b62d:	48 89 c6             	mov    %rax,%rsi
  40b630:	48 89 d7             	mov    %rdx,%rdi
  40b633:	e8 d7 02 00 00       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40b638:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40b63f:	48 89 c6             	mov    %rax,%rsi
  40b642:	48 89 df             	mov    %rbx,%rdi
  40b645:	e8 04 1b 00 00       	call   40d14e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  40b64a:	90                   	nop
	if (__n <= _M_unused().size())
  40b64b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40b64f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40b653:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40b657:	48 89 c7             	mov    %rax,%rdi
  40b65a:	e8 93 9e ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40b65f:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40b663:	0f 93 c0             	setae  %al
  40b666:	84 c0                	test   %al,%al
  40b668:	74 09                	je     40b673 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x87>
	  return { this };
  40b66a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b66e:	e9 aa 00 00 00       	jmp    40b71d <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x131>
	if (__n <= _M_span.size()) // Cannot meet the request.
  40b673:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b677:	48 83 c0 08          	add    $0x8,%rax
  40b67b:	48 89 c7             	mov    %rax,%rdi
  40b67e:	e8 6f 9e ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40b683:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40b687:	0f 93 c0             	setae  %al
  40b68a:	84 c0                	test   %al,%al
  40b68c:	0f 84 86 00 00 00    	je     40b718 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x12c>
	    _M_overflow(); // Make more space available.
  40b692:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b696:	48 8b 00             	mov    (%rax),%rax
  40b699:	48 8b 10             	mov    (%rax),%rdx
  40b69c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b6a0:	48 89 c7             	mov    %rax,%rdi
  40b6a3:	ff d2                	call   *%rdx
  40b6a5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b6a9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  40b6ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b6b1:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40b6b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b6b9:	48 83 c0 08          	add    $0x8,%rax
  40b6bd:	48 89 c7             	mov    %rax,%rdi
  40b6c0:	e8 25 02 00 00       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40b6c5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40b6c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b6cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b6d1:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b6d5:	48 89 c6             	mov    %rax,%rsi
  40b6d8:	48 89 d7             	mov    %rdx,%rdi
  40b6db:	e8 2f 02 00 00       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40b6e0:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40b6e7:	48 89 c6             	mov    %rax,%rsi
  40b6ea:	48 89 df             	mov    %rbx,%rdi
  40b6ed:	e8 5c 1a 00 00       	call   40d14e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  40b6f2:	90                   	nop
	    if (__n <= _M_unused().size())
  40b6f3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b6f7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b6fb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b6ff:	48 89 c7             	mov    %rax,%rdi
  40b702:	e8 eb 9d ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40b707:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40b70b:	0f 93 c0             	setae  %al
  40b70e:	84 c0                	test   %al,%al
  40b710:	74 06                	je     40b718 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x12c>
	      return { this };
  40b712:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b716:	eb 05                	jmp    40b71d <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x131>
	return { nullptr };
  40b718:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40b71d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b721:	c9                   	leave
  40b722:	c3                   	ret
  40b723:	90                   	nop

000000000040b724 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>:
	explicit operator bool() const noexcept { return _M_sink; }
  40b724:	55                   	push   %rbp
  40b725:	48 89 e5             	mov    %rsp,%rbp
  40b728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b72c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b730:	48 8b 00             	mov    (%rax),%rax
  40b733:	48 85 c0             	test   %rax,%rax
  40b736:	0f 95 c0             	setne  %al
  40b739:	5d                   	pop    %rbp
  40b73a:	c3                   	ret
  40b73b:	90                   	nop

000000000040b73c <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>:
	_CharT* get() const noexcept { return _M_sink->_M_next.operator->(); }
  40b73c:	55                   	push   %rbp
  40b73d:	48 89 e5             	mov    %rsp,%rbp
  40b740:	48 83 ec 10          	sub    $0x10,%rsp
  40b744:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b748:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b74c:	48 8b 00             	mov    (%rax),%rax
  40b74f:	48 83 c0 18          	add    $0x18,%rax
  40b753:	48 89 c7             	mov    %rax,%rdi
  40b756:	e8 8b 10 00 00       	call   40c7e6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEptEv>
  40b75b:	c9                   	leave
  40b75c:	c3                   	ret
  40b75d:	90                   	nop

000000000040b75e <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>:
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
  40b75e:	55                   	push   %rbp
  40b75f:	48 89 e5             	mov    %rsp,%rbp
  40b762:	48 83 ec 10          	sub    $0x10,%rsp
  40b766:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b76a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b76e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b772:	48 8b 00             	mov    (%rax),%rax
  40b775:	48 8b 00             	mov    (%rax),%rax
  40b778:	48 83 c0 10          	add    $0x10,%rax
  40b77c:	48 8b 08             	mov    (%rax),%rcx
  40b77f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b783:	48 8b 00             	mov    (%rax),%rax
  40b786:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b78a:	48 89 d6             	mov    %rdx,%rsi
  40b78d:	48 89 c7             	mov    %rax,%rdi
  40b790:	ff d1                	call   *%rcx
  40b792:	90                   	nop
  40b793:	c9                   	leave
  40b794:	c3                   	ret
  40b795:	90                   	nop

000000000040b796 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_>:
      basic_format_context(basic_format_args<basic_format_context> __args,
  40b796:	55                   	push   %rbp
  40b797:	48 89 e5             	mov    %rsp,%rbp
  40b79a:	48 83 ec 30          	sub    $0x30,%rsp
  40b79e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b7a2:	48 89 f0             	mov    %rsi,%rax
  40b7a5:	48 89 d6             	mov    %rdx,%rsi
  40b7a8:	48 89 c0             	mov    %rax,%rax
  40b7ab:	ba 00 00 00 00       	mov    $0x0,%edx
  40b7b0:	48 89 f2             	mov    %rsi,%rdx
  40b7b3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b7b7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b7bb:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_args(__args), _M_out(std::move(__out))
  40b7bf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b7c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b7c7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b7cb:	48 89 01             	mov    %rax,(%rcx)
  40b7ce:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40b7d2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40b7d6:	48 89 c7             	mov    %rax,%rdi
  40b7d9:	e8 d5 e1 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b7de:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b7e2:	48 8b 00             	mov    (%rax),%rax
  40b7e5:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40b7e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b7ed:	48 83 c0 18          	add    $0x18,%rax
  40b7f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
  40b7f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b7f9:	c6 00 00             	movb   $0x0,(%rax)
  40b7fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b800:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  40b804:	90                   	nop
      { }
  40b805:	90                   	nop
  40b806:	c9                   	leave
  40b807:	c3                   	ret

000000000040b808 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_RKSt6locale>:
      basic_format_context(basic_format_args<basic_format_context> __args,
  40b808:	55                   	push   %rbp
  40b809:	48 89 e5             	mov    %rsp,%rbp
  40b80c:	48 83 ec 30          	sub    $0x30,%rsp
  40b810:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b814:	48 89 f0             	mov    %rsi,%rax
  40b817:	48 89 d6             	mov    %rdx,%rsi
  40b81a:	48 89 c0             	mov    %rax,%rax
  40b81d:	ba 00 00 00 00       	mov    $0x0,%edx
  40b822:	48 89 f2             	mov    %rsi,%rdx
  40b825:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40b829:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40b82d:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  40b831:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
      : _M_args(__args), _M_out(std::move(__out)), _M_loc(__loc)
  40b835:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40b839:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b83d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b841:	48 89 01             	mov    %rax,(%rcx)
  40b844:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40b848:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40b84c:	48 89 c7             	mov    %rax,%rdi
  40b84f:	e8 5f e1 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b854:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b858:	48 8b 00             	mov    (%rax),%rax
  40b85b:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40b85f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b863:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b867:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b86b:	48 89 c6             	mov    %rax,%rsi
  40b86e:	48 89 d7             	mov    %rdx,%rdi
  40b871:	e8 be 99 ff ff       	call   405234 <_ZNSt8__format16_Optional_localeC1ERKSt6locale>
      { }
  40b876:	90                   	nop
  40b877:	c9                   	leave
  40b878:	c3                   	ret
  40b879:	90                   	nop

000000000040b87a <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEC1ERSt20basic_format_contextIS2_cESt17basic_string_viewIcSt11char_traitsIcEE>:
      _Formatting_scanner(basic_format_context<_Out, _CharT>& __fc,
  40b87a:	55                   	push   %rbp
  40b87b:	48 89 e5             	mov    %rsp,%rbp
  40b87e:	48 83 ec 20          	sub    $0x20,%rsp
  40b882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b886:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b88a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  40b88e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
      : _Scanner<_CharT>(__str), _M_fc(__fc)
  40b892:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b896:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40b89a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b89e:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  40b8a5:	48 89 c7             	mov    %rax,%rdi
  40b8a8:	e8 2b a3 ff ff       	call   405bd8 <_ZNSt8__format8_ScannerIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>
  40b8ad:	ba 50 df 41 00       	mov    $0x41df50,%edx
  40b8b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8b6:	48 89 10             	mov    %rdx,(%rax)
  40b8b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8bd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b8c1:	48 89 50 30          	mov    %rdx,0x30(%rax)
      { }
  40b8c5:	90                   	nop
  40b8c6:	c9                   	leave
  40b8c7:	c3                   	ret

000000000040b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>:
      iterator out() { return std::move(_M_out); }
  40b8c8:	55                   	push   %rbp
  40b8c9:	48 89 e5             	mov    %rsp,%rbp
  40b8cc:	48 83 ec 10          	sub    $0x10,%rsp
  40b8d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b8d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8d8:	48 83 c0 10          	add    $0x10,%rax
  40b8dc:	48 89 c7             	mov    %rax,%rdi
  40b8df:	e8 cf e0 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b8e4:	48 8b 00             	mov    (%rax),%rax
  40b8e7:	c9                   	leave
  40b8e8:	c3                   	ret
  40b8e9:	90                   	nop

000000000040b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>:

      // iterator support

      [[nodiscard]]
      constexpr iterator
      begin() const noexcept
  40b8ea:	55                   	push   %rbp
  40b8eb:	48 89 e5             	mov    %rsp,%rbp
  40b8ee:	48 83 ec 20          	sub    $0x20,%rsp
  40b8f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_ptr); }
  40b8f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b8fa:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  40b8fe:	48 89 d6             	mov    %rdx,%rsi
  40b901:	48 89 c7             	mov    %rax,%rdi
  40b904:	e8 bf 0e 00 00       	call   40c7c8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  40b909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b90d:	c9                   	leave
  40b90e:	c3                   	ret

000000000040b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  40b90f:	55                   	push   %rbp
  40b910:	48 89 e5             	mov    %rsp,%rbp
  40b913:	53                   	push   %rbx
  40b914:	48 83 ec 18          	sub    $0x18,%rsp
  40b918:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b91c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  40b920:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b924:	48 89 c7             	mov    %rax,%rdi
  40b927:	e8 f6 0e 00 00       	call   40c822 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  40b92c:	48 8b 18             	mov    (%rax),%rbx
  40b92f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b933:	48 89 c7             	mov    %rax,%rdi
  40b936:	e8 e7 0e 00 00       	call   40c822 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  40b93b:	48 8b 00             	mov    (%rax),%rax
  40b93e:	48 89 da             	mov    %rbx,%rdx
  40b941:	48 29 c2             	sub    %rax,%rdx
  40b944:	48 89 d0             	mov    %rdx,%rax
  40b947:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b94b:	c9                   	leave
  40b94c:	c3                   	ret
  40b94d:	90                   	nop

000000000040b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>:
	  return _Sp{ this->data(), _Count };
	}

      [[nodiscard]]
      constexpr span<element_type, dynamic_extent>
      first(size_type __count) const noexcept
  40b94e:	55                   	push   %rbp
  40b94f:	48 89 e5             	mov    %rsp,%rbp
  40b952:	48 83 ec 20          	sub    $0x20,%rsp
  40b956:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b95a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b95e:	b8 00 00 00 00       	mov    $0x0,%eax
      {
	__glibcxx_assert(__count <= size());
  40b963:	84 c0                	test   %al,%al
  40b965:	74 1e                	je     40b985 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm+0x37>
  40b967:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b96b:	48 89 c7             	mov    %rax,%rdi
  40b96e:	e8 7f 9b ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40b973:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40b977:	0f 92 c0             	setb   %al
  40b97a:	0f b6 c0             	movzbl %al,%eax
  40b97d:	48 85 c0             	test   %rax,%rax
  40b980:	0f 95 c0             	setne  %al
  40b983:	84 c0                	test   %al,%al
	return { this->data(), __count };
  40b985:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b989:	48 89 c7             	mov    %rax,%rdi
  40b98c:	e8 4f 9b ff ff       	call   4054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40b991:	48 89 c1             	mov    %rax,%rcx
  40b994:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b998:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40b99c:	48 89 ce             	mov    %rcx,%rsi
  40b99f:	48 89 c7             	mov    %rax,%rdi
  40b9a2:	e8 95 fb ff ff       	call   40b53c <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
  40b9a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b9ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
      }
  40b9af:	c9                   	leave
  40b9b0:	c3                   	ret
  40b9b1:	90                   	nop

000000000040b9b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>:
      append(const _CharT* __s, size_type __n)
  40b9b2:	55                   	push   %rbp
  40b9b3:	48 89 e5             	mov    %rsp,%rbp
  40b9b6:	48 83 ec 20          	sub    $0x20,%rsp
  40b9ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b9be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b9c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_M_check_length(size_type(0), __n, "basic_string::append");
  40b9c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b9ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9ce:	b9 98 b2 41 00       	mov    $0x41b298,%ecx
  40b9d3:	be 00 00 00 00       	mov    $0x0,%esi
  40b9d8:	48 89 c7             	mov    %rax,%rdi
  40b9db:	e8 50 0e 00 00       	call   40c830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
	return _M_append(__s, __n);
  40b9e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b9e4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40b9e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9ec:	48 89 ce             	mov    %rcx,%rsi
  40b9ef:	48 89 c7             	mov    %rax,%rdi
  40b9f2:	e8 97 0e 00 00       	call   40c88e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>
      }
  40b9f7:	c9                   	leave
  40b9f8:	c3                   	ret
  40b9f9:	90                   	nop

000000000040b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>:
	return __rlen;
      }

      [[nodiscard]]
      constexpr basic_string_view
      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
  40b9fa:	55                   	push   %rbp
  40b9fb:	48 89 e5             	mov    %rsp,%rbp
  40b9fe:	48 83 ec 50          	sub    $0x50,%rsp
  40ba02:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40ba06:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40ba0a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      {
	__pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
  40ba0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ba12:	48 89 c7             	mov    %rax,%rdi
  40ba15:	e8 ba a2 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40ba1a:	48 89 c1             	mov    %rax,%rcx
  40ba1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ba21:	ba ad b2 41 00       	mov    $0x41b2ad,%edx
  40ba26:	48 89 c6             	mov    %rax,%rsi
  40ba29:	48 89 cf             	mov    %rcx,%rdi
  40ba2c:	e8 a3 8f ff ff       	call   4049d4 <_ZSt10__sv_checkmmPKc>
  40ba31:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
  40ba35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ba39:	48 8b 00             	mov    (%rax),%rax
  40ba3c:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  40ba40:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ba44:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
  40ba48:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40ba4c:	48 89 d6             	mov    %rdx,%rsi
  40ba4f:	48 89 c7             	mov    %rax,%rdi
  40ba52:	e8 bf ed ff ff       	call   40a816 <_ZSt3minImERKT_S2_S2_>
  40ba57:	48 8b 00             	mov    (%rax),%rax
  40ba5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return basic_string_view{_M_str + __pos, __rlen};
  40ba5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ba62:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40ba66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ba6a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40ba6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40ba72:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40ba76:	48 89 ce             	mov    %rcx,%rsi
  40ba79:	48 89 c7             	mov    %rax,%rdi
  40ba7c:	e8 29 ba ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40ba81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ba85:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
      }
  40ba89:	c9                   	leave
  40ba8a:	c3                   	ret

000000000040ba8b <_ZSt6formatIJRA4_KcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>:
    format(format_string<_Args...> __fmt, _Args&&... __args)
  40ba8b:	55                   	push   %rbp
  40ba8c:	48 89 e5             	mov    %rsp,%rbp
  40ba8f:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40ba93:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40ba97:	48 89 f0             	mov    %rsi,%rax
  40ba9a:	48 89 d6             	mov    %rdx,%rsi
  40ba9d:	48 89 c0             	mov    %rax,%rax
  40baa0:	ba 00 00 00 00       	mov    $0x0,%edx
  40baa5:	48 89 f2             	mov    %rsi,%rdx
  40baa8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40baac:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40bab0:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40bab4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40bab8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40babc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bac0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40bac4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bac8:	48 89 c7             	mov    %rax,%rdi
  40bacb:	e8 8d 17 00 00       	call   40d25d <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJPKcEE11_S_make_eltIA4_S5_EENS_10_Arg_valueIS4_EERT_>
  40bad0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bad4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40bad8:	90                   	nop
      return _Store(__fmt_args...);
  40bad9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40badd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40bae1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40bae5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40bae9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40baed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40baf1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40baf5:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40baf9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40bafd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40bb01:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb05:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bb09:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40bb0d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40bb11:	48 89 d6             	mov    %rdx,%rsi
  40bb14:	48 89 c7             	mov    %rax,%rdi
  40bb17:	e8 3c 0e 00 00       	call   40c958 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJPKcEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40bb1c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40bb20:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40bb24:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40bb28:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  40bb2c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40bb30:	49 89 c1             	mov    %rax,%r9
  40bb33:	48 89 d0             	mov    %rdx,%rax
  40bb36:	49 89 f0             	mov    %rsi,%r8
  40bb39:	4c 89 ce             	mov    %r9,%rsi
  40bb3c:	48 89 c2             	mov    %rax,%rdx
  40bb3f:	e8 a9 97 ff ff       	call   4052ed <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
  40bb44:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40bb48:	c9                   	leave
  40bb49:	c3                   	ret

000000000040bb4a <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>:
    print(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40bb4a:	55                   	push   %rbp
  40bb4b:	48 89 e5             	mov    %rsp,%rbp
  40bb4e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40bb52:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40bb56:	48 89 f0             	mov    %rsi,%rax
  40bb59:	48 89 d6             	mov    %rdx,%rsi
  40bb5c:	48 89 c0             	mov    %rax,%rax
  40bb5f:	ba 00 00 00 00       	mov    $0x0,%edx
  40bb64:	48 89 f2             	mov    %rsi,%rdx
  40bb67:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40bb6b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40bb6f:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40bb73:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40bb77:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40bb7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bb7f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40bb83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bb87:	48 89 c7             	mov    %rax,%rdi
  40bb8a:	e8 69 13 00 00       	call   40cef8 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40bb8f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bb93:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40bb97:	90                   	nop
      return _Store(__fmt_args...);
  40bb98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40bb9c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40bba0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40bba4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40bba8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40bbac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40bbb0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40bbb4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      auto __fmtargs = std::make_format_args(__args...);
  40bbb8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40bbbc:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40bbc0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40bbc4:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	std::vprint_unicode(__stream, __fmt.get(), __fmtargs);
  40bbc8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  40bbcc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40bbd0:	48 89 d6             	mov    %rdx,%rsi
  40bbd3:	48 89 c7             	mov    %rax,%rdi
  40bbd6:	e8 49 07 00 00       	call   40c324 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40bbdb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40bbdf:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40bbe3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40bbe7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40bbeb:	48 89 c7             	mov    %rax,%rdi
  40bbee:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40bbf2:	49 89 f0             	mov    %rsi,%r8
  40bbf5:	48 89 fe             	mov    %rdi,%rsi
  40bbf8:	48 89 c7             	mov    %rax,%rdi
  40bbfb:	e8 55 9b ff ff       	call   405755 <_ZSt14vprint_unicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
    }
  40bc00:	90                   	nop
  40bc01:	c9                   	leave
  40bc02:	c3                   	ret

000000000040bc03 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>:
    __from_chars_alnum_to_val(unsigned char __c)
  40bc03:	55                   	push   %rbp
  40bc04:	48 89 e5             	mov    %rsp,%rbp
  40bc07:	89 f8                	mov    %edi,%eax
  40bc09:	88 45 fc             	mov    %al,-0x4(%rbp)
	return static_cast<unsigned char>(__c - '0');
  40bc0c:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  40bc10:	83 e8 30             	sub    $0x30,%eax
    }
  40bc13:	5d                   	pop    %rbp
  40bc14:	c3                   	ret

000000000040bc15 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i>:

  /// std::from_chars implementation for integers in any base.
  /// If _DecOnly is true, then we may assume __base is at most 10.
  template<bool _DecOnly, typename _Tp>
    constexpr bool
    __from_chars_alnum(const char*& __first, const char* __last, _Tp& __val,
  40bc15:	55                   	push   %rbp
  40bc16:	48 89 e5             	mov    %rsp,%rbp
  40bc19:	48 83 ec 30          	sub    $0x30,%rsp
  40bc1d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40bc21:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40bc25:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bc29:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
		       int __base)
    {
      // __glibcxx_assert(_DecOnly ? __base <= 10 : __base <= 36);

      const int __bits_per_digit = __bit_width(unsigned(__base & 0x3f));
  40bc2c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40bc2f:	83 e0 3f             	and    $0x3f,%eax
  40bc32:	89 c7                	mov    %eax,%edi
  40bc34:	e8 80 8a ff ff       	call   4046b9 <_ZSt11__bit_widthIjEiT_>
  40bc39:	89 45 f8             	mov    %eax,-0x8(%rbp)
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
  40bc3c:	c7 45 fc 10 00 00 00 	movl   $0x10,-0x4(%rbp)
      for (; __first != __last; ++__first)
  40bc43:	e9 d3 00 00 00       	jmp    40bd1b <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x106>
	{
	  const unsigned char __c = __from_chars_alnum_to_val<_DecOnly>(*__first);
  40bc48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bc4c:	48 8b 00             	mov    (%rax),%rax
  40bc4f:	0f b6 00             	movzbl (%rax),%eax
  40bc52:	0f b6 c0             	movzbl %al,%eax
  40bc55:	89 c7                	mov    %eax,%edi
  40bc57:	e8 a7 ff ff ff       	call   40bc03 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>
  40bc5c:	88 45 f7             	mov    %al,-0x9(%rbp)
	  if (__c >= __base)
  40bc5f:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  40bc63:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  40bc66:	7f 0a                	jg     40bc72 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x5d>
	    return true;
  40bc68:	b8 01 00 00 00       	mov    $0x1,%eax
  40bc6d:	e9 bf 00 00 00       	jmp    40bd31 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x11c>

	  __unused_bits_lower_bound -= __bits_per_digit;
  40bc72:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40bc75:	29 45 fc             	sub    %eax,-0x4(%rbp)
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
  40bc78:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40bc7c:	78 1c                	js     40bc9a <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x85>
	    // We're definitely not going to overflow.
	    __val = __val * __base + __c;
  40bc7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bc82:	0f b7 00             	movzwl (%rax),%eax
  40bc85:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  40bc88:	0f af d0             	imul   %eax,%edx
  40bc8b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  40bc8f:	01 c2                	add    %eax,%edx
  40bc91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bc95:	66 89 10             	mov    %dx,(%rax)
  40bc98:	eb 6f                	jmp    40bd09 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xf4>
	  else if (!__raise_and_add(__val, __base, __c)) [[__unlikely__]]
  40bc9a:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  40bc9e:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  40bca1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bca5:	89 ce                	mov    %ecx,%esi
  40bca7:	48 89 c7             	mov    %rax,%rdi
  40bcaa:	e8 0b 0d 00 00       	call   40c9ba <_ZNSt8__detail15__raise_and_addItEEbRT_ih>
  40bcaf:	83 f0 01             	xor    $0x1,%eax
  40bcb2:	84 c0                	test   %al,%al
  40bcb4:	74 53                	je     40bd09 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xf4>
	    {
	      while (++__first != __last
  40bcb6:	90                   	nop
  40bcb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bcbb:	48 8b 00             	mov    (%rax),%rax
  40bcbe:	48 8d 50 01          	lea    0x1(%rax),%rdx
		     && __from_chars_alnum_to_val<_DecOnly>(*__first) < __base)
  40bcc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bcc6:	48 89 10             	mov    %rdx,(%rax)
	      while (++__first != __last
  40bcc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bccd:	48 8b 00             	mov    (%rax),%rax
		     && __from_chars_alnum_to_val<_DecOnly>(*__first) < __base)
  40bcd0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40bcd4:	74 23                	je     40bcf9 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe4>
  40bcd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bcda:	48 8b 00             	mov    (%rax),%rax
  40bcdd:	0f b6 00             	movzbl (%rax),%eax
  40bce0:	0f b6 c0             	movzbl %al,%eax
  40bce3:	89 c7                	mov    %eax,%edi
  40bce5:	e8 19 ff ff ff       	call   40bc03 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>
  40bcea:	0f b6 c0             	movzbl %al,%eax
  40bced:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  40bcf0:	7e 07                	jle    40bcf9 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe4>
  40bcf2:	b8 01 00 00 00       	mov    $0x1,%eax
  40bcf7:	eb 05                	jmp    40bcfe <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe9>
  40bcf9:	b8 00 00 00 00       	mov    $0x0,%eax
  40bcfe:	84 c0                	test   %al,%al
  40bd00:	75 b5                	jne    40bcb7 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xa2>
		;
	      return false;
  40bd02:	b8 00 00 00 00       	mov    $0x0,%eax
  40bd07:	eb 28                	jmp    40bd31 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x11c>
      for (; __first != __last; ++__first)
  40bd09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bd0d:	48 8b 00             	mov    (%rax),%rax
  40bd10:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40bd14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bd18:	48 89 10             	mov    %rdx,(%rax)
  40bd1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bd1f:	48 8b 00             	mov    (%rax),%rax
  40bd22:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40bd26:	0f 85 1c ff ff ff    	jne    40bc48 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x33>
	    }
	}
      return true;
  40bd2c:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40bd31:	c9                   	leave
  40bd32:	c3                   	ret
  40bd33:	90                   	nop

000000000040bd34 <_ZNSt4pairItPKcEC1IRtRS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40bd34:	55                   	push   %rbp
  40bd35:	48 89 e5             	mov    %rsp,%rbp
  40bd38:	48 83 ec 20          	sub    $0x20,%rsp
  40bd3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40bd40:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40bd44:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40bd48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bd4c:	48 89 c7             	mov    %rax,%rdi
  40bd4f:	e8 f8 0c 00 00       	call   40ca4c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
  40bd54:	0f b7 10             	movzwl (%rax),%edx
  40bd57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bd5b:	66 89 10             	mov    %dx,(%rax)
  40bd5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bd62:	48 89 c7             	mov    %rax,%rdi
  40bd65:	e8 f0 0c 00 00       	call   40ca5a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
  40bd6a:	48 8b 10             	mov    (%rax),%rdx
  40bd6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bd71:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
  40bd75:	90                   	nop
  40bd76:	c9                   	leave
  40bd77:	c3                   	ret

000000000040bd78 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
  40bd78:	55                   	push   %rbp
  40bd79:	48 89 e5             	mov    %rsp,%rbp
  40bd7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40bd80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bd84:	5d                   	pop    %rbp
  40bd85:	c3                   	ret

000000000040bd86 <_ZSt7forwardINSt6ranges8subrangeIPKcS3_LNS0_13subrange_kindE1EEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40bd86:	55                   	push   %rbp
  40bd87:	48 89 e5             	mov    %rsp,%rbp
  40bd8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40bd8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bd92:	5d                   	pop    %rbp
  40bd93:	c3                   	ret

000000000040bd94 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>:
	  _First_and_curr(_It __first, _It __curr)
  40bd94:	55                   	push   %rbp
  40bd95:	48 89 e5             	mov    %rsp,%rbp
  40bd98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40bd9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40bda0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  : _M_first(__first), _M_curr(__curr) { }
  40bda4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bda8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40bdac:	48 89 10             	mov    %rdx,(%rax)
  40bdaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bdb3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40bdb7:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40bdbb:	90                   	nop
  40bdbc:	5d                   	pop    %rbp
  40bdbd:	c3                   	ret

000000000040bdbe <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>:
      _M_read()
  40bdbe:	55                   	push   %rbp
  40bdbf:	48 89 e5             	mov    %rsp,%rbp
  40bdc2:	48 83 ec 10          	sub    $0x10,%rsp
  40bdc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_read_utf8();
  40bdca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bdce:	48 89 c7             	mov    %rax,%rdi
  40bdd1:	e8 cc 0c 00 00       	call   40caa2 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev>
      }
  40bdd6:	90                   	nop
  40bdd7:	c9                   	leave
  40bdd8:	c3                   	ret
  40bdd9:	90                   	nop

000000000040bdda <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>:
      operator++()
  40bdda:	55                   	push   %rbp
  40bddb:	48 89 e5             	mov    %rsp,%rbp
  40bdde:	53                   	push   %rbx
  40bddf:	48 83 ec 38          	sub    $0x38,%rsp
  40bde3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
  40bde7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bdeb:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40bdef:	0f b6 c0             	movzbl %al,%eax
  40bdf2:	8d 50 01             	lea    0x1(%rax),%edx
  40bdf5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bdf9:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  40bdfd:	0f b6 c0             	movzbl %al,%eax
  40be00:	39 c2                	cmp    %eax,%edx
  40be02:	75 23                	jne    40be27 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x4d>
  40be04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40be08:	48 89 c7             	mov    %rax,%rdi
  40be0b:	e8 16 ed ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40be10:	48 8b 10             	mov    (%rax),%rdx
  40be13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40be17:	48 8b 40 20          	mov    0x20(%rax),%rax
  40be1b:	48 39 c2             	cmp    %rax,%rdx
  40be1e:	74 07                	je     40be27 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x4d>
  40be20:	b8 01 00 00 00       	mov    $0x1,%eax
  40be25:	eb 05                	jmp    40be2c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x52>
  40be27:	b8 00 00 00 00       	mov    $0x0,%eax
  40be2c:	84 c0                	test   %al,%al
  40be2e:	74 7c                	je     40beac <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0xd2>
	      std::advance(_M_curr(), _M_to_increment);
  40be30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40be34:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  40be38:	0f b6 d8             	movzbl %al,%ebx
  40be3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40be3f:	48 89 c7             	mov    %rax,%rdi
  40be42:	e8 df ec ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40be47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40be4b:	88 5d e7             	mov    %bl,-0x19(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  40be4e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  40be52:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40be56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be5a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40be5e:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  40be5f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40be63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be67:	48 89 d6             	mov    %rdx,%rsi
  40be6a:	48 89 c7             	mov    %rax,%rdi
  40be6d:	e8 ed 14 00 00       	call   40d35f <_ZSt9__advanceIPKclEvRT_T0_St26random_access_iterator_tag>
    }
  40be72:	90                   	nop
	    if (_M_curr() == _M_last)
  40be73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40be77:	48 89 c7             	mov    %rax,%rdi
  40be7a:	e8 a7 ec ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40be7f:	48 8b 10             	mov    (%rax),%rdx
  40be82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40be86:	48 8b 40 20          	mov    0x20(%rax),%rax
  40be8a:	48 39 c2             	cmp    %rax,%rdx
  40be8d:	0f 94 c0             	sete   %al
  40be90:	84 c0                	test   %al,%al
  40be92:	74 0a                	je     40be9e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0xc4>
	      _M_buf_index = 0;
  40be94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40be98:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  40be9c:	eb 3d                	jmp    40bedb <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	      _M_read();
  40be9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bea2:	48 89 c7             	mov    %rax,%rdi
  40bea5:	e8 14 ff ff ff       	call   40bdbe <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>
  40beaa:	eb 2f                	jmp    40bedb <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	else if (_M_buf_index + 1 < _M_buf_last)
  40beac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40beb0:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40beb4:	0f b6 c0             	movzbl %al,%eax
  40beb7:	8d 50 01             	lea    0x1(%rax),%edx
  40beba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bebe:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  40bec2:	0f b6 c0             	movzbl %al,%eax
  40bec5:	39 c2                	cmp    %eax,%edx
  40bec7:	7d 12                	jge    40bedb <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	  ++_M_buf_index;
  40bec9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40becd:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40bed1:	8d 50 01             	lea    0x1(%rax),%edx
  40bed4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bed8:	88 50 18             	mov    %dl,0x18(%rax)
	return *this;
  40bedb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      }
  40bedf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40bee3:	c9                   	leave
  40bee4:	c3                   	ret
  40bee5:	90                   	nop

000000000040bee6 <_ZNKSt5arrayIDiLm1EEixEm>:
	return _M_elems[__n];
      }

      [[__nodiscard__]]
      constexpr const_reference
      operator[](size_type __n) const noexcept
  40bee6:	55                   	push   %rbp
  40bee7:	48 89 e5             	mov    %rsp,%rbp
  40beea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40beee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _M_elems[__n];
  40bef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bef6:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40befd:	00
  40befe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bf02:	48 01 d0             	add    %rdx,%rax
      }
  40bf05:	5d                   	pop    %rbp
  40bf06:	c3                   	ret
  40bf07:	90                   	nop

000000000040bf08 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() const { return _M_first_and_curr._M_curr; }
  40bf08:	55                   	push   %rbp
  40bf09:	48 89 e5             	mov    %rsp,%rbp
  40bf0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40bf10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bf14:	48 8b 40 10          	mov    0x10(%rax),%rax
  40bf18:	5d                   	pop    %rbp
  40bf19:	c3                   	ret

000000000040bf1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
  40bf1a:	55                   	push   %rbp
  40bf1b:	48 89 e5             	mov    %rsp,%rbp
  40bf1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  40bf22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bf26:	5d                   	pop    %rbp
  40bf27:	c3                   	ret

000000000040bf28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
  40bf28:	55                   	push   %rbp
  40bf29:	48 89 e5             	mov    %rsp,%rbp
  40bf2c:	48 83 ec 20          	sub    $0x20,%rsp
  40bf30:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
  40bf34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bf38:	48 89 c7             	mov    %rax,%rdi
  40bf3b:	e8 da ff ff ff       	call   40bf1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40bf40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {
#if __cplusplus <= 201703L
	return __a.max_size();
#else
	return size_t(-1) / sizeof(value_type);
  40bf44:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  40bf4b:	48 83 e8 01          	sub    $0x1,%rax
  40bf4f:	48 d1 e8             	shr    %rax
  40bf52:	c9                   	leave
  40bf53:	c3                   	ret

000000000040bf54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>:
      _S_allocate(_Char_alloc_type& __a, size_type __n)
  40bf54:	55                   	push   %rbp
  40bf55:	48 89 e5             	mov    %rsp,%rbp
  40bf58:	48 83 ec 40          	sub    $0x40,%rsp
  40bf5c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40bf60:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40bf64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bf68:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40bf6c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40bf70:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40bf74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bf78:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40bf7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bf80:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40bf84:	b8 00 00 00 00       	mov    $0x0,%eax
	if (std::__is_constant_evaluated())
  40bf89:	84 c0                	test   %al,%al
  40bf8b:	74 27                	je     40bfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x60>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
  40bf8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bf91:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40bf95:	b8 00 00 00 00       	mov    $0x0,%eax
  40bf9a:	83 e0 01             	and    $0x1,%eax
  40bf9d:	84 c0                	test   %al,%al
  40bf9f:	74 05                	je     40bfa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x52>
	      std::__throw_bad_array_new_length();
  40bfa1:	e8 6a 82 ff ff       	call   404210 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
  40bfa6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bfaa:	48 89 c7             	mov    %rax,%rdi
  40bfad:	e8 be 82 ff ff       	call   404270 <_Znwm@plt>
  40bfb2:	eb 19                	jmp    40bfcd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x79>
	return __allocator_base<_Tp>::allocate(__n, 0);
  40bfb4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40bfb8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40bfbc:	ba 00 00 00 00       	mov    $0x0,%edx
  40bfc1:	48 89 ce             	mov    %rcx,%rsi
  40bfc4:	48 89 c7             	mov    %rax,%rdi
  40bfc7:	e8 00 15 00 00       	call   40d4cc <_ZNSt15__new_allocatorIcE8allocateEmPKv>
  40bfcc:	90                   	nop
      { return __a.allocate(__n); }
  40bfcd:	90                   	nop
	pointer __p = _Alloc_traits::allocate(__a, __n);
  40bfce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return __p;
  40bfd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40bfd6:	c9                   	leave
  40bfd7:	c3                   	ret

000000000040bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
  40bfd8:	55                   	push   %rbp
  40bfd9:	48 89 e5             	mov    %rsp,%rbp
  40bfdc:	48 83 ec 20          	sub    $0x20,%rsp
  40bfe0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40bfe4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40bfe8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
  40bfec:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
  40bff1:	75 15                	jne    40c008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
  40bff3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40bff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bffb:	48 89 d6             	mov    %rdx,%rsi
  40bffe:	48 89 c7             	mov    %rax,%rdi
  40c001:	e8 da 86 ff ff       	call   4046e0 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40c006:	eb 17                	jmp    40c01f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x47>
	  traits_type::copy(__d, __s, __n);
  40c008:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c00c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40c010:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c014:	48 89 ce             	mov    %rcx,%rsi
  40c017:	48 89 c7             	mov    %rax,%rdi
  40c01a:	e8 f5 88 ff ff       	call   404914 <_ZNSt11char_traitsIcE4copyEPcPKcm>
      }
  40c01f:	90                   	nop
  40c020:	c9                   	leave
  40c021:	c3                   	ret

000000000040c022 <_ZSt6formatIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES5_St19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
    format(format_string<_Args...> __fmt, _Args&&... __args)
  40c022:	55                   	push   %rbp
  40c023:	48 89 e5             	mov    %rsp,%rbp
  40c026:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40c02a:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40c02e:	48 89 f0             	mov    %rsi,%rax
  40c031:	48 89 d6             	mov    %rdx,%rsi
  40c034:	48 89 c0             	mov    %rax,%rax
  40c037:	ba 00 00 00 00       	mov    $0x0,%edx
  40c03c:	48 89 f2             	mov    %rsi,%rdx
  40c03f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40c043:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40c047:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40c04b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40c04f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40c053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c057:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40c05b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c05f:	48 89 c7             	mov    %rax,%rdi
  40c062:	e8 91 0e 00 00       	call   40cef8 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40c067:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c06b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40c06f:	90                   	nop
      return _Store(__fmt_args...);
  40c070:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c074:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c078:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c07c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40c080:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c084:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c088:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40c08c:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40c090:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c094:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c098:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c09c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c0a0:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40c0a4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40c0a8:	48 89 d6             	mov    %rdx,%rsi
  40c0ab:	48 89 c7             	mov    %rax,%rdi
  40c0ae:	e8 71 02 00 00       	call   40c324 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40c0b3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40c0b7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40c0bb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40c0bf:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  40c0c3:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40c0c7:	49 89 c1             	mov    %rax,%r9
  40c0ca:	48 89 d0             	mov    %rdx,%rax
  40c0cd:	49 89 f0             	mov    %rsi,%r8
  40c0d0:	4c 89 ce             	mov    %r9,%rsi
  40c0d3:	48 89 c2             	mov    %rax,%rdx
  40c0d6:	e8 12 92 ff ff       	call   4052ed <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
  40c0db:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c0df:	c9                   	leave
  40c0e0:	c3                   	ret
  40c0e1:	90                   	nop

000000000040c0e2 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEEdeEv>:
      operator*() const
  40c0e2:	55                   	push   %rbp
  40c0e3:	48 89 e5             	mov    %rsp,%rbp
  40c0e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	_Iterator __tmp = current;
  40c0ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c0ee:	48 8b 00             	mov    (%rax),%rax
  40c0f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return *--__tmp;
  40c0f5:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
  40c0fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40c0fe:	5d                   	pop    %rbp
  40c0ff:	c3                   	ret

000000000040c100 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4rendEv>:
      rend() const noexcept
  40c100:	55                   	push   %rbp
  40c101:	48 89 e5             	mov    %rsp,%rbp
  40c104:	48 83 ec 10          	sub    $0x10,%rsp
  40c108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c10c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return const_reverse_iterator(begin()); }
  40c110:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c114:	48 89 c7             	mov    %rax,%rdi
  40c117:	e8 18 00 00 00       	call   40c134 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE5beginEv>
  40c11c:	48 89 c2             	mov    %rax,%rdx
  40c11f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c123:	48 89 d6             	mov    %rdx,%rsi
  40c126:	48 89 c7             	mov    %rax,%rdi
  40c129:	e8 2e 00 00 00       	call   40c15c <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>
  40c12e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c132:	c9                   	leave
  40c133:	c3                   	ret

000000000040c134 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE5beginEv>:
      begin() const noexcept
  40c134:	55                   	push   %rbp
  40c135:	48 89 e5             	mov    %rsp,%rbp
  40c138:	48 83 ec 10          	sub    $0x10,%rsp
  40c13c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_iterator(data()); }
  40c140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c144:	48 89 c7             	mov    %rax,%rdi
  40c147:	e8 02 00 00 00       	call   40c14e <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>
  40c14c:	c9                   	leave
  40c14d:	c3                   	ret

000000000040c14e <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>:
      data() noexcept
      { return static_cast<pointer>(_M_elems); }

      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
  40c14e:	55                   	push   %rbp
  40c14f:	48 89 e5             	mov    %rsp,%rbp
  40c152:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const_pointer>(_M_elems); }
  40c156:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c15a:	5d                   	pop    %rbp
  40c15b:	c3                   	ret

000000000040c15c <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>:
      reverse_iterator(iterator_type __x)
  40c15c:	55                   	push   %rbp
  40c15d:	48 89 e5             	mov    %rsp,%rbp
  40c160:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c164:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : current(__x)
  40c168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c16c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c170:	48 89 10             	mov    %rdx,(%rax)
      { }
  40c173:	90                   	nop
  40c174:	5d                   	pop    %rbp
  40c175:	c3                   	ret

000000000040c176 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>:
      base() const
  40c176:	55                   	push   %rbp
  40c177:	48 89 e5             	mov    %rsp,%rbp
  40c17a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return current; }
  40c17e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c182:	48 8b 00             	mov    (%rax),%rax
  40c185:	5d                   	pop    %rbp
  40c186:	c3                   	ret

000000000040c187 <_ZSteqIPKNSt8__format6_Arg_tEEbRKSt16reverse_iteratorIT_ES8_>:
    operator==(const reverse_iterator<_Iterator>& __x,
  40c187:	55                   	push   %rbp
  40c188:	48 89 e5             	mov    %rsp,%rbp
  40c18b:	53                   	push   %rbx
  40c18c:	48 83 ec 18          	sub    $0x18,%rsp
  40c190:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c194:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __x.base() == __y.base(); }
  40c198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c19c:	48 89 c7             	mov    %rax,%rdi
  40c19f:	e8 d2 ff ff ff       	call   40c176 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>
  40c1a4:	48 89 c3             	mov    %rax,%rbx
  40c1a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c1ab:	48 89 c7             	mov    %rax,%rdi
  40c1ae:	e8 c3 ff ff ff       	call   40c176 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>
  40c1b3:	48 39 c3             	cmp    %rax,%rbx
  40c1b6:	0f 94 c0             	sete   %al
  40c1b9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c1bd:	c9                   	leave
  40c1be:	c3                   	ret

000000000040c1bf <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>:
    __pack_arg_types(const array<_Arg_t, _Nm>& __types)
  40c1bf:	55                   	push   %rbp
  40c1c0:	48 89 e5             	mov    %rsp,%rbp
  40c1c3:	53                   	push   %rbx
  40c1c4:	48 83 ec 38          	sub    $0x38,%rsp
  40c1c8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      __UINT64_TYPE__ __packed_types = 0;
  40c1cc:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c1d3:	00
      for (auto __i = __types.rbegin(); __i != __types.rend(); ++__i)
  40c1d4:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c1d8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c1dc:	48 89 d6             	mov    %rdx,%rsi
  40c1df:	48 89 c7             	mov    %rax,%rdi
  40c1e2:	e8 69 00 00 00       	call   40c250 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE6rbeginEv>
  40c1e7:	eb 30                	jmp    40c219 <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE+0x5a>
	__packed_types = (__packed_types << _Bits) | *__i;
  40c1e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c1ed:	48 c1 e0 05          	shl    $0x5,%rax
  40c1f1:	48 89 c3             	mov    %rax,%rbx
  40c1f4:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c1f8:	48 89 c7             	mov    %rax,%rdi
  40c1fb:	e8 e2 fe ff ff       	call   40c0e2 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEEdeEv>
  40c200:	0f b6 00             	movzbl (%rax),%eax
  40c203:	0f b6 c0             	movzbl %al,%eax
  40c206:	48 09 d8             	or     %rbx,%rax
  40c209:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      for (auto __i = __types.rbegin(); __i != __types.rend(); ++__i)
  40c20d:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c211:	48 89 c7             	mov    %rax,%rdi
  40c214:	e8 89 00 00 00       	call   40c2a2 <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEppEv>
  40c219:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40c21d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c221:	48 89 d6             	mov    %rdx,%rsi
  40c224:	48 89 c7             	mov    %rax,%rdi
  40c227:	e8 d4 fe ff ff       	call   40c100 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4rendEv>
  40c22c:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  40c230:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c234:	48 89 d6             	mov    %rdx,%rsi
  40c237:	48 89 c7             	mov    %rax,%rdi
  40c23a:	e8 48 ff ff ff       	call   40c187 <_ZSteqIPKNSt8__format6_Arg_tEEbRKSt16reverse_iteratorIT_ES8_>
  40c23f:	83 f0 01             	xor    $0x1,%eax
  40c242:	84 c0                	test   %al,%al
  40c244:	75 a3                	jne    40c1e9 <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE+0x2a>
      return __packed_types;
  40c246:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  40c24a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c24e:	c9                   	leave
  40c24f:	c3                   	ret

000000000040c250 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE6rbeginEv>:
      rbegin() const noexcept
  40c250:	55                   	push   %rbp
  40c251:	48 89 e5             	mov    %rsp,%rbp
  40c254:	48 83 ec 10          	sub    $0x10,%rsp
  40c258:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c25c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return const_reverse_iterator(end()); }
  40c260:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c264:	48 89 c7             	mov    %rax,%rdi
  40c267:	e8 18 00 00 00       	call   40c284 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE3endEv>
  40c26c:	48 89 c2             	mov    %rax,%rdx
  40c26f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c273:	48 89 d6             	mov    %rdx,%rsi
  40c276:	48 89 c7             	mov    %rax,%rdi
  40c279:	e8 de fe ff ff       	call   40c15c <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>
  40c27e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c282:	c9                   	leave
  40c283:	c3                   	ret

000000000040c284 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE3endEv>:
      end() const noexcept
  40c284:	55                   	push   %rbp
  40c285:	48 89 e5             	mov    %rsp,%rbp
  40c288:	48 83 ec 10          	sub    $0x10,%rsp
  40c28c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_iterator(data() + _Nm); }
  40c290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c294:	48 89 c7             	mov    %rax,%rdi
  40c297:	e8 b2 fe ff ff       	call   40c14e <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>
  40c29c:	48 83 c0 01          	add    $0x1,%rax
  40c2a0:	c9                   	leave
  40c2a1:	c3                   	ret

000000000040c2a2 <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEppEv>:
      operator++()
  40c2a2:	55                   	push   %rbp
  40c2a3:	48 89 e5             	mov    %rsp,%rbp
  40c2a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	--current;
  40c2aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c2ae:	48 8b 00             	mov    (%rax),%rax
  40c2b1:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40c2b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c2b9:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  40c2bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40c2c0:	5d                   	pop    %rbp
  40c2c1:	c3                   	ret

000000000040c2c2 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJiEEERKNS1_10_Arg_storeIS4_JDpT_EEE>:
      basic_format_args<_Context>::
  40c2c2:	55                   	push   %rbp
  40c2c3:	48 89 e5             	mov    %rsp,%rbp
  40c2c6:	48 83 ec 20          	sub    $0x20,%rsp
  40c2ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c2ce:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	    _M_packed_size = sizeof...(_Args);
  40c2d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c2d6:	0f b6 10             	movzbl (%rax),%edx
  40c2d9:	83 e2 f0             	and    $0xfffffff0,%edx
  40c2dc:	83 ca 01             	or     $0x1,%edx
  40c2df:	88 10                	mov    %dl,(%rax)
	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
  40c2e1:	c6 45 ff 03          	movb   $0x3,-0x1(%rbp)
  40c2e5:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40c2e9:	48 89 c7             	mov    %rax,%rdi
  40c2ec:	e8 ce fe ff ff       	call   40c1bf <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>
  40c2f1:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  40c2f8:	ff ff 0f
  40c2fb:	48 21 c2             	and    %rax,%rdx
  40c2fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c302:	48 89 d1             	mov    %rdx,%rcx
  40c305:	48 c1 e1 04          	shl    $0x4,%rcx
  40c309:	48 8b 10             	mov    (%rax),%rdx
  40c30c:	83 e2 0f             	and    $0xf,%edx
  40c30f:	48 09 ca             	or     %rcx,%rdx
  40c312:	48 89 10             	mov    %rdx,(%rax)
	    _M_values = __store._M_args;
  40c315:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c319:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c31d:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  40c321:	90                   	nop
  40c322:	c9                   	leave
  40c323:	c3                   	ret

000000000040c324 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>:
      basic_format_args<_Context>::
  40c324:	55                   	push   %rbp
  40c325:	48 89 e5             	mov    %rsp,%rbp
  40c328:	48 83 ec 20          	sub    $0x20,%rsp
  40c32c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c330:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	    _M_packed_size = sizeof...(_Args);
  40c334:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c338:	0f b6 10             	movzbl (%rax),%edx
  40c33b:	83 e2 f0             	and    $0xfffffff0,%edx
  40c33e:	83 ca 01             	or     $0x1,%edx
  40c341:	88 10                	mov    %dl,(%rax)
	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
  40c343:	c6 45 ff 0b          	movb   $0xb,-0x1(%rbp)
  40c347:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40c34b:	48 89 c7             	mov    %rax,%rdi
  40c34e:	e8 6c fe ff ff       	call   40c1bf <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>
  40c353:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  40c35a:	ff ff 0f
  40c35d:	48 21 c2             	and    %rax,%rdx
  40c360:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c364:	48 89 d1             	mov    %rdx,%rcx
  40c367:	48 c1 e1 04          	shl    $0x4,%rcx
  40c36b:	48 8b 10             	mov    (%rax),%rdx
  40c36e:	83 e2 0f             	and    $0xf,%edx
  40c371:	48 09 ca             	or     %rcx,%rdx
  40c374:	48 89 10             	mov    %rdx,(%rax)
	    _M_values = __store._M_args;
  40c377:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c37b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c37f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  40c383:	90                   	nop
  40c384:	c9                   	leave
  40c385:	c3                   	ret

000000000040c386 <_ZSt13__countl_zeroImEiT_>:
    __countl_zero(_Tp __x) noexcept
  40c386:	55                   	push   %rbp
  40c387:	48 89 e5             	mov    %rsp,%rbp
  40c38a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  40c38e:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%rbp)
      if (__x == 0)
  40c395:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40c39a:	75 07                	jne    40c3a3 <_ZSt13__countl_zeroImEiT_+0x1d>
        return _Nd;
  40c39c:	b8 40 00 00 00       	mov    $0x40,%eax
  40c3a1:	eb 26                	jmp    40c3c9 <_ZSt13__countl_zeroImEiT_+0x43>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  40c3a3:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  40c3aa:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  40c3b1:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  constexpr int __diff = _Nd_ul - _Nd;
  40c3b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	  return __builtin_clzl(__x) - __diff;
  40c3bf:	48 0f bd 45 d8       	bsr    -0x28(%rbp),%rax
  40c3c4:	48 83 f0 3f          	xor    $0x3f,%rax
  40c3c8:	90                   	nop
    }
  40c3c9:	5d                   	pop    %rbp
  40c3ca:	c3                   	ret

000000000040c3cb <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
  40c3cb:	55                   	push   %rbp
  40c3cc:	48 89 e5             	mov    %rsp,%rbp
  40c3cf:	48 83 ec 10          	sub    $0x10,%rsp
  40c3d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  40c3d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c3db:	48 89 c7             	mov    %rax,%rdi
  40c3de:	e8 4e 0b 00 00       	call   40cf31 <_ZSt11__addressofIKcEPT_RS1_>
  40c3e3:	c9                   	leave
  40c3e4:	c3                   	ret
  40c3e5:	90                   	nop

000000000040c3e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
  40c3e6:	55                   	push   %rbp
  40c3e7:	48 89 e5             	mov    %rsp,%rbp
  40c3ea:	48 83 ec 70          	sub    $0x70,%rsp
  40c3ee:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40c3f2:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40c3f6:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40c3fa:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40c3fe:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
	       const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");
  40c402:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c406:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c40a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c40e:	b9 c7 b2 41 00       	mov    $0x41b2c7,%ecx
  40c413:	48 89 c7             	mov    %rax,%rdi
  40c416:	e8 15 04 00 00       	call   40c830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>

      const size_type __old_size = this->size();
  40c41b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c41f:	48 89 c7             	mov    %rax,%rdi
  40c422:	e8 27 89 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c427:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      const size_type __new_size = __old_size + __len2 - __len1;
  40c42b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40c42f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c433:	48 01 d0             	add    %rdx,%rax
  40c436:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  40c43a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

      if (__new_size <= this->capacity())
  40c43e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c442:	48 89 c7             	mov    %rax,%rdi
  40c445:	e8 2e ee ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40c44a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40c44e:	0f 93 c0             	setae  %al
  40c451:	84 c0                	test   %al,%al
  40c453:	0f 84 dd 01 00 00    	je     40c636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
	{
	  pointer __p = this->_M_data() + __pos;
  40c459:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c45d:	48 89 c7             	mov    %rax,%rdi
  40c460:	e8 6f b0 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c465:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c469:	48 01 d0             	add    %rdx,%rax
  40c46c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	  const size_type __how_much = __old_size - __pos - __len1;
  40c470:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c474:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  40c478:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  40c47c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if __cpp_lib_is_constant_evaluated
	  if (std::is_constant_evaluated())
  40c480:	e8 b5 81 ff ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  40c485:	84 c0                	test   %al,%al
  40c487:	0f 84 09 01 00 00    	je     40c596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x1b0>
	    {
	      auto __newp = _S_allocate(_M_get_allocator(), __new_size);
  40c48d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c491:	48 89 c7             	mov    %rax,%rdi
  40c494:	e8 67 b3 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40c499:	48 89 c2             	mov    %rax,%rdx
  40c49c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c4a0:	48 89 c6             	mov    %rax,%rsi
  40c4a3:	48 89 d7             	mov    %rdx,%rdi
  40c4a6:	e8 a9 fa ff ff       	call   40bf54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
  40c4ab:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      _S_copy(__newp, this->_M_data(), __pos);
  40c4af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c4b3:	48 89 c7             	mov    %rax,%rdi
  40c4b6:	e8 19 b0 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c4bb:	48 89 c1             	mov    %rax,%rcx
  40c4be:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c4c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c4c6:	48 89 ce             	mov    %rcx,%rsi
  40c4c9:	48 89 c7             	mov    %rax,%rdi
  40c4cc:	e8 07 fb ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos, __s, __len2);
  40c4d1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c4d5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c4d9:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c4dd:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c4e1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c4e5:	48 89 c6             	mov    %rax,%rsi
  40c4e8:	48 89 cf             	mov    %rcx,%rdi
  40c4eb:	e8 e8 fa ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);
  40c4f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c4f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c4f8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  40c4fc:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c500:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c504:	48 01 c2             	add    %rax,%rdx
  40c507:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c50b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c50f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c513:	48 89 c2             	mov    %rax,%rdx
  40c516:	48 89 cf             	mov    %rcx,%rdi
  40c519:	e8 ba fa ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(this->_M_data(), __newp, __new_size);
  40c51e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c522:	48 89 c7             	mov    %rax,%rdi
  40c525:	e8 aa af ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c52a:	48 89 c1             	mov    %rax,%rcx
  40c52d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c531:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c535:	48 89 c6             	mov    %rax,%rsi
  40c538:	48 89 cf             	mov    %rcx,%rdi
  40c53b:	e8 98 fa ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      this->_M_get_allocator().deallocate(__newp, __new_size);
  40c540:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c544:	48 89 c7             	mov    %rax,%rdi
  40c547:	e8 b4 b2 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40c54c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c550:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c554:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c558:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c55c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c560:	b8 00 00 00 00       	mov    $0x0,%eax
	if (std::__is_constant_evaluated())
  40c565:	84 c0                	test   %al,%al
  40c567:	74 11                	je     40c57a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x194>
	    ::operator delete(__p);
  40c569:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c56d:	48 89 c7             	mov    %rax,%rdi
  40c570:	e8 eb 7c ff ff       	call   404260 <_ZdlPv@plt>
	    return;
  40c575:	e9 db 00 00 00       	jmp    40c655 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	__allocator_base<_Tp>::deallocate(__p, __n);
  40c57a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40c57e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40c582:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c586:	48 89 ce             	mov    %rcx,%rsi
  40c589:	48 89 c7             	mov    %rax,%rdi
  40c58c:	e8 89 0e 00 00       	call   40d41a <_ZNSt15__new_allocatorIcE10deallocateEPcm>
  40c591:	e9 bf 00 00 00       	jmp    40c655 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	    }
	  else
#endif
	  if (__builtin_expect(_M_disjunct(__s), true))
  40c596:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40c59a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c59e:	48 89 d6             	mov    %rdx,%rsi
  40c5a1:	48 89 c7             	mov    %rax,%rdi
  40c5a4:	e8 97 09 00 00       	call   40cf40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
  40c5a9:	0f b6 c0             	movzbl %al,%eax
  40c5ac:	48 85 c0             	test   %rax,%rax
  40c5af:	0f 95 c0             	setne  %al
  40c5b2:	84 c0                	test   %al,%al
  40c5b4:	74 58                	je     40c60e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x228>
	    {
	      if (__how_much && __len1 != __len2)
  40c5b6:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40c5bb:	74 31                	je     40c5ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x208>
  40c5bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c5c1:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  40c5c5:	74 27                	je     40c5ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x208>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
  40c5c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c5cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c5cf:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  40c5d3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c5d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c5db:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c5df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c5e3:	48 89 c2             	mov    %rax,%rdx
  40c5e6:	48 89 cf             	mov    %rcx,%rdi
  40c5e9:	e8 d1 09 00 00       	call   40cfbf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2)
  40c5ee:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  40c5f3:	74 60                	je     40c655 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
		this->_S_copy(__p, __s, __len2);
  40c5f5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c5f9:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40c5fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c601:	48 89 ce             	mov    %rcx,%rsi
  40c604:	48 89 c7             	mov    %rax,%rdi
  40c607:	e8 cc f9 ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40c60c:	eb 47                	jmp    40c655 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	    }
	  else
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
  40c60e:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  40c612:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40c616:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40c61a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c61e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40c622:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c626:	4d 89 c1             	mov    %r8,%r9
  40c629:	49 89 f8             	mov    %rdi,%r8
  40c62c:	48 89 c7             	mov    %rax,%rdi
  40c62f:	e8 ec 7c ff ff       	call   404320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@plt>
  40c634:	eb 1f                	jmp    40c655 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	}
      else
	this->_M_mutate(__pos, __len1, __s, __len2);
  40c636:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40c63a:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40c63e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c642:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c646:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c64a:	49 89 f8             	mov    %rdi,%r8
  40c64d:	48 89 c7             	mov    %rax,%rdi
  40c650:	e8 b5 09 00 00       	call   40d00a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__new_size);
  40c655:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c659:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c65d:	48 89 d6             	mov    %rdx,%rsi
  40c660:	48 89 c7             	mov    %rax,%rdi
  40c663:	e8 7e ae ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  40c668:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  40c66c:	c9                   	leave
  40c66d:	c3                   	ret

000000000040c66e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>:
      _M_check(size_type __pos, const char* __s) const
  40c66e:	55                   	push   %rbp
  40c66f:	48 89 e5             	mov    %rsp,%rbp
  40c672:	48 83 ec 20          	sub    $0x20,%rsp
  40c676:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c67a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40c67e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__pos > this->size())
  40c682:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c686:	48 89 c7             	mov    %rax,%rdi
  40c689:	e8 c0 86 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c68e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40c692:	0f 92 c0             	setb   %al
  40c695:	84 c0                	test   %al,%al
  40c697:	74 29                	je     40c6c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc+0x54>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
  40c699:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c69d:	48 89 c7             	mov    %rax,%rdi
  40c6a0:	e8 a9 86 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c6a5:	48 89 c1             	mov    %rax,%rcx
  40c6a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c6ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c6b0:	48 89 c6             	mov    %rax,%rsi
  40c6b3:	bf e0 b2 41 00       	mov    $0x41b2e0,%edi
  40c6b8:	b8 00 00 00 00       	mov    $0x0,%eax
  40c6bd:	e8 ae 7c ff ff       	call   404370 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
	return __pos;
  40c6c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  40c6c6:	c9                   	leave
  40c6c7:	c3                   	ret

000000000040c6c8 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40c6c8:	55                   	push   %rbp
  40c6c9:	48 89 e5             	mov    %rsp,%rbp
  40c6cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c6d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40c6d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c6d8:	48 8b 00             	mov    (%rax),%rax
  40c6db:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c6df:	48 c1 e2 02          	shl    $0x2,%rdx
  40c6e3:	48 01 c2             	add    %rax,%rdx
  40c6e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c6ea:	48 89 10             	mov    %rdx,(%rax)
    }
  40c6ed:	90                   	nop
  40c6ee:	5d                   	pop    %rbp
  40c6ef:	c3                   	ret

000000000040c6f0 <_ZSt9__advanceIPKjlEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40c6f0:	55                   	push   %rbp
  40c6f1:	48 89 e5             	mov    %rsp,%rbp
  40c6f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c6f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40c6fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c700:	48 8b 00             	mov    (%rax),%rax
  40c703:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c707:	48 c1 e2 02          	shl    $0x2,%rdx
  40c70b:	48 01 c2             	add    %rax,%rdx
  40c70e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c712:	48 89 10             	mov    %rdx,(%rax)
    }
  40c715:	90                   	nop
  40c716:	5d                   	pop    %rbp
  40c717:	c3                   	ret

000000000040c718 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>:
	operator()(_Iterator __it)
  40c718:	55                   	push   %rbp
  40c719:	48 89 e5             	mov    %rsp,%rbp
  40c71c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c720:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return *__it == _M_value; }
  40c724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c728:	8b 10                	mov    (%rax),%edx
  40c72a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c72e:	48 8b 00             	mov    (%rax),%rax
  40c731:	8b 00                	mov    (%rax),%eax
  40c733:	39 c2                	cmp    %eax,%edx
  40c735:	0f 94 c0             	sete   %al
  40c738:	5d                   	pop    %rbp
  40c739:	c3                   	ret

000000000040c73a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm>:
      remove_suffix(size_type __n) noexcept
  40c73a:	55                   	push   %rbp
  40c73b:	48 89 e5             	mov    %rsp,%rbp
  40c73e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c742:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40c746:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(this->_M_len >= __n);
  40c74b:	84 c0                	test   %al,%al
  40c74d:	74 14                	je     40c763 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm+0x29>
  40c74f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c753:	48 8b 00             	mov    (%rax),%rax
  40c756:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40c75a:	0f 92 c0             	setb   %al
  40c75d:	0f b6 c0             	movzbl %al,%eax
  40c760:	48 85 c0             	test   %rax,%rax
	this->_M_len -= __n;
  40c763:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c767:	48 8b 00             	mov    (%rax),%rax
  40c76a:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40c76e:	48 89 c2             	mov    %rax,%rdx
  40c771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c775:	48 89 10             	mov    %rdx,(%rax)
      }
  40c778:	90                   	nop
  40c779:	5d                   	pop    %rbp
  40c77a:	c3                   	ret

000000000040c77b <_ZSt11__addressofINSt8__format5_SinkIcEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40c77b:	55                   	push   %rbp
  40c77c:	48 89 e5             	mov    %rsp,%rbp
  40c77f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  40c783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c787:	5d                   	pop    %rbp
  40c788:	c3                   	ret
  40c789:	90                   	nop

000000000040c78a <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>:
      _M_type(size_t __i) const noexcept
  40c78a:	55                   	push   %rbp
  40c78b:	48 89 e5             	mov    %rsp,%rbp
  40c78e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c792:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
  40c796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c79a:	48 8b 00             	mov    (%rax),%rax
  40c79d:	48 c1 e8 04          	shr    $0x4,%rax
  40c7a1:	48 89 c6             	mov    %rax,%rsi
  40c7a4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c7a8:	48 89 d0             	mov    %rdx,%rax
  40c7ab:	48 c1 e0 02          	shl    $0x2,%rax
  40c7af:	48 01 d0             	add    %rdx,%rax
  40c7b2:	89 c1                	mov    %eax,%ecx
  40c7b4:	48 d3 ee             	shr    %cl,%rsi
  40c7b7:	48 89 f0             	mov    %rsi,%rax
  40c7ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
  40c7be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c7c2:	83 e0 1f             	and    $0x1f,%eax
      }
  40c7c5:	5d                   	pop    %rbp
  40c7c6:	c3                   	ret
  40c7c7:	90                   	nop

000000000040c7c8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  40c7c8:	55                   	push   %rbp
  40c7c9:	48 89 e5             	mov    %rsp,%rbp
  40c7cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c7d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  40c7d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c7d8:	48 8b 10             	mov    (%rax),%rdx
  40c7db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c7df:	48 89 10             	mov    %rdx,(%rax)
  40c7e2:	90                   	nop
  40c7e3:	5d                   	pop    %rbp
  40c7e4:	c3                   	ret
  40c7e5:	90                   	nop

000000000040c7e6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
  40c7e6:	55                   	push   %rbp
  40c7e7:	48 89 e5             	mov    %rsp,%rbp
  40c7ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40c7ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c7f2:	48 8b 00             	mov    (%rax),%rax
  40c7f5:	5d                   	pop    %rbp
  40c7f6:	c3                   	ret
  40c7f7:	90                   	nop

000000000040c7f8 <_ZNSt8__format5_SinkIcE7_M_bumpEm>:
      _M_bump(size_t __n)
  40c7f8:	55                   	push   %rbp
  40c7f9:	48 89 e5             	mov    %rsp,%rbp
  40c7fc:	48 83 ec 10          	sub    $0x10,%rsp
  40c800:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c804:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_next += __n; }
  40c808:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c80c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40c810:	48 83 c2 18          	add    $0x18,%rdx
  40c814:	48 89 c6             	mov    %rax,%rsi
  40c817:	48 89 d7             	mov    %rdx,%rdi
  40c81a:	e8 17 0a 00 00       	call   40d236 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
  40c81f:	90                   	nop
  40c820:	c9                   	leave
  40c821:	c3                   	ret

000000000040c822 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
  40c822:	55                   	push   %rbp
  40c823:	48 89 e5             	mov    %rsp,%rbp
  40c826:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40c82a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c82e:	5d                   	pop    %rbp
  40c82f:	c3                   	ret

000000000040c830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
  40c830:	55                   	push   %rbp
  40c831:	48 89 e5             	mov    %rsp,%rbp
  40c834:	53                   	push   %rbx
  40c835:	48 83 ec 28          	sub    $0x28,%rsp
  40c839:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c83d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40c841:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c845:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (this->max_size() - (this->size() - __n1) < __n2)
  40c849:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c84d:	48 89 c7             	mov    %rax,%rdi
  40c850:	e8 d3 f6 ff ff       	call   40bf28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40c855:	48 89 c3             	mov    %rax,%rbx
  40c858:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c85c:	48 89 c7             	mov    %rax,%rdi
  40c85f:	e8 ea 84 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c864:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c868:	48 29 c2             	sub    %rax,%rdx
  40c86b:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
  40c86f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40c873:	0f 92 c0             	setb   %al
  40c876:	84 c0                	test   %al,%al
  40c878:	74 0c                	je     40c886 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc+0x56>
	  __throw_length_error(__N(__s));
  40c87a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c87e:	48 89 c7             	mov    %rax,%rdi
  40c881:	e8 aa 78 ff ff       	call   404130 <_ZSt20__throw_length_errorPKc@plt>
      }
  40c886:	90                   	nop
  40c887:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c88b:	c9                   	leave
  40c88c:	c3                   	ret
  40c88d:	90                   	nop

000000000040c88e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40c88e:	55                   	push   %rbp
  40c88f:	48 89 e5             	mov    %rsp,%rbp
  40c892:	53                   	push   %rbx
  40c893:	48 83 ec 38          	sub    $0x38,%rsp
  40c897:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40c89b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40c89f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const size_type __len = __n + this->size();
  40c8a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c8a7:	48 89 c7             	mov    %rax,%rdi
  40c8aa:	e8 9f 84 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c8af:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c8b3:	48 01 d0             	add    %rdx,%rax
  40c8b6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__len <= this->capacity())
  40c8ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c8be:	48 89 c7             	mov    %rax,%rdi
  40c8c1:	e8 b2 e9 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40c8c6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40c8ca:	0f 93 c0             	setae  %al
  40c8cd:	84 c0                	test   %al,%al
  40c8cf:	74 3b                	je     40c90c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0x7e>
	  if (__n)
  40c8d1:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40c8d6:	74 62                	je     40c93a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
  40c8d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c8dc:	48 89 c7             	mov    %rax,%rdi
  40c8df:	e8 f0 ab ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c8e4:	48 89 c3             	mov    %rax,%rbx
  40c8e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c8eb:	48 89 c7             	mov    %rax,%rdi
  40c8ee:	e8 5b 84 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c8f3:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40c8f7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c8fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c8ff:	48 89 c6             	mov    %rax,%rsi
  40c902:	48 89 cf             	mov    %rcx,%rdi
  40c905:	e8 ce f6 ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40c90a:	eb 2e                	jmp    40c93a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
  40c90c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c910:	48 89 c7             	mov    %rax,%rdi
  40c913:	e8 36 84 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c918:	48 89 c6             	mov    %rax,%rsi
  40c91b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40c91f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c923:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c927:	49 89 c8             	mov    %rcx,%r8
  40c92a:	48 89 d1             	mov    %rdx,%rcx
  40c92d:	ba 00 00 00 00       	mov    $0x0,%edx
  40c932:	48 89 c7             	mov    %rax,%rdi
  40c935:	e8 d0 06 00 00       	call   40d00a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
      this->_M_set_length(__len);
  40c93a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c93e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c942:	48 89 d6             	mov    %rdx,%rsi
  40c945:	48 89 c7             	mov    %rax,%rdi
  40c948:	e8 99 ab ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  40c94d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
  40c951:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c955:	c9                   	leave
  40c956:	c3                   	ret
  40c957:	90                   	nop

000000000040c958 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJPKcEEERKNS1_10_Arg_storeIS4_JDpT_EEE>:
      basic_format_args<_Context>::
  40c958:	55                   	push   %rbp
  40c959:	48 89 e5             	mov    %rsp,%rbp
  40c95c:	48 83 ec 20          	sub    $0x20,%rsp
  40c960:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c964:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	    _M_packed_size = sizeof...(_Args);
  40c968:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c96c:	0f b6 10             	movzbl (%rax),%edx
  40c96f:	83 e2 f0             	and    $0xfffffff0,%edx
  40c972:	83 ca 01             	or     $0x1,%edx
  40c975:	88 10                	mov    %dl,(%rax)
	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
  40c977:	c6 45 ff 0a          	movb   $0xa,-0x1(%rbp)
  40c97b:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40c97f:	48 89 c7             	mov    %rax,%rdi
  40c982:	e8 38 f8 ff ff       	call   40c1bf <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>
  40c987:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  40c98e:	ff ff 0f
  40c991:	48 21 c2             	and    %rax,%rdx
  40c994:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c998:	48 89 d1             	mov    %rdx,%rcx
  40c99b:	48 c1 e1 04          	shl    $0x4,%rcx
  40c99f:	48 8b 10             	mov    (%rax),%rdx
  40c9a2:	83 e2 0f             	and    $0xf,%edx
  40c9a5:	48 09 ca             	or     %rcx,%rdx
  40c9a8:	48 89 10             	mov    %rdx,(%rax)
	    _M_values = __store._M_args;
  40c9ab:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c9af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c9b3:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  40c9b7:	90                   	nop
  40c9b8:	c9                   	leave
  40c9b9:	c3                   	ret

000000000040c9ba <_ZNSt8__detail15__raise_and_addItEEbRT_ih>:
    __raise_and_add(_Tp& __val, int __base, unsigned char __c)
  40c9ba:	55                   	push   %rbp
  40c9bb:	48 89 e5             	mov    %rsp,%rbp
  40c9be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c9c2:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40c9c5:	89 d0                	mov    %edx,%eax
  40c9c7:	88 45 f0             	mov    %al,-0x10(%rbp)
      if (__builtin_mul_overflow(__val, __base, &__val)
  40c9ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c9ce:	0f b7 00             	movzwl (%rax),%eax
  40c9d1:	b9 00 00 00 00       	mov    $0x0,%ecx
  40c9d6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40c9d9:	48 63 d2             	movslq %edx,%rdx
  40c9dc:	0f b7 c0             	movzwl %ax,%eax
  40c9df:	48 0f af c2          	imul   %rdx,%rax
  40c9e3:	0f b7 d0             	movzwl %ax,%edx
  40c9e6:	48 39 d0             	cmp    %rdx,%rax
  40c9e9:	74 05                	je     40c9f0 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x36>
  40c9eb:	b9 01 00 00 00       	mov    $0x1,%ecx
  40c9f0:	89 c2                	mov    %eax,%edx
  40c9f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c9f6:	66 89 10             	mov    %dx,(%rax)
  40c9f9:	89 c8                	mov    %ecx,%eax
  40c9fb:	83 e0 01             	and    $0x1,%eax
	  || __builtin_add_overflow(__val, __c, &__val))
  40c9fe:	84 c0                	test   %al,%al
  40ca00:	75 2c                	jne    40ca2e <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x74>
  40ca02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ca06:	0f b7 10             	movzwl (%rax),%edx
  40ca09:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  40ca0d:	b9 00 00 00 00       	mov    $0x0,%ecx
  40ca12:	66 01 d0             	add    %dx,%ax
  40ca15:	73 05                	jae    40ca1c <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x62>
  40ca17:	b9 01 00 00 00       	mov    $0x1,%ecx
  40ca1c:	89 c2                	mov    %eax,%edx
  40ca1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ca22:	66 89 10             	mov    %dx,(%rax)
  40ca25:	89 c8                	mov    %ecx,%eax
  40ca27:	83 e0 01             	and    $0x1,%eax
  40ca2a:	84 c0                	test   %al,%al
  40ca2c:	74 07                	je     40ca35 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x7b>
  40ca2e:	b8 01 00 00 00       	mov    $0x1,%eax
  40ca33:	eb 05                	jmp    40ca3a <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x80>
  40ca35:	b8 00 00 00 00       	mov    $0x0,%eax
      if (__builtin_mul_overflow(__val, __base, &__val)
  40ca3a:	84 c0                	test   %al,%al
  40ca3c:	74 07                	je     40ca45 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x8b>
	return false;
  40ca3e:	b8 00 00 00 00       	mov    $0x0,%eax
  40ca43:	eb 05                	jmp    40ca4a <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x90>
      return true;
  40ca45:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40ca4a:	5d                   	pop    %rbp
  40ca4b:	c3                   	ret

000000000040ca4c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40ca4c:	55                   	push   %rbp
  40ca4d:	48 89 e5             	mov    %rsp,%rbp
  40ca50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40ca54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ca58:	5d                   	pop    %rbp
  40ca59:	c3                   	ret

000000000040ca5a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40ca5a:	55                   	push   %rbp
  40ca5b:	48 89 e5             	mov    %rsp,%rbp
  40ca5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40ca62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ca66:	5d                   	pop    %rbp
  40ca67:	c3                   	ret

000000000040ca68 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>:
	auto __incr = [&, this] {
  40ca68:	55                   	push   %rbp
  40ca69:	48 89 e5             	mov    %rsp,%rbp
  40ca6c:	48 83 ec 10          	sub    $0x10,%rsp
  40ca70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  ++__to_incr;
  40ca74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ca78:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ca7c:	0f b6 10             	movzbl (%rax),%edx
  40ca7f:	83 c2 01             	add    $0x1,%edx
  40ca82:	88 10                	mov    %dl,(%rax)
	  return ++_M_curr();
  40ca84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ca88:	48 8b 00             	mov    (%rax),%rax
  40ca8b:	48 89 c7             	mov    %rax,%rdi
  40ca8e:	e8 93 e0 ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40ca93:	48 8b 10             	mov    (%rax),%rdx
  40ca96:	48 83 c2 01          	add    $0x1,%rdx
  40ca9a:	48 89 10             	mov    %rdx,(%rax)
  40ca9d:	48 8b 00             	mov    (%rax),%rax
	auto __incr = [&, this] {
  40caa0:	c9                   	leave
  40caa1:	c3                   	ret

000000000040caa2 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev>:
      _M_read_utf8()
  40caa2:	55                   	push   %rbp
  40caa3:	48 89 e5             	mov    %rsp,%rbp
  40caa6:	48 83 ec 50          	sub    $0x50,%rsp
  40caaa:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	_Guard<_Iter> __g{this, _M_curr()};
  40caae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cab2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40cab6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40caba:	48 89 c7             	mov    %rax,%rdi
  40cabd:	e8 64 e0 ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cac2:	48 8b 00             	mov    (%rax),%rax
  40cac5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	char32_t __c{};
  40cac9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	const uint8_t __lo_bound = 0x80, __hi_bound = 0xBF;
  40cad0:	c6 45 fb 80          	movb   $0x80,-0x5(%rbp)
  40cad4:	c6 45 fa bf          	movb   $0xbf,-0x6(%rbp)
	uint8_t __u = *_M_curr()++;
  40cad8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cadc:	48 89 c7             	mov    %rax,%rdi
  40cadf:	e8 42 e0 ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cae4:	48 8b 10             	mov    (%rax),%rdx
  40cae7:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  40caeb:	48 89 08             	mov    %rcx,(%rax)
  40caee:	0f b6 02             	movzbl (%rdx),%eax
  40caf1:	88 45 f9             	mov    %al,-0x7(%rbp)
	uint8_t __to_incr = 1;
  40caf4:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	auto __incr = [&, this] {
  40caf8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cafc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40cb00:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40cb04:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	if (__u <= 0x7F) [[likely]]      // 0x00 to 0x7F
  40cb08:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cb0c:	84 c0                	test   %al,%al
  40cb0e:	78 0c                	js     40cb1c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x7a>
	  __c = __u;
  40cb10:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cb14:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cb17:	e9 7d 03 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u < 0xC2) [[unlikely]]
  40cb1c:	80 7d f9 c1          	cmpb   $0xc1,-0x7(%rbp)
  40cb20:	77 14                	ja     40cb36 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x94>
	  __c = _S_error();
  40cb22:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cb26:	48 89 c7             	mov    %rax,%rdi
  40cb29:	e8 a2 07 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cb2e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cb31:	e9 63 03 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (_M_curr() == _M_last) [[unlikely]]
  40cb36:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cb3a:	48 89 c7             	mov    %rax,%rdi
  40cb3d:	e8 e4 df ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cb42:	48 8b 10             	mov    (%rax),%rdx
  40cb45:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cb49:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cb4d:	48 39 c2             	cmp    %rax,%rdx
  40cb50:	0f 94 c0             	sete   %al
  40cb53:	84 c0                	test   %al,%al
  40cb55:	74 14                	je     40cb6b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0xc9>
	  __c = _S_error();
  40cb57:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cb5b:	48 89 c7             	mov    %rax,%rdi
  40cb5e:	e8 6d 07 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cb63:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cb66:	e9 2e 03 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xDF) // 0xC2 to 0xDF
  40cb6b:	80 7d f9 df          	cmpb   $0xdf,-0x7(%rbp)
  40cb6f:	77 66                	ja     40cbd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x135>
	    __c = __u & 0x1F;
  40cb71:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cb75:	83 e0 1f             	and    $0x1f,%eax
  40cb78:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40cb7b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cb7f:	48 89 c7             	mov    %rax,%rdi
  40cb82:	e8 9f df ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cb87:	48 8b 00             	mov    (%rax),%rax
  40cb8a:	0f b6 00             	movzbl (%rax),%eax
  40cb8d:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40cb90:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cb94:	84 c0                	test   %al,%al
  40cb96:	79 06                	jns    40cb9e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0xfc>
  40cb98:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40cb9c:	76 14                	jbe    40cbb2 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x110>
	      __c = _S_error();
  40cb9e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cba2:	48 89 c7             	mov    %rax,%rdi
  40cba5:	e8 26 07 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cbaa:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cbad:	e9 e7 02 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40cbb2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cbb5:	c1 e0 06             	shl    $0x6,%eax
  40cbb8:	89 c2                	mov    %eax,%edx
  40cbba:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cbbe:	83 e0 3f             	and    $0x3f,%eax
  40cbc1:	09 d0                	or     %edx,%eax
  40cbc3:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__incr();
  40cbc6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cbca:	48 89 c7             	mov    %rax,%rdi
  40cbcd:	e8 96 fe ff ff       	call   40ca68 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cbd2:	e9 c2 02 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xEF) // 0xE0 to 0xEF
  40cbd7:	80 7d f9 ef          	cmpb   $0xef,-0x7(%rbp)
  40cbdb:	0f 87 14 01 00 00    	ja     40ccf5 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x253>
	    const uint8_t __lo_bound_2 = __u == 0xE0 ? 0xA0 : __lo_bound;
  40cbe1:	80 7d f9 e0          	cmpb   $0xe0,-0x7(%rbp)
  40cbe5:	75 07                	jne    40cbee <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x14c>
  40cbe7:	b8 a0 ff ff ff       	mov    $0xffffffa0,%eax
  40cbec:	eb 05                	jmp    40cbf3 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x151>
  40cbee:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
  40cbf3:	88 45 f6             	mov    %al,-0xa(%rbp)
	    const uint8_t __hi_bound_2 = __u == 0xED ? 0x9F : __hi_bound;
  40cbf6:	80 7d f9 ed          	cmpb   $0xed,-0x7(%rbp)
  40cbfa:	75 07                	jne    40cc03 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x161>
  40cbfc:	b8 9f ff ff ff       	mov    $0xffffff9f,%eax
  40cc01:	eb 05                	jmp    40cc08 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x166>
  40cc03:	b8 bf ff ff ff       	mov    $0xffffffbf,%eax
  40cc08:	88 45 f5             	mov    %al,-0xb(%rbp)
	    __c = __u & 0x0F;
  40cc0b:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cc0f:	83 e0 0f             	and    $0xf,%eax
  40cc12:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40cc15:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc19:	48 89 c7             	mov    %rax,%rdi
  40cc1c:	e8 05 df ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cc21:	48 8b 00             	mov    (%rax),%rax
  40cc24:	0f b6 00             	movzbl (%rax),%eax
  40cc27:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
  40cc2a:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cc2e:	3a 45 f6             	cmp    -0xa(%rbp),%al
  40cc31:	72 09                	jb     40cc3c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x19a>
  40cc33:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cc37:	38 45 f5             	cmp    %al,-0xb(%rbp)
  40cc3a:	73 14                	jae    40cc50 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x1ae>
	      __c = _S_error();
  40cc3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc40:	48 89 c7             	mov    %rax,%rdi
  40cc43:	e8 88 06 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cc48:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cc4b:	e9 49 02 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	    else if (__incr() == _M_last) [[unlikely]]
  40cc50:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cc54:	48 89 c7             	mov    %rax,%rdi
  40cc57:	e8 0c fe ff ff       	call   40ca68 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cc5c:	48 89 c2             	mov    %rax,%rdx
  40cc5f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc63:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cc67:	48 39 c2             	cmp    %rax,%rdx
  40cc6a:	0f 94 c0             	sete   %al
  40cc6d:	84 c0                	test   %al,%al
  40cc6f:	74 14                	je     40cc85 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x1e3>
	      __c = _S_error();
  40cc71:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc75:	48 89 c7             	mov    %rax,%rdi
  40cc78:	e8 53 06 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cc7d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cc80:	e9 14 02 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40cc85:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cc88:	c1 e0 06             	shl    $0x6,%eax
  40cc8b:	89 c2                	mov    %eax,%edx
  40cc8d:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cc91:	83 e0 3f             	and    $0x3f,%eax
  40cc94:	09 d0                	or     %edx,%eax
  40cc96:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__u = *_M_curr();
  40cc99:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc9d:	48 89 c7             	mov    %rax,%rdi
  40cca0:	e8 81 de ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cca5:	48 8b 00             	mov    (%rax),%rax
  40cca8:	0f b6 00             	movzbl (%rax),%eax
  40ccab:	88 45 f9             	mov    %al,-0x7(%rbp)
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40ccae:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ccb2:	84 c0                	test   %al,%al
  40ccb4:	79 06                	jns    40ccbc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x21a>
  40ccb6:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40ccba:	76 14                	jbe    40ccd0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x22e>
		  __c = _S_error();
  40ccbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ccc0:	48 89 c7             	mov    %rax,%rdi
  40ccc3:	e8 08 06 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40ccc8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cccb:	e9 c9 01 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		    __c = (__c << 6) | (__u & 0x3F);
  40ccd0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ccd3:	c1 e0 06             	shl    $0x6,%eax
  40ccd6:	89 c2                	mov    %eax,%edx
  40ccd8:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ccdc:	83 e0 3f             	and    $0x3f,%eax
  40ccdf:	09 d0                	or     %edx,%eax
  40cce1:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    __incr();
  40cce4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cce8:	48 89 c7             	mov    %rax,%rdi
  40cceb:	e8 78 fd ff ff       	call   40ca68 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40ccf0:	e9 a4 01 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xF4) // 0xF0 to 0xF4
  40ccf5:	80 7d f9 f4          	cmpb   $0xf4,-0x7(%rbp)
  40ccf9:	0f 87 8b 01 00 00    	ja     40ce8a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3e8>
	    const uint8_t __lo_bound_2 = __u == 0xF0 ? 0x90 : __lo_bound;
  40ccff:	80 7d f9 f0          	cmpb   $0xf0,-0x7(%rbp)
  40cd03:	75 07                	jne    40cd0c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x26a>
  40cd05:	b8 90 ff ff ff       	mov    $0xffffff90,%eax
  40cd0a:	eb 05                	jmp    40cd11 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x26f>
  40cd0c:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
  40cd11:	88 45 f8             	mov    %al,-0x8(%rbp)
	    const uint8_t __hi_bound_2 = __u == 0xF4 ? 0x8F : __hi_bound;
  40cd14:	80 7d f9 f4          	cmpb   $0xf4,-0x7(%rbp)
  40cd18:	75 07                	jne    40cd21 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x27f>
  40cd1a:	b8 8f ff ff ff       	mov    $0xffffff8f,%eax
  40cd1f:	eb 05                	jmp    40cd26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x284>
  40cd21:	b8 bf ff ff ff       	mov    $0xffffffbf,%eax
  40cd26:	88 45 f7             	mov    %al,-0x9(%rbp)
	    __c = __u & 0x07;
  40cd29:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cd2d:	83 e0 07             	and    $0x7,%eax
  40cd30:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40cd33:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cd37:	48 89 c7             	mov    %rax,%rdi
  40cd3a:	e8 e7 dd ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cd3f:	48 8b 00             	mov    (%rax),%rax
  40cd42:	0f b6 00             	movzbl (%rax),%eax
  40cd45:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
  40cd48:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cd4c:	3a 45 f8             	cmp    -0x8(%rbp),%al
  40cd4f:	72 09                	jb     40cd5a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x2b8>
  40cd51:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cd55:	38 45 f7             	cmp    %al,-0x9(%rbp)
  40cd58:	73 14                	jae    40cd6e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x2cc>
	      __c = _S_error();
  40cd5a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cd5e:	48 89 c7             	mov    %rax,%rdi
  40cd61:	e8 6a 05 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cd66:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cd69:	e9 2b 01 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	    else if (__incr() == _M_last) [[unlikely]]
  40cd6e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cd72:	48 89 c7             	mov    %rax,%rdi
  40cd75:	e8 ee fc ff ff       	call   40ca68 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cd7a:	48 89 c2             	mov    %rax,%rdx
  40cd7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cd81:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cd85:	48 39 c2             	cmp    %rax,%rdx
  40cd88:	0f 94 c0             	sete   %al
  40cd8b:	84 c0                	test   %al,%al
  40cd8d:	74 14                	je     40cda3 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x301>
	      __c = _S_error();
  40cd8f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cd93:	48 89 c7             	mov    %rax,%rdi
  40cd96:	e8 35 05 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cd9b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cd9e:	e9 f6 00 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40cda3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cda6:	c1 e0 06             	shl    $0x6,%eax
  40cda9:	89 c2                	mov    %eax,%edx
  40cdab:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cdaf:	83 e0 3f             	and    $0x3f,%eax
  40cdb2:	09 d0                	or     %edx,%eax
  40cdb4:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__u = *_M_curr();
  40cdb7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cdbb:	48 89 c7             	mov    %rax,%rdi
  40cdbe:	e8 63 dd ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cdc3:	48 8b 00             	mov    (%rax),%rax
  40cdc6:	0f b6 00             	movzbl (%rax),%eax
  40cdc9:	88 45 f9             	mov    %al,-0x7(%rbp)
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40cdcc:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cdd0:	84 c0                	test   %al,%al
  40cdd2:	79 06                	jns    40cdda <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x338>
  40cdd4:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40cdd8:	76 14                	jbe    40cdee <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x34c>
		  __c = _S_error();
  40cdda:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cdde:	48 89 c7             	mov    %rax,%rdi
  40cde1:	e8 ea 04 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cde6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cde9:	e9 ab 00 00 00       	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		else if (__incr() == _M_last) [[unlikely]]
  40cdee:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cdf2:	48 89 c7             	mov    %rax,%rdi
  40cdf5:	e8 6e fc ff ff       	call   40ca68 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cdfa:	48 89 c2             	mov    %rax,%rdx
  40cdfd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce01:	48 8b 40 20          	mov    0x20(%rax),%rax
  40ce05:	48 39 c2             	cmp    %rax,%rdx
  40ce08:	0f 94 c0             	sete   %al
  40ce0b:	84 c0                	test   %al,%al
  40ce0d:	74 11                	je     40ce20 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x37e>
		  __c = _S_error();
  40ce0f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce13:	48 89 c7             	mov    %rax,%rdi
  40ce16:	e8 b5 04 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40ce1b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40ce1e:	eb 79                	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		    __c = (__c << 6) | (__u & 0x3F);
  40ce20:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ce23:	c1 e0 06             	shl    $0x6,%eax
  40ce26:	89 c2                	mov    %eax,%edx
  40ce28:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ce2c:	83 e0 3f             	and    $0x3f,%eax
  40ce2f:	09 d0                	or     %edx,%eax
  40ce31:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    __u = *_M_curr();
  40ce34:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce38:	48 89 c7             	mov    %rax,%rdi
  40ce3b:	e8 e6 dc ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40ce40:	48 8b 00             	mov    (%rax),%rax
  40ce43:	0f b6 00             	movzbl (%rax),%eax
  40ce46:	88 45 f9             	mov    %al,-0x7(%rbp)
		    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40ce49:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ce4d:	84 c0                	test   %al,%al
  40ce4f:	79 06                	jns    40ce57 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3b5>
  40ce51:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40ce55:	76 11                	jbe    40ce68 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3c6>
		      __c = _S_error();
  40ce57:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce5b:	48 89 c7             	mov    %rax,%rdi
  40ce5e:	e8 6d 04 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40ce63:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40ce66:	eb 31                	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
			__c = (__c << 6) | (__u & 0x3F);
  40ce68:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ce6b:	c1 e0 06             	shl    $0x6,%eax
  40ce6e:	89 c2                	mov    %eax,%edx
  40ce70:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ce74:	83 e0 3f             	and    $0x3f,%eax
  40ce77:	09 d0                	or     %edx,%eax
  40ce79:	89 45 fc             	mov    %eax,-0x4(%rbp)
			__incr();
  40ce7c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ce80:	48 89 c7             	mov    %rax,%rdi
  40ce83:	e8 e0 fb ff ff       	call   40ca68 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40ce88:	eb 0f                	jmp    40ce99 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	  __c = _S_error();
  40ce8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce8e:	48 89 c7             	mov    %rax,%rdi
  40ce91:	e8 3a 04 00 00       	call   40d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40ce96:	89 45 fc             	mov    %eax,-0x4(%rbp)
	_M_update(__c, __to_incr);
  40ce99:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  40ce9d:	0f b6 d0             	movzbl %al,%edx
  40cea0:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40cea3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cea7:	89 ce                	mov    %ecx,%esi
  40cea9:	48 89 c7             	mov    %rax,%rdi
  40ceac:	e8 61 04 00 00       	call   40d312 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE9_M_updateEDih>
      }
  40ceb1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40ceb5:	48 89 c7             	mov    %rax,%rdi
  40ceb8:	e8 d9 03 00 00       	call   40d296 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE6_GuardIS2_ED1Ev>
  40cebd:	c9                   	leave
  40cebe:	c3                   	ret

000000000040cebf <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJiEE11_S_make_eltIiEENS_10_Arg_valueIS4_EERT_>:
	_S_make_elt(_Tp& __v)
  40cebf:	55                   	push   %rbp
  40cec0:	48 89 e5             	mov    %rsp,%rbp
  40cec3:	48 83 ec 50          	sub    $0x50,%rsp
  40cec7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	  basic_format_arg<_Context> __arg(__v);
  40cecb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40cecf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40ced3:	48 89 d6             	mov    %rdx,%rsi
  40ced6:	48 89 c7             	mov    %rax,%rdi
  40ced9:	e8 a6 04 00 00       	call   40d384 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IiEERT_>
	    return __arg._M_val;
  40cede:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cee2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cee6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ceea:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40ceee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cef2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
	}
  40cef6:	c9                   	leave
  40cef7:	c3                   	ret

000000000040cef8 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>:
	_S_make_elt(_Tp& __v)
  40cef8:	55                   	push   %rbp
  40cef9:	48 89 e5             	mov    %rsp,%rbp
  40cefc:	48 83 ec 50          	sub    $0x50,%rsp
  40cf00:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	  basic_format_arg<_Context> __arg(__v);
  40cf04:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40cf08:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40cf0c:	48 89 d6             	mov    %rdx,%rsi
  40cf0f:	48 89 c7             	mov    %rax,%rdi
  40cf12:	e8 9d 04 00 00       	call   40d3b4 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_>
	    return __arg._M_val;
  40cf17:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cf1b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cf1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40cf23:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40cf27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cf2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
	}
  40cf2f:	c9                   	leave
  40cf30:	c3                   	ret

000000000040cf31 <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40cf31:	55                   	push   %rbp
  40cf32:	48 89 e5             	mov    %rsp,%rbp
  40cf35:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  40cf39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf3d:	5d                   	pop    %rbp
  40cf3e:	c3                   	ret
  40cf3f:	90                   	nop

000000000040cf40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
  40cf40:	55                   	push   %rbp
  40cf41:	48 89 e5             	mov    %rsp,%rbp
  40cf44:	53                   	push   %rbx
  40cf45:	48 83 ec 28          	sub    $0x28,%rsp
  40cf49:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40cf4d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	return (less<const _CharT*>()(__s, _M_data())
  40cf51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cf55:	48 89 c7             	mov    %rax,%rdi
  40cf58:	e8 77 a5 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40cf5d:	48 89 c2             	mov    %rax,%rdx
  40cf60:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40cf64:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
  40cf68:	48 89 ce             	mov    %rcx,%rsi
  40cf6b:	48 89 c7             	mov    %rax,%rdi
  40cf6e:	e8 d1 04 00 00       	call   40d444 <_ZNKSt4lessIPKcEclES1_S1_>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
  40cf73:	84 c0                	test   %al,%al
  40cf75:	75 36                	jne    40cfad <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x6d>
  40cf77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cf7b:	48 89 c7             	mov    %rax,%rdi
  40cf7e:	e8 51 a5 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40cf83:	48 89 c3             	mov    %rax,%rbx
  40cf86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cf8a:	48 89 c7             	mov    %rax,%rdi
  40cf8d:	e8 bc 7d ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40cf92:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40cf96:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cf9a:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  40cf9e:	48 89 ce             	mov    %rcx,%rsi
  40cfa1:	48 89 c7             	mov    %rax,%rdi
  40cfa4:	e8 9b 04 00 00       	call   40d444 <_ZNKSt4lessIPKcEclES1_S1_>
  40cfa9:	84 c0                	test   %al,%al
  40cfab:	74 07                	je     40cfb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x74>
  40cfad:	b8 01 00 00 00       	mov    $0x1,%eax
  40cfb2:	eb 05                	jmp    40cfb9 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x79>
  40cfb4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40cfb9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40cfbd:	c9                   	leave
  40cfbe:	c3                   	ret

000000000040cfbf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
  40cfbf:	55                   	push   %rbp
  40cfc0:	48 89 e5             	mov    %rsp,%rbp
  40cfc3:	48 83 ec 20          	sub    $0x20,%rsp
  40cfc7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40cfcb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40cfcf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
  40cfd3:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
  40cfd8:	75 15                	jne    40cfef <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
  40cfda:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40cfde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfe2:	48 89 d6             	mov    %rdx,%rsi
  40cfe5:	48 89 c7             	mov    %rax,%rdi
  40cfe8:	e8 f3 76 ff ff       	call   4046e0 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40cfed:	eb 17                	jmp    40d006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x47>
	  traits_type::move(__d, __s, __n);
  40cfef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cff3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40cff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cffb:	48 89 ce             	mov    %rcx,%rsi
  40cffe:	48 89 c7             	mov    %rax,%rdi
  40d001:	e8 b1 78 ff ff       	call   4048b7 <_ZNSt11char_traitsIcE4moveEPcPKcm>
      }
  40d006:	90                   	nop
  40d007:	c9                   	leave
  40d008:	c3                   	ret
  40d009:	90                   	nop

000000000040d00a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40d00a:	55                   	push   %rbp
  40d00b:	48 89 e5             	mov    %rsp,%rbp
  40d00e:	48 83 ec 50          	sub    $0x50,%rsp
  40d012:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d016:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d01a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40d01e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40d022:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
      const size_type __how_much = length() - __pos - __len1;
  40d026:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d02a:	48 89 c7             	mov    %rax,%rdi
  40d02d:	e8 2c a8 ff ff       	call   40785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40d032:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  40d036:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40d03a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      size_type __new_capacity = length() + __len2 - __len1;
  40d03e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d042:	48 89 c7             	mov    %rax,%rdi
  40d045:	e8 14 a8 ff ff       	call   40785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40d04a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d04e:	48 01 d0             	add    %rdx,%rax
  40d051:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40d055:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __r = _M_create(__new_capacity, capacity());
  40d059:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d05d:	48 89 c7             	mov    %rax,%rdi
  40d060:	e8 13 e2 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40d065:	48 89 c2             	mov    %rax,%rdx
  40d068:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  40d06c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d070:	48 89 ce             	mov    %rcx,%rsi
  40d073:	48 89 c7             	mov    %rax,%rdi
  40d076:	e8 c9 dd ff ff       	call   40ae44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  40d07b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__pos)
  40d07f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40d084:	74 22                	je     40d0a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x9e>
	this->_S_copy(__r, _M_data(), __pos);
  40d086:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d08a:	48 89 c7             	mov    %rax,%rdi
  40d08d:	e8 42 a4 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40d092:	48 89 c1             	mov    %rax,%rcx
  40d095:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d099:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d09d:	48 89 ce             	mov    %rcx,%rsi
  40d0a0:	48 89 c7             	mov    %rax,%rdi
  40d0a3:	e8 30 ef ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__s && __len2)
  40d0a8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40d0ad:	74 26                	je     40d0d5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
  40d0af:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  40d0b4:	74 1f                	je     40d0d5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
	this->_S_copy(__r + __pos, __s, __len2);
  40d0b6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d0ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d0be:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40d0c2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d0c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d0ca:	48 89 c6             	mov    %rax,%rsi
  40d0cd:	48 89 cf             	mov    %rcx,%rdi
  40d0d0:	e8 03 ef ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__how_much)
  40d0d5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40d0da:	74 3d                	je     40d119 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x10f>
		      _M_data() + __pos + __len1, __how_much);
  40d0dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d0e0:	48 89 c7             	mov    %rax,%rdi
  40d0e3:	e8 ec a3 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40d0e8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40d0ec:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d0f0:	48 01 ca             	add    %rcx,%rdx
  40d0f3:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
	this->_S_copy(__r + __pos + __len2,
  40d0f7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d0fb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d0ff:	48 01 c2             	add    %rax,%rdx
  40d102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d106:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40d10a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d10e:	48 89 c2             	mov    %rax,%rdx
  40d111:	48 89 cf             	mov    %rcx,%rdi
  40d114:	e8 bf ee ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
  40d119:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d11d:	48 89 c7             	mov    %rax,%rdi
  40d120:	e8 c9 c5 ff ff       	call   4096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
  40d125:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d12d:	48 89 d6             	mov    %rdx,%rsi
  40d130:	48 89 c7             	mov    %rax,%rdi
  40d133:	e8 0e c6 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
  40d138:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d13c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d140:	48 89 d6             	mov    %rdx,%rsi
  40d143:	48 89 c7             	mov    %rax,%rdi
  40d146:	e8 15 c6 ff ff       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    }
  40d14b:	90                   	nop
  40d14c:	c9                   	leave
  40d14d:	c3                   	ret

000000000040d14e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>:
	    }
	}

      [[nodiscard]]
      constexpr span<element_type, dynamic_extent>
      subspan(size_type __offset, size_type __count = dynamic_extent) const
  40d14e:	55                   	push   %rbp
  40d14f:	48 89 e5             	mov    %rsp,%rbp
  40d152:	53                   	push   %rbx
  40d153:	48 83 ec 38          	sub    $0x38,%rsp
  40d157:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d15b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d15f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40d163:	b8 00 00 00 00       	mov    $0x0,%eax
      noexcept
      {
	__glibcxx_assert(__offset <= size());
  40d168:	84 c0                	test   %al,%al
  40d16a:	74 1e                	je     40d18a <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x3c>
  40d16c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d170:	48 89 c7             	mov    %rax,%rdi
  40d173:	e8 7a 83 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d178:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40d17c:	0f 92 c0             	setb   %al
  40d17f:	0f b6 c0             	movzbl %al,%eax
  40d182:	48 85 c0             	test   %rax,%rax
  40d185:	0f 95 c0             	setne  %al
  40d188:	84 c0                	test   %al,%al
	if (__count == dynamic_extent)
  40d18a:	48 83 7d c8 ff       	cmpq   $0xffffffffffffffff,-0x38(%rbp)
  40d18f:	75 16                	jne    40d1a7 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x59>
	  __count = this->size() - __offset;
  40d191:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d195:	48 89 c7             	mov    %rax,%rdi
  40d198:	e8 55 83 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d19d:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  40d1a1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d1a5:	eb 59                	jmp    40d200 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0xb2>
  40d1a7:	b8 00 00 00 00       	mov    $0x0,%eax
	else
	  {
	    __glibcxx_assert(__count <= size());
  40d1ac:	84 c0                	test   %al,%al
  40d1ae:	74 1e                	je     40d1ce <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x80>
  40d1b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d1b4:	48 89 c7             	mov    %rax,%rdi
  40d1b7:	e8 36 83 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d1bc:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d1c0:	0f 92 c0             	setb   %al
  40d1c3:	0f b6 c0             	movzbl %al,%eax
  40d1c6:	48 85 c0             	test   %rax,%rax
  40d1c9:	0f 95 c0             	setne  %al
  40d1cc:	84 c0                	test   %al,%al
  40d1ce:	b8 00 00 00 00       	mov    $0x0,%eax
	    __glibcxx_assert(__offset + __count <= size());
  40d1d3:	84 c0                	test   %al,%al
  40d1d5:	74 29                	je     40d200 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0xb2>
  40d1d7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d1db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d1df:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  40d1e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d1e7:	48 89 c7             	mov    %rax,%rdi
  40d1ea:	e8 03 83 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d1ef:	48 39 d8             	cmp    %rbx,%rax
  40d1f2:	0f 92 c0             	setb   %al
  40d1f5:	0f b6 c0             	movzbl %al,%eax
  40d1f8:	48 85 c0             	test   %rax,%rax
  40d1fb:	0f 95 c0             	setne  %al
  40d1fe:	84 c0                	test   %al,%al
	  }
	return {this->data() + __offset, __count};
  40d200:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d204:	48 89 c7             	mov    %rax,%rdi
  40d207:	e8 d4 82 ff ff       	call   4054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40d20c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d210:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  40d214:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d218:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40d21c:	48 89 ce             	mov    %rcx,%rsi
  40d21f:	48 89 c7             	mov    %rax,%rdi
  40d222:	e8 15 e3 ff ff       	call   40b53c <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
  40d227:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d22b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
      }
  40d22f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d233:	c9                   	leave
  40d234:	c3                   	ret
  40d235:	90                   	nop

000000000040d236 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
  40d236:	55                   	push   %rbp
  40d237:	48 89 e5             	mov    %rsp,%rbp
  40d23a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d23e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_current += __n; return *this; }
  40d242:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d246:	48 8b 10             	mov    (%rax),%rdx
  40d249:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d24d:	48 01 c2             	add    %rax,%rdx
  40d250:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d254:	48 89 10             	mov    %rdx,(%rax)
  40d257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d25b:	5d                   	pop    %rbp
  40d25c:	c3                   	ret

000000000040d25d <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJPKcEE11_S_make_eltIA4_S5_EENS_10_Arg_valueIS4_EERT_>:
	_S_make_elt(_Tp& __v)
  40d25d:	55                   	push   %rbp
  40d25e:	48 89 e5             	mov    %rsp,%rbp
  40d261:	48 83 ec 50          	sub    $0x50,%rsp
  40d265:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	  basic_format_arg<_Context> __arg(__v);
  40d269:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d26d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d271:	48 89 d6             	mov    %rdx,%rsi
  40d274:	48 89 c7             	mov    %rax,%rdi
  40d277:	e8 fe 01 00 00       	call   40d47a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IA4_KcEERT_>
	    return __arg._M_val;
  40d27c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d280:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d284:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d288:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40d28c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d290:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
	}
  40d294:	c9                   	leave
  40d295:	c3                   	ret

000000000040d296 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE6_GuardIS2_ED1Ev>:
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
  40d296:	55                   	push   %rbp
  40d297:	48 89 e5             	mov    %rsp,%rbp
  40d29a:	53                   	push   %rbx
  40d29b:	48 83 ec 18          	sub    $0x18,%rsp
  40d29f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d2a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d2a7:	48 83 c0 08          	add    $0x8,%rax
  40d2ab:	48 89 c7             	mov    %rax,%rdi
  40d2ae:	e8 c5 ea ff ff       	call   40bd78 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
  40d2b3:	48 8b 18             	mov    (%rax),%rbx
  40d2b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d2ba:	48 8b 00             	mov    (%rax),%rax
  40d2bd:	48 89 c7             	mov    %rax,%rdi
  40d2c0:	e8 61 d8 ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40d2c5:	48 89 18             	mov    %rbx,(%rax)
  40d2c8:	90                   	nop
  40d2c9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d2cd:	c9                   	leave
  40d2ce:	c3                   	ret
  40d2cf:	90                   	nop

000000000040d2d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>:
      _S_error()
  40d2d0:	55                   	push   %rbp
  40d2d1:	48 89 e5             	mov    %rsp,%rbp
  40d2d4:	48 83 ec 20          	sub    $0x20,%rsp
  40d2d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char32_t __c = _ErrorHandler()();
  40d2dc:	48 8d 45 fb          	lea    -0x5(%rbp),%rax
  40d2e0:	48 89 c7             	mov    %rax,%rdi
  40d2e3:	e8 dc 7a ff ff       	call   404dc4 <_ZNKSt9__unicode5_ReplclEv>
  40d2e8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40d2eb:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__is_scalar_value(__c));
  40d2f0:	84 c0                	test   %al,%al
  40d2f2:	74 18                	je     40d30c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv+0x3c>
  40d2f4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d2f7:	89 c7                	mov    %eax,%edi
  40d2f9:	e8 8d 7a ff ff       	call   404d8b <_ZNSt9__unicode17__is_scalar_valueEDi>
  40d2fe:	83 f0 01             	xor    $0x1,%eax
  40d301:	0f b6 c0             	movzbl %al,%eax
  40d304:	48 85 c0             	test   %rax,%rax
  40d307:	0f 95 c0             	setne  %al
  40d30a:	84 c0                	test   %al,%al
	return __c;
  40d30c:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
  40d30f:	c9                   	leave
  40d310:	c3                   	ret
  40d311:	90                   	nop

000000000040d312 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE9_M_updateEDih>:
      _M_update(char32_t __c, uint8_t __to_incr)
  40d312:	55                   	push   %rbp
  40d313:	48 89 e5             	mov    %rsp,%rbp
  40d316:	53                   	push   %rbx
  40d317:	48 83 ec 18          	sub    $0x18,%rsp
  40d31b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d31f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  40d322:	89 d0                	mov    %edx,%eax
  40d324:	88 45 e0             	mov    %al,-0x20(%rbp)
	_M_to_increment = __to_incr;
  40d327:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d32b:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
  40d32f:	88 50 1a             	mov    %dl,0x1a(%rax)
	_M_buf_index = 0;
  40d332:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d336:	c6 40 18 00          	movb   $0x0,0x18(%rax)
	    _M_buf[0] = __c;
  40d33a:	8b 5d e4             	mov    -0x1c(%rbp),%ebx
  40d33d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d341:	be 00 00 00 00       	mov    $0x0,%esi
  40d346:	48 89 c7             	mov    %rax,%rdi
  40d349:	e8 5c 01 00 00       	call   40d4aa <_ZNSt5arrayIDiLm1EEixEm>
  40d34e:	89 18                	mov    %ebx,(%rax)
	    _M_buf_last = 1;
  40d350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d354:	c6 40 19 01          	movb   $0x1,0x19(%rax)
      }
  40d358:	90                   	nop
  40d359:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d35d:	c9                   	leave
  40d35e:	c3                   	ret

000000000040d35f <_ZSt9__advanceIPKclEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40d35f:	55                   	push   %rbp
  40d360:	48 89 e5             	mov    %rsp,%rbp
  40d363:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d367:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40d36b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d36f:	48 8b 10             	mov    (%rax),%rdx
  40d372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d376:	48 01 c2             	add    %rax,%rdx
  40d379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d37d:	48 89 10             	mov    %rdx,(%rax)
    }
  40d380:	90                   	nop
  40d381:	5d                   	pop    %rbp
  40d382:	c3                   	ret
  40d383:	90                   	nop

000000000040d384 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IiEERT_>:
	basic_format_arg(_Tp& __v) noexcept
  40d384:	55                   	push   %rbp
  40d385:	48 89 e5             	mov    %rsp,%rbp
  40d388:	48 83 ec 20          	sub    $0x20,%rsp
  40d38c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d390:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
  40d394:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d398:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      _Arg_value() : _M_none() { }
  40d39c:	90                   	nop
	    _M_set(static_cast<_Td>(__v));
  40d39d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d3a1:	8b 10                	mov    (%rax),%edx
  40d3a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3a7:	89 d6                	mov    %edx,%esi
  40d3a9:	48 89 c7             	mov    %rax,%rdi
  40d3ac:	e8 69 01 00 00       	call   40d51a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIiEEvT_>
	}
  40d3b1:	90                   	nop
  40d3b2:	c9                   	leave
  40d3b3:	c3                   	ret

000000000040d3b4 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_>:
	basic_format_arg(_Tp& __v) noexcept
  40d3b4:	55                   	push   %rbp
  40d3b5:	48 89 e5             	mov    %rsp,%rbp
  40d3b8:	53                   	push   %rbx
  40d3b9:	48 83 ec 38          	sub    $0x38,%rsp
  40d3bd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d3c1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	{
  40d3c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d3c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Arg_value() : _M_none() { }
  40d3cd:	90                   	nop
	    _M_set(_Td{__v.data(), __v.size()});
  40d3ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d3d2:	48 89 c7             	mov    %rax,%rdi
  40d3d5:	e8 d0 d3 ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  40d3da:	48 89 c3             	mov    %rax,%rbx
  40d3dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d3e1:	48 89 c7             	mov    %rax,%rdi
  40d3e4:	e8 65 79 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40d3e9:	48 89 c2             	mov    %rax,%rdx
  40d3ec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d3f0:	48 89 de             	mov    %rbx,%rsi
  40d3f3:	48 89 c7             	mov    %rax,%rdi
  40d3f6:	e8 af a0 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40d3fb:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40d3ff:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d403:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d407:	48 89 ce             	mov    %rcx,%rsi
  40d40a:	48 89 c7             	mov    %rax,%rdi
  40d40d:	e8 3e 01 00 00       	call   40d550 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setISt17basic_string_viewIcSt11char_traitsIcEEEEvT_>
	}
  40d412:	90                   	nop
  40d413:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d417:	c9                   	leave
  40d418:	c3                   	ret
  40d419:	90                   	nop

000000000040d41a <_ZNSt15__new_allocatorIcE10deallocateEPcm>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
  40d41a:	55                   	push   %rbp
  40d41b:	48 89 e5             	mov    %rsp,%rbp
  40d41e:	48 83 ec 20          	sub    $0x20,%rsp
  40d422:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d426:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d42a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  40d42e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d432:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d436:	48 89 d6             	mov    %rdx,%rsi
  40d439:	48 89 c7             	mov    %rax,%rdi
  40d43c:	e8 4f 6e ff ff       	call   404290 <_ZdlPvm@plt>
      }
  40d441:	c9                   	leave
  40d442:	c3                   	ret
  40d443:	90                   	nop

000000000040d444 <_ZNKSt4lessIPKcEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
  40d444:	55                   	push   %rbp
  40d445:	48 89 e5             	mov    %rsp,%rbp
  40d448:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d44c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d450:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40d454:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
  40d459:	84 c0                	test   %al,%al
  40d45b:	74 0d                	je     40d46a <_ZNKSt4lessIPKcEclES1_S1_+0x26>
	  return __x < __y;
  40d45d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d461:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40d465:	0f 92 c0             	setb   %al
  40d468:	eb 0e                	jmp    40d478 <_ZNKSt4lessIPKcEclES1_S1_+0x34>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
  40d46a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d46e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d472:	48 39 c2             	cmp    %rax,%rdx
  40d475:	0f 92 c0             	setb   %al
      }
  40d478:	5d                   	pop    %rbp
  40d479:	c3                   	ret

000000000040d47a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IA4_KcEERT_>:
	basic_format_arg(_Tp& __v) noexcept
  40d47a:	55                   	push   %rbp
  40d47b:	48 89 e5             	mov    %rsp,%rbp
  40d47e:	48 83 ec 20          	sub    $0x20,%rsp
  40d482:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d486:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
  40d48a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d48e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      _Arg_value() : _M_none() { }
  40d492:	90                   	nop
	    _M_set(static_cast<_Td>(__v));
  40d493:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40d497:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d49b:	48 89 d6             	mov    %rdx,%rsi
  40d49e:	48 89 c7             	mov    %rax,%rdi
  40d4a1:	e8 0a 01 00 00       	call   40d5b0 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIPKcEEvT_>
	}
  40d4a6:	90                   	nop
  40d4a7:	c9                   	leave
  40d4a8:	c3                   	ret
  40d4a9:	90                   	nop

000000000040d4aa <_ZNSt5arrayIDiLm1EEixEm>:
      operator[](size_type __n) noexcept
  40d4aa:	55                   	push   %rbp
  40d4ab:	48 89 e5             	mov    %rsp,%rbp
  40d4ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d4b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  40d4b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d4ba:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40d4c1:	00
  40d4c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d4c6:	48 01 d0             	add    %rdx,%rax
      }
  40d4c9:	5d                   	pop    %rbp
  40d4ca:	c3                   	ret
  40d4cb:	90                   	nop

000000000040d4cc <_ZNSt15__new_allocatorIcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  40d4cc:	55                   	push   %rbp
  40d4cd:	48 89 e5             	mov    %rsp,%rbp
  40d4d0:	48 83 ec 30          	sub    $0x30,%rsp
  40d4d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d4d8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40d4dc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40d4e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d4e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
  40d4e8:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  40d4ef:	ff ff 7f
	if (__builtin_expect(__n > this->_M_max_size(), false))
  40d4f2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40d4f6:	0f 92 c0             	setb   %al
  40d4f9:	0f b6 c0             	movzbl %al,%eax
  40d4fc:	48 85 c0             	test   %rax,%rax
  40d4ff:	0f 95 c0             	setne  %al
  40d502:	84 c0                	test   %al,%al
  40d504:	74 05                	je     40d50b <_ZNSt15__new_allocatorIcE8allocateEmPKv+0x3f>
	    std::__throw_bad_alloc();
  40d506:	e8 85 6b ff ff       	call   404090 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  40d50b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d50f:	48 89 c7             	mov    %rax,%rdi
  40d512:	e8 59 6d ff ff       	call   404270 <_Znwm@plt>
  40d517:	90                   	nop
      }
  40d518:	c9                   	leave
  40d519:	c3                   	ret

000000000040d51a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIiEEvT_>:
	_M_set(_Tp __v) noexcept
  40d51a:	55                   	push   %rbp
  40d51b:	48 89 e5             	mov    %rsp,%rbp
  40d51e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d522:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	  _M_type = _S_to_enum<_Tp>();
  40d525:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d529:	c6 40 10 03          	movb   $0x3,0x10(%rax)
	  _M_val._M_set(__v);
  40d52d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d531:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d535:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40d538:	89 45 f4             	mov    %eax,-0xc(%rbp)
	    _S_get<_Tp>(*this) = __v;
  40d53b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40d53e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d542:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    return __u._M_i;
  40d546:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	    _S_get<_Tp>(*this) = __v;
  40d54a:	89 10                	mov    %edx,(%rax)
	}
  40d54c:	90                   	nop
	}
  40d54d:	90                   	nop
  40d54e:	5d                   	pop    %rbp
  40d54f:	c3                   	ret

000000000040d550 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setISt17basic_string_viewIcSt11char_traitsIcEEEEvT_>:
	_M_set(_Tp __v) noexcept
  40d550:	55                   	push   %rbp
  40d551:	48 89 e5             	mov    %rsp,%rbp
  40d554:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d558:	48 89 f0             	mov    %rsi,%rax
  40d55b:	48 89 d1             	mov    %rdx,%rcx
  40d55e:	48 89 c0             	mov    %rax,%rax
  40d561:	ba 00 00 00 00       	mov    $0x0,%edx
  40d566:	48 89 ca             	mov    %rcx,%rdx
  40d569:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d56d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  _M_type = _S_to_enum<_Tp>();
  40d571:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d575:	c6 40 10 0b          	movb   $0xb,0x10(%rax)
	  _M_val._M_set(__v);
  40d579:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d57d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d581:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d585:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d589:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d58d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40d591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d595:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	    return __u._M_sv;
  40d599:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
	    _S_get<_Tp>(*this) = __v;
  40d59d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d5a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d5a5:	48 89 01             	mov    %rax,(%rcx)
  40d5a8:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	}
  40d5ac:	90                   	nop
	}
  40d5ad:	90                   	nop
  40d5ae:	5d                   	pop    %rbp
  40d5af:	c3                   	ret

000000000040d5b0 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIPKcEEvT_>:
	_M_set(_Tp __v) noexcept
  40d5b0:	55                   	push   %rbp
  40d5b1:	48 89 e5             	mov    %rsp,%rbp
  40d5b4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d5b8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  _M_type = _S_to_enum<_Tp>();
  40d5bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d5c0:	c6 40 10 0a          	movb   $0xa,0x10(%rax)
	  _M_val._M_set(__v);
  40d5c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d5c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d5cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d5d0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	    _S_get<_Tp>(*this) = __v;
  40d5d4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d5d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d5dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    return __u._M_str;
  40d5e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	    _S_get<_Tp>(*this) = __v;
  40d5e4:	48 89 10             	mov    %rdx,(%rax)
	}
  40d5e7:	90                   	nop
	}
  40d5e8:	90                   	nop
  40d5e9:	5d                   	pop    %rbp
  40d5ea:	c3                   	ret
  40d5eb:	90                   	nop

000000000040d5ec <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc>:
      _M_on_chars(iterator __last) override
  40d5ec:	55                   	push   %rbp
  40d5ed:	48 89 e5             	mov    %rsp,%rbp
  40d5f0:	53                   	push   %rbx
  40d5f1:	48 83 ec 28          	sub    $0x28,%rsp
  40d5f5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d5f9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	basic_string_view<_CharT> __str(this->begin(), __last);
  40d5fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d601:	48 89 c7             	mov    %rax,%rdi
  40d604:	e8 55 8b ff ff       	call   40615e <_ZNKSt8__format8_ScannerIcE5beginEv>
  40d609:	48 89 c1             	mov    %rax,%rcx
  40d60c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d610:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40d614:	48 89 ce             	mov    %rcx,%rsi
  40d617:	48 89 c7             	mov    %rax,%rdi
  40d61a:	e8 9f 8b ff ff       	call   4061be <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
	_M_fc.advance_to(__format::__write(_M_fc.out(), __str));
  40d61f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d623:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d627:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d62b:	48 8b 40 30          	mov    0x30(%rax),%rax
  40d62f:	48 89 c7             	mov    %rax,%rdi
  40d632:	e8 91 e2 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40d637:	48 89 c1             	mov    %rax,%rcx
  40d63a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40d63e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d642:	48 89 d6             	mov    %rdx,%rsi
  40d645:	48 89 c2             	mov    %rax,%rdx
  40d648:	48 89 cf             	mov    %rcx,%rdi
  40d64b:	e8 d2 10 00 00       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  40d650:	48 89 c6             	mov    %rax,%rsi
  40d653:	48 89 df             	mov    %rbx,%rdi
  40d656:	e8 31 11 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
      }
  40d65b:	90                   	nop
  40d65c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d660:	c9                   	leave
  40d661:	c3                   	ret

000000000040d662 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt9monostateEEDaS5_>:
	std::visit_format_arg([this](auto& __arg) {
  40d662:	55                   	push   %rbp
  40d663:	48 89 e5             	mov    %rsp,%rbp
  40d666:	48 83 ec 10          	sub    $0x10,%rsp
  40d66a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d66e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    __format::__invalid_arg_id_in_format_string();
  40d672:	e8 5d 7b ff ff       	call   4051d4 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
  40d677:	90                   	nop

000000000040d678 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIbEEDaS5_>:
	std::visit_format_arg([this](auto& __arg) {
  40d678:	55                   	push   %rbp
  40d679:	48 89 e5             	mov    %rsp,%rbp
  40d67c:	53                   	push   %rbx
  40d67d:	48 83 ec 38          	sub    $0x38,%rsp
  40d681:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d685:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d689:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d690:	00
  40d691:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d698:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d69f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6a3:	48 8b 00             	mov    (%rax),%rax
  40d6a6:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d6aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6ae:	48 8b 00             	mov    (%rax),%rax
  40d6b1:	48 83 c0 08          	add    $0x8,%rax
  40d6b5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d6b9:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d6bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d6c1:	48 89 d6             	mov    %rdx,%rsi
  40d6c4:	48 89 c7             	mov    %rax,%rdi
  40d6c7:	e8 22 19 00 00       	call   40efee <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE>
  40d6cc:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d6cd:	48 89 c6             	mov    %rax,%rsi
  40d6d0:	48 89 df             	mov    %rbx,%rdi
  40d6d3:	e8 3c 8c ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d6d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6dc:	48 8b 00             	mov    (%rax),%rax
  40d6df:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d6e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d6e7:	48 8b 00             	mov    (%rax),%rax
  40d6ea:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d6ee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d6f2:	0f b6 00             	movzbl (%rax),%eax
  40d6f5:	0f b6 c8             	movzbl %al,%ecx
  40d6f8:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d6fc:	89 ce                	mov    %ecx,%esi
  40d6fe:	48 89 c7             	mov    %rax,%rdi
  40d701:	e8 9e 11 00 00       	call   40e8a4 <_ZNKSt9formatterIbcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>
  40d706:	48 89 c6             	mov    %rax,%rsi
  40d709:	48 89 df             	mov    %rbx,%rdi
  40d70c:	e8 7b 10 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d711:	90                   	nop
  40d712:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d716:	c9                   	leave
  40d717:	c3                   	ret

000000000040d718 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIcEEDaS5_>:
  40d718:	55                   	push   %rbp
  40d719:	48 89 e5             	mov    %rsp,%rbp
  40d71c:	53                   	push   %rbx
  40d71d:	48 83 ec 28          	sub    $0x28,%rsp
  40d721:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d725:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	      _Formatter __f;
  40d729:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  40d730:	00
  40d731:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40d738:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d73f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d743:	48 8b 00             	mov    (%rax),%rax
  40d746:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d74a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d74e:	48 8b 00             	mov    (%rax),%rax
  40d751:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40d755:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40d759:	48 89 d6             	mov    %rdx,%rsi
  40d75c:	48 89 c7             	mov    %rax,%rdi
  40d75f:	e8 6e 11 00 00       	call   40e8d2 <_ZNSt9formatterIccE5parseERSt26basic_format_parse_contextIcE>
  40d764:	48 89 c6             	mov    %rax,%rsi
  40d767:	48 89 df             	mov    %rbx,%rdi
  40d76a:	e8 a5 8b ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d76f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d773:	48 8b 00             	mov    (%rax),%rax
  40d776:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d77a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d77e:	48 8b 00             	mov    (%rax),%rax
  40d781:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d785:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d789:	0f b6 00             	movzbl (%rax),%eax
  40d78c:	0f be c8             	movsbl %al,%ecx
  40d78f:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40d793:	89 ce                	mov    %ecx,%esi
  40d795:	48 89 c7             	mov    %rax,%rdi
  40d798:	e8 5b 11 00 00       	call   40e8f8 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40d79d:	48 89 c6             	mov    %rax,%rsi
  40d7a0:	48 89 df             	mov    %rbx,%rdi
  40d7a3:	e8 e4 0f 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d7a8:	90                   	nop
  40d7a9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d7ad:	c9                   	leave
  40d7ae:	c3                   	ret
  40d7af:	90                   	nop

000000000040d7b0 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIiEEDaS5_>:
  40d7b0:	55                   	push   %rbp
  40d7b1:	48 89 e5             	mov    %rsp,%rbp
  40d7b4:	53                   	push   %rbx
  40d7b5:	48 83 ec 38          	sub    $0x38,%rsp
  40d7b9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d7bd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d7c1:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d7c8:	00
  40d7c9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d7d0:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d7d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d7db:	48 8b 00             	mov    (%rax),%rax
  40d7de:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d7e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d7e6:	48 8b 00             	mov    (%rax),%rax
  40d7e9:	48 83 c0 08          	add    $0x8,%rax
  40d7ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d7f1:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d7f5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d7f9:	48 89 d6             	mov    %rdx,%rsi
  40d7fc:	48 89 c7             	mov    %rax,%rdi
  40d7ff:	e8 ea 90 ff ff       	call   4068ee <_ZNSt8__format15__formatter_intIcE8_M_parseIiEEPKcRSt26basic_format_parse_contextIcE>
  40d804:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d805:	48 89 c6             	mov    %rax,%rsi
  40d808:	48 89 df             	mov    %rbx,%rdi
  40d80b:	e8 04 8b ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d810:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d814:	48 8b 00             	mov    (%rax),%rax
  40d817:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d81b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d81f:	48 8b 00             	mov    (%rax),%rax
  40d822:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d826:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d82a:	8b 08                	mov    (%rax),%ecx
  40d82c:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d830:	89 ce                	mov    %ecx,%esi
  40d832:	48 89 c7             	mov    %rax,%rdi
  40d835:	e8 42 11 00 00       	call   40e97c <_ZNKSt9formatterIicE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEiRS7_>
  40d83a:	48 89 c6             	mov    %rax,%rsi
  40d83d:	48 89 df             	mov    %rbx,%rdi
  40d840:	e8 47 0f 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d845:	90                   	nop
  40d846:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d84a:	c9                   	leave
  40d84b:	c3                   	ret

000000000040d84c <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIjEEDaS5_>:
  40d84c:	55                   	push   %rbp
  40d84d:	48 89 e5             	mov    %rsp,%rbp
  40d850:	53                   	push   %rbx
  40d851:	48 83 ec 38          	sub    $0x38,%rsp
  40d855:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d859:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d85d:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d864:	00
  40d865:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d86c:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d873:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d877:	48 8b 00             	mov    (%rax),%rax
  40d87a:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d87e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d882:	48 8b 00             	mov    (%rax),%rax
  40d885:	48 83 c0 08          	add    $0x8,%rax
  40d889:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d88d:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d891:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d895:	48 89 d6             	mov    %rdx,%rsi
  40d898:	48 89 c7             	mov    %rax,%rdi
  40d89b:	e8 16 22 00 00       	call   40fab6 <_ZNSt8__format15__formatter_intIcE8_M_parseIjEEPKcRSt26basic_format_parse_contextIcE>
  40d8a0:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d8a1:	48 89 c6             	mov    %rax,%rsi
  40d8a4:	48 89 df             	mov    %rbx,%rdi
  40d8a7:	e8 68 8a ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d8ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d8b0:	48 8b 00             	mov    (%rax),%rax
  40d8b3:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d8b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d8bb:	48 8b 00             	mov    (%rax),%rax
  40d8be:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d8c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d8c6:	8b 08                	mov    (%rax),%ecx
  40d8c8:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d8cc:	89 ce                	mov    %ecx,%esi
  40d8ce:	48 89 c7             	mov    %rax,%rdi
  40d8d1:	e8 d0 10 00 00       	call   40e9a6 <_ZNKSt9formatterIjcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEjRS7_>
  40d8d6:	48 89 c6             	mov    %rax,%rsi
  40d8d9:	48 89 df             	mov    %rbx,%rdi
  40d8dc:	e8 ab 0e 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d8e1:	90                   	nop
  40d8e2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d8e6:	c9                   	leave
  40d8e7:	c3                   	ret

000000000040d8e8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIxEEDaS5_>:
  40d8e8:	55                   	push   %rbp
  40d8e9:	48 89 e5             	mov    %rsp,%rbp
  40d8ec:	53                   	push   %rbx
  40d8ed:	48 83 ec 38          	sub    $0x38,%rsp
  40d8f1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d8f5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d8f9:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d900:	00
  40d901:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d908:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d90f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d913:	48 8b 00             	mov    (%rax),%rax
  40d916:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d91a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d91e:	48 8b 00             	mov    (%rax),%rax
  40d921:	48 83 c0 08          	add    $0x8,%rax
  40d925:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d929:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d92d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d931:	48 89 d6             	mov    %rdx,%rsi
  40d934:	48 89 c7             	mov    %rax,%rdi
  40d937:	e8 5e 25 00 00       	call   40fe9a <_ZNSt8__format15__formatter_intIcE8_M_parseIxEEPKcRSt26basic_format_parse_contextIcE>
  40d93c:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d93d:	48 89 c6             	mov    %rax,%rsi
  40d940:	48 89 df             	mov    %rbx,%rdi
  40d943:	e8 cc 89 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d948:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d94c:	48 8b 00             	mov    (%rax),%rax
  40d94f:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d953:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d957:	48 8b 00             	mov    (%rax),%rax
  40d95a:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d95e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d962:	48 8b 08             	mov    (%rax),%rcx
  40d965:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d969:	48 89 ce             	mov    %rcx,%rsi
  40d96c:	48 89 c7             	mov    %rax,%rdi
  40d96f:	e8 5c 10 00 00       	call   40e9d0 <_ZNKSt9formatterIxcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorExRS7_>
  40d974:	48 89 c6             	mov    %rax,%rsi
  40d977:	48 89 df             	mov    %rbx,%rdi
  40d97a:	e8 0d 0e 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d97f:	90                   	nop
  40d980:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d984:	c9                   	leave
  40d985:	c3                   	ret

000000000040d986 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIyEEDaS5_>:
  40d986:	55                   	push   %rbp
  40d987:	48 89 e5             	mov    %rsp,%rbp
  40d98a:	53                   	push   %rbx
  40d98b:	48 83 ec 38          	sub    $0x38,%rsp
  40d98f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d993:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d997:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d99e:	00
  40d99f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d9a6:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d9ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9b1:	48 8b 00             	mov    (%rax),%rax
  40d9b4:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d9b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9bc:	48 8b 00             	mov    (%rax),%rax
  40d9bf:	48 83 c0 08          	add    $0x8,%rax
  40d9c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d9c7:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d9cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d9cf:	48 89 d6             	mov    %rdx,%rsi
  40d9d2:	48 89 c7             	mov    %rax,%rdi
  40d9d5:	e8 ce 28 00 00       	call   4102a8 <_ZNSt8__format15__formatter_intIcE8_M_parseIyEEPKcRSt26basic_format_parse_contextIcE>
  40d9da:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d9db:	48 89 c6             	mov    %rax,%rsi
  40d9de:	48 89 df             	mov    %rbx,%rdi
  40d9e1:	e8 2e 89 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d9e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9ea:	48 8b 00             	mov    (%rax),%rax
  40d9ed:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d9f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9f5:	48 8b 00             	mov    (%rax),%rax
  40d9f8:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d9fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40da00:	48 8b 08             	mov    (%rax),%rcx
  40da03:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40da07:	48 89 ce             	mov    %rcx,%rsi
  40da0a:	48 89 c7             	mov    %rax,%rdi
  40da0d:	e8 ec 0f 00 00       	call   40e9fe <_ZNKSt9formatterIycE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEyRS7_>
  40da12:	48 89 c6             	mov    %rax,%rsi
  40da15:	48 89 df             	mov    %rbx,%rdi
  40da18:	e8 6f 0d 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40da1d:	90                   	nop
  40da1e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40da22:	c9                   	leave
  40da23:	c3                   	ret

000000000040da24 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIfEEDaS5_>:
  40da24:	55                   	push   %rbp
  40da25:	48 89 e5             	mov    %rsp,%rbp
  40da28:	53                   	push   %rbx
  40da29:	48 83 ec 38          	sub    $0x38,%rsp
  40da2d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40da31:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40da35:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40da3c:	00
  40da3d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40da44:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40da4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da4f:	48 8b 00             	mov    (%rax),%rax
  40da52:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40da56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da5a:	48 8b 00             	mov    (%rax),%rax
  40da5d:	48 83 c0 08          	add    $0x8,%rax
  40da61:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40da65:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40da69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40da6d:	48 89 d6             	mov    %rdx,%rsi
  40da70:	48 89 c7             	mov    %rax,%rdi
  40da73:	e8 a0 2c 00 00       	call   410718 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40da78:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40da79:	48 89 c6             	mov    %rax,%rsi
  40da7c:	48 89 df             	mov    %rbx,%rdi
  40da7f:	e8 90 88 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40da84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da88:	48 8b 00             	mov    (%rax),%rax
  40da8b:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40da8f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da93:	48 8b 00             	mov    (%rax),%rax
  40da96:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40da9a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40da9e:	8b 10                	mov    (%rax),%edx
  40daa0:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40daa4:	48 89 ce             	mov    %rcx,%rsi
  40daa7:	66 0f 6e c2          	movd   %edx,%xmm0
  40daab:	48 89 c7             	mov    %rax,%rdi
  40daae:	e8 79 0f 00 00       	call   40ea2c <_ZNKSt9formatterIfcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEfRS7_>
  40dab3:	48 89 c6             	mov    %rax,%rsi
  40dab6:	48 89 df             	mov    %rbx,%rdi
  40dab9:	e8 ce 0c 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dabe:	90                   	nop
  40dabf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dac3:	c9                   	leave
  40dac4:	c3                   	ret
  40dac5:	90                   	nop

000000000040dac6 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIdEEDaS5_>:
  40dac6:	55                   	push   %rbp
  40dac7:	48 89 e5             	mov    %rsp,%rbp
  40daca:	53                   	push   %rbx
  40dacb:	48 83 ec 38          	sub    $0x38,%rsp
  40dacf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dad3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40dad7:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dade:	00
  40dadf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dae6:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40daed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40daf1:	48 8b 00             	mov    (%rax),%rax
  40daf4:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40daf8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dafc:	48 8b 00             	mov    (%rax),%rax
  40daff:	48 83 c0 08          	add    $0x8,%rax
  40db03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40db07:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40db0b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40db0f:	48 89 d6             	mov    %rdx,%rsi
  40db12:	48 89 c7             	mov    %rax,%rdi
  40db15:	e8 fe 2b 00 00       	call   410718 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40db1a:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40db1b:	48 89 c6             	mov    %rax,%rsi
  40db1e:	48 89 df             	mov    %rbx,%rdi
  40db21:	e8 ee 87 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40db26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db2a:	48 8b 00             	mov    (%rax),%rax
  40db2d:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40db31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db35:	48 8b 00             	mov    (%rax),%rax
  40db38:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40db3c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40db40:	48 8b 10             	mov    (%rax),%rdx
  40db43:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40db47:	48 89 ce             	mov    %rcx,%rsi
  40db4a:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  40db4f:	48 89 c7             	mov    %rax,%rdi
  40db52:	e8 07 0f 00 00       	call   40ea5e <_ZNKSt9formatterIdcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEdRS7_>
  40db57:	48 89 c6             	mov    %rax,%rsi
  40db5a:	48 89 df             	mov    %rbx,%rdi
  40db5d:	e8 2a 0c 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40db62:	90                   	nop
  40db63:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40db67:	c9                   	leave
  40db68:	c3                   	ret
  40db69:	90                   	nop

000000000040db6a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIeEEDaS5_>:
  40db6a:	55                   	push   %rbp
  40db6b:	48 89 e5             	mov    %rsp,%rbp
  40db6e:	53                   	push   %rbx
  40db6f:	48 83 ec 38          	sub    $0x38,%rsp
  40db73:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40db77:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40db7b:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40db82:	00
  40db83:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40db8a:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40db91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db95:	48 8b 00             	mov    (%rax),%rax
  40db98:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40db9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dba0:	48 8b 00             	mov    (%rax),%rax
  40dba3:	48 83 c0 08          	add    $0x8,%rax
  40dba7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dbab:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dbaf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dbb3:	48 89 d6             	mov    %rdx,%rsi
  40dbb6:	48 89 c7             	mov    %rax,%rdi
  40dbb9:	e8 5a 2b 00 00       	call   410718 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40dbbe:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dbbf:	48 89 c6             	mov    %rax,%rsi
  40dbc2:	48 89 df             	mov    %rbx,%rdi
  40dbc5:	e8 4a 87 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dbca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbce:	48 8b 00             	mov    (%rax),%rax
  40dbd1:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dbd5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbd9:	48 8b 00             	mov    (%rax),%rax
  40dbdc:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40dbe0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dbe4:	db 28                	fldt   (%rax)
  40dbe6:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dbea:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  40dbef:	db 3c 24             	fstpt  (%rsp)
  40dbf2:	48 89 d6             	mov    %rdx,%rsi
  40dbf5:	48 89 c7             	mov    %rax,%rdi
  40dbf8:	e8 95 0e 00 00       	call   40ea92 <_ZNKSt9formatterIecE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEeRS7_>
  40dbfd:	48 83 c4 10          	add    $0x10,%rsp
  40dc01:	48 89 c6             	mov    %rax,%rsi
  40dc04:	48 89 df             	mov    %rbx,%rdi
  40dc07:	e8 80 0b 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dc0c:	90                   	nop
  40dc0d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dc11:	c9                   	leave
  40dc12:	c3                   	ret
  40dc13:	90                   	nop

000000000040dc14 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKcEEDaS5_>:
  40dc14:	55                   	push   %rbp
  40dc15:	48 89 e5             	mov    %rsp,%rbp
  40dc18:	53                   	push   %rbx
  40dc19:	48 83 ec 38          	sub    $0x38,%rsp
  40dc1d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dc21:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40dc25:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dc2c:	00
  40dc2d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dc34:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dc3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc3f:	48 8b 00             	mov    (%rax),%rax
  40dc42:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dc46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc4a:	48 8b 00             	mov    (%rax),%rax
  40dc4d:	48 83 c0 08          	add    $0x8,%rax
  40dc51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dc55:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dc59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dc5d:	48 89 d6             	mov    %rdx,%rsi
  40dc60:	48 89 c7             	mov    %rax,%rdi
  40dc63:	e8 56 8a ff ff       	call   4066be <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>
  40dc68:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dc69:	48 89 c6             	mov    %rax,%rsi
  40dc6c:	48 89 df             	mov    %rbx,%rdi
  40dc6f:	e8 a0 86 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dc74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc78:	48 8b 00             	mov    (%rax),%rax
  40dc7b:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dc7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc83:	48 8b 00             	mov    (%rax),%rax
  40dc86:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40dc8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dc8e:	48 8b 08             	mov    (%rax),%rcx
  40dc91:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dc95:	48 89 ce             	mov    %rcx,%rsi
  40dc98:	48 89 c7             	mov    %rax,%rdi
  40dc9b:	e8 22 0e 00 00       	call   40eac2 <_ZNKSt9formatterIPKccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>
  40dca0:	48 89 c6             	mov    %rax,%rsi
  40dca3:	48 89 df             	mov    %rbx,%rdi
  40dca6:	e8 e1 0a 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dcab:	90                   	nop
  40dcac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dcb0:	c9                   	leave
  40dcb1:	c3                   	ret

000000000040dcb2 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt17basic_string_viewIcSt11char_traitsIcEEEEDaS5_>:
  40dcb2:	55                   	push   %rbp
  40dcb3:	48 89 e5             	mov    %rsp,%rbp
  40dcb6:	53                   	push   %rbx
  40dcb7:	48 83 ec 38          	sub    $0x38,%rsp
  40dcbb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dcbf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40dcc3:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dcca:	00
  40dccb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dcd2:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dcd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dcdd:	48 8b 00             	mov    (%rax),%rax
  40dce0:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dce4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dce8:	48 8b 00             	mov    (%rax),%rax
  40dceb:	48 83 c0 08          	add    $0x8,%rax
  40dcef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dcf3:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dcf7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dcfb:	48 89 d6             	mov    %rdx,%rsi
  40dcfe:	48 89 c7             	mov    %rax,%rdi
  40dd01:	e8 b8 89 ff ff       	call   4066be <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>
  40dd06:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dd07:	48 89 c6             	mov    %rax,%rsi
  40dd0a:	48 89 df             	mov    %rbx,%rdi
  40dd0d:	e8 02 86 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dd12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dd16:	48 8b 00             	mov    (%rax),%rax
  40dd19:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dd1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dd21:	48 8b 00             	mov    (%rax),%rax
  40dd24:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40dd28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dd2c:	48 8b 30             	mov    (%rax),%rsi
  40dd2f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40dd33:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dd37:	48 89 c7             	mov    %rax,%rdi
  40dd3a:	e8 cf 0d 00 00       	call   40eb0e <_ZNKSt9formatterISt17basic_string_viewIcSt11char_traitsIcEEcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES3_RSB_>
  40dd3f:	48 89 c6             	mov    %rax,%rsi
  40dd42:	48 89 df             	mov    %rbx,%rdi
  40dd45:	e8 42 0a 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dd4a:	90                   	nop
  40dd4b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dd4f:	c9                   	leave
  40dd50:	c3                   	ret
  40dd51:	90                   	nop

000000000040dd52 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKvEEDaS5_>:
  40dd52:	55                   	push   %rbp
  40dd53:	48 89 e5             	mov    %rsp,%rbp
  40dd56:	53                   	push   %rbx
  40dd57:	48 83 ec 28          	sub    $0x28,%rsp
  40dd5b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40dd5f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	      _Formatter __f;
  40dd63:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  40dd6a:	00
  40dd6b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40dd72:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dd79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dd7d:	48 8b 00             	mov    (%rax),%rax
  40dd80:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dd84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dd88:	48 8b 00             	mov    (%rax),%rax
  40dd8b:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40dd8f:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40dd93:	48 89 d6             	mov    %rdx,%rsi
  40dd96:	48 89 c7             	mov    %rax,%rdi
  40dd99:	e8 30 0e 00 00       	call   40ebce <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE>
  40dd9e:	48 89 c6             	mov    %rax,%rsi
  40dda1:	48 89 df             	mov    %rbx,%rdi
  40dda4:	e8 6b 85 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dda9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ddad:	48 8b 00             	mov    (%rax),%rax
  40ddb0:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40ddb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ddb8:	48 8b 00             	mov    (%rax),%rax
  40ddbb:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40ddbf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ddc3:	48 8b 08             	mov    (%rax),%rcx
  40ddc6:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40ddca:	48 89 ce             	mov    %rcx,%rsi
  40ddcd:	48 89 c7             	mov    %rax,%rdi
  40ddd0:	e8 31 0f 00 00       	call   40ed06 <_ZNKSt9formatterIPKvcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>
  40ddd5:	48 89 c6             	mov    %rax,%rsi
  40ddd8:	48 89 df             	mov    %rbx,%rdi
  40dddb:	e8 ac 09 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dde0:	90                   	nop
  40dde1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dde5:	c9                   	leave
  40dde6:	c3                   	ret
  40dde7:	90                   	nop

000000000040dde8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clINSt16basic_format_argISt20basic_format_contextIS2_cEE6handleEEEDaS5_>:
  40dde8:	55                   	push   %rbp
  40dde9:	48 89 e5             	mov    %rsp,%rbp
  40ddec:	48 83 ec 30          	sub    $0x30,%rsp
  40ddf0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ddf4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	    __arg.format(this->_M_pc, this->_M_fc);
  40ddf8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ddfc:	48 8b 00             	mov    (%rax),%rax
  40ddff:	48 8b 40 30          	mov    0x30(%rax),%rax
  40de03:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40de07:	48 8b 12             	mov    (%rdx),%rdx
  40de0a:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  40de0e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40de12:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40de16:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  40de1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  auto __f = reinterpret_cast<_Func>(this->_M_func);
  40de1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40de22:	48 8b 40 08          	mov    0x8(%rax),%rax
  40de26:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __f(__pc, __fc, this->_M_ptr);
  40de2a:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  40de2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40de32:	48 8b 10             	mov    (%rax),%rdx
  40de35:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40de39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40de3d:	48 89 ce             	mov    %rcx,%rsi
  40de40:	48 89 c7             	mov    %rax,%rdi
  40de43:	41 ff d0             	call   *%r8
	}
  40de46:	90                   	nop
	std::visit_format_arg([this](auto& __arg) {
  40de47:	90                   	nop
  40de48:	c9                   	leave
  40de49:	c3                   	ret

000000000040de4a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clInEEDaS5_>:
  40de4a:	55                   	push   %rbp
  40de4b:	48 89 e5             	mov    %rsp,%rbp
  40de4e:	53                   	push   %rbx
  40de4f:	48 83 ec 38          	sub    $0x38,%rsp
  40de53:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40de57:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40de5b:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40de62:	00
  40de63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40de6a:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40de71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40de75:	48 8b 00             	mov    (%rax),%rax
  40de78:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40de7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40de80:	48 8b 00             	mov    (%rax),%rax
  40de83:	48 83 c0 08          	add    $0x8,%rax
  40de87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40de8b:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40de8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40de93:	48 89 d6             	mov    %rdx,%rsi
  40de96:	48 89 c7             	mov    %rax,%rdi
  40de99:	e8 ce 54 00 00       	call   41336c <_ZNSt8__format15__formatter_intIcE8_M_parseInEEPKcRSt26basic_format_parse_contextIcE>
  40de9e:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40de9f:	48 89 c6             	mov    %rax,%rsi
  40dea2:	48 89 df             	mov    %rbx,%rdi
  40dea5:	e8 6a 84 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40deaa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40deae:	48 8b 00             	mov    (%rax),%rax
  40deb1:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40deb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40deb9:	48 8b 00             	mov    (%rax),%rax
  40debc:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40dec0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dec4:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40dec8:	48 8b 00             	mov    (%rax),%rax
  40decb:	48 89 c6             	mov    %rax,%rsi
  40dece:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40ded2:	48 89 c7             	mov    %rax,%rdi
  40ded5:	e8 ec 0e 00 00       	call   40edc6 <_ZNKSt9formatterIncE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEnRS7_>
  40deda:	48 89 c6             	mov    %rax,%rsi
  40dedd:	48 89 df             	mov    %rbx,%rdi
  40dee0:	e8 a7 08 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dee5:	90                   	nop
  40dee6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40deea:	c9                   	leave
  40deeb:	c3                   	ret

000000000040deec <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIoEEDaS5_>:
  40deec:	55                   	push   %rbp
  40deed:	48 89 e5             	mov    %rsp,%rbp
  40def0:	53                   	push   %rbx
  40def1:	48 83 ec 38          	sub    $0x38,%rsp
  40def5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40def9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40defd:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40df04:	00
  40df05:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40df0c:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40df13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40df17:	48 8b 00             	mov    (%rax),%rax
  40df1a:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40df1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40df22:	48 8b 00             	mov    (%rax),%rax
  40df25:	48 83 c0 08          	add    $0x8,%rax
  40df29:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40df2d:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40df31:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40df35:	48 89 d6             	mov    %rdx,%rsi
  40df38:	48 89 c7             	mov    %rax,%rdi
  40df3b:	e8 a8 58 00 00       	call   4137e8 <_ZNSt8__format15__formatter_intIcE8_M_parseIoEEPKcRSt26basic_format_parse_contextIcE>
  40df40:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40df41:	48 89 c6             	mov    %rax,%rsi
  40df44:	48 89 df             	mov    %rbx,%rdi
  40df47:	e8 c8 83 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40df4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40df50:	48 8b 00             	mov    (%rax),%rax
  40df53:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40df57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40df5b:	48 8b 00             	mov    (%rax),%rax
  40df5e:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40df62:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40df66:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40df6a:	48 8b 00             	mov    (%rax),%rax
  40df6d:	48 89 c6             	mov    %rax,%rsi
  40df70:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40df74:	48 89 c7             	mov    %rax,%rdi
  40df77:	e8 8e 0e 00 00       	call   40ee0a <_ZNKSt9formatterIocE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEoRS7_>
  40df7c:	48 89 c6             	mov    %rax,%rsi
  40df7f:	48 89 df             	mov    %rbx,%rdi
  40df82:	e8 05 08 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40df87:	90                   	nop
  40df88:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40df8c:	c9                   	leave
  40df8d:	c3                   	ret

000000000040df8e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIDF128_EEDaS5_>:
  40df8e:	55                   	push   %rbp
  40df8f:	48 89 e5             	mov    %rsp,%rbp
  40df92:	53                   	push   %rbx
  40df93:	48 83 ec 38          	sub    $0x38,%rsp
  40df97:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40df9b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40df9f:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dfa6:	00
  40dfa7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dfae:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dfb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dfb9:	48 8b 00             	mov    (%rax),%rax
  40dfbc:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dfc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dfc4:	48 8b 00             	mov    (%rax),%rax
  40dfc7:	48 83 c0 08          	add    $0x8,%rax
  40dfcb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dfcf:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dfd3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dfd7:	48 89 d6             	mov    %rdx,%rsi
  40dfda:	48 89 c7             	mov    %rax,%rdi
  40dfdd:	e8 36 27 00 00       	call   410718 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40dfe2:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dfe3:	48 89 c6             	mov    %rax,%rsi
  40dfe6:	48 89 df             	mov    %rbx,%rdi
  40dfe9:	e8 26 83 ff ff       	call   406314 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dfee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dff2:	48 8b 00             	mov    (%rax),%rax
  40dff5:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dff9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dffd:	48 8b 00             	mov    (%rax),%rax
  40e000:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e004:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40e008:	66 0f 6f 00          	movdqa (%rax),%xmm0
  40e00c:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40e010:	48 89 d6             	mov    %rdx,%rsi
  40e013:	48 89 c7             	mov    %rax,%rdi
  40e016:	e8 33 0e 00 00       	call   40ee4e <_ZNKSt9formatterIDF128_cE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEDF128_RS7_>
  40e01b:	48 89 c6             	mov    %rax,%rsi
  40e01e:	48 89 df             	mov    %rbx,%rdi
  40e021:	e8 66 07 00 00       	call   40e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40e026:	90                   	nop
  40e027:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e02b:	c9                   	leave
  40e02c:	c3                   	ret
  40e02d:	90                   	nop

000000000040e02e <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  40e02e:	55                   	push   %rbp
  40e02f:	48 89 e5             	mov    %rsp,%rbp
  40e032:	48 83 ec 30          	sub    $0x30,%rsp
  40e036:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40e03a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40e03e:	89 d0                	mov    %edx,%eax
  40e040:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  40e043:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  40e047:	89 c0                	mov    %eax,%eax
  40e049:	48 8b 04 c5 28 e2 41 	mov    0x41e228(,%rax,8),%rax
  40e050:	00
  40e051:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  40e053:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e057:	48 89 c7             	mov    %rax,%rdi
  40e05a:	e8 36 08 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e05f:	48 89 c2             	mov    %rax,%rdx
  40e062:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e066:	48 89 c6             	mov    %rax,%rsi
  40e069:	48 89 d7             	mov    %rdx,%rdi
  40e06c:	e8 f1 f5 ff ff       	call   40d662 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt9monostateEEDaS5_>
  40e071:	e9 2b 02 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  40e076:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e07a:	48 89 c7             	mov    %rax,%rdi
  40e07d:	e8 13 08 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e082:	48 89 c2             	mov    %rax,%rdx
  40e085:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e089:	48 89 c6             	mov    %rax,%rsi
  40e08c:	48 89 d7             	mov    %rdx,%rdi
  40e08f:	e8 e4 f5 ff ff       	call   40d678 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIbEEDaS5_>
  40e094:	e9 08 02 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  40e099:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e09d:	48 89 c7             	mov    %rax,%rdi
  40e0a0:	e8 f0 07 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e0a5:	48 89 c2             	mov    %rax,%rdx
  40e0a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e0ac:	48 89 c6             	mov    %rax,%rsi
  40e0af:	48 89 d7             	mov    %rdx,%rdi
  40e0b2:	e8 61 f6 ff ff       	call   40d718 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIcEEDaS5_>
  40e0b7:	e9 e5 01 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  40e0bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e0c0:	48 89 c7             	mov    %rax,%rdi
  40e0c3:	e8 cd 07 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e0c8:	48 89 c2             	mov    %rax,%rdx
  40e0cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e0cf:	48 89 c6             	mov    %rax,%rsi
  40e0d2:	48 89 d7             	mov    %rdx,%rdi
  40e0d5:	e8 d6 f6 ff ff       	call   40d7b0 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIiEEDaS5_>
  40e0da:	e9 c2 01 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  40e0df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e0e3:	48 89 c7             	mov    %rax,%rdi
  40e0e6:	e8 aa 07 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e0eb:	48 89 c2             	mov    %rax,%rdx
  40e0ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e0f2:	48 89 c6             	mov    %rax,%rsi
  40e0f5:	48 89 d7             	mov    %rdx,%rdi
  40e0f8:	e8 4f f7 ff ff       	call   40d84c <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIjEEDaS5_>
  40e0fd:	e9 9f 01 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  40e102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e106:	48 89 c7             	mov    %rax,%rdi
  40e109:	e8 87 07 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e10e:	48 89 c2             	mov    %rax,%rdx
  40e111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e115:	48 89 c6             	mov    %rax,%rsi
  40e118:	48 89 d7             	mov    %rdx,%rdi
  40e11b:	e8 c8 f7 ff ff       	call   40d8e8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIxEEDaS5_>
  40e120:	e9 7c 01 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  40e125:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e129:	48 89 c7             	mov    %rax,%rdi
  40e12c:	e8 64 07 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e131:	48 89 c2             	mov    %rax,%rdx
  40e134:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e138:	48 89 c6             	mov    %rax,%rsi
  40e13b:	48 89 d7             	mov    %rdx,%rdi
  40e13e:	e8 43 f8 ff ff       	call   40d986 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIyEEDaS5_>
  40e143:	e9 59 01 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  40e148:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e14c:	48 89 c7             	mov    %rax,%rdi
  40e14f:	e8 41 07 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e154:	48 89 c2             	mov    %rax,%rdx
  40e157:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e15b:	48 89 c6             	mov    %rax,%rsi
  40e15e:	48 89 d7             	mov    %rdx,%rdi
  40e161:	e8 be f8 ff ff       	call   40da24 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIfEEDaS5_>
  40e166:	e9 36 01 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  40e16b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e16f:	48 89 c7             	mov    %rax,%rdi
  40e172:	e8 1e 07 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e177:	48 89 c2             	mov    %rax,%rdx
  40e17a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e17e:	48 89 c6             	mov    %rax,%rsi
  40e181:	48 89 d7             	mov    %rdx,%rdi
  40e184:	e8 3d f9 ff ff       	call   40dac6 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIdEEDaS5_>
  40e189:	e9 13 01 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  40e18e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e192:	48 89 c7             	mov    %rax,%rdi
  40e195:	e8 fb 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e19a:	48 89 c2             	mov    %rax,%rdx
  40e19d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e1a1:	48 89 c6             	mov    %rax,%rsi
  40e1a4:	48 89 d7             	mov    %rdx,%rdi
  40e1a7:	e8 be f9 ff ff       	call   40db6a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIeEEDaS5_>
  40e1ac:	e9 f0 00 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  40e1b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e1b5:	48 89 c7             	mov    %rax,%rdi
  40e1b8:	e8 d8 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e1bd:	48 89 c2             	mov    %rax,%rdx
  40e1c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e1c4:	48 89 c6             	mov    %rax,%rsi
  40e1c7:	48 89 d7             	mov    %rdx,%rdi
  40e1ca:	e8 45 fa ff ff       	call   40dc14 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKcEEDaS5_>
  40e1cf:	e9 cd 00 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  40e1d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e1d8:	48 89 c7             	mov    %rax,%rdi
  40e1db:	e8 b5 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e1e0:	48 89 c2             	mov    %rax,%rdx
  40e1e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e1e7:	48 89 c6             	mov    %rax,%rsi
  40e1ea:	48 89 d7             	mov    %rdx,%rdi
  40e1ed:	e8 c0 fa ff ff       	call   40dcb2 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt17basic_string_viewIcSt11char_traitsIcEEEEDaS5_>
  40e1f2:	e9 aa 00 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  40e1f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e1fb:	48 89 c7             	mov    %rax,%rdi
  40e1fe:	e8 92 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e203:	48 89 c2             	mov    %rax,%rdx
  40e206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e20a:	48 89 c6             	mov    %rax,%rsi
  40e20d:	48 89 d7             	mov    %rdx,%rdi
  40e210:	e8 3d fb ff ff       	call   40dd52 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKvEEDaS5_>
  40e215:	e9 87 00 00 00       	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  40e21a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e21e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  40e222:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e226:	48 89 c7             	mov    %rax,%rdi
  40e229:	e8 67 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e22e:	48 89 c2             	mov    %rax,%rdx
  40e231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e235:	48 89 c6             	mov    %rax,%rsi
  40e238:	48 89 d7             	mov    %rdx,%rdi
  40e23b:	e8 a8 fb ff ff       	call   40dde8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clINSt16basic_format_argISt20basic_format_contextIS2_cEE6handleEEEDaS5_>
  40e240:	eb 5f                	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  40e242:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e246:	48 89 c7             	mov    %rax,%rdi
  40e249:	e8 47 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e24e:	48 89 c2             	mov    %rax,%rdx
  40e251:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e255:	48 89 c6             	mov    %rax,%rsi
  40e258:	48 89 d7             	mov    %rdx,%rdi
  40e25b:	e8 ea fb ff ff       	call   40de4a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clInEEDaS5_>
  40e260:	eb 3f                	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  40e262:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e266:	48 89 c7             	mov    %rax,%rdi
  40e269:	e8 27 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e26e:	48 89 c2             	mov    %rax,%rdx
  40e271:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e275:	48 89 c6             	mov    %rax,%rsi
  40e278:	48 89 d7             	mov    %rdx,%rdi
  40e27b:	e8 6c fc ff ff       	call   40deec <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIoEEDaS5_>
  40e280:	eb 1f                	jmp    40e2a1 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  40e282:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e286:	48 89 c7             	mov    %rax,%rdi
  40e289:	e8 07 06 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e28e:	48 89 c2             	mov    %rax,%rdx
  40e291:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e295:	48 89 c6             	mov    %rax,%rsi
  40e298:	48 89 d7             	mov    %rdx,%rdi
  40e29b:	e8 ee fc ff ff       	call   40df8e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIDF128_EEDaS5_>
  40e2a0:	90                   	nop
	}
  40e2a1:	c9                   	leave
  40e2a2:	c3                   	ret

000000000040e2a3 <_ZSt16visit_format_argIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_St20basic_format_contextIS3_cEEDcOS5_St16basic_format_argIT0_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  40e2a3:	55                   	push   %rbp
  40e2a4:	48 89 e5             	mov    %rsp,%rbp
  40e2a7:	53                   	push   %rbx
  40e2a8:	48 83 ec 18          	sub    $0x18,%rsp
  40e2ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  40e2b0:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  40e2b4:	0f b6 d8             	movzbl %al,%ebx
  40e2b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e2bb:	48 89 c7             	mov    %rax,%rdi
  40e2be:	e8 d2 05 00 00       	call   40e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e2c3:	89 da                	mov    %ebx,%edx
  40e2c5:	48 89 c6             	mov    %rax,%rsi
  40e2c8:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  40e2cc:	e8 5d fd ff ff       	call   40e02e <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE>
  40e2d1:	90                   	nop
    }
  40e2d2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e2d6:	c9                   	leave
  40e2d7:	c3                   	ret

000000000040e2d8 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm>:
      _M_format_arg(size_t __id) override
  40e2d8:	55                   	push   %rbp
  40e2d9:	48 89 e5             	mov    %rsp,%rbp
  40e2dc:	48 83 ec 40          	sub    $0x40,%rsp
  40e2e0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40e2e4:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	}, _M_fc.arg(__id));
  40e2e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e2ec:	48 8b 48 30          	mov    0x30(%rax),%rcx
	std::visit_format_arg([this](auto& __arg) {
  40e2f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e2f4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40e2f8:	48 89 ce             	mov    %rcx,%rsi
  40e2fb:	48 89 c7             	mov    %rax,%rdi
  40e2fe:	e8 b3 04 00 00       	call   40e7b6 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  40e303:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e307:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40e30b:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  40e30f:	48 83 ec 20          	sub    $0x20,%rsp
  40e313:	48 89 e1             	mov    %rsp,%rcx
  40e316:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40e31a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e31e:	48 89 01             	mov    %rax,(%rcx)
  40e321:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40e325:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e329:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e32d:	48 89 41 10          	mov    %rax,0x10(%rcx)
  40e331:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  40e335:	48 89 f7             	mov    %rsi,%rdi
  40e338:	e8 66 ff ff ff       	call   40e2a3 <_ZSt16visit_format_argIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_St20basic_format_contextIS3_cEEDcOS5_St16basic_format_argIT0_E>
  40e33d:	48 83 c4 20          	add    $0x20,%rsp
      }
  40e341:	90                   	nop
  40e342:	c9                   	leave
  40e343:	c3                   	ret

000000000040e344 <_ZNKSt6ranges8__access6_BeginclIRSt4spanIcLm18446744073709551615EEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40e344:	55                   	push   %rbp
  40e345:	48 89 e5             	mov    %rsp,%rbp
  40e348:	48 83 ec 10          	sub    $0x10,%rsp
  40e34c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e350:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  40e354:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e358:	48 89 c7             	mov    %rax,%rdi
  40e35b:	e8 8a d5 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
	}
  40e360:	c9                   	leave
  40e361:	c3                   	ret

000000000040e362 <_ZNKSt6ranges8__access4_EndclIRSt4spanIcLm18446744073709551615EEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40e362:	55                   	push   %rbp
  40e363:	48 89 e5             	mov    %rsp,%rbp
  40e366:	48 83 ec 10          	sub    $0x10,%rsp
  40e36a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e36e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  40e372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e376:	48 89 c7             	mov    %rax,%rdi
  40e379:	e8 fe 0a 00 00       	call   40ee7c <_ZNKSt4spanIcLm18446744073709551615EE3endEv>
	}
  40e37e:	c9                   	leave
  40e37f:	c3                   	ret

000000000040e380 <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv>:
      _M_overflow() override
  40e380:	55                   	push   %rbp
  40e381:	48 89 e5             	mov    %rsp,%rbp
  40e384:	53                   	push   %rbx
  40e385:	48 83 ec 78          	sub    $0x78,%rsp
  40e389:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
	auto __s = this->_M_used();
  40e38d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e391:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40e395:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e399:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e39d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e3a1:	48 83 c0 08          	add    $0x8,%rax
  40e3a5:	48 89 c7             	mov    %rax,%rdi
  40e3a8:	e8 3d d5 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e3ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40e3b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e3b5:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40e3b9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e3bd:	48 89 c6             	mov    %rax,%rsi
  40e3c0:	48 89 d7             	mov    %rdx,%rdi
  40e3c3:	e8 47 d5 ff ff       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40e3c8:	48 89 c6             	mov    %rax,%rsi
  40e3cb:	48 89 df             	mov    %rbx,%rdi
  40e3ce:	e8 7b d5 ff ff       	call   40b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e3d3:	90                   	nop
	auto __s = this->_M_used();
  40e3d4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40e3d8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	if (_M_max < 0) // No maximum.
  40e3dc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e3e0:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40e3e7:	48 85 c0             	test   %rax,%rax
  40e3ea:	79 42                	jns    40e42e <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0xae>
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
  40e3ec:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e3f0:	48 05 20 01 00 00    	add    $0x120,%rax
  40e3f6:	48 89 c7             	mov    %rax,%rdi
  40e3f9:	e8 b5 b5 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40e3fe:	48 8b 10             	mov    (%rax),%rdx
  40e401:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e405:	48 89 c6             	mov    %rax,%rsi
  40e408:	bf 50 b5 41 00       	mov    $0x41b550,%edi
  40e40d:	e8 ae 0a 00 00       	call   40eec0 <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>
  40e412:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40e416:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40e41a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e41e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40e422:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
  40e429:	e9 d0 00 00 00       	jmp    40e4fe <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x17e>
	else if (_M_count < static_cast<size_t>(_M_max))
  40e42e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e432:	48 8b 90 30 01 00 00 	mov    0x130(%rax),%rdx
  40e439:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e43d:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40e444:	48 39 c2             	cmp    %rax,%rdx
  40e447:	0f 83 b1 00 00 00    	jae    40e4fe <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x17e>
	    auto __max = _M_max - _M_count;
  40e44d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e451:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40e458:	48 89 c2             	mov    %rax,%rdx
  40e45b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e45f:	48 8b 80 30 01 00 00 	mov    0x130(%rax),%rax
  40e466:	48 29 c2             	sub    %rax,%rdx
  40e469:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    span<_CharT> __first;
  40e46d:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  40e474:	00
  40e475:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  40e47c:	00
	    if (__max < __s.size())
  40e47d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e481:	48 89 c7             	mov    %rax,%rdi
  40e484:	e8 69 70 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e489:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40e48d:	0f 92 c0             	setb   %al
  40e490:	84 c0                	test   %al,%al
  40e492:	74 1d                	je     40e4b1 <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x131>
	      __first = __s.first(static_cast<size_t>(__max));
  40e494:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e498:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e49c:	48 89 d6             	mov    %rdx,%rsi
  40e49f:	48 89 c7             	mov    %rax,%rdi
  40e4a2:	e8 a7 d4 ff ff       	call   40b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e4a7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40e4ab:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40e4af:	eb 10                	jmp    40e4c1 <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x141>
	      __first = __s;
  40e4b1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40e4b5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40e4b9:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40e4bd:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
  40e4c1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e4c5:	48 05 20 01 00 00    	add    $0x120,%rax
  40e4cb:	48 89 c7             	mov    %rax,%rdi
  40e4ce:	e8 e0 b4 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40e4d3:	48 8b 10             	mov    (%rax),%rdx
  40e4d6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e4da:	48 89 c6             	mov    %rax,%rsi
  40e4dd:	bf 50 b5 41 00       	mov    $0x41b550,%edi
  40e4e2:	e8 d9 09 00 00       	call   40eec0 <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>
  40e4e7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40e4eb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40e4ef:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e4f3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40e4f7:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	this->_M_rewind();
  40e4fe:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e502:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      { _M_next = _M_span.begin(); }
  40e506:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e50a:	48 83 c0 08          	add    $0x8,%rax
  40e50e:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40e512:	48 89 c7             	mov    %rax,%rdi
  40e515:	e8 d0 d3 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e51a:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40e51e:	90                   	nop
	_M_count += __s.size();
  40e51f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e523:	48 89 c7             	mov    %rax,%rdi
  40e526:	e8 c7 6f ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e52b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40e52f:	48 8b 92 30 01 00 00 	mov    0x130(%rdx),%rdx
  40e536:	48 01 c2             	add    %rax,%rdx
  40e539:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e53d:	48 89 90 30 01 00 00 	mov    %rdx,0x130(%rax)
      }
  40e544:	90                   	nop
  40e545:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e549:	c9                   	leave
  40e54a:	c3                   	ret
  40e54b:	90                   	nop

000000000040e54c <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm>:
      _M_reserve(size_t __n) override
  40e54c:	55                   	push   %rbp
  40e54d:	48 89 e5             	mov    %rsp,%rbp
  40e550:	53                   	push   %rbx
  40e551:	48 83 ec 78          	sub    $0x78,%rsp
  40e555:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40e559:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	    if (this->_M_used().size()) [[unlikely]]
  40e55d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e561:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40e565:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e569:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e56d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e571:	48 83 c0 08          	add    $0x8,%rax
  40e575:	48 89 c7             	mov    %rax,%rdi
  40e578:	e8 6d d3 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e57d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40e581:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e585:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40e589:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  40e58d:	48 89 c6             	mov    %rax,%rsi
  40e590:	48 89 d7             	mov    %rdx,%rdi
  40e593:	e8 77 d3 ff ff       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40e598:	48 89 c6             	mov    %rax,%rsi
  40e59b:	48 89 df             	mov    %rbx,%rdi
  40e59e:	e8 ab d3 ff ff       	call   40b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e5a3:	90                   	nop
	    if (this->_M_used().size()) [[unlikely]]
  40e5a4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40e5a8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40e5ac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e5b0:	48 89 c7             	mov    %rax,%rdi
  40e5b3:	e8 3a 6f ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e5b8:	48 85 c0             	test   %rax,%rax
  40e5bb:	0f 95 c0             	setne  %al
  40e5be:	84 c0                	test   %al,%al
  40e5c0:	74 0c                	je     40e5ce <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm+0x82>
	      _Seq_sink::_M_overflow();
  40e5c2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e5c6:	48 89 c7             	mov    %rax,%rdi
  40e5c9:	e8 00 c1 ff ff       	call   40a6ce <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	    const auto __sz = _M_seq.size();
  40e5ce:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e5d2:	48 05 20 01 00 00    	add    $0x120,%rax
  40e5d8:	48 89 c7             	mov    %rax,%rdi
  40e5db:	e8 6e 67 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40e5e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	      _M_seq.__resize_and_overwrite(__sz + __n,
  40e5e4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e5e8:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  40e5ef:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40e5f3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40e5f7:	48 01 c8             	add    %rcx,%rax
  40e5fa:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40e5fe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  template<typename _Operation>
    [[__gnu__::__always_inline__]]
    constexpr void
    basic_string<_CharT, _Traits, _Alloc>::
    __resize_and_overwrite(const size_type __n, _Operation __op)
    { resize_and_overwrite<_Operation&>(__n, __op); }
  40e602:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
  40e606:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40e60a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e60e:	48 89 ce             	mov    %rcx,%rsi
  40e611:	48 89 c7             	mov    %rax,%rdi
  40e614:	e8 3f 64 00 00       	call   414a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_>
  40e619:	90                   	nop
	    this->_M_reset(_M_seq, __sz);
  40e61a:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
  40e61e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e622:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  40e629:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40e62d:	48 89 d6             	mov    %rdx,%rsi
  40e630:	48 89 c7             	mov    %rax,%rdi
  40e633:	e8 8c c1 ff ff       	call   40a7c4 <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>
  40e638:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40e63c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40e640:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e644:	48 89 d6             	mov    %rdx,%rsi
  40e647:	48 89 c2             	mov    %rax,%rdx
  40e64a:	48 89 df             	mov    %rbx,%rdi
  40e64d:	e8 da 08 00 00       	call   40ef2c <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>
	    return { this };
  40e652:	48 8b 45 88          	mov    -0x78(%rbp),%rax
      }
  40e656:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e65a:	c9                   	leave
  40e65b:	c3                   	ret

000000000040e65c <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm>:
      _M_bump(size_t __n) override
  40e65c:	55                   	push   %rbp
  40e65d:	48 89 e5             	mov    %rsp,%rbp
  40e660:	53                   	push   %rbx
  40e661:	48 83 ec 48          	sub    $0x48,%rsp
  40e665:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40e669:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	    auto __s = this->_M_used();
  40e66d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e671:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40e675:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e679:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e67d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e681:	48 83 c0 08          	add    $0x8,%rax
  40e685:	48 89 c7             	mov    %rax,%rdi
  40e688:	e8 5d d2 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e68d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40e691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e695:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40e699:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40e69d:	48 89 c6             	mov    %rax,%rsi
  40e6a0:	48 89 d7             	mov    %rdx,%rdi
  40e6a3:	e8 67 d2 ff ff       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40e6a8:	48 89 c6             	mov    %rax,%rsi
  40e6ab:	48 89 df             	mov    %rbx,%rdi
  40e6ae:	e8 9b d2 ff ff       	call   40b94e <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e6b3:	90                   	nop
	    auto __s = this->_M_used();
  40e6b4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40e6b8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	    _M_seq.resize(__s.size() + __n);
  40e6bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e6c0:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  40e6c7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40e6cb:	48 89 c7             	mov    %rax,%rdi
  40e6ce:	e8 1f 6e ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e6d3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40e6d7:	48 01 d0             	add    %rdx,%rax
  40e6da:	48 89 c6             	mov    %rax,%rsi
  40e6dd:	48 89 df             	mov    %rbx,%rdi
  40e6e0:	e8 bd 08 00 00       	call   40efa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm>
	    this->_M_reset(this->_M_buf);
  40e6e5:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  40e6e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e6ed:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40e6f1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e6f5:	48 89 d6             	mov    %rdx,%rsi
  40e6f8:	48 89 c7             	mov    %rax,%rdi
  40e6fb:	e8 98 ce ff ff       	call   40b598 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  40e700:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40e704:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e708:	b9 00 00 00 00       	mov    $0x0,%ecx
  40e70d:	48 89 d6             	mov    %rdx,%rsi
  40e710:	48 89 c2             	mov    %rax,%rdx
  40e713:	48 89 df             	mov    %rbx,%rdi
  40e716:	e8 11 08 00 00       	call   40ef2c <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>
      }
  40e71b:	90                   	nop
  40e71c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e720:	c9                   	leave
  40e721:	c3                   	ret

000000000040e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>:
    __write(_Out __out, basic_string_view<_CharT> __str)
  40e722:	55                   	push   %rbp
  40e723:	48 89 e5             	mov    %rsp,%rbp
  40e726:	48 83 ec 30          	sub    $0x30,%rsp
  40e72a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40e72e:	48 89 f0             	mov    %rsi,%rax
  40e731:	48 89 d1             	mov    %rdx,%rcx
  40e734:	48 89 c0             	mov    %rax,%rax
  40e737:	ba 00 00 00 00       	mov    $0x0,%edx
  40e73c:	48 89 ca             	mov    %rcx,%rdx
  40e73f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40e743:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  if (__str.size())
  40e747:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e74b:	48 89 c7             	mov    %rax,%rdi
  40e74e:	e8 81 75 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40e753:	48 85 c0             	test   %rax,%rax
  40e756:	0f 95 c0             	setne  %al
  40e759:	84 c0                	test   %al,%al
  40e75b:	74 28                	je     40e785 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE+0x63>
  40e75d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40e761:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e765:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40e769:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	_M_sink->_M_write(__s);
  40e76d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e771:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40e775:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e779:	48 89 ce             	mov    %rcx,%rsi
  40e77c:	48 89 c7             	mov    %rax,%rdi
  40e77f:	e8 12 68 00 00       	call   414f96 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE>
	return *this;
  40e784:	90                   	nop
      return __out;
  40e785:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  40e789:	c9                   	leave
  40e78a:	c3                   	ret
  40e78b:	90                   	nop

000000000040e78c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>:
      void advance_to(iterator __it) { _M_out = std::move(__it); }
  40e78c:	55                   	push   %rbp
  40e78d:	48 89 e5             	mov    %rsp,%rbp
  40e790:	48 83 ec 10          	sub    $0x10,%rsp
  40e794:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e798:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40e79c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40e7a0:	48 89 c7             	mov    %rax,%rdi
  40e7a3:	e8 0b b2 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40e7a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e7ac:	48 8b 00             	mov    (%rax),%rax
  40e7af:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40e7b3:	90                   	nop
  40e7b4:	c9                   	leave
  40e7b5:	c3                   	ret

000000000040e7b6 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>:
      arg(size_t __id) const noexcept
  40e7b6:	55                   	push   %rbp
  40e7b7:	48 89 e5             	mov    %rsp,%rbp
  40e7ba:	48 83 ec 40          	sub    $0x40,%rsp
  40e7be:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40e7c2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40e7c6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      { return _M_args.get(__id); }
  40e7ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40e7ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40e7d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e7d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40e7da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e7de:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Arg_value() : _M_none() { }
  40e7e2:	90                   	nop
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40e7e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e7e7:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  40e7eb:	90                   	nop
	if (__i < _M_packed_size)
  40e7ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e7f0:	0f b6 00             	movzbl (%rax),%eax
  40e7f3:	83 e0 0f             	and    $0xf,%eax
  40e7f6:	0f b6 c0             	movzbl %al,%eax
  40e7f9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40e7fd:	73 41                	jae    40e840 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0x8a>
	    __arg._M_type = _M_type(__i);
  40e7ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40e803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e807:	48 89 d6             	mov    %rdx,%rsi
  40e80a:	48 89 c7             	mov    %rax,%rdi
  40e80d:	e8 78 df ff ff       	call   40c78a <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>
  40e812:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e816:	88 42 10             	mov    %al,0x10(%rdx)
	    __arg._M_val = _M_values[__i];
  40e819:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e81d:	48 8b 40 08          	mov    0x8(%rax),%rax
  40e821:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40e825:	48 c1 e2 04          	shl    $0x4,%rdx
  40e829:	48 01 d0             	add    %rdx,%rax
  40e82c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40e830:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40e834:	48 8b 00             	mov    (%rax),%rax
  40e837:	48 89 01             	mov    %rax,(%rcx)
  40e83a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	return __arg;
  40e83e:	eb 4d                	jmp    40e88d <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
  40e840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e844:	0f b6 00             	movzbl (%rax),%eax
  40e847:	83 e0 0f             	and    $0xf,%eax
  40e84a:	84 c0                	test   %al,%al
  40e84c:	75 3f                	jne    40e88d <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
  40e84e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e852:	48 8b 00             	mov    (%rax),%rax
  40e855:	48 c1 e8 04          	shr    $0x4,%rax
  40e859:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40e85d:	73 2e                	jae    40e88d <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
	  __arg = _M_args[__i];
  40e85f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e863:	48 8b 40 08          	mov    0x8(%rax),%rax
  40e867:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40e86b:	48 c1 e2 05          	shl    $0x5,%rdx
  40e86f:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
  40e873:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40e877:	48 8b 06             	mov    (%rsi),%rax
  40e87a:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  40e87e:	48 89 01             	mov    %rax,(%rcx)
  40e881:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40e885:	0f b6 46 10          	movzbl 0x10(%rsi),%eax
  40e889:	88 41 10             	mov    %al,0x10(%rcx)
	return __arg;
  40e88c:	90                   	nop
  40e88d:	90                   	nop
      { return _M_args.get(__id); }
  40e88e:	90                   	nop
  40e88f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e893:	c9                   	leave
  40e894:	c3                   	ret

000000000040e895 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40e895:	55                   	push   %rbp
  40e896:	48 89 e5             	mov    %rsp,%rbp
  40e899:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40e89d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e8a1:	5d                   	pop    %rbp
  40e8a2:	c3                   	ret
  40e8a3:	90                   	nop

000000000040e8a4 <_ZNKSt9formatterIbcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40e8a4:	55                   	push   %rbp
  40e8a5:	48 89 e5             	mov    %rsp,%rbp
  40e8a8:	48 83 ec 20          	sub    $0x20,%rsp
  40e8ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e8b0:	89 f0                	mov    %esi,%eax
  40e8b2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40e8b6:	88 45 f4             	mov    %al,-0xc(%rbp)
	{ return _M_f.format(__u, __fc); }
  40e8b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e8bd:	0f b6 4d f4          	movzbl -0xc(%rbp),%ecx
  40e8c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e8c5:	89 ce                	mov    %ecx,%esi
  40e8c7:	48 89 c7             	mov    %rax,%rdi
  40e8ca:	e8 95 07 00 00       	call   40f064 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>
  40e8cf:	c9                   	leave
  40e8d0:	c3                   	ret
  40e8d1:	90                   	nop

000000000040e8d2 <_ZNSt9formatterIccE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  40e8d2:	55                   	push   %rbp
  40e8d3:	48 89 e5             	mov    %rsp,%rbp
  40e8d6:	48 83 ec 10          	sub    $0x10,%rsp
  40e8da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e8de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_f.template _M_parse<_CharT>(__pc);
  40e8e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e8e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40e8ea:	48 89 d6             	mov    %rdx,%rsi
  40e8ed:	48 89 c7             	mov    %rax,%rdi
  40e8f0:	e8 47 09 00 00       	call   40f23c <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE>
      }
  40e8f5:	c9                   	leave
  40e8f6:	c3                   	ret
  40e8f7:	90                   	nop

000000000040e8f8 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>:
	format(_CharT __u, basic_format_context<_Out, _CharT>& __fc) const
  40e8f8:	55                   	push   %rbp
  40e8f9:	48 89 e5             	mov    %rsp,%rbp
  40e8fc:	48 83 ec 20          	sub    $0x20,%rsp
  40e900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e904:	89 f0                	mov    %esi,%eax
  40e906:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40e90a:	88 45 f4             	mov    %al,-0xc(%rbp)
	  if (_M_f._M_spec._M_type == __format::_Pres_none
  40e90d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e911:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e915:	83 e0 78             	and    $0x78,%eax
  40e918:	84 c0                	test   %al,%al
  40e91a:	74 0f                	je     40e92b <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x33>
	      || _M_f._M_spec._M_type == __format::_Pres_c)
  40e91c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e920:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e924:	83 e0 78             	and    $0x78,%eax
  40e927:	3c 38                	cmp    $0x38,%al
  40e929:	75 18                	jne    40e943 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x4b>
	    return _M_f._M_format_character(__u, __fc);
  40e92b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e92f:	0f be 4d f4          	movsbl -0xc(%rbp),%ecx
  40e933:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e937:	89 ce                	mov    %ecx,%esi
  40e939:	48 89 c7             	mov    %rax,%rdi
  40e93c:	e8 7f 09 00 00       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40e941:	eb 37                	jmp    40e97a <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x82>
	  else if (_M_f._M_spec._M_type == __format::_Pres_esc)
  40e943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e947:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e94b:	83 e0 78             	and    $0x78,%eax
  40e94e:	3c 78                	cmp    $0x78,%al
  40e950:	75 0e                	jne    40e960 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x68>
	      return __fc.out();
  40e952:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e956:	48 89 c7             	mov    %rax,%rdi
  40e959:	e8 6a cf ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40e95e:	eb 1a                	jmp    40e97a <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x82>
	    return _M_f.format(static_cast<make_unsigned_t<_CharT>>(__u), __fc);
  40e960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e964:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  40e968:	0f b6 ca             	movzbl %dl,%ecx
  40e96b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e96f:	89 ce                	mov    %ecx,%esi
  40e971:	48 89 c7             	mov    %rax,%rdi
  40e974:	e8 a7 09 00 00       	call   40f320 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40e979:	90                   	nop
	}
  40e97a:	c9                   	leave
  40e97b:	c3                   	ret

000000000040e97c <_ZNKSt9formatterIicE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEiRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40e97c:	55                   	push   %rbp
  40e97d:	48 89 e5             	mov    %rsp,%rbp
  40e980:	48 83 ec 20          	sub    $0x20,%rsp
  40e984:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e988:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40e98b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40e98f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e993:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e997:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  40e99a:	89 ce                	mov    %ecx,%esi
  40e99c:	48 89 c7             	mov    %rax,%rdi
  40e99f:	e8 42 0d 00 00       	call   40f6e6 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40e9a4:	c9                   	leave
  40e9a5:	c3                   	ret

000000000040e9a6 <_ZNKSt9formatterIjcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEjRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40e9a6:	55                   	push   %rbp
  40e9a7:	48 89 e5             	mov    %rsp,%rbp
  40e9aa:	48 83 ec 20          	sub    $0x20,%rsp
  40e9ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e9b2:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40e9b5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40e9b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e9bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e9c1:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  40e9c4:	89 ce                	mov    %ecx,%esi
  40e9c6:	48 89 c7             	mov    %rax,%rdi
  40e9c9:	e8 12 11 00 00       	call   40fae0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40e9ce:	c9                   	leave
  40e9cf:	c3                   	ret

000000000040e9d0 <_ZNKSt9formatterIxcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorExRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40e9d0:	55                   	push   %rbp
  40e9d1:	48 89 e5             	mov    %rsp,%rbp
  40e9d4:	48 83 ec 20          	sub    $0x20,%rsp
  40e9d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e9dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40e9e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40e9e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e9e8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e9ec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40e9f0:	48 89 ce             	mov    %rcx,%rsi
  40e9f3:	48 89 c7             	mov    %rax,%rdi
  40e9f6:	e8 c9 14 00 00       	call   40fec4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40e9fb:	c9                   	leave
  40e9fc:	c3                   	ret
  40e9fd:	90                   	nop

000000000040e9fe <_ZNKSt9formatterIycE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEyRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40e9fe:	55                   	push   %rbp
  40e9ff:	48 89 e5             	mov    %rsp,%rbp
  40ea02:	48 83 ec 20          	sub    $0x20,%rsp
  40ea06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ea0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ea0e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ea12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ea1a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ea1e:	48 89 ce             	mov    %rcx,%rsi
  40ea21:	48 89 c7             	mov    %rax,%rdi
  40ea24:	e8 a9 18 00 00       	call   4102d2 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ea29:	c9                   	leave
  40ea2a:	c3                   	ret
  40ea2b:	90                   	nop

000000000040ea2c <_ZNKSt9formatterIfcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEfRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ea2c:	55                   	push   %rbp
  40ea2d:	48 89 e5             	mov    %rsp,%rbp
  40ea30:	48 83 ec 20          	sub    $0x20,%rsp
  40ea34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ea38:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  40ea3d:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ea41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea45:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ea49:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40ea4c:	48 89 ce             	mov    %rcx,%rsi
  40ea4f:	66 0f 6e c2          	movd   %edx,%xmm0
  40ea53:	48 89 c7             	mov    %rax,%rdi
  40ea56:	e8 0d 21 00 00       	call   410b68 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ea5b:	c9                   	leave
  40ea5c:	c3                   	ret
  40ea5d:	90                   	nop

000000000040ea5e <_ZNKSt9formatterIdcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEdRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ea5e:	55                   	push   %rbp
  40ea5f:	48 89 e5             	mov    %rsp,%rbp
  40ea62:	48 83 ec 20          	sub    $0x20,%rsp
  40ea66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ea6a:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  40ea6f:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ea73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea77:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ea7b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ea7f:	48 89 ce             	mov    %rcx,%rsi
  40ea82:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  40ea87:	48 89 c7             	mov    %rax,%rdi
  40ea8a:	e8 01 2e 00 00       	call   411890 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ea8f:	c9                   	leave
  40ea90:	c3                   	ret
  40ea91:	90                   	nop

000000000040ea92 <_ZNKSt9formatterIecE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEeRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ea92:	55                   	push   %rbp
  40ea93:	48 89 e5             	mov    %rsp,%rbp
  40ea96:	48 83 ec 10          	sub    $0x10,%rsp
  40ea9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ea9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40eaa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eaa6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40eaaa:	ff 75 18             	push   0x18(%rbp)
  40eaad:	ff 75 10             	push   0x10(%rbp)
  40eab0:	48 89 d6             	mov    %rdx,%rsi
  40eab3:	48 89 c7             	mov    %rax,%rdi
  40eab6:	e8 1b 3b 00 00       	call   4125d6 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40eabb:	48 83 c4 10          	add    $0x10,%rsp
  40eabf:	c9                   	leave
  40eac0:	c3                   	ret
  40eac1:	90                   	nop

000000000040eac2 <_ZNKSt9formatterIPKccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>:
	format(const _CharT* __u,
  40eac2:	55                   	push   %rbp
  40eac3:	48 89 e5             	mov    %rsp,%rbp
  40eac6:	53                   	push   %rbx
  40eac7:	48 83 ec 38          	sub    $0x38,%rsp
  40eacb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40eacf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40ead3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ead7:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40eadb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40eadf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40eae3:	48 89 d6             	mov    %rdx,%rsi
  40eae6:	48 89 c7             	mov    %rax,%rdi
  40eae9:	e8 50 70 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40eaee:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40eaf2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40eaf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40eafa:	48 89 d6             	mov    %rdx,%rsi
  40eafd:	48 89 c2             	mov    %rax,%rdx
  40eb00:	48 89 df             	mov    %rbx,%rdi
  40eb03:	e8 92 46 00 00       	call   41319a <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>
  40eb08:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40eb0c:	c9                   	leave
  40eb0d:	c3                   	ret

000000000040eb0e <_ZNKSt9formatterISt17basic_string_viewIcSt11char_traitsIcEEcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES3_RSB_>:
	format(basic_string_view<char, _Traits> __u,
  40eb0e:	55                   	push   %rbp
  40eb0f:	48 89 e5             	mov    %rsp,%rbp
  40eb12:	48 83 ec 20          	sub    $0x20,%rsp
  40eb16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eb1a:	48 89 f0             	mov    %rsi,%rax
  40eb1d:	48 89 d6             	mov    %rdx,%rsi
  40eb20:	48 89 c0             	mov    %rax,%rax
  40eb23:	ba 00 00 00 00       	mov    $0x0,%edx
  40eb28:	48 89 f2             	mov    %rsi,%rdx
  40eb2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40eb2f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40eb33:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40eb37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb3b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40eb3f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40eb43:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eb47:	48 89 c7             	mov    %rax,%rdi
  40eb4a:	e8 4b 46 00 00       	call   41319a <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>
  40eb4f:	c9                   	leave
  40eb50:	c3                   	ret
  40eb51:	90                   	nop

000000000040eb52 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  40eb52:	55                   	push   %rbp
  40eb53:	48 89 e5             	mov    %rsp,%rbp
  40eb56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  40eb5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb5e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40eb62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb66:	48 8b 00             	mov    (%rax),%rax
  40eb69:	48 8b 0a             	mov    (%rdx),%rcx
  40eb6c:	48 89 08             	mov    %rcx,(%rax)
  40eb6f:	8b 52 08             	mov    0x8(%rdx),%edx
  40eb72:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  40eb75:	90                   	nop
  40eb76:	5d                   	pop    %rbp
  40eb77:	c3                   	ret

000000000040eb78 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  40eb78:	55                   	push   %rbp
  40eb79:	48 89 e5             	mov    %rsp,%rbp
  40eb7c:	48 83 ec 10          	sub    $0x10,%rsp
  40eb80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  40eb84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb88:	48 8b 00             	mov    (%rax),%rax
  40eb8b:	48 8b 10             	mov    (%rax),%rdx
  40eb8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb92:	48 8b 40 08          	mov    0x8(%rax),%rax
  40eb96:	48 8b 00             	mov    (%rax),%rax
  40eb99:	48 39 c2             	cmp    %rax,%rdx
  40eb9c:	74 11                	je     40ebaf <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  40eb9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eba2:	48 8b 00             	mov    (%rax),%rax
  40eba5:	48 8b 00             	mov    (%rax),%rax
  40eba8:	0f b6 00             	movzbl (%rax),%eax
  40ebab:	3c 7d                	cmp    $0x7d,%al
  40ebad:	75 17                	jne    40ebc6 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  40ebaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ebb3:	48 8b 40 10          	mov    0x10(%rax),%rax
  40ebb7:	48 89 c7             	mov    %rax,%rdi
  40ebba:	e8 93 ff ff ff       	call   40eb52 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  40ebbf:	b8 01 00 00 00       	mov    $0x1,%eax
  40ebc4:	eb 05                	jmp    40ebcb <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  40ebc6:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  40ebcb:	c9                   	leave
  40ebcc:	c3                   	ret
  40ebcd:	90                   	nop

000000000040ebce <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  40ebce:	55                   	push   %rbp
  40ebcf:	48 89 e5             	mov    %rsp,%rbp
  40ebd2:	48 83 ec 60          	sub    $0x60,%rsp
  40ebd6:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40ebda:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	__format::_Spec<_CharT> __spec{};
  40ebde:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  40ebe5:	00
  40ebe6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ebed:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	const auto __last = __pc.end();
  40ebf4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ebf8:	48 89 c7             	mov    %rax,%rdi
  40ebfb:	e8 ac 75 ff ff       	call   4061ac <_ZNKSt26basic_format_parse_contextIcE3endEv>
  40ec00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  40ec04:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ec08:	48 89 c7             	mov    %rax,%rdi
  40ec0b:	e8 6c 75 ff ff       	call   40617c <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  40ec10:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  40ec14:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ec18:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ec1c:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40ec20:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  40ec24:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40ec28:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40ec2c:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40ec30:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40ec34:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40ec38:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  40ec3c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ec40:	48 89 c7             	mov    %rax,%rdi
  40ec43:	e8 30 ff ff ff       	call   40eb78 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40ec48:	84 c0                	test   %al,%al
  40ec4a:	74 09                	je     40ec55 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  40ec4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ec50:	e9 8c 00 00 00       	jmp    40ece1 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  40ec55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ec59:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40ec5d:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40ec61:	48 89 ce             	mov    %rcx,%rsi
  40ec64:	48 89 c7             	mov    %rax,%rdi
  40ec67:	e8 b8 99 ff ff       	call   408624 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  40ec6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40ec70:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ec74:	48 89 c7             	mov    %rax,%rdi
  40ec77:	e8 fc fe ff ff       	call   40eb78 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40ec7c:	84 c0                	test   %al,%al
  40ec7e:	74 06                	je     40ec86 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xb8>
	  return __first;
  40ec80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ec84:	eb 5b                	jmp    40ece1 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__first = __spec._M_parse_width(__first, __last, __pc);
  40ec86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ec8a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40ec8e:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40ec92:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40ec96:	48 89 c7             	mov    %rax,%rdi
  40ec99:	e8 18 9b ff ff       	call   4087b6 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  40ec9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__first != __last)
  40eca2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40eca6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ecaa:	48 39 c2             	cmp    %rax,%rdx
  40ecad:	74 17                	je     40ecc6 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xf8>
	    if (*__first == 'p')
  40ecaf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ecb3:	0f b6 00             	movzbl (%rax),%eax
  40ecb6:	3c 70                	cmp    $0x70,%al
  40ecb8:	75 0c                	jne    40ecc6 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xf8>
	      ++__first;
  40ecba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ecbe:	48 83 c0 01          	add    $0x1,%rax
  40ecc2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40ecc6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ecca:	48 89 c7             	mov    %rax,%rdi
  40eccd:	e8 a6 fe ff ff       	call   40eb78 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40ecd2:	84 c0                	test   %al,%al
  40ecd4:	74 06                	je     40ecdc <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x10e>
	  return __first;
  40ecd6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ecda:	eb 05                	jmp    40ece1 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__format::__failed_to_parse_format_spec();
  40ecdc:	e8 01 65 ff ff       	call   4051e2 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  40ece1:	c9                   	leave
  40ece2:	c3                   	ret
  40ece3:	90                   	nop

000000000040ece4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1Ev>:
      basic_string_view() noexcept
  40ece4:	55                   	push   %rbp
  40ece5:	48 89 e5             	mov    %rsp,%rbp
  40ece8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_len{0}, _M_str{nullptr}
  40ecec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ecf0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40ecf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ecfb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40ed02:	00
      { }
  40ed03:	90                   	nop
  40ed04:	5d                   	pop    %rbp
  40ed05:	c3                   	ret

000000000040ed06 <_ZNKSt9formatterIPKvcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>:
	format(const void* __v, basic_format_context<_Out, _CharT>& __fc) const
  40ed06:	55                   	push   %rbp
  40ed07:	48 89 e5             	mov    %rsp,%rbp
  40ed0a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40ed0e:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40ed12:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40ed16:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	  auto __u = reinterpret_cast<__UINTPTR_TYPE__>(__v);
  40ed1a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40ed1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40ed22:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40ed26:	48 83 c6 12          	add    $0x12,%rsi
	  auto [__ptr, __ec] = std::to_chars(__buf + 2, std::end(__buf),
  40ed2a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ed2e:	48 83 c0 02          	add    $0x2,%rax
  40ed32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40ed36:	b9 10 00 00 00       	mov    $0x10,%ecx
  40ed3b:	48 89 c7             	mov    %rax,%rdi
  40ed3e:	e8 46 59 ff ff       	call   404689 <_ZSt8to_charsPcS_mi>
  40ed43:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40ed47:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	  int __n = __ptr - __buf;
  40ed4b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40ed4f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ed53:	48 29 c2             	sub    %rax,%rdx
  40ed56:	89 55 f4             	mov    %edx,-0xc(%rbp)
	  __buf[0] = '0';
  40ed59:	c6 45 c0 30          	movb   $0x30,-0x40(%rbp)
	  __buf[1] = 'x';
  40ed5d:	c6 45 c1 78          	movb   $0x78,-0x3f(%rbp)
	  basic_string_view<_CharT> __str;
  40ed61:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40ed68:	00
  40ed69:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  40ed70:	00
	    __str = string_view(__buf, __n);
  40ed71:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40ed74:	48 63 d0             	movslq %eax,%rdx
  40ed77:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  40ed7b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40ed7f:	48 89 ce             	mov    %rcx,%rsi
  40ed82:	48 89 c7             	mov    %rax,%rdi
  40ed85:	e8 20 87 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40ed8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ed8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ed92:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40ed96:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
  40ed9a:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40ed9e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40eda1:	48 63 d0             	movslq %eax,%rdx
  40eda4:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  40eda8:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40edac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40edb0:	41 b9 02 00 00 00    	mov    $0x2,%r9d
  40edb6:	49 89 f8             	mov    %rdi,%r8
  40edb9:	48 89 f7             	mov    %rsi,%rdi
  40edbc:	48 89 c6             	mov    %rax,%rsi
  40edbf:	e8 c6 44 00 00       	call   41328a <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
	}
  40edc4:	c9                   	leave
  40edc5:	c3                   	ret

000000000040edc6 <_ZNKSt9formatterIncE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEnRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40edc6:	55                   	push   %rbp
  40edc7:	48 89 e5             	mov    %rsp,%rbp
  40edca:	48 83 ec 20          	sub    $0x20,%rsp
  40edce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40edd2:	48 89 f0             	mov    %rsi,%rax
  40edd5:	48 89 d6             	mov    %rdx,%rsi
  40edd8:	48 89 c0             	mov    %rax,%rax
  40eddb:	ba 00 00 00 00       	mov    $0x0,%edx
  40ede0:	48 89 f2             	mov    %rsi,%rdx
  40ede3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ede7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40edeb:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40edef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40edf3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40edf7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40edfb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40edff:	48 89 c7             	mov    %rax,%rdi
  40ee02:	e8 8f 45 00 00       	call   413396 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ee07:	c9                   	leave
  40ee08:	c3                   	ret
  40ee09:	90                   	nop

000000000040ee0a <_ZNKSt9formatterIocE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEoRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ee0a:	55                   	push   %rbp
  40ee0b:	48 89 e5             	mov    %rsp,%rbp
  40ee0e:	48 83 ec 20          	sub    $0x20,%rsp
  40ee12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ee16:	48 89 f0             	mov    %rsi,%rax
  40ee19:	48 89 d6             	mov    %rdx,%rsi
  40ee1c:	48 89 c0             	mov    %rax,%rax
  40ee1f:	ba 00 00 00 00       	mov    $0x0,%edx
  40ee24:	48 89 f2             	mov    %rsi,%rdx
  40ee27:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ee2b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ee2f:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ee33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ee37:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ee3b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40ee3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ee43:	48 89 c7             	mov    %rax,%rdi
  40ee46:	e8 c7 49 00 00       	call   413812 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ee4b:	c9                   	leave
  40ee4c:	c3                   	ret
  40ee4d:	90                   	nop

000000000040ee4e <_ZNKSt9formatterIDF128_cE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEDF128_RS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ee4e:	55                   	push   %rbp
  40ee4f:	48 89 e5             	mov    %rsp,%rbp
  40ee52:	48 83 ec 20          	sub    $0x20,%rsp
  40ee56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ee5a:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
  40ee5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ee62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ee66:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ee6a:	66 0f 6f 45 e0       	movdqa -0x20(%rbp),%xmm0
  40ee6f:	48 89 d6             	mov    %rdx,%rsi
  40ee72:	48 89 c7             	mov    %rax,%rdi
  40ee75:	e8 e8 4e 00 00       	call   413d62 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ee7a:	c9                   	leave
  40ee7b:	c3                   	ret

000000000040ee7c <_ZNKSt4spanIcLm18446744073709551615EE3endEv>:
      end() const noexcept
  40ee7c:	55                   	push   %rbp
  40ee7d:	48 89 e5             	mov    %rsp,%rbp
  40ee80:	53                   	push   %rbx
  40ee81:	48 83 ec 28          	sub    $0x28,%rsp
  40ee85:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return iterator(this->_M_ptr + this->size()); }
  40ee89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ee8d:	48 8b 18             	mov    (%rax),%rbx
  40ee90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ee94:	48 89 c7             	mov    %rax,%rdi
  40ee97:	e8 56 66 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40ee9c:	48 01 d8             	add    %rbx,%rax
  40ee9f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40eea3:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  40eea7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40eeab:	48 89 d6             	mov    %rdx,%rsi
  40eeae:	48 89 c7             	mov    %rax,%rdi
  40eeb1:	e8 12 d9 ff ff       	call   40c7c8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  40eeb6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eeba:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40eebe:	c9                   	leave
  40eebf:	c3                   	ret

000000000040eec0 <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>:
      }

    template<input_range _Range, weakly_incrementable _Out>
      requires indirectly_copyable<iterator_t<_Range>, _Out>
      constexpr copy_result<borrowed_iterator_t<_Range>, _Out>
      operator()(_Range&& __r, _Out __result) const
  40eec0:	55                   	push   %rbp
  40eec1:	48 89 e5             	mov    %rsp,%rbp
  40eec4:	41 54                	push   %r12
  40eec6:	53                   	push   %rbx
  40eec7:	48 83 ec 20          	sub    $0x20,%rsp
  40eecb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40eecf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40eed3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
		       std::move(__result));
  40eed7:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40eedb:	48 89 c7             	mov    %rax,%rdi
  40eede:	e8 d0 aa ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40eee3:	48 89 c3             	mov    %rax,%rbx
	return (*this)(ranges::begin(__r), ranges::end(__r),
  40eee6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eeea:	48 89 c6             	mov    %rax,%rsi
  40eeed:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  40eef2:	e8 6b f4 ff ff       	call   40e362 <_ZNKSt6ranges8__access4_EndclIRSt4spanIcLm18446744073709551615EEEEDaOT_>
  40eef7:	49 89 c4             	mov    %rax,%r12
  40eefa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eefe:	48 89 c6             	mov    %rax,%rsi
  40ef01:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  40ef06:	e8 39 f4 ff ff       	call   40e344 <_ZNKSt6ranges8__access6_BeginclIRSt4spanIcLm18446744073709551615EEEEDaOT_>
  40ef0b:	48 89 c6             	mov    %rax,%rsi
  40ef0e:	48 8b 13             	mov    (%rbx),%rdx
  40ef11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ef15:	48 89 d1             	mov    %rdx,%rcx
  40ef18:	4c 89 e2             	mov    %r12,%rdx
  40ef1b:	48 89 c7             	mov    %rax,%rdi
  40ef1e:	e8 91 5a 00 00       	call   4149b4 <_ZNKSt6ranges9__copy_fnclIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES7_NSt8__format10_Sink_iterIcEEEENS_13in_out_resultIT_T1_EESC_T0_SD_>
      }
  40ef23:	48 83 c4 20          	add    $0x20,%rsp
  40ef27:	5b                   	pop    %rbx
  40ef28:	41 5c                	pop    %r12
  40ef2a:	5d                   	pop    %rbp
  40ef2b:	c3                   	ret

000000000040ef2c <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>:
      _M_reset(span<_CharT> __s, size_t __pos = 0) noexcept
  40ef2c:	55                   	push   %rbp
  40ef2d:	48 89 e5             	mov    %rsp,%rbp
  40ef30:	41 54                	push   %r12
  40ef32:	53                   	push   %rbx
  40ef33:	48 83 ec 30          	sub    $0x30,%rsp
  40ef37:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ef3b:	48 89 f0             	mov    %rsi,%rax
  40ef3e:	48 89 d6             	mov    %rdx,%rsi
  40ef41:	48 89 c0             	mov    %rax,%rax
  40ef44:	ba 00 00 00 00       	mov    $0x0,%edx
  40ef49:	48 89 f2             	mov    %rsi,%rdx
  40ef4c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ef50:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ef54:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	_M_span = __s;
  40ef58:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40ef5c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ef60:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40ef64:	48 89 41 08          	mov    %rax,0x8(%rcx)
  40ef68:	48 89 51 10          	mov    %rdx,0x10(%rcx)
	_M_next = __s.begin() + __pos;
  40ef6c:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  40ef70:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ef74:	48 89 c7             	mov    %rax,%rdi
  40ef77:	e8 6e c9 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40ef7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40ef80:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  40ef84:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40ef88:	48 89 de             	mov    %rbx,%rsi
  40ef8b:	48 89 c7             	mov    %rax,%rdi
  40ef8e:	e8 b9 5b 00 00       	call   414b4c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEplEl>
  40ef93:	49 89 44 24 18       	mov    %rax,0x18(%r12)
      }
  40ef98:	90                   	nop
  40ef99:	48 83 c4 30          	add    $0x30,%rsp
  40ef9d:	5b                   	pop    %rbx
  40ef9e:	41 5c                	pop    %r12
  40efa0:	5d                   	pop    %rbp
  40efa1:	c3                   	ret

000000000040efa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm>:
      resize(size_type __n)
  40efa2:	55                   	push   %rbp
  40efa3:	48 89 e5             	mov    %rsp,%rbp
  40efa6:	48 83 ec 10          	sub    $0x10,%rsp
  40efaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40efae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { this->resize(__n, _CharT()); }
  40efb2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40efb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40efba:	ba 00 00 00 00       	mov    $0x0,%edx
  40efbf:	48 89 ce             	mov    %rcx,%rsi
  40efc2:	48 89 c7             	mov    %rax,%rdi
  40efc5:	e8 be 5b 00 00       	call   414b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc>
  40efca:	90                   	nop
  40efcb:	c9                   	leave
  40efcc:	c3                   	ret
  40efcd:	90                   	nop

000000000040efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
  40efce:	55                   	push   %rbp
  40efcf:	48 89 e5             	mov    %rsp,%rbp
  40efd2:	48 83 ec 10          	sub    $0x10,%rsp
  40efd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->size() == 0; }
  40efda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40efde:	48 89 c7             	mov    %rax,%rdi
  40efe1:	e8 68 5d ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40efe6:	48 85 c0             	test   %rax,%rax
  40efe9:	0f 94 c0             	sete   %al
  40efec:	c9                   	leave
  40efed:	c3                   	ret

000000000040efee <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40efee:	55                   	push   %rbp
  40efef:	48 89 e5             	mov    %rsp,%rbp
  40eff2:	48 83 ec 20          	sub    $0x20,%rsp
  40eff6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40effa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      auto __end = _M_do_parse(__pc, _AsBool);
  40effe:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f002:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f006:	ba 00 00 00 00       	mov    $0x0,%edx
  40f00b:	48 89 ce             	mov    %rcx,%rsi
  40f00e:	48 89 c7             	mov    %rax,%rdi
  40f011:	e8 7e 79 ff ff       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
  40f016:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      if (_M_spec._M_type == _Pres_s)
  40f01a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f01e:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f022:	83 e0 78             	and    $0x78,%eax
  40f025:	84 c0                	test   %al,%al
  40f027:	75 34                	jne    40f05d <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x6f>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
  40f029:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f02d:	0f b6 00             	movzbl (%rax),%eax
  40f030:	83 e0 0c             	and    $0xc,%eax
  40f033:	84 c0                	test   %al,%al
  40f035:	75 1c                	jne    40f053 <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x65>
  40f037:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f03b:	0f b6 00             	movzbl (%rax),%eax
  40f03e:	83 e0 10             	and    $0x10,%eax
  40f041:	84 c0                	test   %al,%al
  40f043:	75 0e                	jne    40f053 <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x65>
  40f045:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f049:	0f b6 00             	movzbl (%rax),%eax
  40f04c:	83 e0 40             	and    $0x40,%eax
  40f04f:	84 c0                	test   %al,%al
  40f051:	74 0a                	je     40f05d <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x6f>
		  __throw_format_error("format error: format-spec contains "
  40f053:	bf 48 b3 41 00       	mov    $0x41b348,%edi
  40f058:	e8 fa 60 ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	      return __end;
  40f05d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  40f061:	c9                   	leave
  40f062:	c3                   	ret
  40f063:	90                   	nop

000000000040f064 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>:
	format(bool __i, basic_format_context<_Out, _CharT>& __fc) const
  40f064:	55                   	push   %rbp
  40f065:	48 89 e5             	mov    %rsp,%rbp
  40f068:	53                   	push   %rbx
  40f069:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  40f070:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40f074:	89 f0                	mov    %esi,%eax
  40f076:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40f07d:	88 45 84             	mov    %al,-0x7c(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40f080:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f084:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f088:	83 e0 78             	and    $0x78,%eax
  40f08b:	3c 38                	cmp    $0x38,%al
  40f08d:	75 21                	jne    40f0b0 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x4c>
	    return _M_format_character(static_cast<unsigned char>(__i), __fc);
  40f08f:	0f b6 4d 84          	movzbl -0x7c(%rbp),%ecx
  40f093:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40f09a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f09e:	89 ce                	mov    %ecx,%esi
  40f0a0:	48 89 c7             	mov    %rax,%rdi
  40f0a3:	e8 18 02 00 00       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40f0a8:	48 89 c3             	mov    %rax,%rbx
  40f0ab:	e9 55 01 00 00       	jmp    40f205 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1a1>
	  if (_M_spec._M_type != _Pres_s)
  40f0b0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f0b4:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f0b8:	83 e0 78             	and    $0x78,%eax
  40f0bb:	84 c0                	test   %al,%al
  40f0bd:	74 21                	je     40f0e0 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x7c>
	    return format(static_cast<unsigned char>(__i), __fc);
  40f0bf:	0f b6 4d 84          	movzbl -0x7c(%rbp),%ecx
  40f0c3:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40f0ca:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f0ce:	89 ce                	mov    %ecx,%esi
  40f0d0:	48 89 c7             	mov    %rax,%rdi
  40f0d3:	e8 48 02 00 00       	call   40f320 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40f0d8:	48 89 c3             	mov    %rax,%rbx
  40f0db:	e9 25 01 00 00       	jmp    40f205 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1a1>
	  basic_string<_CharT> __s;
  40f0e0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f0e4:	48 89 c7             	mov    %rax,%rdi
  40f0e7:	e8 f8 59 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  if (_M_spec._M_localized) [[unlikely]]
  40f0ec:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f0f0:	0f b6 00             	movzbl (%rax),%eax
  40f0f3:	83 e0 20             	and    $0x20,%eax
  40f0f6:	84 c0                	test   %al,%al
  40f0f8:	0f 84 91 00 00 00    	je     40f18f <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x12b>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
  40f0fe:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f102:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40f109:	48 89 d6             	mov    %rdx,%rsi
  40f10c:	48 89 c7             	mov    %rax,%rdi
  40f10f:	e8 78 60 00 00       	call   41518c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  40f114:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f118:	48 89 c7             	mov    %rax,%rdi
  40f11b:	e8 a0 4f ff ff       	call   4040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  40f120:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40f124:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f128:	48 89 c7             	mov    %rax,%rdi
  40f12b:	e8 00 52 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      __s = __i ? __np.truename() : __np.falsename();
  40f130:	80 7d 84 00          	cmpb   $0x0,-0x7c(%rbp)
  40f134:	74 15                	je     40f14b <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0xe7>
  40f136:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40f13a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40f13e:	48 89 d6             	mov    %rdx,%rsi
  40f141:	48 89 c7             	mov    %rax,%rdi
  40f144:	e8 07 51 ff ff       	call   404250 <_ZNKSt7__cxx118numpunctIcE8truenameEv@plt>
  40f149:	eb 13                	jmp    40f15e <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0xfa>
  40f14b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40f14f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40f153:	48 89 d6             	mov    %rdx,%rsi
  40f156:	48 89 c7             	mov    %rax,%rdi
  40f159:	e8 a2 50 ff ff       	call   404200 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@plt>
  40f15e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40f162:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f166:	48 89 d6             	mov    %rdx,%rsi
  40f169:	48 89 c7             	mov    %rax,%rdi
  40f16c:	e8 61 60 00 00       	call   4151d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  40f171:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40f175:	48 89 c7             	mov    %rax,%rdi
  40f178:	e8 b5 83 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      __est_width = __s.size(); // TODO Unicode-aware estimate
  40f17d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f181:	48 89 c7             	mov    %rax,%rdi
  40f184:	e8 c5 5b ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40f189:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40f18d:	eb 31                	jmp    40f1c0 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x15c>
		__s = __i ? "true" : "false";
  40f18f:	80 7d 84 00          	cmpb   $0x0,-0x7c(%rbp)
  40f193:	74 07                	je     40f19c <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x138>
  40f195:	ba 3d b2 41 00       	mov    $0x41b23d,%edx
  40f19a:	eb 05                	jmp    40f1a1 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x13d>
  40f19c:	ba 37 b2 41 00       	mov    $0x41b237,%edx
  40f1a1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f1a5:	48 89 d6             	mov    %rdx,%rsi
  40f1a8:	48 89 c7             	mov    %rax,%rdi
  40f1ab:	e8 d0 62 00 00       	call   415480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	      __est_width = __s.size();
  40f1b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f1b4:	48 89 c7             	mov    %rax,%rdi
  40f1b7:	e8 92 5b ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40f1bc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						  _M_spec);
  40f1c0:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
	  return __format::__write_padded_as_spec(__s, __est_width, __fc,
  40f1c4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f1c8:	48 89 c7             	mov    %rax,%rdi
  40f1cb:	e8 10 8e ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  40f1d0:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  40f1d7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40f1db:	48 89 c7             	mov    %rax,%rdi
  40f1de:	48 89 d0             	mov    %rdx,%rax
  40f1e1:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  40f1e7:	49 89 d8             	mov    %rbx,%r8
  40f1ea:	48 89 f2             	mov    %rsi,%rdx
  40f1ed:	48 89 c6             	mov    %rax,%rsi
  40f1f0:	e8 95 40 00 00       	call   41328a <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
  40f1f5:	48 89 c3             	mov    %rax,%rbx
						  _M_spec);
  40f1f8:	90                   	nop
	}
  40f1f9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f1fd:	48 89 c7             	mov    %rax,%rdi
  40f200:	e8 2d 83 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40f205:	48 89 d8             	mov    %rbx,%rax
  40f208:	eb 2b                	jmp    40f235 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1d1>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
  40f20a:	48 89 c3             	mov    %rax,%rbx
  40f20d:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f211:	48 89 c7             	mov    %rax,%rdi
  40f214:	e8 17 51 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  40f219:	eb 03                	jmp    40f21e <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1ba>
	}
  40f21b:	48 89 c3             	mov    %rax,%rbx
  40f21e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f222:	48 89 c7             	mov    %rax,%rdi
  40f225:	e8 08 83 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40f22a:	48 89 d8             	mov    %rbx,%rax
  40f22d:	48 89 c7             	mov    %rax,%rdi
  40f230:	e8 db 51 ff ff       	call   404410 <_Unwind_Resume@plt>
  40f235:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f239:	c9                   	leave
  40f23a:	c3                   	ret
  40f23b:	90                   	nop

000000000040f23c <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40f23c:	55                   	push   %rbp
  40f23d:	48 89 e5             	mov    %rsp,%rbp
  40f240:	48 83 ec 20          	sub    $0x20,%rsp
  40f244:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40f248:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      auto __end = _M_do_parse(__pc, _AsChar);
  40f24c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f250:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f254:	ba 07 00 00 00       	mov    $0x7,%edx
  40f259:	48 89 ce             	mov    %rcx,%rsi
  40f25c:	48 89 c7             	mov    %rax,%rdi
  40f25f:	e8 30 77 ff ff       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
  40f264:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
  40f268:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f26c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f270:	83 e0 78             	and    $0x78,%eax
  40f273:	3c 38                	cmp    $0x38,%al
  40f275:	74 0f                	je     40f286 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x4a>
  40f277:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f27b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f27f:	83 e0 78             	and    $0x78,%eax
  40f282:	3c 78                	cmp    $0x78,%al
  40f284:	75 34                	jne    40f2ba <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x7e>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
  40f286:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f28a:	0f b6 00             	movzbl (%rax),%eax
  40f28d:	83 e0 0c             	and    $0xc,%eax
  40f290:	84 c0                	test   %al,%al
  40f292:	75 1c                	jne    40f2b0 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x74>
  40f294:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f298:	0f b6 00             	movzbl (%rax),%eax
  40f29b:	83 e0 10             	and    $0x10,%eax
  40f29e:	84 c0                	test   %al,%al
  40f2a0:	75 0e                	jne    40f2b0 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x74>
  40f2a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f2a6:	0f b6 00             	movzbl (%rax),%eax
  40f2a9:	83 e0 40             	and    $0x40,%eax
  40f2ac:	84 c0                	test   %al,%al
  40f2ae:	74 0a                	je     40f2ba <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x7e>
		  __throw_format_error("format error: format-spec contains "
  40f2b0:	bf 98 b3 41 00       	mov    $0x41b398,%edi
  40f2b5:	e8 9d 5e ff ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	      return __end;
  40f2ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  40f2be:	c9                   	leave
  40f2bf:	c3                   	ret

000000000040f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>:
	_M_format_character(_CharT __c,
  40f2c0:	55                   	push   %rbp
  40f2c1:	48 89 e5             	mov    %rsp,%rbp
  40f2c4:	53                   	push   %rbx
  40f2c5:	48 83 ec 38          	sub    $0x38,%rsp
  40f2c9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40f2cd:	89 f0                	mov    %esi,%eax
  40f2cf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40f2d3:	88 45 d4             	mov    %al,-0x2c(%rbp)
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
  40f2d6:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40f2da:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  40f2de:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40f2e2:	ba 01 00 00 00       	mov    $0x1,%edx
  40f2e7:	48 89 ce             	mov    %rcx,%rsi
  40f2ea:	48 89 c7             	mov    %rax,%rdi
  40f2ed:	e8 b8 81 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40f2f2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40f2f6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40f2fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f2fe:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  40f304:	49 89 d8             	mov    %rbx,%r8
  40f307:	48 89 d1             	mov    %rdx,%rcx
  40f30a:	ba 01 00 00 00       	mov    $0x1,%edx
  40f30f:	48 89 f7             	mov    %rsi,%rdi
  40f312:	48 89 c6             	mov    %rax,%rsi
  40f315:	e8 70 3f 00 00       	call   41328a <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
	}
  40f31a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f31e:	c9                   	leave
  40f31f:	c3                   	ret

000000000040f320 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40f320:	55                   	push   %rbp
  40f321:	48 89 e5             	mov    %rsp,%rbp
  40f324:	53                   	push   %rbx
  40f325:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  40f32c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  40f333:	89 f0                	mov    %esi,%eax
  40f335:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  40f33c:	88 85 44 ff ff ff    	mov    %al,-0xbc(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40f342:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f349:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f34d:	83 e0 78             	and    $0x78,%eax
  40f350:	3c 38                	cmp    $0x38,%al
  40f352:	75 2e                	jne    40f382 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  40f354:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40f35b:	89 c7                	mov    %eax,%edi
  40f35d:	e8 43 61 00 00       	call   4154a5 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_>
  40f362:	0f be c8             	movsbl %al,%ecx
  40f365:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  40f36c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f373:	89 ce                	mov    %ecx,%esi
  40f375:	48 89 c7             	mov    %rax,%rdi
  40f378:	e8 43 ff ff ff       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40f37d:	e9 5e 03 00 00       	jmp    40f6e0 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c0>
	  to_chars_result __res{};
  40f382:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  40f389:	00 00 00 00
  40f38d:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
  40f394:	00 00 00 00
	  string_view __base_prefix;
  40f398:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  40f39f:	00 00 00 00
  40f3a3:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  40f3aa:	00 00 00 00
	    __u = __i;
  40f3ae:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40f3b5:	88 45 df             	mov    %al,-0x21(%rbp)
	  char* __start = __buf + 3;
  40f3b8:	48 8d 85 75 ff ff ff 	lea    -0x8b(%rbp),%rax
  40f3bf:	48 83 c0 03          	add    $0x3,%rax
  40f3c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40f3c7:	48 8d 85 75 ff ff ff 	lea    -0x8b(%rbp),%rax
  40f3ce:	48 83 c0 0b          	add    $0xb,%rax
  40f3d2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40f3d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f3da:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40f3de:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f3e5:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f3e9:	c0 e8 03             	shr    $0x3,%al
  40f3ec:	83 e0 0f             	and    $0xf,%eax
  40f3ef:	0f b6 c0             	movzbl %al,%eax
  40f3f2:	83 f8 06             	cmp    $0x6,%eax
  40f3f5:	0f 8f e3 01 00 00    	jg     40f5de <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f3fb:	83 f8 05             	cmp    $0x5,%eax
  40f3fe:	0f 8d 27 01 00 00    	jge    40f52b <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x20b>
  40f404:	83 f8 04             	cmp    $0x4,%eax
  40f407:	0f 84 c2 00 00 00    	je     40f4cf <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1af>
  40f40d:	83 f8 04             	cmp    $0x4,%eax
  40f410:	0f 8f c8 01 00 00    	jg     40f5de <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f416:	83 f8 01             	cmp    $0x1,%eax
  40f419:	7f 0d                	jg     40f428 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
  40f41b:	85 c0                	test   %eax,%eax
  40f41d:	0f 89 80 00 00 00    	jns    40f4a3 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x183>
  40f423:	e9 b6 01 00 00       	jmp    40f5de <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f428:	83 e8 02             	sub    $0x2,%eax
  40f42b:	83 f8 01             	cmp    $0x1,%eax
  40f42e:	0f 87 aa 01 00 00    	ja     40f5de <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40f434:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f43b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f43f:	83 e0 78             	and    $0x78,%eax
  40f442:	3c 10                	cmp    $0x10,%al
  40f444:	75 07                	jne    40f44d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12d>
  40f446:	ba e2 b3 41 00       	mov    $0x41b3e2,%edx
  40f44b:	eb 05                	jmp    40f452 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x132>
  40f44d:	ba e5 b3 41 00       	mov    $0x41b3e5,%edx
  40f452:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40f456:	48 89 d6             	mov    %rdx,%rsi
  40f459:	48 89 c7             	mov    %rax,%rdi
  40f45c:	e8 dd 66 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f461:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40f465:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40f469:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40f470:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40f477:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f47b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f47f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f483:	b9 02 00 00 00       	mov    $0x2,%ecx
  40f488:	48 89 c7             	mov    %rax,%rdi
  40f48b:	e8 3c 60 00 00       	call   4154cc <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f490:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f497:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40f49e:	e9 3c 01 00 00       	jmp    40f5df <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      __res = to_chars(__start, __end, __u, 10);
  40f4a3:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f4a7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f4ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f4af:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40f4b4:	48 89 c7             	mov    %rax,%rdi
  40f4b7:	e8 10 60 00 00       	call   4154cc <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f4bc:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f4c3:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40f4ca:	e9 10 01 00 00       	jmp    40f5df <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      if (__i != 0)
  40f4cf:	80 bd 44 ff ff ff 00 	cmpb   $0x0,-0xbc(%rbp)
  40f4d6:	74 27                	je     40f4ff <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1df>
		__base_prefix = "0";
  40f4d8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f4dc:	be e8 b3 41 00       	mov    $0x41b3e8,%esi
  40f4e1:	48 89 c7             	mov    %rax,%rdi
  40f4e4:	e8 55 66 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f4e9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40f4ed:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40f4f1:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40f4f8:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40f4ff:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f503:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f507:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f50b:	b9 08 00 00 00       	mov    $0x8,%ecx
  40f510:	48 89 c7             	mov    %rax,%rdi
  40f513:	e8 b4 5f 00 00       	call   4154cc <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f518:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f51f:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40f526:	e9 b4 00 00 00       	jmp    40f5df <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40f52b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f532:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f536:	83 e0 78             	and    $0x78,%eax
  40f539:	3c 28                	cmp    $0x28,%al
  40f53b:	75 07                	jne    40f544 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x224>
  40f53d:	ba ea b3 41 00       	mov    $0x41b3ea,%edx
  40f542:	eb 05                	jmp    40f549 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x229>
  40f544:	ba ed b3 41 00       	mov    $0x41b3ed,%edx
  40f549:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40f54d:	48 89 d6             	mov    %rdx,%rsi
  40f550:	48 89 c7             	mov    %rax,%rdi
  40f553:	e8 e6 65 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f558:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40f55c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40f560:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40f567:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40f56e:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f572:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f576:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f57a:	b9 10 00 00 00       	mov    $0x10,%ecx
  40f57f:	48 89 c7             	mov    %rax,%rdi
  40f582:	e8 45 5f 00 00       	call   4154cc <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f587:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f58e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40f595:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f59c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f5a0:	83 e0 78             	and    $0x78,%eax
  40f5a3:	3c 30                	cmp    $0x30,%al
  40f5a5:	75 37                	jne    40f5de <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f5a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f5ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40f5af:	eb 1e                	jmp    40f5cf <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2af>
		  *__p = __builtin_toupper(*__p);
  40f5b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f5b5:	0f b6 00             	movzbl (%rax),%eax
  40f5b8:	0f be c0             	movsbl %al,%eax
  40f5bb:	89 c7                	mov    %eax,%edi
  40f5bd:	e8 5e 4e ff ff       	call   404420 <toupper@plt>
  40f5c2:	89 c2                	mov    %eax,%edx
  40f5c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f5c8:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f5ca:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40f5cf:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40f5d6:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40f5da:	75 d5                	jne    40f5b1 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x291>
	      break;
  40f5dc:	eb 00                	jmp    40f5de <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f5de:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40f5df:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f5e6:	0f b6 00             	movzbl (%rax),%eax
  40f5e9:	83 e0 10             	and    $0x10,%eax
  40f5ec:	84 c0                	test   %al,%al
  40f5ee:	74 1b                	je     40f60b <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2eb>
  40f5f0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f5f7:	48 89 c7             	mov    %rax,%rdi
  40f5fa:	e8 d5 66 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f5ff:	48 85 c0             	test   %rax,%rax
  40f602:	74 07                	je     40f60b <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2eb>
  40f604:	b8 01 00 00 00       	mov    $0x1,%eax
  40f609:	eb 05                	jmp    40f610 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f0>
  40f60b:	b8 00 00 00 00       	mov    $0x0,%eax
  40f610:	84 c0                	test   %al,%al
  40f612:	74 4c                	je     40f660 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x340>
	      __start -= __base_prefix.size();
  40f614:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f61b:	48 89 c7             	mov    %rax,%rdi
  40f61e:	e8 b1 66 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f623:	48 f7 d8             	neg    %rax
  40f626:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40f62a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f631:	48 89 c7             	mov    %rax,%rdi
  40f634:	e8 9b 66 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f639:	48 89 c3             	mov    %rax,%rbx
  40f63c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f643:	48 89 c7             	mov    %rax,%rdi
  40f646:	e8 4d 7e ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40f64b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f64f:	48 89 d1             	mov    %rdx,%rcx
  40f652:	48 89 da             	mov    %rbx,%rdx
  40f655:	48 89 c6             	mov    %rax,%rsi
  40f658:	48 89 cf             	mov    %rcx,%rdi
  40f65b:	e8 d0 4b ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40f660:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f664:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40f668:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f66f:	0f b6 00             	movzbl (%rax),%eax
  40f672:	c0 e8 02             	shr    $0x2,%al
  40f675:	83 e0 03             	and    $0x3,%eax
  40f678:	0f b6 c8             	movzbl %al,%ecx
  40f67b:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40f682:	89 ce                	mov    %ecx,%esi
  40f684:	89 c7                	mov    %eax,%edi
  40f686:	e8 72 5e 00 00       	call   4154fd <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_>
  40f68b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  40f68f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40f693:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40f697:	48 89 c3             	mov    %rax,%rbx
  40f69a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40f6a1:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40f6a5:	48 89 c2             	mov    %rax,%rdx
  40f6a8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40f6ac:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f6b0:	48 89 ce             	mov    %rcx,%rsi
  40f6b3:	48 89 c7             	mov    %rax,%rdi
  40f6b6:	e8 ef 7d ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40f6bb:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40f6c2:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40f6c6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40f6ca:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f6d1:	49 89 c8             	mov    %rcx,%r8
  40f6d4:	48 89 d9             	mov    %rbx,%rcx
  40f6d7:	48 89 c7             	mov    %rax,%rdi
  40f6da:	e8 57 5e 00 00       	call   415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40f6df:	90                   	nop
	}
  40f6e0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f6e4:	c9                   	leave
  40f6e5:	c3                   	ret

000000000040f6e6 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40f6e6:	55                   	push   %rbp
  40f6e7:	48 89 e5             	mov    %rsp,%rbp
  40f6ea:	53                   	push   %rbx
  40f6eb:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  40f6f2:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  40f6f9:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  40f6ff:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40f706:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f70d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f711:	83 e0 78             	and    $0x78,%eax
  40f714:	3c 38                	cmp    $0x38,%al
  40f716:	75 2d                	jne    40f745 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f>
	    return _M_format_character(_S_to_character(__i), __fc);
  40f718:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40f71e:	89 c7                	mov    %eax,%edi
  40f720:	e8 82 62 00 00       	call   4159a7 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_>
  40f725:	0f be c8             	movsbl %al,%ecx
  40f728:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40f72f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f736:	89 ce                	mov    %ecx,%esi
  40f738:	48 89 c7             	mov    %rax,%rdi
  40f73b:	e8 80 fb ff ff       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40f740:	e9 6a 03 00 00       	jmp    40faaf <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c9>
	  to_chars_result __res{};
  40f745:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40f74c:	00 00 00 00
  40f750:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  40f757:	00 00 00 00
	  string_view __base_prefix;
  40f75b:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40f762:	00 00 00 00
  40f766:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40f76d:	00 00 00 00
	  if (__i < 0)
  40f771:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40f778:	79 0d                	jns    40f787 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa1>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  40f77a:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40f780:	f7 d8                	neg    %eax
  40f782:	89 45 ec             	mov    %eax,-0x14(%rbp)
  40f785:	eb 09                	jmp    40f790 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaa>
	    __u = __i;
  40f787:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40f78d:	89 45 ec             	mov    %eax,-0x14(%rbp)
	  char* __start = __buf + 3;
  40f790:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f797:	48 83 c0 03          	add    $0x3,%rax
  40f79b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40f79f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f7a6:	48 83 c0 23          	add    $0x23,%rax
  40f7aa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40f7ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f7b2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40f7b6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f7bd:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f7c1:	c0 e8 03             	shr    $0x3,%al
  40f7c4:	83 e0 0f             	and    $0xf,%eax
  40f7c7:	0f b6 c0             	movzbl %al,%eax
  40f7ca:	83 f8 06             	cmp    $0x6,%eax
  40f7cd:	0f 8f db 01 00 00    	jg     40f9ae <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40f7d3:	83 f8 05             	cmp    $0x5,%eax
  40f7d6:	0f 8d 20 01 00 00    	jge    40f8fc <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x216>
  40f7dc:	83 f8 04             	cmp    $0x4,%eax
  40f7df:	0f 84 bc 00 00 00    	je     40f8a1 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1bb>
  40f7e5:	83 f8 04             	cmp    $0x4,%eax
  40f7e8:	0f 8f c0 01 00 00    	jg     40f9ae <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40f7ee:	83 f8 01             	cmp    $0x1,%eax
  40f7f1:	7f 09                	jg     40f7fc <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x116>
  40f7f3:	85 c0                	test   %eax,%eax
  40f7f5:	79 7f                	jns    40f876 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x190>
  40f7f7:	e9 b2 01 00 00       	jmp    40f9ae <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40f7fc:	83 e8 02             	sub    $0x2,%eax
  40f7ff:	83 f8 01             	cmp    $0x1,%eax
  40f802:	0f 87 a6 01 00 00    	ja     40f9ae <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40f808:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f80f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f813:	83 e0 78             	and    $0x78,%eax
  40f816:	3c 10                	cmp    $0x10,%al
  40f818:	75 07                	jne    40f821 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x13b>
  40f81a:	ba e2 b3 41 00       	mov    $0x41b3e2,%edx
  40f81f:	eb 05                	jmp    40f826 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x140>
  40f821:	ba e5 b3 41 00       	mov    $0x41b3e5,%edx
  40f826:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40f82a:	48 89 d6             	mov    %rdx,%rsi
  40f82d:	48 89 c7             	mov    %rax,%rdi
  40f830:	e8 09 63 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f835:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40f839:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40f83d:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40f844:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40f84b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40f84e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f852:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f856:	b9 02 00 00 00       	mov    $0x2,%ecx
  40f85b:	48 89 c7             	mov    %rax,%rdi
  40f85e:	e8 6c 61 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40f863:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40f86a:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40f871:	e9 39 01 00 00       	jmp    40f9af <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      __res = to_chars(__start, __end, __u, 10);
  40f876:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40f879:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f87d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f881:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40f886:	48 89 c7             	mov    %rax,%rdi
  40f889:	e8 41 61 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40f88e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40f895:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40f89c:	e9 0e 01 00 00       	jmp    40f9af <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      if (__i != 0)
  40f8a1:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40f8a8:	74 27                	je     40f8d1 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1eb>
		__base_prefix = "0";
  40f8aa:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f8ae:	be e8 b3 41 00       	mov    $0x41b3e8,%esi
  40f8b3:	48 89 c7             	mov    %rax,%rdi
  40f8b6:	e8 83 62 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f8bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40f8bf:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40f8c3:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40f8ca:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40f8d1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40f8d4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f8d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f8dc:	b9 08 00 00 00       	mov    $0x8,%ecx
  40f8e1:	48 89 c7             	mov    %rax,%rdi
  40f8e4:	e8 e6 60 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40f8e9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40f8f0:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40f8f7:	e9 b3 00 00 00       	jmp    40f9af <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40f8fc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f903:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f907:	83 e0 78             	and    $0x78,%eax
  40f90a:	3c 28                	cmp    $0x28,%al
  40f90c:	75 07                	jne    40f915 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x22f>
  40f90e:	ba ea b3 41 00       	mov    $0x41b3ea,%edx
  40f913:	eb 05                	jmp    40f91a <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x234>
  40f915:	ba ed b3 41 00       	mov    $0x41b3ed,%edx
  40f91a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40f91e:	48 89 d6             	mov    %rdx,%rsi
  40f921:	48 89 c7             	mov    %rax,%rdi
  40f924:	e8 15 62 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f929:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40f92d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40f931:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40f938:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40f93f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40f942:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f946:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f94a:	b9 10 00 00 00       	mov    $0x10,%ecx
  40f94f:	48 89 c7             	mov    %rax,%rdi
  40f952:	e8 78 60 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40f957:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40f95e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40f965:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f96c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f970:	83 e0 78             	and    $0x78,%eax
  40f973:	3c 30                	cmp    $0x30,%al
  40f975:	75 37                	jne    40f9ae <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f977:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f97b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40f97f:	eb 1e                	jmp    40f99f <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b9>
		  *__p = __builtin_toupper(*__p);
  40f981:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40f985:	0f b6 00             	movzbl (%rax),%eax
  40f988:	0f be c0             	movsbl %al,%eax
  40f98b:	89 c7                	mov    %eax,%edi
  40f98d:	e8 8e 4a ff ff       	call   404420 <toupper@plt>
  40f992:	89 c2                	mov    %eax,%edx
  40f994:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40f998:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f99a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  40f99f:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40f9a6:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40f9aa:	75 d5                	jne    40f981 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x29b>
	      break;
  40f9ac:	eb 00                	jmp    40f9ae <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40f9ae:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40f9af:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f9b6:	0f b6 00             	movzbl (%rax),%eax
  40f9b9:	83 e0 10             	and    $0x10,%eax
  40f9bc:	84 c0                	test   %al,%al
  40f9be:	74 1b                	je     40f9db <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f5>
  40f9c0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40f9c7:	48 89 c7             	mov    %rax,%rdi
  40f9ca:	e8 05 63 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f9cf:	48 85 c0             	test   %rax,%rax
  40f9d2:	74 07                	je     40f9db <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f5>
  40f9d4:	b8 01 00 00 00       	mov    $0x1,%eax
  40f9d9:	eb 05                	jmp    40f9e0 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2fa>
  40f9db:	b8 00 00 00 00       	mov    $0x0,%eax
  40f9e0:	84 c0                	test   %al,%al
  40f9e2:	74 4c                	je     40fa30 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x34a>
	      __start -= __base_prefix.size();
  40f9e4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40f9eb:	48 89 c7             	mov    %rax,%rdi
  40f9ee:	e8 e1 62 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f9f3:	48 f7 d8             	neg    %rax
  40f9f6:	48 01 45 e0          	add    %rax,-0x20(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40f9fa:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fa01:	48 89 c7             	mov    %rax,%rdi
  40fa04:	e8 cb 62 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fa09:	48 89 c3             	mov    %rax,%rbx
  40fa0c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fa13:	48 89 c7             	mov    %rax,%rdi
  40fa16:	e8 7d 7a ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40fa1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40fa1f:	48 89 d1             	mov    %rdx,%rcx
  40fa22:	48 89 da             	mov    %rbx,%rdx
  40fa25:	48 89 c6             	mov    %rax,%rsi
  40fa28:	48 89 cf             	mov    %rcx,%rdi
  40fa2b:	e8 00 48 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40fa30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fa34:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40fa38:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fa3f:	0f b6 00             	movzbl (%rax),%eax
  40fa42:	c0 e8 02             	shr    $0x2,%al
  40fa45:	83 e0 03             	and    $0x3,%eax
  40fa48:	0f b6 c8             	movzbl %al,%ecx
  40fa4b:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40fa51:	89 ce                	mov    %ecx,%esi
  40fa53:	89 c7                	mov    %eax,%edi
  40fa55:	e8 d4 51 00 00       	call   414c2e <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_>
  40fa5a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			       __start_digits - __start, __fc);
  40fa5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40fa62:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40fa66:	48 89 c3             	mov    %rax,%rbx
  40fa69:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40fa70:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  40fa74:	48 89 c2             	mov    %rax,%rdx
  40fa77:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40fa7b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40fa7f:	48 89 ce             	mov    %rcx,%rsi
  40fa82:	48 89 c7             	mov    %rax,%rdi
  40fa85:	e8 20 7a ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40fa8a:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40fa91:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40fa95:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40fa99:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40faa0:	49 89 c8             	mov    %rcx,%r8
  40faa3:	48 89 d9             	mov    %rbx,%rcx
  40faa6:	48 89 c7             	mov    %rax,%rdi
  40faa9:	e8 88 5a 00 00       	call   415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40faae:	90                   	nop
	}
  40faaf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40fab3:	c9                   	leave
  40fab4:	c3                   	ret
  40fab5:	90                   	nop

000000000040fab6 <_ZNSt8__format15__formatter_intIcE8_M_parseIjEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40fab6:	55                   	push   %rbp
  40fab7:	48 89 e5             	mov    %rsp,%rbp
  40faba:	48 83 ec 10          	sub    $0x10,%rsp
  40fabe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40fac2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40fac6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40faca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40face:	ba 01 00 00 00       	mov    $0x1,%edx
  40fad3:	48 89 ce             	mov    %rcx,%rsi
  40fad6:	48 89 c7             	mov    %rax,%rdi
  40fad9:	e8 b6 6e ff ff       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  40fade:	c9                   	leave
  40fadf:	c3                   	ret

000000000040fae0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40fae0:	55                   	push   %rbp
  40fae1:	48 89 e5             	mov    %rsp,%rbp
  40fae4:	53                   	push   %rbx
  40fae5:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  40faec:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  40faf3:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  40faf9:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40fb00:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fb07:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fb0b:	83 e0 78             	and    $0x78,%eax
  40fb0e:	3c 38                	cmp    $0x38,%al
  40fb10:	75 2d                	jne    40fb3f <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f>
	    return _M_format_character(_S_to_character(__i), __fc);
  40fb12:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40fb18:	89 c7                	mov    %eax,%edi
  40fb1a:	e8 de 5e 00 00       	call   4159fd <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_>
  40fb1f:	0f be c8             	movsbl %al,%ecx
  40fb22:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40fb29:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fb30:	89 ce                	mov    %ecx,%esi
  40fb32:	48 89 c7             	mov    %rax,%rdi
  40fb35:	e8 86 f7 ff ff       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40fb3a:	e9 54 03 00 00       	jmp    40fe93 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3b3>
	  to_chars_result __res{};
  40fb3f:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40fb46:	00 00 00 00
  40fb4a:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  40fb51:	00 00 00 00
	  string_view __base_prefix;
  40fb55:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40fb5c:	00 00 00 00
  40fb60:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40fb67:	00 00 00 00
	    __u = __i;
  40fb6b:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40fb71:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  char* __start = __buf + 3;
  40fb74:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40fb7b:	48 83 c0 03          	add    $0x3,%rax
  40fb7f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40fb83:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40fb8a:	48 83 c0 23          	add    $0x23,%rax
  40fb8e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40fb92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fb96:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40fb9a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fba1:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fba5:	c0 e8 03             	shr    $0x3,%al
  40fba8:	83 e0 0f             	and    $0xf,%eax
  40fbab:	0f b6 c0             	movzbl %al,%eax
  40fbae:	83 f8 06             	cmp    $0x6,%eax
  40fbb1:	0f 8f db 01 00 00    	jg     40fd92 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fbb7:	83 f8 05             	cmp    $0x5,%eax
  40fbba:	0f 8d 20 01 00 00    	jge    40fce0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x200>
  40fbc0:	83 f8 04             	cmp    $0x4,%eax
  40fbc3:	0f 84 bc 00 00 00    	je     40fc85 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1a5>
  40fbc9:	83 f8 04             	cmp    $0x4,%eax
  40fbcc:	0f 8f c0 01 00 00    	jg     40fd92 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fbd2:	83 f8 01             	cmp    $0x1,%eax
  40fbd5:	7f 09                	jg     40fbe0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x100>
  40fbd7:	85 c0                	test   %eax,%eax
  40fbd9:	79 7f                	jns    40fc5a <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
  40fbdb:	e9 b2 01 00 00       	jmp    40fd92 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fbe0:	83 e8 02             	sub    $0x2,%eax
  40fbe3:	83 f8 01             	cmp    $0x1,%eax
  40fbe6:	0f 87 a6 01 00 00    	ja     40fd92 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40fbec:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fbf3:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fbf7:	83 e0 78             	and    $0x78,%eax
  40fbfa:	3c 10                	cmp    $0x10,%al
  40fbfc:	75 07                	jne    40fc05 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x125>
  40fbfe:	ba e2 b3 41 00       	mov    $0x41b3e2,%edx
  40fc03:	eb 05                	jmp    40fc0a <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12a>
  40fc05:	ba e5 b3 41 00       	mov    $0x41b3e5,%edx
  40fc0a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40fc0e:	48 89 d6             	mov    %rdx,%rsi
  40fc11:	48 89 c7             	mov    %rax,%rdi
  40fc14:	e8 25 5f ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40fc19:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40fc1d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40fc21:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fc28:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40fc2f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fc32:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fc36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fc3a:	b9 02 00 00 00       	mov    $0x2,%ecx
  40fc3f:	48 89 c7             	mov    %rax,%rdi
  40fc42:	e8 88 5d 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fc47:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fc4e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40fc55:	e9 39 01 00 00       	jmp    40fd93 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      __res = to_chars(__start, __end, __u, 10);
  40fc5a:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fc5d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fc61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fc65:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40fc6a:	48 89 c7             	mov    %rax,%rdi
  40fc6d:	e8 5d 5d 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fc72:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fc79:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40fc80:	e9 0e 01 00 00       	jmp    40fd93 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      if (__i != 0)
  40fc85:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40fc8c:	74 27                	je     40fcb5 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1d5>
		__base_prefix = "0";
  40fc8e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40fc92:	be e8 b3 41 00       	mov    $0x41b3e8,%esi
  40fc97:	48 89 c7             	mov    %rax,%rdi
  40fc9a:	e8 9f 5e ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40fc9f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40fca3:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40fca7:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fcae:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40fcb5:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fcb8:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fcbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fcc0:	b9 08 00 00 00       	mov    $0x8,%ecx
  40fcc5:	48 89 c7             	mov    %rax,%rdi
  40fcc8:	e8 02 5d 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fccd:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fcd4:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40fcdb:	e9 b3 00 00 00       	jmp    40fd93 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40fce0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fce7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fceb:	83 e0 78             	and    $0x78,%eax
  40fcee:	3c 28                	cmp    $0x28,%al
  40fcf0:	75 07                	jne    40fcf9 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x219>
  40fcf2:	ba ea b3 41 00       	mov    $0x41b3ea,%edx
  40fcf7:	eb 05                	jmp    40fcfe <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x21e>
  40fcf9:	ba ed b3 41 00       	mov    $0x41b3ed,%edx
  40fcfe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40fd02:	48 89 d6             	mov    %rdx,%rsi
  40fd05:	48 89 c7             	mov    %rax,%rdi
  40fd08:	e8 31 5e ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40fd0d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40fd11:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40fd15:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fd1c:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40fd23:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fd26:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fd2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fd2e:	b9 10 00 00 00       	mov    $0x10,%ecx
  40fd33:	48 89 c7             	mov    %rax,%rdi
  40fd36:	e8 94 5c 00 00       	call   4159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fd3b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fd42:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40fd49:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fd50:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fd54:	83 e0 78             	and    $0x78,%eax
  40fd57:	3c 30                	cmp    $0x30,%al
  40fd59:	75 37                	jne    40fd92 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40fd5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fd5f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40fd63:	eb 1e                	jmp    40fd83 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2a3>
		  *__p = __builtin_toupper(*__p);
  40fd65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fd69:	0f b6 00             	movzbl (%rax),%eax
  40fd6c:	0f be c0             	movsbl %al,%eax
  40fd6f:	89 c7                	mov    %eax,%edi
  40fd71:	e8 aa 46 ff ff       	call   404420 <toupper@plt>
  40fd76:	89 c2                	mov    %eax,%edx
  40fd78:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fd7c:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40fd7e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40fd83:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40fd8a:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40fd8e:	75 d5                	jne    40fd65 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x285>
	      break;
  40fd90:	eb 00                	jmp    40fd92 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fd92:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40fd93:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fd9a:	0f b6 00             	movzbl (%rax),%eax
  40fd9d:	83 e0 10             	and    $0x10,%eax
  40fda0:	84 c0                	test   %al,%al
  40fda2:	74 1b                	je     40fdbf <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2df>
  40fda4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fdab:	48 89 c7             	mov    %rax,%rdi
  40fdae:	e8 21 5f ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fdb3:	48 85 c0             	test   %rax,%rax
  40fdb6:	74 07                	je     40fdbf <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2df>
  40fdb8:	b8 01 00 00 00       	mov    $0x1,%eax
  40fdbd:	eb 05                	jmp    40fdc4 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2e4>
  40fdbf:	b8 00 00 00 00       	mov    $0x0,%eax
  40fdc4:	84 c0                	test   %al,%al
  40fdc6:	74 4c                	je     40fe14 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x334>
	      __start -= __base_prefix.size();
  40fdc8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fdcf:	48 89 c7             	mov    %rax,%rdi
  40fdd2:	e8 fd 5e ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fdd7:	48 f7 d8             	neg    %rax
  40fdda:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40fdde:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fde5:	48 89 c7             	mov    %rax,%rdi
  40fde8:	e8 e7 5e ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fded:	48 89 c3             	mov    %rax,%rbx
  40fdf0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fdf7:	48 89 c7             	mov    %rax,%rdi
  40fdfa:	e8 99 76 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40fdff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40fe03:	48 89 d1             	mov    %rdx,%rcx
  40fe06:	48 89 da             	mov    %rbx,%rdx
  40fe09:	48 89 c6             	mov    %rax,%rsi
  40fe0c:	48 89 cf             	mov    %rcx,%rdi
  40fe0f:	e8 1c 44 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40fe14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fe18:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40fe1c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fe23:	0f b6 00             	movzbl (%rax),%eax
  40fe26:	c0 e8 02             	shr    $0x2,%al
  40fe29:	83 e0 03             	and    $0x3,%eax
  40fe2c:	0f b6 c8             	movzbl %al,%ecx
  40fe2f:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40fe35:	89 ce                	mov    %ecx,%esi
  40fe37:	89 c7                	mov    %eax,%edi
  40fe39:	e8 b9 4d 00 00       	call   414bf7 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_>
  40fe3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  40fe42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40fe46:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40fe4a:	48 89 c3             	mov    %rax,%rbx
  40fe4d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40fe54:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40fe58:	48 89 c2             	mov    %rax,%rdx
  40fe5b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40fe5f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40fe63:	48 89 ce             	mov    %rcx,%rsi
  40fe66:	48 89 c7             	mov    %rax,%rdi
  40fe69:	e8 3c 76 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40fe6e:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40fe75:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40fe79:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40fe7d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fe84:	49 89 c8             	mov    %rcx,%r8
  40fe87:	48 89 d9             	mov    %rbx,%rcx
  40fe8a:	48 89 c7             	mov    %rax,%rdi
  40fe8d:	e8 a4 56 00 00       	call   415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40fe92:	90                   	nop
	}
  40fe93:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40fe97:	c9                   	leave
  40fe98:	c3                   	ret
  40fe99:	90                   	nop

000000000040fe9a <_ZNSt8__format15__formatter_intIcE8_M_parseIxEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40fe9a:	55                   	push   %rbp
  40fe9b:	48 89 e5             	mov    %rsp,%rbp
  40fe9e:	48 83 ec 10          	sub    $0x10,%rsp
  40fea2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40fea6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40feaa:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40feae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40feb2:	ba 01 00 00 00       	mov    $0x1,%edx
  40feb7:	48 89 ce             	mov    %rcx,%rsi
  40feba:	48 89 c7             	mov    %rax,%rdi
  40febd:	e8 d2 6a ff ff       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  40fec2:	c9                   	leave
  40fec3:	c3                   	ret

000000000040fec4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40fec4:	55                   	push   %rbp
  40fec5:	48 89 e5             	mov    %rsp,%rbp
  40fec8:	53                   	push   %rbx
  40fec9:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  40fed0:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  40fed7:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  40fede:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40fee5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40feec:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fef0:	83 e0 78             	and    $0x78,%eax
  40fef3:	3c 38                	cmp    $0x38,%al
  40fef5:	75 2f                	jne    40ff26 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  40fef7:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40fefe:	48 89 c7             	mov    %rax,%rdi
  40ff01:	e8 19 5b 00 00       	call   415a1f <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_>
  40ff06:	0f be c8             	movsbl %al,%ecx
  40ff09:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40ff10:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40ff17:	89 ce                	mov    %ecx,%esi
  40ff19:	48 89 c7             	mov    %rax,%rdi
  40ff1c:	e8 9f f3 ff ff       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40ff21:	e9 7b 03 00 00       	jmp    4102a1 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3dd>
	  to_chars_result __res{};
  40ff26:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  40ff2d:	00 00 00 00
  40ff31:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
  40ff38:	00 00 00 00
	  string_view __base_prefix;
  40ff3c:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  40ff43:	00 00 00 00
  40ff47:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
  40ff4e:	00 00 00 00
	  if (__i < 0)
  40ff52:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  40ff59:	00
  40ff5a:	79 10                	jns    40ff6c <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa8>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  40ff5c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40ff63:	48 f7 d8             	neg    %rax
  40ff66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40ff6a:	eb 0b                	jmp    40ff77 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb3>
	    __u = __i;
  40ff6c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40ff73:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __start = __buf + 3;
  40ff77:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ff7e:	48 83 c0 03          	add    $0x3,%rax
  40ff82:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40ff86:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ff8d:	48 83 c0 43          	add    $0x43,%rax
  40ff91:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40ff95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ff99:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40ff9d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40ffa4:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ffa8:	c0 e8 03             	shr    $0x3,%al
  40ffab:	83 e0 0f             	and    $0xf,%eax
  40ffae:	0f b6 c0             	movzbl %al,%eax
  40ffb1:	83 f8 06             	cmp    $0x6,%eax
  40ffb4:	0f 8f e4 01 00 00    	jg     41019e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  40ffba:	83 f8 05             	cmp    $0x5,%eax
  40ffbd:	0f 8d 28 01 00 00    	jge    4100eb <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x227>
  40ffc3:	83 f8 04             	cmp    $0x4,%eax
  40ffc6:	0f 84 c2 00 00 00    	je     41008e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1ca>
  40ffcc:	83 f8 04             	cmp    $0x4,%eax
  40ffcf:	0f 8f c9 01 00 00    	jg     41019e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  40ffd5:	83 f8 01             	cmp    $0x1,%eax
  40ffd8:	7f 0d                	jg     40ffe7 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x123>
  40ffda:	85 c0                	test   %eax,%eax
  40ffdc:	0f 89 80 00 00 00    	jns    410062 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x19e>
  40ffe2:	e9 b7 01 00 00       	jmp    41019e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  40ffe7:	83 e8 02             	sub    $0x2,%eax
  40ffea:	83 f8 01             	cmp    $0x1,%eax
  40ffed:	0f 87 ab 01 00 00    	ja     41019e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40fff3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40fffa:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fffe:	83 e0 78             	and    $0x78,%eax
  410001:	3c 10                	cmp    $0x10,%al
  410003:	75 07                	jne    41000c <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x148>
  410005:	ba e2 b3 41 00       	mov    $0x41b3e2,%edx
  41000a:	eb 05                	jmp    410011 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x14d>
  41000c:	ba e5 b3 41 00       	mov    $0x41b3e5,%edx
  410011:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  410015:	48 89 d6             	mov    %rdx,%rsi
  410018:	48 89 c7             	mov    %rax,%rdi
  41001b:	e8 1e 5b ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  410020:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  410024:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  410028:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  41002f:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  410036:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41003a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  41003e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410042:	b9 02 00 00 00       	mov    $0x2,%ecx
  410047:	48 89 c7             	mov    %rax,%rdi
  41004a:	e8 fc 59 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  41004f:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410056:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  41005d:	e9 3d 01 00 00       	jmp    41019f <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      __res = to_chars(__start, __end, __u, 10);
  410062:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410066:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  41006a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41006e:	b9 0a 00 00 00       	mov    $0xa,%ecx
  410073:	48 89 c7             	mov    %rax,%rdi
  410076:	e8 d0 59 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  41007b:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410082:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  410089:	e9 11 01 00 00       	jmp    41019f <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      if (__i != 0)
  41008e:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  410095:	00
  410096:	74 27                	je     4100bf <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1fb>
		__base_prefix = "0";
  410098:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  41009c:	be e8 b3 41 00       	mov    $0x41b3e8,%esi
  4100a1:	48 89 c7             	mov    %rax,%rdi
  4100a4:	e8 95 5a ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  4100a9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4100ad:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4100b1:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4100b8:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  4100bf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4100c3:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4100c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4100cb:	b9 08 00 00 00       	mov    $0x8,%ecx
  4100d0:	48 89 c7             	mov    %rax,%rdi
  4100d3:	e8 73 59 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  4100d8:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4100df:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  4100e6:	e9 b4 00 00 00       	jmp    41019f <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  4100eb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4100f2:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4100f6:	83 e0 78             	and    $0x78,%eax
  4100f9:	3c 28                	cmp    $0x28,%al
  4100fb:	75 07                	jne    410104 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x240>
  4100fd:	ba ea b3 41 00       	mov    $0x41b3ea,%edx
  410102:	eb 05                	jmp    410109 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x245>
  410104:	ba ed b3 41 00       	mov    $0x41b3ed,%edx
  410109:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41010d:	48 89 d6             	mov    %rdx,%rsi
  410110:	48 89 c7             	mov    %rax,%rdi
  410113:	e8 26 5a ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  410118:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41011c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410120:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  410127:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  41012e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410132:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  410136:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41013a:	b9 10 00 00 00       	mov    $0x10,%ecx
  41013f:	48 89 c7             	mov    %rax,%rdi
  410142:	e8 04 59 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  410147:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  41014e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  410155:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41015c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410160:	83 e0 78             	and    $0x78,%eax
  410163:	3c 30                	cmp    $0x30,%al
  410165:	75 37                	jne    41019e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  410167:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41016b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  41016f:	eb 1e                	jmp    41018f <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2cb>
		  *__p = __builtin_toupper(*__p);
  410171:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  410175:	0f b6 00             	movzbl (%rax),%eax
  410178:	0f be c0             	movsbl %al,%eax
  41017b:	89 c7                	mov    %eax,%edi
  41017d:	e8 9e 42 ff ff       	call   404420 <toupper@plt>
  410182:	89 c2                	mov    %eax,%edx
  410184:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  410188:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  41018a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  41018f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  410196:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  41019a:	75 d5                	jne    410171 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ad>
	      break;
  41019c:	eb 00                	jmp    41019e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  41019e:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  41019f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4101a6:	0f b6 00             	movzbl (%rax),%eax
  4101a9:	83 e0 10             	and    $0x10,%eax
  4101ac:	84 c0                	test   %al,%al
  4101ae:	74 1b                	je     4101cb <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x307>
  4101b0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4101b7:	48 89 c7             	mov    %rax,%rdi
  4101ba:	e8 15 5b ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4101bf:	48 85 c0             	test   %rax,%rax
  4101c2:	74 07                	je     4101cb <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x307>
  4101c4:	b8 01 00 00 00       	mov    $0x1,%eax
  4101c9:	eb 05                	jmp    4101d0 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x30c>
  4101cb:	b8 00 00 00 00       	mov    $0x0,%eax
  4101d0:	84 c0                	test   %al,%al
  4101d2:	74 4c                	je     410220 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x35c>
	      __start -= __base_prefix.size();
  4101d4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4101db:	48 89 c7             	mov    %rax,%rdi
  4101de:	e8 f1 5a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4101e3:	48 f7 d8             	neg    %rax
  4101e6:	48 01 45 e0          	add    %rax,-0x20(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  4101ea:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4101f1:	48 89 c7             	mov    %rax,%rdi
  4101f4:	e8 db 5a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4101f9:	48 89 c3             	mov    %rax,%rbx
  4101fc:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  410203:	48 89 c7             	mov    %rax,%rdi
  410206:	e8 8d 72 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  41020b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41020f:	48 89 d1             	mov    %rdx,%rcx
  410212:	48 89 da             	mov    %rbx,%rdx
  410215:	48 89 c6             	mov    %rax,%rsi
  410218:	48 89 cf             	mov    %rcx,%rdi
  41021b:	e8 10 40 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  410220:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410224:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  410228:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41022f:	0f b6 00             	movzbl (%rax),%eax
  410232:	c0 e8 02             	shr    $0x2,%al
  410235:	83 e0 03             	and    $0x3,%eax
  410238:	0f b6 c8             	movzbl %al,%ecx
  41023b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  410242:	89 ce                	mov    %ecx,%esi
  410244:	48 89 c7             	mov    %rax,%rdi
  410247:	e8 28 4a 00 00       	call   414c74 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_>
  41024c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			       __start_digits - __start, __fc);
  410250:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410254:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  410258:	48 89 c3             	mov    %rax,%rbx
  41025b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  410262:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  410266:	48 89 c2             	mov    %rax,%rdx
  410269:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  41026d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410271:	48 89 ce             	mov    %rcx,%rsi
  410274:	48 89 c7             	mov    %rax,%rdi
  410277:	e8 2e 72 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  41027c:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  410283:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  410287:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  41028b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410292:	49 89 c8             	mov    %rcx,%r8
  410295:	48 89 d9             	mov    %rbx,%rcx
  410298:	48 89 c7             	mov    %rax,%rdi
  41029b:	e8 96 52 00 00       	call   415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  4102a0:	90                   	nop
	}
  4102a1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4102a5:	c9                   	leave
  4102a6:	c3                   	ret
  4102a7:	90                   	nop

00000000004102a8 <_ZNSt8__format15__formatter_intIcE8_M_parseIyEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  4102a8:	55                   	push   %rbp
  4102a9:	48 89 e5             	mov    %rsp,%rbp
  4102ac:	48 83 ec 10          	sub    $0x10,%rsp
  4102b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4102b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  4102b8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4102bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4102c0:	ba 01 00 00 00       	mov    $0x1,%edx
  4102c5:	48 89 ce             	mov    %rcx,%rsi
  4102c8:	48 89 c7             	mov    %rax,%rdi
  4102cb:	e8 c4 66 ff ff       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  4102d0:	c9                   	leave
  4102d1:	c3                   	ret

00000000004102d2 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  4102d2:	55                   	push   %rbp
  4102d3:	48 89 e5             	mov    %rsp,%rbp
  4102d6:	53                   	push   %rbx
  4102d7:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  4102de:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  4102e5:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  4102ec:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  4102f3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4102fa:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4102fe:	83 e0 78             	and    $0x78,%eax
  410301:	3c 38                	cmp    $0x38,%al
  410303:	75 2f                	jne    410334 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  410305:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  41030c:	48 89 c7             	mov    %rax,%rdi
  41030f:	e8 67 57 00 00       	call   415a7b <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_>
  410314:	0f be c8             	movsbl %al,%ecx
  410317:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  41031e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410325:	89 ce                	mov    %ecx,%esi
  410327:	48 89 c7             	mov    %rax,%rdi
  41032a:	e8 91 ef ff ff       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  41032f:	e9 61 03 00 00       	jmp    410695 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
	  to_chars_result __res{};
  410334:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  41033b:	00 00 00 00
  41033f:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
  410346:	00 00 00 00
	  string_view __base_prefix;
  41034a:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  410351:	00 00 00 00
  410355:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
  41035c:	00 00 00 00
	    __u = __i;
  410360:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  410367:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  char* __start = __buf + 3;
  41036b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  410372:	48 83 c0 03          	add    $0x3,%rax
  410376:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  41037a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  410381:	48 83 c0 43          	add    $0x43,%rax
  410385:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  410389:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41038d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  410391:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410398:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41039c:	c0 e8 03             	shr    $0x3,%al
  41039f:	83 e0 0f             	and    $0xf,%eax
  4103a2:	0f b6 c0             	movzbl %al,%eax
  4103a5:	83 f8 06             	cmp    $0x6,%eax
  4103a8:	0f 8f e4 01 00 00    	jg     410592 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  4103ae:	83 f8 05             	cmp    $0x5,%eax
  4103b1:	0f 8d 28 01 00 00    	jge    4104df <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x20d>
  4103b7:	83 f8 04             	cmp    $0x4,%eax
  4103ba:	0f 84 c2 00 00 00    	je     410482 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1b0>
  4103c0:	83 f8 04             	cmp    $0x4,%eax
  4103c3:	0f 8f c9 01 00 00    	jg     410592 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  4103c9:	83 f8 01             	cmp    $0x1,%eax
  4103cc:	7f 0d                	jg     4103db <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x109>
  4103ce:	85 c0                	test   %eax,%eax
  4103d0:	0f 89 80 00 00 00    	jns    410456 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x184>
  4103d6:	e9 b7 01 00 00       	jmp    410592 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  4103db:	83 e8 02             	sub    $0x2,%eax
  4103de:	83 f8 01             	cmp    $0x1,%eax
  4103e1:	0f 87 ab 01 00 00    	ja     410592 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  4103e7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4103ee:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4103f2:	83 e0 78             	and    $0x78,%eax
  4103f5:	3c 10                	cmp    $0x10,%al
  4103f7:	75 07                	jne    410400 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12e>
  4103f9:	ba e2 b3 41 00       	mov    $0x41b3e2,%edx
  4103fe:	eb 05                	jmp    410405 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x133>
  410400:	ba e5 b3 41 00       	mov    $0x41b3e5,%edx
  410405:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  410409:	48 89 d6             	mov    %rdx,%rsi
  41040c:	48 89 c7             	mov    %rax,%rdi
  41040f:	e8 2a 57 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  410414:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  410418:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  41041c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  410423:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  41042a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41042e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  410432:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410436:	b9 02 00 00 00       	mov    $0x2,%ecx
  41043b:	48 89 c7             	mov    %rax,%rdi
  41043e:	e8 08 56 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  410443:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  41044a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  410451:	e9 3d 01 00 00       	jmp    410593 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      __res = to_chars(__start, __end, __u, 10);
  410456:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41045a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  41045e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410462:	b9 0a 00 00 00       	mov    $0xa,%ecx
  410467:	48 89 c7             	mov    %rax,%rdi
  41046a:	e8 dc 55 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  41046f:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410476:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  41047d:	e9 11 01 00 00       	jmp    410593 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      if (__i != 0)
  410482:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  410489:	00
  41048a:	74 27                	je     4104b3 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1e1>
		__base_prefix = "0";
  41048c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  410490:	be e8 b3 41 00       	mov    $0x41b3e8,%esi
  410495:	48 89 c7             	mov    %rax,%rdi
  410498:	e8 a1 56 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  41049d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4104a1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4104a5:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4104ac:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  4104b3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4104b7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4104bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4104bf:	b9 08 00 00 00       	mov    $0x8,%ecx
  4104c4:	48 89 c7             	mov    %rax,%rdi
  4104c7:	e8 7f 55 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  4104cc:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4104d3:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  4104da:	e9 b4 00 00 00       	jmp    410593 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  4104df:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4104e6:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4104ea:	83 e0 78             	and    $0x78,%eax
  4104ed:	3c 28                	cmp    $0x28,%al
  4104ef:	75 07                	jne    4104f8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
  4104f1:	ba ea b3 41 00       	mov    $0x41b3ea,%edx
  4104f6:	eb 05                	jmp    4104fd <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x22b>
  4104f8:	ba ed b3 41 00       	mov    $0x41b3ed,%edx
  4104fd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  410501:	48 89 d6             	mov    %rdx,%rsi
  410504:	48 89 c7             	mov    %rax,%rdi
  410507:	e8 32 56 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  41050c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410510:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410514:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  41051b:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  410522:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  410526:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  41052a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41052e:	b9 10 00 00 00       	mov    $0x10,%ecx
  410533:	48 89 c7             	mov    %rax,%rdi
  410536:	e8 10 55 00 00       	call   415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  41053b:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410542:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  410549:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410550:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410554:	83 e0 78             	and    $0x78,%eax
  410557:	3c 30                	cmp    $0x30,%al
  410559:	75 37                	jne    410592 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  41055b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41055f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  410563:	eb 1e                	jmp    410583 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b1>
		  *__p = __builtin_toupper(*__p);
  410565:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410569:	0f b6 00             	movzbl (%rax),%eax
  41056c:	0f be c0             	movsbl %al,%eax
  41056f:	89 c7                	mov    %eax,%edi
  410571:	e8 aa 3e ff ff       	call   404420 <toupper@plt>
  410576:	89 c2                	mov    %eax,%edx
  410578:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41057c:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  41057e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  410583:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  41058a:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  41058e:	75 d5                	jne    410565 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x293>
	      break;
  410590:	eb 00                	jmp    410592 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  410592:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  410593:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41059a:	0f b6 00             	movzbl (%rax),%eax
  41059d:	83 e0 10             	and    $0x10,%eax
  4105a0:	84 c0                	test   %al,%al
  4105a2:	74 1b                	je     4105bf <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ed>
  4105a4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4105ab:	48 89 c7             	mov    %rax,%rdi
  4105ae:	e8 21 57 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4105b3:	48 85 c0             	test   %rax,%rax
  4105b6:	74 07                	je     4105bf <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ed>
  4105b8:	b8 01 00 00 00       	mov    $0x1,%eax
  4105bd:	eb 05                	jmp    4105c4 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f2>
  4105bf:	b8 00 00 00 00       	mov    $0x0,%eax
  4105c4:	84 c0                	test   %al,%al
  4105c6:	74 4c                	je     410614 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __start -= __base_prefix.size();
  4105c8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4105cf:	48 89 c7             	mov    %rax,%rdi
  4105d2:	e8 fd 56 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4105d7:	48 f7 d8             	neg    %rax
  4105da:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  4105de:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4105e5:	48 89 c7             	mov    %rax,%rdi
  4105e8:	e8 e7 56 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4105ed:	48 89 c3             	mov    %rax,%rbx
  4105f0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4105f7:	48 89 c7             	mov    %rax,%rdi
  4105fa:	e8 99 6e ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  4105ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410603:	48 89 d1             	mov    %rdx,%rcx
  410606:	48 89 da             	mov    %rbx,%rdx
  410609:	48 89 c6             	mov    %rax,%rsi
  41060c:	48 89 cf             	mov    %rcx,%rdi
  41060f:	e8 1c 3c ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  410614:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410618:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  41061c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410623:	0f b6 00             	movzbl (%rax),%eax
  410626:	c0 e8 02             	shr    $0x2,%al
  410629:	83 e0 03             	and    $0x3,%eax
  41062c:	0f b6 c8             	movzbl %al,%ecx
  41062f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  410636:	89 ce                	mov    %ecx,%esi
  410638:	48 89 c7             	mov    %rax,%rdi
  41063b:	e8 7c 46 00 00       	call   414cbc <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_>
  410640:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  410644:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410648:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  41064c:	48 89 c3             	mov    %rax,%rbx
  41064f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  410656:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  41065a:	48 89 c2             	mov    %rax,%rdx
  41065d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410661:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410665:	48 89 ce             	mov    %rcx,%rsi
  410668:	48 89 c7             	mov    %rax,%rdi
  41066b:	e8 3a 6e ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  410670:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  410677:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  41067b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  41067f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410686:	49 89 c8             	mov    %rcx,%r8
  410689:	48 89 d9             	mov    %rbx,%rcx
  41068c:	48 89 c7             	mov    %rax,%rdi
  41068f:	e8 a2 4e 00 00       	call   415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  410694:	90                   	nop
	}
  410695:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  410699:	c9                   	leave
  41069a:	c3                   	ret
  41069b:	90                   	nop

000000000041069c <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  41069c:	55                   	push   %rbp
  41069d:	48 89 e5             	mov    %rsp,%rbp
  4106a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  4106a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4106a8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4106ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4106b0:	48 8b 00             	mov    (%rax),%rax
  4106b3:	48 8b 0a             	mov    (%rdx),%rcx
  4106b6:	48 89 08             	mov    %rcx,(%rax)
  4106b9:	8b 52 08             	mov    0x8(%rdx),%edx
  4106bc:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  4106bf:	90                   	nop
  4106c0:	5d                   	pop    %rbp
  4106c1:	c3                   	ret

00000000004106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  4106c2:	55                   	push   %rbp
  4106c3:	48 89 e5             	mov    %rsp,%rbp
  4106c6:	48 83 ec 10          	sub    $0x10,%rsp
  4106ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  4106ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4106d2:	48 8b 00             	mov    (%rax),%rax
  4106d5:	48 8b 10             	mov    (%rax),%rdx
  4106d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4106dc:	48 8b 40 08          	mov    0x8(%rax),%rax
  4106e0:	48 8b 00             	mov    (%rax),%rax
  4106e3:	48 39 c2             	cmp    %rax,%rdx
  4106e6:	74 11                	je     4106f9 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  4106e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4106ec:	48 8b 00             	mov    (%rax),%rax
  4106ef:	48 8b 00             	mov    (%rax),%rax
  4106f2:	0f b6 00             	movzbl (%rax),%eax
  4106f5:	3c 7d                	cmp    $0x7d,%al
  4106f7:	75 17                	jne    410710 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  4106f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4106fd:	48 8b 40 10          	mov    0x10(%rax),%rax
  410701:	48 89 c7             	mov    %rax,%rdi
  410704:	e8 93 ff ff ff       	call   41069c <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  410709:	b8 01 00 00 00       	mov    $0x1,%eax
  41070e:	eb 05                	jmp    410715 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  410710:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  410715:	c9                   	leave
  410716:	c3                   	ret
  410717:	90                   	nop

0000000000410718 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  410718:	55                   	push   %rbp
  410719:	48 89 e5             	mov    %rsp,%rbp
  41071c:	48 83 ec 60          	sub    $0x60,%rsp
  410720:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  410724:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	_Spec<_CharT> __spec{};
  410728:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  41072f:	00
  410730:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  410737:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	const auto __last = __pc.end();
  41073e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410742:	48 89 c7             	mov    %rax,%rdi
  410745:	e8 62 5a ff ff       	call   4061ac <_ZNKSt26basic_format_parse_contextIcE3endEv>
  41074a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  41074e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410752:	48 89 c7             	mov    %rax,%rdi
  410755:	e8 22 5a ff ff       	call   40617c <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  41075a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  41075e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  410762:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  410766:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  41076a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  41076e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  410772:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  410776:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  41077a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  41077e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  410782:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  410786:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41078a:	48 89 c7             	mov    %rax,%rdi
  41078d:	e8 30 ff ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410792:	84 c0                	test   %al,%al
  410794:	74 09                	je     41079f <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  410796:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41079a:	e9 96 02 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  41079f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4107a3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4107a7:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4107ab:	48 89 ce             	mov    %rcx,%rsi
  4107ae:	48 89 c7             	mov    %rax,%rdi
  4107b1:	e8 6e 7e ff ff       	call   408624 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  4107b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4107ba:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4107be:	48 89 c7             	mov    %rax,%rdi
  4107c1:	e8 fc fe ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4107c6:	84 c0                	test   %al,%al
  4107c8:	74 09                	je     4107d3 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0xbb>
	  return __first;
  4107ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4107ce:	e9 62 02 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_sign(__first, __last);
  4107d3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4107d7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4107db:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4107df:	48 89 ce             	mov    %rcx,%rsi
  4107e2:	48 89 c7             	mov    %rax,%rdi
  4107e5:	e8 86 83 ff ff       	call   408b70 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>
  4107ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4107ee:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4107f2:	48 89 c7             	mov    %rax,%rdi
  4107f5:	e8 c8 fe ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4107fa:	84 c0                	test   %al,%al
  4107fc:	74 09                	je     410807 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0xef>
	  return __first;
  4107fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410802:	e9 2e 02 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_alternate_form(__first, __last);
  410807:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41080b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  41080f:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  410813:	48 89 ce             	mov    %rcx,%rsi
  410816:	48 89 c7             	mov    %rax,%rdi
  410819:	e8 ae 83 ff ff       	call   408bcc <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>
  41081e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  410822:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410826:	48 89 c7             	mov    %rax,%rdi
  410829:	e8 94 fe ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  41082e:	84 c0                	test   %al,%al
  410830:	74 09                	je     41083b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x123>
	  return __first;
  410832:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410836:	e9 fa 01 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_zero_fill(__first, __last);
  41083b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41083f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  410843:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  410847:	48 89 ce             	mov    %rcx,%rsi
  41084a:	48 89 c7             	mov    %rax,%rdi
  41084d:	e8 ac 83 ff ff       	call   408bfe <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>
  410852:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  410856:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41085a:	48 89 c7             	mov    %rax,%rdi
  41085d:	e8 60 fe ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410862:	84 c0                	test   %al,%al
  410864:	74 09                	je     41086f <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x157>
	  return __first;
  410866:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41086a:	e9 c6 01 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	if (__first[0] != '.')
  41086f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410873:	0f b6 00             	movzbl (%rax),%eax
  410876:	3c 2e                	cmp    $0x2e,%al
  410878:	74 35                	je     4108af <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x197>
	    __first = __spec._M_parse_width(__first, __last, __pc);
  41087a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41087e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  410882:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  410886:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  41088a:	48 89 c7             	mov    %rax,%rdi
  41088d:	e8 24 7f ff ff       	call   4087b6 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  410892:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    if (__finished())
  410896:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41089a:	48 89 c7             	mov    %rax,%rdi
  41089d:	e8 20 fe ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4108a2:	84 c0                	test   %al,%al
  4108a4:	74 09                	je     4108af <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x197>
	      return __first;
  4108a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4108aa:	e9 86 01 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_precision(__first, __last, __pc);
  4108af:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4108b3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4108b7:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4108bb:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4108bf:	48 89 c7             	mov    %rax,%rdi
  4108c2:	e8 8d 7f ff ff       	call   408854 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>
  4108c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4108cb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4108cf:	48 89 c7             	mov    %rax,%rdi
  4108d2:	e8 eb fd ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4108d7:	84 c0                	test   %al,%al
  4108d9:	74 09                	je     4108e4 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x1cc>
	  return __first;
  4108db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4108df:	e9 51 01 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_locale(__first, __last);
  4108e4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4108e8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4108ec:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4108f0:	48 89 ce             	mov    %rcx,%rsi
  4108f3:	48 89 c7             	mov    %rax,%rdi
  4108f6:	e8 35 83 ff ff       	call   408c30 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>
  4108fb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4108ff:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410903:	48 89 c7             	mov    %rax,%rdi
  410906:	e8 b7 fd ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  41090b:	84 c0                	test   %al,%al
  41090d:	74 09                	je     410918 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x200>
	  return __first;
  41090f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410913:	e9 1d 01 00 00       	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	switch (*__first)
  410918:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41091c:	0f b6 00             	movzbl (%rax),%eax
  41091f:	0f be c0             	movsbl %al,%eax
  410922:	83 e8 41             	sub    $0x41,%eax
  410925:	83 f8 26             	cmp    $0x26,%eax
  410928:	0f 87 ec 00 00 00    	ja     410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
  41092e:	89 c0                	mov    %eax,%eax
  410930:	48 8b 04 c5 d0 e2 41 	mov    0x41e2d0(,%rax,8),%rax
  410937:	00
  410938:	ff e0                	jmp    *%rax
	    __spec._M_type = _Pres_a;
  41093a:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  41093e:	83 e0 87             	and    $0xffffff87,%eax
  410941:	83 c8 08             	or     $0x8,%eax
  410944:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410947:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41094b:	48 83 c0 01          	add    $0x1,%rax
  41094f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410953:	e9 c2 00 00 00       	jmp    410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_A;
  410958:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  41095c:	83 e0 87             	and    $0xffffff87,%eax
  41095f:	83 c8 10             	or     $0x10,%eax
  410962:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410965:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410969:	48 83 c0 01          	add    $0x1,%rax
  41096d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410971:	e9 a4 00 00 00       	jmp    410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_e;
  410976:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  41097a:	83 e0 87             	and    $0xffffff87,%eax
  41097d:	83 c8 18             	or     $0x18,%eax
  410980:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410983:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410987:	48 83 c0 01          	add    $0x1,%rax
  41098b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  41098f:	e9 86 00 00 00       	jmp    410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_E;
  410994:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410998:	83 e0 87             	and    $0xffffff87,%eax
  41099b:	83 c8 20             	or     $0x20,%eax
  41099e:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  4109a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4109a5:	48 83 c0 01          	add    $0x1,%rax
  4109a9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  4109ad:	eb 6b                	jmp    410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_f;
  4109af:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4109b3:	83 e0 87             	and    $0xffffff87,%eax
  4109b6:	83 c8 28             	or     $0x28,%eax
  4109b9:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  4109bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4109c0:	48 83 c0 01          	add    $0x1,%rax
  4109c4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  4109c8:	eb 50                	jmp    410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_F;
  4109ca:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4109ce:	83 e0 87             	and    $0xffffff87,%eax
  4109d1:	83 c8 30             	or     $0x30,%eax
  4109d4:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  4109d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4109db:	48 83 c0 01          	add    $0x1,%rax
  4109df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  4109e3:	eb 35                	jmp    410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_g;
  4109e5:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4109e9:	83 e0 87             	and    $0xffffff87,%eax
  4109ec:	83 c8 38             	or     $0x38,%eax
  4109ef:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  4109f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4109f6:	48 83 c0 01          	add    $0x1,%rax
  4109fa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  4109fe:	eb 1a                	jmp    410a1a <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_G;
  410a00:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410a04:	83 e0 87             	and    $0xffffff87,%eax
  410a07:	83 c8 40             	or     $0x40,%eax
  410a0a:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410a0d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410a11:	48 83 c0 01          	add    $0x1,%rax
  410a15:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410a19:	90                   	nop
	if (__finished())
  410a1a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410a1e:	48 89 c7             	mov    %rax,%rdi
  410a21:	e8 9c fc ff ff       	call   4106c2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410a26:	84 c0                	test   %al,%al
  410a28:	74 06                	je     410a30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x318>
	  return __first;
  410a2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410a2e:	eb 05                	jmp    410a35 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__format::__failed_to_parse_format_spec();
  410a30:	e8 ad 47 ff ff       	call   4051e2 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  410a35:	c9                   	leave
  410a36:	c3                   	ret
  410a37:	90                   	nop

0000000000410a38 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  410a38:	55                   	push   %rbp
  410a39:	48 89 e5             	mov    %rsp,%rbp
  410a3c:	48 83 ec 20          	sub    $0x20,%rsp
  410a40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  410a44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  410a48:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  410a4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410a50:	48 8b 00             	mov    (%rax),%rax
  410a53:	0f b6 00             	movzbl (%rax),%eax
  410a56:	84 c0                	test   %al,%al
  410a58:	74 37                	je     410a91 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x59>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  410a5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410a5e:	48 8b 40 18          	mov    0x18(%rax),%rax
  410a62:	48 8b 00             	mov    (%rax),%rax
  410a65:	89 c1                	mov    %eax,%ecx
  410a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410a6b:	48 8b 40 10          	mov    0x10(%rax),%rax
  410a6f:	8b 10                	mov    (%rax),%edx
  410a71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410a75:	48 8b 40 08          	mov    0x8(%rax),%rax
  410a79:	8b 38                	mov    (%rax),%edi
  410a7b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  410a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  410a83:	66 0f 6e c7          	movd   %edi,%xmm0
  410a87:	48 89 c7             	mov    %rax,%rdi
  410a8a:	e8 41 38 ff ff       	call   4042d0 <_ZSt8to_charsPcS_fSt12chars_formati@plt>
  410a8f:	eb 5d                	jmp    410aee <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb6>
	    else if (__fmt != chars_format{})
  410a91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410a95:	48 8b 40 10          	mov    0x10(%rax),%rax
  410a99:	8b 00                	mov    (%rax),%eax
  410a9b:	85 c0                	test   %eax,%eax
  410a9d:	74 2d                	je     410acc <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x94>
	      return __format::to_chars(__b, __e, __v, __fmt);
  410a9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410aa3:	48 8b 40 10          	mov    0x10(%rax),%rax
  410aa7:	8b 10                	mov    (%rax),%edx
  410aa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410aad:	48 8b 40 08          	mov    0x8(%rax),%rax
  410ab1:	8b 30                	mov    (%rax),%esi
  410ab3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  410abb:	66 0f 6e c6          	movd   %esi,%xmm0
  410abf:	48 89 ce             	mov    %rcx,%rsi
  410ac2:	48 89 c7             	mov    %rax,%rdi
  410ac5:	e8 b6 37 ff ff       	call   404280 <_ZSt8to_charsPcS_fSt12chars_format@plt>
  410aca:	eb 22                	jmp    410aee <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb6>
	      return __format::to_chars(__b, __e, __v);
  410acc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410ad0:	48 8b 40 08          	mov    0x8(%rax),%rax
  410ad4:	8b 08                	mov    (%rax),%ecx
  410ad6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410ada:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  410ade:	66 0f 6e c1          	movd   %ecx,%xmm0
  410ae2:	48 89 d6             	mov    %rdx,%rsi
  410ae5:	48 89 c7             	mov    %rax,%rdi
  410ae8:	e8 43 35 ff ff       	call   404030 <_ZSt8to_charsPcS_f@plt>
  410aed:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  410aee:	c9                   	leave
  410aef:	c3                   	ret

0000000000410af0 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  410af0:	55                   	push   %rbp
  410af1:	48 89 e5             	mov    %rsp,%rbp
  410af4:	53                   	push   %rbx
  410af5:	48 83 ec 28          	sub    $0x28,%rsp
  410af9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  410afd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  410b01:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  410b05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410b09:	48 8b 00             	mov    (%rax),%rax
  410b0c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  410b10:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  410b14:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  410b18:	48 01 ca             	add    %rcx,%rdx
  410b1b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  410b1f:	48 83 c1 01          	add    $0x1,%rcx
  410b23:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  410b27:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  410b2b:	48 89 ce             	mov    %rcx,%rsi
  410b2e:	48 89 c7             	mov    %rax,%rdi
  410b31:	e8 02 ff ff ff       	call   410a38 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  410b36:	48 89 03             	mov    %rax,(%rbx)
  410b39:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  410b3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410b41:	48 8b 40 08          	mov    0x8(%rax),%rax
  410b45:	8b 40 08             	mov    0x8(%rax),%eax
  410b48:	85 c0                	test   %eax,%eax
  410b4a:	75 11                	jne    410b5d <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  410b4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410b50:	48 8b 40 08          	mov    0x8(%rax),%rax
  410b54:	48 8b 00             	mov    (%rax),%rax
  410b57:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  410b5b:	eb 05                	jmp    410b62 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  410b5d:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  410b62:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  410b66:	c9                   	leave
  410b67:	c3                   	ret

0000000000410b68 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  410b68:	55                   	push   %rbp
  410b69:	48 89 e5             	mov    %rsp,%rbp
  410b6c:	53                   	push   %rbx
  410b6d:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  410b74:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  410b7b:	f3 0f 11 85 94 fd ff 	movss  %xmm0,-0x26c(%rbp)
  410b82:	ff
  410b83:	48 89 b5 88 fd ff ff 	mov    %rsi,-0x278(%rbp)
	  std::string __dynbuf;
  410b8a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410b91:	48 89 c7             	mov    %rax,%rdi
  410b94:	e8 4b 3f ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  410b99:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  410ba0:	00 00 00 00
  410ba4:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  410bab:	00 00 00 00
	  size_t __prec = 6;
  410baf:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  410bb6:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  410bba:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410bc1:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410bc5:	83 e0 06             	and    $0x6,%eax
  410bc8:	84 c0                	test   %al,%al
  410bca:	0f 95 c0             	setne  %al
  410bcd:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  410bd3:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  410bda:	84 c0                	test   %al,%al
  410bdc:	74 20                	je     410bfe <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x96>
	    __prec = _M_spec._M_get_precision(__fc);
  410bde:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410be5:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  410bec:	48 89 d6             	mov    %rdx,%rsi
  410bef:	48 89 c7             	mov    %rax,%rdi
  410bf2:	e8 a9 4e 00 00       	call   415aa0 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  410bf7:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  410bfe:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  410c05:	48 83 c0 01          	add    $0x1,%rax
  410c09:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  410c0d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  410c14:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  410c18:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  410c1c:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  410c23:	00 00 00
	  bool __upper = false;
  410c26:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  410c2a:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  410c2e:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  410c32:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410c39:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410c3d:	c0 e8 03             	shr    $0x3,%al
  410c40:	83 e0 0f             	and    $0xf,%eax
  410c43:	0f b6 c0             	movzbl %al,%eax
  410c46:	89 c0                	mov    %eax,%eax
  410c48:	48 8b 04 c5 08 e4 41 	mov    0x41e408(,%rax,8),%rax
  410c4f:	00
  410c50:	ff e0                	jmp    *%rax
	      __upper = true;
  410c52:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  410c56:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  410c5a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410c61:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410c65:	83 e0 78             	and    $0x78,%eax
  410c68:	3c 10                	cmp    $0x10,%al
  410c6a:	74 04                	je     410c70 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
		__expc = 'p';
  410c6c:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  410c70:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  410c77:	00 00 00
	      break;
  410c7a:	eb 67                	jmp    410ce3 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  410c7c:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  410c80:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  410c84:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  410c8b:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  410c92:	00 00 00
	      break;
  410c95:	eb 4c                	jmp    410ce3 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  410c97:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  410c9b:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  410ca2:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  410ca9:	00 00 00
	      break;
  410cac:	eb 35                	jmp    410ce3 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  410cae:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  410cb2:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  410cb6:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  410cba:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  410cc1:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  410cc8:	00 00 00
	      break;
  410ccb:	eb 16                	jmp    410ce3 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      if (__use_prec)
  410ccd:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  410cd4:	84 c0                	test   %al,%al
  410cd6:	74 0a                	je     410ce2 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
		__fmt = chars_format::general;
  410cd8:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  410cdf:	00 00 00
	      break;
  410ce2:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  410ce3:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  410cea:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  410cf1:	48 8d 85 94 fd ff ff 	lea    -0x26c(%rbp),%rax
  410cf8:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  410cff:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  410d06:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  410d0d:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  410d14:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  410d1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  410d1f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410d23:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  410d2a:	48 89 ce             	mov    %rcx,%rsi
  410d2d:	48 89 c7             	mov    %rax,%rdi
  410d30:	e8 03 fd ff ff       	call   410a38 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  410d35:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  410d3c:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  410d43:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  410d49:	83 f8 4b             	cmp    $0x4b,%eax
  410d4c:	0f 94 c0             	sete   %al
  410d4f:	0f b6 c0             	movzbl %al,%eax
  410d52:	48 85 c0             	test   %rax,%rax
  410d55:	0f 84 63 01 00 00    	je     410ebe <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x356>
	      size_t __guess = 8 + __prec;
  410d5b:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  410d62:	48 83 c0 08          	add    $0x8,%rax
  410d66:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  410d6a:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  410d70:	83 f8 02             	cmp    $0x2,%eax
  410d73:	75 58                	jne    410dcd <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x265>
		      int __exp{};
  410d75:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  410d7c:	00 00 00
			__builtin_frexpf(__v, &__exp);
  410d7f:	8b 85 94 fd ff ff    	mov    -0x26c(%rbp),%eax
  410d85:	48 8d 95 d4 fd ff ff 	lea    -0x22c(%rbp),%rdx
  410d8c:	48 89 d7             	mov    %rdx,%rdi
  410d8f:	66 0f 6e c0          	movd   %eax,%xmm0
  410d93:	e8 a8 32 ff ff       	call   404040 <frexpf@plt>
		      if (__exp > 0)
  410d98:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  410d9e:	85 c0                	test   %eax,%eax
  410da0:	7e 2b                	jle    410dcd <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x265>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  410da2:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  410da8:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  410dae:	89 d0                	mov    %edx,%eax
  410db0:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  410db7:	48 c1 e8 20          	shr    $0x20,%rax
  410dbb:	29 c2                	sub    %eax,%edx
  410dbd:	d1 ea                	shr    %edx
  410dbf:	01 d0                	add    %edx,%eax
  410dc1:	c1 e8 0d             	shr    $0xd,%eax
  410dc4:	83 c0 01             	add    $0x1,%eax
  410dc7:	89 c0                	mov    %eax,%eax
  410dc9:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  410dcd:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  410dd4:	00
  410dd5:	77 08                	ja     410ddf <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x277>
		__guess = sizeof(__buf) * 2;
  410dd7:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  410dde:	00
	      __dynbuf.reserve(__guess);
  410ddf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  410de3:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410dea:	48 89 d6             	mov    %rdx,%rsi
  410ded:	48 89 c7             	mov    %rax,%rdi
  410df0:	e8 b1 a4 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  410df5:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  410dfc:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  410e03:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  410e0a:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  410e11:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410e18:	48 89 c7             	mov    %rax,%rdi
  410e1b:	e8 58 a4 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  410e20:	48 01 c0             	add    %rax,%rax
  410e23:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  410e2a:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  410e31:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  410e38:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  410e3f:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  410e46:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  410e4d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  410e54:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410e5b:	48 89 ce             	mov    %rcx,%rsi
  410e5e:	48 89 c7             	mov    %rax,%rdi
  410e61:	e8 ce 69 00 00       	call   417834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  410e66:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  410e67:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410e6e:	48 89 c7             	mov    %rax,%rdi
  410e71:	e8 34 99 ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  410e76:	48 83 c0 01          	add    $0x1,%rax
  410e7a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  410e7e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410e85:	48 89 c7             	mov    %rax,%rdi
  410e88:	e8 1d 99 ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  410e8d:	48 89 c3             	mov    %rax,%rbx
  410e90:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410e97:	48 89 c7             	mov    %rax,%rdi
  410e9a:	e8 af 3e ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  410e9f:	48 01 d8             	add    %rbx,%rax
  410ea2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  410ea6:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  410eac:	83 f8 4b             	cmp    $0x4b,%eax
  410eaf:	0f 94 c0             	sete   %al
  410eb2:	0f b6 c0             	movzbl %al,%eax
  410eb5:	48 85 c0             	test   %rax,%rax
  410eb8:	0f 85 37 ff ff ff    	jne    410df5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x28d>
	  if (__upper)
  410ebe:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  410ec2:	74 35                	je     410ef9 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x391>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  410ec4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410ec8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  410ecc:	eb 1e                	jmp    410eec <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x384>
		*__p = std::toupper(*__p);
  410ece:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410ed2:	0f b6 00             	movzbl (%rax),%eax
  410ed5:	0f be c0             	movsbl %al,%eax
  410ed8:	89 c7                	mov    %eax,%edi
  410eda:	e8 41 35 ff ff       	call   404420 <toupper@plt>
  410edf:	89 c2                	mov    %eax,%edx
  410ee1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410ee5:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  410ee7:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  410eec:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  410ef3:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  410ef7:	75 d5                	jne    410ece <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x366>
	  bool __have_sign = true;
  410ef9:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  410efd:	8b 85 94 fd ff ff    	mov    -0x26c(%rbp),%eax
  410f03:	25 00 00 00 80       	and    $0x80000000,%eax
  410f08:	85 c0                	test   %eax,%eax
  410f0a:	75 42                	jne    410f4e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
	      if (_M_spec._M_sign == _Sign_plus)
  410f0c:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410f13:	0f b6 00             	movzbl (%rax),%eax
  410f16:	83 e0 0c             	and    $0xc,%eax
  410f19:	3c 04                	cmp    $0x4,%al
  410f1b:	75 0e                	jne    410f2b <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
		*--__start = '+';
  410f1d:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  410f22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410f26:	c6 00 2b             	movb   $0x2b,(%rax)
  410f29:	eb 23                	jmp    410f4e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
	      else if (_M_spec._M_sign == _Sign_space)
  410f2b:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410f32:	0f b6 00             	movzbl (%rax),%eax
  410f35:	83 e0 0c             	and    $0xc,%eax
  410f38:	3c 0c                	cmp    $0xc,%al
  410f3a:	75 0e                	jne    410f4a <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e2>
		*--__start = ' ';
  410f3c:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  410f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410f45:	c6 00 20             	movb   $0x20,(%rax)
  410f48:	eb 04                	jmp    410f4e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
		__have_sign = false;
  410f4a:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  410f4e:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  410f55:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  410f59:	48 89 c2             	mov    %rax,%rdx
  410f5c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410f60:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  410f67:	48 89 ce             	mov    %rcx,%rsi
  410f6a:	48 89 c7             	mov    %rax,%rdi
  410f6d:	e8 38 65 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  410f72:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410f79:	0f b6 00             	movzbl (%rax),%eax
  410f7c:	83 e0 10             	and    $0x10,%eax
  410f7f:	84 c0                	test   %al,%al
  410f81:	0f 84 29 04 00 00    	je     4113b0 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
  410f87:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  410f8e:	ff
  410f8f:	f3 0f 10 0d 49 a5 00 	movss  0xa549(%rip),%xmm1        # 41b4e0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  410f96:	00
  410f97:	0f 54 c8             	andps  %xmm0,%xmm1
  410f9a:	f3 0f 10 05 4e a5 00 	movss  0xa54e(%rip),%xmm0        # 41b4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  410fa1:	00
  410fa2:	0f 2e c1             	ucomiss %xmm1,%xmm0
  410fa5:	0f 92 c0             	setb   %al
  410fa8:	83 f0 01             	xor    $0x1,%eax
  410fab:	0f b6 c0             	movzbl %al,%eax
  410fae:	85 c0                	test   %eax,%eax
  410fb0:	0f 84 fa 03 00 00    	je     4113b0 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
	      string_view __s = __narrow_str;
  410fb6:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  410fbd:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  410fc4:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  410fcb:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  410fd2:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  410fd9:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  410fda:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410fe1:	ba 00 00 00 00       	mov    $0x0,%edx
  410fe6:	be 2e 00 00 00       	mov    $0x2e,%esi
  410feb:	48 89 c7             	mov    %rax,%rdi
  410fee:	e8 31 52 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  410ff3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  410ff7:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  410ffc:	0f 84 a5 00 00 00    	je     4110a7 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x53f>
		  __p = __s.find(__expc, __d + 1);
  411002:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411006:	48 8d 50 01          	lea    0x1(%rax),%rdx
  41100a:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  41100e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411015:	89 ce                	mov    %ecx,%esi
  411017:	48 89 c7             	mov    %rax,%rdi
  41101a:	e8 05 52 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  41101f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411023:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411028:	75 13                	jne    41103d <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4d5>
		    __p = __s.size();
  41102a:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411031:	48 89 c7             	mov    %rax,%rdi
  411034:	e8 9b 4c ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411039:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  41103d:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411041:	0f 84 af 00 00 00    	je     4110f6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
		      if (__s[__have_sign] != '0')
  411047:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  41104b:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411052:	48 89 d6             	mov    %rdx,%rsi
  411055:	48 89 c7             	mov    %rax,%rdi
  411058:	e8 89 4c ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41105d:	0f b6 00             	movzbl (%rax),%eax
  411060:	3c 30                	cmp    $0x30,%al
  411062:	0f 95 c0             	setne  %al
  411065:	84 c0                	test   %al,%al
  411067:	74 15                	je     41107e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x516>
			__sigfigs = __p - __have_sign - 1;
  411069:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  41106d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411071:	48 29 c2             	sub    %rax,%rdx
  411074:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  411078:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  41107c:	eb 78                	jmp    4110f6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  41107e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411082:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411086:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41108d:	be 30 00 00 00       	mov    $0x30,%esi
  411092:	48 89 c7             	mov    %rax,%rdi
  411095:	e8 5a 3c 00 00       	call   414cf4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  41109a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41109e:	48 29 c2             	sub    %rax,%rdx
  4110a1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4110a5:	eb 4f                	jmp    4110f6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
		  __p = __s.find(__expc); // Find the exponent, if present.
  4110a7:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4110ab:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4110b2:	ba 00 00 00 00       	mov    $0x0,%edx
  4110b7:	89 ce                	mov    %ecx,%esi
  4110b9:	48 89 c7             	mov    %rax,%rdi
  4110bc:	e8 63 51 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4110c1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  4110c5:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  4110ca:	75 13                	jne    4110df <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x577>
		    __p = __s.size();
  4110cc:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4110d3:	48 89 c7             	mov    %rax,%rdi
  4110d6:	e8 f9 4b ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4110db:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  4110df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4110e3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  4110e7:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  4110eb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4110ef:	48 29 c2             	sub    %rax,%rdx
  4110f2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  4110f6:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  4110fa:	74 1b                	je     411117 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5af>
  4110fc:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411103:	48 85 c0             	test   %rax,%rax
  411106:	74 0f                	je     411117 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5af>
		  __z = __prec - __sigfigs;
  411108:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  41110f:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  411113:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  411117:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41111b:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41111f:	0f 94 c0             	sete   %al
  411122:	0f b6 d0             	movzbl %al,%edx
  411125:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411129:	48 01 d0             	add    %rdx,%rax
  41112c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  411130:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  411135:	0f 84 75 02 00 00    	je     4113b0 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  41113b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411142:	48 89 c7             	mov    %rax,%rdi
  411145:	e8 84 de ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41114a:	84 c0                	test   %al,%al
  41114c:	74 1e                	je     41116c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x604>
  41114e:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411155:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411159:	48 29 c2             	sub    %rax,%rdx
  41115c:	48 89 d0             	mov    %rdx,%rax
  41115f:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  411163:	72 07                	jb     41116c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x604>
  411165:	b8 01 00 00 00       	mov    $0x1,%eax
  41116a:	eb 05                	jmp    411171 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x609>
  41116c:	b8 00 00 00 00       	mov    $0x0,%eax
  411171:	84 c0                	test   %al,%al
  411173:	0f 84 d7 00 00 00    	je     411250 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6e8>
					__s.size() - __p);
  411179:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411180:	48 89 c7             	mov    %rax,%rdi
  411183:	e8 4c 4b ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  411188:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  41118c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411190:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411194:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  411198:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  41119c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4111a0:	48 01 d1             	add    %rdx,%rcx
  4111a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4111a7:	48 01 d1             	add    %rdx,%rcx
  4111aa:	48 89 c2             	mov    %rax,%rdx
  4111ad:	48 89 cf             	mov    %rcx,%rdi
  4111b0:	e8 0b 32 ff ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  4111b5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4111b9:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4111bd:	75 16                	jne    4111d5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x66d>
			__start[__p++] = '.';
  4111bf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4111c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4111c7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4111cb:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4111cf:	48 01 c8             	add    %rcx,%rax
  4111d2:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  4111d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4111d9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4111dd:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4111e1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4111e5:	48 89 c2             	mov    %rax,%rdx
  4111e8:	be 30 00 00 00       	mov    $0x30,%esi
  4111ed:	48 89 cf             	mov    %rcx,%rdi
  4111f0:	e8 4b 2f ff ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  4111f5:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4111fc:	48 89 c7             	mov    %rax,%rdi
  4111ff:	e8 94 62 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  411204:	48 89 c3             	mov    %rax,%rbx
  411207:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41120e:	48 89 c7             	mov    %rax,%rdi
  411211:	e8 be 4a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411216:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41121a:	48 01 c2             	add    %rax,%rdx
  41121d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  411224:	48 89 de             	mov    %rbx,%rsi
  411227:	48 89 c7             	mov    %rax,%rdi
  41122a:	e8 7b 62 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  41122f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  411236:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  41123d:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  411244:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  41124b:	e9 60 01 00 00       	jmp    4113b0 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
		      __dynbuf.reserve(__s.size() + __extras);
  411250:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411257:	48 89 c7             	mov    %rax,%rdi
  41125a:	e8 75 4a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41125f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411263:	48 01 c2             	add    %rax,%rdx
  411266:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41126d:	48 89 d6             	mov    %rdx,%rsi
  411270:	48 89 c7             	mov    %rax,%rdi
  411273:	e8 2e a0 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  411278:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41127f:	48 89 c7             	mov    %rax,%rdi
  411282:	e8 47 dd ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411287:	84 c0                	test   %al,%al
  411289:	0f 84 c5 00 00 00    	je     411354 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7ec>
			  __dynbuf = __s.substr(0, __p);
  41128f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411293:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41129a:	be 00 00 00 00       	mov    $0x0,%esi
  41129f:	48 89 c7             	mov    %rax,%rdi
  4112a2:	e8 53 a7 ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  4112a7:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4112ae:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4112b5:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  4112bc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4112c3:	48 89 d6             	mov    %rdx,%rsi
  4112c6:	48 89 c7             	mov    %rax,%rdi
  4112c9:	e8 84 3a 00 00       	call   414d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  4112ce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4112d2:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4112d6:	75 14                	jne    4112ec <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x784>
			    __dynbuf += '.';
  4112d8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4112df:	be 2e 00 00 00       	mov    $0x2e,%esi
  4112e4:	48 89 c7             	mov    %rax,%rdi
  4112e7:	e8 8c 3a 00 00       	call   414d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  4112ec:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  4112f1:	74 1b                	je     41130e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7a6>
			    __dynbuf.append(__z, '0');
  4112f3:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4112f7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4112fe:	ba 30 00 00 00       	mov    $0x30,%edx
  411303:	48 89 ce             	mov    %rcx,%rsi
  411306:	48 89 c7             	mov    %rax,%rdi
  411309:	e8 94 3a 00 00       	call   414da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  41130e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  411312:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411319:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  411320:	48 89 ce             	mov    %rcx,%rsi
  411323:	48 89 c7             	mov    %rax,%rdi
  411326:	e8 cf a6 ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  41132b:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  411332:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  411339:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  411340:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411347:	48 89 d6             	mov    %rdx,%rsi
  41134a:	48 89 c7             	mov    %rax,%rdi
  41134d:	e8 9a 3a 00 00       	call   414dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  411352:	eb 3f                	jmp    411393 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x82b>
			  __dynbuf.insert(__p, __extras, '0');
  411354:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411358:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  41135c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411363:	b9 30 00 00 00       	mov    $0x30,%ecx
  411368:	48 89 c7             	mov    %rax,%rdi
  41136b:	e8 d6 3a 00 00       	call   414e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  411370:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411374:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411378:	75 19                	jne    411393 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x82b>
			    __dynbuf[__p] = '.';
  41137a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41137e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411385:	48 89 d6             	mov    %rdx,%rsi
  411388:	48 89 c7             	mov    %rax,%rdi
  41138b:	e8 10 3b 00 00       	call   414ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  411390:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  411393:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41139a:	48 89 c7             	mov    %rax,%rdi
  41139d:	e8 3e 6c ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4113a2:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4113a9:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  4113b0:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4113b7:	48 89 c7             	mov    %rax,%rdi
  4113ba:	e8 25 37 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  4113bf:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  4113c6:	00 00 00 00
  4113ca:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  4113d1:	00 00 00 00
	    __str = __narrow_str;
  4113d5:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4113dc:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4113e3:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  4113ea:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  4113f1:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4113f8:	0f b6 00             	movzbl (%rax),%eax
  4113fb:	83 e0 20             	and    $0x20,%eax
  4113fe:	84 c0                	test   %al,%al
  411400:	0f 84 ea 00 00 00    	je     4114f0 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
  411406:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  41140d:	ff
  41140e:	f3 0f 10 0d ca a0 00 	movss  0xa0ca(%rip),%xmm1        # 41b4e0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  411415:	00
  411416:	0f 54 c8             	andps  %xmm0,%xmm1
  411419:	f3 0f 10 05 cf a0 00 	movss  0xa0cf(%rip),%xmm0        # 41b4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  411420:	00
  411421:	0f 2e c1             	ucomiss %xmm1,%xmm0
  411424:	0f 92 c0             	setb   %al
  411427:	83 f0 01             	xor    $0x1,%eax
  41142a:	0f b6 c0             	movzbl %al,%eax
  41142d:	85 c0                	test   %eax,%eax
  41142f:	0f 84 bb 00 00 00    	je     4114f0 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  411435:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41143c:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  411443:	48 89 d6             	mov    %rdx,%rsi
  411446:	48 89 c7             	mov    %rax,%rdi
  411449:	e8 3e 3d 00 00       	call   41518c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  41144e:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411452:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  411459:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  411460:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  411467:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  41146e:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  411475:	4d 89 c1             	mov    %r8,%r9
  411478:	41 89 c8             	mov    %ecx,%r8d
  41147b:	48 89 d1             	mov    %rdx,%rcx
  41147e:	48 89 c2             	mov    %rax,%rdx
  411481:	e8 d4 47 00 00       	call   415c5a <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  411486:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  41148d:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411494:	48 89 d6             	mov    %rdx,%rsi
  411497:	48 89 c7             	mov    %rax,%rdi
  41149a:	e8 33 3d 00 00       	call   4151d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  41149f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4114a6:	48 89 c7             	mov    %rax,%rdi
  4114a9:	e8 84 60 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4114ae:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4114b5:	48 89 c7             	mov    %rax,%rdi
  4114b8:	e8 73 2e ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  4114bd:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4114c4:	48 89 c7             	mov    %rax,%rdi
  4114c7:	e8 02 db ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4114cc:	83 f0 01             	xor    $0x1,%eax
  4114cf:	84 c0                	test   %al,%al
  4114d1:	74 1d                	je     4114f0 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
		__str = __wstr;
  4114d3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4114da:	48 89 c7             	mov    %rax,%rdi
  4114dd:	e8 fe 6a ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4114e2:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  4114e9:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  4114f0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4114f7:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  4114fe:	48 89 d6             	mov    %rdx,%rsi
  411501:	48 89 c7             	mov    %rax,%rdi
  411504:	e8 ed 49 00 00       	call   415ef6 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  411509:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  41150d:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411514:	48 89 c7             	mov    %rax,%rdi
  411517:	e8 b8 47 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41151c:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  411520:	0f 93 c0             	setae  %al
  411523:	84 c0                	test   %al,%al
  411525:	74 36                	je     41155d <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9f5>
	    return __format::__write(__fc.out(), __str);
  411527:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  41152e:	48 89 c7             	mov    %rax,%rdi
  411531:	e8 92 a3 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  411536:	48 89 c1             	mov    %rax,%rcx
  411539:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  411540:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  411547:	48 89 d6             	mov    %rdx,%rsi
  41154a:	48 89 c2             	mov    %rax,%rdx
  41154d:	48 89 cf             	mov    %rcx,%rdi
  411550:	e8 cd d1 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  411555:	48 89 c3             	mov    %rax,%rbx
  411558:	e9 8f 01 00 00       	jmp    4116ec <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb84>
	  char32_t __fill_char = _M_spec._M_fill;
  41155d:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411564:	8b 40 08             	mov    0x8(%rax),%eax
  411567:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  41156a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411571:	0f b6 00             	movzbl (%rax),%eax
  411574:	83 e0 03             	and    $0x3,%eax
  411577:	0f b6 c0             	movzbl %al,%eax
  41157a:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  41157d:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411584:	48 89 c7             	mov    %rax,%rdi
  411587:	e8 48 47 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41158c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  411590:	48 29 c2             	sub    %rax,%rdx
  411593:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  411597:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  41159e:	48 89 c7             	mov    %rax,%rdi
  4115a1:	e8 22 a3 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4115a6:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  4115ad:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  4115b1:	0f 85 f8 00 00 00    	jne    4116af <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
	      __align = _Align_right;
  4115b7:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  4115be:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4115c5:	0f b6 00             	movzbl (%rax),%eax
  4115c8:	83 e0 40             	and    $0x40,%eax
  4115cb:	84 c0                	test   %al,%al
  4115cd:	0f 84 d5 00 00 00    	je     4116a8 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb40>
  4115d3:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  4115da:	ff
  4115db:	f3 0f 10 0d fd 9e 00 	movss  0x9efd(%rip),%xmm1        # 41b4e0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  4115e2:	00
  4115e3:	0f 54 c8             	andps  %xmm0,%xmm1
  4115e6:	f3 0f 10 05 02 9f 00 	movss  0x9f02(%rip),%xmm0        # 41b4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  4115ed:	00
  4115ee:	0f 2e c1             	ucomiss %xmm1,%xmm0
  4115f1:	0f 92 c0             	setb   %al
  4115f4:	83 f0 01             	xor    $0x1,%eax
  4115f7:	0f b6 c0             	movzbl %al,%eax
  4115fa:	85 c0                	test   %eax,%eax
  4115fc:	0f 84 a6 00 00 00    	je     4116a8 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb40>
		  __fill_char = _CharT('0');
  411602:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  411609:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  411610:	be 00 00 00 00       	mov    $0x0,%esi
  411615:	48 89 c7             	mov    %rax,%rdi
  411618:	e8 c9 46 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41161d:	0f b6 00             	movzbl (%rax),%eax
  411620:	0f be c0             	movsbl %al,%eax
  411623:	89 c7                	mov    %eax,%edi
  411625:	e8 e8 3b ff ff       	call   405212 <_ZNSt8__format11__is_xdigitEc>
  41162a:	83 f0 01             	xor    $0x1,%eax
  41162d:	84 c0                	test   %al,%al
  41162f:	74 7e                	je     4116af <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
		      *__out++ = __str[0];
  411631:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411638:	be 00 00 00 00       	mov    $0x0,%esi
  41163d:	48 89 c7             	mov    %rax,%rdi
  411640:	e8 a1 46 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  411645:	0f b6 00             	movzbl (%rax),%eax
  411648:	0f be c0             	movsbl %al,%eax
  41164b:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  411652:	00 00 00
      operator++(int) { return *this; }
  411655:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  41165c:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  411663:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  41166a:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  411671:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  411677:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  41167e:	48 8b 00             	mov    (%rax),%rax
  411681:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  411688:	89 d6                	mov    %edx,%esi
  41168a:	48 89 c7             	mov    %rax,%rdi
  41168d:	e8 96 62 00 00       	call   417928 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  411692:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411699:	be 01 00 00 00       	mov    $0x1,%esi
  41169e:	48 89 c7             	mov    %rax,%rdi
  4116a1:	e8 d0 48 00 00       	call   415f76 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4116a6:	eb 07                	jmp    4116af <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
		__fill_char = _CharT(' ');
  4116a8:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  4116af:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  4116b6:	48 89 c7             	mov    %rax,%rdi
  4116b9:	e8 f5 82 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4116be:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  4116c2:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  4116c6:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  4116c9:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  4116d0:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4116d7:	48 8b 00             	mov    (%rax),%rax
  4116da:	45 89 c1             	mov    %r8d,%r9d
  4116dd:	49 89 f8             	mov    %rdi,%r8
  4116e0:	48 89 c7             	mov    %rax,%rdi
  4116e3:	e8 4b 4b 00 00       	call   416233 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  4116e8:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  4116eb:	90                   	nop
	}
  4116ec:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4116f3:	48 89 c7             	mov    %rax,%rdi
  4116f6:	e8 37 5e ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4116fb:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411702:	48 89 c7             	mov    %rax,%rdi
  411705:	e8 28 5e ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41170a:	48 89 d8             	mov    %rbx,%rax
  41170d:	eb 45                	jmp    411754 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbec>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41170f:	48 89 c3             	mov    %rax,%rbx
  411712:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  411719:	48 89 c7             	mov    %rax,%rdi
  41171c:	e8 0f 2c ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  411721:	eb 03                	jmp    411726 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbbe>
	}
  411723:	48 89 c3             	mov    %rax,%rbx
  411726:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41172d:	48 89 c7             	mov    %rax,%rdi
  411730:	e8 fd 5d ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411735:	eb 03                	jmp    41173a <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbd2>
  411737:	48 89 c3             	mov    %rax,%rbx
  41173a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411741:	48 89 c7             	mov    %rax,%rdi
  411744:	e8 e9 5d ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411749:	48 89 d8             	mov    %rbx,%rax
  41174c:	48 89 c7             	mov    %rax,%rdi
  41174f:	e8 bc 2c ff ff       	call   404410 <_Unwind_Resume@plt>
  411754:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  411758:	c9                   	leave
  411759:	c3                   	ret

000000000041175a <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  41175a:	55                   	push   %rbp
  41175b:	48 89 e5             	mov    %rsp,%rbp
  41175e:	48 83 ec 20          	sub    $0x20,%rsp
  411762:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  411766:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41176a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  41176e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411772:	48 8b 00             	mov    (%rax),%rax
  411775:	0f b6 00             	movzbl (%rax),%eax
  411778:	84 c0                	test   %al,%al
  41177a:	74 39                	je     4117b5 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x5b>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  41177c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411780:	48 8b 40 18          	mov    0x18(%rax),%rax
  411784:	48 8b 00             	mov    (%rax),%rax
  411787:	89 c1                	mov    %eax,%ecx
  411789:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41178d:	48 8b 40 10          	mov    0x10(%rax),%rax
  411791:	8b 10                	mov    (%rax),%edx
  411793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411797:	48 8b 40 08          	mov    0x8(%rax),%rax
  41179b:	48 8b 38             	mov    (%rax),%rdi
  41179e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4117a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4117a6:	66 48 0f 6e c7       	movq   %rdi,%xmm0
  4117ab:	48 89 c7             	mov    %rax,%rdi
  4117ae:	e8 cd 29 ff ff       	call   404180 <_ZSt8to_charsPcS_dSt12chars_formati@plt>
  4117b3:	eb 61                	jmp    411816 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xbc>
	    else if (__fmt != chars_format{})
  4117b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4117b9:	48 8b 40 10          	mov    0x10(%rax),%rax
  4117bd:	8b 00                	mov    (%rax),%eax
  4117bf:	85 c0                	test   %eax,%eax
  4117c1:	74 2f                	je     4117f2 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x98>
	      return __format::to_chars(__b, __e, __v, __fmt);
  4117c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4117c7:	48 8b 40 10          	mov    0x10(%rax),%rax
  4117cb:	8b 10                	mov    (%rax),%edx
  4117cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4117d1:	48 8b 40 08          	mov    0x8(%rax),%rax
  4117d5:	48 8b 30             	mov    (%rax),%rsi
  4117d8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4117dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4117e0:	66 48 0f 6e c6       	movq   %rsi,%xmm0
  4117e5:	48 89 ce             	mov    %rcx,%rsi
  4117e8:	48 89 c7             	mov    %rax,%rdi
  4117eb:	e8 80 29 ff ff       	call   404170 <_ZSt8to_charsPcS_dSt12chars_format@plt>
  4117f0:	eb 24                	jmp    411816 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xbc>
	      return __format::to_chars(__b, __e, __v);
  4117f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4117f6:	48 8b 40 08          	mov    0x8(%rax),%rax
  4117fa:	48 8b 08             	mov    (%rax),%rcx
  4117fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  411801:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  411805:	66 48 0f 6e c1       	movq   %rcx,%xmm0
  41180a:	48 89 d6             	mov    %rdx,%rsi
  41180d:	48 89 c7             	mov    %rax,%rdi
  411810:	e8 5b 28 ff ff       	call   404070 <_ZSt8to_charsPcS_d@plt>
  411815:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  411816:	c9                   	leave
  411817:	c3                   	ret

0000000000411818 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  411818:	55                   	push   %rbp
  411819:	48 89 e5             	mov    %rsp,%rbp
  41181c:	53                   	push   %rbx
  41181d:	48 83 ec 28          	sub    $0x28,%rsp
  411821:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  411825:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  411829:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  41182d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411831:	48 8b 00             	mov    (%rax),%rax
  411834:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  411838:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  41183c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411840:	48 01 ca             	add    %rcx,%rdx
  411843:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  411847:	48 83 c1 01          	add    $0x1,%rcx
  41184b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  41184f:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  411853:	48 89 ce             	mov    %rcx,%rsi
  411856:	48 89 c7             	mov    %rax,%rdi
  411859:	e8 fc fe ff ff       	call   41175a <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  41185e:	48 89 03             	mov    %rax,(%rbx)
  411861:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  411865:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411869:	48 8b 40 08          	mov    0x8(%rax),%rax
  41186d:	8b 40 08             	mov    0x8(%rax),%eax
  411870:	85 c0                	test   %eax,%eax
  411872:	75 11                	jne    411885 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  411874:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411878:	48 8b 40 08          	mov    0x8(%rax),%rax
  41187c:	48 8b 00             	mov    (%rax),%rax
  41187f:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  411883:	eb 05                	jmp    41188a <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  411885:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  41188a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41188e:	c9                   	leave
  41188f:	c3                   	ret

0000000000411890 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  411890:	55                   	push   %rbp
  411891:	48 89 e5             	mov    %rsp,%rbp
  411894:	53                   	push   %rbx
  411895:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  41189c:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  4118a3:	f2 0f 11 85 90 fd ff 	movsd  %xmm0,-0x270(%rbp)
  4118aa:	ff
  4118ab:	48 89 b5 88 fd ff ff 	mov    %rsi,-0x278(%rbp)
	  std::string __dynbuf;
  4118b2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4118b9:	48 89 c7             	mov    %rax,%rdi
  4118bc:	e8 23 32 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  4118c1:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  4118c8:	00 00 00 00
  4118cc:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  4118d3:	00 00 00 00
	  size_t __prec = 6;
  4118d7:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  4118de:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  4118e2:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4118e9:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4118ed:	83 e0 06             	and    $0x6,%eax
  4118f0:	84 c0                	test   %al,%al
  4118f2:	0f 95 c0             	setne  %al
  4118f5:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  4118fb:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  411902:	84 c0                	test   %al,%al
  411904:	74 20                	je     411926 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x96>
	    __prec = _M_spec._M_get_precision(__fc);
  411906:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41190d:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  411914:	48 89 d6             	mov    %rdx,%rsi
  411917:	48 89 c7             	mov    %rax,%rdi
  41191a:	e8 81 41 00 00       	call   415aa0 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41191f:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  411926:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  41192d:	48 83 c0 01          	add    $0x1,%rax
  411931:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  411935:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  41193c:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  411940:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  411944:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  41194b:	00 00 00
	  bool __upper = false;
  41194e:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  411952:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  411956:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  41195a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411961:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  411965:	c0 e8 03             	shr    $0x3,%al
  411968:	83 e0 0f             	and    $0xf,%eax
  41196b:	0f b6 c0             	movzbl %al,%eax
  41196e:	89 c0                	mov    %eax,%eax
  411970:	48 8b 04 c5 50 e4 41 	mov    0x41e450(,%rax,8),%rax
  411977:	00
  411978:	ff e0                	jmp    *%rax
	      __upper = true;
  41197a:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  41197e:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  411982:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411989:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41198d:	83 e0 78             	and    $0x78,%eax
  411990:	3c 10                	cmp    $0x10,%al
  411992:	74 04                	je     411998 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
		__expc = 'p';
  411994:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  411998:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  41199f:	00 00 00
	      break;
  4119a2:	eb 67                	jmp    411a0b <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  4119a4:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  4119a8:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  4119ac:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  4119b3:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  4119ba:	00 00 00
	      break;
  4119bd:	eb 4c                	jmp    411a0b <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  4119bf:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  4119c3:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  4119ca:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  4119d1:	00 00 00
	      break;
  4119d4:	eb 35                	jmp    411a0b <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  4119d6:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  4119da:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  4119de:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  4119e2:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  4119e9:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  4119f0:	00 00 00
	      break;
  4119f3:	eb 16                	jmp    411a0b <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      if (__use_prec)
  4119f5:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  4119fc:	84 c0                	test   %al,%al
  4119fe:	74 0a                	je     411a0a <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
		__fmt = chars_format::general;
  411a00:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  411a07:	00 00 00
	      break;
  411a0a:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  411a0b:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  411a12:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  411a19:	48 8d 85 90 fd ff ff 	lea    -0x270(%rbp),%rax
  411a20:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  411a27:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  411a2e:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  411a35:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  411a3c:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  411a43:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411a47:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411a4b:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  411a52:	48 89 ce             	mov    %rcx,%rsi
  411a55:	48 89 c7             	mov    %rax,%rdi
  411a58:	e8 fd fc ff ff       	call   41175a <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  411a5d:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  411a64:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  411a6b:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  411a71:	83 f8 4b             	cmp    $0x4b,%eax
  411a74:	0f 94 c0             	sete   %al
  411a77:	0f b6 c0             	movzbl %al,%eax
  411a7a:	48 85 c0             	test   %rax,%rax
  411a7d:	0f 84 65 01 00 00    	je     411be8 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x358>
	      size_t __guess = 8 + __prec;
  411a83:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411a8a:	48 83 c0 08          	add    $0x8,%rax
  411a8e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  411a92:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  411a98:	83 f8 02             	cmp    $0x2,%eax
  411a9b:	75 5a                	jne    411af7 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x267>
		      int __exp{};
  411a9d:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  411aa4:	00 00 00
			__builtin_frexp(__v, &__exp);
  411aa7:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  411aae:	48 8d 95 d4 fd ff ff 	lea    -0x22c(%rbp),%rdx
  411ab5:	48 89 d7             	mov    %rdx,%rdi
  411ab8:	66 48 0f 6e c0       	movq   %rax,%xmm0
  411abd:	e8 6e 29 ff ff       	call   404430 <frexp@plt>
		      if (__exp > 0)
  411ac2:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  411ac8:	85 c0                	test   %eax,%eax
  411aca:	7e 2b                	jle    411af7 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x267>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  411acc:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  411ad2:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  411ad8:	89 d0                	mov    %edx,%eax
  411ada:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  411ae1:	48 c1 e8 20          	shr    $0x20,%rax
  411ae5:	29 c2                	sub    %eax,%edx
  411ae7:	d1 ea                	shr    %edx
  411ae9:	01 d0                	add    %edx,%eax
  411aeb:	c1 e8 0d             	shr    $0xd,%eax
  411aee:	83 c0 01             	add    $0x1,%eax
  411af1:	89 c0                	mov    %eax,%eax
  411af3:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  411af7:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  411afe:	00
  411aff:	77 08                	ja     411b09 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x279>
		__guess = sizeof(__buf) * 2;
  411b01:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  411b08:	00
	      __dynbuf.reserve(__guess);
  411b09:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  411b0d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411b14:	48 89 d6             	mov    %rdx,%rsi
  411b17:	48 89 c7             	mov    %rax,%rdi
  411b1a:	e8 87 97 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  411b1f:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  411b26:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  411b2d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  411b34:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  411b3b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411b42:	48 89 c7             	mov    %rax,%rdi
  411b45:	e8 2e 97 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  411b4a:	48 01 c0             	add    %rax,%rax
  411b4d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  411b54:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  411b5b:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  411b62:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  411b69:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  411b70:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  411b77:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  411b7e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411b85:	48 89 ce             	mov    %rcx,%rsi
  411b88:	48 89 c7             	mov    %rax,%rdi
  411b8b:	e8 f2 5f 00 00       	call   417b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  411b90:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  411b91:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411b98:	48 89 c7             	mov    %rax,%rdi
  411b9b:	e8 0a 8c ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  411ba0:	48 83 c0 01          	add    $0x1,%rax
  411ba4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  411ba8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411baf:	48 89 c7             	mov    %rax,%rdi
  411bb2:	e8 f3 8b ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  411bb7:	48 89 c3             	mov    %rax,%rbx
  411bba:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411bc1:	48 89 c7             	mov    %rax,%rdi
  411bc4:	e8 85 31 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  411bc9:	48 01 d8             	add    %rbx,%rax
  411bcc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  411bd0:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  411bd6:	83 f8 4b             	cmp    $0x4b,%eax
  411bd9:	0f 94 c0             	sete   %al
  411bdc:	0f b6 c0             	movzbl %al,%eax
  411bdf:	48 85 c0             	test   %rax,%rax
  411be2:	0f 85 37 ff ff ff    	jne    411b1f <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x28f>
	  if (__upper)
  411be8:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  411bec:	74 35                	je     411c23 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x393>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411bee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411bf2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  411bf6:	eb 1e                	jmp    411c16 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x386>
		*__p = std::toupper(*__p);
  411bf8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411bfc:	0f b6 00             	movzbl (%rax),%eax
  411bff:	0f be c0             	movsbl %al,%eax
  411c02:	89 c7                	mov    %eax,%edi
  411c04:	e8 17 28 ff ff       	call   404420 <toupper@plt>
  411c09:	89 c2                	mov    %eax,%edx
  411c0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411c0f:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411c11:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  411c16:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411c1d:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  411c21:	75 d5                	jne    411bf8 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x368>
	  bool __have_sign = true;
  411c23:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  411c27:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  411c2e:	ff
  411c2f:	66 0f 50 c0          	movmskpd %xmm0,%eax
  411c33:	83 e0 01             	and    $0x1,%eax
  411c36:	85 c0                	test   %eax,%eax
  411c38:	75 42                	jne    411c7c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
	      if (_M_spec._M_sign == _Sign_plus)
  411c3a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411c41:	0f b6 00             	movzbl (%rax),%eax
  411c44:	83 e0 0c             	and    $0xc,%eax
  411c47:	3c 04                	cmp    $0x4,%al
  411c49:	75 0e                	jne    411c59 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c9>
		*--__start = '+';
  411c4b:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  411c50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411c54:	c6 00 2b             	movb   $0x2b,(%rax)
  411c57:	eb 23                	jmp    411c7c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
	      else if (_M_spec._M_sign == _Sign_space)
  411c59:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411c60:	0f b6 00             	movzbl (%rax),%eax
  411c63:	83 e0 0c             	and    $0xc,%eax
  411c66:	3c 0c                	cmp    $0xc,%al
  411c68:	75 0e                	jne    411c78 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e8>
		*--__start = ' ';
  411c6a:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  411c6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411c73:	c6 00 20             	movb   $0x20,(%rax)
  411c76:	eb 04                	jmp    411c7c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
		__have_sign = false;
  411c78:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  411c7c:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411c83:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  411c87:	48 89 c2             	mov    %rax,%rdx
  411c8a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411c8e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  411c95:	48 89 ce             	mov    %rcx,%rsi
  411c98:	48 89 c7             	mov    %rax,%rdi
  411c9b:	e8 0a 58 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  411ca0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411ca7:	0f b6 00             	movzbl (%rax),%eax
  411caa:	83 e0 10             	and    $0x10,%eax
  411cad:	84 c0                	test   %al,%al
  411caf:	0f 84 2b 04 00 00    	je     4120e0 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
  411cb5:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  411cbc:	ff
  411cbd:	f3 0f 7e 0d 3b 98 00 	movq   0x983b(%rip),%xmm1        # 41b500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  411cc4:	00
  411cc5:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  411cc9:	f2 0f 10 05 3f 98 00 	movsd  0x983f(%rip),%xmm0        # 41b510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  411cd0:	00
  411cd1:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  411cd5:	0f 92 c0             	setb   %al
  411cd8:	83 f0 01             	xor    $0x1,%eax
  411cdb:	0f b6 c0             	movzbl %al,%eax
  411cde:	85 c0                	test   %eax,%eax
  411ce0:	0f 84 fa 03 00 00    	je     4120e0 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
	      string_view __s = __narrow_str;
  411ce6:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  411ced:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  411cf4:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  411cfb:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  411d02:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  411d09:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  411d0a:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411d11:	ba 00 00 00 00       	mov    $0x0,%edx
  411d16:	be 2e 00 00 00       	mov    $0x2e,%esi
  411d1b:	48 89 c7             	mov    %rax,%rdi
  411d1e:	e8 01 45 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411d23:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  411d27:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  411d2c:	0f 84 a5 00 00 00    	je     411dd7 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x547>
		  __p = __s.find(__expc, __d + 1);
  411d32:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411d36:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411d3a:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411d3e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411d45:	89 ce                	mov    %ecx,%esi
  411d47:	48 89 c7             	mov    %rax,%rdi
  411d4a:	e8 d5 44 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411d4f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411d53:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411d58:	75 13                	jne    411d6d <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4dd>
		    __p = __s.size();
  411d5a:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411d61:	48 89 c7             	mov    %rax,%rdi
  411d64:	e8 6b 3f ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411d69:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  411d6d:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411d71:	0f 84 af 00 00 00    	je     411e26 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
		      if (__s[__have_sign] != '0')
  411d77:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  411d7b:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411d82:	48 89 d6             	mov    %rdx,%rsi
  411d85:	48 89 c7             	mov    %rax,%rdi
  411d88:	e8 59 3f ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  411d8d:	0f b6 00             	movzbl (%rax),%eax
  411d90:	3c 30                	cmp    $0x30,%al
  411d92:	0f 95 c0             	setne  %al
  411d95:	84 c0                	test   %al,%al
  411d97:	74 15                	je     411dae <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x51e>
			__sigfigs = __p - __have_sign - 1;
  411d99:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  411d9d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411da1:	48 29 c2             	sub    %rax,%rdx
  411da4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  411da8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  411dac:	eb 78                	jmp    411e26 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  411dae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411db2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411db6:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411dbd:	be 30 00 00 00       	mov    $0x30,%esi
  411dc2:	48 89 c7             	mov    %rax,%rdi
  411dc5:	e8 2a 2f 00 00       	call   414cf4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  411dca:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411dce:	48 29 c2             	sub    %rax,%rdx
  411dd1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  411dd5:	eb 4f                	jmp    411e26 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
		  __p = __s.find(__expc); // Find the exponent, if present.
  411dd7:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411ddb:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411de2:	ba 00 00 00 00       	mov    $0x0,%edx
  411de7:	89 ce                	mov    %ecx,%esi
  411de9:	48 89 c7             	mov    %rax,%rdi
  411dec:	e8 33 44 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411df1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411df5:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411dfa:	75 13                	jne    411e0f <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57f>
		    __p = __s.size();
  411dfc:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411e03:	48 89 c7             	mov    %rax,%rdi
  411e06:	e8 c9 3e ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411e0b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  411e0f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411e13:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  411e17:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  411e1b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  411e1f:	48 29 c2             	sub    %rax,%rdx
  411e22:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  411e26:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411e2a:	74 1b                	je     411e47 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5b7>
  411e2c:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411e33:	48 85 c0             	test   %rax,%rax
  411e36:	74 0f                	je     411e47 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5b7>
		  __z = __prec - __sigfigs;
  411e38:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411e3f:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  411e43:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  411e47:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411e4b:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411e4f:	0f 94 c0             	sete   %al
  411e52:	0f b6 d0             	movzbl %al,%edx
  411e55:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411e59:	48 01 d0             	add    %rdx,%rax
  411e5c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  411e60:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  411e65:	0f 84 75 02 00 00    	je     4120e0 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  411e6b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411e72:	48 89 c7             	mov    %rax,%rdi
  411e75:	e8 54 d1 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411e7a:	84 c0                	test   %al,%al
  411e7c:	74 1e                	je     411e9c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x60c>
  411e7e:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411e85:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411e89:	48 29 c2             	sub    %rax,%rdx
  411e8c:	48 89 d0             	mov    %rdx,%rax
  411e8f:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  411e93:	72 07                	jb     411e9c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x60c>
  411e95:	b8 01 00 00 00       	mov    $0x1,%eax
  411e9a:	eb 05                	jmp    411ea1 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x611>
  411e9c:	b8 00 00 00 00       	mov    $0x0,%eax
  411ea1:	84 c0                	test   %al,%al
  411ea3:	0f 84 d7 00 00 00    	je     411f80 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6f0>
					__s.size() - __p);
  411ea9:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411eb0:	48 89 c7             	mov    %rax,%rdi
  411eb3:	e8 1c 3e ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  411eb8:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  411ebc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411ec0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411ec4:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  411ec8:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  411ecc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411ed0:	48 01 d1             	add    %rdx,%rcx
  411ed3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  411ed7:	48 01 d1             	add    %rdx,%rcx
  411eda:	48 89 c2             	mov    %rax,%rdx
  411edd:	48 89 cf             	mov    %rcx,%rdi
  411ee0:	e8 db 24 ff ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  411ee5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411ee9:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411eed:	75 16                	jne    411f05 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x675>
			__start[__p++] = '.';
  411eef:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411ef3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411ef7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411efb:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  411eff:	48 01 c8             	add    %rcx,%rax
  411f02:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  411f05:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  411f09:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411f0d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  411f11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411f15:	48 89 c2             	mov    %rax,%rdx
  411f18:	be 30 00 00 00       	mov    $0x30,%esi
  411f1d:	48 89 cf             	mov    %rcx,%rdi
  411f20:	e8 1b 22 ff ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  411f25:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411f2c:	48 89 c7             	mov    %rax,%rdi
  411f2f:	e8 64 55 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  411f34:	48 89 c3             	mov    %rax,%rbx
  411f37:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411f3e:	48 89 c7             	mov    %rax,%rdi
  411f41:	e8 8e 3d ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411f46:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411f4a:	48 01 c2             	add    %rax,%rdx
  411f4d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  411f54:	48 89 de             	mov    %rbx,%rsi
  411f57:	48 89 c7             	mov    %rax,%rdi
  411f5a:	e8 4b 55 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  411f5f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  411f66:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  411f6d:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  411f74:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  411f7b:	e9 60 01 00 00       	jmp    4120e0 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
		      __dynbuf.reserve(__s.size() + __extras);
  411f80:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411f87:	48 89 c7             	mov    %rax,%rdi
  411f8a:	e8 45 3d ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411f8f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411f93:	48 01 c2             	add    %rax,%rdx
  411f96:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411f9d:	48 89 d6             	mov    %rdx,%rsi
  411fa0:	48 89 c7             	mov    %rax,%rdi
  411fa3:	e8 fe 92 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  411fa8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411faf:	48 89 c7             	mov    %rax,%rdi
  411fb2:	e8 17 d0 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411fb7:	84 c0                	test   %al,%al
  411fb9:	0f 84 c5 00 00 00    	je     412084 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7f4>
			  __dynbuf = __s.substr(0, __p);
  411fbf:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411fc3:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411fca:	be 00 00 00 00       	mov    $0x0,%esi
  411fcf:	48 89 c7             	mov    %rax,%rdi
  411fd2:	e8 23 9a ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  411fd7:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  411fde:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  411fe5:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  411fec:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411ff3:	48 89 d6             	mov    %rdx,%rsi
  411ff6:	48 89 c7             	mov    %rax,%rdi
  411ff9:	e8 54 2d 00 00       	call   414d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  411ffe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412002:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412006:	75 14                	jne    41201c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x78c>
			    __dynbuf += '.';
  412008:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41200f:	be 2e 00 00 00       	mov    $0x2e,%esi
  412014:	48 89 c7             	mov    %rax,%rdi
  412017:	e8 5c 2d 00 00       	call   414d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  41201c:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  412021:	74 1b                	je     41203e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7ae>
			    __dynbuf.append(__z, '0');
  412023:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  412027:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41202e:	ba 30 00 00 00       	mov    $0x30,%edx
  412033:	48 89 ce             	mov    %rcx,%rsi
  412036:	48 89 c7             	mov    %rax,%rdi
  412039:	e8 64 2d 00 00       	call   414da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  41203e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  412042:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412049:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  412050:	48 89 ce             	mov    %rcx,%rsi
  412053:	48 89 c7             	mov    %rax,%rdi
  412056:	e8 9f 99 ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  41205b:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  412062:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  412069:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  412070:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412077:	48 89 d6             	mov    %rdx,%rsi
  41207a:	48 89 c7             	mov    %rax,%rdi
  41207d:	e8 6a 2d 00 00       	call   414dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  412082:	eb 3f                	jmp    4120c3 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x833>
			  __dynbuf.insert(__p, __extras, '0');
  412084:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412088:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  41208c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412093:	b9 30 00 00 00       	mov    $0x30,%ecx
  412098:	48 89 c7             	mov    %rax,%rdi
  41209b:	e8 a6 2d 00 00       	call   414e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  4120a0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4120a4:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4120a8:	75 19                	jne    4120c3 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x833>
			    __dynbuf[__p] = '.';
  4120aa:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4120ae:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4120b5:	48 89 d6             	mov    %rdx,%rsi
  4120b8:	48 89 c7             	mov    %rax,%rdi
  4120bb:	e8 e0 2d 00 00       	call   414ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  4120c0:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  4120c3:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4120ca:	48 89 c7             	mov    %rax,%rdi
  4120cd:	e8 0e 5f ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4120d2:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4120d9:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  4120e0:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4120e7:	48 89 c7             	mov    %rax,%rdi
  4120ea:	e8 f5 29 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  4120ef:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  4120f6:	00 00 00 00
  4120fa:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  412101:	00 00 00 00
	    __str = __narrow_str;
  412105:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  41210c:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  412113:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  41211a:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  412121:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412128:	0f b6 00             	movzbl (%rax),%eax
  41212b:	83 e0 20             	and    $0x20,%eax
  41212e:	84 c0                	test   %al,%al
  412130:	0f 84 ec 00 00 00    	je     412222 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
  412136:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  41213d:	ff
  41213e:	f3 0f 7e 0d ba 93 00 	movq   0x93ba(%rip),%xmm1        # 41b500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  412145:	00
  412146:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  41214a:	f2 0f 10 05 be 93 00 	movsd  0x93be(%rip),%xmm0        # 41b510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  412151:	00
  412152:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  412156:	0f 92 c0             	setb   %al
  412159:	83 f0 01             	xor    $0x1,%eax
  41215c:	0f b6 c0             	movzbl %al,%eax
  41215f:	85 c0                	test   %eax,%eax
  412161:	0f 84 bb 00 00 00    	je     412222 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  412167:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41216e:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  412175:	48 89 d6             	mov    %rdx,%rsi
  412178:	48 89 c7             	mov    %rax,%rdi
  41217b:	e8 0c 30 00 00       	call   41518c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  412180:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  412184:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  41218b:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  412192:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  412199:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4121a0:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  4121a7:	4d 89 c1             	mov    %r8,%r9
  4121aa:	41 89 c8             	mov    %ecx,%r8d
  4121ad:	48 89 d1             	mov    %rdx,%rcx
  4121b0:	48 89 c2             	mov    %rax,%rdx
  4121b3:	e8 a2 3a 00 00       	call   415c5a <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  4121b8:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4121bf:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4121c6:	48 89 d6             	mov    %rdx,%rsi
  4121c9:	48 89 c7             	mov    %rax,%rdi
  4121cc:	e8 01 30 00 00       	call   4151d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  4121d1:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4121d8:	48 89 c7             	mov    %rax,%rdi
  4121db:	e8 52 53 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4121e0:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4121e7:	48 89 c7             	mov    %rax,%rdi
  4121ea:	e8 41 21 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  4121ef:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4121f6:	48 89 c7             	mov    %rax,%rdi
  4121f9:	e8 d0 cd ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4121fe:	83 f0 01             	xor    $0x1,%eax
  412201:	84 c0                	test   %al,%al
  412203:	74 1d                	je     412222 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
		__str = __wstr;
  412205:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41220c:	48 89 c7             	mov    %rax,%rdi
  41220f:	e8 cc 5d ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  412214:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  41221b:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  412222:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412229:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  412230:	48 89 d6             	mov    %rdx,%rsi
  412233:	48 89 c7             	mov    %rax,%rdi
  412236:	e8 bb 3c 00 00       	call   415ef6 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41223b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  41223f:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  412246:	48 89 c7             	mov    %rax,%rdi
  412249:	e8 86 3a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41224e:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  412252:	0f 93 c0             	setae  %al
  412255:	84 c0                	test   %al,%al
  412257:	74 36                	je     41228f <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ff>
	    return __format::__write(__fc.out(), __str);
  412259:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  412260:	48 89 c7             	mov    %rax,%rdi
  412263:	e8 60 96 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  412268:	48 89 c1             	mov    %rax,%rcx
  41226b:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  412272:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  412279:	48 89 d6             	mov    %rdx,%rsi
  41227c:	48 89 c2             	mov    %rax,%rdx
  41227f:	48 89 cf             	mov    %rcx,%rdi
  412282:	e8 9b c4 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  412287:	48 89 c3             	mov    %rax,%rbx
  41228a:	e9 91 01 00 00       	jmp    412420 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb90>
	  char32_t __fill_char = _M_spec._M_fill;
  41228f:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412296:	8b 40 08             	mov    0x8(%rax),%eax
  412299:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  41229c:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4122a3:	0f b6 00             	movzbl (%rax),%eax
  4122a6:	83 e0 03             	and    $0x3,%eax
  4122a9:	0f b6 c0             	movzbl %al,%eax
  4122ac:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  4122af:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4122b6:	48 89 c7             	mov    %rax,%rdi
  4122b9:	e8 16 3a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4122be:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4122c2:	48 29 c2             	sub    %rax,%rdx
  4122c5:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  4122c9:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  4122d0:	48 89 c7             	mov    %rax,%rdi
  4122d3:	e8 f0 95 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4122d8:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  4122df:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  4122e3:	0f 85 fa 00 00 00    	jne    4123e3 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
	      __align = _Align_right;
  4122e9:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  4122f0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4122f7:	0f b6 00             	movzbl (%rax),%eax
  4122fa:	83 e0 40             	and    $0x40,%eax
  4122fd:	84 c0                	test   %al,%al
  4122ff:	0f 84 d7 00 00 00    	je     4123dc <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb4c>
  412305:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  41230c:	ff
  41230d:	f3 0f 7e 0d eb 91 00 	movq   0x91eb(%rip),%xmm1        # 41b500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  412314:	00
  412315:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  412319:	f2 0f 10 05 ef 91 00 	movsd  0x91ef(%rip),%xmm0        # 41b510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  412320:	00
  412321:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  412325:	0f 92 c0             	setb   %al
  412328:	83 f0 01             	xor    $0x1,%eax
  41232b:	0f b6 c0             	movzbl %al,%eax
  41232e:	85 c0                	test   %eax,%eax
  412330:	0f 84 a6 00 00 00    	je     4123dc <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb4c>
		  __fill_char = _CharT('0');
  412336:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  41233d:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  412344:	be 00 00 00 00       	mov    $0x0,%esi
  412349:	48 89 c7             	mov    %rax,%rdi
  41234c:	e8 95 39 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  412351:	0f b6 00             	movzbl (%rax),%eax
  412354:	0f be c0             	movsbl %al,%eax
  412357:	89 c7                	mov    %eax,%edi
  412359:	e8 b4 2e ff ff       	call   405212 <_ZNSt8__format11__is_xdigitEc>
  41235e:	83 f0 01             	xor    $0x1,%eax
  412361:	84 c0                	test   %al,%al
  412363:	74 7e                	je     4123e3 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
		      *__out++ = __str[0];
  412365:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41236c:	be 00 00 00 00       	mov    $0x0,%esi
  412371:	48 89 c7             	mov    %rax,%rdi
  412374:	e8 6d 39 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  412379:	0f b6 00             	movzbl (%rax),%eax
  41237c:	0f be c0             	movsbl %al,%eax
  41237f:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  412386:	00 00 00
      operator++(int) { return *this; }
  412389:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  412390:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  412397:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  41239e:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4123a5:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4123ab:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4123b2:	48 8b 00             	mov    (%rax),%rax
  4123b5:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4123bc:	89 d6                	mov    %edx,%esi
  4123be:	48 89 c7             	mov    %rax,%rdi
  4123c1:	e8 62 55 00 00       	call   417928 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  4123c6:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4123cd:	be 01 00 00 00       	mov    $0x1,%esi
  4123d2:	48 89 c7             	mov    %rax,%rdi
  4123d5:	e8 9c 3b 00 00       	call   415f76 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4123da:	eb 07                	jmp    4123e3 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
		__fill_char = _CharT(' ');
  4123dc:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  4123e3:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  4123ea:	48 89 c7             	mov    %rax,%rdi
  4123ed:	e8 c1 75 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4123f2:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  4123f6:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  4123fa:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  4123fd:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  412404:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  41240b:	48 8b 00             	mov    (%rax),%rax
  41240e:	45 89 c1             	mov    %r8d,%r9d
  412411:	49 89 f8             	mov    %rdi,%r8
  412414:	48 89 c7             	mov    %rax,%rdi
  412417:	e8 17 3e 00 00       	call   416233 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  41241c:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  41241f:	90                   	nop
	}
  412420:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412427:	48 89 c7             	mov    %rax,%rdi
  41242a:	e8 03 51 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41242f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412436:	48 89 c7             	mov    %rax,%rdi
  412439:	e8 f4 50 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41243e:	48 89 d8             	mov    %rbx,%rax
  412441:	eb 45                	jmp    412488 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbf8>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  412443:	48 89 c3             	mov    %rax,%rbx
  412446:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41244d:	48 89 c7             	mov    %rax,%rdi
  412450:	e8 db 1e ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  412455:	eb 03                	jmp    41245a <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbca>
	}
  412457:	48 89 c3             	mov    %rax,%rbx
  41245a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412461:	48 89 c7             	mov    %rax,%rdi
  412464:	e8 c9 50 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  412469:	eb 03                	jmp    41246e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbde>
  41246b:	48 89 c3             	mov    %rax,%rbx
  41246e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412475:	48 89 c7             	mov    %rax,%rdi
  412478:	e8 b5 50 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41247d:	48 89 d8             	mov    %rbx,%rax
  412480:	48 89 c7             	mov    %rax,%rdi
  412483:	e8 88 1f ff ff       	call   404410 <_Unwind_Resume@plt>
  412488:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41248c:	c9                   	leave
  41248d:	c3                   	ret

000000000041248e <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  41248e:	55                   	push   %rbp
  41248f:	48 89 e5             	mov    %rsp,%rbp
  412492:	48 83 ec 20          	sub    $0x20,%rsp
  412496:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41249a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41249e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  4124a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4124a6:	48 8b 00             	mov    (%rax),%rax
  4124a9:	0f b6 00             	movzbl (%rax),%eax
  4124ac:	84 c0                	test   %al,%al
  4124ae:	74 3f                	je     4124ef <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x61>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  4124b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4124b4:	48 8b 40 18          	mov    0x18(%rax),%rax
  4124b8:	48 8b 00             	mov    (%rax),%rax
  4124bb:	89 c1                	mov    %eax,%ecx
  4124bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4124c1:	48 8b 40 10          	mov    0x10(%rax),%rax
  4124c5:	8b 10                	mov    (%rax),%edx
  4124c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4124cb:	48 8b 40 08          	mov    0x8(%rax),%rax
  4124cf:	db 28                	fldt   (%rax)
  4124d1:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4124d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4124d9:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  4124de:	db 3c 24             	fstpt  (%rsp)
  4124e1:	48 89 c7             	mov    %rax,%rdi
  4124e4:	e8 b7 1d ff ff       	call   4042a0 <_ZSt8to_charsPcS_eSt12chars_formati@plt>
  4124e9:	48 83 c4 10          	add    $0x10,%rsp
  4124ed:	eb 6d                	jmp    41255c <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xce>
	    else if (__fmt != chars_format{})
  4124ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4124f3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4124f7:	8b 00                	mov    (%rax),%eax
  4124f9:	85 c0                	test   %eax,%eax
  4124fb:	74 35                	je     412532 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xa4>
	      return __format::to_chars(__b, __e, __v, __fmt);
  4124fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412501:	48 8b 40 10          	mov    0x10(%rax),%rax
  412505:	8b 10                	mov    (%rax),%edx
  412507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41250b:	48 8b 40 08          	mov    0x8(%rax),%rax
  41250f:	db 28                	fldt   (%rax)
  412511:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412515:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412519:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  41251e:	db 3c 24             	fstpt  (%rsp)
  412521:	48 89 ce             	mov    %rcx,%rsi
  412524:	48 89 c7             	mov    %rax,%rdi
  412527:	e8 24 1b ff ff       	call   404050 <_ZSt8to_charsPcS_eSt12chars_format@plt>
  41252c:	48 83 c4 10          	add    $0x10,%rsp
  412530:	eb 2a                	jmp    41255c <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xce>
	      return __format::to_chars(__b, __e, __v);
  412532:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412536:	48 8b 40 08          	mov    0x8(%rax),%rax
  41253a:	db 28                	fldt   (%rax)
  41253c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412544:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  412549:	db 3c 24             	fstpt  (%rsp)
  41254c:	48 89 d6             	mov    %rdx,%rsi
  41254f:	48 89 c7             	mov    %rax,%rdi
  412552:	e8 09 1c ff ff       	call   404160 <_ZSt8to_charsPcS_e@plt>
  412557:	48 83 c4 10          	add    $0x10,%rsp
  41255b:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  41255c:	c9                   	leave
  41255d:	c3                   	ret

000000000041255e <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  41255e:	55                   	push   %rbp
  41255f:	48 89 e5             	mov    %rsp,%rbp
  412562:	53                   	push   %rbx
  412563:	48 83 ec 28          	sub    $0x28,%rsp
  412567:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  41256b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  41256f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  412573:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412577:	48 8b 00             	mov    (%rax),%rax
  41257a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41257e:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  412582:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  412586:	48 01 ca             	add    %rcx,%rdx
  412589:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  41258d:	48 83 c1 01          	add    $0x1,%rcx
  412591:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  412595:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  412599:	48 89 ce             	mov    %rcx,%rsi
  41259c:	48 89 c7             	mov    %rax,%rdi
  41259f:	e8 ea fe ff ff       	call   41248e <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  4125a4:	48 89 03             	mov    %rax,(%rbx)
  4125a7:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  4125ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4125af:	48 8b 40 08          	mov    0x8(%rax),%rax
  4125b3:	8b 40 08             	mov    0x8(%rax),%eax
  4125b6:	85 c0                	test   %eax,%eax
  4125b8:	75 11                	jne    4125cb <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  4125ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4125be:	48 8b 40 08          	mov    0x8(%rax),%rax
  4125c2:	48 8b 00             	mov    (%rax),%rax
  4125c5:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  4125c9:	eb 05                	jmp    4125d0 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  4125cb:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  4125d0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4125d4:	c9                   	leave
  4125d5:	c3                   	ret

00000000004125d6 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  4125d6:	55                   	push   %rbp
  4125d7:	48 89 e5             	mov    %rsp,%rbp
  4125da:	53                   	push   %rbx
  4125db:	48 81 ec 68 02 00 00 	sub    $0x268,%rsp
  4125e2:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  4125e9:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
	  std::string __dynbuf;
  4125f0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4125f7:	48 89 c7             	mov    %rax,%rdi
  4125fa:	e8 e5 24 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  4125ff:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  412606:	00 00 00 00
  41260a:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  412611:	00 00 00 00
	  size_t __prec = 6;
  412615:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  41261c:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  412620:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412627:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41262b:	83 e0 06             	and    $0x6,%eax
  41262e:	84 c0                	test   %al,%al
  412630:	0f 95 c0             	setne  %al
  412633:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  412639:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  412640:	84 c0                	test   %al,%al
  412642:	74 20                	je     412664 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e>
	    __prec = _M_spec._M_get_precision(__fc);
  412644:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41264b:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  412652:	48 89 d6             	mov    %rdx,%rsi
  412655:	48 89 c7             	mov    %rax,%rdi
  412658:	e8 43 34 00 00       	call   415aa0 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41265d:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  412664:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  41266b:	48 83 c0 01          	add    $0x1,%rax
  41266f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  412673:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  41267a:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  41267e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  412682:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  412689:	00 00 00
	  bool __upper = false;
  41268c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  412690:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  412694:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  412698:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41269f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4126a3:	c0 e8 03             	shr    $0x3,%al
  4126a6:	83 e0 0f             	and    $0xf,%eax
  4126a9:	0f b6 c0             	movzbl %al,%eax
  4126ac:	89 c0                	mov    %eax,%eax
  4126ae:	48 8b 04 c5 98 e4 41 	mov    0x41e498(,%rax,8),%rax
  4126b5:	00
  4126b6:	ff e0                	jmp    *%rax
	      __upper = true;
  4126b8:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  4126bc:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  4126c0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4126c7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4126cb:	83 e0 78             	and    $0x78,%eax
  4126ce:	3c 10                	cmp    $0x10,%al
  4126d0:	74 04                	je     4126d6 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x100>
		__expc = 'p';
  4126d2:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  4126d6:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  4126dd:	00 00 00
	      break;
  4126e0:	eb 67                	jmp    412749 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  4126e2:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  4126e6:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  4126ea:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  4126f1:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  4126f8:	00 00 00
	      break;
  4126fb:	eb 4c                	jmp    412749 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  4126fd:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  412701:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  412708:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  41270f:	00 00 00
	      break;
  412712:	eb 35                	jmp    412749 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  412714:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  412718:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  41271c:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  412720:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  412727:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  41272e:	00 00 00
	      break;
  412731:	eb 16                	jmp    412749 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      if (__use_prec)
  412733:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  41273a:	84 c0                	test   %al,%al
  41273c:	74 0a                	je     412748 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x172>
		__fmt = chars_format::general;
  41273e:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  412745:	00 00 00
	      break;
  412748:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  412749:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  412750:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  412757:	48 8d 45 10          	lea    0x10(%rbp),%rax
  41275b:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  412762:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  412769:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  412770:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  412777:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  41277e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  412782:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412786:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  41278d:	48 89 ce             	mov    %rcx,%rsi
  412790:	48 89 c7             	mov    %rax,%rdi
  412793:	e8 f6 fc ff ff       	call   41248e <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  412798:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  41279f:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  4127a6:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  4127ac:	83 f8 4b             	cmp    $0x4b,%eax
  4127af:	0f 94 c0             	sete   %al
  4127b2:	0f b6 c0             	movzbl %al,%eax
  4127b5:	48 85 c0             	test   %rax,%rax
  4127b8:	0f 84 6a 01 00 00    	je     412928 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x352>
	      size_t __guess = 8 + __prec;
  4127be:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  4127c5:	48 83 c0 08          	add    $0x8,%rax
  4127c9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  4127cd:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  4127d3:	83 f8 02             	cmp    $0x2,%eax
  4127d6:	75 5f                	jne    412837 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x261>
		      int __exp{};
  4127d8:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  4127df:	00 00 00
			__builtin_frexpl(__v, &__exp);
  4127e2:	db 6d 10             	fldt   0x10(%rbp)
  4127e5:	48 8d 85 d4 fd ff ff 	lea    -0x22c(%rbp),%rax
  4127ec:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  4127f1:	db 3c 24             	fstpt  (%rsp)
  4127f4:	48 89 c7             	mov    %rax,%rdi
  4127f7:	e8 84 1b ff ff       	call   404380 <frexpl@plt>
  4127fc:	dd d8                	fstp   %st(0)
  4127fe:	48 83 c4 10          	add    $0x10,%rsp
		      if (__exp > 0)
  412802:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  412808:	85 c0                	test   %eax,%eax
  41280a:	7e 2b                	jle    412837 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x261>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  41280c:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  412812:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  412818:	89 d0                	mov    %edx,%eax
  41281a:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  412821:	48 c1 e8 20          	shr    $0x20,%rax
  412825:	29 c2                	sub    %eax,%edx
  412827:	d1 ea                	shr    %edx
  412829:	01 d0                	add    %edx,%eax
  41282b:	c1 e8 0d             	shr    $0xd,%eax
  41282e:	83 c0 01             	add    $0x1,%eax
  412831:	89 c0                	mov    %eax,%eax
  412833:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  412837:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  41283e:	00
  41283f:	77 08                	ja     412849 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x273>
		__guess = sizeof(__buf) * 2;
  412841:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  412848:	00
	      __dynbuf.reserve(__guess);
  412849:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41284d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412854:	48 89 d6             	mov    %rdx,%rsi
  412857:	48 89 c7             	mov    %rax,%rdi
  41285a:	e8 47 8a ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  41285f:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  412866:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  41286d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  412874:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  41287b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412882:	48 89 c7             	mov    %rax,%rdi
  412885:	e8 ee 89 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  41288a:	48 01 c0             	add    %rax,%rax
  41288d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  412894:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  41289b:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  4128a2:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  4128a9:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  4128b0:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  4128b7:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  4128be:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4128c5:	48 89 ce             	mov    %rcx,%rsi
  4128c8:	48 89 c7             	mov    %rax,%rdi
  4128cb:	e8 d0 53 00 00       	call   417ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  4128d0:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  4128d1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4128d8:	48 89 c7             	mov    %rax,%rdi
  4128db:	e8 ca 7e ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  4128e0:	48 83 c0 01          	add    $0x1,%rax
  4128e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  4128e8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4128ef:	48 89 c7             	mov    %rax,%rdi
  4128f2:	e8 b3 7e ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  4128f7:	48 89 c3             	mov    %rax,%rbx
  4128fa:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412901:	48 89 c7             	mov    %rax,%rdi
  412904:	e8 45 24 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  412909:	48 01 d8             	add    %rbx,%rax
  41290c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  412910:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  412916:	83 f8 4b             	cmp    $0x4b,%eax
  412919:	0f 94 c0             	sete   %al
  41291c:	0f b6 c0             	movzbl %al,%eax
  41291f:	48 85 c0             	test   %rax,%rax
  412922:	0f 85 37 ff ff ff    	jne    41285f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x289>
	  if (__upper)
  412928:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  41292c:	74 35                	je     412963 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x38d>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  41292e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412932:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  412936:	eb 1e                	jmp    412956 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x380>
		*__p = std::toupper(*__p);
  412938:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41293c:	0f b6 00             	movzbl (%rax),%eax
  41293f:	0f be c0             	movsbl %al,%eax
  412942:	89 c7                	mov    %eax,%edi
  412944:	e8 d7 1a ff ff       	call   404420 <toupper@plt>
  412949:	89 c2                	mov    %eax,%edx
  41294b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41294f:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  412951:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  412956:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  41295d:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  412961:	75 d5                	jne    412938 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x362>
	  bool __have_sign = true;
  412963:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  412967:	db 6d 10             	fldt   0x10(%rbp)
  41296a:	d9 e5                	fxam
  41296c:	df e0                	fnstsw %ax
  41296e:	dd d8                	fstp   %st(0)
  412970:	25 00 02 00 00       	and    $0x200,%eax
  412975:	85 c0                	test   %eax,%eax
  412977:	75 42                	jne    4129bb <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
	      if (_M_spec._M_sign == _Sign_plus)
  412979:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412980:	0f b6 00             	movzbl (%rax),%eax
  412983:	83 e0 0c             	and    $0xc,%eax
  412986:	3c 04                	cmp    $0x4,%al
  412988:	75 0e                	jne    412998 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c2>
		*--__start = '+';
  41298a:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  41298f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412993:	c6 00 2b             	movb   $0x2b,(%rax)
  412996:	eb 23                	jmp    4129bb <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
	      else if (_M_spec._M_sign == _Sign_space)
  412998:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41299f:	0f b6 00             	movzbl (%rax),%eax
  4129a2:	83 e0 0c             	and    $0xc,%eax
  4129a5:	3c 0c                	cmp    $0xc,%al
  4129a7:	75 0e                	jne    4129b7 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e1>
		*--__start = ' ';
  4129a9:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  4129ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4129b2:	c6 00 20             	movb   $0x20,(%rax)
  4129b5:	eb 04                	jmp    4129bb <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
		__have_sign = false;
  4129b7:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  4129bb:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  4129c2:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  4129c6:	48 89 c2             	mov    %rax,%rdx
  4129c9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4129cd:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4129d4:	48 89 ce             	mov    %rcx,%rsi
  4129d7:	48 89 c7             	mov    %rax,%rdi
  4129da:	e8 cb 4a ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  4129df:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4129e6:	0f b6 00             	movzbl (%rax),%eax
  4129e9:	83 e0 10             	and    $0x10,%eax
  4129ec:	84 c0                	test   %al,%al
  4129ee:	0f 84 1a 04 00 00    	je     412e0e <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
  4129f4:	db 6d 10             	fldt   0x10(%rbp)
  4129f7:	d9 e1                	fabs
  4129f9:	db 2d 21 8b 00 00    	fldt   0x8b21(%rip)        # 41b520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  4129ff:	df e9                	fucomip %st(1),%st
  412a01:	dd d8                	fstp   %st(0)
  412a03:	0f 92 c0             	setb   %al
  412a06:	83 f0 01             	xor    $0x1,%eax
  412a09:	0f b6 c0             	movzbl %al,%eax
  412a0c:	85 c0                	test   %eax,%eax
  412a0e:	0f 84 fa 03 00 00    	je     412e0e <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
	      string_view __s = __narrow_str;
  412a14:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  412a1b:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  412a22:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  412a29:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  412a30:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  412a37:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  412a38:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412a3f:	ba 00 00 00 00       	mov    $0x0,%edx
  412a44:	be 2e 00 00 00       	mov    $0x2e,%esi
  412a49:	48 89 c7             	mov    %rax,%rdi
  412a4c:	e8 d3 37 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  412a51:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  412a55:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  412a5a:	0f 84 a5 00 00 00    	je     412b05 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x52f>
		  __p = __s.find(__expc, __d + 1);
  412a60:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412a64:	48 8d 50 01          	lea    0x1(%rax),%rdx
  412a68:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  412a6c:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412a73:	89 ce                	mov    %ecx,%esi
  412a75:	48 89 c7             	mov    %rax,%rdi
  412a78:	e8 a7 37 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  412a7d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  412a81:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  412a86:	75 13                	jne    412a9b <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4c5>
		    __p = __s.size();
  412a88:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412a8f:	48 89 c7             	mov    %rax,%rdi
  412a92:	e8 3d 32 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412a97:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  412a9b:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  412a9f:	0f 84 af 00 00 00    	je     412b54 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
		      if (__s[__have_sign] != '0')
  412aa5:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  412aa9:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412ab0:	48 89 d6             	mov    %rdx,%rsi
  412ab3:	48 89 c7             	mov    %rax,%rdi
  412ab6:	e8 2b 32 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  412abb:	0f b6 00             	movzbl (%rax),%eax
  412abe:	3c 30                	cmp    $0x30,%al
  412ac0:	0f 95 c0             	setne  %al
  412ac3:	84 c0                	test   %al,%al
  412ac5:	74 15                	je     412adc <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x506>
			__sigfigs = __p - __have_sign - 1;
  412ac7:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  412acb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412acf:	48 29 c2             	sub    %rax,%rdx
  412ad2:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  412ad6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  412ada:	eb 78                	jmp    412b54 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  412adc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412ae0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  412ae4:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412aeb:	be 30 00 00 00       	mov    $0x30,%esi
  412af0:	48 89 c7             	mov    %rax,%rdi
  412af3:	e8 fc 21 00 00       	call   414cf4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  412af8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412afc:	48 29 c2             	sub    %rax,%rdx
  412aff:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  412b03:	eb 4f                	jmp    412b54 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
		  __p = __s.find(__expc); // Find the exponent, if present.
  412b05:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  412b09:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412b10:	ba 00 00 00 00       	mov    $0x0,%edx
  412b15:	89 ce                	mov    %ecx,%esi
  412b17:	48 89 c7             	mov    %rax,%rdi
  412b1a:	e8 05 37 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  412b1f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  412b23:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  412b28:	75 13                	jne    412b3d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x567>
		    __p = __s.size();
  412b2a:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412b31:	48 89 c7             	mov    %rax,%rdi
  412b34:	e8 9b 31 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412b39:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  412b3d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  412b41:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  412b45:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  412b49:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  412b4d:	48 29 c2             	sub    %rax,%rdx
  412b50:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  412b54:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  412b58:	74 1b                	je     412b75 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59f>
  412b5a:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  412b61:	48 85 c0             	test   %rax,%rax
  412b64:	74 0f                	je     412b75 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59f>
		  __z = __prec - __sigfigs;
  412b66:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  412b6d:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  412b71:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  412b75:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412b79:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412b7d:	0f 94 c0             	sete   %al
  412b80:	0f b6 d0             	movzbl %al,%edx
  412b83:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  412b87:	48 01 d0             	add    %rdx,%rax
  412b8a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  412b8e:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  412b93:	0f 84 75 02 00 00    	je     412e0e <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  412b99:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412ba0:	48 89 c7             	mov    %rax,%rdi
  412ba3:	e8 26 c4 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  412ba8:	84 c0                	test   %al,%al
  412baa:	74 1e                	je     412bca <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f4>
  412bac:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  412bb3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  412bb7:	48 29 c2             	sub    %rax,%rdx
  412bba:	48 89 d0             	mov    %rdx,%rax
  412bbd:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  412bc1:	72 07                	jb     412bca <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f4>
  412bc3:	b8 01 00 00 00       	mov    $0x1,%eax
  412bc8:	eb 05                	jmp    412bcf <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f9>
  412bca:	b8 00 00 00 00       	mov    $0x0,%eax
  412bcf:	84 c0                	test   %al,%al
  412bd1:	0f 84 d7 00 00 00    	je     412cae <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6d8>
					__s.size() - __p);
  412bd7:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412bde:	48 89 c7             	mov    %rax,%rdi
  412be1:	e8 ee 30 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  412be6:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  412bea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412bee:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412bf2:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  412bf6:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  412bfa:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412bfe:	48 01 d1             	add    %rdx,%rcx
  412c01:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412c05:	48 01 d1             	add    %rdx,%rcx
  412c08:	48 89 c2             	mov    %rax,%rdx
  412c0b:	48 89 cf             	mov    %rcx,%rdi
  412c0e:	e8 ad 17 ff ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  412c13:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412c17:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412c1b:	75 16                	jne    412c33 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x65d>
			__start[__p++] = '.';
  412c1d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412c21:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  412c25:	48 8d 50 01          	lea    0x1(%rax),%rdx
  412c29:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  412c2d:	48 01 c8             	add    %rcx,%rax
  412c30:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  412c33:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412c37:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  412c3b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  412c3f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  412c43:	48 89 c2             	mov    %rax,%rdx
  412c46:	be 30 00 00 00       	mov    $0x30,%esi
  412c4b:	48 89 cf             	mov    %rcx,%rdi
  412c4e:	e8 ed 14 ff ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  412c53:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412c5a:	48 89 c7             	mov    %rax,%rdi
  412c5d:	e8 36 48 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  412c62:	48 89 c3             	mov    %rax,%rbx
  412c65:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412c6c:	48 89 c7             	mov    %rax,%rdi
  412c6f:	e8 60 30 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412c74:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412c78:	48 01 c2             	add    %rax,%rdx
  412c7b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  412c82:	48 89 de             	mov    %rbx,%rsi
  412c85:	48 89 c7             	mov    %rax,%rdi
  412c88:	e8 1d 48 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  412c8d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  412c94:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  412c9b:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  412ca2:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  412ca9:	e9 60 01 00 00       	jmp    412e0e <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
		      __dynbuf.reserve(__s.size() + __extras);
  412cae:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412cb5:	48 89 c7             	mov    %rax,%rdi
  412cb8:	e8 17 30 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412cbd:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412cc1:	48 01 c2             	add    %rax,%rdx
  412cc4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412ccb:	48 89 d6             	mov    %rdx,%rsi
  412cce:	48 89 c7             	mov    %rax,%rdi
  412cd1:	e8 d0 85 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  412cd6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412cdd:	48 89 c7             	mov    %rax,%rdi
  412ce0:	e8 e9 c2 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  412ce5:	84 c0                	test   %al,%al
  412ce7:	0f 84 c5 00 00 00    	je     412db2 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7dc>
			  __dynbuf = __s.substr(0, __p);
  412ced:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412cf1:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412cf8:	be 00 00 00 00       	mov    $0x0,%esi
  412cfd:	48 89 c7             	mov    %rax,%rdi
  412d00:	e8 f5 8c ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  412d05:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  412d0c:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  412d13:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  412d1a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412d21:	48 89 d6             	mov    %rdx,%rsi
  412d24:	48 89 c7             	mov    %rax,%rdi
  412d27:	e8 26 20 00 00       	call   414d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  412d2c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412d30:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412d34:	75 14                	jne    412d4a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x774>
			    __dynbuf += '.';
  412d36:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412d3d:	be 2e 00 00 00       	mov    $0x2e,%esi
  412d42:	48 89 c7             	mov    %rax,%rdi
  412d45:	e8 2e 20 00 00       	call   414d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  412d4a:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  412d4f:	74 1b                	je     412d6c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x796>
			    __dynbuf.append(__z, '0');
  412d51:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  412d55:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412d5c:	ba 30 00 00 00       	mov    $0x30,%edx
  412d61:	48 89 ce             	mov    %rcx,%rsi
  412d64:	48 89 c7             	mov    %rax,%rdi
  412d67:	e8 36 20 00 00       	call   414da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  412d6c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  412d70:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412d77:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  412d7e:	48 89 ce             	mov    %rcx,%rsi
  412d81:	48 89 c7             	mov    %rax,%rdi
  412d84:	e8 71 8c ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  412d89:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  412d90:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  412d97:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  412d9e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412da5:	48 89 d6             	mov    %rdx,%rsi
  412da8:	48 89 c7             	mov    %rax,%rdi
  412dab:	e8 3c 20 00 00       	call   414dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  412db0:	eb 3f                	jmp    412df1 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x81b>
			  __dynbuf.insert(__p, __extras, '0');
  412db2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412db6:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  412dba:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412dc1:	b9 30 00 00 00       	mov    $0x30,%ecx
  412dc6:	48 89 c7             	mov    %rax,%rdi
  412dc9:	e8 78 20 00 00       	call   414e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  412dce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412dd2:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412dd6:	75 19                	jne    412df1 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x81b>
			    __dynbuf[__p] = '.';
  412dd8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412ddc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412de3:	48 89 d6             	mov    %rdx,%rsi
  412de6:	48 89 c7             	mov    %rax,%rdi
  412de9:	e8 b2 20 00 00       	call   414ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  412dee:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  412df1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412df8:	48 89 c7             	mov    %rax,%rdi
  412dfb:	e8 e0 51 ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  412e00:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  412e07:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  412e0e:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412e15:	48 89 c7             	mov    %rax,%rdi
  412e18:	e8 c7 1c ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  412e1d:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  412e24:	00 00 00 00
  412e28:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  412e2f:	00 00 00 00
	    __str = __narrow_str;
  412e33:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  412e3a:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  412e41:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  412e48:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  412e4f:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412e56:	0f b6 00             	movzbl (%rax),%eax
  412e59:	83 e0 20             	and    $0x20,%eax
  412e5c:	84 c0                	test   %al,%al
  412e5e:	0f 84 db 00 00 00    	je     412f3f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
  412e64:	db 6d 10             	fldt   0x10(%rbp)
  412e67:	d9 e1                	fabs
  412e69:	db 2d b1 86 00 00    	fldt   0x86b1(%rip)        # 41b520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  412e6f:	df e9                	fucomip %st(1),%st
  412e71:	dd d8                	fstp   %st(0)
  412e73:	0f 92 c0             	setb   %al
  412e76:	83 f0 01             	xor    $0x1,%eax
  412e79:	0f b6 c0             	movzbl %al,%eax
  412e7c:	85 c0                	test   %eax,%eax
  412e7e:	0f 84 bb 00 00 00    	je     412f3f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  412e84:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  412e8b:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  412e92:	48 89 d6             	mov    %rdx,%rsi
  412e95:	48 89 c7             	mov    %rax,%rdi
  412e98:	e8 ef 22 00 00       	call   41518c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  412e9d:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  412ea1:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  412ea8:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  412eaf:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  412eb6:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  412ebd:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  412ec4:	4d 89 c1             	mov    %r8,%r9
  412ec7:	41 89 c8             	mov    %ecx,%r8d
  412eca:	48 89 d1             	mov    %rdx,%rcx
  412ecd:	48 89 c2             	mov    %rax,%rdx
  412ed0:	e8 85 2d 00 00       	call   415c5a <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  412ed5:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  412edc:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412ee3:	48 89 d6             	mov    %rdx,%rsi
  412ee6:	48 89 c7             	mov    %rax,%rdi
  412ee9:	e8 e4 22 00 00       	call   4151d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  412eee:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  412ef5:	48 89 c7             	mov    %rax,%rdi
  412ef8:	e8 35 46 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  412efd:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  412f04:	48 89 c7             	mov    %rax,%rdi
  412f07:	e8 24 14 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  412f0c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412f13:	48 89 c7             	mov    %rax,%rdi
  412f16:	e8 b3 c0 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  412f1b:	83 f0 01             	xor    $0x1,%eax
  412f1e:	84 c0                	test   %al,%al
  412f20:	74 1d                	je     412f3f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
		__str = __wstr;
  412f22:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412f29:	48 89 c7             	mov    %rax,%rdi
  412f2c:	e8 af 50 ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  412f31:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  412f38:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  412f3f:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412f46:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  412f4d:	48 89 d6             	mov    %rdx,%rsi
  412f50:	48 89 c7             	mov    %rax,%rdi
  412f53:	e8 9e 2f 00 00       	call   415ef6 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  412f58:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  412f5c:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  412f63:	48 89 c7             	mov    %rax,%rdi
  412f66:	e8 69 2d ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412f6b:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  412f6f:	0f 93 c0             	setae  %al
  412f72:	84 c0                	test   %al,%al
  412f74:	74 36                	je     412fac <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9d6>
	    return __format::__write(__fc.out(), __str);
  412f76:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  412f7d:	48 89 c7             	mov    %rax,%rdi
  412f80:	e8 43 89 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  412f85:	48 89 c1             	mov    %rax,%rcx
  412f88:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  412f8f:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  412f96:	48 89 d6             	mov    %rdx,%rsi
  412f99:	48 89 c2             	mov    %rax,%rdx
  412f9c:	48 89 cf             	mov    %rcx,%rdi
  412f9f:	e8 7e b7 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  412fa4:	48 89 c3             	mov    %rax,%rbx
  412fa7:	e9 80 01 00 00       	jmp    41312c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb56>
	  char32_t __fill_char = _M_spec._M_fill;
  412fac:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412fb3:	8b 40 08             	mov    0x8(%rax),%eax
  412fb6:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  412fb9:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412fc0:	0f b6 00             	movzbl (%rax),%eax
  412fc3:	83 e0 03             	and    $0x3,%eax
  412fc6:	0f b6 c0             	movzbl %al,%eax
  412fc9:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  412fcc:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  412fd3:	48 89 c7             	mov    %rax,%rdi
  412fd6:	e8 f9 2c ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412fdb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  412fdf:	48 29 c2             	sub    %rax,%rdx
  412fe2:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  412fe6:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  412fed:	48 89 c7             	mov    %rax,%rdi
  412ff0:	e8 d3 88 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  412ff5:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  412ffc:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  413000:	0f 85 e9 00 00 00    	jne    4130ef <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
	      __align = _Align_right;
  413006:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  41300d:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413014:	0f b6 00             	movzbl (%rax),%eax
  413017:	83 e0 40             	and    $0x40,%eax
  41301a:	84 c0                	test   %al,%al
  41301c:	0f 84 c6 00 00 00    	je     4130e8 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb12>
  413022:	db 6d 10             	fldt   0x10(%rbp)
  413025:	d9 e1                	fabs
  413027:	db 2d f3 84 00 00    	fldt   0x84f3(%rip)        # 41b520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  41302d:	df e9                	fucomip %st(1),%st
  41302f:	dd d8                	fstp   %st(0)
  413031:	0f 92 c0             	setb   %al
  413034:	83 f0 01             	xor    $0x1,%eax
  413037:	0f b6 c0             	movzbl %al,%eax
  41303a:	85 c0                	test   %eax,%eax
  41303c:	0f 84 a6 00 00 00    	je     4130e8 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb12>
		  __fill_char = _CharT('0');
  413042:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  413049:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  413050:	be 00 00 00 00       	mov    $0x0,%esi
  413055:	48 89 c7             	mov    %rax,%rdi
  413058:	e8 89 2c ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41305d:	0f b6 00             	movzbl (%rax),%eax
  413060:	0f be c0             	movsbl %al,%eax
  413063:	89 c7                	mov    %eax,%edi
  413065:	e8 a8 21 ff ff       	call   405212 <_ZNSt8__format11__is_xdigitEc>
  41306a:	83 f0 01             	xor    $0x1,%eax
  41306d:	84 c0                	test   %al,%al
  41306f:	74 7e                	je     4130ef <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
		      *__out++ = __str[0];
  413071:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  413078:	be 00 00 00 00       	mov    $0x0,%esi
  41307d:	48 89 c7             	mov    %rax,%rdi
  413080:	e8 61 2c ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  413085:	0f b6 00             	movzbl (%rax),%eax
  413088:	0f be c0             	movsbl %al,%eax
  41308b:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  413092:	00 00 00
      operator++(int) { return *this; }
  413095:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  41309c:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4130a3:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4130aa:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4130b1:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4130b7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4130be:	48 8b 00             	mov    (%rax),%rax
  4130c1:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4130c8:	89 d6                	mov    %edx,%esi
  4130ca:	48 89 c7             	mov    %rax,%rdi
  4130cd:	e8 56 48 00 00       	call   417928 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  4130d2:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4130d9:	be 01 00 00 00       	mov    $0x1,%esi
  4130de:	48 89 c7             	mov    %rax,%rdi
  4130e1:	e8 90 2e 00 00       	call   415f76 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4130e6:	eb 07                	jmp    4130ef <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
		__fill_char = _CharT(' ');
  4130e8:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  4130ef:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  4130f6:	48 89 c7             	mov    %rax,%rdi
  4130f9:	e8 b5 68 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4130fe:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  413102:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  413106:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  413109:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  413110:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  413117:	48 8b 00             	mov    (%rax),%rax
  41311a:	45 89 c1             	mov    %r8d,%r9d
  41311d:	49 89 f8             	mov    %rdi,%r8
  413120:	48 89 c7             	mov    %rax,%rdi
  413123:	e8 0b 31 00 00       	call   416233 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  413128:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  41312b:	90                   	nop
	}
  41312c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  413133:	48 89 c7             	mov    %rax,%rdi
  413136:	e8 f7 43 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41313b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413142:	48 89 c7             	mov    %rax,%rdi
  413145:	e8 e8 43 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41314a:	48 89 d8             	mov    %rbx,%rax
  41314d:	eb 45                	jmp    413194 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbbe>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41314f:	48 89 c3             	mov    %rax,%rbx
  413152:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  413159:	48 89 c7             	mov    %rax,%rdi
  41315c:	e8 cf 11 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  413161:	eb 03                	jmp    413166 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb90>
	}
  413163:	48 89 c3             	mov    %rax,%rbx
  413166:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41316d:	48 89 c7             	mov    %rax,%rdi
  413170:	e8 bd 43 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  413175:	eb 03                	jmp    41317a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba4>
  413177:	48 89 c3             	mov    %rax,%rbx
  41317a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413181:	48 89 c7             	mov    %rax,%rdi
  413184:	e8 a9 43 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  413189:	48 89 d8             	mov    %rbx,%rax
  41318c:	48 89 c7             	mov    %rax,%rdi
  41318f:	e8 7c 12 ff ff       	call   404410 <_Unwind_Resume@plt>
  413194:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413198:	c9                   	leave
  413199:	c3                   	ret

000000000041319a <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>:
	format(basic_string_view<_CharT> __s,
  41319a:	55                   	push   %rbp
  41319b:	48 89 e5             	mov    %rsp,%rbp
  41319e:	48 83 ec 30          	sub    $0x30,%rsp
  4131a2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4131a6:	48 89 f0             	mov    %rsi,%rax
  4131a9:	48 89 d6             	mov    %rdx,%rsi
  4131ac:	48 89 c0             	mov    %rax,%rax
  4131af:	ba 00 00 00 00       	mov    $0x0,%edx
  4131b4:	48 89 f2             	mov    %rsi,%rdx
  4131b7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4131bb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4131bf:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	  if (_M_spec._M_width_kind == _WP_none
  4131c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4131c7:	0f b7 00             	movzwl (%rax),%eax
  4131ca:	66 25 80 01          	and    $0x180,%ax
  4131ce:	66 85 c0             	test   %ax,%ax
  4131d1:	75 36                	jne    413209 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0x6f>
		&& _M_spec._M_prec_kind == _WP_none)
  4131d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4131d7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4131db:	83 e0 06             	and    $0x6,%eax
  4131de:	84 c0                	test   %al,%al
  4131e0:	75 27                	jne    413209 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0x6f>
	    return __format::__write(__fc.out(), __s);
  4131e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4131e6:	48 89 c7             	mov    %rax,%rdi
  4131e9:	e8 da 86 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4131ee:	48 89 c1             	mov    %rax,%rcx
  4131f1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4131f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4131f9:	48 89 d6             	mov    %rdx,%rsi
  4131fc:	48 89 c2             	mov    %rax,%rdx
  4131ff:	48 89 cf             	mov    %rcx,%rdi
  413202:	e8 1b b5 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  413207:	eb 7f                	jmp    413288 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xee>
	      if (_M_spec._M_prec_kind != _WP_none)
  413209:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41320d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413211:	83 e0 06             	and    $0x6,%eax
  413214:	84 c0                	test   %al,%al
  413216:	74 30                	je     413248 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xae>
		  size_t __prec = _M_spec._M_get_precision(__fc);
  413218:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41321c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  413220:	48 89 d6             	mov    %rdx,%rsi
  413223:	48 89 c7             	mov    %rax,%rdi
  413226:	e8 75 28 00 00       	call   415aa0 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41322b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		  __estimated_width = __unicode::__truncate(__s, __prec);
  41322f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  413233:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  413237:	48 89 d6             	mov    %rdx,%rsi
  41323a:	48 89 c7             	mov    %rax,%rdi
  41323d:	e8 7c 35 00 00       	call   4167be <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm>
  413242:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  413246:	eb 17                	jmp    41325f <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xc5>
		__estimated_width = __unicode::__field_width(__s);
  413248:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41324c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413250:	48 89 d7             	mov    %rdx,%rdi
  413253:	48 89 c6             	mov    %rax,%rsi
  413256:	e8 ef 36 00 00       	call   41694a <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE>
  41325b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
						  __fc, _M_spec);
  41325f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
	  return __format::__write_padded_as_spec(__s, __estimated_width,
  413263:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  413267:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41326b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  41326f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413273:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  413279:	49 89 f8             	mov    %rdi,%r8
  41327c:	48 89 f7             	mov    %rsi,%rdi
  41327f:	48 89 c6             	mov    %rax,%rsi
  413282:	e8 03 00 00 00       	call   41328a <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
						  __fc, _M_spec);
  413287:	90                   	nop
	}
  413288:	c9                   	leave
  413289:	c3                   	ret

000000000041328a <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>:
    __write_padded_as_spec(basic_string_view<type_identity_t<_CharT>> __str,
  41328a:	55                   	push   %rbp
  41328b:	48 89 e5             	mov    %rsp,%rbp
  41328e:	53                   	push   %rbx
  41328f:	48 83 ec 48          	sub    $0x48,%rsp
  413293:	48 89 f8             	mov    %rdi,%rax
  413296:	49 89 f2             	mov    %rsi,%r10
  413299:	48 89 c6             	mov    %rax,%rsi
  41329c:	bf 00 00 00 00       	mov    $0x0,%edi
  4132a1:	4c 89 d7             	mov    %r10,%rdi
  4132a4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4132a8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4132ac:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4132b0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4132b4:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  4132b8:	44 89 4d b4          	mov    %r9d,-0x4c(%rbp)
      size_t __width = __spec._M_get_width(__fc);
  4132bc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4132c0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4132c4:	48 89 d6             	mov    %rdx,%rsi
  4132c7:	48 89 c7             	mov    %rax,%rdi
  4132ca:	e8 27 2c 00 00       	call   415ef6 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  4132cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__width <= __estimated_width)
  4132d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4132d7:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  4132db:	72 27                	jb     413304 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0x7a>
	return __format::__write(__fc.out(), __str);
  4132dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4132e1:	48 89 c7             	mov    %rax,%rdi
  4132e4:	e8 df 85 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4132e9:	48 89 c1             	mov    %rax,%rcx
  4132ec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4132f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4132f4:	48 89 d6             	mov    %rdx,%rsi
  4132f7:	48 89 c2             	mov    %rax,%rdx
  4132fa:	48 89 cf             	mov    %rcx,%rdi
  4132fd:	e8 20 b4 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  413302:	eb 61                	jmp    413365 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0xdb>
      const size_t __nfill = __width - __estimated_width;
  413304:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413308:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  41330c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__spec._M_align)
  413310:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413314:	0f b6 00             	movzbl (%rax),%eax
  413317:	83 e0 03             	and    $0x3,%eax
  41331a:	84 c0                	test   %al,%al
  41331c:	74 10                	je     41332e <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0xa4>
	__align = __spec._M_align;
  41331e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413322:	0f b6 00             	movzbl (%rax),%eax
  413325:	83 e0 03             	and    $0x3,%eax
  413328:	0f b6 c0             	movzbl %al,%eax
  41332b:	89 45 b4             	mov    %eax,-0x4c(%rbp)
				      __spec._M_fill);
  41332e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413332:	8b 58 08             	mov    0x8(%rax),%ebx
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
  413335:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  413339:	48 89 c7             	mov    %rax,%rdi
  41333c:	e8 87 85 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  413341:	48 89 c7             	mov    %rax,%rdi
  413344:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  413348:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
  41334b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41334f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413353:	41 89 d9             	mov    %ebx,%r9d
  413356:	49 89 f0             	mov    %rsi,%r8
  413359:	48 89 d6             	mov    %rdx,%rsi
  41335c:	48 89 c2             	mov    %rax,%rdx
  41335f:	e8 cf 2e 00 00       	call   416233 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
				      __spec._M_fill);
  413364:	90                   	nop
    }
  413365:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413369:	c9                   	leave
  41336a:	c3                   	ret
  41336b:	90                   	nop

000000000041336c <_ZNSt8__format15__formatter_intIcE8_M_parseInEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  41336c:	55                   	push   %rbp
  41336d:	48 89 e5             	mov    %rsp,%rbp
  413370:	48 83 ec 10          	sub    $0x10,%rsp
  413374:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413378:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  41337c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  413380:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413384:	ba 01 00 00 00       	mov    $0x1,%edx
  413389:	48 89 ce             	mov    %rcx,%rsi
  41338c:	48 89 c7             	mov    %rax,%rdi
  41338f:	e8 00 36 ff ff       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  413394:	c9                   	leave
  413395:	c3                   	ret

0000000000413396 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  413396:	55                   	push   %rbp
  413397:	48 89 e5             	mov    %rsp,%rbp
  41339a:	53                   	push   %rbx
  41339b:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  4133a2:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  4133a9:	48 89 f0             	mov    %rsi,%rax
  4133ac:	48 89 d6             	mov    %rdx,%rsi
  4133af:	48 89 c0             	mov    %rax,%rax
  4133b2:	ba 00 00 00 00       	mov    $0x0,%edx
  4133b7:	48 89 f2             	mov    %rsi,%rdx
  4133ba:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  4133c1:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  4133c8:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  4133cf:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4133d6:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4133da:	83 e0 78             	and    $0x78,%eax
  4133dd:	3c 38                	cmp    $0x38,%al
  4133df:	75 39                	jne    41341a <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x84>
	    return _M_format_character(_S_to_character(__i), __fc);
  4133e1:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  4133e8:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  4133ef:	48 89 d7             	mov    %rdx,%rdi
  4133f2:	48 89 c6             	mov    %rax,%rsi
  4133f5:	e8 2e 36 00 00       	call   416a28 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_>
  4133fa:	0f be c8             	movsbl %al,%ecx
  4133fd:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  413404:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41340b:	89 ce                	mov    %ecx,%esi
  41340d:	48 89 c7             	mov    %rax,%rdi
  413410:	e8 ab be ff ff       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  413415:	e9 c8 03 00 00       	jmp    4137e2 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x44c>
	  to_chars_result __res{};
  41341a:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
  413421:	00 00 00 00
  413425:	48 c7 85 e8 fe ff ff 	movq   $0x0,-0x118(%rbp)
  41342c:	00 00 00 00
	  string_view __base_prefix;
  413430:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  413437:	00 00 00 00
  41343b:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  413442:	00 00 00 00
	  if (__i < 0)
  413446:	48 83 bd b8 fe ff ff 	cmpq   $0x0,-0x148(%rbp)
  41344d:	00
  41344e:	79 22                	jns    413472 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xdc>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  413450:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  413457:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  41345e:	48 f7 d8             	neg    %rax
  413461:	48 83 d2 00          	adc    $0x0,%rdx
  413465:	48 f7 da             	neg    %rdx
  413468:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  41346c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  413470:	eb 16                	jmp    413488 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xf2>
	    __u = __i;
  413472:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  413479:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  413480:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  413484:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  char* __start = __buf + 3;
  413488:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  41348f:	48 83 c0 03          	add    $0x3,%rax
  413493:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  413497:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  41349e:	48 05 83 00 00 00    	add    $0x83,%rax
  4134a4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  char* const __start_digits = __start;
  4134a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4134ac:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  switch (_M_spec._M_type)
  4134b0:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4134b7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4134bb:	c0 e8 03             	shr    $0x3,%al
  4134be:	83 e0 0f             	and    $0xf,%eax
  4134c1:	0f b6 c0             	movzbl %al,%eax
  4134c4:	83 f8 06             	cmp    $0x6,%eax
  4134c7:	0f 8f 0a 02 00 00    	jg     4136d7 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  4134cd:	83 f8 05             	cmp    $0x5,%eax
  4134d0:	0f 8d 46 01 00 00    	jge    41361c <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x286>
  4134d6:	83 f8 04             	cmp    $0x4,%eax
  4134d9:	0f 84 d2 00 00 00    	je     4135b1 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x21b>
  4134df:	83 f8 04             	cmp    $0x4,%eax
  4134e2:	0f 8f ef 01 00 00    	jg     4136d7 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  4134e8:	83 f8 01             	cmp    $0x1,%eax
  4134eb:	7f 0d                	jg     4134fa <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x164>
  4134ed:	85 c0                	test   %eax,%eax
  4134ef:	0f 89 88 00 00 00    	jns    41357d <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1e7>
  4134f5:	e9 dd 01 00 00       	jmp    4136d7 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  4134fa:	83 e8 02             	sub    $0x2,%eax
  4134fd:	83 f8 01             	cmp    $0x1,%eax
  413500:	0f 87 d1 01 00 00    	ja     4136d7 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  413506:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41350d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413511:	83 e0 78             	and    $0x78,%eax
  413514:	3c 10                	cmp    $0x10,%al
  413516:	75 07                	jne    41351f <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x189>
  413518:	ba e2 b3 41 00       	mov    $0x41b3e2,%edx
  41351d:	eb 05                	jmp    413524 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x18e>
  41351f:	ba e5 b3 41 00       	mov    $0x41b3e5,%edx
  413524:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  413528:	48 89 d6             	mov    %rdx,%rsi
  41352b:	48 89 c7             	mov    %rax,%rdi
  41352e:	e8 0b 26 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413533:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  413537:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  41353b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413542:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  413549:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41354d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413551:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413555:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  413559:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  41355f:	48 89 d1             	mov    %rdx,%rcx
  413562:	48 89 c2             	mov    %rax,%rdx
  413565:	e8 05 35 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  41356a:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413571:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  413578:	e9 5b 01 00 00       	jmp    4136d8 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __res = to_chars(__start, __end, __u, 10);
  41357d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413581:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413585:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413589:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  41358d:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  413593:	48 89 d1             	mov    %rdx,%rcx
  413596:	48 89 c2             	mov    %rax,%rdx
  413599:	e8 d1 34 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  41359e:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4135a5:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  4135ac:	e9 27 01 00 00       	jmp    4136d8 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      if (__i != 0)
  4135b1:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4135b8:	48 0b 85 b8 fe ff ff 	or     -0x148(%rbp),%rax
  4135bf:	74 27                	je     4135e8 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x252>
		__base_prefix = "0";
  4135c1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4135c5:	be e8 b3 41 00       	mov    $0x41b3e8,%esi
  4135ca:	48 89 c7             	mov    %rax,%rdi
  4135cd:	e8 6c 25 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  4135d2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4135d6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4135da:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  4135e1:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  4135e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4135ec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4135f0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4135f4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4135f8:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  4135fe:	48 89 d1             	mov    %rdx,%rcx
  413601:	48 89 c2             	mov    %rax,%rdx
  413604:	e8 66 34 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413609:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413610:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  413617:	e9 bc 00 00 00       	jmp    4136d8 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  41361c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413623:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413627:	83 e0 78             	and    $0x78,%eax
  41362a:	3c 28                	cmp    $0x28,%al
  41362c:	75 07                	jne    413635 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x29f>
  41362e:	ba ea b3 41 00       	mov    $0x41b3ea,%edx
  413633:	eb 05                	jmp    41363a <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2a4>
  413635:	ba ed b3 41 00       	mov    $0x41b3ed,%edx
  41363a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41363e:	48 89 d6             	mov    %rdx,%rsi
  413641:	48 89 c7             	mov    %rax,%rdi
  413644:	e8 f5 24 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413649:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41364d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  413651:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413658:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  41365f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413663:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413667:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  41366b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  41366f:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  413675:	48 89 d1             	mov    %rdx,%rcx
  413678:	48 89 c2             	mov    %rax,%rdx
  41367b:	e8 ef 33 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413680:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413687:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  41368e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413695:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413699:	83 e0 78             	and    $0x78,%eax
  41369c:	3c 30                	cmp    $0x30,%al
  41369e:	75 37                	jne    4136d7 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4136a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4136a4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4136a8:	eb 1e                	jmp    4136c8 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x332>
		  *__p = __builtin_toupper(*__p);
  4136aa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4136ae:	0f b6 00             	movzbl (%rax),%eax
  4136b1:	0f be c0             	movsbl %al,%eax
  4136b4:	89 c7                	mov    %eax,%edi
  4136b6:	e8 65 0d ff ff       	call   404420 <toupper@plt>
  4136bb:	89 c2                	mov    %eax,%edx
  4136bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4136c1:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4136c3:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
  4136c8:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4136cf:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  4136d3:	75 d5                	jne    4136aa <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x314>
	      break;
  4136d5:	eb 00                	jmp    4136d7 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  4136d7:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  4136d8:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4136df:	0f b6 00             	movzbl (%rax),%eax
  4136e2:	83 e0 10             	and    $0x10,%eax
  4136e5:	84 c0                	test   %al,%al
  4136e7:	74 1b                	je     413704 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x36e>
  4136e9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  4136f0:	48 89 c7             	mov    %rax,%rdi
  4136f3:	e8 dc 25 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4136f8:	48 85 c0             	test   %rax,%rax
  4136fb:	74 07                	je     413704 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x36e>
  4136fd:	b8 01 00 00 00       	mov    $0x1,%eax
  413702:	eb 05                	jmp    413709 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x373>
  413704:	b8 00 00 00 00       	mov    $0x0,%eax
  413709:	84 c0                	test   %al,%al
  41370b:	74 4c                	je     413759 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
	      __start -= __base_prefix.size();
  41370d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413714:	48 89 c7             	mov    %rax,%rdi
  413717:	e8 b8 25 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41371c:	48 f7 d8             	neg    %rax
  41371f:	48 01 45 d8          	add    %rax,-0x28(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  413723:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  41372a:	48 89 c7             	mov    %rax,%rdi
  41372d:	e8 a2 25 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413732:	48 89 c3             	mov    %rax,%rbx
  413735:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  41373c:	48 89 c7             	mov    %rax,%rdi
  41373f:	e8 54 3d ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  413744:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413748:	48 89 d1             	mov    %rdx,%rcx
  41374b:	48 89 da             	mov    %rbx,%rdx
  41374e:	48 89 c6             	mov    %rax,%rsi
  413751:	48 89 cf             	mov    %rcx,%rdi
  413754:	e8 d7 0a ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  413759:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41375d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
  413761:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413768:	0f b6 00             	movzbl (%rax),%eax
  41376b:	c0 e8 02             	shr    $0x2,%al
  41376e:	83 e0 03             	and    $0x3,%eax
  413771:	0f b6 d0             	movzbl %al,%edx
  413774:	48 8b b5 b0 fe ff ff 	mov    -0x150(%rbp),%rsi
  41377b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  413782:	48 89 f7             	mov    %rsi,%rdi
  413785:	48 89 c6             	mov    %rax,%rsi
  413788:	e8 5f 17 00 00       	call   414eec <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_>
  41378d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			       __start_digits - __start, __fc);
  413791:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  413795:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  413799:	48 89 c3             	mov    %rax,%rbx
  41379c:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4137a3:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4137a7:	48 89 c2             	mov    %rax,%rdx
  4137aa:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4137ae:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4137b2:	48 89 ce             	mov    %rcx,%rsi
  4137b5:	48 89 c7             	mov    %rax,%rdi
  4137b8:	e8 ed 3c ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  4137bd:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  4137c4:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  4137c8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4137cc:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4137d3:	49 89 c8             	mov    %rcx,%r8
  4137d6:	48 89 d9             	mov    %rbx,%rcx
  4137d9:	48 89 c7             	mov    %rax,%rdi
  4137dc:	e8 55 1d 00 00       	call   415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  4137e1:	90                   	nop
	}
  4137e2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4137e6:	c9                   	leave
  4137e7:	c3                   	ret

00000000004137e8 <_ZNSt8__format15__formatter_intIcE8_M_parseIoEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  4137e8:	55                   	push   %rbp
  4137e9:	48 89 e5             	mov    %rsp,%rbp
  4137ec:	48 83 ec 10          	sub    $0x10,%rsp
  4137f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4137f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  4137f8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4137fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413800:	ba 01 00 00 00       	mov    $0x1,%edx
  413805:	48 89 ce             	mov    %rcx,%rsi
  413808:	48 89 c7             	mov    %rax,%rdi
  41380b:	e8 84 31 ff ff       	call   406994 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  413810:	c9                   	leave
  413811:	c3                   	ret

0000000000413812 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  413812:	55                   	push   %rbp
  413813:	48 89 e5             	mov    %rsp,%rbp
  413816:	53                   	push   %rbx
  413817:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  41381e:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  413825:	48 89 f0             	mov    %rsi,%rax
  413828:	48 89 d6             	mov    %rdx,%rsi
  41382b:	48 89 c0             	mov    %rax,%rax
  41382e:	ba 00 00 00 00       	mov    $0x0,%edx
  413833:	48 89 f2             	mov    %rsi,%rdx
  413836:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  41383d:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  413844:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  41384b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413852:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413856:	83 e0 78             	and    $0x78,%eax
  413859:	3c 38                	cmp    $0x38,%al
  41385b:	75 39                	jne    413896 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x84>
	    return _M_format_character(_S_to_character(__i), __fc);
  41385d:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  413864:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  41386b:	48 89 d7             	mov    %rdx,%rdi
  41386e:	48 89 c6             	mov    %rax,%rsi
  413871:	e8 38 32 00 00       	call   416aae <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_>
  413876:	0f be c8             	movsbl %al,%ecx
  413879:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  413880:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413887:	89 ce                	mov    %ecx,%esi
  413889:	48 89 c7             	mov    %rax,%rdi
  41388c:	e8 2f ba ff ff       	call   40f2c0 <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  413891:	e9 9c 03 00 00       	jmp    413c32 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x420>
	  to_chars_result __res{};
  413896:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
  41389d:	00 00 00 00
  4138a1:	48 c7 85 e8 fe ff ff 	movq   $0x0,-0x118(%rbp)
  4138a8:	00 00 00 00
	  string_view __base_prefix;
  4138ac:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  4138b3:	00 00 00 00
  4138b7:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  4138be:	00 00 00 00
	    __u = __i;
  4138c2:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4138c9:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  4138d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4138d4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  char* __start = __buf + 3;
  4138d8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4138df:	48 83 c0 03          	add    $0x3,%rax
  4138e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  4138e7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4138ee:	48 05 83 00 00 00    	add    $0x83,%rax
  4138f4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  char* const __start_digits = __start;
  4138f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4138fc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  switch (_M_spec._M_type)
  413900:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413907:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41390b:	c0 e8 03             	shr    $0x3,%al
  41390e:	83 e0 0f             	and    $0xf,%eax
  413911:	0f b6 c0             	movzbl %al,%eax
  413914:	83 f8 06             	cmp    $0x6,%eax
  413917:	0f 8f 0a 02 00 00    	jg     413b27 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  41391d:	83 f8 05             	cmp    $0x5,%eax
  413920:	0f 8d 46 01 00 00    	jge    413a6c <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x25a>
  413926:	83 f8 04             	cmp    $0x4,%eax
  413929:	0f 84 d2 00 00 00    	je     413a01 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1ef>
  41392f:	83 f8 04             	cmp    $0x4,%eax
  413932:	0f 8f ef 01 00 00    	jg     413b27 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  413938:	83 f8 01             	cmp    $0x1,%eax
  41393b:	7f 0d                	jg     41394a <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x138>
  41393d:	85 c0                	test   %eax,%eax
  41393f:	0f 89 88 00 00 00    	jns    4139cd <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1bb>
  413945:	e9 dd 01 00 00       	jmp    413b27 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  41394a:	83 e8 02             	sub    $0x2,%eax
  41394d:	83 f8 01             	cmp    $0x1,%eax
  413950:	0f 87 d1 01 00 00    	ja     413b27 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  413956:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41395d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413961:	83 e0 78             	and    $0x78,%eax
  413964:	3c 10                	cmp    $0x10,%al
  413966:	75 07                	jne    41396f <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x15d>
  413968:	ba e2 b3 41 00       	mov    $0x41b3e2,%edx
  41396d:	eb 05                	jmp    413974 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x162>
  41396f:	ba e5 b3 41 00       	mov    $0x41b3e5,%edx
  413974:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  413978:	48 89 d6             	mov    %rdx,%rsi
  41397b:	48 89 c7             	mov    %rax,%rdi
  41397e:	e8 bb 21 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413983:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  413987:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  41398b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413992:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  413999:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  41399d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4139a1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4139a5:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4139a9:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4139af:	48 89 d1             	mov    %rdx,%rcx
  4139b2:	48 89 c2             	mov    %rax,%rdx
  4139b5:	e8 b5 30 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  4139ba:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4139c1:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  4139c8:	e9 5b 01 00 00       	jmp    413b28 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      __res = to_chars(__start, __end, __u, 10);
  4139cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4139d1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4139d5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4139d9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4139dd:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  4139e3:	48 89 d1             	mov    %rdx,%rcx
  4139e6:	48 89 c2             	mov    %rax,%rdx
  4139e9:	e8 81 30 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  4139ee:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4139f5:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  4139fc:	e9 27 01 00 00       	jmp    413b28 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      if (__i != 0)
  413a01:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  413a08:	48 0b 85 b8 fe ff ff 	or     -0x148(%rbp),%rax
  413a0f:	74 27                	je     413a38 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
		__base_prefix = "0";
  413a11:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  413a15:	be e8 b3 41 00       	mov    $0x41b3e8,%esi
  413a1a:	48 89 c7             	mov    %rax,%rdi
  413a1d:	e8 1c 21 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413a22:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  413a26:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  413a2a:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413a31:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  413a38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  413a3c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413a40:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413a44:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  413a48:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  413a4e:	48 89 d1             	mov    %rdx,%rcx
  413a51:	48 89 c2             	mov    %rax,%rdx
  413a54:	e8 16 30 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413a59:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413a60:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  413a67:	e9 bc 00 00 00       	jmp    413b28 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  413a6c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413a73:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413a77:	83 e0 78             	and    $0x78,%eax
  413a7a:	3c 28                	cmp    $0x28,%al
  413a7c:	75 07                	jne    413a85 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x273>
  413a7e:	ba ea b3 41 00       	mov    $0x41b3ea,%edx
  413a83:	eb 05                	jmp    413a8a <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x278>
  413a85:	ba ed b3 41 00       	mov    $0x41b3ed,%edx
  413a8a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  413a8e:	48 89 d6             	mov    %rdx,%rsi
  413a91:	48 89 c7             	mov    %rax,%rdi
  413a94:	e8 a5 20 ff ff       	call   405b3e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413a99:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  413a9d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  413aa1:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413aa8:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  413aaf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  413ab3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413ab7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413abb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  413abf:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  413ac5:	48 89 d1             	mov    %rdx,%rcx
  413ac8:	48 89 c2             	mov    %rax,%rdx
  413acb:	e8 9f 2f 00 00       	call   416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413ad0:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413ad7:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  413ade:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413ae5:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413ae9:	83 e0 78             	and    $0x78,%eax
  413aec:	3c 30                	cmp    $0x30,%al
  413aee:	75 37                	jne    413b27 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  413af0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413af4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  413af8:	eb 1e                	jmp    413b18 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x306>
		  *__p = __builtin_toupper(*__p);
  413afa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413afe:	0f b6 00             	movzbl (%rax),%eax
  413b01:	0f be c0             	movsbl %al,%eax
  413b04:	89 c7                	mov    %eax,%edi
  413b06:	e8 15 09 ff ff       	call   404420 <toupper@plt>
  413b0b:	89 c2                	mov    %eax,%edx
  413b0d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413b11:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  413b13:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  413b18:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  413b1f:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  413b23:	75 d5                	jne    413afa <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2e8>
	      break;
  413b25:	eb 00                	jmp    413b27 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  413b27:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  413b28:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413b2f:	0f b6 00             	movzbl (%rax),%eax
  413b32:	83 e0 10             	and    $0x10,%eax
  413b35:	84 c0                	test   %al,%al
  413b37:	74 1b                	je     413b54 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
  413b39:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413b40:	48 89 c7             	mov    %rax,%rdi
  413b43:	e8 8c 21 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413b48:	48 85 c0             	test   %rax,%rax
  413b4b:	74 07                	je     413b54 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
  413b4d:	b8 01 00 00 00       	mov    $0x1,%eax
  413b52:	eb 05                	jmp    413b59 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x347>
  413b54:	b8 00 00 00 00       	mov    $0x0,%eax
  413b59:	84 c0                	test   %al,%al
  413b5b:	74 4c                	je     413ba9 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x397>
	      __start -= __base_prefix.size();
  413b5d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413b64:	48 89 c7             	mov    %rax,%rdi
  413b67:	e8 68 21 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413b6c:	48 f7 d8             	neg    %rax
  413b6f:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  413b73:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413b7a:	48 89 c7             	mov    %rax,%rdi
  413b7d:	e8 52 21 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413b82:	48 89 c3             	mov    %rax,%rbx
  413b85:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413b8c:	48 89 c7             	mov    %rax,%rdi
  413b8f:	e8 04 39 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  413b94:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413b98:	48 89 d1             	mov    %rdx,%rcx
  413b9b:	48 89 da             	mov    %rbx,%rdx
  413b9e:	48 89 c6             	mov    %rax,%rsi
  413ba1:	48 89 cf             	mov    %rcx,%rdi
  413ba4:	e8 87 06 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  413ba9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413bad:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
  413bb1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413bb8:	0f b6 00             	movzbl (%rax),%eax
  413bbb:	c0 e8 02             	shr    $0x2,%al
  413bbe:	83 e0 03             	and    $0x3,%eax
  413bc1:	0f b6 d0             	movzbl %al,%edx
  413bc4:	48 8b b5 b0 fe ff ff 	mov    -0x150(%rbp),%rsi
  413bcb:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  413bd2:	48 89 f7             	mov    %rsi,%rdi
  413bd5:	48 89 c6             	mov    %rax,%rsi
  413bd8:	e8 6c 13 00 00       	call   414f49 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_>
  413bdd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  413be1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  413be5:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  413be9:	48 89 c3             	mov    %rax,%rbx
  413bec:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  413bf3:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  413bf7:	48 89 c2             	mov    %rax,%rdx
  413bfa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  413bfe:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  413c02:	48 89 ce             	mov    %rcx,%rsi
  413c05:	48 89 c7             	mov    %rax,%rdi
  413c08:	e8 9d 38 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  413c0d:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  413c14:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  413c18:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  413c1c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413c23:	49 89 c8             	mov    %rcx,%r8
  413c26:	48 89 d9             	mov    %rbx,%rcx
  413c29:	48 89 c7             	mov    %rax,%rdi
  413c2c:	e8 05 19 00 00       	call   415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  413c31:	90                   	nop
	}
  413c32:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413c36:	c9                   	leave
  413c37:	c3                   	ret

0000000000413c38 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  413c38:	55                   	push   %rbp
  413c39:	48 89 e5             	mov    %rsp,%rbp
  413c3c:	48 83 ec 20          	sub    $0x20,%rsp
  413c40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413c44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  413c48:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  413c4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413c50:	48 8b 00             	mov    (%rax),%rax
  413c53:	0f b6 00             	movzbl (%rax),%eax
  413c56:	84 c0                	test   %al,%al
  413c58:	74 35                	je     413c8f <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x57>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  413c5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413c5e:	48 8b 40 18          	mov    0x18(%rax),%rax
  413c62:	48 8b 00             	mov    (%rax),%rax
  413c65:	89 c1                	mov    %eax,%ecx
  413c67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413c6b:	48 8b 40 10          	mov    0x10(%rax),%rax
  413c6f:	8b 10                	mov    (%rax),%edx
  413c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413c75:	48 8b 40 08          	mov    0x8(%rax),%rax
  413c79:	66 0f 6f 00          	movdqa (%rax),%xmm0
  413c7d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  413c81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413c85:	48 89 c7             	mov    %rax,%rdi
  413c88:	e8 b3 05 ff ff       	call   404240 <_ZSt8to_charsPcS_DF128_St12chars_formati@plt>
  413c8d:	eb 59                	jmp    413ce8 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb0>
	    else if (__fmt != chars_format{})
  413c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413c93:	48 8b 40 10          	mov    0x10(%rax),%rax
  413c97:	8b 00                	mov    (%rax),%eax
  413c99:	85 c0                	test   %eax,%eax
  413c9b:	74 2b                	je     413cc8 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x90>
	      return __format::to_chars(__b, __e, __v, __fmt);
  413c9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413ca1:	48 8b 40 10          	mov    0x10(%rax),%rax
  413ca5:	8b 10                	mov    (%rax),%edx
  413ca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413cab:	48 8b 40 08          	mov    0x8(%rax),%rax
  413caf:	66 0f 6f 00          	movdqa (%rax),%xmm0
  413cb3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  413cb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413cbb:	48 89 ce             	mov    %rcx,%rsi
  413cbe:	48 89 c7             	mov    %rax,%rdi
  413cc1:	e8 2a 05 ff ff       	call   4041f0 <_ZSt8to_charsPcS_DF128_St12chars_format@plt>
  413cc6:	eb 20                	jmp    413ce8 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb0>
	      return __format::to_chars(__b, __e, __v);
  413cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413ccc:	48 8b 40 08          	mov    0x8(%rax),%rax
  413cd0:	66 0f 6f 00          	movdqa (%rax),%xmm0
  413cd4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413cd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413cdc:	48 89 d6             	mov    %rdx,%rsi
  413cdf:	48 89 c7             	mov    %rax,%rdi
  413ce2:	e8 09 07 ff ff       	call   4043f0 <_ZSt8to_charsPcS_DF128_@plt>
  413ce7:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  413ce8:	c9                   	leave
  413ce9:	c3                   	ret

0000000000413cea <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  413cea:	55                   	push   %rbp
  413ceb:	48 89 e5             	mov    %rsp,%rbp
  413cee:	53                   	push   %rbx
  413cef:	48 83 ec 28          	sub    $0x28,%rsp
  413cf3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  413cf7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  413cfb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  413cff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413d03:	48 8b 00             	mov    (%rax),%rax
  413d06:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413d0a:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  413d0e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  413d12:	48 01 ca             	add    %rcx,%rdx
  413d15:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  413d19:	48 83 c1 01          	add    $0x1,%rcx
  413d1d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  413d21:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  413d25:	48 89 ce             	mov    %rcx,%rsi
  413d28:	48 89 c7             	mov    %rax,%rdi
  413d2b:	e8 08 ff ff ff       	call   413c38 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  413d30:	48 89 03             	mov    %rax,(%rbx)
  413d33:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  413d37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413d3b:	48 8b 40 08          	mov    0x8(%rax),%rax
  413d3f:	8b 40 08             	mov    0x8(%rax),%eax
  413d42:	85 c0                	test   %eax,%eax
  413d44:	75 11                	jne    413d57 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  413d46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413d4a:	48 8b 40 08          	mov    0x8(%rax),%rax
  413d4e:	48 8b 00             	mov    (%rax),%rax
  413d51:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  413d55:	eb 05                	jmp    413d5c <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  413d57:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  413d5c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413d60:	c9                   	leave
  413d61:	c3                   	ret

0000000000413d62 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  413d62:	55                   	push   %rbp
  413d63:	48 89 e5             	mov    %rsp,%rbp
  413d66:	53                   	push   %rbx
  413d67:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
  413d6e:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  413d75:	0f 29 85 80 fd ff ff 	movaps %xmm0,-0x280(%rbp)
  413d7c:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
	  std::string __dynbuf;
  413d83:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413d8a:	48 89 c7             	mov    %rax,%rdi
  413d8d:	e8 52 0d ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  413d92:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  413d99:	00 00 00 00
  413d9d:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  413da4:	00 00 00 00
	  size_t __prec = 6;
  413da8:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  413daf:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  413db3:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413dba:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413dbe:	83 e0 06             	and    $0x6,%eax
  413dc1:	84 c0                	test   %al,%al
  413dc3:	0f 95 c0             	setne  %al
  413dc6:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  413dcc:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  413dd3:	84 c0                	test   %al,%al
  413dd5:	74 20                	je     413df7 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x95>
	    __prec = _M_spec._M_get_precision(__fc);
  413dd7:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413dde:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  413de5:	48 89 d6             	mov    %rdx,%rsi
  413de8:	48 89 c7             	mov    %rax,%rdi
  413deb:	e8 b0 1c 00 00       	call   415aa0 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  413df0:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  413df7:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  413dfe:	48 83 c0 01          	add    $0x1,%rax
  413e02:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  413e06:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  413e0d:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  413e11:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  413e15:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  413e1c:	00 00 00
	  bool __upper = false;
  413e1f:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  413e23:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  413e27:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  413e2b:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413e32:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413e36:	c0 e8 03             	shr    $0x3,%al
  413e39:	83 e0 0f             	and    $0xf,%eax
  413e3c:	0f b6 c0             	movzbl %al,%eax
  413e3f:	89 c0                	mov    %eax,%eax
  413e41:	48 8b 04 c5 e0 e4 41 	mov    0x41e4e0(,%rax,8),%rax
  413e48:	00
  413e49:	ff e0                	jmp    *%rax
	      __upper = true;
  413e4b:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  413e4f:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  413e53:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413e5a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413e5e:	83 e0 78             	and    $0x78,%eax
  413e61:	3c 10                	cmp    $0x10,%al
  413e63:	74 04                	je     413e69 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x107>
		__expc = 'p';
  413e65:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  413e69:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  413e70:	00 00 00
	      break;
  413e73:	eb 67                	jmp    413edc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  413e75:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  413e79:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  413e7d:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  413e84:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  413e8b:	00 00 00
	      break;
  413e8e:	eb 4c                	jmp    413edc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  413e90:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  413e94:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  413e9b:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  413ea2:	00 00 00
	      break;
  413ea5:	eb 35                	jmp    413edc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  413ea7:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  413eab:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  413eaf:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  413eb3:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  413eba:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  413ec1:	00 00 00
	      break;
  413ec4:	eb 16                	jmp    413edc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      if (__use_prec)
  413ec6:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  413ecd:	84 c0                	test   %al,%al
  413ecf:	74 0a                	je     413edb <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x179>
		__fmt = chars_format::general;
  413ed1:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  413ed8:	00 00 00
	      break;
  413edb:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  413edc:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  413ee3:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  413eea:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  413ef1:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  413ef8:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  413eff:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  413f06:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  413f0d:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  413f14:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  413f18:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  413f1c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  413f23:	48 89 ce             	mov    %rcx,%rsi
  413f26:	48 89 c7             	mov    %rax,%rdi
  413f29:	e8 0a fd ff ff       	call   413c38 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  413f2e:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  413f35:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  413f3c:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  413f42:	83 f8 4b             	cmp    $0x4b,%eax
  413f45:	0f 94 c0             	sete   %al
  413f48:	0f b6 c0             	movzbl %al,%eax
  413f4b:	48 85 c0             	test   %rax,%rax
  413f4e:	0f 84 13 01 00 00    	je     414067 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x305>
	      size_t __guess = 8 + __prec;
  413f54:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  413f5b:	48 83 c0 08          	add    $0x8,%rax
  413f5f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  413f63:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  413f69:	83 f8 02             	cmp    $0x2,%eax
  413f6c:	75 08                	jne    413f76 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x214>
		    __guess += numeric_limits<_Fp>::max_exponent10;
  413f6e:	48 81 45 d0 44 13 00 	addq   $0x1344,-0x30(%rbp)
  413f75:	00
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  413f76:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  413f7d:	00
  413f7e:	77 08                	ja     413f88 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
		__guess = sizeof(__buf) * 2;
  413f80:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  413f87:	00
	      __dynbuf.reserve(__guess);
  413f88:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  413f8c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413f93:	48 89 d6             	mov    %rdx,%rsi
  413f96:	48 89 c7             	mov    %rax,%rdi
  413f99:	e8 08 73 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  413f9e:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  413fa5:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  413fac:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  413fb3:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  413fba:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413fc1:	48 89 c7             	mov    %rax,%rdi
  413fc4:	e8 af 72 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  413fc9:	48 01 c0             	add    %rax,%rax
  413fcc:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  413fd3:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  413fda:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  413fe1:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  413fe8:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  413fef:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  413ff6:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  413ffd:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414004:	48 89 ce             	mov    %rcx,%rsi
  414007:	48 89 c7             	mov    %rax,%rdi
  41400a:	e8 13 41 00 00       	call   418122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  41400f:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  414010:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414017:	48 89 c7             	mov    %rax,%rdi
  41401a:	e8 8b 67 ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  41401f:	48 83 c0 01          	add    $0x1,%rax
  414023:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  414027:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41402e:	48 89 c7             	mov    %rax,%rdi
  414031:	e8 74 67 ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  414036:	48 89 c3             	mov    %rax,%rbx
  414039:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414040:	48 89 c7             	mov    %rax,%rdi
  414043:	e8 06 0d ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414048:	48 01 d8             	add    %rbx,%rax
  41404b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  41404f:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  414055:	83 f8 4b             	cmp    $0x4b,%eax
  414058:	0f 94 c0             	sete   %al
  41405b:	0f b6 c0             	movzbl %al,%eax
  41405e:	48 85 c0             	test   %rax,%rax
  414061:	0f 85 37 ff ff ff    	jne    413f9e <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x23c>
	  if (__upper)
  414067:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  41406b:	74 35                	je     4140a2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x340>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  41406d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414071:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  414075:	eb 1e                	jmp    414095 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x333>
		*__p = std::toupper(*__p);
  414077:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41407b:	0f b6 00             	movzbl (%rax),%eax
  41407e:	0f be c0             	movsbl %al,%eax
  414081:	89 c7                	mov    %eax,%edi
  414083:	e8 98 03 ff ff       	call   404420 <toupper@plt>
  414088:	89 c2                	mov    %eax,%edx
  41408a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41408e:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  414090:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  414095:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  41409c:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  4140a0:	75 d5                	jne    414077 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
	  bool __have_sign = true;
  4140a2:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  4140a6:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  4140ad:	ff
  4140ae:	0f 50 c0             	movmskps %xmm0,%eax
  4140b1:	83 e0 08             	and    $0x8,%eax
  4140b4:	85 c0                	test   %eax,%eax
  4140b6:	75 42                	jne    4140fa <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
	      if (_M_spec._M_sign == _Sign_plus)
  4140b8:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4140bf:	0f b6 00             	movzbl (%rax),%eax
  4140c2:	83 e0 0c             	and    $0xc,%eax
  4140c5:	3c 04                	cmp    $0x4,%al
  4140c7:	75 0e                	jne    4140d7 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x375>
		*--__start = '+';
  4140c9:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  4140ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4140d2:	c6 00 2b             	movb   $0x2b,(%rax)
  4140d5:	eb 23                	jmp    4140fa <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
	      else if (_M_spec._M_sign == _Sign_space)
  4140d7:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4140de:	0f b6 00             	movzbl (%rax),%eax
  4140e1:	83 e0 0c             	and    $0xc,%eax
  4140e4:	3c 0c                	cmp    $0xc,%al
  4140e6:	75 0e                	jne    4140f6 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x394>
		*--__start = ' ';
  4140e8:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  4140ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4140f1:	c6 00 20             	movb   $0x20,(%rax)
  4140f4:	eb 04                	jmp    4140fa <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
		__have_sign = false;
  4140f6:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  4140fa:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  414101:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  414105:	48 89 c2             	mov    %rax,%rdx
  414108:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41410c:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  414113:	48 89 ce             	mov    %rcx,%rsi
  414116:	48 89 c7             	mov    %rax,%rdi
  414119:	e8 8c 33 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  41411e:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  414125:	0f b6 00             	movzbl (%rax),%eax
  414128:	83 e0 10             	and    $0x10,%eax
  41412b:	84 c0                	test   %al,%al
  41412d:	0f 84 63 04 00 00    	je     414596 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
  414133:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  41413a:	ff
  41413b:	66 0f 6f 0d ed 73 00 	movdqa 0x73ed(%rip),%xmm1        # 41b530 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  414142:	00
  414143:	66 0f db c1          	pand   %xmm1,%xmm0
  414147:	bb 01 00 00 00       	mov    $0x1,%ebx
  41414c:	66 0f 6f 0d ec 73 00 	movdqa 0x73ec(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  414153:	00
  414154:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  41415b:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  414162:	ff
  414163:	e8 d8 01 ff ff       	call   404340 <__unordtf2@plt>
  414168:	48 85 c0             	test   %rax,%rax
  41416b:	75 1f                	jne    41418c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x42a>
  41416d:	66 0f 6f 0d cb 73 00 	movdqa 0x73cb(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  414174:	00
  414175:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  41417c:	ff
  41417d:	e8 9e ff fe ff       	call   404120 <__gttf2@plt>
  414182:	48 85 c0             	test   %rax,%rax
  414185:	7f 05                	jg     41418c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x42a>
  414187:	bb 00 00 00 00       	mov    $0x0,%ebx
  41418c:	89 d8                	mov    %ebx,%eax
  41418e:	83 f0 01             	xor    $0x1,%eax
  414191:	0f b6 c0             	movzbl %al,%eax
  414194:	85 c0                	test   %eax,%eax
  414196:	0f 84 fa 03 00 00    	je     414596 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
	      string_view __s = __narrow_str;
  41419c:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4141a3:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4141aa:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  4141b1:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  4141b8:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  4141bf:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  4141c0:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4141c7:	ba 00 00 00 00       	mov    $0x0,%edx
  4141cc:	be 2e 00 00 00       	mov    $0x2e,%esi
  4141d1:	48 89 c7             	mov    %rax,%rdi
  4141d4:	e8 4b 20 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4141d9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  4141dd:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  4141e2:	0f 84 a5 00 00 00    	je     41428d <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x52b>
		  __p = __s.find(__expc, __d + 1);
  4141e8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4141ec:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4141f0:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4141f4:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4141fb:	89 ce                	mov    %ecx,%esi
  4141fd:	48 89 c7             	mov    %rax,%rdi
  414200:	e8 1f 20 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  414205:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  414209:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  41420e:	75 13                	jne    414223 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4c1>
		    __p = __s.size();
  414210:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414217:	48 89 c7             	mov    %rax,%rdi
  41421a:	e8 b5 1a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41421f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  414223:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  414227:	0f 84 af 00 00 00    	je     4142dc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
		      if (__s[__have_sign] != '0')
  41422d:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  414231:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414238:	48 89 d6             	mov    %rdx,%rsi
  41423b:	48 89 c7             	mov    %rax,%rdi
  41423e:	e8 a3 1a ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  414243:	0f b6 00             	movzbl (%rax),%eax
  414246:	3c 30                	cmp    $0x30,%al
  414248:	0f 95 c0             	setne  %al
  41424b:	84 c0                	test   %al,%al
  41424d:	74 15                	je     414264 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x502>
			__sigfigs = __p - __have_sign - 1;
  41424f:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  414253:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  414257:	48 29 c2             	sub    %rax,%rdx
  41425a:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  41425e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  414262:	eb 78                	jmp    4142dc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  414264:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414268:	48 8d 50 01          	lea    0x1(%rax),%rdx
  41426c:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414273:	be 30 00 00 00       	mov    $0x30,%esi
  414278:	48 89 c7             	mov    %rax,%rdi
  41427b:	e8 74 0a 00 00       	call   414cf4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  414280:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  414284:	48 29 c2             	sub    %rax,%rdx
  414287:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  41428b:	eb 4f                	jmp    4142dc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
		  __p = __s.find(__expc); // Find the exponent, if present.
  41428d:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  414291:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414298:	ba 00 00 00 00       	mov    $0x0,%edx
  41429d:	89 ce                	mov    %ecx,%esi
  41429f:	48 89 c7             	mov    %rax,%rdi
  4142a2:	e8 7d 1f ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4142a7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  4142ab:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  4142b0:	75 13                	jne    4142c5 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x563>
		    __p = __s.size();
  4142b2:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4142b9:	48 89 c7             	mov    %rax,%rdi
  4142bc:	e8 13 1a ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4142c1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  4142c5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4142c9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  4142cd:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  4142d1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4142d5:	48 29 c2             	sub    %rax,%rdx
  4142d8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  4142dc:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  4142e0:	74 1b                	je     4142fd <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59b>
  4142e2:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  4142e9:	48 85 c0             	test   %rax,%rax
  4142ec:	74 0f                	je     4142fd <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59b>
		  __z = __prec - __sigfigs;
  4142ee:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  4142f5:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  4142f9:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  4142fd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414301:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  414305:	0f 94 c0             	sete   %al
  414308:	0f b6 d0             	movzbl %al,%edx
  41430b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41430f:	48 01 d0             	add    %rdx,%rax
  414312:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  414316:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  41431b:	0f 84 75 02 00 00    	je     414596 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  414321:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414328:	48 89 c7             	mov    %rax,%rdi
  41432b:	e8 9e ac ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  414330:	84 c0                	test   %al,%al
  414332:	74 1e                	je     414352 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f0>
  414334:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  41433b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41433f:	48 29 c2             	sub    %rax,%rdx
  414342:	48 89 d0             	mov    %rdx,%rax
  414345:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  414349:	72 07                	jb     414352 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f0>
  41434b:	b8 01 00 00 00       	mov    $0x1,%eax
  414350:	eb 05                	jmp    414357 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f5>
  414352:	b8 00 00 00 00       	mov    $0x0,%eax
  414357:	84 c0                	test   %al,%al
  414359:	0f 84 d7 00 00 00    	je     414436 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6d4>
					__s.size() - __p);
  41435f:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414366:	48 89 c7             	mov    %rax,%rdi
  414369:	e8 66 19 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  41436e:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  414372:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  414376:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41437a:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  41437e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  414382:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  414386:	48 01 d1             	add    %rdx,%rcx
  414389:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41438d:	48 01 d1             	add    %rdx,%rcx
  414390:	48 89 c2             	mov    %rax,%rdx
  414393:	48 89 cf             	mov    %rcx,%rdi
  414396:	e8 25 00 ff ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  41439b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41439f:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4143a3:	75 16                	jne    4143bb <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x659>
			__start[__p++] = '.';
  4143a5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4143a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4143ad:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4143b1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4143b5:	48 01 c8             	add    %rcx,%rax
  4143b8:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  4143bb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4143bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4143c3:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4143c7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4143cb:	48 89 c2             	mov    %rax,%rdx
  4143ce:	be 30 00 00 00       	mov    $0x30,%esi
  4143d3:	48 89 cf             	mov    %rcx,%rdi
  4143d6:	e8 65 fd fe ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  4143db:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4143e2:	48 89 c7             	mov    %rax,%rdi
  4143e5:	e8 ae 30 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  4143ea:	48 89 c3             	mov    %rax,%rbx
  4143ed:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4143f4:	48 89 c7             	mov    %rax,%rdi
  4143f7:	e8 d8 18 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4143fc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  414400:	48 01 c2             	add    %rax,%rdx
  414403:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  41440a:	48 89 de             	mov    %rbx,%rsi
  41440d:	48 89 c7             	mov    %rax,%rdi
  414410:	e8 95 30 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  414415:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  41441c:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  414423:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  41442a:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  414431:	e9 60 01 00 00       	jmp    414596 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
		      __dynbuf.reserve(__s.size() + __extras);
  414436:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41443d:	48 89 c7             	mov    %rax,%rdi
  414440:	e8 8f 18 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414445:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  414449:	48 01 c2             	add    %rax,%rdx
  41444c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414453:	48 89 d6             	mov    %rdx,%rsi
  414456:	48 89 c7             	mov    %rax,%rdi
  414459:	e8 48 6e ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  41445e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414465:	48 89 c7             	mov    %rax,%rdi
  414468:	e8 61 ab ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41446d:	84 c0                	test   %al,%al
  41446f:	0f 84 c5 00 00 00    	je     41453a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7d8>
			  __dynbuf = __s.substr(0, __p);
  414475:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  414479:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414480:	be 00 00 00 00       	mov    $0x0,%esi
  414485:	48 89 c7             	mov    %rax,%rdi
  414488:	e8 6d 75 ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  41448d:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  414494:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  41449b:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  4144a2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4144a9:	48 89 d6             	mov    %rdx,%rsi
  4144ac:	48 89 c7             	mov    %rax,%rdi
  4144af:	e8 9e 08 00 00       	call   414d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  4144b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4144b8:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4144bc:	75 14                	jne    4144d2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x770>
			    __dynbuf += '.';
  4144be:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4144c5:	be 2e 00 00 00       	mov    $0x2e,%esi
  4144ca:	48 89 c7             	mov    %rax,%rdi
  4144cd:	e8 a6 08 00 00       	call   414d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  4144d2:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  4144d7:	74 1b                	je     4144f4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x792>
			    __dynbuf.append(__z, '0');
  4144d9:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4144dd:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4144e4:	ba 30 00 00 00       	mov    $0x30,%edx
  4144e9:	48 89 ce             	mov    %rcx,%rsi
  4144ec:	48 89 c7             	mov    %rax,%rdi
  4144ef:	e8 ae 08 00 00       	call   414da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  4144f4:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  4144f8:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4144ff:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  414506:	48 89 ce             	mov    %rcx,%rsi
  414509:	48 89 c7             	mov    %rax,%rdi
  41450c:	e8 e9 74 ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  414511:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  414518:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  41451f:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  414526:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41452d:	48 89 d6             	mov    %rdx,%rsi
  414530:	48 89 c7             	mov    %rax,%rdi
  414533:	e8 b4 08 00 00       	call   414dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  414538:	eb 3f                	jmp    414579 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x817>
			  __dynbuf.insert(__p, __extras, '0');
  41453a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41453e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  414542:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414549:	b9 30 00 00 00       	mov    $0x30,%ecx
  41454e:	48 89 c7             	mov    %rax,%rdi
  414551:	e8 f0 08 00 00       	call   414e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  414556:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41455a:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41455e:	75 19                	jne    414579 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x817>
			    __dynbuf[__p] = '.';
  414560:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  414564:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41456b:	48 89 d6             	mov    %rdx,%rsi
  41456e:	48 89 c7             	mov    %rax,%rdi
  414571:	e8 2a 09 00 00       	call   414ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  414576:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  414579:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414580:	48 89 c7             	mov    %rax,%rdi
  414583:	e8 58 3a ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  414588:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  41458f:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  414596:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41459d:	48 89 c7             	mov    %rax,%rdi
  4145a0:	e8 3f 05 ff ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  4145a5:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  4145ac:	00 00 00 00
  4145b0:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  4145b7:	00 00 00 00
	    __str = __narrow_str;
  4145bb:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4145c2:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4145c9:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  4145d0:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  4145d7:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4145de:	0f b6 00             	movzbl (%rax),%eax
  4145e1:	83 e0 20             	and    $0x20,%eax
  4145e4:	84 c0                	test   %al,%al
  4145e6:	0f 84 24 01 00 00    	je     414710 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
  4145ec:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  4145f3:	ff
  4145f4:	66 0f 6f 0d 34 6f 00 	movdqa 0x6f34(%rip),%xmm1        # 41b530 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  4145fb:	00
  4145fc:	66 0f db c1          	pand   %xmm1,%xmm0
  414600:	bb 01 00 00 00       	mov    $0x1,%ebx
  414605:	66 0f 6f 0d 33 6f 00 	movdqa 0x6f33(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  41460c:	00
  41460d:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  414614:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  41461b:	ff
  41461c:	e8 1f fd fe ff       	call   404340 <__unordtf2@plt>
  414621:	48 85 c0             	test   %rax,%rax
  414624:	75 1f                	jne    414645 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e3>
  414626:	66 0f 6f 0d 12 6f 00 	movdqa 0x6f12(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  41462d:	00
  41462e:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  414635:	ff
  414636:	e8 e5 fa fe ff       	call   404120 <__gttf2@plt>
  41463b:	48 85 c0             	test   %rax,%rax
  41463e:	7f 05                	jg     414645 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e3>
  414640:	bb 00 00 00 00       	mov    $0x0,%ebx
  414645:	89 d8                	mov    %ebx,%eax
  414647:	83 f0 01             	xor    $0x1,%eax
  41464a:	0f b6 c0             	movzbl %al,%eax
  41464d:	85 c0                	test   %eax,%eax
  41464f:	0f 84 bb 00 00 00    	je     414710 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  414655:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41465c:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  414663:	48 89 d6             	mov    %rdx,%rsi
  414666:	48 89 c7             	mov    %rax,%rdi
  414669:	e8 1e 0b 00 00       	call   41518c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  41466e:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  414672:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  414679:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  414680:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  414687:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  41468e:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  414695:	4d 89 c1             	mov    %r8,%r9
  414698:	41 89 c8             	mov    %ecx,%r8d
  41469b:	48 89 d1             	mov    %rdx,%rcx
  41469e:	48 89 c2             	mov    %rax,%rdx
  4146a1:	e8 b4 15 00 00       	call   415c5a <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  4146a6:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4146ad:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4146b4:	48 89 d6             	mov    %rdx,%rsi
  4146b7:	48 89 c7             	mov    %rax,%rdi
  4146ba:	e8 13 0b 00 00       	call   4151d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  4146bf:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4146c6:	48 89 c7             	mov    %rax,%rdi
  4146c9:	e8 64 2e ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4146ce:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4146d5:	48 89 c7             	mov    %rax,%rdi
  4146d8:	e8 53 fc fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  4146dd:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4146e4:	48 89 c7             	mov    %rax,%rdi
  4146e7:	e8 e2 a8 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4146ec:	83 f0 01             	xor    $0x1,%eax
  4146ef:	84 c0                	test   %al,%al
  4146f1:	74 1d                	je     414710 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
		__str = __wstr;
  4146f3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4146fa:	48 89 c7             	mov    %rax,%rdi
  4146fd:	e8 de 38 ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  414702:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  414709:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  414710:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  414717:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  41471e:	48 89 d6             	mov    %rdx,%rsi
  414721:	48 89 c7             	mov    %rax,%rdi
  414724:	e8 cd 17 00 00       	call   415ef6 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  414729:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  41472d:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  414734:	48 89 c7             	mov    %rax,%rdi
  414737:	e8 98 15 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41473c:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  414740:	0f 93 c0             	setae  %al
  414743:	84 c0                	test   %al,%al
  414745:	74 36                	je     41477d <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa1b>
	    return __format::__write(__fc.out(), __str);
  414747:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  41474e:	48 89 c7             	mov    %rax,%rdi
  414751:	e8 72 71 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  414756:	48 89 c1             	mov    %rax,%rcx
  414759:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  414760:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  414767:	48 89 d6             	mov    %rdx,%rsi
  41476a:	48 89 c2             	mov    %rax,%rdx
  41476d:	48 89 cf             	mov    %rcx,%rdi
  414770:	e8 ad 9f ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  414775:	48 89 c3             	mov    %rax,%rbx
  414778:	e9 c9 01 00 00       	jmp    414946 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbe4>
	  char32_t __fill_char = _M_spec._M_fill;
  41477d:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  414784:	8b 40 08             	mov    0x8(%rax),%eax
  414787:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  41478a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  414791:	0f b6 00             	movzbl (%rax),%eax
  414794:	83 e0 03             	and    $0x3,%eax
  414797:	0f b6 c0             	movzbl %al,%eax
  41479a:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  41479d:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4147a4:	48 89 c7             	mov    %rax,%rdi
  4147a7:	e8 28 15 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4147ac:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4147b0:	48 29 c2             	sub    %rax,%rdx
  4147b3:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  4147b7:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4147be:	48 89 c7             	mov    %rax,%rdi
  4147c1:	e8 02 71 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4147c6:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  4147cd:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  4147d1:	0f 85 32 01 00 00    	jne    414909 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
	      __align = _Align_right;
  4147d7:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  4147de:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4147e5:	0f b6 00             	movzbl (%rax),%eax
  4147e8:	83 e0 40             	and    $0x40,%eax
  4147eb:	84 c0                	test   %al,%al
  4147ed:	0f 84 0f 01 00 00    	je     414902 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba0>
  4147f3:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  4147fa:	ff
  4147fb:	66 0f 6f 0d 2d 6d 00 	movdqa 0x6d2d(%rip),%xmm1        # 41b530 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  414802:	00
  414803:	66 0f db c1          	pand   %xmm1,%xmm0
  414807:	bb 01 00 00 00       	mov    $0x1,%ebx
  41480c:	66 0f 6f 0d 2c 6d 00 	movdqa 0x6d2c(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  414813:	00
  414814:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  41481b:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  414822:	ff
  414823:	e8 18 fb fe ff       	call   404340 <__unordtf2@plt>
  414828:	48 85 c0             	test   %rax,%rax
  41482b:	75 1f                	jne    41484c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaea>
  41482d:	66 0f 6f 0d 0b 6d 00 	movdqa 0x6d0b(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  414834:	00
  414835:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  41483c:	ff
  41483d:	e8 de f8 fe ff       	call   404120 <__gttf2@plt>
  414842:	48 85 c0             	test   %rax,%rax
  414845:	7f 05                	jg     41484c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaea>
  414847:	bb 00 00 00 00       	mov    $0x0,%ebx
  41484c:	89 d8                	mov    %ebx,%eax
  41484e:	83 f0 01             	xor    $0x1,%eax
  414851:	0f b6 c0             	movzbl %al,%eax
  414854:	85 c0                	test   %eax,%eax
  414856:	0f 84 a6 00 00 00    	je     414902 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba0>
		  __fill_char = _CharT('0');
  41485c:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  414863:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  41486a:	be 00 00 00 00       	mov    $0x0,%esi
  41486f:	48 89 c7             	mov    %rax,%rdi
  414872:	e8 6f 14 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  414877:	0f b6 00             	movzbl (%rax),%eax
  41487a:	0f be c0             	movsbl %al,%eax
  41487d:	89 c7                	mov    %eax,%edi
  41487f:	e8 8e 09 ff ff       	call   405212 <_ZNSt8__format11__is_xdigitEc>
  414884:	83 f0 01             	xor    $0x1,%eax
  414887:	84 c0                	test   %al,%al
  414889:	74 7e                	je     414909 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
		      *__out++ = __str[0];
  41488b:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  414892:	be 00 00 00 00       	mov    $0x0,%esi
  414897:	48 89 c7             	mov    %rax,%rdi
  41489a:	e8 47 14 ff ff       	call   405ce6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41489f:	0f b6 00             	movzbl (%rax),%eax
  4148a2:	0f be c0             	movsbl %al,%eax
  4148a5:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  4148ac:	00 00 00
      operator++(int) { return *this; }
  4148af:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  4148b6:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4148bd:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4148c4:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4148cb:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4148d1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4148d8:	48 8b 00             	mov    (%rax),%rax
  4148db:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4148e2:	89 d6                	mov    %edx,%esi
  4148e4:	48 89 c7             	mov    %rax,%rdi
  4148e7:	e8 3c 30 00 00       	call   417928 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  4148ec:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4148f3:	be 01 00 00 00       	mov    $0x1,%esi
  4148f8:	48 89 c7             	mov    %rax,%rdi
  4148fb:	e8 76 16 00 00       	call   415f76 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  414900:	eb 07                	jmp    414909 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
		__fill_char = _CharT(' ');
  414902:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  414909:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  414910:	48 89 c7             	mov    %rax,%rdi
  414913:	e8 9b 50 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  414918:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  41491c:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  414920:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  414923:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  41492a:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  414931:	48 8b 00             	mov    (%rax),%rax
  414934:	45 89 c1             	mov    %r8d,%r9d
  414937:	49 89 f8             	mov    %rdi,%r8
  41493a:	48 89 c7             	mov    %rax,%rdi
  41493d:	e8 f1 18 00 00       	call   416233 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  414942:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  414945:	90                   	nop
	}
  414946:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41494d:	48 89 c7             	mov    %rax,%rdi
  414950:	e8 dd 2b ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414955:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41495c:	48 89 c7             	mov    %rax,%rdi
  41495f:	e8 ce 2b ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414964:	48 89 d8             	mov    %rbx,%rax
  414967:	eb 45                	jmp    4149ae <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc4c>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  414969:	48 89 c3             	mov    %rax,%rbx
  41496c:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  414973:	48 89 c7             	mov    %rax,%rdi
  414976:	e8 b5 f9 fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  41497b:	eb 03                	jmp    414980 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc1e>
	}
  41497d:	48 89 c3             	mov    %rax,%rbx
  414980:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  414987:	48 89 c7             	mov    %rax,%rdi
  41498a:	e8 a3 2b ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41498f:	eb 03                	jmp    414994 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc32>
  414991:	48 89 c3             	mov    %rax,%rbx
  414994:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41499b:	48 89 c7             	mov    %rax,%rdi
  41499e:	e8 8f 2b ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4149a3:	48 89 d8             	mov    %rbx,%rax
  4149a6:	48 89 c7             	mov    %rax,%rdi
  4149a9:	e8 62 fa fe ff       	call   404410 <_Unwind_Resume@plt>
  4149ae:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4149b2:	c9                   	leave
  4149b3:	c3                   	ret

00000000004149b4 <_ZNKSt6ranges9__copy_fnclIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES7_NSt8__format10_Sink_iterIcEEEENS_13in_out_resultIT_T1_EESC_T0_SD_>:
      operator()(_Iter __first, _Sent __last, _Out __result) const
  4149b4:	55                   	push   %rbp
  4149b5:	48 89 e5             	mov    %rsp,%rbp
  4149b8:	41 54                	push   %r12
  4149ba:	53                   	push   %rbx
  4149bb:	48 83 ec 20          	sub    $0x20,%rsp
  4149bf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4149c3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4149c7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4149cb:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
					     std::move(__result));
  4149cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4149d3:	48 89 c7             	mov    %rax,%rdi
  4149d6:	e8 d8 4f ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4149db:	49 89 c4             	mov    %rax,%r12
					     std::move(__last),
  4149de:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4149e2:	48 89 c7             	mov    %rax,%rdi
  4149e5:	e8 0b 21 00 00       	call   416af5 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>
  4149ea:	48 89 c3             	mov    %rax,%rbx
	return ranges::__copy_or_move<false>(std::move(__first),
  4149ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4149f1:	48 89 c7             	mov    %rax,%rdi
  4149f4:	e8 fc 20 00 00       	call   416af5 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>
  4149f9:	49 8b 14 24          	mov    (%r12),%rdx
  4149fd:	48 8b 0b             	mov    (%rbx),%rcx
  414a00:	48 8b 00             	mov    (%rax),%rax
  414a03:	48 89 ce             	mov    %rcx,%rsi
  414a06:	48 89 c7             	mov    %rax,%rdi
  414a09:	e8 f5 20 00 00       	call   416b03 <_ZNSt6ranges14__copy_or_moveILb0EN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES6_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESG_EESE_T1_SF_>
      }
  414a0e:	48 83 c4 20          	add    $0x20,%rsp
  414a12:	5b                   	pop    %rbx
  414a13:	41 5c                	pop    %r12
  414a15:	5d                   	pop    %rbp
  414a16:	c3                   	ret
  414a17:	90                   	nop

0000000000414a18 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_EN11_TerminatorD1Ev>:
#if __cpp_lib_is_constant_evaluated
      if (std::__is_constant_evaluated() && __n > size())
	traits_type::assign(__p + size(), __n - size(), _CharT());
#endif
      struct _Terminator {
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  414a18:	55                   	push   %rbp
  414a19:	48 89 e5             	mov    %rsp,%rbp
  414a1c:	48 83 ec 10          	sub    $0x10,%rsp
  414a20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414a24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414a28:	48 8b 00             	mov    (%rax),%rax
  414a2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  414a2f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  414a33:	48 89 d6             	mov    %rdx,%rsi
  414a36:	48 89 c7             	mov    %rax,%rdi
  414a39:	e8 a8 2a ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  414a3e:	90                   	nop
  414a3f:	c9                   	leave
  414a40:	c3                   	ret
  414a41:	90                   	nop

0000000000414a42 <_ZZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmENKUlT_T0_E_clIPcmEEDaS8_S9_>:
					    [](auto, auto __n2) {
  414a42:	55                   	push   %rbp
  414a43:	48 89 e5             	mov    %rsp,%rbp
  414a46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414a4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414a4e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
					      return __n2;
  414a52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
					    [](auto, auto __n2) {
  414a56:	5d                   	pop    %rbp
  414a57:	c3                   	ret

0000000000414a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_>:
    basic_string<_CharT, _Traits, _Alloc>::
  414a58:	55                   	push   %rbp
  414a59:	48 89 e5             	mov    %rsp,%rbp
  414a5c:	53                   	push   %rbx
  414a5d:	48 83 ec 48          	sub    $0x48,%rsp
  414a61:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  414a65:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  414a69:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  414a6d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  414a71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414a75:	48 89 d6             	mov    %rdx,%rsi
  414a78:	48 89 c7             	mov    %rax,%rdi
  414a7b:	e8 26 68 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  414a80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414a84:	48 89 c7             	mov    %rax,%rdi
  414a87:	e8 48 2a ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  414a8c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  414a90:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  414a95:	84 c0                	test   %al,%al
  414a97:	74 19                	je     414ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5a>
  414a99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414a9d:	48 89 c7             	mov    %rax,%rdi
  414aa0:	e8 a9 02 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414aa5:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  414aa9:	73 07                	jae    414ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5a>
  414aab:	b8 01 00 00 00       	mov    $0x1,%eax
  414ab0:	eb 05                	jmp    414ab7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5f>
  414ab2:	b8 00 00 00 00       	mov    $0x0,%eax
  414ab7:	84 c0                	test   %al,%al
  414ab9:	74 39                	je     414af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  414abb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414abf:	48 89 c7             	mov    %rax,%rdi
  414ac2:	e8 87 02 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414ac7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  414acb:	48 89 d3             	mov    %rdx,%rbx
  414ace:	48 29 c3             	sub    %rax,%rbx
  414ad1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414ad5:	48 89 c7             	mov    %rax,%rdi
  414ad8:	e8 71 02 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414add:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  414ae1:	48 01 d0             	add    %rdx,%rax
  414ae4:	ba 00 00 00 00       	mov    $0x0,%edx
  414ae9:	48 89 de             	mov    %rbx,%rsi
  414aec:	48 89 c7             	mov    %rax,%rdi
  414aef:	e8 83 fe fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
	basic_string* _M_this;
	size_type _M_r;
      };
      _Terminator __term{this, 0};
  414af4:	66 0f ef c0          	pxor   %xmm0,%xmm0
  414af8:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  414afc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414b00:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  414b04:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  414b08:	48 89 c7             	mov    %rax,%rdi
  414b0b:	e8 89 20 00 00       	call   416b99 <_ZSt4moveIRZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmEUlT_T0_E_EONSt16remove_referenceIS9_E4typeEOS9_>
  414b10:	48 89 c1             	mov    %rax,%rcx
  414b13:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  414b17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414b1b:	48 89 c6             	mov    %rax,%rsi
  414b1e:	48 89 cf             	mov    %rcx,%rdi
  414b21:	e8 1c ff ff ff       	call   414a42 <_ZZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmENKUlT_T0_E_clIPcmEEDaS8_S9_>
  414b26:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#else
      static_assert(__gnu_cxx::__is_integer_nonstrict<decltype(__r)>::__value,
		    "resize_and_overwrite operation must return an integer");
#endif
      _GLIBCXX_DEBUG_ASSERT(__r >= 0 && __r <= __n);
      __term._M_r = size_type(__r);
  414b2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414b2e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  414b32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  414b36:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
	__builtin_unreachable();
    }
  414b3a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  414b3e:	48 89 c7             	mov    %rax,%rdi
  414b41:	e8 d2 fe ff ff       	call   414a18 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_EN11_TerminatorD1Ev>
  414b46:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414b4a:	c9                   	leave
  414b4b:	c3                   	ret

0000000000414b4c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEplEl>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
  414b4c:	55                   	push   %rbp
  414b4d:	48 89 e5             	mov    %rsp,%rbp
  414b50:	48 83 ec 20          	sub    $0x20,%rsp
  414b54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414b58:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current + __n); }
  414b5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414b60:	48 8b 10             	mov    (%rax),%rdx
  414b63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414b67:	48 01 d0             	add    %rdx,%rax
  414b6a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  414b6e:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  414b72:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  414b76:	48 89 d6             	mov    %rdx,%rsi
  414b79:	48 89 c7             	mov    %rax,%rdi
  414b7c:	e8 47 7c ff ff       	call   40c7c8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  414b81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414b85:	c9                   	leave
  414b86:	c3                   	ret
  414b87:	90                   	nop

0000000000414b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc>:
    basic_string<_CharT, _Traits, _Alloc>::
  414b88:	55                   	push   %rbp
  414b89:	48 89 e5             	mov    %rsp,%rbp
  414b8c:	48 83 ec 30          	sub    $0x30,%rsp
  414b90:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414b94:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414b98:	89 d0                	mov    %edx,%eax
  414b9a:	88 45 dc             	mov    %al,-0x24(%rbp)
      const size_type __size = this->size();
  414b9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414ba1:	48 89 c7             	mov    %rax,%rdi
  414ba4:	e8 a5 01 ff ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414ba9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__size < __n)
  414bad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414bb1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  414bb5:	73 20                	jae    414bd7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x4f>
	this->append(__n - __size, __c);
  414bb7:	0f be 55 dc          	movsbl -0x24(%rbp),%edx
  414bbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414bbf:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  414bc3:	48 89 c1             	mov    %rax,%rcx
  414bc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414bca:	48 89 ce             	mov    %rcx,%rsi
  414bcd:	48 89 c7             	mov    %rax,%rdi
  414bd0:	e8 cd 01 00 00       	call   414da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
    }
  414bd5:	eb 1d                	jmp    414bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x6c>
      else if (__n < __size)
  414bd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414bdb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  414bdf:	73 13                	jae    414bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x6c>
	this->_M_set_length(__n);
  414be1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  414be5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414be9:	48 89 d6             	mov    %rdx,%rsi
  414bec:	48 89 c7             	mov    %rax,%rdi
  414bef:	e8 f2 28 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
    }
  414bf4:	90                   	nop
  414bf5:	c9                   	leave
  414bf6:	c3                   	ret

0000000000414bf7 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414bf7:	55                   	push   %rbp
  414bf8:	48 89 e5             	mov    %rsp,%rbp
  414bfb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  414bfe:	89 75 f8             	mov    %esi,-0x8(%rbp)
  414c01:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
      else if (__sign == _Sign_plus)
  414c05:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  414c09:	75 09                	jne    414c14 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x1d>
	*__dest = '+';
  414c0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414c0f:	c6 00 2b             	movb   $0x2b,(%rax)
  414c12:	eb 14                	jmp    414c28 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x31>
      else if (__sign == _Sign_space)
  414c14:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  414c18:	75 09                	jne    414c23 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x2c>
	*__dest = ' ';
  414c1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414c1e:	c6 00 20             	movb   $0x20,(%rax)
  414c21:	eb 05                	jmp    414c28 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x31>
	++__dest;
  414c23:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  414c28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  414c2c:	5d                   	pop    %rbp
  414c2d:	c3                   	ret

0000000000414c2e <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414c2e:	55                   	push   %rbp
  414c2f:	48 89 e5             	mov    %rsp,%rbp
  414c32:	89 7d fc             	mov    %edi,-0x4(%rbp)
  414c35:	89 75 f8             	mov    %esi,-0x8(%rbp)
  414c38:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
      if (__i < 0)
  414c3c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  414c40:	79 09                	jns    414c4b <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x1d>
	*__dest = '-';
  414c42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414c46:	c6 00 2d             	movb   $0x2d,(%rax)
  414c49:	eb 23                	jmp    414c6e <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
      else if (__sign == _Sign_plus)
  414c4b:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  414c4f:	75 09                	jne    414c5a <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x2c>
	*__dest = '+';
  414c51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414c55:	c6 00 2b             	movb   $0x2b,(%rax)
  414c58:	eb 14                	jmp    414c6e <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
      else if (__sign == _Sign_space)
  414c5a:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  414c5e:	75 09                	jne    414c69 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x3b>
	*__dest = ' ';
  414c60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414c64:	c6 00 20             	movb   $0x20,(%rax)
  414c67:	eb 05                	jmp    414c6e <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
	++__dest;
  414c69:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  414c6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  414c72:	5d                   	pop    %rbp
  414c73:	c3                   	ret

0000000000414c74 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414c74:	55                   	push   %rbp
  414c75:	48 89 e5             	mov    %rsp,%rbp
  414c78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414c7c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  414c7f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__i < 0)
  414c83:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  414c88:	79 09                	jns    414c93 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x1f>
	*__dest = '-';
  414c8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414c8e:	c6 00 2d             	movb   $0x2d,(%rax)
  414c91:	eb 23                	jmp    414cb6 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
      else if (__sign == _Sign_plus)
  414c93:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  414c97:	75 09                	jne    414ca2 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x2e>
	*__dest = '+';
  414c99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414c9d:	c6 00 2b             	movb   $0x2b,(%rax)
  414ca0:	eb 14                	jmp    414cb6 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
      else if (__sign == _Sign_space)
  414ca2:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  414ca6:	75 09                	jne    414cb1 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x3d>
	*__dest = ' ';
  414ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414cac:	c6 00 20             	movb   $0x20,(%rax)
  414caf:	eb 05                	jmp    414cb6 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
	++__dest;
  414cb1:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
      return __dest;
  414cb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  414cba:	5d                   	pop    %rbp
  414cbb:	c3                   	ret

0000000000414cbc <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414cbc:	55                   	push   %rbp
  414cbd:	48 89 e5             	mov    %rsp,%rbp
  414cc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414cc4:	89 75 f4             	mov    %esi,-0xc(%rbp)
  414cc7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      else if (__sign == _Sign_plus)
  414ccb:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  414ccf:	75 09                	jne    414cda <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x1e>
	*__dest = '+';
  414cd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414cd5:	c6 00 2b             	movb   $0x2b,(%rax)
  414cd8:	eb 14                	jmp    414cee <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x32>
      else if (__sign == _Sign_space)
  414cda:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  414cde:	75 09                	jne    414ce9 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x2d>
	*__dest = ' ';
  414ce0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414ce4:	c6 00 20             	movb   $0x20,(%rax)
  414ce7:	eb 05                	jmp    414cee <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x32>
	++__dest;
  414ce9:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
      return __dest;
  414cee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  414cf2:	5d                   	pop    %rbp
  414cf3:	c3                   	ret

0000000000414cf4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
  414cf4:	55                   	push   %rbp
  414cf5:	48 89 e5             	mov    %rsp,%rbp
  414cf8:	48 83 ec 20          	sub    $0x20,%rsp
  414cfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414d00:	89 f0                	mov    %esi,%eax
  414d02:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  414d06:	88 45 f4             	mov    %al,-0xc(%rbp)
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->_M_len; ++__pos)
  414d09:	eb 30                	jmp    414d3b <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x47>
	if (!traits_type::eq(this->_M_str[__pos], __c))
  414d0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414d0f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  414d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414d17:	48 01 c2             	add    %rax,%rdx
  414d1a:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  414d1e:	48 89 c6             	mov    %rax,%rsi
  414d21:	48 89 d7             	mov    %rdx,%rdi
  414d24:	e8 f5 f9 fe ff       	call   40471e <_ZNSt11char_traitsIcE2eqERKcS2_>
  414d29:	83 f0 01             	xor    $0x1,%eax
  414d2c:	84 c0                	test   %al,%al
  414d2e:	74 06                	je     414d36 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x42>
	  return __pos;
  414d30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414d34:	eb 19                	jmp    414d4f <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x5b>
      for (; __pos < this->_M_len; ++__pos)
  414d36:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  414d3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414d3f:	48 8b 00             	mov    (%rax),%rax
  414d42:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  414d46:	72 c3                	jb     414d0b <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x17>
      return npos;
  414d48:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    }
  414d4f:	c9                   	leave
  414d50:	c3                   	ret
  414d51:	90                   	nop

0000000000414d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
       operator=(const _Tp& __svt)
  414d52:	55                   	push   %rbp
  414d53:	48 89 e5             	mov    %rsp,%rbp
  414d56:	48 83 ec 10          	sub    $0x10,%rsp
  414d5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414d5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
       { return this->assign(__svt); }
  414d62:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  414d66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414d6a:	48 89 d6             	mov    %rdx,%rsi
  414d6d:	48 89 c7             	mov    %rax,%rdi
  414d70:	e8 a9 1e 00 00       	call   416c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  414d75:	c9                   	leave
  414d76:	c3                   	ret
  414d77:	90                   	nop

0000000000414d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
      operator+=(_CharT __c)
  414d78:	55                   	push   %rbp
  414d79:	48 89 e5             	mov    %rsp,%rbp
  414d7c:	48 83 ec 10          	sub    $0x10,%rsp
  414d80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414d84:	89 f0                	mov    %esi,%eax
  414d86:	88 45 f4             	mov    %al,-0xc(%rbp)
	this->push_back(__c);
  414d89:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  414d8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414d91:	89 d6                	mov    %edx,%esi
  414d93:	48 89 c7             	mov    %rax,%rdi
  414d96:	e8 dd 1e 00 00       	call   416c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	return *this;
  414d9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  414d9f:	c9                   	leave
  414da0:	c3                   	ret
  414da1:	90                   	nop

0000000000414da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>:
      append(size_type __n, _CharT __c)
  414da2:	55                   	push   %rbp
  414da3:	48 89 e5             	mov    %rsp,%rbp
  414da6:	53                   	push   %rbx
  414da7:	48 83 ec 28          	sub    $0x28,%rsp
  414dab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414daf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414db3:	89 d0                	mov    %edx,%eax
  414db5:	88 45 dc             	mov    %al,-0x24(%rbp)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
  414db8:	0f be 5d dc          	movsbl -0x24(%rbp),%ebx
  414dbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414dc0:	48 89 c7             	mov    %rax,%rdi
  414dc3:	e8 86 ff fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414dc8:	48 89 c6             	mov    %rax,%rsi
  414dcb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  414dcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414dd3:	41 89 d8             	mov    %ebx,%r8d
  414dd6:	48 89 d1             	mov    %rdx,%rcx
  414dd9:	ba 00 00 00 00       	mov    $0x0,%edx
  414dde:	48 89 c7             	mov    %rax,%rdi
  414de1:	e8 32 1f 00 00       	call   416d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>
  414de6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414dea:	c9                   	leave
  414deb:	c3                   	ret

0000000000414dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
        append(const _Tp& __svt)
  414dec:	55                   	push   %rbp
  414ded:	48 89 e5             	mov    %rsp,%rbp
  414df0:	53                   	push   %rbx
  414df1:	48 83 ec 28          	sub    $0x28,%rsp
  414df5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  414df9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
          __sv_type __sv = __svt;
  414dfd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  414e01:	48 8b 50 08          	mov    0x8(%rax),%rdx
  414e05:	48 8b 00             	mov    (%rax),%rax
  414e08:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  414e0c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
          return this->append(__sv.data(), __sv.size());
  414e10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  414e14:	48 89 c7             	mov    %rax,%rdi
  414e17:	e8 b8 0e ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414e1c:	48 89 c3             	mov    %rax,%rbx
  414e1f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  414e23:	48 89 c7             	mov    %rax,%rdi
  414e26:	e8 6d 26 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  414e2b:	48 89 c1             	mov    %rax,%rcx
  414e2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  414e32:	48 89 da             	mov    %rbx,%rdx
  414e35:	48 89 ce             	mov    %rcx,%rsi
  414e38:	48 89 c7             	mov    %rax,%rdi
  414e3b:	e8 72 6b ff ff       	call   40b9b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>
        }
  414e40:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414e44:	c9                   	leave
  414e45:	c3                   	ret

0000000000414e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>:
      insert(size_type __pos, size_type __n, _CharT __c)
  414e46:	55                   	push   %rbp
  414e47:	48 89 e5             	mov    %rsp,%rbp
  414e4a:	53                   	push   %rbx
  414e4b:	48 83 ec 28          	sub    $0x28,%rsp
  414e4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414e53:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414e57:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  414e5b:	89 c8                	mov    %ecx,%eax
  414e5d:	88 45 d4             	mov    %al,-0x2c(%rbp)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
  414e60:	0f be 5d d4          	movsbl -0x2c(%rbp),%ebx
  414e64:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  414e68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414e6c:	ba f0 b3 41 00       	mov    $0x41b3f0,%edx
  414e71:	48 89 ce             	mov    %rcx,%rsi
  414e74:	48 89 c7             	mov    %rax,%rdi
  414e77:	e8 f2 77 ff ff       	call   40c66e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>
  414e7c:	48 89 c6             	mov    %rax,%rsi
  414e7f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  414e83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414e87:	41 89 d8             	mov    %ebx,%r8d
  414e8a:	48 89 d1             	mov    %rdx,%rcx
  414e8d:	ba 00 00 00 00       	mov    $0x0,%edx
  414e92:	48 89 c7             	mov    %rax,%rdi
  414e95:	e8 7e 1e 00 00       	call   416d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>
			      size_type(0), __n, __c); }
  414e9a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414e9e:	c9                   	leave
  414e9f:	c3                   	ret

0000000000414ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>:
      operator[](size_type __pos)
  414ea0:	55                   	push   %rbp
  414ea1:	48 89 e5             	mov    %rsp,%rbp
  414ea4:	48 83 ec 10          	sub    $0x10,%rsp
  414ea8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414eac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414eb0:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__pos <= size());
  414eb5:	84 c0                	test   %al,%al
  414eb7:	74 1e                	je     414ed7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm+0x37>
  414eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414ebd:	48 89 c7             	mov    %rax,%rdi
  414ec0:	e8 89 fe fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414ec5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  414ec9:	0f 92 c0             	setb   %al
  414ecc:	0f b6 c0             	movzbl %al,%eax
  414ecf:	48 85 c0             	test   %rax,%rax
  414ed2:	0f 95 c0             	setne  %al
  414ed5:	84 c0                	test   %al,%al
	return _M_data()[__pos];
  414ed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414edb:	48 89 c7             	mov    %rax,%rdi
  414ede:	e8 f1 25 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  414ee3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  414ee7:	48 01 d0             	add    %rdx,%rax
      }
  414eea:	c9                   	leave
  414eeb:	c3                   	ret

0000000000414eec <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414eec:	55                   	push   %rbp
  414eed:	48 89 e5             	mov    %rsp,%rbp
  414ef0:	48 89 f8             	mov    %rdi,%rax
  414ef3:	49 89 f0             	mov    %rsi,%r8
  414ef6:	48 89 c6             	mov    %rax,%rsi
  414ef9:	bf 00 00 00 00       	mov    $0x0,%edi
  414efe:	4c 89 c7             	mov    %r8,%rdi
  414f01:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414f05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414f09:	89 55 ec             	mov    %edx,-0x14(%rbp)
  414f0c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      if (__i < 0)
  414f10:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  414f15:	79 09                	jns    414f20 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x34>
	*__dest = '-';
  414f17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414f1b:	c6 00 2d             	movb   $0x2d,(%rax)
  414f1e:	eb 23                	jmp    414f43 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
      else if (__sign == _Sign_plus)
  414f20:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
  414f24:	75 09                	jne    414f2f <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x43>
	*__dest = '+';
  414f26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414f2a:	c6 00 2b             	movb   $0x2b,(%rax)
  414f2d:	eb 14                	jmp    414f43 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
      else if (__sign == _Sign_space)
  414f2f:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  414f33:	75 09                	jne    414f3e <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x52>
	*__dest = ' ';
  414f35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414f39:	c6 00 20             	movb   $0x20,(%rax)
  414f3c:	eb 05                	jmp    414f43 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
	++__dest;
  414f3e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
      return __dest;
  414f43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  414f47:	5d                   	pop    %rbp
  414f48:	c3                   	ret

0000000000414f49 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414f49:	55                   	push   %rbp
  414f4a:	48 89 e5             	mov    %rsp,%rbp
  414f4d:	48 89 f8             	mov    %rdi,%rax
  414f50:	49 89 f0             	mov    %rsi,%r8
  414f53:	48 89 c6             	mov    %rax,%rsi
  414f56:	bf 00 00 00 00       	mov    $0x0,%edi
  414f5b:	4c 89 c7             	mov    %r8,%rdi
  414f5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414f62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414f66:	89 55 ec             	mov    %edx,-0x14(%rbp)
  414f69:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      else if (__sign == _Sign_plus)
  414f6d:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
  414f71:	75 09                	jne    414f7c <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x33>
	*__dest = '+';
  414f73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414f77:	c6 00 2b             	movb   $0x2b,(%rax)
  414f7a:	eb 14                	jmp    414f90 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x47>
      else if (__sign == _Sign_space)
  414f7c:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  414f80:	75 09                	jne    414f8b <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x42>
	*__dest = ' ';
  414f82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414f86:	c6 00 20             	movb   $0x20,(%rax)
  414f89:	eb 05                	jmp    414f90 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x47>
	++__dest;
  414f8b:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
      return __dest;
  414f90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  414f94:	5d                   	pop    %rbp
  414f95:	c3                   	ret

0000000000414f96 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE>:
      _M_write(basic_string_view<_CharT> __s)
  414f96:	55                   	push   %rbp
  414f97:	48 89 e5             	mov    %rsp,%rbp
  414f9a:	53                   	push   %rbx
  414f9b:	48 83 ec 58          	sub    $0x58,%rsp
  414f9f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  414fa3:	48 89 f0             	mov    %rsi,%rax
  414fa6:	48 89 d1             	mov    %rdx,%rcx
  414fa9:	48 89 c0             	mov    %rax,%rax
  414fac:	ba 00 00 00 00       	mov    $0x0,%edx
  414fb1:	48 89 ca             	mov    %rcx,%rdx
  414fb4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  414fb8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  414fbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  414fc0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  414fc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414fc8:	48 8d 58 08          	lea    0x8(%rax),%rbx
  414fcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414fd0:	48 83 c0 08          	add    $0x8,%rax
  414fd4:	48 89 c7             	mov    %rax,%rdi
  414fd7:	e8 0e 69 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  414fdc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  414fe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414fe4:	48 8d 50 18          	lea    0x18(%rax),%rdx
  414fe8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  414fec:	48 89 c6             	mov    %rax,%rsi
  414fef:	48 89 d7             	mov    %rdx,%rdi
  414ff2:	e8 18 69 ff ff       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  414ff7:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  414ffe:	48 89 c6             	mov    %rax,%rsi
  415001:	48 89 df             	mov    %rbx,%rdi
  415004:	e8 45 81 ff ff       	call   40d14e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  415009:	90                   	nop
	span __to = _M_unused();
  41500a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41500e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	while (__to.size() <= __s.size())
  415012:	e9 db 00 00 00       	jmp    4150f2 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x15c>
	    __s.copy(__to.data(), __to.size());
  415017:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41501b:	48 89 c7             	mov    %rax,%rdi
  41501e:	e8 cf 04 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  415023:	48 89 c3             	mov    %rax,%rbx
  415026:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41502a:	48 89 c7             	mov    %rax,%rdi
  41502d:	e8 ae 04 ff ff       	call   4054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  415032:	48 89 c6             	mov    %rax,%rsi
  415035:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415039:	b9 00 00 00 00       	mov    $0x0,%ecx
  41503e:	48 89 da             	mov    %rbx,%rdx
  415041:	48 89 c7             	mov    %rax,%rdi
  415044:	e8 c3 1f 00 00       	call   41700c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
	    _M_next += __to.size();
  415049:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41504d:	48 89 c7             	mov    %rax,%rdi
  415050:	e8 9d 04 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  415055:	48 89 c2             	mov    %rax,%rdx
  415058:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41505c:	48 83 c0 18          	add    $0x18,%rax
  415060:	48 89 d6             	mov    %rdx,%rsi
  415063:	48 89 c7             	mov    %rax,%rdi
  415066:	e8 cb 81 ff ff       	call   40d236 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
	    __s.remove_prefix(__to.size());
  41506b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41506f:	48 89 c7             	mov    %rax,%rdi
  415072:	e8 7b 04 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  415077:	48 89 c2             	mov    %rax,%rdx
  41507a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41507e:	48 89 d6             	mov    %rdx,%rsi
  415081:	48 89 c7             	mov    %rax,%rdi
  415084:	e8 ed 0e 00 00       	call   415f76 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
	    _M_overflow();
  415089:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41508d:	48 8b 00             	mov    (%rax),%rax
  415090:	48 8b 10             	mov    (%rax),%rdx
  415093:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  415097:	48 89 c7             	mov    %rax,%rdi
  41509a:	ff d2                	call   *%rdx
  41509c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4150a0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  4150a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4150a8:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4150ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4150b0:	48 83 c0 08          	add    $0x8,%rax
  4150b4:	48 89 c7             	mov    %rax,%rdi
  4150b7:	e8 2e 68 ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4150bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4150c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4150c4:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4150c8:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4150cc:	48 89 c6             	mov    %rax,%rsi
  4150cf:	48 89 d7             	mov    %rdx,%rdi
  4150d2:	e8 38 68 ff ff       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  4150d7:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  4150de:	48 89 c6             	mov    %rax,%rsi
  4150e1:	48 89 df             	mov    %rbx,%rdi
  4150e4:	e8 65 80 ff ff       	call   40d14e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  4150e9:	90                   	nop
	    __to = _M_unused();
  4150ea:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4150ee:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	while (__to.size() <= __s.size())
  4150f2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4150f6:	48 89 c7             	mov    %rax,%rdi
  4150f9:	e8 f4 03 ff ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4150fe:	48 89 c3             	mov    %rax,%rbx
  415101:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415105:	48 89 c7             	mov    %rax,%rdi
  415108:	e8 c7 0b ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41510d:	48 39 d8             	cmp    %rbx,%rax
  415110:	0f 93 c0             	setae  %al
  415113:	84 c0                	test   %al,%al
  415115:	0f 85 fc fe ff ff    	jne    415017 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x81>
	if (__s.size())
  41511b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41511f:	48 89 c7             	mov    %rax,%rdi
  415122:	e8 ad 0b ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415127:	48 85 c0             	test   %rax,%rax
  41512a:	0f 95 c0             	setne  %al
  41512d:	84 c0                	test   %al,%al
  41512f:	74 54                	je     415185 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x1ef>
	    __s.copy(__to.data(), __s.size());
  415131:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415135:	48 89 c7             	mov    %rax,%rdi
  415138:	e8 97 0b ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41513d:	48 89 c3             	mov    %rax,%rbx
  415140:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415144:	48 89 c7             	mov    %rax,%rdi
  415147:	e8 94 03 ff ff       	call   4054e0 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  41514c:	48 89 c6             	mov    %rax,%rsi
  41514f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415153:	b9 00 00 00 00       	mov    $0x0,%ecx
  415158:	48 89 da             	mov    %rbx,%rdx
  41515b:	48 89 c7             	mov    %rax,%rdi
  41515e:	e8 a9 1e 00 00       	call   41700c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
	    _M_next += __s.size();
  415163:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415167:	48 89 c7             	mov    %rax,%rdi
  41516a:	e8 65 0b ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41516f:	48 89 c2             	mov    %rax,%rdx
  415172:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  415176:	48 83 c0 18          	add    $0x18,%rax
  41517a:	48 89 d6             	mov    %rdx,%rsi
  41517d:	48 89 c7             	mov    %rax,%rdi
  415180:	e8 b1 80 ff ff       	call   40d236 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
      }
  415185:	90                   	nop
  415186:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41518a:	c9                   	leave
  41518b:	c3                   	ret

000000000041518c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>:
      std::locale locale() { return _M_loc.value(); }
  41518c:	55                   	push   %rbp
  41518d:	48 89 e5             	mov    %rsp,%rbp
  415190:	48 83 ec 10          	sub    $0x10,%rsp
  415194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415198:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41519c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4151a0:	48 83 c0 18          	add    $0x18,%rax
  4151a4:	48 89 c7             	mov    %rax,%rdi
  4151a7:	e8 de 00 ff ff       	call   40528a <_ZNSt8__format16_Optional_locale5valueEv>
  4151ac:	48 89 c2             	mov    %rax,%rdx
  4151af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4151b3:	48 89 d6             	mov    %rdx,%rsi
  4151b6:	48 89 c7             	mov    %rax,%rdi
  4151b9:	e8 e2 ef fe ff       	call   4041a0 <_ZNSt6localeC1ERKS_@plt>
  4151be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4151c2:	c9                   	leave
  4151c3:	c3                   	ret

00000000004151c4 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4151c4:	55                   	push   %rbp
  4151c5:	48 89 e5             	mov    %rsp,%rbp
  4151c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  4151cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4151d0:	5d                   	pop    %rbp
  4151d1:	c3                   	ret

00000000004151d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
      operator=(basic_string&& __str)
  4151d2:	55                   	push   %rbp
  4151d3:	48 89 e5             	mov    %rsp,%rbp
  4151d6:	41 54                	push   %r12
  4151d8:	53                   	push   %rbx
  4151d9:	48 83 ec 50          	sub    $0x50,%rsp
  4151dd:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4151e1:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	const bool __equal_allocs = _Alloc_traits::_S_always_equal()
  4151e5:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
  4151e9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4151ed:	48 89 c7             	mov    %rax,%rdi
  4151f0:	e8 19 26 ff ff       	call   40780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  4151f5:	83 f0 01             	xor    $0x1,%eax
  4151f8:	84 c0                	test   %al,%al
  4151fa:	74 07                	je     415203 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x31>
    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }
  4151fc:	b8 01 00 00 00       	mov    $0x1,%eax
  415201:	84 c0                	test   %al,%al
	    && !__equal_allocs)
  415203:	b8 00 00 00 00       	mov    $0x0,%eax
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
  415208:	84 c0                	test   %al,%al
  41520a:	74 46                	je     415252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x80>
	    _M_destroy(_M_allocated_capacity);
  41520c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415210:	48 8b 50 10          	mov    0x10(%rax),%rdx
  415214:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415218:	48 89 d6             	mov    %rdx,%rsi
  41521b:	48 89 c7             	mov    %rax,%rdi
  41521e:	e8 c1 5f ff ff       	call   40b1e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
	    _M_data(_M_local_data());
  415223:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415227:	48 89 c7             	mov    %rax,%rdi
  41522a:	e8 e7 f7 fe ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  41522f:	48 89 c2             	mov    %rax,%rdx
  415232:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415236:	48 89 d6             	mov    %rdx,%rsi
  415239:	48 89 c7             	mov    %rax,%rdi
  41523c:	e8 05 45 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_set_length(0);
  415241:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415245:	be 00 00 00 00       	mov    $0x0,%esi
  41524a:	48 89 c7             	mov    %rax,%rdi
  41524d:	e8 94 22 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
  415252:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415256:	48 89 c7             	mov    %rax,%rdi
  415259:	e8 a2 25 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41525e:	48 89 c3             	mov    %rax,%rbx
  415261:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415265:	48 89 c7             	mov    %rax,%rdi
  415268:	e8 93 25 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41526d:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
  415271:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      using __traits = allocator_traits<_Alloc>;
      using __pocma
	= typename __traits::propagate_on_container_move_assignment::type;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
  415275:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  415279:	48 89 c7             	mov    %rax,%rdi
  41527c:	e8 41 f8 fe ff       	call   404ac2 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
#else
      __do_alloc_on_move(__one, __two, __pocma());
#endif
    }
  415281:	90                   	nop
	if (__str._M_is_local())
  415282:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415286:	48 89 c7             	mov    %rax,%rdi
  415289:	e8 80 25 ff ff       	call   40780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  41528e:	84 c0                	test   %al,%al
  415290:	0f 84 95 00 00 00    	je     41532b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x159>
	    if (__builtin_expect(std::__addressof(__str) != this, true))
  415296:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41529a:	48 89 c7             	mov    %rax,%rdi
  41529d:	e8 22 ff ff ff       	call   4151c4 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
  4152a2:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  4152a6:	0f 95 c0             	setne  %al
  4152a9:	0f b6 c0             	movzbl %al,%eax
  4152ac:	48 85 c0             	test   %rax,%rax
  4152af:	0f 95 c0             	setne  %al
  4152b2:	84 c0                	test   %al,%al
  4152b4:	0f 84 ad 01 00 00    	je     415467 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
		if (__str.size())
  4152ba:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4152be:	48 89 c7             	mov    %rax,%rdi
  4152c1:	e8 88 fa fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4152c6:	48 85 c0             	test   %rax,%rax
  4152c9:	0f 95 c0             	setne  %al
  4152cc:	84 c0                	test   %al,%al
  4152ce:	74 38                	je     415308 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x136>
		  this->_S_copy(_M_data(), __str._M_data(), __str.size());
  4152d0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4152d4:	48 89 c7             	mov    %rax,%rdi
  4152d7:	e8 72 fa fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4152dc:	49 89 c4             	mov    %rax,%r12
  4152df:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4152e3:	48 89 c7             	mov    %rax,%rdi
  4152e6:	e8 e9 21 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4152eb:	48 89 c3             	mov    %rax,%rbx
  4152ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4152f2:	48 89 c7             	mov    %rax,%rdi
  4152f5:	e8 da 21 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4152fa:	4c 89 e2             	mov    %r12,%rdx
  4152fd:	48 89 de             	mov    %rbx,%rsi
  415300:	48 89 c7             	mov    %rax,%rdi
  415303:	e8 d0 6c ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
		_M_set_length(__str.size());
  415308:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41530c:	48 89 c7             	mov    %rax,%rdi
  41530f:	e8 3a fa fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  415314:	48 89 c2             	mov    %rax,%rdx
  415317:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41531b:	48 89 d6             	mov    %rdx,%rsi
  41531e:	48 89 c7             	mov    %rax,%rdi
  415321:	e8 c0 21 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  415326:	e9 3c 01 00 00       	jmp    415467 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
	else if (_Alloc_traits::_S_propagate_on_move_assign() || __equal_allocs)
  41532b:	b8 01 00 00 00       	mov    $0x1,%eax
  415330:	84 c0                	test   %al,%al
  415332:	0f 84 1c 01 00 00    	je     415454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x282>
	    pointer __data = nullptr;
  415338:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  41533f:	00
	    if (!_M_is_local())
  415340:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415344:	48 89 c7             	mov    %rax,%rdi
  415347:	e8 c2 24 ff ff       	call   40780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  41534c:	83 f0 01             	xor    $0x1,%eax
  41534f:	84 c0                	test   %al,%al
  415351:	74 1c                	je     41536f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x19d>
		    __data = _M_data();
  415353:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415357:	48 89 c7             	mov    %rax,%rdi
  41535a:	e8 75 21 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41535f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    __capacity = _M_allocated_capacity;
  415363:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415367:	48 8b 40 10          	mov    0x10(%rax),%rax
  41536b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    _M_data(__str._M_data());
  41536f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415373:	48 89 c7             	mov    %rax,%rdi
  415376:	e8 59 21 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41537b:	48 89 c2             	mov    %rax,%rdx
  41537e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415382:	48 89 d6             	mov    %rdx,%rsi
  415385:	48 89 c7             	mov    %rax,%rdi
  415388:	e8 b9 43 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_length(__str.length());
  41538d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415391:	48 89 c7             	mov    %rax,%rdi
  415394:	e8 c5 24 ff ff       	call   40785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  415399:	48 89 c2             	mov    %rax,%rdx
  41539c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4153a0:	48 89 d6             	mov    %rdx,%rsi
  4153a3:	48 89 c7             	mov    %rax,%rdi
  4153a6:	e8 27 43 ff ff       	call   4096d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	    _M_capacity(__str._M_allocated_capacity);
  4153ab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4153af:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4153b3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4153b7:	48 89 d6             	mov    %rdx,%rsi
  4153ba:	48 89 c7             	mov    %rax,%rdi
  4153bd:	e8 9e 43 ff ff       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	    if (__data)
  4153c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4153c7:	74 28                	je     4153f1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x21f>
		__str._M_data(__data);
  4153c9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4153cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4153d1:	48 89 d6             	mov    %rdx,%rsi
  4153d4:	48 89 c7             	mov    %rax,%rdi
  4153d7:	e8 6a 43 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		__str._M_capacity(__capacity);
  4153dc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4153e0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4153e4:	48 89 d6             	mov    %rdx,%rsi
  4153e7:	48 89 c7             	mov    %rax,%rdi
  4153ea:	e8 71 43 ff ff       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  4153ef:	eb 76                	jmp    415467 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
  4153f1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4153f5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4153f9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4153fd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	if (std::is_constant_evaluated())
  415401:	e8 34 f2 fe ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  415406:	84 c0                	test   %al,%al
  415408:	74 28                	je     415432 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x260>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  41540a:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  415411:	00
  415412:	eb 17                	jmp    41542b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x259>
	    _M_local_buf[__i] = _CharT();
  415414:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  415418:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41541c:	48 01 d0             	add    %rdx,%rax
  41541f:	48 83 c0 10          	add    $0x10,%rax
  415423:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  415426:	48 83 45 b0 01       	addq   $0x1,-0x50(%rbp)
  41542b:	48 83 7d b0 0f       	cmpq   $0xf,-0x50(%rbp)
  415430:	76 e2                	jbe    415414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x242>
      }
  415432:	90                   	nop
	return _M_local_data();
  415433:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415437:	48 89 c7             	mov    %rax,%rdi
  41543a:	e8 d7 f5 fe ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  41543f:	48 89 c2             	mov    %rax,%rdx
  415442:	90                   	nop
	      __str._M_data(__str._M_use_local_data());
  415443:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415447:	48 89 d6             	mov    %rdx,%rsi
  41544a:	48 89 c7             	mov    %rax,%rdi
  41544d:	e8 f4 42 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
  415452:	eb 13                	jmp    415467 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
	  assign(__str);
  415454:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  415458:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41545c:	48 89 d6             	mov    %rdx,%rsi
  41545f:	48 89 c7             	mov    %rax,%rdi
  415462:	e8 3b 1c 00 00       	call   4170a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>
	__str.clear();
  415467:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41546b:	48 89 c7             	mov    %rax,%rdi
  41546e:	e8 8b 1e 00 00       	call   4172fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return *this;
  415473:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
      }
  415477:	48 83 c4 50          	add    $0x50,%rsp
  41547b:	5b                   	pop    %rbx
  41547c:	41 5c                	pop    %r12
  41547e:	5d                   	pop    %rbp
  41547f:	c3                   	ret

0000000000415480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
      operator=(const _CharT* __s)
  415480:	55                   	push   %rbp
  415481:	48 89 e5             	mov    %rsp,%rbp
  415484:	48 83 ec 10          	sub    $0x10,%rsp
  415488:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41548c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->assign(__s); }
  415490:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  415494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415498:	48 89 d6             	mov    %rdx,%rsi
  41549b:	48 89 c7             	mov    %rax,%rdi
  41549e:	e8 7b 1e 00 00       	call   41731e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
  4154a3:	c9                   	leave
  4154a4:	c3                   	ret

00000000004154a5 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_>:
	_S_to_character(_Int __i)
  4154a5:	55                   	push   %rbp
  4154a6:	48 89 e5             	mov    %rsp,%rbp
  4154a9:	48 83 ec 10          	sub    $0x10,%rsp
  4154ad:	89 f8                	mov    %edi,%eax
  4154af:	88 45 fc             	mov    %al,-0x4(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  4154b2:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  4154b6:	84 c0                	test   %al,%al
  4154b8:	78 06                	js     4154c0 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_+0x1b>
	    return static_cast<_CharT>(__i);
  4154ba:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  4154be:	eb 0a                	jmp    4154ca <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_+0x25>
	  __throw_format_error("format error: integer not representable as "
  4154c0:	bf 08 b4 41 00       	mov    $0x41b408,%edi
  4154c5:	e8 8d fc fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	}
  4154ca:	c9                   	leave
  4154cb:	c3                   	ret

00000000004154cc <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  4154cc:	55                   	push   %rbp
  4154cd:	48 89 e5             	mov    %rsp,%rbp
  4154d0:	48 83 ec 20          	sub    $0x20,%rsp
  4154d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4154d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4154dc:	89 d0                	mov    %edx,%eax
  4154de:	89 4d e8             	mov    %ecx,-0x18(%rbp)
  4154e1:	88 45 ec             	mov    %al,-0x14(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  4154e4:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
  4154e8:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  4154eb:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4154ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4154f3:	48 89 c7             	mov    %rax,%rdi
  4154f6:	e8 a9 17 ff ff       	call   406ca4 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i>
  4154fb:	c9                   	leave
  4154fc:	c3                   	ret

00000000004154fd <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  4154fd:	55                   	push   %rbp
  4154fe:	48 89 e5             	mov    %rsp,%rbp
  415501:	89 f8                	mov    %edi,%eax
  415503:	89 75 f8             	mov    %esi,-0x8(%rbp)
  415506:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  41550a:	88 45 fc             	mov    %al,-0x4(%rbp)
      else if (__sign == _Sign_plus)
  41550d:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  415511:	75 09                	jne    41551c <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x1f>
	*__dest = '+';
  415513:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415517:	c6 00 2b             	movb   $0x2b,(%rax)
  41551a:	eb 14                	jmp    415530 <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x33>
      else if (__sign == _Sign_space)
  41551c:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  415520:	75 09                	jne    41552b <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x2e>
	*__dest = ' ';
  415522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415526:	c6 00 20             	movb   $0x20,(%rax)
  415529:	eb 05                	jmp    415530 <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x33>
	++__dest;
  41552b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  415530:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  415534:	5d                   	pop    %rbp
  415535:	c3                   	ret

0000000000415536 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>:
	_M_format_int(string_view __narrow_str, size_t __prefix_len,
  415536:	55                   	push   %rbp
  415537:	48 89 e5             	mov    %rsp,%rbp
  41553a:	41 55                	push   %r13
  41553c:	41 54                	push   %r12
  41553e:	53                   	push   %rbx
  41553f:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  415546:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  41554d:	48 89 f0             	mov    %rsi,%rax
  415550:	48 89 d6             	mov    %rdx,%rsi
  415553:	48 89 c0             	mov    %rax,%rax
  415556:	ba 00 00 00 00       	mov    $0x0,%edx
  41555b:	48 89 f2             	mov    %rsi,%rdx
  41555e:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  415565:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  41556c:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
  415573:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  41557a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  415581:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  415588:	48 89 d6             	mov    %rdx,%rsi
  41558b:	48 89 c7             	mov    %rax,%rdi
  41558e:	e8 63 09 00 00       	call   415ef6 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  415593:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  basic_string_view<_CharT> __str;
  415597:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  41559e:	00 00 00 00
  4155a2:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  4155a9:	00 00 00 00
	    __str = __narrow_str;
  4155ad:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  4155b4:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  4155bb:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4155c2:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	  if (_M_spec._M_localized)
  4155c9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4155d0:	0f b6 00             	movzbl (%rax),%eax
  4155d3:	83 e0 20             	and    $0x20,%eax
  4155d6:	84 c0                	test   %al,%al
  4155d8:	0f 84 00 02 00 00    	je     4157de <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x2a8>
	      const auto& __l = __fc.locale();
  4155de:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4155e5:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  4155ec:	48 89 d6             	mov    %rdx,%rsi
  4155ef:	48 89 c7             	mov    %rax,%rdi
  4155f2:	e8 95 fb ff ff       	call   41518c <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  4155f7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4155fe:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	      if (__l.name() != "C")
  415602:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  415609:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41560d:	48 89 d6             	mov    %rdx,%rsi
  415610:	48 89 c7             	mov    %rax,%rdi
  415613:	e8 98 ed fe ff       	call   4043b0 <_ZNKSt6locale4nameB5cxx11Ev@plt>
  415618:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  41561f:	be 3d b4 41 00       	mov    $0x41b43d,%esi
  415624:	48 89 c7             	mov    %rax,%rdi
  415627:	e8 7b 15 00 00       	call   416ba7 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
  41562c:	83 f0 01             	xor    $0x1,%eax
  41562f:	89 c3                	mov    %eax,%ebx
  415631:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  415638:	48 89 c7             	mov    %rax,%rdi
  41563b:	e8 f2 1e ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415640:	84 db                	test   %bl,%bl
  415642:	0f 84 87 01 00 00    	je     4157cf <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x299>
		  auto& __np = use_facet<numpunct<_CharT>>(__l);
  415648:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41564c:	48 89 c7             	mov    %rax,%rdi
  41564f:	e8 6c ea fe ff       	call   4040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  415654:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		  string __grp = __np.grouping();
  415658:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  41565f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  415663:	48 89 d6             	mov    %rdx,%rsi
  415666:	48 89 c7             	mov    %rax,%rdi
  415669:	e8 82 ec fe ff       	call   4042f0 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>
		  if (!__grp.empty())
  41566e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415675:	48 89 c7             	mov    %rax,%rdi
  415678:	e8 51 99 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41567d:	83 f0 01             	xor    $0x1,%eax
  415680:	84 c0                	test   %al,%al
  415682:	0f 84 38 01 00 00    	je     4157c0 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x28a>
		      size_t __n = __str.size() - __prefix_len;
  415688:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  41568f:	48 89 c7             	mov    %rax,%rdi
  415692:	e8 3d 06 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415697:	48 2b 85 10 ff ff ff 	sub    -0xf0(%rbp),%rax
  41569e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		      auto __p = (_CharT*)__builtin_alloca(2 * __n
  4156a2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4156a6:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  4156aa:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4156b1:	48 01 d0             	add    %rdx,%rax
  4156b4:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4156b8:	b8 10 00 00 00       	mov    $0x10,%eax
  4156bd:	48 83 e8 01          	sub    $0x1,%rax
  4156c1:	48 01 d0             	add    %rdx,%rax
  4156c4:	bb 10 00 00 00       	mov    $0x10,%ebx
  4156c9:	ba 00 00 00 00       	mov    $0x0,%edx
  4156ce:	48 f7 f3             	div    %rbx
  4156d1:	48 6b c0 10          	imul   $0x10,%rax,%rax
  4156d5:	48 29 c4             	sub    %rax,%rsp
  4156d8:	48 89 e0             	mov    %rsp,%rax
  4156db:	48 83 c0 0f          	add    $0xf,%rax
  4156df:	48 c1 e8 04          	shr    $0x4,%rax
  4156e3:	48 c1 e0 04          	shl    $0x4,%rax
  4156e7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		      auto __s = __str.data();
  4156eb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4156f2:	48 89 c7             	mov    %rax,%rdi
  4156f5:	e8 9e 1d ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  4156fa:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		      char_traits<_CharT>::copy(__p, __s, __prefix_len);
  4156fe:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  415705:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  415709:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41570d:	48 89 ce             	mov    %rcx,%rsi
  415710:	48 89 c7             	mov    %rax,%rdi
  415713:	e8 fc f1 fe ff       	call   404914 <_ZNSt11char_traitsIcE4copyEPcPKcm>
		      __s += __prefix_len;
  415718:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  41571f:	48 01 45 a8          	add    %rax,-0x58(%rbp)
		      auto __end = std::__add_grouping(__p + __prefix_len,
  415723:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  415727:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41572b:	4c 8d 2c 02          	lea    (%rdx,%rax,1),%r13
  41572f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415736:	48 89 c7             	mov    %rax,%rdi
  415739:	e8 10 f6 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41573e:	49 89 c4             	mov    %rax,%r12
						       __grp.data(),
  415741:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415748:	48 89 c7             	mov    %rax,%rdi
  41574b:	e8 5a 50 ff ff       	call   40a7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  415750:	48 89 c3             	mov    %rax,%rbx
						       __np.thousands_sep(),
  415753:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415757:	48 89 c7             	mov    %rax,%rdi
  41575a:	e8 31 ea fe ff       	call   404190 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>
		      auto __end = std::__add_grouping(__p + __prefix_len,
  41575f:	0f be c0             	movsbl %al,%eax
  415762:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  415766:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  41576d:	48 8d 3c 11          	lea    (%rcx,%rdx,1),%rdi
  415771:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  415775:	4d 89 e9             	mov    %r13,%r9
  415778:	49 89 d0             	mov    %rdx,%r8
  41577b:	4c 89 e1             	mov    %r12,%rcx
  41577e:	48 89 da             	mov    %rbx,%rdx
  415781:	89 c6                	mov    %eax,%esi
  415783:	e8 e9 1b 00 00       	call   417371 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>
  415788:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		      __str = {__p, size_t(__end - __p)};
  41578c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415790:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  415794:	48 89 c2             	mov    %rax,%rdx
  415797:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  41579b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  41579f:	48 89 ce             	mov    %rcx,%rsi
  4157a2:	48 89 c7             	mov    %rax,%rdi
  4157a5:	e8 00 1d ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  4157aa:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4157ae:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4157b2:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4157b9:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
		}
  4157c0:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  4157c7:	48 89 c7             	mov    %rax,%rdi
  4157ca:	e8 63 1d ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    }
  4157cf:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4157d6:	48 89 c7             	mov    %rax,%rdi
  4157d9:	e8 52 eb fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	  if (__width <= __str.size())
  4157de:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4157e5:	48 89 c7             	mov    %rax,%rdi
  4157e8:	e8 e7 04 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4157ed:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  4157f1:	0f 93 c0             	setae  %al
  4157f4:	84 c0                	test   %al,%al
  4157f6:	74 33                	je     41582b <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x2f5>
	    return __format::__write(__fc.out(), __str);
  4157f8:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4157ff:	48 89 c7             	mov    %rax,%rdi
  415802:	e8 c1 60 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  415807:	48 89 c1             	mov    %rax,%rcx
  41580a:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  415811:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  415818:	48 89 d6             	mov    %rdx,%rsi
  41581b:	48 89 c2             	mov    %rax,%rdx
  41581e:	48 89 cf             	mov    %rcx,%rdi
  415821:	e8 fc 8e ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  415826:	e9 71 01 00 00       	jmp    41599c <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x466>
	  char32_t __fill_char = _M_spec._M_fill;
  41582b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  415832:	8b 40 08             	mov    0x8(%rax),%eax
  415835:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  _Align __align = _M_spec._M_align;
  415838:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  41583f:	0f b6 00             	movzbl (%rax),%eax
  415842:	83 e0 03             	and    $0x3,%eax
  415845:	0f b6 c0             	movzbl %al,%eax
  415848:	89 45 d8             	mov    %eax,-0x28(%rbp)
	  size_t __nfill = __width - __str.size();
  41584b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  415852:	48 89 c7             	mov    %rax,%rdi
  415855:	e8 7a 04 ff ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41585a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41585e:	48 29 c2             	sub    %rax,%rdx
  415861:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  auto __out = __fc.out();
  415865:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  41586c:	48 89 c7             	mov    %rax,%rdi
  41586f:	e8 54 60 ff ff       	call   40b8c8 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  415874:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	  if (__align == _Align_default)
  41587b:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  41587f:	0f 85 96 00 00 00    	jne    41591b <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
	      __align = _Align_right;
  415885:	c7 45 d8 02 00 00 00 	movl   $0x2,-0x28(%rbp)
	      if (_M_spec._M_zero_fill)
  41588c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  415893:	0f b6 00             	movzbl (%rax),%eax
  415896:	83 e0 40             	and    $0x40,%eax
  415899:	84 c0                	test   %al,%al
  41589b:	74 77                	je     415914 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3de>
		  __fill_char = _CharT('0');
  41589d:	c7 45 dc 30 00 00 00 	movl   $0x30,-0x24(%rbp)
		  if (__prefix_len != 0)
  4158a4:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
  4158ab:	00
  4158ac:	74 6d                	je     41591b <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
		      __out = __format::__write(std::move(__out),
  4158ae:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  4158b5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4158bc:	be 00 00 00 00       	mov    $0x0,%esi
  4158c1:	48 89 c7             	mov    %rax,%rdi
  4158c4:	e8 31 61 ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  4158c9:	49 89 c4             	mov    %rax,%r12
  4158cc:	49 89 d5             	mov    %rdx,%r13
  4158cf:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
  4158d6:	48 89 c7             	mov    %rax,%rdi
  4158d9:	e8 d5 40 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4158de:	4c 89 e1             	mov    %r12,%rcx
  4158e1:	4c 89 ea             	mov    %r13,%rdx
  4158e4:	48 8b 00             	mov    (%rax),%rax
  4158e7:	48 89 ce             	mov    %rcx,%rsi
  4158ea:	48 89 c7             	mov    %rax,%rdi
  4158ed:	e8 30 8e ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4158f2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
		      __str.remove_prefix(__prefix_len);
  4158f9:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  415900:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  415907:	48 89 d6             	mov    %rdx,%rsi
  41590a:	48 89 c7             	mov    %rax,%rdi
  41590d:	e8 64 06 00 00       	call   415f76 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
  415912:	eb 07                	jmp    41591b <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
		__fill_char = _CharT(' ');
  415914:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  41591b:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
  415922:	48 89 c7             	mov    %rax,%rdi
  415925:	e8 89 40 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41592a:	44 8b 45 dc          	mov    -0x24(%rbp),%r8d
  41592e:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  415932:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  415935:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  41593c:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  415943:	48 8b 00             	mov    (%rax),%rax
  415946:	45 89 c1             	mov    %r8d,%r9d
  415949:	49 89 f8             	mov    %rdi,%r8
  41594c:	48 89 c7             	mov    %rax,%rdi
  41594f:	e8 df 08 00 00       	call   416233 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
					  __align, __nfill, __fill_char);
  415954:	90                   	nop
  415955:	eb 45                	jmp    41599c <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x466>
	      if (__l.name() != "C")
  415957:	48 89 c3             	mov    %rax,%rbx
  41595a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  415961:	48 89 c7             	mov    %rax,%rdi
  415964:	e8 c9 1b ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415969:	eb 17                	jmp    415982 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x44c>
		}
  41596b:	48 89 c3             	mov    %rax,%rbx
  41596e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415975:	48 89 c7             	mov    %rax,%rdi
  415978:	e8 b5 1b ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41597d:	eb 03                	jmp    415982 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x44c>
	    }
  41597f:	48 89 c3             	mov    %rax,%rbx
  415982:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415989:	48 89 c7             	mov    %rax,%rdi
  41598c:	e8 9f e9 fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  415991:	48 89 d8             	mov    %rbx,%rax
  415994:	48 89 c7             	mov    %rax,%rdi
  415997:	e8 74 ea fe ff       	call   404410 <_Unwind_Resume@plt>
	}
  41599c:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  4159a0:	5b                   	pop    %rbx
  4159a1:	41 5c                	pop    %r12
  4159a3:	41 5d                	pop    %r13
  4159a5:	5d                   	pop    %rbp
  4159a6:	c3                   	ret

00000000004159a7 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_>:
	_S_to_character(_Int __i)
  4159a7:	55                   	push   %rbp
  4159a8:	48 89 e5             	mov    %rsp,%rbp
  4159ab:	48 83 ec 10          	sub    $0x10,%rsp
  4159af:	89 7d fc             	mov    %edi,-0x4(%rbp)
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
  4159b2:	83 7d fc 80          	cmpl   $0xffffff80,-0x4(%rbp)
  4159b6:	7c 0b                	jl     4159c3 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x1c>
  4159b8:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
  4159bc:	7f 05                	jg     4159c3 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x1c>
		return static_cast<_CharT>(__i);
  4159be:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4159c1:	eb 0a                	jmp    4159cd <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x26>
	  __throw_format_error("format error: integer not representable as "
  4159c3:	bf 08 b4 41 00       	mov    $0x41b408,%edi
  4159c8:	e8 8a f7 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	}
  4159cd:	c9                   	leave
  4159ce:	c3                   	ret

00000000004159cf <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  4159cf:	55                   	push   %rbp
  4159d0:	48 89 e5             	mov    %rsp,%rbp
  4159d3:	48 83 ec 20          	sub    $0x20,%rsp
  4159d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4159db:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4159df:	89 55 ec             	mov    %edx,-0x14(%rbp)
  4159e2:	89 4d e8             	mov    %ecx,-0x18(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  4159e5:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  4159e8:	8b 55 ec             	mov    -0x14(%rbp),%edx
  4159eb:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4159ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4159f3:	48 89 c7             	mov    %rax,%rdi
  4159f6:	e8 26 14 ff ff       	call   406e21 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i>
  4159fb:	c9                   	leave
  4159fc:	c3                   	ret

00000000004159fd <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_>:
	_S_to_character(_Int __i)
  4159fd:	55                   	push   %rbp
  4159fe:	48 89 e5             	mov    %rsp,%rbp
  415a01:	48 83 ec 10          	sub    $0x10,%rsp
  415a05:	89 7d fc             	mov    %edi,-0x4(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  415a08:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
  415a0c:	77 05                	ja     415a13 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_+0x16>
	    return static_cast<_CharT>(__i);
  415a0e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  415a11:	eb 0a                	jmp    415a1d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_+0x20>
	  __throw_format_error("format error: integer not representable as "
  415a13:	bf 08 b4 41 00       	mov    $0x41b408,%edi
  415a18:	e8 3a f7 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	}
  415a1d:	c9                   	leave
  415a1e:	c3                   	ret

0000000000415a1f <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_>:
	_S_to_character(_Int __i)
  415a1f:	55                   	push   %rbp
  415a20:	48 89 e5             	mov    %rsp,%rbp
  415a23:	48 83 ec 10          	sub    $0x10,%rsp
  415a27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
  415a2b:	48 83 7d f8 80       	cmpq   $0xffffffffffffff80,-0x8(%rbp)
  415a30:	7c 0d                	jl     415a3f <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x20>
  415a32:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
  415a37:	7f 06                	jg     415a3f <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x20>
		return static_cast<_CharT>(__i);
  415a39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415a3d:	eb 0a                	jmp    415a49 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x2a>
	  __throw_format_error("format error: integer not representable as "
  415a3f:	bf 08 b4 41 00       	mov    $0x41b408,%edi
  415a44:	e8 0e f7 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	}
  415a49:	c9                   	leave
  415a4a:	c3                   	ret

0000000000415a4b <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  415a4b:	55                   	push   %rbp
  415a4c:	48 89 e5             	mov    %rsp,%rbp
  415a4f:	48 83 ec 20          	sub    $0x20,%rsp
  415a53:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415a57:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415a5b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  415a5f:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  415a62:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  415a65:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415a69:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  415a6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415a71:	48 89 c7             	mov    %rax,%rdi
  415a74:	e8 a5 16 ff ff       	call   40711e <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i>
  415a79:	c9                   	leave
  415a7a:	c3                   	ret

0000000000415a7b <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_>:
	_S_to_character(_Int __i)
  415a7b:	55                   	push   %rbp
  415a7c:	48 89 e5             	mov    %rsp,%rbp
  415a7f:	48 83 ec 10          	sub    $0x10,%rsp
  415a83:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  415a87:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
  415a8c:	77 06                	ja     415a94 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_+0x19>
	    return static_cast<_CharT>(__i);
  415a8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415a92:	eb 0a                	jmp    415a9e <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_+0x23>
	  __throw_format_error("format error: integer not representable as "
  415a94:	bf 08 b4 41 00       	mov    $0x41b408,%edi
  415a99:	e8 b9 f6 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	}
  415a9e:	c9                   	leave
  415a9f:	c3                   	ret

0000000000415aa0 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>:
	_M_get_precision(_Context& __ctx) const
  415aa0:	55                   	push   %rbp
  415aa1:	48 89 e5             	mov    %rsp,%rbp
  415aa4:	48 83 ec 40          	sub    $0x40,%rsp
  415aa8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  415aac:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	  size_t __prec = -1;
  415ab0:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
  415ab7:	ff
	  if (_M_prec_kind == _WP_value)
  415ab8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415abc:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  415ac0:	83 e0 06             	and    $0x6,%eax
  415ac3:	3c 02                	cmp    $0x2,%al
  415ac5:	75 11                	jne    415ad8 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x38>
	    __prec = _M_prec;
  415ac7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415acb:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  415acf:	0f b7 c0             	movzwl %ax,%eax
  415ad2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  415ad6:	eb 3d                	jmp    415b15 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x75>
	  else if (_M_prec_kind == _WP_from_arg)
  415ad8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415adc:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  415ae0:	83 e0 06             	and    $0x6,%eax
  415ae3:	3c 04                	cmp    $0x4,%al
  415ae5:	75 2e                	jne    415b15 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x75>
	    __prec = __format::__int_from_arg(__ctx.arg(_M_prec));
  415ae7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415aeb:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  415aef:	0f b7 d0             	movzwl %ax,%edx
  415af2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  415af6:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  415afa:	48 89 ce             	mov    %rcx,%rsi
  415afd:	48 89 c7             	mov    %rax,%rdi
  415b00:	e8 b1 8c ff ff       	call   40e7b6 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  415b05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  415b09:	48 89 c7             	mov    %rax,%rdi
  415b0c:	e8 b4 1c 00 00       	call   4177c5 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>
  415b11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return __prec;
  415b15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  415b19:	c9                   	leave
  415b1a:	c3                   	ret
  415b1b:	90                   	nop

0000000000415b1c <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m>:
	auto __overwrite = [&](_CharT* __p, size_t) {
  415b1c:	55                   	push   %rbp
  415b1d:	48 89 e5             	mov    %rsp,%rbp
  415b20:	41 56                	push   %r14
  415b22:	41 55                	push   %r13
  415b24:	41 54                	push   %r12
  415b26:	53                   	push   %rbx
  415b27:	48 83 ec 30          	sub    $0x30,%rsp
  415b2b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  415b2f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  415b33:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
					   __str.data(), __str.data() + __e);
  415b37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415b3b:	48 8b 40 10          	mov    0x10(%rax),%rax
  415b3f:	48 89 c7             	mov    %rax,%rdi
  415b42:	e8 51 19 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  415b47:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  415b4b:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  415b4f:	48 8b 12             	mov    (%rdx),%rdx
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
  415b52:	4c 8d 34 10          	lea    (%rax,%rdx,1),%r14
  415b56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415b5a:	48 8b 40 10          	mov    0x10(%rax),%rax
  415b5e:	48 89 c7             	mov    %rax,%rdi
  415b61:	e8 32 19 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  415b66:	49 89 c5             	mov    %rax,%r13
  415b69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415b6d:	48 8b 40 08          	mov    0x8(%rax),%rax
  415b71:	48 89 c7             	mov    %rax,%rdi
  415b74:	e8 d5 f1 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  415b79:	49 89 c4             	mov    %rax,%r12
  415b7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415b80:	48 8b 40 08          	mov    0x8(%rax),%rax
  415b84:	48 89 c7             	mov    %rax,%rdi
  415b87:	e8 f0 3b ff ff       	call   40977c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  415b8c:	48 89 c3             	mov    %rax,%rbx
  415b8f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415b93:	48 8b 00             	mov    (%rax),%rax
  415b96:	48 89 c7             	mov    %rax,%rdi
  415b99:	e8 f2 e5 fe ff       	call   404190 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>
  415b9e:	0f be f0             	movsbl %al,%esi
  415ba1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415ba5:	4d 89 f1             	mov    %r14,%r9
  415ba8:	4d 89 e8             	mov    %r13,%r8
  415bab:	4c 89 e1             	mov    %r12,%rcx
  415bae:	48 89 da             	mov    %rbx,%rdx
  415bb1:	48 89 c7             	mov    %rax,%rdi
  415bb4:	e8 b8 17 00 00       	call   417371 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>
  415bb9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  if (__r)
  415bbd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415bc1:	48 8b 40 20          	mov    0x20(%rax),%rax
  415bc5:	48 8b 00             	mov    (%rax),%rax
  415bc8:	48 85 c0             	test   %rax,%rax
  415bcb:	74 77                	je     415c44 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0x128>
	      if (__d != __str.npos)
  415bcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415bd1:	48 8b 40 28          	mov    0x28(%rax),%rax
  415bd5:	48 8b 00             	mov    (%rax),%rax
  415bd8:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  415bdc:	74 28                	je     415c06 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0xea>
		  *__end = __point;
  415bde:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415be2:	48 8b 40 30          	mov    0x30(%rax),%rax
  415be6:	0f b6 10             	movzbl (%rax),%edx
  415be9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415bed:	88 10                	mov    %dl,(%rax)
		  ++__end;
  415bef:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
		  ++__e;
  415bf4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415bf8:	48 8b 40 18          	mov    0x18(%rax),%rax
  415bfc:	48 8b 10             	mov    (%rax),%rdx
  415bff:	48 83 c2 01          	add    $0x1,%rdx
  415c03:	48 89 10             	mov    %rdx,(%rax)
	      if (__r > 1)
  415c06:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415c0a:	48 8b 40 20          	mov    0x20(%rax),%rax
  415c0e:	48 8b 00             	mov    (%rax),%rax
  415c11:	48 83 f8 01          	cmp    $0x1,%rax
  415c15:	76 2d                	jbe    415c44 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0x128>
		__end += __str.copy(__end, __str.npos, __e);
  415c17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415c1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  415c1f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  415c23:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  415c27:	48 8b 12             	mov    (%rdx),%rdx
  415c2a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  415c2e:	48 89 d1             	mov    %rdx,%rcx
  415c31:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  415c38:	48 89 c7             	mov    %rax,%rdi
  415c3b:	e8 cc 13 00 00       	call   41700c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
  415c40:	48 01 45 d8          	add    %rax,-0x28(%rbp)
	  return (__end - __p);
  415c44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415c48:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
	auto __overwrite = [&](_CharT* __p, size_t) {
  415c4c:	48 83 c4 30          	add    $0x30,%rsp
  415c50:	5b                   	pop    %rbx
  415c51:	41 5c                	pop    %r12
  415c53:	41 5d                	pop    %r13
  415c55:	41 5e                	pop    %r14
  415c57:	5d                   	pop    %rbp
  415c58:	c3                   	ret
  415c59:	90                   	nop

0000000000415c5a <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>:
      _M_localize(basic_string_view<_CharT> __str, char __expc,
  415c5a:	55                   	push   %rbp
  415c5b:	48 89 e5             	mov    %rsp,%rbp
  415c5e:	53                   	push   %rbx
  415c5f:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  415c66:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  415c6d:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  415c74:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  415c7b:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  415c82:	44 89 c0             	mov    %r8d,%eax
  415c85:	4c 89 8d e0 fe ff ff 	mov    %r9,-0x120(%rbp)
  415c8c:	88 85 ec fe ff ff    	mov    %al,-0x114(%rbp)
	basic_string<_CharT> __lstr;
  415c92:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415c99:	48 89 c7             	mov    %rax,%rdi
  415c9c:	e8 43 ee fe ff       	call   404ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	if (__loc == locale::classic())
  415ca1:	e8 5a e6 fe ff       	call   404300 <_ZNSt6locale7classicEv@plt>
  415ca6:	48 89 c2             	mov    %rax,%rdx
  415ca9:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  415cb0:	48 89 d6             	mov    %rdx,%rsi
  415cb3:	48 89 c7             	mov    %rax,%rdi
  415cb6:	e8 a5 e3 fe ff       	call   404060 <_ZNKSt6localeeqERKS_@plt>
  415cbb:	84 c0                	test   %al,%al
  415cbd:	0f 85 24 02 00 00    	jne    415ee7 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x28d>
	const auto& __np = use_facet<numpunct<_CharT>>(__loc);
  415cc3:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  415cca:	48 89 c7             	mov    %rax,%rdi
  415ccd:	e8 ee e3 fe ff       	call   4040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  415cd2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	const _CharT __point = __np.decimal_point();
  415cd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415cda:	48 89 c7             	mov    %rax,%rdi
  415cdd:	e8 6e e4 fe ff       	call   404150 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@plt>
  415ce2:	88 45 c7             	mov    %al,-0x39(%rbp)
	const string __grp = __np.grouping();
  415ce5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415ce9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415ced:	48 89 d6             	mov    %rdx,%rsi
  415cf0:	48 89 c7             	mov    %rax,%rdi
  415cf3:	e8 f8 e5 fe ff       	call   4042f0 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>
	    __dot = '.';
  415cf8:	c6 45 e7 2e          	movb   $0x2e,-0x19(%rbp)
	    __exp = __expc;
  415cfc:	0f b6 85 ec fe ff ff 	movzbl -0x114(%rbp),%eax
  415d03:	88 45 e6             	mov    %al,-0x1a(%rbp)
	if (__grp.empty() && __point == __dot)
  415d06:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415d0a:	48 89 c7             	mov    %rax,%rdi
  415d0d:	e8 bc 92 ff ff       	call   40efce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  415d12:	84 c0                	test   %al,%al
  415d14:	74 10                	je     415d26 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xcc>
  415d16:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  415d1a:	38 45 e7             	cmp    %al,-0x19(%rbp)
  415d1d:	75 07                	jne    415d26 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xcc>
  415d1f:	b8 01 00 00 00       	mov    $0x1,%eax
  415d24:	eb 05                	jmp    415d2b <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xd1>
  415d26:	b8 00 00 00 00       	mov    $0x0,%eax
  415d2b:	84 c0                	test   %al,%al
  415d2d:	0f 85 77 01 00 00    	jne    415eaa <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x250>
	size_t __d = __str.find(__dot);
  415d33:	0f be 4d e7          	movsbl -0x19(%rbp),%ecx
  415d37:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415d3e:	ba 00 00 00 00       	mov    $0x0,%edx
  415d43:	89 ce                	mov    %ecx,%esi
  415d45:	48 89 c7             	mov    %rax,%rdi
  415d48:	e8 d7 04 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  415d4d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	size_t __e = min(__d, __str.find(__exp));
  415d51:	0f be 4d e6          	movsbl -0x1a(%rbp),%ecx
  415d55:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415d5c:	ba 00 00 00 00       	mov    $0x0,%edx
  415d61:	89 ce                	mov    %ecx,%esi
  415d63:	48 89 c7             	mov    %rax,%rdi
  415d66:	e8 b9 04 ff ff       	call   406224 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  415d6b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  415d6f:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  415d73:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  415d77:	48 89 d6             	mov    %rdx,%rsi
  415d7a:	48 89 c7             	mov    %rax,%rdi
  415d7d:	e8 94 4a ff ff       	call   40a816 <_ZSt3minImERKT_S2_S2_>
  415d82:	48 8b 00             	mov    (%rax),%rax
  415d85:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	if (__e == __str.npos)
  415d89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415d8d:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  415d91:	75 13                	jne    415da6 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x14c>
	  __e = __str.size();
  415d93:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415d9a:	48 89 c7             	mov    %rax,%rdi
  415d9d:	e8 32 ff fe ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415da2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	const size_t __r = __str.size() - __e;
  415da6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415dad:	48 89 c7             	mov    %rax,%rdi
  415db0:	e8 1f ff fe ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415db5:	48 89 c2             	mov    %rax,%rdx
  415db8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415dbc:	48 29 c2             	sub    %rax,%rdx
  415dbf:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	auto __overwrite = [&](_CharT* __p, size_t) {
  415dc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415dc7:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  415dce:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415dd2:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  415dd9:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415de0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  415de7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  415deb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  415df2:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  415df6:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  415dfd:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  415e01:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  415e08:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
  415e0c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	__lstr.__resize_and_overwrite(__e * 2 + __r, __overwrite);
  415e10:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415e14:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  415e18:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  415e1c:	48 01 c2             	add    %rax,%rdx
  415e1f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415e26:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  415e2a:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  415e2e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  415e35:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  415e3c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  415e43:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  415e4a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  415e51:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  415e58:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  415e5f:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  415e66:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  415e6d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  415e74:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  415e7b:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  415e82:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  415e86:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    { resize_and_overwrite<_Operation&>(__n, __op); }
  415e8d:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  415e94:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  415e98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415e9c:	48 89 ce             	mov    %rcx,%rsi
  415e9f:	48 89 c7             	mov    %rax,%rdi
  415ea2:	e8 23 30 00 00       	call   418eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_>
  415ea7:	90                   	nop
	return __lstr;
  415ea8:	eb 01                	jmp    415eab <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x251>
	  return __lstr; // Locale uses '.' and no grouping.
  415eaa:	90                   	nop
      }
  415eab:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415eaf:	48 89 c7             	mov    %rax,%rdi
  415eb2:	e8 7b 16 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415eb7:	eb 2f                	jmp    415ee8 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x28e>
  415eb9:	48 89 c3             	mov    %rax,%rbx
  415ebc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415ec0:	48 89 c7             	mov    %rax,%rdi
  415ec3:	e8 6a 16 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415ec8:	eb 03                	jmp    415ecd <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x273>
  415eca:	48 89 c3             	mov    %rax,%rbx
  415ecd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415ed4:	48 89 c7             	mov    %rax,%rdi
  415ed7:	e8 56 16 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415edc:	48 89 d8             	mov    %rbx,%rax
  415edf:	48 89 c7             	mov    %rax,%rdi
  415ee2:	e8 29 e5 fe ff       	call   404410 <_Unwind_Resume@plt>
	  return __lstr; // Nothing to do.
  415ee7:	90                   	nop
      }
  415ee8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415eef:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  415ef3:	c9                   	leave
  415ef4:	c3                   	ret
  415ef5:	90                   	nop

0000000000415ef6 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>:
	_M_get_width(_Context& __ctx) const
  415ef6:	55                   	push   %rbp
  415ef7:	48 89 e5             	mov    %rsp,%rbp
  415efa:	48 83 ec 40          	sub    $0x40,%rsp
  415efe:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  415f02:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	  size_t __width = 0;
  415f06:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  415f0d:	00
	  if (_M_width_kind == _WP_value)
  415f0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415f12:	0f b7 00             	movzwl (%rax),%eax
  415f15:	66 25 80 01          	and    $0x180,%ax
  415f19:	66 3d 80 00          	cmp    $0x80,%ax
  415f1d:	75 11                	jne    415f30 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x3a>
	    __width = _M_width;
  415f1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415f23:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  415f27:	0f b7 c0             	movzwl %ax,%eax
  415f2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  415f2e:	eb 3f                	jmp    415f6f <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x79>
	  else if (_M_width_kind == _WP_from_arg)
  415f30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415f34:	0f b7 00             	movzwl (%rax),%eax
  415f37:	66 25 80 01          	and    $0x180,%ax
  415f3b:	66 3d 00 01          	cmp    $0x100,%ax
  415f3f:	75 2e                	jne    415f6f <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x79>
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
  415f41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415f45:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  415f49:	0f b7 d0             	movzwl %ax,%edx
  415f4c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  415f50:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  415f54:	48 89 ce             	mov    %rcx,%rsi
  415f57:	48 89 c7             	mov    %rax,%rdi
  415f5a:	e8 57 88 ff ff       	call   40e7b6 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  415f5f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  415f63:	48 89 c7             	mov    %rax,%rdi
  415f66:	e8 5a 18 00 00       	call   4177c5 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>
  415f6b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return __width;
  415f6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  415f73:	c9                   	leave
  415f74:	c3                   	ret
  415f75:	90                   	nop

0000000000415f76 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>:
      remove_prefix(size_type __n) noexcept
  415f76:	55                   	push   %rbp
  415f77:	48 89 e5             	mov    %rsp,%rbp
  415f7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415f7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415f82:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(this->_M_len >= __n);
  415f87:	84 c0                	test   %al,%al
  415f89:	74 14                	je     415f9f <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm+0x29>
  415f8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415f8f:	48 8b 00             	mov    (%rax),%rax
  415f92:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  415f96:	0f 92 c0             	setb   %al
  415f99:	0f b6 c0             	movzbl %al,%eax
  415f9c:	48 85 c0             	test   %rax,%rax
	this->_M_str += __n;
  415f9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415fa3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  415fa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415fab:	48 01 c2             	add    %rax,%rdx
  415fae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415fb2:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_len -= __n;
  415fb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415fba:	48 8b 00             	mov    (%rax),%rax
  415fbd:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  415fc1:	48 89 c2             	mov    %rax,%rdx
  415fc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415fc8:	48 89 10             	mov    %rdx,(%rax)
      }
  415fcb:	90                   	nop
  415fcc:	5d                   	pop    %rbp
  415fcd:	c3                   	ret

0000000000415fce <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>:
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  415fce:	55                   	push   %rbp
  415fcf:	48 89 e5             	mov    %rsp,%rbp
  415fd2:	41 55                	push   %r13
  415fd4:	41 54                	push   %r12
  415fd6:	53                   	push   %rbx
  415fd7:	48 83 ec 28          	sub    $0x28,%rsp
  415fdb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  415fdf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  415fe3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__n == 0)
  415fe7:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  415fec:	0f 84 b2 00 00 00    	je     4160a4 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd6>
	while (__n > __padding.size())
  415ff2:	eb 45                	jmp    416039 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0x6b>
	    __o = __format::__write(std::move(__o), __padding);
  415ff4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415ff8:	48 8b 18             	mov    (%rax),%rbx
  415ffb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415fff:	48 89 c7             	mov    %rax,%rdi
  416002:	e8 ac 39 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416007:	48 8b 0b             	mov    (%rbx),%rcx
  41600a:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  41600e:	48 8b 00             	mov    (%rax),%rax
  416011:	48 89 ce             	mov    %rcx,%rsi
  416014:	48 89 c7             	mov    %rax,%rdi
  416017:	e8 06 87 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41601c:	48 89 c2             	mov    %rax,%rdx
  41601f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416023:	48 89 10             	mov    %rdx,(%rax)
	    __n -= __padding.size();
  416026:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41602a:	48 8b 00             	mov    (%rax),%rax
  41602d:	48 89 c7             	mov    %rax,%rdi
  416030:	e8 9f fc fe ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  416035:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
	while (__n > __padding.size())
  416039:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41603d:	48 8b 00             	mov    (%rax),%rax
  416040:	48 89 c7             	mov    %rax,%rdi
  416043:	e8 8c fc fe ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  416048:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  41604c:	0f 92 c0             	setb   %al
  41604f:	84 c0                	test   %al,%al
  416051:	75 a1                	jne    415ff4 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0x26>
	if (__n != 0)
  416053:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  416058:	74 4b                	je     4160a5 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd7>
	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
  41605a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41605e:	48 8b 00             	mov    (%rax),%rax
  416061:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  416065:	be 00 00 00 00       	mov    $0x0,%esi
  41606a:	48 89 c7             	mov    %rax,%rdi
  41606d:	e8 88 59 ff ff       	call   40b9fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  416072:	49 89 c4             	mov    %rax,%r12
  416075:	49 89 d5             	mov    %rdx,%r13
  416078:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41607c:	48 89 c7             	mov    %rax,%rdi
  41607f:	e8 2f 39 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416084:	4c 89 e1             	mov    %r12,%rcx
  416087:	4c 89 ea             	mov    %r13,%rdx
  41608a:	48 8b 00             	mov    (%rax),%rax
  41608d:	48 89 ce             	mov    %rcx,%rsi
  416090:	48 89 c7             	mov    %rax,%rdi
  416093:	e8 8a 86 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  416098:	48 89 c2             	mov    %rax,%rdx
  41609b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41609f:	48 89 10             	mov    %rdx,(%rax)
  4160a2:	eb 01                	jmp    4160a5 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd7>
	  return;
  4160a4:	90                   	nop
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  4160a5:	48 83 c4 28          	add    $0x28,%rsp
  4160a9:	5b                   	pop    %rbx
  4160aa:	41 5c                	pop    %r12
  4160ac:	41 5d                	pop    %r13
  4160ae:	5d                   	pop    %rbp
  4160af:	c3                   	ret

00000000004160b0 <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  4160b0:	55                   	push   %rbp
  4160b1:	48 89 e5             	mov    %rsp,%rbp
  4160b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4160b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __t + 0;
  4160bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  4160c0:	5d                   	pop    %rbp
  4160c1:	c3                   	ret

00000000004160c2 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  4160c2:	55                   	push   %rbp
  4160c3:	48 89 e5             	mov    %rsp,%rbp
  4160c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4160ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __t + extent_v<remove_reference_t<_Tp>>;
  4160ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4160d2:	48 83 c0 04          	add    $0x4,%rax
	}
  4160d6:	5d                   	pop    %rbp
  4160d7:	c3                   	ret

00000000004160d8 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiEC1ES3_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  4160d8:	55                   	push   %rbp
  4160d9:	48 89 e5             	mov    %rsp,%rbp
  4160dc:	48 83 ec 10          	sub    $0x10,%rsp
  4160e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4160e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4160e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4160ec:	48 89 c7             	mov    %rax,%rdi
  4160ef:	e8 0a 00 00 00       	call   4160fe <_ZSt7forwardIRA1_KDiEOT_RNSt16remove_referenceIS3_E4typeE>
  4160f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4160f8:	48 89 02             	mov    %rax,(%rdx)
  4160fb:	90                   	nop
  4160fc:	c9                   	leave
  4160fd:	c3                   	ret

00000000004160fe <_ZSt7forwardIRA1_KDiEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4160fe:	55                   	push   %rbp
  4160ff:	48 89 e5             	mov    %rsp,%rbp
  416102:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  416106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41610a:	5d                   	pop    %rbp
  41610b:	c3                   	ret

000000000041610c <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE8_M_beginIPS1_S6_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  41610c:	55                   	push   %rbp
  41610d:	48 89 e5             	mov    %rsp,%rbp
  416110:	48 83 ec 20          	sub    $0x20,%rsp
  416114:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416118:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41611c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  416120:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  416124:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  416128:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41612c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  416130:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416134:	48 89 c7             	mov    %rax,%rdi
  416137:	e8 b6 18 00 00       	call   4179f2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  41613c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416140:	c9                   	leave
  416141:	c3                   	ret

0000000000416142 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv>:
      constexpr auto begin()
  416142:	55                   	push   %rbp
  416143:	48 89 e5             	mov    %rsp,%rbp
  416146:	53                   	push   %rbx
  416147:	48 83 ec 18          	sub    $0x18,%rsp
  41614b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  41614f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  416153:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416157:	48 8b 00             	mov    (%rax),%rax
  41615a:	48 89 c6             	mov    %rax,%rsi
  41615d:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  416162:	e8 5b ff ff ff       	call   4160c2 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>
  416167:	48 89 c3             	mov    %rax,%rbx
  41616a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41616e:	48 8b 00             	mov    (%rax),%rax
  416171:	48 89 c6             	mov    %rax,%rsi
  416174:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  416179:	e8 32 ff ff ff       	call   4160b0 <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>
  41617e:	48 89 c2             	mov    %rax,%rdx
  416181:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416185:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416189:	48 89 d9             	mov    %rbx,%rcx
  41618c:	48 89 c7             	mov    %rax,%rdi
  41618f:	e8 78 ff ff ff       	call   41610c <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE8_M_beginIPS1_S6_EEDaT_T0_>
  416194:	90                   	nop
  416195:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416199:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41619d:	c9                   	leave
  41619e:	c3                   	ret
  41619f:	90                   	nop

00000000004161a0 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE6_M_endIPS1_S6_EEDaT_T0_>:
	_M_end(_Iter __first, _Sent __last)
  4161a0:	55                   	push   %rbp
  4161a1:	48 89 e5             	mov    %rsp,%rbp
  4161a4:	48 83 ec 20          	sub    $0x20,%rsp
  4161a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4161ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4161b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4161b4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __last, __last);
  4161b8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4161bc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4161c0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4161c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4161c8:	48 89 c7             	mov    %rax,%rdi
  4161cb:	e8 22 18 00 00       	call   4179f2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  4161d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4161d4:	c9                   	leave
  4161d5:	c3                   	ret

00000000004161d6 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE3endEv>:
      constexpr auto end()
  4161d6:	55                   	push   %rbp
  4161d7:	48 89 e5             	mov    %rsp,%rbp
  4161da:	53                   	push   %rbx
  4161db:	48 83 ec 18          	sub    $0x18,%rsp
  4161df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4161e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_end(ranges::begin(_M_base), ranges::end(_M_base)); }
  4161e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4161eb:	48 8b 00             	mov    (%rax),%rax
  4161ee:	48 89 c6             	mov    %rax,%rsi
  4161f1:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  4161f6:	e8 c7 fe ff ff       	call   4160c2 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>
  4161fb:	48 89 c3             	mov    %rax,%rbx
  4161fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416202:	48 8b 00             	mov    (%rax),%rax
  416205:	48 89 c6             	mov    %rax,%rsi
  416208:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  41620d:	e8 9e fe ff ff       	call   4160b0 <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>
  416212:	48 89 c2             	mov    %rax,%rdx
  416215:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416219:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41621d:	48 89 d9             	mov    %rbx,%rcx
  416220:	48 89 c7             	mov    %rax,%rdi
  416223:	e8 78 ff ff ff       	call   4161a0 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE6_M_endIPS1_S6_EEDaT_T0_>
  416228:	90                   	nop
  416229:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41622d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416231:	c9                   	leave
  416232:	c3                   	ret

0000000000416233 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>:
    __write_padded(_Out __out, basic_string_view<_CharT> __str,
  416233:	55                   	push   %rbp
  416234:	48 89 e5             	mov    %rsp,%rbp
  416237:	53                   	push   %rbx
  416238:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  41623f:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  416246:	48 89 f0             	mov    %rsi,%rax
  416249:	48 89 d6             	mov    %rdx,%rsi
  41624c:	48 89 c0             	mov    %rax,%rax
  41624f:	ba 00 00 00 00       	mov    $0x0,%edx
  416254:	48 89 f2             	mov    %rsi,%rdx
  416257:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  41625e:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
  416265:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%rbp)
  41626b:	4c 89 85 c8 fe ff ff 	mov    %r8,-0x138(%rbp)
  416272:	44 89 8d e0 fe ff ff 	mov    %r9d,-0x120(%rbp)
      const size_t __buflen = 0x20;
  416279:	48 c7 45 d0 20 00 00 	movq   $0x20,-0x30(%rbp)
  416280:	00
      __padding_chars[0] = _CharT();
  416281:	c6 85 40 ff ff ff 00 	movb   $0x0,-0xc0(%rbp)
      basic_string_view<_CharT> __padding{__padding_chars, __buflen};
  416288:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
  41628f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  416296:	ba 20 00 00 00       	mov    $0x20,%edx
  41629b:	48 89 ce             	mov    %rcx,%rsi
  41629e:	48 89 c7             	mov    %rax,%rdi
  4162a1:	e8 04 12 ff ff       	call   4074aa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  4162a6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4162ad:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
      if (__align == _Align_centre)
  4162b4:	83 bd e4 fe ff ff 03 	cmpl   $0x3,-0x11c(%rbp)
  4162bb:	75 30                	jne    4162ed <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xba>
	  __l = __nfill / 2;
  4162bd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4162c4:	48 d1 e8             	shr    %rax
  4162c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __r = __l + (__nfill & 1);
  4162cb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4162d2:	83 e0 01             	and    $0x1,%eax
  4162d5:	48 89 c2             	mov    %rax,%rdx
  4162d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4162dc:	48 01 d0             	add    %rdx,%rax
  4162df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __max = __r;
  4162e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4162e7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4162eb:	eb 41                	jmp    41632e <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xfb>
      else if (__align == _Align_right)
  4162ed:	83 bd e4 fe ff ff 02 	cmpl   $0x2,-0x11c(%rbp)
  4162f4:	75 1d                	jne    416313 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xe0>
	  __l = __nfill;
  4162f6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4162fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __r = 0;
  416301:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  416308:	00
	  __max = __l;
  416309:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41630d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  416311:	eb 1b                	jmp    41632e <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xfb>
	  __l = 0;
  416313:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  41631a:	00
	  __r = __nfill;
  41631b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  416322:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __max = __r;
  416326:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41632a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (!__is_single_code_unit<_CharT>(__fill_char)) [[unlikely]]
  41632e:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  416334:	89 c7                	mov    %eax,%edi
  416336:	e8 94 16 00 00       	call   4179cf <_ZNSt9__unicode21__is_single_code_unitIcEEbDi>
  41633b:	83 f0 01             	xor    $0x1,%eax
  41633e:	84 c0                	test   %al,%al
  416340:	0f 84 dc 01 00 00    	je     416522 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x2ef>
	    const char32_t __arr[1]{ __fill_char };
  416346:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  41634c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
	    _Utf_view<_CharT, const char32_t(&)[1]> __v(__arr);
  416352:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  416359:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  416360:	48 89 d6             	mov    %rdx,%rsi
  416363:	48 89 c7             	mov    %rax,%rdi
  416366:	e8 6d fd ff ff       	call   4160d8 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiEC1ES3_>
  41636b:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
  416372:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  416376:	90                   	nop
      allocator() _GLIBCXX_NOTHROW { }
  416377:	90                   	nop
	    basic_string<_CharT> __padstr(__v.begin(), __v.end());
  416378:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  41637f:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  416386:	48 89 d6             	mov    %rdx,%rsi
  416389:	48 89 c7             	mov    %rax,%rdi
  41638c:	e8 45 fe ff ff       	call   4161d6 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE3endEv>
  416391:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  416395:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  41639c:	48 89 d6             	mov    %rdx,%rsi
  41639f:	48 89 c7             	mov    %rax,%rdi
  4163a2:	e8 9b fd ff ff       	call   416142 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv>
  4163a7:	48 8d b5 6f ff ff ff 	lea    -0x91(%rbp),%rsi
  4163ae:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  4163b5:	48 83 ec 28          	sub    $0x28,%rsp
  4163b9:	48 89 e0             	mov    %rsp,%rax
  4163bc:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  4163c3:	48 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%rbx
  4163ca:	48 89 08             	mov    %rcx,(%rax)
  4163cd:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4163d1:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  4163d5:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
  4163d9:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4163dd:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4163e1:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  4163e5:	48 89 48 20          	mov    %rcx,0x20(%rax)
  4163e9:	48 83 ec 28          	sub    $0x28,%rsp
  4163ed:	48 89 e0             	mov    %rsp,%rax
  4163f0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4163f4:	48 8b 5d a8          	mov    -0x58(%rbp),%rbx
  4163f8:	48 89 08             	mov    %rcx,(%rax)
  4163fb:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4163ff:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  416403:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  416407:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41640b:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41640f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  416413:	48 89 48 20          	mov    %rcx,0x20(%rax)
  416417:	48 89 d7             	mov    %rdx,%rdi
  41641a:	e8 67 16 00 00       	call   417a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_>
  41641f:	48 83 c4 50          	add    $0x50,%rsp
      ~allocator() _GLIBCXX_NOTHROW { }
  416423:	90                   	nop
	    __padding = __padstr;
  416424:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  41642b:	48 89 c7             	mov    %rax,%rdi
  41642e:	e8 ad 1b ff ff       	call   407fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  416433:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  41643a:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	    while (__l-- > 0)
  416441:	eb 32                	jmp    416475 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x242>
	      __out = __format::__write(std::move(__out), __padding);
  416443:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  41644a:	48 89 c7             	mov    %rax,%rdi
  41644d:	e8 61 35 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416452:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  416459:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  416460:	48 8b 00             	mov    (%rax),%rax
  416463:	48 89 ce             	mov    %rcx,%rsi
  416466:	48 89 c7             	mov    %rax,%rdi
  416469:	e8 b4 82 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41646e:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__l-- > 0)
  416475:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416479:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  41647d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  416481:	48 85 c0             	test   %rax,%rax
  416484:	0f 95 c0             	setne  %al
  416487:	84 c0                	test   %al,%al
  416489:	75 b8                	jne    416443 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x210>
	    __out = __format::__write(std::move(__out), __str);
  41648b:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  416492:	48 89 c7             	mov    %rax,%rdi
  416495:	e8 19 35 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41649a:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  4164a1:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  4164a8:	48 8b 00             	mov    (%rax),%rax
  4164ab:	48 89 ce             	mov    %rcx,%rsi
  4164ae:	48 89 c7             	mov    %rax,%rdi
  4164b1:	e8 6c 82 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4164b6:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__r-- > 0)
  4164bd:	eb 32                	jmp    4164f1 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x2be>
	      __out = __format::__write(std::move(__out), __padding);
  4164bf:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  4164c6:	48 89 c7             	mov    %rax,%rdi
  4164c9:	e8 e5 34 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4164ce:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  4164d5:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  4164dc:	48 8b 00             	mov    (%rax),%rax
  4164df:	48 89 ce             	mov    %rcx,%rsi
  4164e2:	48 89 c7             	mov    %rax,%rdi
  4164e5:	e8 38 82 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4164ea:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__r-- > 0)
  4164f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4164f5:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4164f9:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  4164fd:	48 85 c0             	test   %rax,%rax
  416500:	0f 95 c0             	setne  %al
  416503:	84 c0                	test   %al,%al
  416505:	75 b8                	jne    4164bf <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x28c>
	    return __out;
  416507:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
	  }
  41650e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  416515:	48 89 c7             	mov    %rax,%rdi
  416518:	e8 15 10 ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41651d:	e9 c1 00 00 00       	jmp    4165e3 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x3b0>
      if (__max < __buflen)
  416522:	48 83 7d d8 1f       	cmpq   $0x1f,-0x28(%rbp)
  416527:	77 20                	ja     416549 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x316>
	__padding.remove_suffix(__buflen - __max);
  416529:	b8 20 00 00 00       	mov    $0x20,%eax
  41652e:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  416532:	48 89 c2             	mov    %rax,%rdx
  416535:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  41653c:	48 89 d6             	mov    %rdx,%rsi
  41653f:	48 89 c7             	mov    %rax,%rdi
  416542:	e8 f3 61 ff ff       	call   40c73a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm>
  416547:	eb 08                	jmp    416551 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x31e>
	__max = __buflen;
  416549:	48 c7 45 d8 20 00 00 	movq   $0x20,-0x28(%rbp)
  416550:	00
      char_traits<_CharT>::assign(__padding_chars, __max, __fill_char);
  416551:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  416557:	0f be d0             	movsbl %al,%edx
  41655a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  41655e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416565:	48 89 ce             	mov    %rcx,%rsi
  416568:	48 89 c7             	mov    %rax,%rdi
  41656b:	e8 07 e4 fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
      __pad(__l, __out);
  416570:	48 8d 95 e8 fe ff ff 	lea    -0x118(%rbp),%rdx
  416577:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41657b:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  416582:	48 89 ce             	mov    %rcx,%rsi
  416585:	48 89 c7             	mov    %rax,%rdi
  416588:	e8 41 fa ff ff       	call   415fce <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>
      __out = __format::__write(std::move(__out), __str);
  41658d:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  416594:	48 89 c7             	mov    %rax,%rdi
  416597:	e8 17 34 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41659c:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  4165a3:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  4165aa:	48 8b 00             	mov    (%rax),%rax
  4165ad:	48 89 ce             	mov    %rcx,%rsi
  4165b0:	48 89 c7             	mov    %rax,%rdi
  4165b3:	e8 6a 81 ff ff       	call   40e722 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4165b8:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
      __pad(__r, __out);
  4165bf:	48 8d 95 e8 fe ff ff 	lea    -0x118(%rbp),%rdx
  4165c6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4165ca:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  4165d1:	48 89 ce             	mov    %rcx,%rsi
  4165d4:	48 89 c7             	mov    %rax,%rdi
  4165d7:	e8 f2 f9 ff ff       	call   415fce <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>
      return __out;
  4165dc:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
    }
  4165e3:	48 89 d8             	mov    %rbx,%rax
  4165e6:	eb 26                	jmp    41660e <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x3db>
  4165e8:	90                   	nop
  4165e9:	48 89 c7             	mov    %rax,%rdi
  4165ec:	e8 1f de fe ff       	call   404410 <_Unwind_Resume@plt>
	  }
  4165f1:	48 89 c3             	mov    %rax,%rbx
  4165f4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4165fb:	48 89 c7             	mov    %rax,%rdi
  4165fe:	e8 2f 0f ff ff       	call   407532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  416603:	48 89 d8             	mov    %rbx,%rax
  416606:	48 89 c7             	mov    %rax,%rdi
  416609:	e8 02 de fe ff       	call   404410 <_Unwind_Resume@plt>
    }
  41660e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416612:	c9                   	leave
  416613:	c3                   	ret

0000000000416614 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>:
      empty() const noexcept
  416614:	55                   	push   %rbp
  416615:	48 89 e5             	mov    %rsp,%rbp
  416618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len == 0; }
  41661c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416620:	48 8b 00             	mov    (%rax),%rax
  416623:	48 85 c0             	test   %rax,%rax
  416626:	0f 94 c0             	sete   %al
  416629:	5d                   	pop    %rbp
  41662a:	c3                   	ret
  41662b:	90                   	nop

000000000041662c <_ZNKSt6ranges8__access6_BeginclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  41662c:	55                   	push   %rbp
  41662d:	48 89 e5             	mov    %rsp,%rbp
  416630:	48 83 ec 10          	sub    $0x10,%rsp
  416634:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416638:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  41663c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416640:	48 89 c7             	mov    %rax,%rdi
  416643:	e8 5e f6 fe ff       	call   405ca6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
	}
  416648:	c9                   	leave
  416649:	c3                   	ret

000000000041664a <_ZNKSt6ranges8__access4_EndclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  41664a:	55                   	push   %rbp
  41664b:	48 89 e5             	mov    %rsp,%rbp
  41664e:	48 83 ec 10          	sub    $0x10,%rsp
  416652:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416656:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  41665a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41665e:	48 89 c7             	mov    %rax,%rdi
  416661:	e8 52 f6 fe ff       	call   405cb8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>
	}
  416666:	c9                   	leave
  416667:	c3                   	ret

0000000000416668 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE8_M_beginIPKcS8_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  416668:	55                   	push   %rbp
  416669:	48 89 e5             	mov    %rsp,%rbp
  41666c:	48 83 ec 20          	sub    $0x20,%rsp
  416670:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416674:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  416678:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  41667c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  416680:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  416684:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416688:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  41668c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416690:	48 89 c7             	mov    %rax,%rdi
  416693:	e8 a0 44 ff ff       	call   40ab38 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  416698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41669c:	c9                   	leave
  41669d:	c3                   	ret

000000000041669e <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>:
      constexpr auto begin()
  41669e:	55                   	push   %rbp
  41669f:	48 89 e5             	mov    %rsp,%rbp
  4166a2:	53                   	push   %rbx
  4166a3:	48 83 ec 18          	sub    $0x18,%rsp
  4166a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4166ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  4166af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4166b3:	48 89 c6             	mov    %rax,%rsi
  4166b6:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  4166bb:	e8 8a ff ff ff       	call   41664a <_ZNKSt6ranges8__access4_EndclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>
  4166c0:	48 89 c3             	mov    %rax,%rbx
  4166c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4166c7:	48 89 c6             	mov    %rax,%rsi
  4166ca:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  4166cf:	e8 58 ff ff ff       	call   41662c <_ZNKSt6ranges8__access6_BeginclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>
  4166d4:	48 89 c2             	mov    %rax,%rdx
  4166d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4166db:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4166df:	48 89 d9             	mov    %rbx,%rcx
  4166e2:	48 89 c7             	mov    %rax,%rdi
  4166e5:	e8 7e ff ff ff       	call   416668 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE8_M_beginIPKcS8_EEDaT_T0_>
  4166ea:	90                   	nop
  4166eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4166ef:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4166f3:	c9                   	leave
  4166f4:	c3                   	ret
  4166f5:	90                   	nop

00000000004166f6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>:
      constexpr
      _Grapheme_cluster_view(_View __v)
      : _M_begin(_Utf32_view<_View>(std::move(__v)).begin())
      { }

      constexpr auto begin() const { return _M_begin; }
  4166f6:	55                   	push   %rbp
  4166f7:	48 89 e5             	mov    %rsp,%rbp
  4166fa:	53                   	push   %rbx
  4166fb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  4166ff:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  416703:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416707:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41670b:	48 8b 0a             	mov    (%rdx),%rcx
  41670e:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
  416712:	48 89 08             	mov    %rcx,(%rax)
  416715:	48 89 58 08          	mov    %rbx,0x8(%rax)
  416719:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  41671d:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
  416721:	48 89 48 10          	mov    %rcx,0x10(%rax)
  416725:	48 89 58 18          	mov    %rbx,0x18(%rax)
  416729:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  41672d:	48 8b 5a 28          	mov    0x28(%rdx),%rbx
  416731:	48 89 48 20          	mov    %rcx,0x20(%rax)
  416735:	48 89 58 28          	mov    %rbx,0x28(%rax)
  416739:	48 8b 52 30          	mov    0x30(%rdx),%rdx
  41673d:	48 89 50 30          	mov    %rdx,0x30(%rax)
  416741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416745:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416749:	c9                   	leave
  41674a:	c3                   	ret
  41674b:	90                   	nop

000000000041674c <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator3endEv>:

	// Iterator to the start of the current cluster.
	constexpr auto base() const { return _M_base.base(); }

	// The end of the underlying view (not the end of the current cluster!)
	constexpr auto end() const { return _M_base.end(); }
  41674c:	55                   	push   %rbp
  41674d:	48 89 e5             	mov    %rsp,%rbp
  416750:	48 83 ec 10          	sub    $0x10,%rsp
  416754:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416758:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41675c:	48 83 c0 10          	add    $0x10,%rax
  416760:	48 89 c7             	mov    %rax,%rdi
  416763:	e8 20 17 00 00       	call   417e88 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  416768:	c9                   	leave
  416769:	c3                   	ret

000000000041676a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>:
      constexpr auto end() const { return _M_begin.end(); }
  41676a:	55                   	push   %rbp
  41676b:	48 89 e5             	mov    %rsp,%rbp
  41676e:	48 83 ec 10          	sub    $0x10,%rsp
  416772:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416776:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41677a:	48 89 c7             	mov    %rax,%rdi
  41677d:	e8 ca ff ff ff       	call   41674c <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator3endEv>
  416782:	c9                   	leave
  416783:	c3                   	ret

0000000000416784 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>:

	// Field width of the first code point in the cluster.
	constexpr int
	width() const noexcept
  416784:	55                   	push   %rbp
  416785:	48 89 e5             	mov    %rsp,%rbp
  416788:	48 83 ec 10          	sub    $0x10,%rsp
  41678c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __field_width(_M_c); }
  416790:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416794:	8b 00                	mov    (%rax),%eax
  416796:	89 c7                	mov    %eax,%edi
  416798:	e8 36 e6 fe ff       	call   404dd3 <_ZNSt9__unicode9__v15_1_013__field_widthEDi>
  41679d:	c9                   	leave
  41679e:	c3                   	ret
  41679f:	90                   	nop

00000000004167a0 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator4baseEv>:
	constexpr auto base() const { return _M_base.base(); }
  4167a0:	55                   	push   %rbp
  4167a1:	48 89 e5             	mov    %rsp,%rbp
  4167a4:	48 83 ec 10          	sub    $0x10,%rsp
  4167a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4167ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4167b0:	48 83 c0 10          	add    $0x10,%rax
  4167b4:	48 89 c7             	mov    %rax,%rdi
  4167b7:	e8 94 44 ff ff       	call   40ac50 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>
  4167bc:	c9                   	leave
  4167bd:	c3                   	ret

00000000004167be <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm>:

  // Truncate a string to at most `__max` field width units, and return the
  // resulting field width.
  template<typename _CharT>
    constexpr size_t
    __truncate(basic_string_view<_CharT>& __s, size_t __max)
  4167be:	55                   	push   %rbp
  4167bf:	48 89 e5             	mov    %rsp,%rbp
  4167c2:	53                   	push   %rbx
  4167c3:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  4167ca:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  4167d1:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
    {
      if (__s.empty()) [[unlikely]]
  4167d8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4167df:	48 89 c7             	mov    %rax,%rdi
  4167e2:	e8 2d fe ff ff       	call   416614 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>
  4167e7:	84 c0                	test   %al,%al
  4167e9:	74 0a                	je     4167f5 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x37>
	return 0;
  4167eb:	b8 00 00 00 00       	mov    $0x0,%eax
  4167f0:	e9 4f 01 00 00       	jmp    416944 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>

      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
  4167f5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4167fc:	48 8b 08             	mov    (%rax),%rcx
  4167ff:	48 8b 50 08          	mov    0x8(%rax),%rdx
  416803:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  416807:	48 89 ce             	mov    %rcx,%rsi
  41680a:	48 89 c7             	mov    %rax,%rdi
  41680d:	e8 d0 15 00 00       	call   417de2 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>
      auto __it = __gc.begin();
  416812:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416819:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  41681d:	48 89 d6             	mov    %rdx,%rsi
  416820:	48 89 c7             	mov    %rax,%rdi
  416823:	e8 ce fe ff ff       	call   4166f6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
      const auto __end = __gc.end();
  416828:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  41682c:	48 89 c7             	mov    %rax,%rdi
  41682f:	e8 36 ff ff ff       	call   41676a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>
  416834:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
      size_t __n = __it.width();
  41683b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416842:	48 89 c7             	mov    %rax,%rdi
  416845:	e8 3a ff ff ff       	call   416784 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  41684a:	48 98                	cltq
  41684c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__n > __max)
  416850:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416854:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
  41685b:	0f 83 b0 00 00 00    	jae    416911 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x153>
	{
	  __s = {};
  416861:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  416865:	48 89 c7             	mov    %rax,%rdi
  416868:	e8 77 84 ff ff       	call   40ece4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1Ev>
  41686d:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  416874:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  416878:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41687c:	48 89 01             	mov    %rax,(%rcx)
  41687f:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	  return 0;
  416883:	b8 00 00 00 00       	mov    $0x0,%eax
  416888:	e9 b7 00 00 00       	jmp    416944 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>
	}
      while (++__it != __end)
	{
	  size_t __n2 = __n + __it.width();
  41688d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416894:	48 89 c7             	mov    %rax,%rdi
  416897:	e8 e8 fe ff ff       	call   416784 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  41689c:	48 63 d0             	movslq %eax,%rdx
  41689f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4168a3:	48 01 d0             	add    %rdx,%rax
  4168a6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__n2 > __max)
  4168aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4168ae:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
  4168b5:	73 52                	jae    416909 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x14b>
	    {
	      __s = basic_string_view<_CharT>(__s.begin(), __it.base());
  4168b7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4168be:	48 89 c7             	mov    %rax,%rdi
  4168c1:	e8 da fe ff ff       	call   4167a0 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator4baseEv>
  4168c6:	48 89 c3             	mov    %rax,%rbx
  4168c9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4168d0:	48 89 c7             	mov    %rax,%rdi
  4168d3:	e8 ce f3 fe ff       	call   405ca6 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
  4168d8:	48 89 c1             	mov    %rax,%rcx
  4168db:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4168df:	48 89 da             	mov    %rbx,%rdx
  4168e2:	48 89 ce             	mov    %rcx,%rsi
  4168e5:	48 89 c7             	mov    %rax,%rdi
  4168e8:	e8 d1 f8 fe ff       	call   4061be <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
  4168ed:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  4168f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4168f8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4168fc:	48 89 01             	mov    %rax,(%rcx)
  4168ff:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	      return __n;
  416903:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416907:	eb 3b                	jmp    416944 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>
	    }
	  __n = __n2;
  416909:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41690d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      while (++__it != __end)
  416911:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416918:	48 89 c7             	mov    %rax,%rdi
  41691b:	e8 7a 15 00 00       	call   417e9a <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>
  416920:	48 89 c2             	mov    %rax,%rdx
  416923:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  41692a:	48 89 c6             	mov    %rax,%rsi
  41692d:	48 89 d7             	mov    %rdx,%rdi
  416930:	e8 63 17 00 00       	call   418098 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>
  416935:	83 f0 01             	xor    $0x1,%eax
  416938:	84 c0                	test   %al,%al
  41693a:	0f 85 4d ff ff ff    	jne    41688d <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0xcf>
	}
      return __n;
  416940:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  416944:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416948:	c9                   	leave
  416949:	c3                   	ret

000000000041694a <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE>:
    __field_width(basic_string_view<_CharT> __s)
  41694a:	55                   	push   %rbp
  41694b:	48 89 e5             	mov    %rsp,%rbp
  41694e:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  416955:	48 89 f8             	mov    %rdi,%rax
  416958:	48 89 f1             	mov    %rsi,%rcx
  41695b:	48 89 c0             	mov    %rax,%rax
  41695e:	ba 00 00 00 00       	mov    $0x0,%edx
  416963:	48 89 ca             	mov    %rcx,%rdx
  416966:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  41696d:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
      if (__s.empty()) [[unlikely]]
  416974:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  41697b:	48 89 c7             	mov    %rax,%rdi
  41697e:	e8 91 fc ff ff       	call   416614 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>
  416983:	84 c0                	test   %al,%al
  416985:	74 0a                	je     416991 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0x47>
	return 0;
  416987:	b8 00 00 00 00       	mov    $0x0,%eax
  41698c:	e9 95 00 00 00       	jmp    416a26 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0xdc>
      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
  416991:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  416998:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  41699f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4169a3:	48 89 ce             	mov    %rcx,%rsi
  4169a6:	48 89 c7             	mov    %rax,%rdi
  4169a9:	e8 34 14 00 00       	call   417de2 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>
      auto __it = __gc.begin();
  4169ae:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4169b2:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  4169b6:	48 89 d6             	mov    %rdx,%rsi
  4169b9:	48 89 c7             	mov    %rax,%rdi
  4169bc:	e8 35 fd ff ff       	call   4166f6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
      const auto __end = __gc.end();
  4169c1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4169c5:	48 89 c7             	mov    %rax,%rdi
  4169c8:	e8 9d fd ff ff       	call   41676a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>
  4169cd:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      size_t __n = __it.width();
  4169d4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4169d8:	48 89 c7             	mov    %rax,%rdi
  4169db:	e8 a4 fd ff ff       	call   416784 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  4169e0:	48 98                	cltq
  4169e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (++__it != __end)
  4169e6:	eb 12                	jmp    4169fa <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0xb0>
	__n += __it.width();
  4169e8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4169ec:	48 89 c7             	mov    %rax,%rdi
  4169ef:	e8 90 fd ff ff       	call   416784 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  4169f4:	48 98                	cltq
  4169f6:	48 01 45 f8          	add    %rax,-0x8(%rbp)
      while (++__it != __end)
  4169fa:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4169fe:	48 89 c7             	mov    %rax,%rdi
  416a01:	e8 94 14 00 00       	call   417e9a <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>
  416a06:	48 89 c2             	mov    %rax,%rdx
  416a09:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  416a10:	48 89 c6             	mov    %rax,%rsi
  416a13:	48 89 d7             	mov    %rdx,%rdi
  416a16:	e8 7d 16 00 00       	call   418098 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>
  416a1b:	83 f0 01             	xor    $0x1,%eax
  416a1e:	84 c0                	test   %al,%al
  416a20:	75 c6                	jne    4169e8 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0x9e>
      return __n;
  416a22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  416a26:	c9                   	leave
  416a27:	c3                   	ret

0000000000416a28 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_>:
	_S_to_character(_Int __i)
  416a28:	55                   	push   %rbp
  416a29:	48 89 e5             	mov    %rsp,%rbp
  416a2c:	48 83 ec 10          	sub    $0x10,%rsp
  416a30:	48 89 f8             	mov    %rdi,%rax
  416a33:	48 89 f1             	mov    %rsi,%rcx
  416a36:	48 89 c0             	mov    %rax,%rax
  416a39:	ba 00 00 00 00       	mov    $0x0,%edx
  416a3e:	48 89 ca             	mov    %rcx,%rdx
  416a41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  416a45:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  416a49:	ba 7f 00 00 00       	mov    $0x7f,%edx
  416a4e:	b8 00 00 00 00       	mov    $0x0,%eax
  416a53:	48 3b 55 f0          	cmp    -0x10(%rbp),%rdx
  416a57:	48 1b 45 f8          	sbb    -0x8(%rbp),%rax
  416a5b:	7c 06                	jl     416a63 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_+0x3b>
	    return static_cast<_CharT>(__i);
  416a5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416a61:	eb 0a                	jmp    416a6d <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_+0x45>
	  __throw_format_error("format error: integer not representable as "
  416a63:	bf 08 b4 41 00       	mov    $0x41b408,%edi
  416a68:	e8 ea e6 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	}
  416a6d:	c9                   	leave
  416a6e:	c3                   	ret

0000000000416a6f <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  416a6f:	55                   	push   %rbp
  416a70:	48 89 e5             	mov    %rsp,%rbp
  416a73:	48 83 ec 30          	sub    $0x30,%rsp
  416a77:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416a7b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  416a7f:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  416a83:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  416a87:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  416a8b:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  416a8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416a92:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416a96:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  416a9a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  416a9e:	41 89 c8             	mov    %ecx,%r8d
  416aa1:	48 89 d1             	mov    %rdx,%rcx
  416aa4:	48 89 c2             	mov    %rax,%rdx
  416aa7:	e8 ac 03 00 00       	call   416e58 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i>
  416aac:	c9                   	leave
  416aad:	c3                   	ret

0000000000416aae <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_>:
	_S_to_character(_Int __i)
  416aae:	55                   	push   %rbp
  416aaf:	48 89 e5             	mov    %rsp,%rbp
  416ab2:	48 83 ec 10          	sub    $0x10,%rsp
  416ab6:	48 89 f8             	mov    %rdi,%rax
  416ab9:	48 89 f1             	mov    %rsi,%rcx
  416abc:	48 89 c0             	mov    %rax,%rax
  416abf:	ba 00 00 00 00       	mov    $0x0,%edx
  416ac4:	48 89 ca             	mov    %rcx,%rdx
  416ac7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  416acb:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  416acf:	ba 7f 00 00 00       	mov    $0x7f,%edx
  416ad4:	b8 00 00 00 00       	mov    $0x0,%eax
  416ad9:	48 3b 55 f0          	cmp    -0x10(%rbp),%rdx
  416add:	48 1b 45 f8          	sbb    -0x8(%rbp),%rax
  416ae1:	72 06                	jb     416ae9 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_+0x3b>
	    return static_cast<_CharT>(__i);
  416ae3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416ae7:	eb 0a                	jmp    416af3 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_+0x45>
	  __throw_format_error("format error: integer not representable as "
  416ae9:	bf 08 b4 41 00       	mov    $0x41b408,%edi
  416aee:	e8 64 e6 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
	}
  416af3:	c9                   	leave
  416af4:	c3                   	ret

0000000000416af5 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
  416af5:	55                   	push   %rbp
  416af6:	48 89 e5             	mov    %rsp,%rbp
  416af9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  416afd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416b01:	5d                   	pop    %rbp
  416b02:	c3                   	ret

0000000000416b03 <_ZNSt6ranges14__copy_or_moveILb0EN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES6_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESG_EESE_T1_SF_>:
    __copy_or_move(_Iter __first, _Sent __last, _Out __result)
  416b03:	55                   	push   %rbp
  416b04:	48 89 e5             	mov    %rsp,%rbp
  416b07:	41 54                	push   %r12
  416b09:	53                   	push   %rbx
  416b0a:	48 83 ec 40          	sub    $0x40,%rsp
  416b0e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  416b12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  416b16:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
					      std::move(__result));
  416b1a:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  416b1e:	48 89 c7             	mov    %rax,%rdi
  416b21:	e8 8d 2e ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416b26:	49 89 c4             	mov    %rax,%r12
	    = ranges::__copy_or_move<_IsMove>(__first.base(), __last.base(),
  416b29:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  416b2d:	48 89 c7             	mov    %rax,%rdi
  416b30:	e8 ed 5c ff ff       	call   40c822 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  416b35:	48 8b 18             	mov    (%rax),%rbx
  416b38:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  416b3c:	48 89 c7             	mov    %rax,%rdi
  416b3f:	e8 de 5c ff ff       	call   40c822 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  416b44:	48 8b 00             	mov    (%rax),%rax
  416b47:	49 8b 14 24          	mov    (%r12),%rdx
  416b4b:	48 89 de             	mov    %rbx,%rsi
  416b4e:	48 89 c7             	mov    %rax,%rdi
  416b51:	e8 ce 16 00 00       	call   418224 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_>
  416b56:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  416b5a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  return {decltype(__first){__in}, std::move(__out)};
  416b5e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  416b62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  416b66:	48 89 d6             	mov    %rdx,%rsi
  416b69:	48 89 c7             	mov    %rax,%rdi
  416b6c:	e8 57 5c ff ff       	call   40c7c8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  416b71:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  416b75:	48 83 c0 08          	add    $0x8,%rax
  416b79:	48 89 c7             	mov    %rax,%rdi
  416b7c:	e8 32 2e ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416b81:	48 8b 00             	mov    (%rax),%rax
  416b84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  416b88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416b8c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  416b90:	48 83 c4 40          	add    $0x40,%rsp
  416b94:	5b                   	pop    %rbx
  416b95:	41 5c                	pop    %r12
  416b97:	5d                   	pop    %rbp
  416b98:	c3                   	ret

0000000000416b99 <_ZSt4moveIRZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmEUlT_T0_E_EONSt16remove_referenceIS9_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
  416b99:	55                   	push   %rbp
  416b9a:	48 89 e5             	mov    %rsp,%rbp
  416b9d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  416ba1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416ba5:	5d                   	pop    %rbp
  416ba6:	c3                   	ret

0000000000416ba7 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
  416ba7:	55                   	push   %rbp
  416ba8:	48 89 e5             	mov    %rsp,%rbp
  416bab:	53                   	push   %rbx
  416bac:	48 83 ec 18          	sub    $0x18,%rsp
  416bb0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  416bb4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const _CharT* __rhs)
    {
      return __lhs.size() == _Traits::length(__rhs)
  416bb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416bbc:	48 89 c7             	mov    %rax,%rdi
  416bbf:	e8 8a e1 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416bc4:	48 89 c3             	mov    %rax,%rbx
  416bc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416bcb:	48 89 c7             	mov    %rax,%rdi
  416bce:	e8 4f dc fe ff       	call   404822 <_ZNSt11char_traitsIcE6lengthEPKc>
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
  416bd3:	48 39 c3             	cmp    %rax,%rbx
  416bd6:	75 3b                	jne    416c13 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x6c>
  416bd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416bdc:	48 89 c7             	mov    %rax,%rdi
  416bdf:	e8 6a e1 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416be4:	48 89 c3             	mov    %rax,%rbx
  416be7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416beb:	48 89 c7             	mov    %rax,%rdi
  416bee:	e8 89 2b ff ff       	call   40977c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  416bf3:	48 89 c1             	mov    %rax,%rcx
  416bf6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416bfa:	48 89 da             	mov    %rbx,%rdx
  416bfd:	48 89 c6             	mov    %rax,%rsi
  416c00:	48 89 cf             	mov    %rcx,%rdi
  416c03:	e8 5a db fe ff       	call   404762 <_ZNSt11char_traitsIcE7compareEPKcS2_m>
  416c08:	85 c0                	test   %eax,%eax
  416c0a:	75 07                	jne    416c13 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x6c>
  416c0c:	b8 01 00 00 00       	mov    $0x1,%eax
  416c11:	eb 05                	jmp    416c18 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x71>
  416c13:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  416c18:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416c1c:	c9                   	leave
  416c1d:	c3                   	ret

0000000000416c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
	assign(const _Tp& __svt)
  416c1e:	55                   	push   %rbp
  416c1f:	48 89 e5             	mov    %rsp,%rbp
  416c22:	53                   	push   %rbx
  416c23:	48 83 ec 28          	sub    $0x28,%rsp
  416c27:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  416c2b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  __sv_type __sv = __svt;
  416c2f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416c33:	48 8b 50 08          	mov    0x8(%rax),%rdx
  416c37:	48 8b 00             	mov    (%rax),%rax
  416c3a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  416c3e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  return this->assign(__sv.data(), __sv.size());
  416c42:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  416c46:	48 89 c7             	mov    %rax,%rdi
  416c49:	e8 86 f0 fe ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  416c4e:	48 89 c3             	mov    %rax,%rbx
  416c51:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  416c55:	48 89 c7             	mov    %rax,%rdi
  416c58:	e8 3b 08 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  416c5d:	48 89 c1             	mov    %rax,%rcx
  416c60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416c64:	48 89 da             	mov    %rbx,%rdx
  416c67:	48 89 ce             	mov    %rcx,%rsi
  416c6a:	48 89 c7             	mov    %rax,%rdi
  416c6d:	e8 d2 17 00 00       	call   418444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm>
	}
  416c72:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416c76:	c9                   	leave
  416c77:	c3                   	ret

0000000000416c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
      push_back(_CharT __c)
  416c78:	55                   	push   %rbp
  416c79:	48 89 e5             	mov    %rsp,%rbp
  416c7c:	53                   	push   %rbx
  416c7d:	48 83 ec 28          	sub    $0x28,%rsp
  416c81:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  416c85:	89 f0                	mov    %esi,%eax
  416c87:	88 45 d4             	mov    %al,-0x2c(%rbp)
	const size_type __size = this->size();
  416c8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416c8e:	48 89 c7             	mov    %rax,%rdi
  416c91:	e8 b8 e0 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416c96:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__size + 1 > this->capacity())
  416c9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416c9e:	48 8d 58 01          	lea    0x1(%rax),%rbx
  416ca2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416ca6:	48 89 c7             	mov    %rax,%rdi
  416ca9:	e8 ca 45 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  416cae:	48 39 d8             	cmp    %rbx,%rax
  416cb1:	0f 92 c0             	setb   %al
  416cb4:	84 c0                	test   %al,%al
  416cb6:	74 20                	je     416cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x60>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
  416cb8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  416cbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416cc0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  416cc6:	b9 00 00 00 00       	mov    $0x0,%ecx
  416ccb:	ba 00 00 00 00       	mov    $0x0,%edx
  416cd0:	48 89 c7             	mov    %rax,%rdi
  416cd3:	e8 32 63 ff ff       	call   40d00a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
	traits_type::assign(this->_M_data()[__size], __c);
  416cd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416cdc:	48 89 c7             	mov    %rax,%rdi
  416cdf:	e8 f0 07 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416ce4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416ce8:	48 01 c2             	add    %rax,%rdx
  416ceb:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
  416cef:	48 89 c6             	mov    %rax,%rsi
  416cf2:	48 89 d7             	mov    %rdx,%rdi
  416cf5:	e8 e6 d9 fe ff       	call   4046e0 <_ZNSt11char_traitsIcE6assignERcRKc>
	this->_M_set_length(__size + 1);
  416cfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416cfe:	48 8d 50 01          	lea    0x1(%rax),%rdx
  416d02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416d06:	48 89 d6             	mov    %rdx,%rsi
  416d09:	48 89 c7             	mov    %rax,%rdi
  416d0c:	e8 d5 07 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  416d11:	90                   	nop
  416d12:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416d16:	c9                   	leave
  416d17:	c3                   	ret

0000000000416d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>:
    basic_string<_CharT, _Traits, _Alloc>::
  416d18:	55                   	push   %rbp
  416d19:	48 89 e5             	mov    %rsp,%rbp
  416d1c:	53                   	push   %rbx
  416d1d:	48 83 ec 58          	sub    $0x58,%rsp
  416d21:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  416d25:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  416d29:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  416d2d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  416d31:	44 89 c0             	mov    %r8d,%eax
  416d34:	88 45 ac             	mov    %al,-0x54(%rbp)
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
  416d37:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  416d3b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  416d3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d43:	b9 3f b4 41 00       	mov    $0x41b43f,%ecx
  416d48:	48 89 c7             	mov    %rax,%rdi
  416d4b:	e8 e0 5a ff ff       	call   40c830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
      const size_type __old_size = this->size();
  416d50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d54:	48 89 c7             	mov    %rax,%rdi
  416d57:	e8 f2 df fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416d5c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      const size_type __new_size = __old_size + __n2 - __n1;
  416d60:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416d64:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  416d68:	48 01 d0             	add    %rdx,%rax
  416d6b:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  416d6f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__new_size <= this->capacity())
  416d73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d77:	48 89 c7             	mov    %rax,%rdi
  416d7a:	e8 f9 44 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  416d7f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  416d83:	0f 93 c0             	setae  %al
  416d86:	84 c0                	test   %al,%al
  416d88:	74 61                	je     416deb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xd3>
	  pointer __p = this->_M_data() + __pos1;
  416d8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d8e:	48 89 c7             	mov    %rax,%rdi
  416d91:	e8 3e 07 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416d96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  416d9a:	48 01 d0             	add    %rdx,%rax
  416d9d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  const size_type __how_much = __old_size - __pos1 - __n1;
  416da1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416da5:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  416da9:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  416dad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  if (__how_much && __n1 != __n2)
  416db1:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  416db6:	74 53                	je     416e0b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
  416db8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416dbc:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  416dc0:	74 49                	je     416e0b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
  416dc2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416dc6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416dca:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  416dce:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416dd2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  416dd6:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  416dda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416dde:	48 89 c2             	mov    %rax,%rdx
  416de1:	48 89 cf             	mov    %rcx,%rdi
  416de4:	e8 d6 61 ff ff       	call   40cfbf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
  416de9:	eb 20                	jmp    416e0b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
	this->_M_mutate(__pos1, __n1, 0, __n2);
  416deb:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  416def:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  416df3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  416df7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416dfb:	49 89 c8             	mov    %rcx,%r8
  416dfe:	b9 00 00 00 00       	mov    $0x0,%ecx
  416e03:	48 89 c7             	mov    %rax,%rdi
  416e06:	e8 ff 61 ff ff       	call   40d00a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
      if (__n2)
  416e0b:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  416e10:	74 29                	je     416e3b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0x123>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
  416e12:	0f be 5d ac          	movsbl -0x54(%rbp),%ebx
  416e16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e1a:	48 89 c7             	mov    %rax,%rdi
  416e1d:	e8 b2 06 ff ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416e22:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  416e26:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  416e2a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  416e2e:	89 da                	mov    %ebx,%edx
  416e30:	48 89 c6             	mov    %rax,%rsi
  416e33:	48 89 cf             	mov    %rcx,%rdi
  416e36:	e8 50 16 00 00       	call   41848b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc>
      this->_M_set_length(__new_size);
  416e3b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  416e3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e43:	48 89 d6             	mov    %rdx,%rsi
  416e46:	48 89 c7             	mov    %rax,%rdi
  416e49:	e8 98 06 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  416e4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    }
  416e52:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416e56:	c9                   	leave
  416e57:	c3                   	ret

0000000000416e58 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  416e58:	55                   	push   %rbp
  416e59:	48 89 e5             	mov    %rsp,%rbp
  416e5c:	48 83 ec 40          	sub    $0x40,%rsp
  416e60:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  416e64:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  416e68:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  416e6c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  416e70:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
  416e74:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  416e79:	84 c0                	test   %al,%al
  416e7b:	74 30                	je     416ead <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x55>
  416e7d:	83 7d cc 01          	cmpl   $0x1,-0x34(%rbp)
  416e81:	0f 9e c0             	setle  %al
  416e84:	0f b6 c0             	movzbl %al,%eax
  416e87:	48 85 c0             	test   %rax,%rax
  416e8a:	75 0f                	jne    416e9b <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x43>
  416e8c:	83 7d cc 24          	cmpl   $0x24,-0x34(%rbp)
  416e90:	0f 9f c0             	setg   %al
  416e93:	0f b6 c0             	movzbl %al,%eax
  416e96:	48 85 c0             	test   %rax,%rax
  416e99:	74 07                	je     416ea2 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x4a>
  416e9b:	b8 01 00 00 00       	mov    $0x1,%eax
  416ea0:	eb 05                	jmp    416ea7 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x4f>
  416ea2:	b8 00 00 00 00       	mov    $0x0,%eax
  416ea7:	0f b6 c0             	movzbl %al,%eax
  416eaa:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  416ead:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416eb1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416eb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  416eb9:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  416ebd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416ec1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  416ec5:	75 20                	jne    416ee7 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x8f>
	return { __last, errc::value_too_large };
  416ec7:	4c 8b 55 e0          	mov    -0x20(%rbp),%r10
  416ecb:	4c 89 da             	mov    %r11,%rdx
  416ece:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  416ed5:	ff ff ff
  416ed8:	48 21 d0             	and    %rdx,%rax
  416edb:	48 83 c8 4b          	or     $0x4b,%rax
  416edf:	49 89 c3             	mov    %rax,%r11
  416ee2:	e9 1c 01 00 00       	jmp    417003 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
      if (__value == 0)
  416ee7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416eeb:	48 0b 45 d8          	or     -0x28(%rbp),%rax
  416eef:	75 2a                	jne    416f1b <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0xc3>
	  *__first = '0';
  416ef1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416ef5:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  416ef8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416efc:	48 83 c0 01          	add    $0x1,%rax
  416f00:	49 89 c2             	mov    %rax,%r10
  416f03:	4c 89 da             	mov    %r11,%rdx
  416f06:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  416f0d:	ff ff ff
  416f10:	48 21 d0             	and    %rdx,%rax
  416f13:	49 89 c3             	mov    %rax,%r11
  416f16:	e9 e8 00 00 00       	jmp    417003 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
      switch (__base)
  416f1b:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  416f1f:	74 2b                	je     416f4c <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0xf4>
  416f21:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  416f25:	0f 8f b0 00 00 00    	jg     416fdb <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
  416f2b:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
  416f2f:	74 41                	je     416f72 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x11a>
  416f31:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
  416f35:	0f 8f a0 00 00 00    	jg     416fdb <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
  416f3b:	83 7d cc 02          	cmpl   $0x2,-0x34(%rbp)
  416f3f:	74 77                	je     416fb8 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x160>
  416f41:	83 7d cc 08          	cmpl   $0x8,-0x34(%rbp)
  416f45:	74 4e                	je     416f95 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x13d>
  416f47:	e9 8f 00 00 00       	jmp    416fdb <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  416f4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416f50:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416f54:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416f58:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416f5c:	48 89 d1             	mov    %rdx,%rcx
  416f5f:	48 89 c2             	mov    %rax,%rdx
  416f62:	e8 a8 15 00 00       	call   41850f <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_>
  416f67:	49 89 c2             	mov    %rax,%r10
  416f6a:	49 89 d3             	mov    %rdx,%r11
  416f6d:	e9 91 00 00 00       	jmp    417003 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  416f72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416f76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416f7a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416f7e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416f82:	48 89 d1             	mov    %rdx,%rcx
  416f85:	48 89 c2             	mov    %rax,%rdx
  416f88:	e8 73 18 00 00       	call   418800 <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_>
  416f8d:	49 89 c2             	mov    %rax,%r10
  416f90:	49 89 d3             	mov    %rdx,%r11
  416f93:	eb 6e                	jmp    417003 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  416f95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416f99:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416f9d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416fa1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416fa5:	48 89 d1             	mov    %rdx,%rcx
  416fa8:	48 89 c2             	mov    %rax,%rdx
  416fab:	e8 f1 18 00 00       	call   4188a1 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_>
  416fb0:	49 89 c2             	mov    %rax,%r10
  416fb3:	49 89 d3             	mov    %rdx,%r11
  416fb6:	eb 4b                	jmp    417003 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  416fb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416fbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416fc0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416fc4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416fc8:	48 89 d1             	mov    %rdx,%rcx
  416fcb:	48 89 c2             	mov    %rax,%rdx
  416fce:	e8 9d 1a 00 00       	call   418a70 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_>
  416fd3:	49 89 c2             	mov    %rax,%r10
  416fd6:	49 89 d3             	mov    %rdx,%r11
  416fd9:	eb 28                	jmp    417003 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  416fdb:	8b 4d cc             	mov    -0x34(%rbp),%ecx
  416fde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416fe2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416fe6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416fea:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416fee:	41 89 c8             	mov    %ecx,%r8d
  416ff1:	48 89 d1             	mov    %rdx,%rcx
  416ff4:	48 89 c2             	mov    %rax,%rdx
  416ff7:	e8 47 1b 00 00       	call   418b43 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i>
  416ffc:	49 89 c2             	mov    %rax,%r10
  416fff:	49 89 d3             	mov    %rdx,%r11
  417002:	90                   	nop
    }
  417003:	4c 89 d0             	mov    %r10,%rax
  417006:	4c 89 da             	mov    %r11,%rdx
  417009:	c9                   	leave
  41700a:	c3                   	ret
  41700b:	90                   	nop

000000000041700c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>:
      copy(_CharT* __str, size_type __n, size_type __pos = 0) const
  41700c:	55                   	push   %rbp
  41700d:	48 89 e5             	mov    %rsp,%rbp
  417010:	48 83 ec 30          	sub    $0x30,%rsp
  417014:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417018:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  41701c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  417020:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	__pos = std::__sv_check(size(), __pos, "basic_string_view::copy");
  417024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417028:	48 89 c7             	mov    %rax,%rdi
  41702b:	e8 a4 ec fe ff       	call   405cd4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  417030:	48 89 c1             	mov    %rax,%rcx
  417033:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417037:	ba 5c b4 41 00       	mov    $0x41b45c,%edx
  41703c:	48 89 c6             	mov    %rax,%rsi
  41703f:	48 89 cf             	mov    %rcx,%rdi
  417042:	e8 8d d9 fe ff       	call   4049d4 <_ZSt10__sv_checkmmPKc>
  417047:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
  41704b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41704f:	48 8b 00             	mov    (%rax),%rax
  417052:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  417056:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  41705a:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  41705e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  417062:	48 89 d6             	mov    %rdx,%rsi
  417065:	48 89 c7             	mov    %rax,%rdi
  417068:	e8 a9 37 ff ff       	call   40a816 <_ZSt3minImERKT_S2_S2_>
  41706d:	48 8b 00             	mov    (%rax),%rax
  417070:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	traits_type::copy(__str, data() + __pos, __rlen);
  417074:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417078:	48 89 c7             	mov    %rax,%rdi
  41707b:	e8 18 04 ff ff       	call   407498 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  417080:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  417084:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  417088:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41708c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417090:	48 89 ce             	mov    %rcx,%rsi
  417093:	48 89 c7             	mov    %rax,%rdi
  417096:	e8 79 d8 fe ff       	call   404914 <_ZNSt11char_traitsIcE4copyEPcPKcm>
	return __rlen;
  41709b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  41709f:	c9                   	leave
  4170a0:	c3                   	ret
  4170a1:	90                   	nop

00000000004170a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>:
      assign(const basic_string& __str)
  4170a2:	55                   	push   %rbp
  4170a3:	48 89 e5             	mov    %rsp,%rbp
  4170a6:	53                   	push   %rbx
  4170a7:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  4170ae:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  4170b5:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    { return _Base_type::propagate_on_container_copy_assignment::value; }
  4170bc:	b8 00 00 00 00       	mov    $0x0,%eax
	if (_Alloc_traits::_S_propagate_on_copy_assign())
  4170c1:	84 c0                	test   %al,%al
  4170c3:	0f 84 03 02 00 00    	je     4172cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x22a>
    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }
  4170c9:	b8 01 00 00 00       	mov    $0x1,%eax
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  4170ce:	83 f0 01             	xor    $0x1,%eax
		&& _M_get_allocator() != __str._M_get_allocator())
  4170d1:	84 c0                	test   %al,%al
  4170d3:	74 52                	je     417127 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  4170d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4170dc:	48 89 c7             	mov    %rax,%rdi
  4170df:	e8 2a 07 ff ff       	call   40780e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  4170e4:	83 f0 01             	xor    $0x1,%eax
  4170e7:	84 c0                	test   %al,%al
  4170e9:	74 3c                	je     417127 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
		&& _M_get_allocator() != __str._M_get_allocator())
  4170eb:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4170f2:	48 89 c7             	mov    %rax,%rdi
  4170f5:	e8 20 4e ff ff       	call   40bf1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4170fa:	48 89 c3             	mov    %rax,%rbx
  4170fd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417104:	48 89 c7             	mov    %rax,%rdi
  417107:	e8 f4 06 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41710c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  417110:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
#endif // C++20

      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
      bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }
  417114:	b8 01 00 00 00       	mov    $0x1,%eax
  417119:	83 f0 01             	xor    $0x1,%eax
  41711c:	84 c0                	test   %al,%al
  41711e:	74 07                	je     417127 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
  417120:	b8 01 00 00 00       	mov    $0x1,%eax
  417125:	eb 05                	jmp    41712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x8a>
  417127:	b8 00 00 00 00       	mov    $0x0,%eax
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  41712c:	84 c0                	test   %al,%al
  41712e:	0f 84 6e 01 00 00    	je     4172a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x200>
		if (__str.size() <= _S_local_capacity)
  417134:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  41713b:	48 89 c7             	mov    %rax,%rdi
  41713e:	e8 0b dc fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417143:	48 83 f8 0f          	cmp    $0xf,%rax
  417147:	0f 96 c0             	setbe  %al
  41714a:	84 c0                	test   %al,%al
  41714c:	0f 84 9d 00 00 00    	je     4171ef <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x14d>
		    _M_destroy(_M_allocated_capacity);
  417152:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417159:	48 8b 50 10          	mov    0x10(%rax),%rdx
  41715d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417164:	48 89 d6             	mov    %rdx,%rsi
  417167:	48 89 c7             	mov    %rax,%rdi
  41716a:	e8 75 40 ff ff       	call   40b1e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
  41716f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417176:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  41717a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41717e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (std::is_constant_evaluated())
  417182:	e8 b3 d4 fe ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  417187:	84 c0                	test   %al,%al
  417189:	74 28                	je     4171b3 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x111>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  41718b:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  417192:	00
  417193:	eb 17                	jmp    4171ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x10a>
	    _M_local_buf[__i] = _CharT();
  417195:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417199:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41719d:	48 01 d0             	add    %rdx,%rax
  4171a0:	48 83 c0 10          	add    $0x10,%rax
  4171a4:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4171a7:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
  4171ac:	48 83 7d b8 0f       	cmpq   $0xf,-0x48(%rbp)
  4171b1:	76 e2                	jbe    417195 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0xf3>
      }
  4171b3:	90                   	nop
	return _M_local_data();
  4171b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4171b8:	48 89 c7             	mov    %rax,%rdi
  4171bb:	e8 56 d8 fe ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4171c0:	48 89 c2             	mov    %rax,%rdx
  4171c3:	90                   	nop
		    _M_data(_M_use_local_data());
  4171c4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4171cb:	48 89 d6             	mov    %rdx,%rsi
  4171ce:	48 89 c7             	mov    %rax,%rdi
  4171d1:	e8 70 25 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_set_length(0);
  4171d6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4171dd:	be 00 00 00 00       	mov    $0x0,%esi
  4171e2:	48 89 c7             	mov    %rax,%rdi
  4171e5:	e8 fc 02 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  4171ea:	e9 b3 00 00 00       	jmp    4172a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x200>
		    const auto __len = __str.size();
  4171ef:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4171f6:	48 89 c7             	mov    %rax,%rdi
  4171f9:	e8 50 db fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4171fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    auto __alloc = __str._M_get_allocator();
  417202:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  417209:	48 89 c7             	mov    %rax,%rdi
  41720c:	e8 09 4d ff ff       	call   40bf1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  417211:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  417215:	48 8d 45 8f          	lea    -0x71(%rbp),%rax
  417219:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  41721d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  417221:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  417225:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  417226:	90                   	nop
		    auto __ptr = _S_allocate(__alloc, __len + 1);
  417227:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41722b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  41722f:	48 8d 45 8f          	lea    -0x71(%rbp),%rax
  417233:	48 89 d6             	mov    %rdx,%rsi
  417236:	48 89 c7             	mov    %rax,%rdi
  417239:	e8 16 4d ff ff       	call   40bf54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
  41723e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    _M_destroy(_M_allocated_capacity);
  417242:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417249:	48 8b 50 10          	mov    0x10(%rax),%rdx
  41724d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417254:	48 89 d6             	mov    %rdx,%rsi
  417257:	48 89 c7             	mov    %rax,%rdi
  41725a:	e8 85 3f ff ff       	call   40b1e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
		    _M_data(__ptr);
  41725f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  417263:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41726a:	48 89 d6             	mov    %rdx,%rsi
  41726d:	48 89 c7             	mov    %rax,%rdi
  417270:	e8 d1 24 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_capacity(__len);
  417275:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417279:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417280:	48 89 d6             	mov    %rdx,%rsi
  417283:	48 89 c7             	mov    %rax,%rdi
  417286:	e8 d5 24 ff ff       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
		    _M_set_length(__len);
  41728b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41728f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417296:	48 89 d6             	mov    %rdx,%rsi
  417299:	48 89 c7             	mov    %rax,%rdi
  41729c:	e8 45 02 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      ~allocator() _GLIBCXX_NOTHROW { }
  4172a1:	90                   	nop
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
  4172a2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4172a9:	48 89 c7             	mov    %rax,%rdi
  4172ac:	e8 69 4c ff ff       	call   40bf1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4172b1:	48 89 c3             	mov    %rax,%rbx
  4172b4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4172bb:	48 89 c7             	mov    %rax,%rdi
  4172be:	e8 3d 05 ff ff       	call   407800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4172c3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  4172c7:	48 89 5d 90          	mov    %rbx,-0x70(%rbp)
    }
  4172cb:	90                   	nop
	this->_M_assign(__str);
  4172cc:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  4172d3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4172da:	48 89 d6             	mov    %rdx,%rsi
  4172dd:	48 89 c7             	mov    %rax,%rdi
  4172e0:	e8 49 1a 00 00       	call   418d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	return *this;
  4172e5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4172ec:	eb 09                	jmp    4172f7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x255>
  4172ee:	90                   	nop
  4172ef:	48 89 c7             	mov    %rax,%rdi
  4172f2:	e8 19 d1 fe ff       	call   404410 <_Unwind_Resume@plt>
      }
  4172f7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4172fb:	c9                   	leave
  4172fc:	c3                   	ret
  4172fd:	90                   	nop

00000000004172fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
  4172fe:	55                   	push   %rbp
  4172ff:	48 89 e5             	mov    %rsp,%rbp
  417302:	48 83 ec 10          	sub    $0x10,%rsp
  417306:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_set_length(0); }
  41730a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41730e:	be 00 00 00 00       	mov    $0x0,%esi
  417313:	48 89 c7             	mov    %rax,%rdi
  417316:	e8 cb 01 ff ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  41731b:	90                   	nop
  41731c:	c9                   	leave
  41731d:	c3                   	ret

000000000041731e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
      assign(const _CharT* __s)
  41731e:	55                   	push   %rbp
  41731f:	48 89 e5             	mov    %rsp,%rbp
  417322:	53                   	push   %rbx
  417323:	48 83 ec 18          	sub    $0x18,%rsp
  417327:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  41732b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	return _M_replace(size_type(0), this->size(), __s,
  41732f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417333:	48 89 c7             	mov    %rax,%rdi
  417336:	e8 e7 d4 fe ff       	call   404822 <_ZNSt11char_traitsIcE6lengthEPKc>
  41733b:	48 89 c3             	mov    %rax,%rbx
  41733e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417342:	48 89 c7             	mov    %rax,%rdi
  417345:	e8 04 da fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41734a:	48 89 c6             	mov    %rax,%rsi
  41734d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  417351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417355:	49 89 d8             	mov    %rbx,%r8
  417358:	48 89 d1             	mov    %rdx,%rcx
  41735b:	48 89 f2             	mov    %rsi,%rdx
  41735e:	be 00 00 00 00       	mov    $0x0,%esi
  417363:	48 89 c7             	mov    %rax,%rdi
  417366:	e8 7b 50 ff ff       	call   40c3e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
  41736b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41736f:	c9                   	leave
  417370:	c3                   	ret

0000000000417371 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>:
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
  417371:	55                   	push   %rbp
  417372:	48 89 e5             	mov    %rsp,%rbp
  417375:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  417379:	89 f0                	mov    %esi,%eax
  41737b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  41737f:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  417383:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  417387:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
  41738b:	88 45 d4             	mov    %al,-0x2c(%rbp)
		   const char* __gbeg, size_t __gsize,
		   const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
  41738e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  417395:	00
      size_t __ctr = 0;
  417396:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  41739d:	00

      while (__last - __first > __gbeg[__idx]
  41739e:	eb 33                	jmp    4173d3 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x62>
	     && static_cast<signed char>(__gbeg[__idx]) > 0
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
	{
	  __last -= __gbeg[__idx];
  4173a0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4173a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4173a8:	48 01 d0             	add    %rdx,%rax
  4173ab:	0f b6 00             	movzbl (%rax),%eax
  4173ae:	48 0f be c0          	movsbq %al,%rax
  4173b2:	48 f7 d8             	neg    %rax
  4173b5:	48 01 45 b0          	add    %rax,-0x50(%rbp)
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
  4173b9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4173bd:	48 83 e8 01          	sub    $0x1,%rax
  4173c1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4173c5:	73 07                	jae    4173ce <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x5d>
  4173c7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  4173cc:	eb 05                	jmp    4173d3 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x62>
  4173ce:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      while (__last - __first > __gbeg[__idx]
  4173d3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4173d7:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  4173db:	48 89 c2             	mov    %rax,%rdx
  4173de:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  4173e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4173e6:	48 01 c8             	add    %rcx,%rax
  4173e9:	0f b6 00             	movzbl (%rax),%eax
  4173ec:	48 0f be c0          	movsbq %al,%rax
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
  4173f0:	48 39 c2             	cmp    %rax,%rdx
  4173f3:	7e 43                	jle    417438 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	     && static_cast<signed char>(__gbeg[__idx]) > 0
  4173f5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4173f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4173fd:	48 01 d0             	add    %rdx,%rax
  417400:	0f b6 00             	movzbl (%rax),%eax
  417403:	84 c0                	test   %al,%al
  417405:	7e 31                	jle    417438 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
  417407:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41740b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41740f:	48 01 d0             	add    %rdx,%rax
  417412:	0f b6 00             	movzbl (%rax),%eax
  417415:	3c 7f                	cmp    $0x7f,%al
  417417:	75 87                	jne    4173a0 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x2f>
	}

      while (__first != __last)
  417419:	eb 1d                	jmp    417438 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	*__s++ = *__first++;
  41741b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41741f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  417423:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  417427:	0f b6 10             	movzbl (%rax),%edx
  41742a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41742e:	48 8d 48 01          	lea    0x1(%rax),%rcx
  417432:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  417436:	88 10                	mov    %dl,(%rax)
      while (__first != __last)
  417438:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41743c:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  417440:	75 d9                	jne    41741b <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xaa>

      while (__ctr--)
  417442:	eb 52                	jmp    417496 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x125>
	{
	  *__s++ = __sep;
  417444:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  417448:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41744c:	48 8d 48 01          	lea    0x1(%rax),%rcx
  417450:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  417454:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  417456:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41745a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41745e:	48 01 d0             	add    %rdx,%rax
  417461:	0f b6 00             	movzbl (%rax),%eax
  417464:	88 45 ef             	mov    %al,-0x11(%rbp)
  417467:	eb 27                	jmp    417490 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x11f>
	    *__s++ = *__first++;
  417469:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41746d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  417471:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  417475:	0f b6 10             	movzbl (%rax),%edx
  417478:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41747c:	48 8d 48 01          	lea    0x1(%rax),%rcx
  417480:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  417484:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  417486:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  41748a:	83 e8 01             	sub    $0x1,%eax
  41748d:	88 45 ef             	mov    %al,-0x11(%rbp)
  417490:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  417494:	7f d3                	jg     417469 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xf8>
      while (__ctr--)
  417496:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41749a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  41749e:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  4174a2:	48 85 c0             	test   %rax,%rax
  4174a5:	0f 95 c0             	setne  %al
  4174a8:	84 c0                	test   %al,%al
  4174aa:	75 98                	jne    417444 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xd3>
	}

      while (__idx--)
  4174ac:	eb 52                	jmp    417500 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x18f>
	{
	  *__s++ = __sep;
  4174ae:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  4174b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4174b6:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4174ba:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  4174be:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  4174c0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4174c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4174c8:	48 01 d0             	add    %rdx,%rax
  4174cb:	0f b6 00             	movzbl (%rax),%eax
  4174ce:	88 45 ee             	mov    %al,-0x12(%rbp)
  4174d1:	eb 27                	jmp    4174fa <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x189>
	    *__s++ = *__first++;
  4174d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4174d7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4174db:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4174df:	0f b6 10             	movzbl (%rax),%edx
  4174e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4174e6:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4174ea:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  4174ee:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  4174f0:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  4174f4:	83 e8 01             	sub    $0x1,%eax
  4174f7:	88 45 ee             	mov    %al,-0x12(%rbp)
  4174fa:	80 7d ee 00          	cmpb   $0x0,-0x12(%rbp)
  4174fe:	7f d3                	jg     4174d3 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x162>
      while (__idx--)
  417500:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417504:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  417508:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  41750c:	48 85 c0             	test   %rax,%rax
  41750f:	0f 95 c0             	setne  %al
  417512:	84 c0                	test   %al,%al
  417514:	75 98                	jne    4174ae <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x13d>
	}

      return __s;
  417516:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
  41751a:	5d                   	pop    %rbp
  41751b:	c3                   	ret

000000000041751c <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  41751c:	55                   	push   %rbp
  41751d:	48 89 e5             	mov    %rsp,%rbp
  417520:	48 83 ec 30          	sub    $0x30,%rsp
  417524:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417528:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  41752c:	89 d0                	mov    %edx,%eax
  41752e:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  417531:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  417535:	89 c0                	mov    %eax,%eax
  417537:	48 8b 04 c5 28 e5 41 	mov    0x41e528(,%rax,8),%rax
  41753e:	00
  41753f:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  417541:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417545:	48 89 c7             	mov    %rax,%rdi
  417548:	e8 74 0d 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41754d:	48 89 c2             	mov    %rax,%rdx
  417550:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417554:	48 89 c6             	mov    %rax,%rsi
  417557:	48 89 d7             	mov    %rdx,%rdi
  41755a:	e8 71 0d 00 00       	call   4182d0 <_ZNKSt8__format17_WidthPrecVisitorclISt9monostateEEmRT_>
  41755f:	e9 2b 02 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  417564:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417568:	48 89 c7             	mov    %rax,%rdi
  41756b:	e8 51 0d 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  417570:	48 89 c2             	mov    %rax,%rdx
  417573:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417577:	48 89 c6             	mov    %rax,%rsi
  41757a:	48 89 d7             	mov    %rdx,%rdi
  41757d:	e8 64 0d 00 00       	call   4182e6 <_ZNKSt8__format17_WidthPrecVisitorclIbEEmRT_>
  417582:	e9 08 02 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  417587:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41758b:	48 89 c7             	mov    %rax,%rdi
  41758e:	e8 2e 0d 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  417593:	48 89 c2             	mov    %rax,%rdx
  417596:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41759a:	48 89 c6             	mov    %rax,%rsi
  41759d:	48 89 d7             	mov    %rdx,%rdi
  4175a0:	e8 85 18 00 00       	call   418e2a <_ZNKSt8__format17_WidthPrecVisitorclIcEEmRT_>
  4175a5:	e9 e5 01 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  4175aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4175ae:	48 89 c7             	mov    %rax,%rdi
  4175b1:	e8 0b 0d 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4175b6:	48 89 c2             	mov    %rax,%rdx
  4175b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4175bd:	48 89 c6             	mov    %rax,%rsi
  4175c0:	48 89 d7             	mov    %rdx,%rdi
  4175c3:	e8 38 0d 00 00       	call   418300 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_>
  4175c8:	e9 c2 01 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  4175cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4175d1:	48 89 c7             	mov    %rax,%rdi
  4175d4:	e8 e8 0c 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4175d9:	48 89 c2             	mov    %rax,%rdx
  4175dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4175e0:	48 89 c6             	mov    %rax,%rsi
  4175e3:	48 89 d7             	mov    %rdx,%rdi
  4175e6:	e8 45 0d 00 00       	call   418330 <_ZNKSt8__format17_WidthPrecVisitorclIjEEmRT_>
  4175eb:	e9 9f 01 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  4175f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4175f4:	48 89 c7             	mov    %rax,%rdi
  4175f7:	e8 c5 0c 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4175fc:	48 89 c2             	mov    %rax,%rdx
  4175ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417603:	48 89 c6             	mov    %rax,%rsi
  417606:	48 89 d7             	mov    %rdx,%rdi
  417609:	e8 38 0d 00 00       	call   418346 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_>
  41760e:	e9 7c 01 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  417613:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417617:	48 89 c7             	mov    %rax,%rdi
  41761a:	e8 a2 0c 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41761f:	48 89 c2             	mov    %rax,%rdx
  417622:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417626:	48 89 c6             	mov    %rax,%rsi
  417629:	48 89 d7             	mov    %rdx,%rdi
  41762c:	e8 47 0d 00 00       	call   418378 <_ZNKSt8__format17_WidthPrecVisitorclIyEEmRT_>
  417631:	e9 59 01 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  417636:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41763a:	48 89 c7             	mov    %rax,%rdi
  41763d:	e8 7f 0c 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  417642:	48 89 c2             	mov    %rax,%rdx
  417645:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417649:	48 89 c6             	mov    %rax,%rsi
  41764c:	48 89 d7             	mov    %rdx,%rdi
  41764f:	e8 3a 0d 00 00       	call   41838e <_ZNKSt8__format17_WidthPrecVisitorclIfEEmRT_>
  417654:	e9 36 01 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  417659:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41765d:	48 89 c7             	mov    %rax,%rdi
  417660:	e8 5c 0c 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  417665:	48 89 c2             	mov    %rax,%rdx
  417668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41766c:	48 89 c6             	mov    %rax,%rsi
  41766f:	48 89 d7             	mov    %rdx,%rdi
  417672:	e8 31 0d 00 00       	call   4183a8 <_ZNKSt8__format17_WidthPrecVisitorclIdEEmRT_>
  417677:	e9 13 01 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  41767c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417680:	48 89 c7             	mov    %rax,%rdi
  417683:	e8 39 0c 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  417688:	48 89 c2             	mov    %rax,%rdx
  41768b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41768f:	48 89 c6             	mov    %rax,%rsi
  417692:	48 89 d7             	mov    %rdx,%rdi
  417695:	e8 28 0d 00 00       	call   4183c2 <_ZNKSt8__format17_WidthPrecVisitorclIeEEmRT_>
  41769a:	e9 f0 00 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  41769f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4176a3:	48 89 c7             	mov    %rax,%rdi
  4176a6:	e8 16 0c 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4176ab:	48 89 c2             	mov    %rax,%rdx
  4176ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4176b2:	48 89 c6             	mov    %rax,%rsi
  4176b5:	48 89 d7             	mov    %rdx,%rdi
  4176b8:	e8 87 17 00 00       	call   418e44 <_ZNKSt8__format17_WidthPrecVisitorclIPKcEEmRT_>
  4176bd:	e9 cd 00 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  4176c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4176c6:	48 89 c7             	mov    %rax,%rdi
  4176c9:	e8 f3 0b 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4176ce:	48 89 c2             	mov    %rax,%rdx
  4176d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4176d5:	48 89 c6             	mov    %rax,%rsi
  4176d8:	48 89 d7             	mov    %rdx,%rdi
  4176db:	e8 7e 17 00 00       	call   418e5e <_ZNKSt8__format17_WidthPrecVisitorclISt17basic_string_viewIcSt11char_traitsIcEEEEmRT_>
  4176e0:	e9 aa 00 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  4176e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4176e9:	48 89 c7             	mov    %rax,%rdi
  4176ec:	e8 d0 0b 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4176f1:	48 89 c2             	mov    %rax,%rdx
  4176f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4176f8:	48 89 c6             	mov    %rax,%rsi
  4176fb:	48 89 d7             	mov    %rdx,%rdi
  4176fe:	e8 d9 0c 00 00       	call   4183dc <_ZNKSt8__format17_WidthPrecVisitorclIPKvEEmRT_>
  417703:	e9 87 00 00 00       	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  417708:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41770c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  417710:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417714:	48 89 c7             	mov    %rax,%rdi
  417717:	e8 a5 0b 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41771c:	48 89 c2             	mov    %rax,%rdx
  41771f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417723:	48 89 c6             	mov    %rax,%rsi
  417726:	48 89 d7             	mov    %rdx,%rdi
  417729:	e8 4a 17 00 00       	call   418e78 <_ZNKSt8__format17_WidthPrecVisitorclINSt16basic_format_argISt20basic_format_contextINS_10_Sink_iterIcEEcEE6handleEEEmRT_>
  41772e:	eb 5f                	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  417730:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417734:	48 89 c7             	mov    %rax,%rdi
  417737:	e8 85 0b 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41773c:	48 89 c2             	mov    %rax,%rdx
  41773f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417743:	48 89 c6             	mov    %rax,%rsi
  417746:	48 89 d7             	mov    %rdx,%rdi
  417749:	e8 a8 0c 00 00       	call   4183f6 <_ZNKSt8__format17_WidthPrecVisitorclInEEmRT_>
  41774e:	eb 3f                	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  417750:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417754:	48 89 c7             	mov    %rax,%rdi
  417757:	e8 65 0b 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41775c:	48 89 c2             	mov    %rax,%rdx
  41775f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417763:	48 89 c6             	mov    %rax,%rsi
  417766:	48 89 d7             	mov    %rdx,%rdi
  417769:	e8 a2 0c 00 00       	call   418410 <_ZNKSt8__format17_WidthPrecVisitorclIoEEmRT_>
  41776e:	eb 1f                	jmp    41778f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  417770:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417774:	48 89 c7             	mov    %rax,%rdi
  417777:	e8 45 0b 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41777c:	48 89 c2             	mov    %rax,%rdx
  41777f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417783:	48 89 c6             	mov    %rax,%rsi
  417786:	48 89 d7             	mov    %rdx,%rdi
  417789:	e8 9c 0c 00 00       	call   41842a <_ZNKSt8__format17_WidthPrecVisitorclIDF128_EEmRT_>
  41778e:	90                   	nop
	}
  41778f:	c9                   	leave
  417790:	c3                   	ret

0000000000417791 <_ZSt16visit_format_argINSt8__format17_WidthPrecVisitorESt20basic_format_contextINS0_10_Sink_iterIcEEcEEDcOT_St16basic_format_argIT0_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  417791:	55                   	push   %rbp
  417792:	48 89 e5             	mov    %rsp,%rbp
  417795:	53                   	push   %rbx
  417796:	48 83 ec 18          	sub    $0x18,%rsp
  41779a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  41779e:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  4177a2:	0f b6 d8             	movzbl %al,%ebx
  4177a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4177a9:	48 89 c7             	mov    %rax,%rdi
  4177ac:	e8 10 0b 00 00       	call   4182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4177b1:	89 da                	mov    %ebx,%edx
  4177b3:	48 89 c6             	mov    %rax,%rsi
  4177b6:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4177ba:	e8 5d fd ff ff       	call   41751c <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE>
    }
  4177bf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4177c3:	c9                   	leave
  4177c4:	c3                   	ret

00000000004177c5 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>:
    __int_from_arg(const basic_format_arg<_Context>& __arg)
  4177c5:	55                   	push   %rbp
  4177c6:	48 89 e5             	mov    %rsp,%rbp
  4177c9:	48 83 ec 20          	sub    $0x20,%rsp
  4177cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return std::visit_format_arg(_WidthPrecVisitor(), __arg); }
  4177d1:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
  4177d5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4177d9:	48 83 ec 20          	sub    $0x20,%rsp
  4177dd:	48 89 e6             	mov    %rsp,%rsi
  4177e0:	48 8b 01             	mov    (%rcx),%rax
  4177e3:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  4177e7:	48 89 06             	mov    %rax,(%rsi)
  4177ea:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  4177ee:	48 8b 41 10          	mov    0x10(%rcx),%rax
  4177f2:	48 8b 51 18          	mov    0x18(%rcx),%rdx
  4177f6:	48 89 46 10          	mov    %rax,0x10(%rsi)
  4177fa:	48 89 56 18          	mov    %rdx,0x18(%rsi)
  4177fe:	e8 8e ff ff ff       	call   417791 <_ZSt16visit_format_argINSt8__format17_WidthPrecVisitorESt20basic_format_contextINS0_10_Sink_iterIcEEcEEDcOT_St16basic_format_argIT0_E>
  417803:	48 83 c4 20          	add    $0x20,%rsp
  417807:	c9                   	leave
  417808:	c3                   	ret
  417809:	90                   	nop

000000000041780a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  41780a:	55                   	push   %rbp
  41780b:	48 89 e5             	mov    %rsp,%rbp
  41780e:	48 83 ec 10          	sub    $0x10,%rsp
  417812:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417816:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41781a:	48 8b 00             	mov    (%rax),%rax
  41781d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417821:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417825:	48 89 d6             	mov    %rdx,%rsi
  417828:	48 89 c7             	mov    %rax,%rdi
  41782b:	e8 b6 fc fe ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417830:	90                   	nop
  417831:	c9                   	leave
  417832:	c3                   	ret
  417833:	90                   	nop

0000000000417834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417834:	55                   	push   %rbp
  417835:	48 89 e5             	mov    %rsp,%rbp
  417838:	53                   	push   %rbx
  417839:	48 83 ec 48          	sub    $0x48,%rsp
  41783d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417841:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417845:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417849:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41784d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417851:	48 89 d6             	mov    %rdx,%rsi
  417854:	48 89 c7             	mov    %rax,%rdi
  417857:	e8 4a 3a ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  41785c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417860:	48 89 c7             	mov    %rax,%rdi
  417863:	e8 6c fc fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  417868:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  41786c:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  417871:	84 c0                	test   %al,%al
  417873:	74 19                	je     41788e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417875:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417879:	48 89 c7             	mov    %rax,%rdi
  41787c:	e8 cd d4 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417881:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  417885:	73 07                	jae    41788e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417887:	b8 01 00 00 00       	mov    $0x1,%eax
  41788c:	eb 05                	jmp    417893 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  41788e:	b8 00 00 00 00       	mov    $0x0,%eax
  417893:	84 c0                	test   %al,%al
  417895:	74 39                	je     4178d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  417897:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41789b:	48 89 c7             	mov    %rax,%rdi
  41789e:	e8 ab d4 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4178a3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4178a7:	48 89 d3             	mov    %rdx,%rbx
  4178aa:	48 29 c3             	sub    %rax,%rbx
  4178ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4178b1:	48 89 c7             	mov    %rax,%rdi
  4178b4:	e8 95 d4 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4178b9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4178bd:	48 01 d0             	add    %rdx,%rax
  4178c0:	ba 00 00 00 00       	mov    $0x0,%edx
  4178c5:	48 89 de             	mov    %rbx,%rsi
  4178c8:	48 89 c7             	mov    %rax,%rdi
  4178cb:	e8 a7 d0 fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  4178d0:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4178d4:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  4178d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4178dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  4178e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4178e4:	48 89 c7             	mov    %rax,%rdi
  4178e7:	e8 a6 15 00 00       	call   418e92 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIfNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  4178ec:	48 89 c1             	mov    %rax,%rcx
  4178ef:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4178f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4178f7:	48 89 c6             	mov    %rax,%rsi
  4178fa:	48 89 cf             	mov    %rcx,%rdi
  4178fd:	e8 ee 91 ff ff       	call   410af0 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417902:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417906:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41790a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  41790e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417912:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417916:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  41791a:	48 89 c7             	mov    %rax,%rdi
  41791d:	e8 e8 fe ff ff       	call   41780a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417922:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417926:	c9                   	leave
  417927:	c3                   	ret

0000000000417928 <_ZNSt8__format5_SinkIcE8_M_writeEc>:
      _M_write(_CharT __c)
  417928:	55                   	push   %rbp
  417929:	48 89 e5             	mov    %rsp,%rbp
  41792c:	53                   	push   %rbx
  41792d:	48 83 ec 38          	sub    $0x38,%rsp
  417931:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417935:	89 f0                	mov    %esi,%eax
  417937:	88 45 c4             	mov    %al,-0x3c(%rbp)
	*_M_next++ = __c;
  41793a:	0f b6 5d c4          	movzbl -0x3c(%rbp),%ebx
  41793e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417942:	48 83 c0 18          	add    $0x18,%rax
  417946:	be 00 00 00 00       	mov    $0x0,%esi
  41794b:	48 89 c7             	mov    %rax,%rdi
  41794e:	e8 87 16 00 00       	call   418fda <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEppEi>
  417953:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  417957:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  41795b:	48 89 c7             	mov    %rax,%rdi
  41795e:	e8 b5 16 00 00       	call   419018 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEdeEv>
  417963:	88 18                	mov    %bl,(%rax)
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
  417965:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417969:	48 83 c0 08          	add    $0x8,%rax
  41796d:	48 89 c7             	mov    %rax,%rdi
  417970:	e8 75 3f ff ff       	call   40b8ea <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  417975:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  417979:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41797d:	48 8d 50 18          	lea    0x18(%rax),%rdx
  417981:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  417985:	48 89 c6             	mov    %rax,%rsi
  417988:	48 89 d7             	mov    %rdx,%rdi
  41798b:	e8 7f 3f ff ff       	call   40b90f <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  417990:	48 89 c3             	mov    %rax,%rbx
  417993:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417997:	48 83 c0 08          	add    $0x8,%rax
  41799b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ssize(const _Container& __cont)
    noexcept(noexcept(__cont.size()))
    -> common_type_t<ptrdiff_t, make_signed_t<decltype(__cont.size())>>
    {
      using type = make_signed_t<decltype(__cont.size())>;
      return static_cast<common_type_t<ptrdiff_t, type>>(__cont.size());
  41799f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4179a3:	48 89 c7             	mov    %rax,%rdi
  4179a6:	e8 47 db fe ff       	call   4054f2 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4179ab:	48 39 c3             	cmp    %rax,%rbx
  4179ae:	0f 94 c0             	sete   %al
  4179b1:	84 c0                	test   %al,%al
  4179b3:	74 13                	je     4179c8 <_ZNSt8__format5_SinkIcE8_M_writeEc+0xa0>
	  _M_overflow();
  4179b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4179b9:	48 8b 00             	mov    (%rax),%rax
  4179bc:	48 8b 10             	mov    (%rax),%rdx
  4179bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4179c3:	48 89 c7             	mov    %rax,%rdi
  4179c6:	ff d2                	call   *%rdx
      }
  4179c8:	90                   	nop
  4179c9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4179cd:	c9                   	leave
  4179ce:	c3                   	ret

00000000004179cf <_ZNSt9__unicode21__is_single_code_unitIcEEbDi>:
    __is_single_code_unit(char32_t __c)
  4179cf:	55                   	push   %rbp
  4179d0:	48 89 e5             	mov    %rsp,%rbp
  4179d3:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return __c < 0x7F; // ASCII character
  4179d6:	83 7d fc 7e          	cmpl   $0x7e,-0x4(%rbp)
  4179da:	0f 96 c0             	setbe  %al
    }
  4179dd:	5d                   	pop    %rbp
  4179de:	c3                   	ret
  4179df:	90                   	nop

00000000004179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() { return _M_first_and_curr._M_curr; }
  4179e0:	55                   	push   %rbp
  4179e1:	48 89 e5             	mov    %rsp,%rbp
  4179e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4179e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4179ec:	48 83 c0 10          	add    $0x10,%rax
  4179f0:	5d                   	pop    %rbp
  4179f1:	c3                   	ret

00000000004179f2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>:
      _Utf_iterator(_Iter __first, _Iter __it, _Sent __last)
  4179f2:	55                   	push   %rbp
  4179f3:	48 89 e5             	mov    %rsp,%rbp
  4179f6:	48 83 ec 20          	sub    $0x20,%rsp
  4179fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4179fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  417a02:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  417a06:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_first_and_curr{__first, __it}, _M_last(__last)
  417a0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a0e:	48 8d 48 08          	lea    0x8(%rax),%rcx
  417a12:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417a16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417a1a:	48 89 c6             	mov    %rax,%rsi
  417a1d:	48 89 cf             	mov    %rcx,%rdi
  417a20:	e8 05 16 00 00       	call   41902a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>
  417a25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a29:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  417a2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a31:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  417a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a39:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
  417a3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  417a45:	48 89 50 20          	mov    %rdx,0x20(%rax)
	if (_M_curr() != _M_last)
  417a49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a4d:	48 89 c7             	mov    %rax,%rdi
  417a50:	e8 8b ff ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  417a55:	48 8b 10             	mov    (%rax),%rdx
  417a58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a5c:	48 8b 40 20          	mov    0x20(%rax),%rax
  417a60:	48 39 c2             	cmp    %rax,%rdx
  417a63:	0f 95 c0             	setne  %al
  417a66:	84 c0                	test   %al,%al
  417a68:	74 0e                	je     417a78 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_+0x86>
	  _M_read();
  417a6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a6e:	48 89 c7             	mov    %rax,%rdi
  417a71:	e8 de 15 00 00       	call   419054 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>
      }
  417a76:	eb 0a                	jmp    417a82 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_+0x90>
	  _M_buf = {};
  417a78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417a7c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      }
  417a82:	90                   	nop
  417a83:	c9                   	leave
  417a84:	c3                   	ret
  417a85:	90                   	nop

0000000000417a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
  417a86:	55                   	push   %rbp
  417a87:	48 89 e5             	mov    %rsp,%rbp
  417a8a:	53                   	push   %rbx
  417a8b:	48 83 ec 18          	sub    $0x18,%rsp
  417a8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417a93:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
  417a97:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  417a9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417a9f:	48 89 c7             	mov    %rax,%rdi
  417aa2:	e8 6f cf fe ff       	call   404a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  417aa7:	48 89 c1             	mov    %rax,%rcx
  417aaa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417aae:	48 89 c2             	mov    %rax,%rdx
  417ab1:	48 89 ce             	mov    %rcx,%rsi
  417ab4:	48 89 df             	mov    %rbx,%rdi
  417ab7:	e8 56 ed fe ff       	call   406812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
  417abc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417ac0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  417ac7:	00
  417ac8:	90                   	nop
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
  417ac9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417acd:	48 83 ec 28          	sub    $0x28,%rsp
  417ad1:	48 89 e0             	mov    %rsp,%rax
  417ad4:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  417ad8:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  417adc:	48 89 08             	mov    %rcx,(%rax)
  417adf:	48 89 58 08          	mov    %rbx,0x8(%rax)
  417ae3:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  417ae7:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  417aeb:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417aef:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417af3:	48 8b 4d 58          	mov    0x58(%rbp),%rcx
  417af7:	48 89 48 20          	mov    %rcx,0x20(%rax)
  417afb:	48 83 ec 28          	sub    $0x28,%rsp
  417aff:	48 89 e0             	mov    %rsp,%rax
  417b02:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  417b06:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  417b0a:	48 89 08             	mov    %rcx,(%rax)
  417b0d:	48 89 58 08          	mov    %rbx,0x8(%rax)
  417b11:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  417b15:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  417b19:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417b1d:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417b21:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  417b25:	48 89 48 20          	mov    %rcx,0x20(%rax)
  417b29:	48 89 d7             	mov    %rdx,%rdi
  417b2c:	e8 83 15 00 00       	call   4190b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag>
  417b31:	48 83 c4 50          	add    $0x50,%rsp
	}
  417b35:	eb 1a                	jmp    417b51 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_+0xcb>
  417b37:	48 89 c3             	mov    %rax,%rbx
  417b3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417b3e:	48 89 c7             	mov    %rax,%rdi
  417b41:	e8 8a cf fe ff       	call   404ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  417b46:	48 89 d8             	mov    %rbx,%rax
  417b49:	48 89 c7             	mov    %rax,%rdi
  417b4c:	e8 bf c8 fe ff       	call   404410 <_Unwind_Resume@plt>
  417b51:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417b55:	c9                   	leave
  417b56:	c3                   	ret
  417b57:	90                   	nop

0000000000417b58 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  417b58:	55                   	push   %rbp
  417b59:	48 89 e5             	mov    %rsp,%rbp
  417b5c:	48 83 ec 10          	sub    $0x10,%rsp
  417b60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b68:	48 8b 00             	mov    (%rax),%rax
  417b6b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417b6f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417b73:	48 89 d6             	mov    %rdx,%rsi
  417b76:	48 89 c7             	mov    %rax,%rdi
  417b79:	e8 68 f9 fe ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417b7e:	90                   	nop
  417b7f:	c9                   	leave
  417b80:	c3                   	ret
  417b81:	90                   	nop

0000000000417b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417b82:	55                   	push   %rbp
  417b83:	48 89 e5             	mov    %rsp,%rbp
  417b86:	53                   	push   %rbx
  417b87:	48 83 ec 48          	sub    $0x48,%rsp
  417b8b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417b8f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417b93:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417b97:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417b9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417b9f:	48 89 d6             	mov    %rdx,%rsi
  417ba2:	48 89 c7             	mov    %rax,%rdi
  417ba5:	e8 fc 36 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  417baa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417bae:	48 89 c7             	mov    %rax,%rdi
  417bb1:	e8 1e f9 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  417bb6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  417bba:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  417bbf:	84 c0                	test   %al,%al
  417bc1:	74 19                	je     417bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417bc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417bc7:	48 89 c7             	mov    %rax,%rdi
  417bca:	e8 7f d1 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417bcf:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  417bd3:	73 07                	jae    417bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417bd5:	b8 01 00 00 00       	mov    $0x1,%eax
  417bda:	eb 05                	jmp    417be1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  417bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  417be1:	84 c0                	test   %al,%al
  417be3:	74 39                	je     417c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  417be5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417be9:	48 89 c7             	mov    %rax,%rdi
  417bec:	e8 5d d1 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417bf1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417bf5:	48 89 d3             	mov    %rdx,%rbx
  417bf8:	48 29 c3             	sub    %rax,%rbx
  417bfb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417bff:	48 89 c7             	mov    %rax,%rdi
  417c02:	e8 47 d1 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417c07:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417c0b:	48 01 d0             	add    %rdx,%rax
  417c0e:	ba 00 00 00 00       	mov    $0x0,%edx
  417c13:	48 89 de             	mov    %rbx,%rsi
  417c16:	48 89 c7             	mov    %rax,%rdi
  417c19:	e8 59 cd fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  417c1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  417c22:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  417c26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417c2a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  417c2e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417c32:	48 89 c7             	mov    %rax,%rdi
  417c35:	e8 1d 17 00 00       	call   419357 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIdNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  417c3a:	48 89 c1             	mov    %rax,%rcx
  417c3d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417c41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417c45:	48 89 c6             	mov    %rax,%rsi
  417c48:	48 89 cf             	mov    %rcx,%rdi
  417c4b:	e8 c8 9b ff ff       	call   411818 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417c50:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417c54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417c58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  417c5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417c60:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417c64:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  417c68:	48 89 c7             	mov    %rax,%rdi
  417c6b:	e8 e8 fe ff ff       	call   417b58 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417c70:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417c74:	c9                   	leave
  417c75:	c3                   	ret

0000000000417c76 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  417c76:	55                   	push   %rbp
  417c77:	48 89 e5             	mov    %rsp,%rbp
  417c7a:	48 83 ec 10          	sub    $0x10,%rsp
  417c7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417c86:	48 8b 00             	mov    (%rax),%rax
  417c89:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417c8d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417c91:	48 89 d6             	mov    %rdx,%rsi
  417c94:	48 89 c7             	mov    %rax,%rdi
  417c97:	e8 4a f8 fe ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417c9c:	90                   	nop
  417c9d:	c9                   	leave
  417c9e:	c3                   	ret
  417c9f:	90                   	nop

0000000000417ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417ca0:	55                   	push   %rbp
  417ca1:	48 89 e5             	mov    %rsp,%rbp
  417ca4:	53                   	push   %rbx
  417ca5:	48 83 ec 48          	sub    $0x48,%rsp
  417ca9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417cad:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417cb1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417cb5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417cb9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417cbd:	48 89 d6             	mov    %rdx,%rsi
  417cc0:	48 89 c7             	mov    %rax,%rdi
  417cc3:	e8 de 35 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  417cc8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417ccc:	48 89 c7             	mov    %rax,%rdi
  417ccf:	e8 00 f8 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  417cd4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  417cd8:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  417cdd:	84 c0                	test   %al,%al
  417cdf:	74 19                	je     417cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417ce1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417ce5:	48 89 c7             	mov    %rax,%rdi
  417ce8:	e8 61 d0 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417ced:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  417cf1:	73 07                	jae    417cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417cf3:	b8 01 00 00 00       	mov    $0x1,%eax
  417cf8:	eb 05                	jmp    417cff <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  417cfa:	b8 00 00 00 00       	mov    $0x0,%eax
  417cff:	84 c0                	test   %al,%al
  417d01:	74 39                	je     417d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  417d03:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417d07:	48 89 c7             	mov    %rax,%rdi
  417d0a:	e8 3f d0 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417d0f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417d13:	48 89 d3             	mov    %rdx,%rbx
  417d16:	48 29 c3             	sub    %rax,%rbx
  417d19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417d1d:	48 89 c7             	mov    %rax,%rdi
  417d20:	e8 29 d0 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417d25:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417d29:	48 01 d0             	add    %rdx,%rax
  417d2c:	ba 00 00 00 00       	mov    $0x0,%edx
  417d31:	48 89 de             	mov    %rbx,%rsi
  417d34:	48 89 c7             	mov    %rax,%rdi
  417d37:	e8 3b cc fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  417d3c:	66 0f ef c0          	pxor   %xmm0,%xmm0
  417d40:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  417d44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417d48:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  417d4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417d50:	48 89 c7             	mov    %rax,%rdi
  417d53:	e8 0d 16 00 00       	call   419365 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIeNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  417d58:	48 89 c1             	mov    %rax,%rcx
  417d5b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417d63:	48 89 c6             	mov    %rax,%rsi
  417d66:	48 89 cf             	mov    %rcx,%rdi
  417d69:	e8 f0 a7 ff ff       	call   41255e <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417d6e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417d72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417d76:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  417d7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417d7e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417d82:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  417d86:	48 89 c7             	mov    %rax,%rdi
  417d89:	e8 e8 fe ff ff       	call   417c76 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417d8e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417d92:	c9                   	leave
  417d93:	c3                   	ret

0000000000417d94 <_ZSt4moveIRSt17basic_string_viewIcSt11char_traitsIcEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
  417d94:	55                   	push   %rbp
  417d95:	48 89 e5             	mov    %rsp,%rbp
  417d98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  417d9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417da0:	5d                   	pop    %rbp
  417da1:	c3                   	ret

0000000000417da2 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEEC1EOS4_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  417da2:	55                   	push   %rbp
  417da3:	48 89 e5             	mov    %rsp,%rbp
  417da6:	48 83 ec 10          	sub    $0x10,%rsp
  417daa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417dae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  417db2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417db6:	48 89 c7             	mov    %rax,%rdi
  417db9:	e8 15 00 00 00       	call   417dd3 <_ZSt7forwardISt17basic_string_viewIcSt11char_traitsIcEEEOT_RNSt16remove_referenceIS4_E4typeE>
  417dbe:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  417dc2:	48 8b 50 08          	mov    0x8(%rax),%rdx
  417dc6:	48 8b 00             	mov    (%rax),%rax
  417dc9:	48 89 01             	mov    %rax,(%rcx)
  417dcc:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  417dd0:	90                   	nop
  417dd1:	c9                   	leave
  417dd2:	c3                   	ret

0000000000417dd3 <_ZSt7forwardISt17basic_string_viewIcSt11char_traitsIcEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  417dd3:	55                   	push   %rbp
  417dd4:	48 89 e5             	mov    %rsp,%rbp
  417dd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  417ddb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417ddf:	5d                   	pop    %rbp
  417de0:	c3                   	ret
  417de1:	90                   	nop

0000000000417de2 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>:
      _Grapheme_cluster_view(_View __v)
  417de2:	55                   	push   %rbp
  417de3:	48 89 e5             	mov    %rsp,%rbp
  417de6:	41 54                	push   %r12
  417de8:	53                   	push   %rbx
  417de9:	48 83 ec 60          	sub    $0x60,%rsp
  417ded:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  417df1:	48 89 f0             	mov    %rsi,%rax
  417df4:	48 89 d1             	mov    %rdx,%rcx
  417df7:	48 89 c0             	mov    %rax,%rax
  417dfa:	ba 00 00 00 00       	mov    $0x0,%edx
  417dff:	48 89 ca             	mov    %rcx,%rdx
  417e02:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  417e06:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
      : _M_begin(_Utf32_view<_View>(std::move(__v)).begin())
  417e0a:	4c 8b 65 a8          	mov    -0x58(%rbp),%r12
  417e0e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  417e12:	48 89 c7             	mov    %rax,%rdi
  417e15:	e8 7a ff ff ff       	call   417d94 <_ZSt4moveIRSt17basic_string_viewIcSt11char_traitsIcEEEONSt16remove_referenceIT_E4typeEOS6_>
  417e1a:	48 89 c2             	mov    %rax,%rdx
  417e1d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  417e21:	48 89 d6             	mov    %rdx,%rsi
  417e24:	48 89 c7             	mov    %rax,%rdi
  417e27:	e8 76 ff ff ff       	call   417da2 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEEC1EOS4_>
  417e2c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  417e30:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  417e34:	48 89 d6             	mov    %rdx,%rsi
  417e37:	48 89 c7             	mov    %rax,%rdi
  417e3a:	e8 5f e8 ff ff       	call   41669e <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
  417e3f:	48 83 ec 08          	sub    $0x8,%rsp
  417e43:	48 83 ec 28          	sub    $0x28,%rsp
  417e47:	48 89 e0             	mov    %rsp,%rax
  417e4a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  417e4e:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  417e52:	48 89 08             	mov    %rcx,(%rax)
  417e55:	48 89 58 08          	mov    %rbx,0x8(%rax)
  417e59:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  417e5d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  417e61:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417e65:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417e69:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  417e6d:	48 89 50 20          	mov    %rdx,0x20(%rax)
  417e71:	4c 89 e7             	mov    %r12,%rdi
  417e74:	e8 1f 15 00 00       	call   419398 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE>
  417e79:	48 83 c4 30          	add    $0x30,%rsp
      { }
  417e7d:	90                   	nop
  417e7e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  417e82:	5b                   	pop    %rbx
  417e83:	41 5c                	pop    %r12
  417e85:	5d                   	pop    %rbp
  417e86:	c3                   	ret
  417e87:	90                   	nop

0000000000417e88 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>:
      end() const { return _M_last; }
  417e88:	55                   	push   %rbp
  417e89:	48 89 e5             	mov    %rsp,%rbp
  417e8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417e90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417e94:	48 8b 40 20          	mov    0x20(%rax),%rax
  417e98:	5d                   	pop    %rbp
  417e99:	c3                   	ret

0000000000417e9a <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>:
	operator++()
  417e9a:	55                   	push   %rbp
  417e9b:	48 89 e5             	mov    %rsp,%rbp
  417e9e:	53                   	push   %rbx
  417e9f:	48 83 ec 58          	sub    $0x58,%rsp
  417ea3:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
	  const auto __end = _M_base.end();
  417ea7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417eab:	48 83 c0 10          	add    $0x10,%rax
  417eaf:	48 89 c7             	mov    %rax,%rdi
  417eb2:	e8 d1 ff ff ff       	call   417e88 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  417eb7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (_M_base != __end)
  417ebb:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  417ebf:	48 83 ec 08          	sub    $0x8,%rsp
  417ec3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417ec7:	48 83 ec 28          	sub    $0x28,%rsp
  417ecb:	48 89 e2             	mov    %rsp,%rdx
  417ece:	48 8b 48 10          	mov    0x10(%rax),%rcx
  417ed2:	48 8b 58 18          	mov    0x18(%rax),%rbx
  417ed6:	48 89 0a             	mov    %rcx,(%rdx)
  417ed9:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  417edd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  417ee1:	48 8b 58 28          	mov    0x28(%rax),%rbx
  417ee5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  417ee9:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  417eed:	48 8b 40 30          	mov    0x30(%rax),%rax
  417ef1:	48 89 42 20          	mov    %rax,0x20(%rdx)
  417ef5:	48 89 f7             	mov    %rsi,%rdi
  417ef8:	e8 5b 15 00 00       	call   419458 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  417efd:	48 83 c4 30          	add    $0x30,%rsp
  417f01:	83 f0 01             	xor    $0x1,%eax
  417f04:	84 c0                	test   %al,%al
  417f06:	0f 84 82 01 00 00    	je     41808e <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x1f4>
	      auto __p_prev = _M_prop;
  417f0c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417f10:	8b 40 04             	mov    0x4(%rax),%eax
  417f13:	89 45 ec             	mov    %eax,-0x14(%rbp)
	      auto __it = _M_base;
  417f16:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417f1a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  417f1e:	48 8b 58 18          	mov    0x18(%rax),%rbx
  417f22:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  417f26:	48 89 5d b8          	mov    %rbx,-0x48(%rbp)
  417f2a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  417f2e:	48 8b 58 28          	mov    0x28(%rax),%rbx
  417f32:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  417f36:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  417f3a:	48 8b 40 30          	mov    0x30(%rax),%rax
  417f3e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      while (++__it != __end)
  417f42:	e9 c3 00 00 00       	jmp    41800a <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x170>
		  char32_t __c = *__it;
  417f47:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  417f4b:	48 89 c7             	mov    %rax,%rdi
  417f4e:	e8 d3 2c ff ff       	call   40ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  417f53:	89 45 dc             	mov    %eax,-0x24(%rbp)
		  auto __p = __grapheme_cluster_break_property(*__it);
  417f56:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  417f5a:	48 89 c7             	mov    %rax,%rdi
  417f5d:	e8 c4 2c ff ff       	call   40ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  417f62:	89 c7                	mov    %eax,%edi
  417f64:	e8 d2 ce fe ff       	call   404e3b <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>
  417f69:	89 45 d8             	mov    %eax,-0x28(%rbp)
		  _M_update_xpicto_seq_state(__c, __p);
  417f6c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417f70:	8b 55 d8             	mov    -0x28(%rbp),%edx
  417f73:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  417f76:	89 ce                	mov    %ecx,%esi
  417f78:	48 89 c7             	mov    %rax,%rdi
  417f7b:	e8 32 d0 fe ff       	call   404fb2 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE>
		  _M_update_ri_count(__p);
  417f80:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417f84:	8b 55 d8             	mov    -0x28(%rbp),%edx
  417f87:	89 d6                	mov    %edx,%esi
  417f89:	48 89 c7             	mov    %rax,%rdi
  417f8c:	e8 cd d0 fe ff       	call   40505e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE>
		  _M_update_incb_state(__c, __p);
  417f91:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417f95:	8b 55 d8             	mov    -0x28(%rbp),%edx
  417f98:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  417f9b:	89 ce                	mov    %ecx,%esi
  417f9d:	48 89 c7             	mov    %rax,%rdi
  417fa0:	e8 e9 d0 fe ff       	call   40508e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE>
		  if (_M_is_break(__p_prev, __p, __it))
  417fa5:	8b 55 d8             	mov    -0x28(%rbp),%edx
  417fa8:	8b 75 ec             	mov    -0x14(%rbp),%esi
  417fab:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  417faf:	48 83 ec 08          	sub    $0x8,%rsp
  417fb3:	48 83 ec 28          	sub    $0x28,%rsp
  417fb7:	48 89 e0             	mov    %rsp,%rax
  417fba:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  417fbe:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  417fc2:	48 89 08             	mov    %rcx,(%rax)
  417fc5:	48 89 58 08          	mov    %rbx,0x8(%rax)
  417fc9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  417fcd:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  417fd1:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417fd5:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417fd9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  417fdd:	48 89 48 20          	mov    %rcx,0x20(%rax)
  417fe1:	e8 94 14 00 00       	call   41947a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE>
  417fe6:	48 83 c4 30          	add    $0x30,%rsp
  417fea:	84 c0                	test   %al,%al
  417fec:	74 16                	je     418004 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x16a>
		      _M_reset(__c, __p);
  417fee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417ff2:	8b 55 d8             	mov    -0x28(%rbp),%edx
  417ff5:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  417ff8:	89 ce                	mov    %ecx,%esi
  417ffa:	48 89 c7             	mov    %rax,%rdi
  417ffd:	e8 74 cf fe ff       	call   404f76 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base8_M_resetEDiNS0_13_Gcb_propertyE>
		      break;
  418002:	eb 5e                	jmp    418062 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x1c8>
		  __p_prev = __p;
  418004:	8b 45 d8             	mov    -0x28(%rbp),%eax
  418007:	89 45 ec             	mov    %eax,-0x14(%rbp)
	      while (++__it != __end)
  41800a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41800e:	48 89 c7             	mov    %rax,%rdi
  418011:	e8 c4 3d ff ff       	call   40bdda <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
  418016:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41801a:	48 83 ec 08          	sub    $0x8,%rsp
  41801e:	48 83 ec 28          	sub    $0x28,%rsp
  418022:	48 89 e2             	mov    %rsp,%rdx
  418025:	48 8b 08             	mov    (%rax),%rcx
  418028:	48 8b 58 08          	mov    0x8(%rax),%rbx
  41802c:	48 89 0a             	mov    %rcx,(%rdx)
  41802f:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  418033:	48 8b 48 10          	mov    0x10(%rax),%rcx
  418037:	48 8b 58 18          	mov    0x18(%rax),%rbx
  41803b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  41803f:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  418043:	48 8b 40 20          	mov    0x20(%rax),%rax
  418047:	48 89 42 20          	mov    %rax,0x20(%rdx)
  41804b:	48 89 f7             	mov    %rsi,%rdi
  41804e:	e8 05 14 00 00       	call   419458 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  418053:	48 83 c4 30          	add    $0x30,%rsp
  418057:	83 f0 01             	xor    $0x1,%eax
  41805a:	84 c0                	test   %al,%al
  41805c:	0f 85 e5 fe ff ff    	jne    417f47 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0xad>
	      _M_base = __it;
  418062:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418066:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  41806a:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  41806e:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418072:	48 89 58 18          	mov    %rbx,0x18(%rax)
  418076:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  41807a:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  41807e:	48 89 48 20          	mov    %rcx,0x20(%rax)
  418082:	48 89 58 28          	mov    %rbx,0x28(%rax)
  418086:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41808a:	48 89 50 30          	mov    %rdx,0x30(%rax)
	  return *this;
  41808e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
	}
  418092:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418096:	c9                   	leave
  418097:	c3                   	ret

0000000000418098 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>:
	operator==(const ranges::sentinel_t<_View>& __i) const
  418098:	55                   	push   %rbp
  418099:	48 89 e5             	mov    %rsp,%rbp
  41809c:	53                   	push   %rbx
  41809d:	48 83 ec 18          	sub    $0x18,%rsp
  4180a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4180a5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{ return _M_base == __i; }
  4180a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4180ad:	48 8b 30             	mov    (%rax),%rsi
  4180b0:	48 83 ec 08          	sub    $0x8,%rsp
  4180b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4180b8:	48 83 ec 28          	sub    $0x28,%rsp
  4180bc:	48 89 e2             	mov    %rsp,%rdx
  4180bf:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4180c3:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4180c7:	48 89 0a             	mov    %rcx,(%rdx)
  4180ca:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  4180ce:	48 8b 48 20          	mov    0x20(%rax),%rcx
  4180d2:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4180d6:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  4180da:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  4180de:	48 8b 40 30          	mov    0x30(%rax),%rax
  4180e2:	48 89 42 20          	mov    %rax,0x20(%rdx)
  4180e6:	48 89 f7             	mov    %rsi,%rdi
  4180e9:	e8 6a 13 00 00       	call   419458 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  4180ee:	48 83 c4 30          	add    $0x30,%rsp
  4180f2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4180f6:	c9                   	leave
  4180f7:	c3                   	ret

00000000004180f8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  4180f8:	55                   	push   %rbp
  4180f9:	48 89 e5             	mov    %rsp,%rbp
  4180fc:	48 83 ec 10          	sub    $0x10,%rsp
  418100:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418104:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418108:	48 8b 00             	mov    (%rax),%rax
  41810b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41810f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  418113:	48 89 d6             	mov    %rdx,%rsi
  418116:	48 89 c7             	mov    %rax,%rdi
  418119:	e8 c8 f3 fe ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  41811e:	90                   	nop
  41811f:	c9                   	leave
  418120:	c3                   	ret
  418121:	90                   	nop

0000000000418122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  418122:	55                   	push   %rbp
  418123:	48 89 e5             	mov    %rsp,%rbp
  418126:	53                   	push   %rbx
  418127:	48 83 ec 48          	sub    $0x48,%rsp
  41812b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  41812f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  418133:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  418137:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41813b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41813f:	48 89 d6             	mov    %rdx,%rsi
  418142:	48 89 c7             	mov    %rax,%rdi
  418145:	e8 5c 31 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  41814a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41814e:	48 89 c7             	mov    %rax,%rdi
  418151:	e8 7e f3 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418156:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  41815a:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  41815f:	84 c0                	test   %al,%al
  418161:	74 19                	je     41817c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  418163:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418167:	48 89 c7             	mov    %rax,%rdi
  41816a:	e8 df cb fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41816f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  418173:	73 07                	jae    41817c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  418175:	b8 01 00 00 00       	mov    $0x1,%eax
  41817a:	eb 05                	jmp    418181 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  41817c:	b8 00 00 00 00       	mov    $0x0,%eax
  418181:	84 c0                	test   %al,%al
  418183:	74 39                	je     4181be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  418185:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418189:	48 89 c7             	mov    %rax,%rdi
  41818c:	e8 bd cb fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  418191:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418195:	48 89 d3             	mov    %rdx,%rbx
  418198:	48 29 c3             	sub    %rax,%rbx
  41819b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41819f:	48 89 c7             	mov    %rax,%rdi
  4181a2:	e8 a7 cb fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4181a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4181ab:	48 01 d0             	add    %rdx,%rax
  4181ae:	ba 00 00 00 00       	mov    $0x0,%edx
  4181b3:	48 89 de             	mov    %rbx,%rsi
  4181b6:	48 89 c7             	mov    %rax,%rdi
  4181b9:	e8 b9 c7 fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  4181be:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4181c2:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  4181c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4181ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  4181ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4181d2:	48 89 c7             	mov    %rax,%rdi
  4181d5:	e8 ac 15 00 00       	call   419786 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  4181da:	48 89 c1             	mov    %rax,%rcx
  4181dd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4181e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4181e5:	48 89 c6             	mov    %rax,%rsi
  4181e8:	48 89 cf             	mov    %rcx,%rdi
  4181eb:	e8 fa ba ff ff       	call   413cea <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  4181f0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  4181f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4181f8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  4181fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  418200:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  418204:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  418208:	48 89 c7             	mov    %rax,%rdi
  41820b:	e8 e8 fe ff ff       	call   4180f8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  418210:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418214:	c9                   	leave
  418215:	c3                   	ret

0000000000418216 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
  418216:	55                   	push   %rbp
  418217:	48 89 e5             	mov    %rsp,%rbp
  41821a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41821e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418222:	5d                   	pop    %rbp
  418223:	c3                   	ret

0000000000418224 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_>:
    __copy_or_move(_Iter __first, _Sent __last, _Out __result)
  418224:	55                   	push   %rbp
  418225:	48 89 e5             	mov    %rsp,%rbp
  418228:	41 55                	push   %r13
  41822a:	41 54                	push   %r12
  41822c:	48 83 ec 40          	sub    $0x40,%rsp
  418230:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  418234:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  418238:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	  for (auto __n = __last - __first; __n > 0; --__n)
  41823c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418240:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418244:	48 29 c2             	sub    %rax,%rdx
  418247:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  41824b:	eb 3c                	jmp    418289 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_+0x65>
		*__result = *__first;
  41824d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418251:	0f b6 00             	movzbl (%rax),%eax
  418254:	0f be c0             	movsbl %al,%eax
      operator*() { return *this; }
  418257:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  41825b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  41825f:	88 45 df             	mov    %al,-0x21(%rbp)
	_M_sink->_M_write(__c);
  418262:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418266:	48 8b 00             	mov    (%rax),%rax
  418269:	0f be 55 df          	movsbl -0x21(%rbp),%edx
  41826d:	89 d6                	mov    %edx,%esi
  41826f:	48 89 c7             	mov    %rax,%rdi
  418272:	e8 b1 f6 ff ff       	call   417928 <_ZNSt8__format5_SinkIcE8_M_writeEc>
	      ++__first;
  418277:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41827b:	48 83 c0 01          	add    $0x1,%rax
  41827f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      operator++() { return *this; }
  418283:	90                   	nop
	  for (auto __n = __last - __first; __n > 0; --__n)
  418284:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  418289:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  41828e:	7f bd                	jg     41824d <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_+0x29>
	  return {std::move(__first), std::move(__result)};
  418290:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  418294:	48 89 c7             	mov    %rax,%rdi
  418297:	e8 7a ff ff ff       	call   418216 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
  41829c:	48 8b 00             	mov    (%rax),%rax
  41829f:	49 89 c4             	mov    %rax,%r12
  4182a2:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  4182a6:	48 89 c7             	mov    %rax,%rdi
  4182a9:	e8 05 17 ff ff       	call   4099b3 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4182ae:	4c 8b 28             	mov    (%rax),%r13
  4182b1:	4c 89 e0             	mov    %r12,%rax
  4182b4:	4c 89 ea             	mov    %r13,%rdx
    }
  4182b7:	48 83 c4 40          	add    $0x40,%rsp
  4182bb:	41 5c                	pop    %r12
  4182bd:	41 5d                	pop    %r13
  4182bf:	5d                   	pop    %rbp
  4182c0:	c3                   	ret

00000000004182c1 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4182c1:	55                   	push   %rbp
  4182c2:	48 89 e5             	mov    %rsp,%rbp
  4182c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4182c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4182cd:	5d                   	pop    %rbp
  4182ce:	c3                   	ret
  4182cf:	90                   	nop

00000000004182d0 <_ZNKSt8__format17_WidthPrecVisitorclISt9monostateEEmRT_>:
      operator()(_Tp& __arg) const
  4182d0:	55                   	push   %rbp
  4182d1:	48 89 e5             	mov    %rsp,%rbp
  4182d4:	48 83 ec 10          	sub    $0x10,%rsp
  4182d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4182dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  __format::__invalid_arg_id_in_format_string();
  4182e0:	e8 ef ce fe ff       	call   4051d4 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
  4182e5:	90                   	nop

00000000004182e6 <_ZNKSt8__format17_WidthPrecVisitorclIbEEmRT_>:
      operator()(_Tp& __arg) const
  4182e6:	55                   	push   %rbp
  4182e7:	48 89 e5             	mov    %rsp,%rbp
  4182ea:	48 83 ec 10          	sub    $0x10,%rsp
  4182ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4182f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4182f6:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  4182fb:	e8 57 ce fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

0000000000418300 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_>:
      operator()(_Tp& __arg) const
  418300:	55                   	push   %rbp
  418301:	48 89 e5             	mov    %rsp,%rbp
  418304:	48 83 ec 10          	sub    $0x10,%rsp
  418308:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41830c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      if (__arg >= 0)
  418310:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  418314:	8b 00                	mov    (%rax),%eax
  418316:	85 c0                	test   %eax,%eax
  418318:	78 0a                	js     418324 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_+0x24>
		return __arg;
  41831a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41831e:	8b 00                	mov    (%rax),%eax
  418320:	48 98                	cltq
  418322:	eb 0a                	jmp    41832e <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_+0x2e>
	__throw_format_error("format error: argument used for width or "
  418324:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  418329:	e8 29 ce fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
      }
  41832e:	c9                   	leave
  41832f:	c3                   	ret

0000000000418330 <_ZNKSt8__format17_WidthPrecVisitorclIjEEmRT_>:
      operator()(_Tp& __arg) const
  418330:	55                   	push   %rbp
  418331:	48 89 e5             	mov    %rsp,%rbp
  418334:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418338:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __arg;
  41833c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  418340:	8b 00                	mov    (%rax),%eax
  418342:	89 c0                	mov    %eax,%eax
      }
  418344:	5d                   	pop    %rbp
  418345:	c3                   	ret

0000000000418346 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_>:
      operator()(_Tp& __arg) const
  418346:	55                   	push   %rbp
  418347:	48 89 e5             	mov    %rsp,%rbp
  41834a:	48 83 ec 10          	sub    $0x10,%rsp
  41834e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418352:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      if (__arg >= 0)
  418356:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41835a:	48 8b 00             	mov    (%rax),%rax
  41835d:	48 85 c0             	test   %rax,%rax
  418360:	78 09                	js     41836b <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_+0x25>
		return __arg;
  418362:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  418366:	48 8b 00             	mov    (%rax),%rax
  418369:	eb 0a                	jmp    418375 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_+0x2f>
	__throw_format_error("format error: argument used for width or "
  41836b:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  418370:	e8 e2 cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>
      }
  418375:	c9                   	leave
  418376:	c3                   	ret
  418377:	90                   	nop

0000000000418378 <_ZNKSt8__format17_WidthPrecVisitorclIyEEmRT_>:
      operator()(_Tp& __arg) const
  418378:	55                   	push   %rbp
  418379:	48 89 e5             	mov    %rsp,%rbp
  41837c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418380:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __arg;
  418384:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  418388:	48 8b 00             	mov    (%rax),%rax
      }
  41838b:	5d                   	pop    %rbp
  41838c:	c3                   	ret
  41838d:	90                   	nop

000000000041838e <_ZNKSt8__format17_WidthPrecVisitorclIfEEmRT_>:
      operator()(_Tp& __arg) const
  41838e:	55                   	push   %rbp
  41838f:	48 89 e5             	mov    %rsp,%rbp
  418392:	48 83 ec 10          	sub    $0x10,%rsp
  418396:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41839a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41839e:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  4183a3:	e8 af cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004183a8 <_ZNKSt8__format17_WidthPrecVisitorclIdEEmRT_>:
      operator()(_Tp& __arg) const
  4183a8:	55                   	push   %rbp
  4183a9:	48 89 e5             	mov    %rsp,%rbp
  4183ac:	48 83 ec 10          	sub    $0x10,%rsp
  4183b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4183b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4183b8:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  4183bd:	e8 95 cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004183c2 <_ZNKSt8__format17_WidthPrecVisitorclIeEEmRT_>:
      operator()(_Tp& __arg) const
  4183c2:	55                   	push   %rbp
  4183c3:	48 89 e5             	mov    %rsp,%rbp
  4183c6:	48 83 ec 10          	sub    $0x10,%rsp
  4183ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4183ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4183d2:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  4183d7:	e8 7b cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004183dc <_ZNKSt8__format17_WidthPrecVisitorclIPKvEEmRT_>:
      operator()(_Tp& __arg) const
  4183dc:	55                   	push   %rbp
  4183dd:	48 89 e5             	mov    %rsp,%rbp
  4183e0:	48 83 ec 10          	sub    $0x10,%rsp
  4183e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4183e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4183ec:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  4183f1:	e8 61 cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

00000000004183f6 <_ZNKSt8__format17_WidthPrecVisitorclInEEmRT_>:
      operator()(_Tp& __arg) const
  4183f6:	55                   	push   %rbp
  4183f7:	48 89 e5             	mov    %rsp,%rbp
  4183fa:	48 83 ec 10          	sub    $0x10,%rsp
  4183fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418402:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418406:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  41840b:	e8 47 cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

0000000000418410 <_ZNKSt8__format17_WidthPrecVisitorclIoEEmRT_>:
      operator()(_Tp& __arg) const
  418410:	55                   	push   %rbp
  418411:	48 89 e5             	mov    %rsp,%rbp
  418414:	48 83 ec 10          	sub    $0x10,%rsp
  418418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41841c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418420:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  418425:	e8 2d cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

000000000041842a <_ZNKSt8__format17_WidthPrecVisitorclIDF128_EEmRT_>:
      operator()(_Tp& __arg) const
  41842a:	55                   	push   %rbp
  41842b:	48 89 e5             	mov    %rsp,%rbp
  41842e:	48 83 ec 10          	sub    $0x10,%rsp
  418432:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418436:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41843a:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  41843f:	e8 13 cd fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

0000000000418444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm>:
      assign(const _CharT* __s, size_type __n)
  418444:	55                   	push   %rbp
  418445:	48 89 e5             	mov    %rsp,%rbp
  418448:	48 83 ec 20          	sub    $0x20,%rsp
  41844c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418450:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  418454:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	return _M_replace(size_type(0), this->size(), __s, __n);
  418458:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41845c:	48 89 c7             	mov    %rax,%rdi
  41845f:	e8 ea c8 fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  418464:	48 89 c6             	mov    %rax,%rsi
  418467:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41846b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  41846f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418473:	49 89 c8             	mov    %rcx,%r8
  418476:	48 89 d1             	mov    %rdx,%rcx
  418479:	48 89 f2             	mov    %rsi,%rdx
  41847c:	be 00 00 00 00       	mov    $0x0,%esi
  418481:	48 89 c7             	mov    %rax,%rdi
  418484:	e8 5d 3f ff ff       	call   40c3e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
  418489:	c9                   	leave
  41848a:	c3                   	ret

000000000041848b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc>:
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
  41848b:	55                   	push   %rbp
  41848c:	48 89 e5             	mov    %rsp,%rbp
  41848f:	48 83 ec 20          	sub    $0x20,%rsp
  418493:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418497:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41849b:	89 d0                	mov    %edx,%eax
  41849d:	88 45 ec             	mov    %al,-0x14(%rbp)
	if (__n == 1)
  4184a0:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  4184a5:	75 15                	jne    4184bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc+0x31>
	  traits_type::assign(*__d, __c);
  4184a7:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  4184ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4184af:	48 89 d6             	mov    %rdx,%rsi
  4184b2:	48 89 c7             	mov    %rax,%rdi
  4184b5:	e8 26 c2 fe ff       	call   4046e0 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  4184ba:	eb 1a                	jmp    4184d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc+0x4b>
	  traits_type::assign(__d, __n, __c);
  4184bc:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  4184c0:	0f be d0             	movsbl %al,%edx
  4184c3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4184c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4184cb:	48 89 ce             	mov    %rcx,%rsi
  4184ce:	48 89 c7             	mov    %rax,%rdi
  4184d1:	e8 a1 c4 fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
      }
  4184d6:	90                   	nop
  4184d7:	c9                   	leave
  4184d8:	c3                   	ret

00000000004184d9 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  4184d9:	55                   	push   %rbp
  4184da:	48 89 e5             	mov    %rsp,%rbp
  4184dd:	48 83 ec 10          	sub    $0x10,%rsp
  4184e1:	48 89 f8             	mov    %rdi,%rax
  4184e4:	48 89 f1             	mov    %rsi,%rcx
  4184e7:	48 89 c0             	mov    %rax,%rax
  4184ea:	ba 00 00 00 00       	mov    $0x0,%edx
  4184ef:	48 89 ca             	mov    %rcx,%rdx
  4184f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4184f6:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    { return std::__bit_width(__value); }
  4184fa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4184fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418502:	48 89 d7             	mov    %rdx,%rdi
  418505:	48 89 c6             	mov    %rax,%rsi
  418508:	e8 87 12 00 00       	call   419794 <_ZSt11__bit_widthIoEiT_>
  41850d:	c9                   	leave
  41850e:	c3                   	ret

000000000041850f <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  41850f:	55                   	push   %rbp
  418510:	48 89 e5             	mov    %rsp,%rbp
  418513:	48 83 ec 70          	sub    $0x70,%rsp
  418517:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  41851b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  41851f:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  418523:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  418527:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41852b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  41852f:	48 89 d7             	mov    %rdx,%rdi
  418532:	48 89 c6             	mov    %rax,%rsi
  418535:	e8 9f ff ff ff       	call   4184d9 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  41853a:	83 c0 03             	add    $0x3,%eax
  41853d:	c1 e8 02             	shr    $0x2,%eax
  418540:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418543:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418547:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  41854b:	48 89 c2             	mov    %rax,%rdx
  41854e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418551:	48 39 c2             	cmp    %rax,%rdx
  418554:	0f 9c c0             	setl   %al
  418557:	0f b6 c0             	movzbl %al,%eax
  41855a:	48 85 c0             	test   %rax,%rax
  41855d:	74 1c                	je     41857b <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x6c>
	  __res.ptr = __last;
  41855f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418563:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  __res.ec = errc::value_too_large;
  418567:	c7 45 c8 4b 00 00 00 	movl   $0x4b,-0x38(%rbp)
	  return __res;
  41856e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418572:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  418576:	e9 85 01 00 00       	jmp    418700 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1f1>
      constexpr char __digits[] = {
  41857b:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  418582:	35 36 37
  418585:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  41858c:	64 65 66
  41858f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  418593:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      unsigned __pos = __len - 1;
  418597:	8b 45 f8             	mov    -0x8(%rbp),%eax
  41859a:	83 e8 01             	sub    $0x1,%eax
  41859d:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  4185a0:	e9 9f 00 00 00       	jmp    418644 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x135>
	  auto __num = __val & 0xF;
  4185a5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4185a9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4185ad:	83 e0 0f             	and    $0xf,%eax
  4185b0:	ba 00 00 00 00       	mov    $0x0,%edx
  4185b5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4185b9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 4;
  4185bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4185c1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4185c5:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  4185ca:	48 c1 ea 04          	shr    $0x4,%rdx
  4185ce:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4185d2:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[__pos] = __digits[__num];
  4185d6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4185d9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4185dd:	48 01 c2             	add    %rax,%rdx
  4185e0:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  4185e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4185e8:	48 01 c8             	add    %rcx,%rax
  4185eb:	0f b6 00             	movzbl (%rax),%eax
  4185ee:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  4185f0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4185f4:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4185f8:	83 e0 0f             	and    $0xf,%eax
  4185fb:	ba 00 00 00 00       	mov    $0x0,%edx
  418600:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418604:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 4;
  418608:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  41860c:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  418610:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  418615:	48 c1 ea 04          	shr    $0x4,%rdx
  418619:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  41861d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[__pos - 1] = __digits[__num];
  418621:	8b 45 fc             	mov    -0x4(%rbp),%eax
  418624:	83 e8 01             	sub    $0x1,%eax
  418627:	89 c2                	mov    %eax,%edx
  418629:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41862d:	48 01 c2             	add    %rax,%rdx
  418630:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  418634:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418638:	48 01 c8             	add    %rcx,%rax
  41863b:	0f b6 00             	movzbl (%rax),%eax
  41863e:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  418640:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  418644:	ba ff 00 00 00       	mov    $0xff,%edx
  418649:	b8 00 00 00 00       	mov    $0x0,%eax
  41864e:	48 3b 55 90          	cmp    -0x70(%rbp),%rdx
  418652:	48 1b 45 98          	sbb    -0x68(%rbp),%rax
  418656:	0f 82 49 ff ff ff    	jb     4185a5 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x96>
      if (__val >= 0x10)
  41865c:	ba 0f 00 00 00       	mov    $0xf,%edx
  418661:	b8 00 00 00 00       	mov    $0x0,%eax
  418666:	48 3b 55 90          	cmp    -0x70(%rbp),%rdx
  41866a:	48 1b 45 98          	sbb    -0x68(%rbp),%rax
  41866e:	73 5f                	jae    4186cf <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1c0>
	  const auto __num = __val & 0xF;
  418670:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  418674:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  418678:	83 e0 0f             	and    $0xf,%eax
  41867b:	ba 00 00 00 00       	mov    $0x0,%edx
  418680:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  418684:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __val >>= 4;
  418688:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  41868c:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  418690:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  418695:	48 c1 ea 04          	shr    $0x4,%rdx
  418699:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  41869d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[1] = __digits[__num];
  4186a1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4186a5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4186a9:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  4186ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4186b1:	48 01 c8             	add    %rcx,%rax
  4186b4:	0f b6 00             	movzbl (%rax),%eax
  4186b7:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  4186b9:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  4186bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4186c1:	48 01 d0             	add    %rdx,%rax
  4186c4:	0f b6 10             	movzbl (%rax),%edx
  4186c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4186cb:	88 10                	mov    %dl,(%rax)
  4186cd:	eb 14                	jmp    4186e3 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1d4>
	__first[0] = __digits[__val];
  4186cf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  4186d3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4186d7:	48 01 d0             	add    %rdx,%rax
  4186da:	0f b6 10             	movzbl (%rax),%edx
  4186dd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4186e1:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  4186e3:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4186e6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4186ea:	48 01 d0             	add    %rdx,%rax
  4186ed:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __res.ec = {};
  4186f1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
      return __res;
  4186f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4186fc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    }
  418700:	c9                   	leave
  418701:	c3                   	ret

0000000000418702 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  418702:	55                   	push   %rbp
  418703:	48 89 e5             	mov    %rsp,%rbp
  418706:	53                   	push   %rbx
  418707:	48 83 ec 48          	sub    $0x48,%rsp
  41870b:	48 89 f8             	mov    %rdi,%rax
  41870e:	48 89 c1             	mov    %rax,%rcx
  418711:	bb 00 00 00 00       	mov    $0x0,%ebx
  418716:	48 89 f3             	mov    %rsi,%rbx
  418719:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  41871d:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  418721:	89 55 bc             	mov    %edx,-0x44(%rbp)
      unsigned __n = 1;
  418724:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
      const unsigned __b2 = __base  * __base;
  41872b:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41872e:	0f af c0             	imul   %eax,%eax
  418731:	89 45 e8             	mov    %eax,-0x18(%rbp)
      const unsigned __b3 = __b2 * __base;
  418734:	8b 45 bc             	mov    -0x44(%rbp),%eax
  418737:	8b 55 e8             	mov    -0x18(%rbp),%edx
  41873a:	0f af c2             	imul   %edx,%eax
  41873d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
      const unsigned long __b4 = __b3 * __base;
  418740:	8b 45 bc             	mov    -0x44(%rbp),%eax
  418743:	0f af 45 e4          	imul   -0x1c(%rbp),%eax
  418747:	89 c0                	mov    %eax,%eax
  418749:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  if (__value < (unsigned)__base) return __n;
  41874d:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  418750:	89 c8                	mov    %ecx,%eax
  418752:	48 89 c0             	mov    %rax,%rax
  418755:	ba 00 00 00 00       	mov    $0x0,%edx
  41875a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  41875e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  418762:	48 19 d1             	sbb    %rdx,%rcx
  418765:	73 08                	jae    41876f <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x6d>
  418767:	8b 45 ec             	mov    -0x14(%rbp),%eax
  41876a:	e9 8b 00 00 00       	jmp    4187fa <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b2) return __n + 1;
  41876f:	8b 45 e8             	mov    -0x18(%rbp),%eax
  418772:	48 89 c0             	mov    %rax,%rax
  418775:	ba 00 00 00 00       	mov    $0x0,%edx
  41877a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  41877e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  418782:	48 19 d1             	sbb    %rdx,%rcx
  418785:	73 08                	jae    41878f <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x8d>
  418787:	8b 45 ec             	mov    -0x14(%rbp),%eax
  41878a:	83 c0 01             	add    $0x1,%eax
  41878d:	eb 6b                	jmp    4187fa <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b3) return __n + 2;
  41878f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  418792:	48 89 c0             	mov    %rax,%rax
  418795:	ba 00 00 00 00       	mov    $0x0,%edx
  41879a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  41879e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4187a2:	48 19 d1             	sbb    %rdx,%rcx
  4187a5:	73 08                	jae    4187af <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xad>
  4187a7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4187aa:	83 c0 02             	add    $0x2,%eax
  4187ad:	eb 4b                	jmp    4187fa <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b4) return __n + 3;
  4187af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4187b3:	ba 00 00 00 00       	mov    $0x0,%edx
  4187b8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  4187bc:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4187c0:	48 19 d1             	sbb    %rdx,%rcx
  4187c3:	73 08                	jae    4187cd <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xcb>
  4187c5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4187c8:	83 c0 03             	add    $0x3,%eax
  4187cb:	eb 2d                	jmp    4187fa <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  __value /= __b4;
  4187cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4187d1:	ba 00 00 00 00       	mov    $0x0,%edx
  4187d6:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  4187da:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4187de:	48 89 d1             	mov    %rdx,%rcx
  4187e1:	48 89 c2             	mov    %rax,%rdx
  4187e4:	e8 97 b8 fe ff       	call   404080 <__udivti3@plt>
  4187e9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4187ed:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  __n += 4;
  4187f1:	83 45 ec 04          	addl   $0x4,-0x14(%rbp)
	  if (__value < (unsigned)__base) return __n;
  4187f5:	e9 53 ff ff ff       	jmp    41874d <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x4b>
    }
  4187fa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4187fe:	c9                   	leave
  4187ff:	c3                   	ret

0000000000418800 <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  418800:	55                   	push   %rbp
  418801:	48 89 e5             	mov    %rsp,%rbp
  418804:	48 83 ec 40          	sub    $0x40,%rsp
  418808:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  41880c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  418810:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  418814:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  418818:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  41881c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418820:	ba 0a 00 00 00       	mov    $0xa,%edx
  418825:	48 89 cf             	mov    %rcx,%rdi
  418828:	48 89 c6             	mov    %rax,%rsi
  41882b:	e8 d2 fe ff ff       	call   418702 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>
  418830:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418833:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418837:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  41883b:	48 89 c2             	mov    %rax,%rdx
  41883e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  418841:	48 39 c2             	cmp    %rax,%rdx
  418844:	0f 9c c0             	setl   %al
  418847:	0f b6 c0             	movzbl %al,%eax
  41884a:	48 85 c0             	test   %rax,%rax
  41884d:	74 19                	je     418868 <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_+0x68>
	  __res.ptr = __last;
  41884f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418853:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  418857:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  41885e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418862:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418866:	eb 37                	jmp    41889f <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_+0x9f>
      __detail::__to_chars_10_impl(__first, __len, __val);
  418868:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41886c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  418870:	8b 75 fc             	mov    -0x4(%rbp),%esi
  418873:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  418877:	48 89 d1             	mov    %rdx,%rcx
  41887a:	48 89 c2             	mov    %rax,%rdx
  41887d:	e8 58 0f 00 00       	call   4197da <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_>
      __res.ptr = __first + __len;
  418882:	8b 55 fc             	mov    -0x4(%rbp),%edx
  418885:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  418889:	48 01 d0             	add    %rdx,%rax
  41888c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  418890:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  418897:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41889b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  41889f:	c9                   	leave
  4188a0:	c3                   	ret

00000000004188a1 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  4188a1:	55                   	push   %rbp
  4188a2:	48 89 e5             	mov    %rsp,%rbp
  4188a5:	48 83 ec 60          	sub    $0x60,%rsp
  4188a9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4188ad:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4188b1:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  4188b5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
      unsigned __len = 0;
  4188b9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  4188c0:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4188c4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4188c8:	48 89 d7             	mov    %rdx,%rdi
  4188cb:	48 89 c6             	mov    %rax,%rsi
  4188ce:	e8 06 fc ff ff       	call   4184d9 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  4188d3:	83 c0 02             	add    $0x2,%eax
  4188d6:	89 c2                	mov    %eax,%edx
  4188d8:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  4188dd:	48 0f af c2          	imul   %rdx,%rax
  4188e1:	48 c1 e8 20          	shr    $0x20,%rax
  4188e5:	d1 e8                	shr    %eax
  4188e7:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  4188ea:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4188ee:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  4188f2:	48 89 c2             	mov    %rax,%rdx
  4188f5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4188f8:	48 39 c2             	cmp    %rax,%rdx
  4188fb:	0f 9c c0             	setl   %al
  4188fe:	0f b6 c0             	movzbl %al,%eax
  418901:	48 85 c0             	test   %rax,%rax
  418904:	74 1c                	je     418922 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x81>
	  __res.ptr = __last;
  418906:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41890a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  __res.ec = errc::value_too_large;
  41890e:	c7 45 c8 4b 00 00 00 	movl   $0x4b,-0x38(%rbp)
	  return __res;
  418915:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418919:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41891d:	e9 4c 01 00 00       	jmp    418a6e <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1cd>
      unsigned __pos = __len - 1;
  418922:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418925:	83 e8 01             	sub    $0x1,%eax
  418928:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  41892b:	e9 93 00 00 00       	jmp    4189c3 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x122>
	  auto __num = __val & 7;
  418930:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418934:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418938:	83 e0 07             	and    $0x7,%eax
  41893b:	ba 00 00 00 00       	mov    $0x0,%edx
  418940:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418944:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 3;
  418948:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41894c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418950:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  418955:	48 c1 ea 03          	shr    $0x3,%rdx
  418959:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  41895d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[__pos] = '0' + __num;
  418961:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418965:	8d 48 30             	lea    0x30(%rax),%ecx
  418968:	8b 55 fc             	mov    -0x4(%rbp),%edx
  41896b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41896f:	48 01 d0             	add    %rdx,%rax
  418972:	89 ca                	mov    %ecx,%edx
  418974:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  418976:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41897a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41897e:	83 e0 07             	and    $0x7,%eax
  418981:	ba 00 00 00 00       	mov    $0x0,%edx
  418986:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  41898a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 3;
  41898e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418992:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418996:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  41899b:	48 c1 ea 03          	shr    $0x3,%rdx
  41899f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4189a3:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[__pos - 1] = '0' + __num;
  4189a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4189ab:	8d 50 30             	lea    0x30(%rax),%edx
  4189ae:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4189b1:	83 e8 01             	sub    $0x1,%eax
  4189b4:	89 c1                	mov    %eax,%ecx
  4189b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4189ba:	48 01 c8             	add    %rcx,%rax
  4189bd:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  4189bf:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  4189c3:	ba 3f 00 00 00       	mov    $0x3f,%edx
  4189c8:	b8 00 00 00 00       	mov    $0x0,%eax
  4189cd:	48 3b 55 a0          	cmp    -0x60(%rbp),%rdx
  4189d1:	48 1b 45 a8          	sbb    -0x58(%rbp),%rax
  4189d5:	0f 82 55 ff ff ff    	jb     418930 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x8f>
      if (__val >= 010)
  4189db:	ba 07 00 00 00       	mov    $0x7,%edx
  4189e0:	b8 00 00 00 00       	mov    $0x0,%eax
  4189e5:	48 3b 55 a0          	cmp    -0x60(%rbp),%rdx
  4189e9:	48 1b 45 a8          	sbb    -0x58(%rbp),%rax
  4189ed:	73 53                	jae    418a42 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1a1>
	  auto const __num = __val & 7;
  4189ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4189f3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4189f7:	83 e0 07             	and    $0x7,%eax
  4189fa:	ba 00 00 00 00       	mov    $0x0,%edx
  4189ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  418a03:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __val >>= 3;
  418a07:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418a0b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418a0f:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  418a14:	48 c1 ea 03          	shr    $0x3,%rdx
  418a18:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  418a1c:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[1] = '0' + __num;
  418a20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418a24:	8d 50 30             	lea    0x30(%rax),%edx
  418a27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418a2b:	48 83 c0 01          	add    $0x1,%rax
  418a2f:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  418a31:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418a35:	83 c0 30             	add    $0x30,%eax
  418a38:	89 c2                	mov    %eax,%edx
  418a3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418a3e:	88 10                	mov    %dl,(%rax)
  418a40:	eb 0f                	jmp    418a51 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1b0>
	__first[0] = '0' + __val;
  418a42:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418a46:	83 c0 30             	add    $0x30,%eax
  418a49:	89 c2                	mov    %eax,%edx
  418a4b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418a4f:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  418a51:	8b 55 f8             	mov    -0x8(%rbp),%edx
  418a54:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418a58:	48 01 d0             	add    %rdx,%rax
  418a5b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __res.ec = {};
  418a5f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
      return __res;
  418a66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418a6a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    }
  418a6e:	c9                   	leave
  418a6f:	c3                   	ret

0000000000418a70 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  418a70:	55                   	push   %rbp
  418a71:	48 89 e5             	mov    %rsp,%rbp
  418a74:	48 83 ec 40          	sub    $0x40,%rsp
  418a78:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  418a7c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  418a80:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  418a84:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  418a88:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418a8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418a90:	48 89 d7             	mov    %rdx,%rdi
  418a93:	48 89 c6             	mov    %rax,%rsi
  418a96:	e8 3e fa ff ff       	call   4184d9 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  418a9b:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418a9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418aa2:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  418aa6:	48 89 c2             	mov    %rax,%rdx
  418aa9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418aac:	48 39 c2             	cmp    %rax,%rdx
  418aaf:	0f 9c c0             	setl   %al
  418ab2:	0f b6 c0             	movzbl %al,%eax
  418ab5:	48 85 c0             	test   %rax,%rax
  418ab8:	74 19                	je     418ad3 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0x63>
	  __res.ptr = __last;
  418aba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418abe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  418ac2:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  418ac9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418acd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418ad1:	eb 6e                	jmp    418b41 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0xd1>
      unsigned __pos = __len - 1;
  418ad3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418ad6:	83 e8 01             	sub    $0x1,%eax
  418ad9:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  418adc:	eb 39                	jmp    418b17 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0xa7>
	  __first[__pos--] = '0' + (__val & 1);
  418ade:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418ae2:	83 e0 01             	and    $0x1,%eax
  418ae5:	83 c0 30             	add    $0x30,%eax
  418ae8:	89 c6                	mov    %eax,%esi
  418aea:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  418aee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  418af1:	8d 50 ff             	lea    -0x1(%rax),%edx
  418af4:	89 55 fc             	mov    %edx,-0x4(%rbp)
  418af7:	89 c0                	mov    %eax,%eax
  418af9:	48 01 c8             	add    %rcx,%rax
  418afc:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  418aff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418b03:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  418b07:	48 0f ac d0 01       	shrd   $0x1,%rdx,%rax
  418b0c:	48 d1 ea             	shr    %rdx
  418b0f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  418b13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      while (__pos)
  418b17:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  418b1b:	75 c1                	jne    418ade <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0x6e>
      __first[0] = '1';
  418b1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  418b21:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  418b24:	8b 55 f8             	mov    -0x8(%rbp),%edx
  418b27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  418b2b:	48 01 d0             	add    %rdx,%rax
  418b2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  418b32:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  418b39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418b3d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  418b41:	c9                   	leave
  418b42:	c3                   	ret

0000000000418b43 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  418b43:	55                   	push   %rbp
  418b44:	48 89 e5             	mov    %rsp,%rbp
  418b47:	53                   	push   %rbx
  418b48:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  418b4f:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  418b56:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  418b5d:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  418b64:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  418b6b:	44 89 85 5c ff ff ff 	mov    %r8d,-0xa4(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  418b72:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
  418b78:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  418b7f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  418b86:	48 89 cf             	mov    %rcx,%rdi
  418b89:	48 89 c6             	mov    %rax,%rsi
  418b8c:	e8 71 fb ff ff       	call   418702 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>
  418b91:	89 45 e8             	mov    %eax,-0x18(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418b94:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  418b9b:	48 2b 85 78 ff ff ff 	sub    -0x88(%rbp),%rax
  418ba2:	48 89 c2             	mov    %rax,%rdx
  418ba5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  418ba8:	48 39 c2             	cmp    %rax,%rdx
  418bab:	0f 9c c0             	setl   %al
  418bae:	0f b6 c0             	movzbl %al,%eax
  418bb1:	48 85 c0             	test   %rax,%rax
  418bb4:	74 1f                	je     418bd5 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x92>
	  __res.ptr = __last;
  418bb6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  418bbd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	  __res.ec = errc::value_too_large;
  418bc1:	c7 45 b8 4b 00 00 00 	movl   $0x4b,-0x48(%rbp)
	  return __res;
  418bc8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  418bcc:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  418bd0:	e9 45 01 00 00       	jmp    418d1a <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x1d7>
      unsigned __pos = __len - 1;
  418bd5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  418bd8:	83 e8 01             	sub    $0x1,%eax
  418bdb:	89 45 ec             	mov    %eax,-0x14(%rbp)
      constexpr char __digits[] = {
  418bde:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  418be5:	35 36 37
  418be8:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  418bef:	64 65 66
  418bf2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  418bf6:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  418bfa:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  418c01:	6c 6d 6e
  418c04:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  418c0b:	74 75 76
  418c0e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  418c12:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  418c16:	c7 45 a0 77 78 79 7a 	movl   $0x7a797877,-0x60(%rbp)
      while (__val >= (unsigned)__base)
  418c1d:	e9 97 00 00 00       	jmp    418cb9 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x176>
	  auto const __quo = __val / __base;
  418c22:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  418c28:	48 98                	cltq
  418c2a:	48 99                	cqto
  418c2c:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
  418c33:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  418c3a:	48 89 d1             	mov    %rdx,%rcx
  418c3d:	48 89 c2             	mov    %rax,%rdx
  418c40:	e8 3b b4 fe ff       	call   404080 <__udivti3@plt>
  418c45:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418c49:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto const __rem = __val % __base;
  418c4d:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  418c53:	48 98                	cltq
  418c55:	48 99                	cqto
  418c57:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  418c5e:	48 8b 9d 68 ff ff ff 	mov    -0x98(%rbp),%rbx
  418c65:	48 89 cf             	mov    %rcx,%rdi
  418c68:	48 89 de             	mov    %rbx,%rsi
  418c6b:	48 89 d1             	mov    %rdx,%rcx
  418c6e:	48 89 c2             	mov    %rax,%rdx
  418c71:	e8 1a b7 fe ff       	call   404390 <__umodti3@plt>
  418c76:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  418c7a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  __first[__pos--] = __digits[__rem];
  418c7e:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  418c82:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418c86:	48 01 d0             	add    %rdx,%rax
  418c89:	0f b6 10             	movzbl (%rax),%edx
  418c8c:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  418c93:	8b 45 ec             	mov    -0x14(%rbp),%eax
  418c96:	8d 48 ff             	lea    -0x1(%rax),%ecx
  418c99:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  418c9c:	89 c0                	mov    %eax,%eax
  418c9e:	48 01 f0             	add    %rsi,%rax
  418ca1:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  418ca3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418ca7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  418cab:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  418cb2:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
      while (__val >= (unsigned)__base)
  418cb9:	8b 8d 5c ff ff ff    	mov    -0xa4(%rbp),%ecx
  418cbf:	89 c8                	mov    %ecx,%eax
  418cc1:	48 89 c0             	mov    %rax,%rax
  418cc4:	ba 00 00 00 00       	mov    $0x0,%edx
  418cc9:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  418cd0:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  418cd7:	48 19 d1             	sbb    %rdx,%rcx
  418cda:	0f 83 42 ff ff ff    	jae    418c22 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0xdf>
      *__first = __digits[__val];
  418ce0:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  418ce4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  418ceb:	48 01 d0             	add    %rdx,%rax
  418cee:	0f b6 10             	movzbl (%rax),%edx
  418cf1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  418cf8:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  418cfa:	8b 55 e8             	mov    -0x18(%rbp),%edx
  418cfd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  418d04:	48 01 d0             	add    %rdx,%rax
  418d07:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      __res.ec = {};
  418d0b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
      return __res;
  418d12:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  418d16:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    }
  418d1a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418d1e:	c9                   	leave
  418d1f:	c3                   	ret

0000000000418d20 <_ZSt11__addressofIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  418d20:	55                   	push   %rbp
  418d21:	48 89 e5             	mov    %rsp,%rbp
  418d24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  418d28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418d2c:	5d                   	pop    %rbp
  418d2d:	c3                   	ret

0000000000418d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
    basic_string<_CharT, _Traits, _Alloc>::
  418d2e:	55                   	push   %rbp
  418d2f:	48 89 e5             	mov    %rsp,%rbp
  418d32:	53                   	push   %rbx
  418d33:	48 83 ec 38          	sub    $0x38,%rsp
  418d37:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  418d3b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (this != std::__addressof(__str))
  418d3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418d43:	48 89 c7             	mov    %rax,%rdi
  418d46:	e8 d5 ff ff ff       	call   418d20 <_ZSt11__addressofIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS7_>
  418d4b:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  418d4f:	0f 95 c0             	setne  %al
  418d52:	84 c0                	test   %al,%al
  418d54:	0f 84 c9 00 00 00    	je     418e23 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xf5>
	  const size_type __rsize = __str.length();
  418d5a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418d5e:	48 89 c7             	mov    %rax,%rdi
  418d61:	e8 f8 ea fe ff       	call   40785e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  418d66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  const size_type __capacity = capacity();
  418d6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418d6e:	48 89 c7             	mov    %rax,%rdi
  418d71:	e8 02 25 ff ff       	call   40b278 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  418d76:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__rsize > __capacity)
  418d7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418d7e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  418d82:	73 55                	jae    418dd9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xab>
	      size_type __new_capacity = __rsize;
  418d84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418d88:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      pointer __tmp = _M_create(__new_capacity, __capacity);
  418d8c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  418d90:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  418d94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418d98:	48 89 ce             	mov    %rcx,%rsi
  418d9b:	48 89 c7             	mov    %rax,%rdi
  418d9e:	e8 a1 20 ff ff       	call   40ae44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  418da3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      _M_dispose();
  418da7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418dab:	48 89 c7             	mov    %rax,%rdi
  418dae:	e8 3b 09 ff ff       	call   4096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	      _M_data(__tmp);
  418db3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  418db7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418dbb:	48 89 d6             	mov    %rdx,%rsi
  418dbe:	48 89 c7             	mov    %rax,%rdi
  418dc1:	e8 80 09 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	      _M_capacity(__new_capacity);
  418dc6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  418dca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418dce:	48 89 d6             	mov    %rdx,%rsi
  418dd1:	48 89 c7             	mov    %rax,%rdi
  418dd4:	e8 87 09 ff ff       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	  if (__rsize)
  418dd9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  418dde:	74 30                	je     418e10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xe2>
	    this->_S_copy(_M_data(), __str._M_data(), __rsize);
  418de0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418de4:	48 89 c7             	mov    %rax,%rdi
  418de7:	e8 e8 e6 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418dec:	48 89 c3             	mov    %rax,%rbx
  418def:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418df3:	48 89 c7             	mov    %rax,%rdi
  418df6:	e8 d9 e6 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418dfb:	48 89 c1             	mov    %rax,%rcx
  418dfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418e02:	48 89 c2             	mov    %rax,%rdx
  418e05:	48 89 de             	mov    %rbx,%rsi
  418e08:	48 89 cf             	mov    %rcx,%rdi
  418e0b:	e8 c8 31 ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	  _M_set_length(__rsize);
  418e10:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418e14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418e18:	48 89 d6             	mov    %rdx,%rsi
  418e1b:	48 89 c7             	mov    %rax,%rdi
  418e1e:	e8 c3 e6 fe ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
    }
  418e23:	90                   	nop
  418e24:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418e28:	c9                   	leave
  418e29:	c3                   	ret

0000000000418e2a <_ZNKSt8__format17_WidthPrecVisitorclIcEEmRT_>:
      operator()(_Tp& __arg) const
  418e2a:	55                   	push   %rbp
  418e2b:	48 89 e5             	mov    %rsp,%rbp
  418e2e:	48 83 ec 10          	sub    $0x10,%rsp
  418e32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418e36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418e3a:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  418e3f:	e8 13 c3 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

0000000000418e44 <_ZNKSt8__format17_WidthPrecVisitorclIPKcEEmRT_>:
      operator()(_Tp& __arg) const
  418e44:	55                   	push   %rbp
  418e45:	48 89 e5             	mov    %rsp,%rbp
  418e48:	48 83 ec 10          	sub    $0x10,%rsp
  418e4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418e50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418e54:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  418e59:	e8 f9 c2 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

0000000000418e5e <_ZNKSt8__format17_WidthPrecVisitorclISt17basic_string_viewIcSt11char_traitsIcEEEEmRT_>:
      operator()(_Tp& __arg) const
  418e5e:	55                   	push   %rbp
  418e5f:	48 89 e5             	mov    %rsp,%rbp
  418e62:	48 83 ec 10          	sub    $0x10,%rsp
  418e66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418e6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418e6e:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  418e73:	e8 df c2 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

0000000000418e78 <_ZNKSt8__format17_WidthPrecVisitorclINSt16basic_format_argISt20basic_format_contextINS_10_Sink_iterIcEEcEE6handleEEEmRT_>:
      operator()(_Tp& __arg) const
  418e78:	55                   	push   %rbp
  418e79:	48 89 e5             	mov    %rsp,%rbp
  418e7c:	48 83 ec 10          	sub    $0x10,%rsp
  418e80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418e84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418e88:	bf 78 b4 41 00       	mov    $0x41b478,%edi
  418e8d:	e8 c5 c2 fe ff       	call   405157 <_ZSt20__throw_format_errorPKc>

0000000000418e92 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIfNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  418e92:	55                   	push   %rbp
  418e93:	48 89 e5             	mov    %rsp,%rbp
  418e96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  418e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418e9e:	5d                   	pop    %rbp
  418e9f:	c3                   	ret

0000000000418ea0 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  418ea0:	55                   	push   %rbp
  418ea1:	48 89 e5             	mov    %rsp,%rbp
  418ea4:	48 83 ec 10          	sub    $0x10,%rsp
  418ea8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418eac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418eb0:	48 8b 00             	mov    (%rax),%rax
  418eb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  418eb7:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  418ebb:	48 89 d6             	mov    %rdx,%rsi
  418ebe:	48 89 c7             	mov    %rax,%rdi
  418ec1:	e8 20 e6 fe ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  418ec6:	90                   	nop
  418ec7:	c9                   	leave
  418ec8:	c3                   	ret
  418ec9:	90                   	nop

0000000000418eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_>:
    basic_string<_CharT, _Traits, _Alloc>::
  418eca:	55                   	push   %rbp
  418ecb:	48 89 e5             	mov    %rsp,%rbp
  418ece:	53                   	push   %rbx
  418ecf:	48 83 ec 48          	sub    $0x48,%rsp
  418ed3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  418ed7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  418edb:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  418edf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418ee3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418ee7:	48 89 d6             	mov    %rdx,%rsi
  418eea:	48 89 c7             	mov    %rax,%rdi
  418eed:	e8 b4 23 ff ff       	call   40b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  418ef2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418ef6:	48 89 c7             	mov    %rax,%rdi
  418ef9:	e8 d6 e5 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418efe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  418f02:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  418f07:	84 c0                	test   %al,%al
  418f09:	74 19                	je     418f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5a>
  418f0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418f0f:	48 89 c7             	mov    %rax,%rdi
  418f12:	e8 37 be fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  418f17:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  418f1b:	73 07                	jae    418f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5a>
  418f1d:	b8 01 00 00 00       	mov    $0x1,%eax
  418f22:	eb 05                	jmp    418f29 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5f>
  418f24:	b8 00 00 00 00       	mov    $0x0,%eax
  418f29:	84 c0                	test   %al,%al
  418f2b:	74 39                	je     418f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  418f2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418f31:	48 89 c7             	mov    %rax,%rdi
  418f34:	e8 15 be fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  418f39:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418f3d:	48 89 d3             	mov    %rdx,%rbx
  418f40:	48 29 c3             	sub    %rax,%rbx
  418f43:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418f47:	48 89 c7             	mov    %rax,%rdi
  418f4a:	e8 ff bd fe ff       	call   404d4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  418f4f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418f53:	48 01 d0             	add    %rdx,%rax
  418f56:	ba 00 00 00 00       	mov    $0x0,%edx
  418f5b:	48 89 de             	mov    %rbx,%rsi
  418f5e:	48 89 c7             	mov    %rax,%rdi
  418f61:	e8 11 ba fe ff       	call   404977 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  418f66:	66 0f ef c0          	pxor   %xmm0,%xmm0
  418f6a:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  418f6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418f72:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  418f76:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418f7a:	48 89 c7             	mov    %rax,%rdi
  418f7d:	e8 a0 0b 00 00       	call   419b22 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeEUlPcmE_EONSt16remove_referenceIT_E4typeEOSE_>
  418f82:	48 89 c1             	mov    %rax,%rcx
  418f85:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418f89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418f8d:	48 89 c6             	mov    %rax,%rsi
  418f90:	48 89 cf             	mov    %rcx,%rdi
  418f93:	e8 84 cb ff ff       	call   415b1c <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m>
  418f98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  418f9c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418fa0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  418fa4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  418fa8:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  418fac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  418fb0:	48 89 c7             	mov    %rax,%rdi
  418fb3:	e8 e8 fe ff ff       	call   418ea0 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>
  418fb8:	eb 1a                	jmp    418fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x10a>
  418fba:	48 89 c3             	mov    %rax,%rbx
  418fbd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  418fc1:	48 89 c7             	mov    %rax,%rdi
  418fc4:	e8 d7 fe ff ff       	call   418ea0 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>
  418fc9:	48 89 d8             	mov    %rbx,%rax
  418fcc:	48 89 c7             	mov    %rax,%rdi
  418fcf:	e8 3c b4 fe ff       	call   404410 <_Unwind_Resume@plt>
  418fd4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418fd8:	c9                   	leave
  418fd9:	c3                   	ret

0000000000418fda <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
  418fda:	55                   	push   %rbp
  418fdb:	48 89 e5             	mov    %rsp,%rbp
  418fde:	48 83 ec 20          	sub    $0x20,%rsp
  418fe2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  418fe6:	89 75 e4             	mov    %esi,-0x1c(%rbp)
      { return __normal_iterator(_M_current++); }
  418fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418fed:	48 8b 00             	mov    (%rax),%rax
  418ff0:	48 8d 48 01          	lea    0x1(%rax),%rcx
  418ff4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418ff8:	48 89 0a             	mov    %rcx,(%rdx)
  418ffb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  418fff:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  419003:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  419007:	48 89 d6             	mov    %rdx,%rsi
  41900a:	48 89 c7             	mov    %rax,%rdi
  41900d:	e8 b6 37 ff ff       	call   40c7c8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  419012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  419016:	c9                   	leave
  419017:	c3                   	ret

0000000000419018 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
  419018:	55                   	push   %rbp
  419019:	48 89 e5             	mov    %rsp,%rbp
  41901c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  419020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419024:	48 8b 00             	mov    (%rax),%rax
  419027:	5d                   	pop    %rbp
  419028:	c3                   	ret
  419029:	90                   	nop

000000000041902a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>:
	  _First_and_curr(_It __first, _It __curr)
  41902a:	55                   	push   %rbp
  41902b:	48 89 e5             	mov    %rsp,%rbp
  41902e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  419032:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  419036:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  : _M_first(__first), _M_curr(__curr) { }
  41903a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41903e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  419042:	48 89 10             	mov    %rdx,(%rax)
  419045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419049:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41904d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  419051:	90                   	nop
  419052:	5d                   	pop    %rbp
  419053:	c3                   	ret

0000000000419054 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>:
      _M_read()
  419054:	55                   	push   %rbp
  419055:	48 89 e5             	mov    %rsp,%rbp
  419058:	48 83 ec 10          	sub    $0x10,%rsp
  41905c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	    _M_read_utf32();
  419060:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419064:	48 89 c7             	mov    %rax,%rdi
  419067:	e8 c4 0a 00 00       	call   419b30 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev>
      }
  41906c:	90                   	nop
  41906d:	c9                   	leave
  41906e:	c3                   	ret
  41906f:	90                   	nop

0000000000419070 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardC1EPS4_>:
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
  419070:	55                   	push   %rbp
  419071:	48 89 e5             	mov    %rsp,%rbp
  419074:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  419078:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41907c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419080:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  419084:	48 89 10             	mov    %rdx,(%rax)
  419087:	90                   	nop
  419088:	5d                   	pop    %rbp
  419089:	c3                   	ret

000000000041908a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>:
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
  41908a:	55                   	push   %rbp
  41908b:	48 89 e5             	mov    %rsp,%rbp
  41908e:	48 83 ec 10          	sub    $0x10,%rsp
  419092:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  419096:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41909a:	48 8b 00             	mov    (%rax),%rax
  41909d:	48 85 c0             	test   %rax,%rax
  4190a0:	74 0f                	je     4190b1 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev+0x27>
  4190a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4190a6:	48 8b 00             	mov    (%rax),%rax
  4190a9:	48 89 c7             	mov    %rax,%rdi
  4190ac:	e8 3d 06 ff ff       	call   4096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  4190b1:	90                   	nop
  4190b2:	c9                   	leave
  4190b3:	c3                   	ret

00000000004190b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
  4190b4:	55                   	push   %rbp
  4190b5:	48 89 e5             	mov    %rsp,%rbp
  4190b8:	53                   	push   %rbx
  4190b9:	48 83 ec 58          	sub    $0x58,%rsp
  4190bd:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
	size_type __len = 0;
  4190c1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4190c8:	00
	size_type __capacity = size_type(_S_local_capacity);
  4190c9:	48 c7 45 c0 0f 00 00 	movq   $0xf,-0x40(%rbp)
  4190d0:	00
  4190d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4190d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (std::is_constant_evaluated())
  4190d9:	e8 5c b5 fe ff       	call   40463a <_ZSt21is_constant_evaluatedv>
  4190de:	84 c0                	test   %al,%al
  4190e0:	74 28                	je     41910a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x56>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4190e2:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  4190e9:	00
  4190ea:	eb 17                	jmp    419103 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x4f>
	    _M_local_buf[__i] = _CharT();
  4190ec:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4190f0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4190f4:	48 01 d0             	add    %rdx,%rax
  4190f7:	48 83 c0 10          	add    $0x10,%rax
  4190fb:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4190fe:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
  419103:	48 83 7d d0 0f       	cmpq   $0xf,-0x30(%rbp)
  419108:	76 e2                	jbe    4190ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x38>
      }
  41910a:	90                   	nop
	while (__beg != __end && __len < __capacity)
  41910b:	eb 28                	jmp    419135 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x81>
	    _M_local_buf[__len++] = *__beg;
  41910d:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419111:	e8 e8 0a 00 00       	call   419bfe <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>
  419116:	89 c2                	mov    %eax,%edx
  419118:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41911c:	48 8d 48 01          	lea    0x1(%rax),%rcx
  419120:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  419124:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  419128:	88 54 01 10          	mov    %dl,0x10(%rcx,%rax,1)
	    ++__beg;
  41912c:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419130:	e8 f5 0a 00 00       	call   419c2a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>
	while (__beg != __end && __len < __capacity)
  419135:	48 83 ec 28          	sub    $0x28,%rsp
  419139:	48 89 e0             	mov    %rsp,%rax
  41913c:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  419140:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  419144:	48 89 08             	mov    %rcx,(%rax)
  419147:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41914b:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  41914f:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  419153:	48 89 48 10          	mov    %rcx,0x10(%rax)
  419157:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41915b:	48 8b 55 58          	mov    0x58(%rbp),%rdx
  41915f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  419163:	48 83 ec 28          	sub    $0x28,%rsp
  419167:	48 89 e0             	mov    %rsp,%rax
  41916a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  41916e:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  419172:	48 89 08             	mov    %rcx,(%rax)
  419175:	48 89 58 08          	mov    %rbx,0x8(%rax)
  419179:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  41917d:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  419181:	48 89 48 10          	mov    %rcx,0x10(%rax)
  419185:	48 89 58 18          	mov    %rbx,0x18(%rax)
  419189:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  41918d:	48 89 50 20          	mov    %rdx,0x20(%rax)
  419191:	e8 20 0a 00 00       	call   419bb6 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>
  419196:	48 83 c4 50          	add    $0x50,%rsp
  41919a:	83 f0 01             	xor    $0x1,%eax
  41919d:	84 c0                	test   %al,%al
  41919f:	74 11                	je     4191b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0xfe>
  4191a1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4191a5:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4191a9:	73 07                	jae    4191b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0xfe>
  4191ab:	b8 01 00 00 00       	mov    $0x1,%eax
  4191b0:	eb 05                	jmp    4191b7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x103>
  4191b2:	b8 00 00 00 00       	mov    $0x0,%eax
  4191b7:	84 c0                	test   %al,%al
  4191b9:	0f 85 4e ff ff ff    	jne    41910d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x59>
	} __guard(this);
  4191bf:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4191c3:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  4191c7:	48 89 d6             	mov    %rdx,%rsi
  4191ca:	48 89 c7             	mov    %rax,%rdi
  4191cd:	e8 9e fe ff ff       	call   419070 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardC1EPS4_>
	while (__beg != __end)
  4191d2:	e9 c7 00 00 00       	jmp    41929e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x1ea>
	    if (__len == __capacity)
  4191d7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4191db:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4191df:	75 7b                	jne    41925c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x1a8>
		__capacity = __len + 1;
  4191e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4191e5:	48 83 c0 01          	add    $0x1,%rax
  4191e9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		pointer __another = _M_create(__capacity, __len);
  4191ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4191f1:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  4191f5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4191f9:	48 89 ce             	mov    %rcx,%rsi
  4191fc:	48 89 c7             	mov    %rax,%rdi
  4191ff:	e8 40 1c ff ff       	call   40ae44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  419204:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		this->_S_copy(__another, _M_data(), __len);
  419208:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41920c:	48 89 c7             	mov    %rax,%rdi
  41920f:	e8 c0 e2 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  419214:	48 89 c1             	mov    %rax,%rcx
  419217:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41921b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41921f:	48 89 ce             	mov    %rcx,%rsi
  419222:	48 89 c7             	mov    %rax,%rdi
  419225:	e8 ae 2d ff ff       	call   40bfd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
		_M_dispose();
  41922a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41922e:	48 89 c7             	mov    %rax,%rdi
  419231:	e8 b8 04 ff ff       	call   4096ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
		_M_data(__another);
  419236:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41923a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41923e:	48 89 d6             	mov    %rdx,%rsi
  419241:	48 89 c7             	mov    %rax,%rdi
  419244:	e8 fd 04 ff ff       	call   409746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		_M_capacity(__capacity);
  419249:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41924d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  419251:	48 89 d6             	mov    %rdx,%rsi
  419254:	48 89 c7             	mov    %rax,%rdi
  419257:	e8 04 05 ff ff       	call   409760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	    traits_type::assign(_M_data()[__len++], *__beg);
  41925c:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419260:	e8 99 09 00 00       	call   419bfe <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>
  419265:	88 45 cf             	mov    %al,-0x31(%rbp)
  419268:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41926c:	48 89 c7             	mov    %rax,%rdi
  41926f:	e8 60 e2 fe ff       	call   4074d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  419274:	48 89 c2             	mov    %rax,%rdx
  419277:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41927b:	48 8d 48 01          	lea    0x1(%rax),%rcx
  41927f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  419283:	48 01 c2             	add    %rax,%rdx
  419286:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
  41928a:	48 89 c6             	mov    %rax,%rsi
  41928d:	48 89 d7             	mov    %rdx,%rdi
  419290:	e8 4b b4 fe ff       	call   4046e0 <_ZNSt11char_traitsIcE6assignERcRKc>
	    ++__beg;
  419295:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419299:	e8 8c 09 00 00       	call   419c2a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>
	while (__beg != __end)
  41929e:	48 83 ec 28          	sub    $0x28,%rsp
  4192a2:	48 89 e0             	mov    %rsp,%rax
  4192a5:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  4192a9:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  4192ad:	48 89 08             	mov    %rcx,(%rax)
  4192b0:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4192b4:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  4192b8:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  4192bc:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4192c0:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4192c4:	48 8b 55 58          	mov    0x58(%rbp),%rdx
  4192c8:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4192cc:	48 83 ec 28          	sub    $0x28,%rsp
  4192d0:	48 89 e0             	mov    %rsp,%rax
  4192d3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4192d7:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4192db:	48 89 08             	mov    %rcx,(%rax)
  4192de:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4192e2:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  4192e6:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  4192ea:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4192ee:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4192f2:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  4192f6:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4192fa:	e8 b7 08 00 00       	call   419bb6 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>
  4192ff:	48 83 c4 50          	add    $0x50,%rsp
  419303:	83 f0 01             	xor    $0x1,%eax
  419306:	84 c0                	test   %al,%al
  419308:	0f 85 c9 fe ff ff    	jne    4191d7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x123>
	__guard._M_guarded = 0;
  41930e:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  419315:	00
	_M_set_length(__len);
  419316:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41931a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41931e:	48 89 d6             	mov    %rdx,%rsi
  419321:	48 89 c7             	mov    %rax,%rdi
  419324:	e8 bd e1 fe ff       	call   4074e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  419329:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  41932d:	48 89 c7             	mov    %rax,%rdi
  419330:	e8 55 fd ff ff       	call   41908a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>
  419335:	eb 1a                	jmp    419351 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x29d>
  419337:	48 89 c3             	mov    %rax,%rbx
  41933a:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  41933e:	48 89 c7             	mov    %rax,%rdi
  419341:	e8 44 fd ff ff       	call   41908a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>
  419346:	48 89 d8             	mov    %rbx,%rax
  419349:	48 89 c7             	mov    %rax,%rdi
  41934c:	e8 bf b0 fe ff       	call   404410 <_Unwind_Resume@plt>
  419351:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419355:	c9                   	leave
  419356:	c3                   	ret

0000000000419357 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIdNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  419357:	55                   	push   %rbp
  419358:	48 89 e5             	mov    %rsp,%rbp
  41935b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41935f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419363:	5d                   	pop    %rbp
  419364:	c3                   	ret

0000000000419365 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIeNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  419365:	55                   	push   %rbp
  419366:	48 89 e5             	mov    %rsp,%rbp
  419369:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41936d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419371:	5d                   	pop    %rbp
  419372:	c3                   	ret
  419373:	90                   	nop

0000000000419374 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_baseC1Ev>:
  struct _Grapheme_cluster_iterator_base
  419374:	55                   	push   %rbp
  419375:	48 89 e5             	mov    %rsp,%rbp
  419378:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41937c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419380:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  419384:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419388:	c6 40 09 00          	movb   $0x0,0x9(%rax)
  41938c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419390:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
  419394:	90                   	nop
  419395:	5d                   	pop    %rbp
  419396:	c3                   	ret
  419397:	90                   	nop

0000000000419398 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE>:
	_Iterator(_U32_iterator __i)
  419398:	55                   	push   %rbp
  419399:	48 89 e5             	mov    %rsp,%rbp
  41939c:	53                   	push   %rbx
  41939d:	48 83 ec 18          	sub    $0x18,%rsp
  4193a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	: _M_base(__i)
  4193a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4193a9:	48 89 c7             	mov    %rax,%rdi
  4193ac:	e8 c3 ff ff ff       	call   419374 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_baseC1Ev>
  4193b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4193b5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4193b9:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4193bd:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4193c1:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4193c5:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  4193c9:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  4193cd:	48 89 48 20          	mov    %rcx,0x20(%rax)
  4193d1:	48 89 58 28          	mov    %rbx,0x28(%rax)
  4193d5:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  4193d9:	48 89 50 30          	mov    %rdx,0x30(%rax)
	  if (__i != __i.end())
  4193dd:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4193e1:	e8 a2 ea ff ff       	call   417e88 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  4193e6:	48 89 c6             	mov    %rax,%rsi
  4193e9:	48 83 ec 08          	sub    $0x8,%rsp
  4193ed:	48 83 ec 28          	sub    $0x28,%rsp
  4193f1:	48 89 e0             	mov    %rsp,%rax
  4193f4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4193f8:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4193fc:	48 89 08             	mov    %rcx,(%rax)
  4193ff:	48 89 58 08          	mov    %rbx,0x8(%rax)
  419403:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  419407:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  41940b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41940f:	48 89 58 18          	mov    %rbx,0x18(%rax)
  419413:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  419417:	48 89 50 20          	mov    %rdx,0x20(%rax)
  41941b:	48 89 f7             	mov    %rsi,%rdi
  41941e:	e8 35 00 00 00       	call   419458 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  419423:	48 83 c4 30          	add    $0x30,%rsp
  419427:	83 f0 01             	xor    $0x1,%eax
  41942a:	84 c0                	test   %al,%al
  41942c:	74 23                	je     419451 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE+0xb9>
	      _M_c = *__i;
  41942e:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419432:	e8 ef 17 ff ff       	call   40ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  419437:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41943b:	89 02                	mov    %eax,(%rdx)
	      _M_prop = __grapheme_cluster_break_property(_M_c);
  41943d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419441:	8b 00                	mov    (%rax),%eax
  419443:	89 c7                	mov    %eax,%edi
  419445:	e8 f1 b9 fe ff       	call   404e3b <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>
  41944a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41944e:	89 42 04             	mov    %eax,0x4(%rdx)
	}
  419451:	90                   	nop
  419452:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419456:	c9                   	leave
  419457:	c3                   	ret

0000000000419458 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>:
      operator==(_Utf_iterator __lhs, _Sent __rhs)
  419458:	55                   	push   %rbp
  419459:	48 89 e5             	mov    %rsp,%rbp
  41945c:	48 83 ec 10          	sub    $0x10,%rsp
  419460:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  return __lhs._M_curr() == __rhs;
  419464:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419468:	e8 b9 16 ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  41946d:	48 8b 00             	mov    (%rax),%rax
  419470:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  419474:	0f 94 c0             	sete   %al
      }
  419477:	c9                   	leave
  419478:	c3                   	ret
  419479:	90                   	nop

000000000041947a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE>:
	_M_is_break(_Gcb_property __p1, _Gcb_property __p2,
  41947a:	55                   	push   %rbp
  41947b:	48 89 e5             	mov    %rsp,%rbp
  41947e:	53                   	push   %rbx
  41947f:	48 83 ec 48          	sub    $0x48,%rsp
  419483:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  419487:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  41948a:	89 55 b0             	mov    %edx,-0x50(%rbp)
	  if (__p1 == _Gcb_Control || __p1 == _Gcb_LF)
  41948d:	83 7d b4 01          	cmpl   $0x1,-0x4c(%rbp)
  419491:	74 06                	je     419499 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1f>
  419493:	83 7d b4 02          	cmpl   $0x2,-0x4c(%rbp)
  419497:	75 0a                	jne    4194a3 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x29>
	    return true; // Break after Control or LF.
  419499:	b8 01 00 00 00       	mov    $0x1,%eax
  41949e:	e9 dd 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_CR)
  4194a3:	83 7d b4 03          	cmpl   $0x3,-0x4c(%rbp)
  4194a7:	75 0c                	jne    4194b5 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x3b>
	    return __p2 != _Gcb_LF; // Do not break between a CR and LF.
  4194a9:	83 7d b0 02          	cmpl   $0x2,-0x50(%rbp)
  4194ad:	0f 95 c0             	setne  %al
  4194b0:	e9 cb 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_Control || __p2 == _Gcb_CR || __p2 == _Gcb_LF)
  4194b5:	83 7d b0 01          	cmpl   $0x1,-0x50(%rbp)
  4194b9:	74 0c                	je     4194c7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x4d>
  4194bb:	83 7d b0 03          	cmpl   $0x3,-0x50(%rbp)
  4194bf:	74 06                	je     4194c7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x4d>
  4194c1:	83 7d b0 02          	cmpl   $0x2,-0x50(%rbp)
  4194c5:	75 0a                	jne    4194d1 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x57>
	    return true; // Break before Control, CR or LF.
  4194c7:	b8 01 00 00 00       	mov    $0x1,%eax
  4194cc:	e9 af 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_L)
  4194d1:	83 7d b4 07          	cmpl   $0x7,-0x4c(%rbp)
  4194d5:	75 2d                	jne    419504 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x8a>
	    switch (__p2)
  4194d7:	83 7d b0 08          	cmpl   $0x8,-0x50(%rbp)
  4194db:	7f 08                	jg     4194e5 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x6b>
  4194dd:	83 7d b0 07          	cmpl   $0x7,-0x50(%rbp)
  4194e1:	7d 0d                	jge    4194f0 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x76>
  4194e3:	eb 15                	jmp    4194fa <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x80>
  4194e5:	8b 45 b0             	mov    -0x50(%rbp),%eax
  4194e8:	83 e8 0b             	sub    $0xb,%eax
  4194eb:	83 f8 01             	cmp    $0x1,%eax
  4194ee:	77 0a                	ja     4194fa <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x80>
		return false; // Do not break Hangul syllable sequences.
  4194f0:	b8 00 00 00 00       	mov    $0x0,%eax
  4194f5:	e9 86 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
		return true;
  4194fa:	b8 01 00 00 00       	mov    $0x1,%eax
  4194ff:	e9 7c 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_LV || __p1 == _Gcb_V)
  419504:	83 7d b4 0b          	cmpl   $0xb,-0x4c(%rbp)
  419508:	74 06                	je     419510 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x96>
  41950a:	83 7d b4 08          	cmpl   $0x8,-0x4c(%rbp)
  41950e:	75 1f                	jne    41952f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xb5>
  419510:	8b 45 b0             	mov    -0x50(%rbp),%eax
  419513:	83 e8 08             	sub    $0x8,%eax
	    switch (__p2)
  419516:	83 f8 01             	cmp    $0x1,%eax
  419519:	77 0a                	ja     419525 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xab>
		return false; // Do not break Hangul syllable sequences.
  41951b:	b8 00 00 00 00       	mov    $0x0,%eax
  419520:	e9 5b 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
		return true;
  419525:	b8 01 00 00 00       	mov    $0x1,%eax
  41952a:	e9 51 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_LVT || __p1 == _Gcb_T)
  41952f:	83 7d b4 0c          	cmpl   $0xc,-0x4c(%rbp)
  419533:	74 06                	je     41953b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xc1>
  419535:	83 7d b4 09          	cmpl   $0x9,-0x4c(%rbp)
  419539:	75 0c                	jne    419547 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xcd>
	    return __p2 != _Gcb_T; // Do not break Hangul syllable sequences.
  41953b:	83 7d b0 09          	cmpl   $0x9,-0x50(%rbp)
  41953f:	0f 95 c0             	setne  %al
  419542:	e9 39 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_Extend || __p2 == _Gcb_ZWJ)
  419547:	83 7d b0 04          	cmpl   $0x4,-0x50(%rbp)
  41954b:	74 06                	je     419553 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xd9>
  41954d:	83 7d b0 0a          	cmpl   $0xa,-0x50(%rbp)
  419551:	75 0a                	jne    41955d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xe3>
	    return false; // Do not break before extending characters or ZWJ.
  419553:	b8 00 00 00 00       	mov    $0x0,%eax
  419558:	e9 23 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_SpacingMark)
  41955d:	83 7d b0 06          	cmpl   $0x6,-0x50(%rbp)
  419561:	75 0a                	jne    41956d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xf3>
	    return false; // Do not break before SpacingMarks,
  419563:	b8 00 00 00 00       	mov    $0x0,%eax
  419568:	e9 13 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_Prepend)
  41956d:	83 7d b4 05          	cmpl   $0x5,-0x4c(%rbp)
  419571:	75 0a                	jne    41957d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x103>
	    return false; // or after Prepend characters.
  419573:	b8 00 00 00 00       	mov    $0x0,%eax
  419578:	e9 03 02 00 00       	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (_M_incb_linker_seen
  41957d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  419581:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
		&& __incb_property(*__curr) == _InCB::_Consonant)
  419585:	84 c0                	test   %al,%al
  419587:	74 2e                	je     4195b7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
		&& __incb_property(_M_c) == _InCB::_Consonant
  419589:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41958d:	8b 00                	mov    (%rax),%eax
  41958f:	89 c7                	mov    %eax,%edi
  419591:	e8 26 b9 fe ff       	call   404ebc <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  419596:	83 f8 01             	cmp    $0x1,%eax
  419599:	75 1c                	jne    4195b7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
		&& __incb_property(*__curr) == _InCB::_Consonant)
  41959b:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  41959f:	e8 82 16 ff ff       	call   40ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  4195a4:	89 c7                	mov    %eax,%edi
  4195a6:	e8 11 b9 fe ff       	call   404ebc <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  4195ab:	83 f8 01             	cmp    $0x1,%eax
  4195ae:	75 07                	jne    4195b7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
  4195b0:	b8 01 00 00 00       	mov    $0x1,%eax
  4195b5:	eb 05                	jmp    4195bc <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x142>
  4195b7:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (_M_incb_linker_seen
  4195bc:	84 c0                	test   %al,%al
  4195be:	0f 84 7b 01 00 00    	je     41973f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2c5>
	      bool __have_linker = false;
  4195c4:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
	      auto __it = _M_base;
  4195c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4195cc:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4195d0:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4195d4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4195d8:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  4195dc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  4195e0:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4195e4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  4195e8:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  4195ec:	48 8b 40 30          	mov    0x30(%rax),%rax
  4195f0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (++__it != __curr)
  4195f4:	eb 45                	jmp    41963b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		  if (__is_incb_linker(*__it))
  4195f6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4195fa:	48 89 c7             	mov    %rax,%rdi
  4195fd:	e8 24 16 ff ff       	call   40ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  419602:	89 c7                	mov    %eax,%edi
  419604:	e8 81 b8 fe ff       	call   404e8a <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>
  419609:	84 c0                	test   %al,%al
  41960b:	74 06                	je     419613 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x199>
		    __have_linker = true;
  41960d:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  419611:	eb 28                	jmp    41963b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		      auto __incb = __incb_property(*__it);
  419613:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  419617:	48 89 c7             	mov    %rax,%rdi
  41961a:	e8 07 16 ff ff       	call   40ac26 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  41961f:	89 c7                	mov    %eax,%edi
  419621:	e8 96 b8 fe ff       	call   404ebc <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  419626:	89 45 e8             	mov    %eax,-0x18(%rbp)
		      if (__incb == _InCB::_Consonant)
  419629:	83 7d e8 01          	cmpl   $0x1,-0x18(%rbp)
  41962d:	75 06                	jne    419635 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1bb>
			__have_linker = false;
  41962f:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  419633:	eb 06                	jmp    41963b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		      else if (__incb != _InCB::_Extend)
  419635:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  419639:	75 7d                	jne    4196b8 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x23e>
	      while (++__it != __curr)
  41963b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41963f:	48 89 c7             	mov    %rax,%rdi
  419642:	e8 93 27 ff ff       	call   40bdda <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
  419647:	48 83 ec 28          	sub    $0x28,%rsp
  41964b:	48 89 e2             	mov    %rsp,%rdx
  41964e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  419652:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  419656:	48 89 0a             	mov    %rcx,(%rdx)
  419659:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  41965d:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  419661:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  419665:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  419669:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  41966d:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  419671:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
  419675:	48 83 ec 28          	sub    $0x28,%rsp
  419679:	48 89 e2             	mov    %rsp,%rdx
  41967c:	48 8b 08             	mov    (%rax),%rcx
  41967f:	48 8b 58 08          	mov    0x8(%rax),%rbx
  419683:	48 89 0a             	mov    %rcx,(%rdx)
  419686:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  41968a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  41968e:	48 8b 58 18          	mov    0x18(%rax),%rbx
  419692:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  419696:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  41969a:	48 8b 40 20          	mov    0x20(%rax),%rax
  41969e:	48 89 42 20          	mov    %rax,0x20(%rdx)
  4196a2:	e8 8e 06 00 00       	call   419d35 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>
  4196a7:	48 83 c4 50          	add    $0x50,%rsp
  4196ab:	83 f0 01             	xor    $0x1,%eax
  4196ae:	84 c0                	test   %al,%al
  4196b0:	0f 85 40 ff ff ff    	jne    4195f6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x17c>
  4196b6:	eb 01                	jmp    4196b9 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x23f>
			break;
  4196b8:	90                   	nop
	      if (__it == __curr && __have_linker)
  4196b9:	48 83 ec 28          	sub    $0x28,%rsp
  4196bd:	48 89 e0             	mov    %rsp,%rax
  4196c0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4196c4:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4196c8:	48 89 08             	mov    %rcx,(%rax)
  4196cb:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4196cf:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  4196d3:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  4196d7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4196db:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4196df:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  4196e3:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4196e7:	48 83 ec 28          	sub    $0x28,%rsp
  4196eb:	48 89 e0             	mov    %rsp,%rax
  4196ee:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4196f2:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  4196f6:	48 89 08             	mov    %rcx,(%rax)
  4196f9:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4196fd:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  419701:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  419705:	48 89 48 10          	mov    %rcx,0x10(%rax)
  419709:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41970d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  419711:	48 89 50 20          	mov    %rdx,0x20(%rax)
  419715:	e8 1b 06 00 00       	call   419d35 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>
  41971a:	48 83 c4 50          	add    $0x50,%rsp
  41971e:	84 c0                	test   %al,%al
  419720:	74 0d                	je     41972f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2b5>
  419722:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  419726:	74 07                	je     41972f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2b5>
  419728:	b8 01 00 00 00       	mov    $0x1,%eax
  41972d:	eb 05                	jmp    419734 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2ba>
  41972f:	b8 00 00 00 00       	mov    $0x0,%eax
  419734:	84 c0                	test   %al,%al
  419736:	74 07                	je     41973f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2c5>
		return false;
  419738:	b8 00 00 00 00       	mov    $0x0,%eax
  41973d:	eb 41                	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_ZWJ && _M_xpicto_seq_state == _XPicto::_Matched)
  41973f:	83 7d b4 0a          	cmpl   $0xa,-0x4c(%rbp)
  419743:	75 13                	jne    419758 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2de>
  419745:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  419749:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  41974d:	3c 02                	cmp    $0x2,%al
  41974f:	75 07                	jne    419758 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2de>
	    return false;
  419751:	b8 00 00 00 00       	mov    $0x0,%eax
  419756:	eb 28                	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_property::_Gcb_Regional_Indicator && __p1 == __p2)
  419758:	83 7d b4 0d          	cmpl   $0xd,-0x4c(%rbp)
  41975c:	75 1d                	jne    41977b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x301>
  41975e:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  419761:	3b 45 b0             	cmp    -0x50(%rbp),%eax
  419764:	75 15                	jne    41977b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x301>
	    return (_M_RI_count & 1) == 0;
  419766:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41976a:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  41976e:	0f b6 c0             	movzbl %al,%eax
  419771:	83 e0 01             	and    $0x1,%eax
  419774:	85 c0                	test   %eax,%eax
  419776:	0f 94 c0             	sete   %al
  419779:	eb 05                	jmp    419780 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  return true; // Otherwise, break everywhere.
  41977b:	b8 01 00 00 00       	mov    $0x1,%eax
	}
  419780:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419784:	c9                   	leave
  419785:	c3                   	ret

0000000000419786 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  419786:	55                   	push   %rbp
  419787:	48 89 e5             	mov    %rsp,%rbp
  41978a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41978e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419792:	5d                   	pop    %rbp
  419793:	c3                   	ret

0000000000419794 <_ZSt11__bit_widthIoEiT_>:
    __bit_width(_Tp __x) noexcept
  419794:	55                   	push   %rbp
  419795:	48 89 e5             	mov    %rsp,%rbp
  419798:	48 83 ec 20          	sub    $0x20,%rsp
  41979c:	48 89 f8             	mov    %rdi,%rax
  41979f:	48 89 f1             	mov    %rsi,%rcx
  4197a2:	48 89 c0             	mov    %rax,%rax
  4197a5:	ba 00 00 00 00       	mov    $0x0,%edx
  4197aa:	48 89 ca             	mov    %rcx,%rdx
  4197ad:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4197b1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  4197b5:	c7 45 fc 80 00 00 00 	movl   $0x80,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  4197bc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4197c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4197c4:	48 89 d7             	mov    %rdx,%rdi
  4197c7:	48 89 c6             	mov    %rax,%rsi
  4197ca:	e8 ad 05 00 00       	call   419d7c <_ZSt13__countl_zeroIoEiT_>
  4197cf:	ba 80 00 00 00       	mov    $0x80,%edx
  4197d4:	29 c2                	sub    %eax,%edx
  4197d6:	89 d0                	mov    %edx,%eax
    }
  4197d8:	c9                   	leave
  4197d9:	c3                   	ret

00000000004197da <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  4197da:	55                   	push   %rbp
  4197db:	48 89 e5             	mov    %rsp,%rbp
  4197de:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  4197e5:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  4197ec:	89 b5 f4 fe ff ff    	mov    %esi,-0x10c(%rbp)
  4197f2:	48 89 95 e0 fe ff ff 	mov    %rdx,-0x120(%rbp)
  4197f9:	48 89 8d e8 fe ff ff 	mov    %rcx,-0x118(%rbp)
      constexpr char __digits[201] =
  419800:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  419807:	32 30 33
  41980a:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  419811:	36 30 37
  419814:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  41981b:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  419822:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  419829:	30 31 31
  41982c:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  419833:	34 31 35
  419836:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  41983d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  419844:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  41984b:	38 31 39
  41984e:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  419855:	32 32 33
  419858:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  41985f:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  419866:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  41986d:	36 32 37
  419870:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  419877:	30 33 31
  41987a:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  419881:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  419888:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  41988f:	34 33 35
  419892:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  419899:	38 33 39
  41989c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4198a3:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  4198aa:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  4198b1:	32 34 33
  4198b4:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  4198bb:	36 34 37
  4198be:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4198c5:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  4198cc:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  4198d3:	30 35 31
  4198d6:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  4198dd:	34 35 35
  4198e0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4198e7:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  4198ee:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  4198f5:	38 35 39
  4198f8:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  4198ff:	32 36 33
  419902:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  419909:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  419910:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  419917:	36 36 37
  41991a:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  419921:	30 37 31
  419924:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  419928:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  41992c:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  419933:	34 37 35
  419936:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  41993d:	38 37 39
  419940:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  419944:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  419948:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  41994f:	32 38 33
  419952:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  419959:	36 38 37
  41995c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  419960:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  419964:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  41996b:	30 39 31
  41996e:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  419975:	34 39 35
  419978:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  41997c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  419980:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  419987:	39 35 39
  41998a:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  419991:	39 39 00
  419994:	48 89 45 b9          	mov    %rax,-0x47(%rbp)
  419998:	48 89 55 c1          	mov    %rdx,-0x3f(%rbp)
      unsigned __pos = __len - 1;
  41999c:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  4199a2:	83 e8 01             	sub    $0x1,%eax
  4199a5:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  4199a8:	e9 c3 00 00 00       	jmp    419a70 <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x296>
	  auto const __num = (__val % 100) * 2;
  4199ad:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4199b4:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  4199bb:	48 89 c6             	mov    %rax,%rsi
  4199be:	48 89 d0             	mov    %rdx,%rax
  4199c1:	ba 64 00 00 00       	mov    $0x64,%edx
  4199c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  4199cb:	48 89 f7             	mov    %rsi,%rdi
  4199ce:	48 89 c6             	mov    %rax,%rsi
  4199d1:	e8 ba a9 fe ff       	call   404390 <__umodti3@plt>
  4199d6:	48 01 c0             	add    %rax,%rax
  4199d9:	48 11 d2             	adc    %rdx,%rdx
  4199dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4199e0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val /= 100;
  4199e4:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4199eb:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  4199f2:	48 89 c6             	mov    %rax,%rsi
  4199f5:	48 89 d0             	mov    %rdx,%rax
  4199f8:	ba 64 00 00 00       	mov    $0x64,%edx
  4199fd:	b9 00 00 00 00       	mov    $0x0,%ecx
  419a02:	48 89 f7             	mov    %rsi,%rdi
  419a05:	48 89 c6             	mov    %rax,%rsi
  419a08:	e8 73 a6 fe ff       	call   404080 <__udivti3@plt>
  419a0d:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  419a14:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	  __first[__pos] = __digits[__num + 1];
  419a1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  419a1f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  419a23:	48 83 c0 01          	add    $0x1,%rax
  419a27:	48 83 d2 00          	adc    $0x0,%rdx
  419a2b:	8b 75 fc             	mov    -0x4(%rbp),%esi
  419a2e:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  419a35:	48 01 f1             	add    %rsi,%rcx
  419a38:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
  419a3f:	48 01 f0             	add    %rsi,%rax
  419a42:	0f b6 00             	movzbl (%rax),%eax
  419a45:	88 01                	mov    %al,(%rcx)
	  __first[__pos - 1] = __digits[__num];
  419a47:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419a4a:	83 e8 01             	sub    $0x1,%eax
  419a4d:	89 c2                	mov    %eax,%edx
  419a4f:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  419a56:	48 01 c2             	add    %rax,%rdx
  419a59:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
  419a60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  419a64:	48 01 c8             	add    %rcx,%rax
  419a67:	0f b6 00             	movzbl (%rax),%eax
  419a6a:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  419a6c:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  419a70:	ba 63 00 00 00       	mov    $0x63,%edx
  419a75:	b8 00 00 00 00       	mov    $0x0,%eax
  419a7a:	48 3b 95 e0 fe ff ff 	cmp    -0x120(%rbp),%rdx
  419a81:	48 1b 85 e8 fe ff ff 	sbb    -0x118(%rbp),%rax
  419a88:	0f 82 1f ff ff ff    	jb     4199ad <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x1d3>
      if (__val >= 10)
  419a8e:	ba 09 00 00 00       	mov    $0x9,%edx
  419a93:	b8 00 00 00 00       	mov    $0x0,%eax
  419a98:	48 3b 95 e0 fe ff ff 	cmp    -0x120(%rbp),%rdx
  419a9f:	48 1b 85 e8 fe ff ff 	sbb    -0x118(%rbp),%rax
  419aa6:	73 62                	jae    419b0a <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x330>
	  auto const __num = __val * 2;
  419aa8:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  419aaf:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  419ab6:	48 01 c0             	add    %rax,%rax
  419ab9:	48 11 d2             	adc    %rdx,%rdx
  419abc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  419ac0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __first[1] = __digits[__num + 1];
  419ac4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  419ac8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  419acc:	48 83 c0 01          	add    $0x1,%rax
  419ad0:	48 83 d2 00          	adc    $0x0,%rdx
  419ad4:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  419adb:	48 83 c1 01          	add    $0x1,%rcx
  419adf:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
  419ae6:	48 01 f0             	add    %rsi,%rax
  419ae9:	0f b6 00             	movzbl (%rax),%eax
  419aec:	88 01                	mov    %al,(%rcx)
	  __first[0] = __digits[__num];
  419aee:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
  419af5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  419af9:	48 01 d0             	add    %rdx,%rax
  419afc:	0f b6 10             	movzbl (%rax),%edx
  419aff:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  419b06:	88 10                	mov    %dl,(%rax)
    }
  419b08:	eb 15                	jmp    419b1f <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x345>
	__first[0] = '0' + __val;
  419b0a:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  419b11:	83 c0 30             	add    $0x30,%eax
  419b14:	89 c2                	mov    %eax,%edx
  419b16:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  419b1d:	88 10                	mov    %dl,(%rax)
    }
  419b1f:	90                   	nop
  419b20:	c9                   	leave
  419b21:	c3                   	ret

0000000000419b22 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeEUlPcmE_EONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
  419b22:	55                   	push   %rbp
  419b23:	48 89 e5             	mov    %rsp,%rbp
  419b26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  419b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419b2e:	5d                   	pop    %rbp
  419b2f:	c3                   	ret

0000000000419b30 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev>:
      _M_read_utf32()
  419b30:	55                   	push   %rbp
  419b31:	48 89 e5             	mov    %rsp,%rbp
  419b34:	48 83 ec 30          	sub    $0x30,%rsp
  419b38:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	_Guard<_Iter> __g{this, _M_curr()};
  419b3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419b40:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  419b44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419b48:	48 89 c7             	mov    %rax,%rdi
  419b4b:	e8 90 de ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419b50:	48 8b 00             	mov    (%rax),%rax
  419b53:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	char32_t __c = *_M_curr()++;
  419b57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419b5b:	48 89 c7             	mov    %rax,%rdi
  419b5e:	e8 7d de ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419b63:	48 8b 10             	mov    (%rax),%rdx
  419b66:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  419b6a:	48 89 08             	mov    %rcx,(%rax)
  419b6d:	8b 02                	mov    (%rdx),%eax
  419b6f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (!__is_scalar_value(__c)) [[unlikely]]
  419b72:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419b75:	89 c7                	mov    %eax,%edi
  419b77:	e8 0f b2 fe ff       	call   404d8b <_ZNSt9__unicode17__is_scalar_valueEDi>
  419b7c:	83 f0 01             	xor    $0x1,%eax
  419b7f:	84 c0                	test   %al,%al
  419b81:	74 0f                	je     419b92 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev+0x62>
	  __c = _S_error();
  419b83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419b87:	48 89 c7             	mov    %rax,%rdi
  419b8a:	e8 b9 02 00 00       	call   419e48 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv>
  419b8f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	_M_update(__c, 1);
  419b92:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  419b95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419b99:	ba 01 00 00 00       	mov    $0x1,%edx
  419b9e:	89 ce                	mov    %ecx,%esi
  419ba0:	48 89 c7             	mov    %rax,%rdi
  419ba3:	e8 e2 02 00 00       	call   419e8a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih>
      }
  419ba8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  419bac:	48 89 c7             	mov    %rax,%rdi
  419baf:	e8 5a 02 00 00       	call   419e0e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE6_GuardIS2_ED1Ev>
  419bb4:	c9                   	leave
  419bb5:	c3                   	ret

0000000000419bb6 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>:
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
  419bb6:	55                   	push   %rbp
  419bb7:	48 89 e5             	mov    %rsp,%rbp
  419bba:	53                   	push   %rbx
  419bbb:	48 83 ec 08          	sub    $0x8,%rsp
	  return __lhs._M_curr() == __rhs._M_curr()
  419bbf:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419bc3:	e8 18 de ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419bc8:	48 8b 18             	mov    (%rax),%rbx
  419bcb:	48 8d 45 38          	lea    0x38(%rbp),%rax
  419bcf:	48 89 c7             	mov    %rax,%rdi
  419bd2:	e8 09 de ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419bd7:	48 8b 00             	mov    (%rax),%rax
		   && __lhs._M_buf_index == __rhs._M_buf_index;
  419bda:	48 39 c3             	cmp    %rax,%rbx
  419bdd:	75 13                	jne    419bf2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419bdf:	0f b6 55 28          	movzbl 0x28(%rbp),%edx
  419be3:	0f b6 45 50          	movzbl 0x50(%rbp),%eax
  419be7:	38 c2                	cmp    %al,%dl
  419be9:	75 07                	jne    419bf2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419beb:	b8 01 00 00 00       	mov    $0x1,%eax
  419bf0:	eb 05                	jmp    419bf7 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x41>
  419bf2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  419bf7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419bfb:	c9                   	leave
  419bfc:	c3                   	ret
  419bfd:	90                   	nop

0000000000419bfe <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>:
      operator*() const { return _M_buf[_M_buf_index]; }
  419bfe:	55                   	push   %rbp
  419bff:	48 89 e5             	mov    %rsp,%rbp
  419c02:	48 83 ec 10          	sub    $0x10,%rsp
  419c06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  419c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419c0e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  419c12:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
  419c16:	0f b6 d2             	movzbl %dl,%edx
  419c19:	48 89 d6             	mov    %rdx,%rsi
  419c1c:	48 89 c7             	mov    %rax,%rdi
  419c1f:	e8 94 04 00 00       	call   41a0b8 <_ZNKSt5arrayIcLm4EEixEm>
  419c24:	0f b6 00             	movzbl (%rax),%eax
  419c27:	c9                   	leave
  419c28:	c3                   	ret
  419c29:	90                   	nop

0000000000419c2a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>:
      operator++()
  419c2a:	55                   	push   %rbp
  419c2b:	48 89 e5             	mov    %rsp,%rbp
  419c2e:	53                   	push   %rbx
  419c2f:	48 83 ec 38          	sub    $0x38,%rsp
  419c33:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
  419c37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419c3b:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  419c3f:	0f b6 c0             	movzbl %al,%eax
  419c42:	8d 50 01             	lea    0x1(%rax),%edx
  419c45:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419c49:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  419c4d:	0f b6 c0             	movzbl %al,%eax
  419c50:	39 c2                	cmp    %eax,%edx
  419c52:	75 23                	jne    419c77 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x4d>
  419c54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419c58:	48 89 c7             	mov    %rax,%rdi
  419c5b:	e8 80 dd ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419c60:	48 8b 10             	mov    (%rax),%rdx
  419c63:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419c67:	48 8b 40 20          	mov    0x20(%rax),%rax
  419c6b:	48 39 c2             	cmp    %rax,%rdx
  419c6e:	74 07                	je     419c77 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x4d>
  419c70:	b8 01 00 00 00       	mov    $0x1,%eax
  419c75:	eb 05                	jmp    419c7c <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x52>
  419c77:	b8 00 00 00 00       	mov    $0x0,%eax
  419c7c:	84 c0                	test   %al,%al
  419c7e:	74 7c                	je     419cfc <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0xd2>
	      std::advance(_M_curr(), _M_to_increment);
  419c80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419c84:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  419c88:	0f b6 d8             	movzbl %al,%ebx
  419c8b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419c8f:	48 89 c7             	mov    %rax,%rdi
  419c92:	e8 49 dd ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419c97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  419c9b:	88 5d e7             	mov    %bl,-0x19(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  419c9e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  419ca2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  419ca6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419caa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  419cae:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  419caf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  419cb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419cb7:	48 89 d6             	mov    %rdx,%rsi
  419cba:	48 89 c7             	mov    %rax,%rdi
  419cbd:	e8 06 2a ff ff       	call   40c6c8 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>
    }
  419cc2:	90                   	nop
	    if (_M_curr() == _M_last)
  419cc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419cc7:	48 89 c7             	mov    %rax,%rdi
  419cca:	e8 11 dd ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419ccf:	48 8b 10             	mov    (%rax),%rdx
  419cd2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419cd6:	48 8b 40 20          	mov    0x20(%rax),%rax
  419cda:	48 39 c2             	cmp    %rax,%rdx
  419cdd:	0f 94 c0             	sete   %al
  419ce0:	84 c0                	test   %al,%al
  419ce2:	74 0a                	je     419cee <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0xc4>
	      _M_buf_index = 0;
  419ce4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419ce8:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  419cec:	eb 3d                	jmp    419d2b <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	      _M_read();
  419cee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419cf2:	48 89 c7             	mov    %rax,%rdi
  419cf5:	e8 5a f3 ff ff       	call   419054 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>
  419cfa:	eb 2f                	jmp    419d2b <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	else if (_M_buf_index + 1 < _M_buf_last)
  419cfc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419d00:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  419d04:	0f b6 c0             	movzbl %al,%eax
  419d07:	8d 50 01             	lea    0x1(%rax),%edx
  419d0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419d0e:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  419d12:	0f b6 c0             	movzbl %al,%eax
  419d15:	39 c2                	cmp    %eax,%edx
  419d17:	7d 12                	jge    419d2b <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	  ++_M_buf_index;
  419d19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419d1d:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  419d21:	8d 50 01             	lea    0x1(%rax),%edx
  419d24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419d28:	88 50 18             	mov    %dl,0x18(%rax)
	return *this;
  419d2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      }
  419d2f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419d33:	c9                   	leave
  419d34:	c3                   	ret

0000000000419d35 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>:
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
  419d35:	55                   	push   %rbp
  419d36:	48 89 e5             	mov    %rsp,%rbp
  419d39:	53                   	push   %rbx
  419d3a:	48 83 ec 08          	sub    $0x8,%rsp
	  return __lhs._M_curr() == __rhs._M_curr()
  419d3e:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419d42:	e8 df 0d ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  419d47:	48 8b 18             	mov    (%rax),%rbx
  419d4a:	48 8d 45 38          	lea    0x38(%rbp),%rax
  419d4e:	48 89 c7             	mov    %rax,%rdi
  419d51:	e8 d0 0d ff ff       	call   40ab26 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  419d56:	48 8b 00             	mov    (%rax),%rax
		   && __lhs._M_buf_index == __rhs._M_buf_index;
  419d59:	48 39 c3             	cmp    %rax,%rbx
  419d5c:	75 13                	jne    419d71 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419d5e:	0f b6 55 28          	movzbl 0x28(%rbp),%edx
  419d62:	0f b6 45 50          	movzbl 0x50(%rbp),%eax
  419d66:	38 c2                	cmp    %al,%dl
  419d68:	75 07                	jne    419d71 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419d6a:	b8 01 00 00 00       	mov    $0x1,%eax
  419d6f:	eb 05                	jmp    419d76 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x41>
  419d71:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  419d76:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419d7a:	c9                   	leave
  419d7b:	c3                   	ret

0000000000419d7c <_ZSt13__countl_zeroIoEiT_>:
    __countl_zero(_Tp __x) noexcept
  419d7c:	55                   	push   %rbp
  419d7d:	48 89 e5             	mov    %rsp,%rbp
  419d80:	48 89 f8             	mov    %rdi,%rax
  419d83:	48 89 f1             	mov    %rsi,%rcx
  419d86:	48 89 c0             	mov    %rax,%rax
  419d89:	ba 00 00 00 00       	mov    $0x0,%edx
  419d8e:	48 89 ca             	mov    %rcx,%rdx
  419d91:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  419d95:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  419d99:	c7 45 fc 80 00 00 00 	movl   $0x80,-0x4(%rbp)
      if (__x == 0)
  419da0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419da4:	48 0b 45 c8          	or     -0x38(%rbp),%rax
  419da8:	75 07                	jne    419db1 <_ZSt13__countl_zeroIoEiT_+0x35>
        return _Nd;
  419daa:	b8 80 00 00 00       	mov    $0x80,%eax
  419daf:	eb 5b                	jmp    419e0c <_ZSt13__countl_zeroIoEiT_+0x90>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  419db1:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  419db8:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  419dbf:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  unsigned long long __high = __x >> _Nd_ull;
  419dc6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419dca:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  419dce:	48 89 d0             	mov    %rdx,%rax
  419dd1:	31 d2                	xor    %edx,%edx
  419dd3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__high != 0)
  419dd7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  419ddc:	74 12                	je     419df0 <_ZSt13__countl_zeroIoEiT_+0x74>
	      constexpr int __diff = (2 * _Nd_ull) - _Nd;
  419dde:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
	      return __builtin_clzll(__high) - __diff;
  419de5:	48 0f bd 45 e8       	bsr    -0x18(%rbp),%rax
  419dea:	48 83 f0 3f          	xor    $0x3f,%rax
  419dee:	eb 1c                	jmp    419e0c <_ZSt13__countl_zeroIoEiT_+0x90>
	  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;
  419df0:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  419df7:	ff
	  unsigned long long __low = __x & __max_ull;
  419df8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419dfc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
  419e00:	48 0f bd 45 d8       	bsr    -0x28(%rbp),%rax
  419e05:	48 83 f0 3f          	xor    $0x3f,%rax
  419e09:	83 c0 40             	add    $0x40,%eax
    }
  419e0c:	5d                   	pop    %rbp
  419e0d:	c3                   	ret

0000000000419e0e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE6_GuardIS2_ED1Ev>:
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
  419e0e:	55                   	push   %rbp
  419e0f:	48 89 e5             	mov    %rsp,%rbp
  419e12:	53                   	push   %rbx
  419e13:	48 83 ec 18          	sub    $0x18,%rsp
  419e17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  419e1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419e1f:	48 83 c0 08          	add    $0x8,%rax
  419e23:	48 89 c7             	mov    %rax,%rdi
  419e26:	e8 a6 02 00 00       	call   41a0d1 <_ZSt4moveIRPKDiEONSt16remove_referenceIT_E4typeEOS4_>
  419e2b:	48 8b 18             	mov    (%rax),%rbx
  419e2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419e32:	48 8b 00             	mov    (%rax),%rax
  419e35:	48 89 c7             	mov    %rax,%rdi
  419e38:	e8 a3 db ff ff       	call   4179e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419e3d:	48 89 18             	mov    %rbx,(%rax)
  419e40:	90                   	nop
  419e41:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419e45:	c9                   	leave
  419e46:	c3                   	ret
  419e47:	90                   	nop

0000000000419e48 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv>:
      _S_error()
  419e48:	55                   	push   %rbp
  419e49:	48 89 e5             	mov    %rsp,%rbp
  419e4c:	48 83 ec 20          	sub    $0x20,%rsp
  419e50:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char32_t __c = _ErrorHandler()();
  419e54:	48 8d 45 fb          	lea    -0x5(%rbp),%rax
  419e58:	48 89 c7             	mov    %rax,%rdi
  419e5b:	e8 64 af fe ff       	call   404dc4 <_ZNKSt9__unicode5_ReplclEv>
  419e60:	89 45 fc             	mov    %eax,-0x4(%rbp)
  419e63:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__is_scalar_value(__c));
  419e68:	84 c0                	test   %al,%al
  419e6a:	74 18                	je     419e84 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv+0x3c>
  419e6c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419e6f:	89 c7                	mov    %eax,%edi
  419e71:	e8 15 af fe ff       	call   404d8b <_ZNSt9__unicode17__is_scalar_valueEDi>
  419e76:	83 f0 01             	xor    $0x1,%eax
  419e79:	0f b6 c0             	movzbl %al,%eax
  419e7c:	48 85 c0             	test   %rax,%rax
  419e7f:	0f 95 c0             	setne  %al
  419e82:	84 c0                	test   %al,%al
	return __c;
  419e84:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
  419e87:	c9                   	leave
  419e88:	c3                   	ret
  419e89:	90                   	nop

0000000000419e8a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih>:
      _M_update(char32_t __c, uint8_t __to_incr)
  419e8a:	55                   	push   %rbp
  419e8b:	48 89 e5             	mov    %rsp,%rbp
  419e8e:	53                   	push   %rbx
  419e8f:	48 83 ec 28          	sub    $0x28,%rsp
  419e93:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  419e97:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  419e9a:	89 d0                	mov    %edx,%eax
  419e9c:	88 45 d0             	mov    %al,-0x30(%rbp)
	_M_to_increment = __to_incr;
  419e9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419ea3:	0f b6 55 d0          	movzbl -0x30(%rbp),%edx
  419ea7:	88 50 1a             	mov    %dl,0x1a(%rax)
	_M_buf_index = 0;
  419eaa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419eae:	c6 40 18 00          	movb   $0x0,0x18(%rax)
	    int __bits = std::bit_width((uint32_t)__c);
  419eb2:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419eb5:	89 c7                	mov    %eax,%edi
  419eb7:	e8 23 02 00 00       	call   41a0df <_ZSt9bit_widthITkSt18__unsigned_integerjEiT_>
  419ebc:	89 45 ec             	mov    %eax,-0x14(%rbp)
	    if (__bits <= 7) [[likely]]
  419ebf:	83 7d ec 07          	cmpl   $0x7,-0x14(%rbp)
  419ec3:	7f 65                	jg     419f2a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0xa0>
		_M_buf[0] = __c;
  419ec5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419ec8:	89 c3                	mov    %eax,%ebx
  419eca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419ece:	be 00 00 00 00       	mov    $0x0,%esi
  419ed3:	48 89 c7             	mov    %rax,%rdi
  419ed6:	e8 1b 02 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419edb:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
  419edd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419ee1:	be 03 00 00 00       	mov    $0x3,%esi
  419ee6:	48 89 c7             	mov    %rax,%rdi
  419ee9:	e8 08 02 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419eee:	c6 00 00             	movb   $0x0,(%rax)
  419ef1:	0f b6 18             	movzbl (%rax),%ebx
  419ef4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419ef8:	be 02 00 00 00       	mov    $0x2,%esi
  419efd:	48 89 c7             	mov    %rax,%rdi
  419f00:	e8 f1 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419f05:	88 18                	mov    %bl,(%rax)
  419f07:	0f b6 18             	movzbl (%rax),%ebx
  419f0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419f0e:	be 01 00 00 00       	mov    $0x1,%esi
  419f13:	48 89 c7             	mov    %rax,%rdi
  419f16:	e8 db 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419f1b:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 1;
  419f1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419f21:	c6 40 19 01          	movb   $0x1,0x19(%rax)
      }
  419f25:	e9 86 01 00 00       	jmp    41a0b0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
	    else if (__bits <= 11)
  419f2a:	83 7d ec 0b          	cmpl   $0xb,-0x14(%rbp)
  419f2e:	7f 73                	jg     419fa3 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x119>
		_M_buf[0] = 0xC0 | (__c >> 6);
  419f30:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419f33:	c1 e8 06             	shr    $0x6,%eax
  419f36:	83 c8 c0             	or     $0xffffffc0,%eax
  419f39:	89 c3                	mov    %eax,%ebx
  419f3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419f3f:	be 00 00 00 00       	mov    $0x0,%esi
  419f44:	48 89 c7             	mov    %rax,%rdi
  419f47:	e8 aa 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419f4c:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | (__c & 0x3F);
  419f4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419f51:	83 e0 3f             	and    $0x3f,%eax
  419f54:	83 c8 80             	or     $0xffffff80,%eax
  419f57:	89 c3                	mov    %eax,%ebx
  419f59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419f5d:	be 01 00 00 00       	mov    $0x1,%esi
  419f62:	48 89 c7             	mov    %rax,%rdi
  419f65:	e8 8c 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419f6a:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = _M_buf[3] = 0;
  419f6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419f70:	be 03 00 00 00       	mov    $0x3,%esi
  419f75:	48 89 c7             	mov    %rax,%rdi
  419f78:	e8 79 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419f7d:	c6 00 00             	movb   $0x0,(%rax)
  419f80:	0f b6 18             	movzbl (%rax),%ebx
  419f83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419f87:	be 02 00 00 00       	mov    $0x2,%esi
  419f8c:	48 89 c7             	mov    %rax,%rdi
  419f8f:	e8 62 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419f94:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 2;
  419f96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419f9a:	c6 40 19 02          	movb   $0x2,0x19(%rax)
      }
  419f9e:	e9 0d 01 00 00       	jmp    41a0b0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
	    else if (__bits <= 16)
  419fa3:	83 7d ec 10          	cmpl   $0x10,-0x14(%rbp)
  419fa7:	7f 7e                	jg     41a027 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x19d>
		_M_buf[0] = 0xE0 | (__c >> 12);
  419fa9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419fac:	c1 e8 0c             	shr    $0xc,%eax
  419faf:	83 c8 e0             	or     $0xffffffe0,%eax
  419fb2:	89 c3                	mov    %eax,%ebx
  419fb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419fb8:	be 00 00 00 00       	mov    $0x0,%esi
  419fbd:	48 89 c7             	mov    %rax,%rdi
  419fc0:	e8 31 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419fc5:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
  419fc7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419fca:	c1 e8 06             	shr    $0x6,%eax
  419fcd:	83 e0 3f             	and    $0x3f,%eax
  419fd0:	83 c8 80             	or     $0xffffff80,%eax
  419fd3:	89 c3                	mov    %eax,%ebx
  419fd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419fd9:	be 01 00 00 00       	mov    $0x1,%esi
  419fde:	48 89 c7             	mov    %rax,%rdi
  419fe1:	e8 10 01 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  419fe6:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = 0x80 | (__c & 0x3F);
  419fe8:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419feb:	83 e0 3f             	and    $0x3f,%eax
  419fee:	83 c8 80             	or     $0xffffff80,%eax
  419ff1:	89 c3                	mov    %eax,%ebx
  419ff3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419ff7:	be 02 00 00 00       	mov    $0x2,%esi
  419ffc:	48 89 c7             	mov    %rax,%rdi
  419fff:	e8 f2 00 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  41a004:	88 18                	mov    %bl,(%rax)
		_M_buf[3] = 0;
  41a006:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a00a:	be 03 00 00 00       	mov    $0x3,%esi
  41a00f:	48 89 c7             	mov    %rax,%rdi
  41a012:	e8 df 00 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  41a017:	c6 00 00             	movb   $0x0,(%rax)
		_M_buf_last = 3;
  41a01a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a01e:	c6 40 19 03          	movb   $0x3,0x19(%rax)
      }
  41a022:	e9 89 00 00 00       	jmp    41a0b0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
  41a027:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a02a:	c1 e8 12             	shr    $0x12,%eax
  41a02d:	83 e0 07             	and    $0x7,%eax
  41a030:	83 c8 f0             	or     $0xfffffff0,%eax
  41a033:	89 c3                	mov    %eax,%ebx
  41a035:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a039:	be 00 00 00 00       	mov    $0x0,%esi
  41a03e:	48 89 c7             	mov    %rax,%rdi
  41a041:	e8 b0 00 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  41a046:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
  41a048:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a04b:	c1 e8 0c             	shr    $0xc,%eax
  41a04e:	83 e0 3f             	and    $0x3f,%eax
  41a051:	83 c8 80             	or     $0xffffff80,%eax
  41a054:	89 c3                	mov    %eax,%ebx
  41a056:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a05a:	be 01 00 00 00       	mov    $0x1,%esi
  41a05f:	48 89 c7             	mov    %rax,%rdi
  41a062:	e8 8f 00 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  41a067:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
  41a069:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a06c:	c1 e8 06             	shr    $0x6,%eax
  41a06f:	83 e0 3f             	and    $0x3f,%eax
  41a072:	83 c8 80             	or     $0xffffff80,%eax
  41a075:	89 c3                	mov    %eax,%ebx
  41a077:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a07b:	be 02 00 00 00       	mov    $0x2,%esi
  41a080:	48 89 c7             	mov    %rax,%rdi
  41a083:	e8 6e 00 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  41a088:	88 18                	mov    %bl,(%rax)
		_M_buf[3] = 0x80 | (__c & 0x3F);
  41a08a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a08d:	83 e0 3f             	and    $0x3f,%eax
  41a090:	83 c8 80             	or     $0xffffff80,%eax
  41a093:	89 c3                	mov    %eax,%ebx
  41a095:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a099:	be 03 00 00 00       	mov    $0x3,%esi
  41a09e:	48 89 c7             	mov    %rax,%rdi
  41a0a1:	e8 50 00 00 00       	call   41a0f6 <_ZNSt5arrayIcLm4EEixEm>
  41a0a6:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 4;
  41a0a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a0ac:	c6 40 19 04          	movb   $0x4,0x19(%rax)
      }
  41a0b0:	90                   	nop
  41a0b1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41a0b5:	c9                   	leave
  41a0b6:	c3                   	ret
  41a0b7:	90                   	nop

000000000041a0b8 <_ZNKSt5arrayIcLm4EEixEm>:
      operator[](size_type __n) const noexcept
  41a0b8:	55                   	push   %rbp
  41a0b9:	48 89 e5             	mov    %rsp,%rbp
  41a0bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41a0c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  41a0c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41a0c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41a0cc:	48 01 d0             	add    %rdx,%rax
      }
  41a0cf:	5d                   	pop    %rbp
  41a0d0:	c3                   	ret

000000000041a0d1 <_ZSt4moveIRPKDiEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
  41a0d1:	55                   	push   %rbp
  41a0d2:	48 89 e5             	mov    %rsp,%rbp
  41a0d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41a0d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41a0dd:	5d                   	pop    %rbp
  41a0de:	c3                   	ret

000000000041a0df <_ZSt9bit_widthITkSt18__unsigned_integerjEiT_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 3656. Inconsistent bit operations returning a count
  /// The smallest integer greater than the base-2 logarithm of `x`.
  template<__unsigned_integer _Tp>
    constexpr int
    bit_width(_Tp __x) noexcept
  41a0df:	55                   	push   %rbp
  41a0e0:	48 89 e5             	mov    %rsp,%rbp
  41a0e3:	48 83 ec 10          	sub    $0x10,%rsp
  41a0e7:	89 7d fc             	mov    %edi,-0x4(%rbp)
    { return std::__bit_width(__x); }
  41a0ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
  41a0ed:	89 c7                	mov    %eax,%edi
  41a0ef:	e8 c5 a5 fe ff       	call   4046b9 <_ZSt11__bit_widthIjEiT_>
  41a0f4:	c9                   	leave
  41a0f5:	c3                   	ret

000000000041a0f6 <_ZNSt5arrayIcLm4EEixEm>:
      operator[](size_type __n) noexcept
  41a0f6:	55                   	push   %rbp
  41a0f7:	48 89 e5             	mov    %rsp,%rbp
  41a0fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41a0fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  41a102:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41a106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41a10a:	48 01 d0             	add    %rdx,%rax
      }
  41a10d:	5d                   	pop    %rbp
  41a10e:	c3                   	ret

Disassembly of section .fini:

000000000041a110 <_fini>:
  41a110:	48 83 ec 08          	sub    $0x8,%rsp
  41a114:	48 83 c4 08          	add    $0x8,%rsp
  41a118:	c3                   	ret
