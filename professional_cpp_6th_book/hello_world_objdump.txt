
hello_world:     file format elf64-x86-64
hello_world


Disassembly of section .init:

0000000000404000 <_init>:
  404000:	48 83 ec 08          	sub    $0x8,%rsp
  404004:	48 8b 05 d5 0f 02 00 	mov    0x20fd5(%rip),%rax        # 424fe0 <__gmon_start__@Base>
  40400b:	48 85 c0             	test   %rax,%rax
  40400e:	74 02                	je     404012 <_init+0x12>
  404010:	ff d0                	call   *%rax
  404012:	48 83 c4 08          	add    $0x8,%rsp
  404016:	c3                   	ret

Disassembly of section .plt:

0000000000404020 <_ZSt8to_charsPcS_f@plt-0x10>:
  404020:	ff 35 ca 0f 02 00    	push   0x20fca(%rip)        # 424ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
  404026:	ff 25 cc 0f 02 00    	jmp    *0x20fcc(%rip)        # 424ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
  40402c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404030 <_ZSt8to_charsPcS_f@plt>:
  404030:	ff 25 ca 0f 02 00    	jmp    *0x20fca(%rip)        # 425000 <_ZSt8to_charsPcS_f@GLIBCXX_3.4.29>
  404036:	68 00 00 00 00       	push   $0x0
  40403b:	e9 e0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404040 <frexpf@plt>:
  404040:	ff 25 c2 0f 02 00    	jmp    *0x20fc2(%rip)        # 425008 <frexpf@GLIBC_2.2.5>
  404046:	68 01 00 00 00       	push   $0x1
  40404b:	e9 d0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404050 <_ZSt8to_charsPcS_eSt12chars_format@plt>:
  404050:	ff 25 ba 0f 02 00    	jmp    *0x20fba(%rip)        # 425010 <_ZSt8to_charsPcS_eSt12chars_format@GLIBCXX_3.4.29>
  404056:	68 02 00 00 00       	push   $0x2
  40405b:	e9 c0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404060 <_ZNKSt6localeeqERKS_@plt>:
  404060:	ff 25 b2 0f 02 00    	jmp    *0x20fb2(%rip)        # 425018 <_ZNKSt6localeeqERKS_@GLIBCXX_3.4>
  404066:	68 03 00 00 00       	push   $0x3
  40406b:	e9 b0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404070 <_ZSt8to_charsPcS_d@plt>:
  404070:	ff 25 aa 0f 02 00    	jmp    *0x20faa(%rip)        # 425020 <_ZSt8to_charsPcS_d@GLIBCXX_3.4.29>
  404076:	68 04 00 00 00       	push   $0x4
  40407b:	e9 a0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404080 <__udivti3@plt>:
  404080:	ff 25 a2 0f 02 00    	jmp    *0x20fa2(%rip)        # 425028 <__udivti3@GCC_3.0>
  404086:	68 05 00 00 00       	push   $0x5
  40408b:	e9 90 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404090 <_ZSt17__throw_bad_allocv@plt>:
  404090:	ff 25 9a 0f 02 00    	jmp    *0x20f9a(%rip)        # 425030 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
  404096:	68 06 00 00 00       	push   $0x6
  40409b:	e9 80 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040a0 <strlen@plt>:
  4040a0:	ff 25 92 0f 02 00    	jmp    *0x20f92(%rip)        # 425038 <strlen@GLIBC_2.2.5>
  4040a6:	68 07 00 00 00       	push   $0x7
  4040ab:	e9 70 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040b0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>:
  4040b0:	ff 25 8a 0f 02 00    	jmp    *0x20f8a(%rip)        # 425040 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@GLIBCXX_3.4.21>
  4040b6:	68 08 00 00 00       	push   $0x8
  4040bb:	e9 60 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040c0 <memcmp@plt>:
  4040c0:	ff 25 82 0f 02 00    	jmp    *0x20f82(%rip)        # 425048 <memcmp@GLIBC_2.2.5>
  4040c6:	68 09 00 00 00       	push   $0x9
  4040cb:	e9 50 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040d0 <__cxa_allocate_exception@plt>:
  4040d0:	ff 25 7a 0f 02 00    	jmp    *0x20f7a(%rip)        # 425050 <__cxa_allocate_exception@CXXABI_1.3>
  4040d6:	68 0a 00 00 00       	push   $0xa
  4040db:	e9 40 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040e0 <__gttf2@plt>:
  4040e0:	ff 25 72 0f 02 00    	jmp    *0x20f72(%rip)        # 425058 <__gttf2@GCC_4.3.0>
  4040e6:	68 0b 00 00 00       	push   $0xb
  4040eb:	e9 30 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040f0 <_ZSt20__throw_length_errorPKc@plt>:
  4040f0:	ff 25 6a 0f 02 00    	jmp    *0x20f6a(%rip)        # 425060 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
  4040f6:	68 0c 00 00 00       	push   $0xc
  4040fb:	e9 20 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404100 <memset@plt>:
  404100:	ff 25 62 0f 02 00    	jmp    *0x20f62(%rip)        # 425068 <memset@GLIBC_2.2.5>
  404106:	68 0d 00 00 00       	push   $0xd
  40410b:	e9 10 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404110 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@plt>:
  404110:	ff 25 5a 0f 02 00    	jmp    *0x20f5a(%rip)        # 425070 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@GLIBCXX_3.4.21>
  404116:	68 0e 00 00 00       	push   $0xe
  40411b:	e9 00 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404120 <_ZSt8to_charsPcS_e@plt>:
  404120:	ff 25 52 0f 02 00    	jmp    *0x20f52(%rip)        # 425078 <_ZSt8to_charsPcS_e@GLIBCXX_3.4.29>
  404126:	68 0f 00 00 00       	push   $0xf
  40412b:	e9 f0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404130 <_ZSt8to_charsPcS_dSt12chars_format@plt>:
  404130:	ff 25 4a 0f 02 00    	jmp    *0x20f4a(%rip)        # 425080 <_ZSt8to_charsPcS_dSt12chars_format@GLIBCXX_3.4.29>
  404136:	68 10 00 00 00       	push   $0x10
  40413b:	e9 e0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404140 <_ZSt8to_charsPcS_dSt12chars_formati@plt>:
  404140:	ff 25 42 0f 02 00    	jmp    *0x20f42(%rip)        # 425088 <_ZSt8to_charsPcS_dSt12chars_formati@GLIBCXX_3.4.29>
  404146:	68 11 00 00 00       	push   $0x11
  40414b:	e9 d0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404150 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>:
  404150:	ff 25 3a 0f 02 00    	jmp    *0x20f3a(%rip)        # 425090 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@GLIBCXX_3.4.21>
  404156:	68 12 00 00 00       	push   $0x12
  40415b:	e9 c0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404160 <_ZNSt6localeC1ERKS_@plt>:
  404160:	ff 25 32 0f 02 00    	jmp    *0x20f32(%rip)        # 425098 <_ZNSt6localeC1ERKS_@GLIBCXX_3.4>
  404166:	68 13 00 00 00       	push   $0x13
  40416b:	e9 b0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404170 <_ZSt20__throw_system_errori@plt>:
  404170:	ff 25 2a 0f 02 00    	jmp    *0x20f2a(%rip)        # 4250a0 <_ZSt20__throw_system_errori@GLIBCXX_3.4.11>
  404176:	68 14 00 00 00       	push   $0x14
  40417b:	e9 a0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404180 <_ZSt19__throw_logic_errorPKc@plt>:
  404180:	ff 25 22 0f 02 00    	jmp    *0x20f22(%rip)        # 4250a8 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  404186:	68 15 00 00 00       	push   $0x15
  40418b:	e9 90 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404190 <__cxa_free_exception@plt>:
  404190:	ff 25 1a 0f 02 00    	jmp    *0x20f1a(%rip)        # 4250b0 <__cxa_free_exception@CXXABI_1.3>
  404196:	68 16 00 00 00       	push   $0x16
  40419b:	e9 80 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041a0 <_ZSt8to_charsPcS_DF128_St12chars_format@plt>:
  4041a0:	ff 25 12 0f 02 00    	jmp    *0x20f12(%rip)        # 4250b8 <_ZSt8to_charsPcS_DF128_St12chars_format@GLIBCXX_3.4.31>
  4041a6:	68 17 00 00 00       	push   $0x17
  4041ab:	e9 70 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041b0 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@plt>:
  4041b0:	ff 25 0a 0f 02 00    	jmp    *0x20f0a(%rip)        # 4250c0 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@GLIBCXX_3.4.21>
  4041b6:	68 18 00 00 00       	push   $0x18
  4041bb:	e9 60 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041c0 <_ZSt28__throw_bad_array_new_lengthv@plt>:
  4041c0:	ff 25 02 0f 02 00    	jmp    *0x20f02(%rip)        # 4250c8 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
  4041c6:	68 19 00 00 00       	push   $0x19
  4041cb:	e9 50 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041d0 <memcpy@plt>:
  4041d0:	ff 25 fa 0e 02 00    	jmp    *0x20efa(%rip)        # 4250d0 <memcpy@GLIBC_2.14>
  4041d6:	68 1a 00 00 00       	push   $0x1a
  4041db:	e9 40 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041e0 <_ZSt8to_charsPcS_DF128_St12chars_formati@plt>:
  4041e0:	ff 25 f2 0e 02 00    	jmp    *0x20ef2(%rip)        # 4250d8 <_ZSt8to_charsPcS_DF128_St12chars_formati@GLIBCXX_3.4.31>
  4041e6:	68 1b 00 00 00       	push   $0x1b
  4041eb:	e9 30 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041f0 <_ZNKSt7__cxx118numpunctIcE8truenameEv@plt>:
  4041f0:	ff 25 ea 0e 02 00    	jmp    *0x20eea(%rip)        # 4250e0 <_ZNKSt7__cxx118numpunctIcE8truenameEv@GLIBCXX_3.4.21>
  4041f6:	68 1c 00 00 00       	push   $0x1c
  4041fb:	e9 20 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404200 <_ZdlPv@plt>:
  404200:	ff 25 e2 0e 02 00    	jmp    *0x20ee2(%rip)        # 4250e8 <_ZdlPv@GLIBCXX_3.4>
  404206:	68 1d 00 00 00       	push   $0x1d
  40420b:	e9 10 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404210 <_Znwm@plt>:
  404210:	ff 25 da 0e 02 00    	jmp    *0x20eda(%rip)        # 4250f0 <_Znwm@GLIBCXX_3.4>
  404216:	68 1e 00 00 00       	push   $0x1e
  40421b:	e9 00 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404220 <_ZSt8to_charsPcS_fSt12chars_format@plt>:
  404220:	ff 25 d2 0e 02 00    	jmp    *0x20ed2(%rip)        # 4250f8 <_ZSt8to_charsPcS_fSt12chars_format@GLIBCXX_3.4.29>
  404226:	68 1f 00 00 00       	push   $0x1f
  40422b:	e9 f0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404230 <_ZdlPvm@plt>:
  404230:	ff 25 ca 0e 02 00    	jmp    *0x20eca(%rip)        # 425100 <_ZdlPvm@CXXABI_1.3.9>
  404236:	68 20 00 00 00       	push   $0x20
  40423b:	e9 e0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404240 <_ZSt8to_charsPcS_eSt12chars_formati@plt>:
  404240:	ff 25 c2 0e 02 00    	jmp    *0x20ec2(%rip)        # 425108 <_ZSt8to_charsPcS_eSt12chars_formati@GLIBCXX_3.4.29>
  404246:	68 21 00 00 00       	push   $0x21
  40424b:	e9 d0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404250 <_ZNSt13runtime_errorD2Ev@plt>:
  404250:	ff 25 ba 0e 02 00    	jmp    *0x20eba(%rip)        # 425110 <_ZNSt13runtime_errorD2Ev@GLIBCXX_3.4>
  404256:	68 22 00 00 00       	push   $0x22
  40425b:	e9 c0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404260 <memchr@plt>:
  404260:	ff 25 b2 0e 02 00    	jmp    *0x20eb2(%rip)        # 425118 <memchr@GLIBC_2.2.5>
  404266:	68 23 00 00 00       	push   $0x23
  40426b:	e9 b0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404270 <_ZSt8to_charsPcS_fSt12chars_formati@plt>:
  404270:	ff 25 aa 0e 02 00    	jmp    *0x20eaa(%rip)        # 425120 <_ZSt8to_charsPcS_fSt12chars_formati@GLIBCXX_3.4.29>
  404276:	68 24 00 00 00       	push   $0x24
  40427b:	e9 a0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404280 <exit@plt>:
  404280:	ff 25 a2 0e 02 00    	jmp    *0x20ea2(%rip)        # 425128 <exit@GLIBC_2.2.5>
  404286:	68 25 00 00 00       	push   $0x25
  40428b:	e9 90 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404290 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>:
  404290:	ff 25 9a 0e 02 00    	jmp    *0x20e9a(%rip)        # 425130 <_ZNKSt7__cxx118numpunctIcE8groupingEv@GLIBCXX_3.4.21>
  404296:	68 26 00 00 00       	push   $0x26
  40429b:	e9 80 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042a0 <_ZNSt6locale7classicEv@plt>:
  4042a0:	ff 25 92 0e 02 00    	jmp    *0x20e92(%rip)        # 425138 <_ZNSt6locale7classicEv@GLIBCXX_3.4>
  4042a6:	68 27 00 00 00       	push   $0x27
  4042ab:	e9 70 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042b0 <_ZNKSt13runtime_error4whatEv@plt>:
  4042b0:	ff 25 8a 0e 02 00    	jmp    *0x20e8a(%rip)        # 425140 <_ZNKSt13runtime_error4whatEv@GLIBCXX_3.4>
  4042b6:	68 28 00 00 00       	push   $0x28
  4042bb:	e9 60 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@plt>:
  4042c0:	ff 25 82 0e 02 00    	jmp    *0x20e82(%rip)        # 425148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@GLIBCXX_3.4.31>
  4042c6:	68 29 00 00 00       	push   $0x29
  4042cb:	e9 50 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042d0 <_ZNSt6localeD1Ev@plt>:
  4042d0:	ff 25 7a 0e 02 00    	jmp    *0x20e7a(%rip)        # 425150 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  4042d6:	68 2a 00 00 00       	push   $0x2a
  4042db:	e9 40 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042e0 <__unordtf2@plt>:
  4042e0:	ff 25 72 0e 02 00    	jmp    *0x20e72(%rip)        # 425158 <__unordtf2@GCC_4.3.0>
  4042e6:	68 2b 00 00 00       	push   $0x2b
  4042eb:	e9 30 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042f0 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
  4042f0:	ff 25 6a 0e 02 00    	jmp    *0x20e6a(%rip)        # 425160 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
  4042f6:	68 2c 00 00 00       	push   $0x2c
  4042fb:	e9 20 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404300 <frexpl@plt>:
  404300:	ff 25 62 0e 02 00    	jmp    *0x20e62(%rip)        # 425168 <frexpl@GLIBC_2.2.5>
  404306:	68 2d 00 00 00       	push   $0x2d
  40430b:	e9 10 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404310 <__umodti3@plt>:
  404310:	ff 25 5a 0e 02 00    	jmp    *0x20e5a(%rip)        # 425170 <__umodti3@GCC_3.0>
  404316:	68 2e 00 00 00       	push   $0x2e
  40431b:	e9 00 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404320 <_ZNKSt6locale4nameB5cxx11Ev@plt>:
  404320:	ff 25 52 0e 02 00    	jmp    *0x20e52(%rip)        # 425178 <_ZNKSt6locale4nameB5cxx11Ev@GLIBCXX_3.4.21>
  404326:	68 2f 00 00 00       	push   $0x2f
  40432b:	e9 f0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404330 <memmove@plt>:
  404330:	ff 25 4a 0e 02 00    	jmp    *0x20e4a(%rip)        # 425180 <memmove@GLIBC_2.2.5>
  404336:	68 30 00 00 00       	push   $0x30
  40433b:	e9 e0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404340 <__gxx_personality_v0@plt>:
  404340:	ff 25 42 0e 02 00    	jmp    *0x20e42(%rip)        # 425188 <__gxx_personality_v0@CXXABI_1.3>
  404346:	68 31 00 00 00       	push   $0x31
  40434b:	e9 d0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404350 <_ZSt8to_charsPcS_DF128_@plt>:
  404350:	ff 25 3a 0e 02 00    	jmp    *0x20e3a(%rip)        # 425190 <_ZSt8to_charsPcS_DF128_@GLIBCXX_3.4.31>
  404356:	68 32 00 00 00       	push   $0x32
  40435b:	e9 c0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404360 <__cxa_throw@plt>:
  404360:	ff 25 32 0e 02 00    	jmp    *0x20e32(%rip)        # 425198 <__cxa_throw@CXXABI_1.3>
  404366:	68 33 00 00 00       	push   $0x33
  40436b:	e9 b0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404370 <_Unwind_Resume@plt>:
  404370:	ff 25 2a 0e 02 00    	jmp    *0x20e2a(%rip)        # 4251a0 <_Unwind_Resume@GCC_3.0>
  404376:	68 34 00 00 00       	push   $0x34
  40437b:	e9 a0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404380 <toupper@plt>:
  404380:	ff 25 22 0e 02 00    	jmp    *0x20e22(%rip)        # 4251a8 <toupper@GLIBC_2.2.5>
  404386:	68 35 00 00 00       	push   $0x35
  40438b:	e9 90 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404390 <frexp@plt>:
  404390:	ff 25 1a 0e 02 00    	jmp    *0x20e1a(%rip)        # 4251b0 <frexp@GLIBC_2.2.5>
  404396:	68 36 00 00 00       	push   $0x36
  40439b:	e9 80 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043a0 <_ZNSt13runtime_errorC2EPKc@plt>:
  4043a0:	ff 25 12 0e 02 00    	jmp    *0x20e12(%rip)        # 4251b8 <_ZNSt13runtime_errorC2EPKc@GLIBCXX_3.4.21>
  4043a6:	68 37 00 00 00       	push   $0x37
  4043ab:	e9 70 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043b0 <__cxa_pure_virtual@plt>:
  4043b0:	ff 25 0a 0e 02 00    	jmp    *0x20e0a(%rip)        # 4251c0 <__cxa_pure_virtual@CXXABI_1.3>
  4043b6:	68 38 00 00 00       	push   $0x38
  4043bb:	e9 60 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043c0 <fwrite@plt>:
  4043c0:	ff 25 02 0e 02 00    	jmp    *0x20e02(%rip)        # 4251c8 <fwrite@GLIBC_2.2.5>
  4043c6:	68 39 00 00 00       	push   $0x39
  4043cb:	e9 50 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043d0 <_ZNSt6localeC1Ev@plt>:
  4043d0:	ff 25 fa 0d 02 00    	jmp    *0x20dfa(%rip)        # 4251d0 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  4043d6:	68 3a 00 00 00       	push   $0x3a
  4043db:	e9 40 fc ff ff       	jmp    404020 <_init+0x20>

Disassembly of section .text:

00000000004043e0 <_start>:
  4043e0:	31 ed                	xor    %ebp,%ebp
  4043e2:	49 89 d1             	mov    %rdx,%r9
  4043e5:	5e                   	pop    %rsi
  4043e6:	48 89 e2             	mov    %rsp,%rdx
  4043e9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4043ed:	50                   	push   %rax
  4043ee:	54                   	push   %rsp
  4043ef:	45 31 c0             	xor    %r8d,%r8d
  4043f2:	31 c9                	xor    %ecx,%ecx
  4043f4:	48 c7 c7 c6 44 40 00 	mov    $0x4044c6,%rdi
  4043fb:	ff 15 d7 0b 02 00    	call   *0x20bd7(%rip)        # 424fd8 <__libc_start_main@GLIBC_2.34>
  404401:	f4                   	hlt
  404402:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  404409:	00 00 00
  40440c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404410 <_dl_relocate_static_pie>:
  404410:	c3                   	ret
  404411:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  404418:	00 00 00
  40441b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000404420 <deregister_tm_clones>:
  404420:	b8 e8 51 42 00       	mov    $0x4251e8,%eax
  404425:	48 3d e8 51 42 00    	cmp    $0x4251e8,%rax
  40442b:	74 13                	je     404440 <deregister_tm_clones+0x20>
  40442d:	b8 00 00 00 00       	mov    $0x0,%eax
  404432:	48 85 c0             	test   %rax,%rax
  404435:	74 09                	je     404440 <deregister_tm_clones+0x20>
  404437:	bf e8 51 42 00       	mov    $0x4251e8,%edi
  40443c:	ff e0                	jmp    *%rax
  40443e:	66 90                	xchg   %ax,%ax
  404440:	c3                   	ret
  404441:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  404448:	00 00 00 00
  40444c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404450 <register_tm_clones>:
  404450:	be e8 51 42 00       	mov    $0x4251e8,%esi
  404455:	48 81 ee e8 51 42 00 	sub    $0x4251e8,%rsi
  40445c:	48 89 f0             	mov    %rsi,%rax
  40445f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  404463:	48 c1 f8 03          	sar    $0x3,%rax
  404467:	48 01 c6             	add    %rax,%rsi
  40446a:	48 d1 fe             	sar    %rsi
  40446d:	74 11                	je     404480 <register_tm_clones+0x30>
  40446f:	b8 00 00 00 00       	mov    $0x0,%eax
  404474:	48 85 c0             	test   %rax,%rax
  404477:	74 07                	je     404480 <register_tm_clones+0x30>
  404479:	bf e8 51 42 00       	mov    $0x4251e8,%edi
  40447e:	ff e0                	jmp    *%rax
  404480:	c3                   	ret
  404481:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  404488:	00 00 00 00
  40448c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404490 <__do_global_dtors_aux>:
  404490:	f3 0f 1e fa          	endbr64
  404494:	80 3d 55 0d 02 00 00 	cmpb   $0x0,0x20d55(%rip)        # 4251f0 <completed.0>
  40449b:	75 13                	jne    4044b0 <__do_global_dtors_aux+0x20>
  40449d:	55                   	push   %rbp
  40449e:	48 89 e5             	mov    %rsp,%rbp
  4044a1:	e8 7a ff ff ff       	call   404420 <deregister_tm_clones>
  4044a6:	c6 05 43 0d 02 00 01 	movb   $0x1,0x20d43(%rip)        # 4251f0 <completed.0>
  4044ad:	5d                   	pop    %rbp
  4044ae:	c3                   	ret
  4044af:	90                   	nop
  4044b0:	c3                   	ret
  4044b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4044b8:	00 00 00 00
  4044bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004044c0 <frame_dummy>:
  4044c0:	f3 0f 1e fa          	endbr64
  4044c4:	eb 8a                	jmp    404450 <register_tm_clones>

00000000004044c6 <main>:
#include <print>
#include <string>


int main(void)
{
  4044c6:	55                   	push   %rbp
  4044c7:	48 89 e5             	mov    %rsp,%rbp
  4044ca:	41 55                	push   %r13
  4044cc:	41 54                	push   %r12
  4044ce:	53                   	push   %rbx
  4044cf:	48 83 ec 38          	sub    $0x38,%rsp
  4044d3:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  4044d7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4044db:	90                   	nop

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
  4044dc:	90                   	nop
	std::string s {"Hallo \"Professional C++\" Buch :-)"};
  4044dd:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
  4044e1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4044e5:	be 80 a1 41 00       	mov    $0x41a180,%esi
  4044ea:	48 89 c7             	mov    %rax,%rdi
  4044ed:	e8 d6 11 00 00       	call   4056c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
  4044f2:	90                   	nop
	std::println("{}", s);
  4044f3:	41 bc 02 00 00 00    	mov    $0x2,%r12d
  4044f9:	41 bd a2 a1 41 00    	mov    $0x41a1a2,%r13d
  4044ff:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  404503:	4c 89 e6             	mov    %r12,%rsi
  404506:	4c 89 e9             	mov    %r13,%rcx
  404509:	48 89 c2             	mov    %rax,%rdx
  40450c:	48 89 f7             	mov    %rsi,%rdi
  40450f:	48 89 ce             	mov    %rcx,%rsi
  404512:	e8 60 33 00 00       	call   407877 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>

	exit (EXIT_SUCCESS);
  404517:	bf 00 00 00 00       	mov    $0x0,%edi
  40451c:	e8 5f fd ff ff       	call   404280 <exit@plt>
}
  404521:	48 89 c3             	mov    %rax,%rbx
  404524:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  404528:	48 89 c7             	mov    %rax,%rdi
  40452b:	e8 52 24 00 00       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  404530:	48 89 d8             	mov    %rbx,%rax
  404533:	48 89 c7             	mov    %rax,%rdi
  404536:	e8 35 fe ff ff       	call   404370 <_Unwind_Resume@plt>

000000000040453b <_ZSt21is_constant_evaluatedv>:
  40453b:	55                   	push   %rbp
  40453c:	48 89 e5             	mov    %rsp,%rbp
  40453f:	b8 00 00 00 00       	mov    $0x0,%eax
  404544:	5d                   	pop    %rbp
  404545:	c3                   	ret

0000000000404546 <_ZSteqSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    { return weak_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    [[nodiscard]]
    friend constexpr bool
    operator==(strong_ordering __v, __cmp_cat::__unspec) noexcept
  404546:	55                   	push   %rbp
  404547:	48 89 e5             	mov    %rsp,%rbp
  40454a:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value == 0; }
  40454e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  404552:	84 c0                	test   %al,%al
  404554:	0f 94 c0             	sete   %al
  404557:	5d                   	pop    %rbp
  404558:	c3                   	ret

0000000000404559 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
  404559:	55                   	push   %rbp
  40455a:	48 89 e5             	mov    %rsp,%rbp
  40455d:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value < 0; }
  404561:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  404565:	c0 e8 07             	shr    $0x7,%al
  404568:	5d                   	pop    %rbp
  404569:	c3                   	ret

000000000040456a <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
  40456a:	55                   	push   %rbp
  40456b:	48 89 e5             	mov    %rsp,%rbp
  40456e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404572:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404576:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40457a:	5d                   	pop    %rbp
  40457b:	c3                   	ret

000000000040457c <_ZN9__gnu_cxx5__ops15__iter_less_valEv>:
  };

  _GLIBCXX20_CONSTEXPR
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }
  40457c:	55                   	push   %rbp
  40457d:	48 89 e5             	mov    %rsp,%rbp
  404580:	90                   	nop
  404581:	5d                   	pop    %rbp
  404582:	c3                   	ret

0000000000404583 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>:
  };

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }
  404583:	55                   	push   %rbp
  404584:	48 89 e5             	mov    %rsp,%rbp
  404587:	90                   	nop
  404588:	5d                   	pop    %rbp
  404589:	c3                   	ret

000000000040458a <_ZSt8to_charsPcS_mi>:
_GLIBCXX_TO_CHARS(signed short)
_GLIBCXX_TO_CHARS(unsigned short)
_GLIBCXX_TO_CHARS(signed int)
_GLIBCXX_TO_CHARS(unsigned int)
_GLIBCXX_TO_CHARS(signed long)
_GLIBCXX_TO_CHARS(unsigned long)
  40458a:	55                   	push   %rbp
  40458b:	48 89 e5             	mov    %rsp,%rbp
  40458e:	48 83 ec 20          	sub    $0x20,%rsp
  404592:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404596:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40459a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40459e:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  4045a1:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  4045a4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4045a8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4045ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4045b0:	48 89 c7             	mov    %rax,%rdi
  4045b3:	e8 d4 1d 00 00       	call   40638c <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i>
  4045b8:	c9                   	leave
  4045b9:	c3                   	ret

00000000004045ba <_ZSt11__bit_widthIjEiT_>:
      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
    }

  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
  4045ba:	55                   	push   %rbp
  4045bb:	48 89 e5             	mov    %rsp,%rbp
  4045be:	48 83 ec 20          	sub    $0x20,%rsp
  4045c2:	89 7d ec             	mov    %edi,-0x14(%rbp)
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  4045c5:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  4045cc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4045cf:	89 c7                	mov    %eax,%edi
  4045d1:	e8 bc 20 00 00       	call   406692 <_ZSt13__countl_zeroIjEiT_>
  4045d6:	ba 20 00 00 00       	mov    $0x20,%edx
  4045db:	29 c2                	sub    %eax,%edx
  4045dd:	89 d0                	mov    %edx,%eax
    }
  4045df:	c9                   	leave
  4045e0:	c3                   	ret

00000000004045e1 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  4045e1:	55                   	push   %rbp
  4045e2:	48 89 e5             	mov    %rsp,%rbp
  4045e5:	48 83 ec 10          	sub    $0x10,%rsp
  4045e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4045ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
  4045f1:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
  4045f6:	84 c0                	test   %al,%al
  4045f8:	74 15                	je     40460f <_ZNSt11char_traitsIcE6assignERcRKc+0x2e>
	  std::construct_at(__builtin_addressof(__c1), __c2);
  4045fa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4045fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404602:	48 89 d6             	mov    %rdx,%rsi
  404605:	48 89 c7             	mov    %rax,%rdi
  404608:	e8 c6 20 00 00       	call   4066d3 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	else
#endif
	__c1 = __c2;
      }
  40460d:	eb 0d                	jmp    40461c <_ZNSt11char_traitsIcE6assignERcRKc+0x3b>
	__c1 = __c2;
  40460f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404613:	0f b6 10             	movzbl (%rax),%edx
  404616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40461a:	88 10                	mov    %dl,(%rax)
      }
  40461c:	90                   	nop
  40461d:	c9                   	leave
  40461e:	c3                   	ret

000000000040461f <_ZNSt11char_traitsIcE2eqERKcS2_>:

      static _GLIBCXX_CONSTEXPR bool
      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  40461f:	55                   	push   %rbp
  404620:	48 89 e5             	mov    %rsp,%rbp
  404623:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404627:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
  40462b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40462f:	0f b6 10             	movzbl (%rax),%edx
  404632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404636:	0f b6 00             	movzbl (%rax),%eax
  404639:	38 c2                	cmp    %al,%dl
  40463b:	0f 94 c0             	sete   %al
  40463e:	5d                   	pop    %rbp
  40463f:	c3                   	ret

0000000000404640 <_ZNSt11char_traitsIcE2ltERKcS2_>:

      static _GLIBCXX_CONSTEXPR bool
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  404640:	55                   	push   %rbp
  404641:	48 89 e5             	mov    %rsp,%rbp
  404644:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404648:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	// LWG 467.
	return (static_cast<unsigned char>(__c1)
  40464c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404650:	0f b6 00             	movzbl (%rax),%eax
  404653:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
  404655:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404659:	0f b6 00             	movzbl (%rax),%eax
  40465c:	38 c2                	cmp    %al,%dl
  40465e:	0f 92 c0             	setb   %al
      }
  404661:	5d                   	pop    %rbp
  404662:	c3                   	ret

0000000000404663 <_ZNSt11char_traitsIcE7compareEPKcS2_m>:

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
  404663:	55                   	push   %rbp
  404664:	48 89 e5             	mov    %rsp,%rbp
  404667:	48 83 ec 30          	sub    $0x30,%rsp
  40466b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40466f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  404673:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      {
	if (__n == 0)
  404677:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40467c:	75 0a                	jne    404688 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
  40467e:	b8 00 00 00 00       	mov    $0x0,%eax
  404683:	e9 99 00 00 00       	jmp    404721 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
  404688:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  40468d:	84 c0                	test   %al,%al
  40468f:	74 78                	je     404709 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	  {
	    for (size_t __i = 0; __i < __n; ++__i)
  404691:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  404698:	00
  404699:	eb 5d                	jmp    4046f8 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
  40469b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40469f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4046a3:	48 01 c2             	add    %rax,%rdx
  4046a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4046aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4046ae:	48 01 c8             	add    %rcx,%rax
  4046b1:	48 89 d6             	mov    %rdx,%rsi
  4046b4:	48 89 c7             	mov    %rax,%rdi
  4046b7:	e8 84 ff ff ff       	call   404640 <_ZNSt11char_traitsIcE2ltERKcS2_>
  4046bc:	84 c0                	test   %al,%al
  4046be:	74 07                	je     4046c7 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
  4046c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4046c5:	eb 5a                	jmp    404721 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
  4046c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4046cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4046cf:	48 01 c2             	add    %rax,%rdx
  4046d2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4046d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4046da:	48 01 c8             	add    %rcx,%rax
  4046dd:	48 89 d6             	mov    %rdx,%rsi
  4046e0:	48 89 c7             	mov    %rax,%rdi
  4046e3:	e8 58 ff ff ff       	call   404640 <_ZNSt11char_traitsIcE2ltERKcS2_>
  4046e8:	84 c0                	test   %al,%al
  4046ea:	74 07                	je     4046f3 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
  4046ec:	b8 01 00 00 00       	mov    $0x1,%eax
  4046f1:	eb 2e                	jmp    404721 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
  4046f3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  4046f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4046fc:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  404700:	72 99                	jb     40469b <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
  404702:	b8 00 00 00 00       	mov    $0x0,%eax
  404707:	eb 18                	jmp    404721 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
  404709:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40470d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404715:	48 89 ce             	mov    %rcx,%rsi
  404718:	48 89 c7             	mov    %rax,%rdi
  40471b:	e8 a0 f9 ff ff       	call   4040c0 <memcmp@plt>
  404720:	90                   	nop
      }
  404721:	c9                   	leave
  404722:	c3                   	ret

0000000000404723 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
  404723:	55                   	push   %rbp
  404724:	48 89 e5             	mov    %rsp,%rbp
  404727:	48 83 ec 10          	sub    $0x10,%rsp
  40472b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40472f:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  404734:	84 c0                	test   %al,%al
  404736:	74 0e                	je     404746 <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
  404738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40473c:	48 89 c7             	mov    %rax,%rdi
  40473f:	e8 52 10 00 00       	call   405796 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
  404744:	eb 0d                	jmp    404753 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
  404746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40474a:	48 89 c7             	mov    %rax,%rdi
  40474d:	e8 4e f9 ff ff       	call   4040a0 <strlen@plt>
  404752:	90                   	nop
      }
  404753:	c9                   	leave
  404754:	c3                   	ret

0000000000404755 <_ZNSt11char_traitsIcE4findEPKcmRS1_>:

      static _GLIBCXX17_CONSTEXPR const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
  404755:	55                   	push   %rbp
  404756:	48 89 e5             	mov    %rsp,%rbp
  404759:	48 83 ec 20          	sub    $0x20,%rsp
  40475d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404761:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404765:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  404769:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40476e:	75 07                	jne    404777 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x22>
	  return 0;
  404770:	b8 00 00 00 00       	mov    $0x0,%eax
  404775:	eb 3f                	jmp    4047b6 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x61>
  404777:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  40477c:	84 c0                	test   %al,%al
  40477e:	74 19                	je     404799 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x44>
	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
  404780:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404784:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40478c:	48 89 ce             	mov    %rcx,%rsi
  40478f:	48 89 c7             	mov    %rax,%rdi
  404792:	e8 7b 1f 00 00       	call   406712 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_>
  404797:	eb 1d                	jmp    4047b6 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x61>
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
  404799:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40479d:	0f b6 00             	movzbl (%rax),%eax
  4047a0:	0f be c8             	movsbl %al,%ecx
  4047a3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4047a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047ab:	89 ce                	mov    %ecx,%esi
  4047ad:	48 89 c7             	mov    %rax,%rdi
  4047b0:	e8 ab fa ff ff       	call   404260 <memchr@plt>
  4047b5:	90                   	nop
      }
  4047b6:	c9                   	leave
  4047b7:	c3                   	ret

00000000004047b8 <_ZNSt11char_traitsIcE4moveEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
  4047b8:	55                   	push   %rbp
  4047b9:	48 89 e5             	mov    %rsp,%rbp
  4047bc:	48 83 ec 20          	sub    $0x20,%rsp
  4047c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4047c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4047c8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  4047cc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4047d1:	75 06                	jne    4047d9 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x21>
	  return __s1;
  4047d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047d7:	eb 3a                	jmp    404813 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
  4047d9:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  4047de:	84 c0                	test   %al,%al
  4047e0:	74 19                	je     4047fb <_ZNSt11char_traitsIcE4moveEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
  4047e2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4047e6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4047ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047ee:	48 89 ce             	mov    %rcx,%rsi
  4047f1:	48 89 c7             	mov    %rax,%rdi
  4047f4:	e8 79 1f 00 00       	call   406772 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>
  4047f9:	eb 18                	jmp    404813 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
  4047fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4047ff:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404807:	48 89 ce             	mov    %rcx,%rsi
  40480a:	48 89 c7             	mov    %rax,%rdi
  40480d:	e8 1e fb ff ff       	call   404330 <memmove@plt>
  404812:	90                   	nop
      }
  404813:	c9                   	leave
  404814:	c3                   	ret

0000000000404815 <_ZNSt11char_traitsIcE4copyEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
  404815:	55                   	push   %rbp
  404816:	48 89 e5             	mov    %rsp,%rbp
  404819:	48 83 ec 20          	sub    $0x20,%rsp
  40481d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404821:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404825:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  404829:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40482e:	75 06                	jne    404836 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x21>
	  return __s1;
  404830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404834:	eb 40                	jmp    404876 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
  404836:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  40483b:	84 c0                	test   %al,%al
  40483d:	74 19                	je     404858 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
  40483f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404843:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404847:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40484b:	48 89 ce             	mov    %rcx,%rsi
  40484e:	48 89 c7             	mov    %rax,%rdi
  404851:	e8 80 1f 00 00       	call   4067d6 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
  404856:	eb 1e                	jmp    404876 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  404858:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40485c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404860:	48 89 d1             	mov    %rdx,%rcx
  404863:	48 89 c6             	mov    %rax,%rsi
  404866:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40486a:	48 89 c2             	mov    %rax,%rdx
  40486d:	48 89 cf             	mov    %rcx,%rdi
  404870:	e8 5b f9 ff ff       	call   4041d0 <memcpy@plt>
  404875:	90                   	nop
      }
  404876:	c9                   	leave
  404877:	c3                   	ret

0000000000404878 <_ZNSt11char_traitsIcE6assignEPcmc>:

      static _GLIBCXX20_CONSTEXPR char_type*
      assign(char_type* __s, size_t __n, char_type __a)
  404878:	55                   	push   %rbp
  404879:	48 89 e5             	mov    %rsp,%rbp
  40487c:	48 83 ec 20          	sub    $0x20,%rsp
  404880:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404884:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404888:	89 d0                	mov    %edx,%eax
  40488a:	88 45 ec             	mov    %al,-0x14(%rbp)
      {
	if (__n == 0)
  40488d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  404892:	75 06                	jne    40489a <_ZNSt11char_traitsIcE6assignEPcmc+0x22>
	  return __s;
  404894:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404898:	eb 39                	jmp    4048d3 <_ZNSt11char_traitsIcE6assignEPcmc+0x5b>
  40489a:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  40489f:	84 c0                	test   %al,%al
  4048a1:	74 19                	je     4048bc <_ZNSt11char_traitsIcE6assignEPcmc+0x44>
	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
  4048a3:	0f be 55 ec          	movsbl -0x14(%rbp),%edx
  4048a7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4048ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4048af:	48 89 ce             	mov    %rcx,%rsi
  4048b2:	48 89 c7             	mov    %rax,%rdi
  4048b5:	e8 aa 1f 00 00       	call   406864 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc>
  4048ba:	eb 17                	jmp    4048d3 <_ZNSt11char_traitsIcE6assignEPcmc+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
  4048bc:	0f be 4d ec          	movsbl -0x14(%rbp),%ecx
  4048c0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4048c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4048c8:	89 ce                	mov    %ecx,%esi
  4048ca:	48 89 c7             	mov    %rax,%rdi
  4048cd:	e8 2e f8 ff ff       	call   404100 <memset@plt>
  4048d2:	90                   	nop
      }
  4048d3:	c9                   	leave
  4048d4:	c3                   	ret

00000000004048d5 <_ZSt10__sv_checkmmPKc>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  // Helper for basic_string and basic_string_view members.
  constexpr size_t
  __sv_check(size_t __size, size_t __pos, const char* __s)
  {
  4048d5:	55                   	push   %rbp
  4048d6:	48 89 e5             	mov    %rsp,%rbp
  4048d9:	48 83 ec 20          	sub    $0x20,%rsp
  4048dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4048e1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4048e5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if (__pos > __size)
  4048e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4048ed:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4048f1:	73 1e                	jae    404911 <_ZSt10__sv_checkmmPKc+0x3c>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
  4048f3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4048f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4048fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4048ff:	48 89 c6             	mov    %rax,%rsi
  404902:	bf 10 a0 41 00       	mov    $0x41a010,%edi
  404907:	b8 00 00 00 00       	mov    $0x0,%eax
  40490c:	e8 df f9 ff ff       	call   4042f0 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
				   "(which is %zu)"), __s, __pos, __size);
    return __pos;
  404911:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  }
  404915:	c9                   	leave
  404916:	c3                   	ret
  404917:	90                   	nop

0000000000404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_data() const
      { return _M_dataplus._M_p; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_local_data()
  404918:	55                   	push   %rbp
  404919:	48 89 e5             	mov    %rsp,%rbp
  40491c:	48 83 ec 10          	sub    $0x10,%rsp
  404920:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  404924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404928:	48 83 c0 10          	add    $0x10,%rax
  40492c:	48 89 c7             	mov    %rax,%rdi
  40492f:	e8 02 00 00 00       	call   404936 <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>
#else
	return pointer(_M_local_buf);
#endif
      }
  404934:	c9                   	leave
  404935:	c3                   	ret

0000000000404936 <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
  404936:	55                   	push   %rbp
  404937:	48 89 e5             	mov    %rsp,%rbp
  40493a:	48 83 ec 10          	sub    $0x10,%rsp
  40493e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  404942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404946:	48 89 c7             	mov    %rax,%rdi
  404949:	e8 02 00 00 00       	call   404950 <_ZSt9addressofIcEPT_RS0_>
  40494e:	c9                   	leave
  40494f:	c3                   	ret

0000000000404950 <_ZSt9addressofIcEPT_RS0_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
  404950:	55                   	push   %rbp
  404951:	48 89 e5             	mov    %rsp,%rbp
  404954:	48 83 ec 10          	sub    $0x10,%rsp
  404958:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  40495c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404960:	48 89 c7             	mov    %rax,%rdi
  404963:	e8 02 00 00 00       	call   40496a <_ZSt11__addressofIcEPT_RS0_>
  404968:	c9                   	leave
  404969:	c3                   	ret

000000000040496a <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40496a:	55                   	push   %rbp
  40496b:	48 89 e5             	mov    %rsp,%rbp
  40496e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  404972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404976:	5d                   	pop    %rbp
  404977:	c3                   	ret

0000000000404978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
  404978:	55                   	push   %rbp
  404979:	48 89 e5             	mov    %rsp,%rbp
  40497c:	48 83 ec 40          	sub    $0x40,%rsp
  404980:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404984:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  404988:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40498c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404990:	48 89 c7             	mov    %rax,%rdi
  404993:	e8 2c 00 00 00       	call   4049c4 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
  404998:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40499c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  4049a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4049a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4049ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4049b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  4049b4:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  4049b5:	90                   	nop
  4049b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4049ba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4049be:	48 89 10             	mov    %rdx,(%rax)
  4049c1:	90                   	nop
  4049c2:	c9                   	leave
  4049c3:	c3                   	ret

00000000004049c4 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
  4049c4:	55                   	push   %rbp
  4049c5:	48 89 e5             	mov    %rsp,%rbp
  4049c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4049cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049d0:	5d                   	pop    %rbp
  4049d1:	c3                   	ret

00000000004049d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      struct _Alloc_hider : allocator_type // TODO check __is_final
  4049d2:	55                   	push   %rbp
  4049d3:	48 89 e5             	mov    %rsp,%rbp
  4049d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4049da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4049de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      ~allocator() _GLIBCXX_NOTHROW { }
  4049e2:	90                   	nop
  4049e3:	90                   	nop
  4049e4:	5d                   	pop    %rbp
  4049e5:	c3                   	ret

00000000004049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:

      /**
       *  @brief  Default constructor creates an empty string.
       */
      _GLIBCXX20_CONSTEXPR
      basic_string()
  4049e6:	55                   	push   %rbp
  4049e7:	48 89 e5             	mov    %rsp,%rbp
  4049ea:	53                   	push   %rbx
  4049eb:	48 83 ec 38          	sub    $0x38,%rsp
  4049ef:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
  4049f3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  4049f7:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  4049fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4049ff:	90                   	nop
      allocator() _GLIBCXX_NOTHROW { }
  404a00:	90                   	nop
  404a01:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a05:	48 89 c7             	mov    %rax,%rdi
  404a08:	e8 0b ff ff ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  404a0d:	48 89 c1             	mov    %rax,%rcx
  404a10:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  404a14:	48 89 c2             	mov    %rax,%rdx
  404a17:	48 89 ce             	mov    %rcx,%rsi
  404a1a:	48 89 df             	mov    %rbx,%rdi
  404a1d:	e8 56 ff ff ff       	call   404978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
      ~allocator() _GLIBCXX_NOTHROW { }
  404a22:	90                   	nop
  404a23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a27:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
  404a2b:	e8 0b fb ff ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  404a30:	84 c0                	test   %al,%al
  404a32:	74 28                	je     404a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x76>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  404a34:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  404a3b:	00
  404a3c:	eb 17                	jmp    404a55 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x6f>
	    _M_local_buf[__i] = _CharT();
  404a3e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404a42:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404a46:	48 01 d0             	add    %rdx,%rax
  404a49:	48 83 c0 10          	add    $0x10,%rax
  404a4d:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  404a50:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  404a55:	48 83 7d e0 0f       	cmpq   $0xf,-0x20(%rbp)
  404a5a:	76 e2                	jbe    404a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x58>
      }
  404a5c:	90                   	nop
      {
	_M_init_local_buf();
	_M_set_length(0);
  404a5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404a61:	be 00 00 00 00       	mov    $0x0,%esi
  404a66:	48 89 c7             	mov    %rax,%rdi
  404a69:	e8 c8 1e 00 00       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  404a6e:	90                   	nop
  404a6f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  404a73:	c9                   	leave
  404a74:	c3                   	ret

0000000000404a75 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
#endif

  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404a75:	55                   	push   %rbp
  404a76:	48 89 e5             	mov    %rsp,%rbp
  404a79:	89 7d dc             	mov    %edi,-0x24(%rbp)
  404a7c:	89 75 d8             	mov    %esi,-0x28(%rbp)
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      unsigned __n = 1;
  404a7f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404a86:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404a89:	0f af c0             	imul   %eax,%eax
  404a8c:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404a8f:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404a92:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404a95:	0f af c2             	imul   %edx,%eax
  404a98:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404a9b:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404a9e:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404aa2:	89 c0                	mov    %eax,%eax
  404aa4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
  404aa8:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404aab:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  404aae:	73 05                	jae    404ab5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x40>
  404ab0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404ab3:	eb 46                	jmp    404afb <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b2) return __n + 1;
  404ab5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404ab8:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  404abb:	73 08                	jae    404ac5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x50>
  404abd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404ac0:	83 c0 01             	add    $0x1,%eax
  404ac3:	eb 36                	jmp    404afb <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b3) return __n + 2;
  404ac5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404ac8:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  404acb:	73 08                	jae    404ad5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
  404acd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404ad0:	83 c0 02             	add    $0x2,%eax
  404ad3:	eb 26                	jmp    404afb <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b4) return __n + 3;
  404ad5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404ad8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404adc:	73 08                	jae    404ae6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x71>
  404ade:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404ae1:	83 c0 03             	add    $0x3,%eax
  404ae4:	eb 15                	jmp    404afb <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  __value /= __b4;
  404ae6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404ae9:	ba 00 00 00 00       	mov    $0x0,%edx
  404aee:	48 f7 75 e8          	divq   -0x18(%rbp)
  404af2:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  __n += 4;
  404af5:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404af9:	eb ad                	jmp    404aa8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x33>
	}
    }
  404afb:	5d                   	pop    %rbp
  404afc:	c3                   	ret

0000000000404afd <_ZNSt8__detail14__to_chars_lenImEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404afd:	55                   	push   %rbp
  404afe:	48 89 e5             	mov    %rsp,%rbp
  404b01:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404b05:	89 75 d4             	mov    %esi,-0x2c(%rbp)
      unsigned __n = 1;
  404b08:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404b0f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404b12:	0f af c0             	imul   %eax,%eax
  404b15:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404b18:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404b1b:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404b1e:	0f af c2             	imul   %edx,%eax
  404b21:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404b24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404b27:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404b2b:	89 c0                	mov    %eax,%eax
  404b2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404b31:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404b34:	89 c0                	mov    %eax,%eax
  404b36:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404b3a:	73 05                	jae    404b41 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x44>
  404b3c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404b3f:	eb 4b                	jmp    404b8c <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b2) return __n + 1;
  404b41:	8b 45 f8             	mov    -0x8(%rbp),%eax
  404b44:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404b48:	73 08                	jae    404b52 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x55>
  404b4a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404b4d:	83 c0 01             	add    $0x1,%eax
  404b50:	eb 3a                	jmp    404b8c <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b3) return __n + 2;
  404b52:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404b55:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404b59:	73 08                	jae    404b63 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x66>
  404b5b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404b5e:	83 c0 02             	add    $0x2,%eax
  404b61:	eb 29                	jmp    404b8c <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b4) return __n + 3;
  404b63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404b67:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404b6b:	73 08                	jae    404b75 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x78>
  404b6d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404b70:	83 c0 03             	add    $0x3,%eax
  404b73:	eb 17                	jmp    404b8c <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  __value /= __b4;
  404b75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404b79:	ba 00 00 00 00       	mov    $0x0,%edx
  404b7e:	48 f7 75 e8          	divq   -0x18(%rbp)
  404b82:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  __n += 4;
  404b86:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404b8a:	eb a5                	jmp    404b31 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x34>
    }
  404b8c:	5d                   	pop    %rbp
  404b8d:	c3                   	ret

0000000000404b8e <_ZNSt8__detail14__to_chars_lenIyEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404b8e:	55                   	push   %rbp
  404b8f:	48 89 e5             	mov    %rsp,%rbp
  404b92:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404b96:	89 75 d4             	mov    %esi,-0x2c(%rbp)
      unsigned __n = 1;
  404b99:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404ba0:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404ba3:	0f af c0             	imul   %eax,%eax
  404ba6:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404ba9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404bac:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404baf:	0f af c2             	imul   %edx,%eax
  404bb2:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404bb5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404bb8:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404bbc:	89 c0                	mov    %eax,%eax
  404bbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404bc2:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404bc5:	89 c0                	mov    %eax,%eax
  404bc7:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404bcb:	73 05                	jae    404bd2 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x44>
  404bcd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bd0:	eb 4b                	jmp    404c1d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b2) return __n + 1;
  404bd2:	8b 45 f8             	mov    -0x8(%rbp),%eax
  404bd5:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404bd9:	73 08                	jae    404be3 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x55>
  404bdb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bde:	83 c0 01             	add    $0x1,%eax
  404be1:	eb 3a                	jmp    404c1d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b3) return __n + 2;
  404be3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404be6:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404bea:	73 08                	jae    404bf4 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x66>
  404bec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bef:	83 c0 02             	add    $0x2,%eax
  404bf2:	eb 29                	jmp    404c1d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b4) return __n + 3;
  404bf4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404bf8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404bfc:	73 08                	jae    404c06 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x78>
  404bfe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c01:	83 c0 03             	add    $0x3,%eax
  404c04:	eb 17                	jmp    404c1d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  __value /= __b4;
  404c06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404c0a:	ba 00 00 00 00       	mov    $0x0,%edx
  404c0f:	48 f7 75 e8          	divq   -0x18(%rbp)
  404c13:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  __n += 4;
  404c17:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404c1b:	eb a5                	jmp    404bc2 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x34>
    }
  404c1d:	5d                   	pop    %rbp
  404c1e:	c3                   	ret
  404c1f:	90                   	nop

0000000000404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
  404c20:	55                   	push   %rbp
  404c21:	48 89 e5             	mov    %rsp,%rbp
  404c24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  404c28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404c2c:	48 8b 40 08          	mov    0x8(%rax),%rax
  404c30:	5d                   	pop    %rbp
  404c31:	c3                   	ret

0000000000404c32 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>:
    template<>
      class __extent_storage<dynamic_extent>
      {
      public:
	constexpr
	__extent_storage(size_t __extent) noexcept
  404c32:	55                   	push   %rbp
  404c33:	48 89 e5             	mov    %rsp,%rbp
  404c36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404c3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_extent_value(__extent)
  404c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404c42:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404c46:	48 89 10             	mov    %rdx,(%rax)
	{ }
  404c49:	90                   	nop
  404c4a:	5d                   	pop    %rbp
  404c4b:	c3                   	ret

0000000000404c4c <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>:

	constexpr size_t
	_M_extent() const noexcept
  404c4c:	55                   	push   %rbp
  404c4d:	48 89 e5             	mov    %rsp,%rbp
  404c50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return this->_M_extent_value; }
  404c54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404c58:	48 8b 00             	mov    (%rax),%rax
  404c5b:	5d                   	pop    %rbp
  404c5c:	c3                   	ret

0000000000404c5d <_ZNSt9__unicode17__is_scalar_valueEDi>:
namespace __unicode
{
  // A Unicode code point that is not a high or low surrogate.
  constexpr bool
  __is_scalar_value(char32_t __c)
  {
  404c5d:	55                   	push   %rbp
  404c5e:	48 89 e5             	mov    %rsp,%rbp
  404c61:	89 7d fc             	mov    %edi,-0x4(%rbp)
    if (__c < 0xD800) [[likely]]
  404c64:	81 7d fc ff d7 00 00 	cmpl   $0xd7ff,-0x4(%rbp)
  404c6b:	77 07                	ja     404c74 <_ZNSt9__unicode17__is_scalar_valueEDi+0x17>
      return true;
  404c6d:	b8 01 00 00 00       	mov    $0x1,%eax
  404c72:	eb 1f                	jmp    404c93 <_ZNSt9__unicode17__is_scalar_valueEDi+0x36>
    return 0xDFFF < __c && __c <= 0x10FFFF;
  404c74:	81 7d fc ff df 00 00 	cmpl   $0xdfff,-0x4(%rbp)
  404c7b:	76 10                	jbe    404c8d <_ZNSt9__unicode17__is_scalar_valueEDi+0x30>
  404c7d:	81 7d fc ff ff 10 00 	cmpl   $0x10ffff,-0x4(%rbp)
  404c84:	77 07                	ja     404c8d <_ZNSt9__unicode17__is_scalar_valueEDi+0x30>
  404c86:	b8 01 00 00 00       	mov    $0x1,%eax
  404c8b:	eb 05                	jmp    404c92 <_ZNSt9__unicode17__is_scalar_valueEDi+0x35>
  404c8d:	b8 00 00 00 00       	mov    $0x0,%eax
  404c92:	90                   	nop
  }
  404c93:	5d                   	pop    %rbp
  404c94:	c3                   	ret
  404c95:	90                   	nop

0000000000404c96 <_ZNKSt9__unicode5_ReplclEv>:
  // Based on https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2728r6.html#add-the-transcoding-iterator-template

  struct _Repl
  {
    constexpr char32_t
    operator()() const noexcept
  404c96:	55                   	push   %rbp
  404c97:	48 89 e5             	mov    %rsp,%rbp
  404c9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return 0xFFFD; }
  404c9e:	b8 fd ff 00 00       	mov    $0xfffd,%eax
  404ca3:	5d                   	pop    %rbp
  404ca4:	c3                   	ret

0000000000404ca5 <_ZNSt9__unicode9__v15_1_013__field_widthEDi>:
#endif

  // The field width of a code point.
  constexpr int
  __field_width(char32_t __c) noexcept
  {
  404ca5:	55                   	push   %rbp
  404ca6:	48 89 e5             	mov    %rsp,%rbp
  404ca9:	48 83 ec 20          	sub    $0x20,%rsp
  404cad:	89 7d ec             	mov    %edi,-0x14(%rbp)
    if (__c < __width_edges[0]) [[likely]]
  404cb0:	ba 00 11 00 00       	mov    $0x1100,%edx
  404cb5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404cb8:	39 d0                	cmp    %edx,%eax
  404cba:	73 07                	jae    404cc3 <_ZNSt9__unicode9__v15_1_013__field_widthEDi+0x1e>
      return 1;
  404cbc:	b8 01 00 00 00       	mov    $0x1,%eax
  404cc1:	eb 48                	jmp    404d0b <_ZNSt9__unicode9__v15_1_013__field_widthEDi+0x66>
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }
  404cc3:	b9 60 a8 41 00       	mov    $0x41a860,%ecx

    auto* __p = std::upper_bound(__width_edges, std::end(__width_edges), __c);
  404cc8:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  404ccc:	48 89 c2             	mov    %rax,%rdx
  404ccf:	48 89 ce             	mov    %rcx,%rsi
  404cd2:	bf 40 a5 41 00       	mov    $0x41a540,%edi
  404cd7:	e8 9f 27 00 00       	call   40747b <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>
  404cdc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (__p - __width_edges) % 2 + 1;
  404ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ce4:	48 2d 40 a5 41 00    	sub    $0x41a540,%rax
  404cea:	48 c1 f8 02          	sar    $0x2,%rax
  404cee:	48 89 c2             	mov    %rax,%rdx
  404cf1:	48 89 d0             	mov    %rdx,%rax
  404cf4:	48 c1 f8 3f          	sar    $0x3f,%rax
  404cf8:	48 c1 e8 3f          	shr    $0x3f,%rax
  404cfc:	48 01 c2             	add    %rax,%rdx
  404cff:	83 e2 01             	and    $0x1,%edx
  404d02:	48 29 c2             	sub    %rax,%rdx
  404d05:	48 89 d0             	mov    %rdx,%rax
  404d08:	83 c0 01             	add    $0x1,%eax
  }
  404d0b:	c9                   	leave
  404d0c:	c3                   	ret

0000000000404d0d <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>:

  // @pre c <= 0x10FFFF
  constexpr _Gcb_property
  __grapheme_cluster_break_property(char32_t __c) noexcept
  {
  404d0d:	55                   	push   %rbp
  404d0e:	48 89 e5             	mov    %rsp,%rbp
  404d11:	48 83 ec 30          	sub    $0x30,%rsp
  404d15:	89 7d dc             	mov    %edi,-0x24(%rbp)
    constexpr uint32_t __mask = (1 << __gcb_shift_bits) - 1;
  404d18:	c7 45 fc 0f 00 00 00 	movl   $0xf,-0x4(%rbp)
  404d1f:	b8 f0 c2 41 00       	mov    $0x41c2f0,%eax
    auto* __end = std::end(__gcb_edges);
  404d24:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    auto* __p = std::lower_bound(__gcb_edges, __end,
				 (__c << __gcb_shift_bits) | __mask);
  404d28:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404d2b:	c1 e0 04             	shl    $0x4,%eax
  404d2e:	83 c8 0f             	or     $0xf,%eax
  404d31:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    auto* __p = std::lower_bound(__gcb_edges, __end,
  404d34:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  404d38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d3c:	48 89 c6             	mov    %rax,%rsi
  404d3f:	bf 60 a8 41 00       	mov    $0x41a860,%edi
  404d44:	e8 64 27 00 00       	call   4074ad <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>
  404d49:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    return _Gcb_property(__p[-1] & __mask);
  404d4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404d51:	48 83 e8 04          	sub    $0x4,%rax
  404d55:	8b 00                	mov    (%rax),%eax
  404d57:	83 e0 0f             	and    $0xf,%eax
  }
  404d5a:	c9                   	leave
  404d5b:	c3                   	ret

0000000000404d5c <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>:

  constexpr bool
  __is_incb_linker(char32_t __c) noexcept
  {
  404d5c:	55                   	push   %rbp
  404d5d:	48 89 e5             	mov    %rsp,%rbp
  404d60:	48 83 ec 20          	sub    $0x20,%rsp
  404d64:	89 7d ec             	mov    %edi,-0x14(%rbp)
  404d67:	b8 08 c3 41 00       	mov    $0x41c308,%eax
    const auto __end = std::end(__incb_linkers);
  404d6c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    // Array is small enough that linear search is faster than binary search.
    return std::find(__incb_linkers, __end, __c) != __end;
  404d70:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  404d74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d78:	48 89 c6             	mov    %rax,%rsi
  404d7b:	bf f0 c2 41 00       	mov    $0x41c2f0,%edi
  404d80:	e8 5a 27 00 00       	call   4074df <_ZSt4findIPKDiDiET_S2_S2_RKT0_>
  404d85:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  404d89:	0f 95 c0             	setne  %al
  }
  404d8c:	c9                   	leave
  404d8d:	c3                   	ret

0000000000404d8e <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>:

  // @pre c <= 0x10FFFF
  constexpr _InCB
  __incb_property(char32_t __c) noexcept
  {
  404d8e:	55                   	push   %rbp
  404d8f:	48 89 e5             	mov    %rsp,%rbp
  404d92:	48 83 ec 30          	sub    $0x30,%rsp
  404d96:	89 7d dc             	mov    %edi,-0x24(%rbp)
    if ((__c << 2) < __incb_edges[0]) [[likely]]
  404d99:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404d9c:	c1 e0 02             	shl    $0x2,%eax
  404d9f:	ba 02 0c 00 00       	mov    $0xc02,%edx
  404da4:	39 d0                	cmp    %edx,%eax
  404da6:	73 07                	jae    404daf <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi+0x21>
      return _InCB(0);
  404da8:	b8 00 00 00 00       	mov    $0x0,%eax
  404dad:	eb 42                	jmp    404df1 <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi+0x63>

    constexpr uint32_t __mask = 0x3;
  404daf:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%rbp)
  404db6:	b8 34 c9 41 00       	mov    $0x41c934,%eax
    auto* __end = std::end(__incb_edges);
  404dbb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
  404dbf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404dc2:	c1 e0 02             	shl    $0x2,%eax
  404dc5:	83 c8 03             	or     $0x3,%eax
  404dc8:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404dcb:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  404dcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404dd3:	48 89 c6             	mov    %rax,%rsi
  404dd6:	bf 20 c3 41 00       	mov    $0x41c320,%edi
  404ddb:	e8 cd 26 00 00       	call   4074ad <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>
  404de0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    return _InCB(__p[-1] & __mask);
  404de4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404de8:	48 83 e8 04          	sub    $0x4,%rax
  404dec:	8b 00                	mov    (%rax),%eax
  404dee:	83 e0 03             	and    $0x3,%eax
  }
  404df1:	c9                   	leave
  404df2:	c3                   	ret

0000000000404df3 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>:

  constexpr bool
  __is_extended_pictographic(char32_t __c)
  {
  404df3:	55                   	push   %rbp
  404df4:	48 89 e5             	mov    %rsp,%rbp
  404df7:	48 83 ec 20          	sub    $0x20,%rsp
  404dfb:	89 7d ec             	mov    %edi,-0x14(%rbp)
    if (__c < __xpicto_edges[0]) [[likely]]
  404dfe:	ba a9 00 00 00       	mov    $0xa9,%edx
  404e03:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404e06:	39 d0                	cmp    %edx,%eax
  404e08:	73 07                	jae    404e11 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi+0x1e>
      return 0;
  404e0a:	b8 00 00 00 00       	mov    $0x0,%eax
  404e0f:	eb 34                	jmp    404e45 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi+0x52>
  404e11:	b9 b0 cb 41 00       	mov    $0x41cbb0,%ecx

    auto* __p = std::upper_bound(__xpicto_edges, std::end(__xpicto_edges), __c);
  404e16:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  404e1a:	48 89 c2             	mov    %rax,%rdx
  404e1d:	48 89 ce             	mov    %rcx,%rsi
  404e20:	bf 40 c9 41 00       	mov    $0x41c940,%edi
  404e25:	e8 51 26 00 00       	call   40747b <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>
  404e2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (__p - __xpicto_edges) % 2;
  404e2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e32:	48 2d 40 c9 41 00    	sub    $0x41c940,%rax
  404e38:	48 c1 f8 02          	sar    $0x2,%rax
  404e3c:	83 e0 01             	and    $0x1,%eax
  404e3f:	48 85 c0             	test   %rax,%rax
  404e42:	0f 95 c0             	setne  %al
  }
  404e45:	c9                   	leave
  404e46:	c3                   	ret
  404e47:	90                   	nop

0000000000404e48 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base8_M_resetEDiNS0_13_Gcb_propertyE>:
    _XPicto _M_xpicto_seq_state = _XPicto::_Init;
    unsigned char _M_RI_count = 0;
    bool _M_incb_linker_seen = false;

    constexpr void
    _M_reset(char32_t __c, _Gcb_property __p)
  404e48:	55                   	push   %rbp
  404e49:	48 89 e5             	mov    %rsp,%rbp
  404e4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404e50:	89 75 f4             	mov    %esi,-0xc(%rbp)
  404e53:	89 55 f0             	mov    %edx,-0x10(%rbp)
    {
      _M_c = __c;
  404e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  404e5d:	89 10                	mov    %edx,(%rax)
      _M_prop = __p;
  404e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e63:	8b 55 f0             	mov    -0x10(%rbp),%edx
  404e66:	89 50 04             	mov    %edx,0x4(%rax)
      _M_xpicto_seq_state = _XPicto::_Init;
  404e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e6d:	c6 40 08 00          	movb   $0x0,0x8(%rax)
      _M_RI_count = 0;
  404e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e75:	c6 40 09 00          	movb   $0x0,0x9(%rax)
      _M_incb_linker_seen = false;
  404e79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e7d:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
    }
  404e81:	90                   	nop
  404e82:	5d                   	pop    %rbp
  404e83:	c3                   	ret

0000000000404e84 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_xpicto_seq_state(char32_t __c, _Gcb_property __p)
  404e84:	55                   	push   %rbp
  404e85:	48 89 e5             	mov    %rsp,%rbp
  404e88:	48 83 ec 20          	sub    $0x20,%rsp
  404e8c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404e90:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  404e93:	89 55 e0             	mov    %edx,-0x20(%rbp)
    {
      if (_M_xpicto_seq_state == _XPicto::_Failed)
  404e96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404e9a:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  404e9e:	3c 03                	cmp    $0x3,%al
  404ea0:	0f 84 87 00 00 00    	je     404f2d <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0xa9>
	return;

      auto __next_state = _XPicto::_Failed;
  404ea6:	c6 45 ff 03          	movb   $0x3,-0x1(%rbp)
      if (_M_xpicto_seq_state != _XPicto::_Zwj) // i.e. Init or Matched
  404eaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404eae:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  404eb2:	3c 01                	cmp    $0x1,%al
  404eb4:	74 42                	je     404ef8 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x74>
	{
	  if (__p == _Gcb_property::_Gcb_ZWJ)
  404eb6:	83 7d e0 0a          	cmpl   $0xa,-0x20(%rbp)
  404eba:	75 29                	jne    404ee5 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x61>
	    {
	      if (_M_xpicto_seq_state == _XPicto::_Matched)
  404ebc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404ec0:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  404ec4:	3c 02                	cmp    $0x2,%al
  404ec6:	75 06                	jne    404ece <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x4a>
		__next_state = _XPicto::_Zwj;
  404ec8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  404ecc:	eb 52                	jmp    404f20 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	      // We check _M_c here so that we do the lookup at most once,
	      // and only for clusters containing at least one ZWJ.
	      else if (__is_extended_pictographic(_M_c))
  404ece:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404ed2:	8b 00                	mov    (%rax),%eax
  404ed4:	89 c7                	mov    %eax,%edi
  404ed6:	e8 18 ff ff ff       	call   404df3 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>
  404edb:	84 c0                	test   %al,%al
  404edd:	74 41                	je     404f20 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
		__next_state = _XPicto::_Zwj;
  404edf:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  404ee3:	eb 3b                	jmp    404f20 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    }
	  else if (__p == _Gcb_property::_Gcb_Extend)
  404ee5:	83 7d e0 04          	cmpl   $0x4,-0x20(%rbp)
  404ee9:	75 35                	jne    404f20 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    __next_state = _M_xpicto_seq_state; // no change
  404eeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404eef:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  404ef3:	88 45 ff             	mov    %al,-0x1(%rbp)
  404ef6:	eb 28                	jmp    404f20 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
      else // Zwj
	{
	  // This assumes that all \p{Extended_Pictographic} emoji have
	  // Grapheme_Cluster_Break=Other.
	  if (__p == _Gcb_property::_Gcb_Other
		&& __is_extended_pictographic(__c))
  404ef8:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  404efc:	75 15                	jne    404f13 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x8f>
  404efe:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  404f01:	89 c7                	mov    %eax,%edi
  404f03:	e8 eb fe ff ff       	call   404df3 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>
  404f08:	84 c0                	test   %al,%al
  404f0a:	74 07                	je     404f13 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x8f>
  404f0c:	b8 01 00 00 00       	mov    $0x1,%eax
  404f11:	eb 05                	jmp    404f18 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x94>
  404f13:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (__p == _Gcb_property::_Gcb_Other
  404f18:	84 c0                	test   %al,%al
  404f1a:	74 04                	je     404f20 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    __next_state = _XPicto::_Matched;
  404f1c:	c6 45 ff 02          	movb   $0x2,-0x1(%rbp)
	}
      _M_xpicto_seq_state = __next_state;
  404f20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f24:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  404f28:	88 50 08             	mov    %dl,0x8(%rax)
  404f2b:	eb 01                	jmp    404f2e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0xaa>
	return;
  404f2d:	90                   	nop
    }
  404f2e:	c9                   	leave
  404f2f:	c3                   	ret

0000000000404f30 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_ri_count(_Gcb_property __p)
  404f30:	55                   	push   %rbp
  404f31:	48 89 e5             	mov    %rsp,%rbp
  404f34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f38:	89 75 f4             	mov    %esi,-0xc(%rbp)
    {
      if (__p == _Gcb_property::_Gcb_Regional_Indicator)
  404f3b:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  404f3f:	75 14                	jne    404f55 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE+0x25>
	++_M_RI_count;
  404f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f45:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  404f49:	8d 50 01             	lea    0x1(%rax),%edx
  404f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f50:	88 50 09             	mov    %dl,0x9(%rax)
      else
	_M_RI_count = 0;
    }
  404f53:	eb 08                	jmp    404f5d <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE+0x2d>
	_M_RI_count = 0;
  404f55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f59:	c6 40 09 00          	movb   $0x0,0x9(%rax)
    }
  404f5d:	90                   	nop
  404f5e:	5d                   	pop    %rbp
  404f5f:	c3                   	ret

0000000000404f60 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_incb_state(char32_t __c, _Gcb_property)
  404f60:	55                   	push   %rbp
  404f61:	48 89 e5             	mov    %rsp,%rbp
  404f64:	48 83 ec 10          	sub    $0x10,%rsp
  404f68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404f6c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  404f6f:	89 55 f0             	mov    %edx,-0x10(%rbp)
    {
      if (__is_incb_linker(__c))
  404f72:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404f75:	89 c7                	mov    %eax,%edi
  404f77:	e8 e0 fd ff ff       	call   404d5c <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>
  404f7c:	84 c0                	test   %al,%al
  404f7e:	74 08                	je     404f88 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE+0x28>
	_M_incb_linker_seen = true;
  404f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404f84:	c6 40 0a 01          	movb   $0x1,0xa(%rax)
    }
  404f88:	90                   	nop
  404f89:	c9                   	leave
  404f8a:	c3                   	ret

0000000000404f8b <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>:
  // return its corresponding base-10 value, otherwise return a value >= 127.
  // If _DecOnly is false: if the character is an alphanumeric digit, then
  // return its corresponding base-36 value, otherwise return a value >= 127.
  template<bool _DecOnly = false>
    _GLIBCXX20_CONSTEXPR unsigned char
    __from_chars_alnum_to_val(unsigned char __c)
  404f8b:	55                   	push   %rbp
  404f8c:	48 89 e5             	mov    %rsp,%rbp
  404f8f:	89 f8                	mov    %edi,%eax
  404f91:	88 45 fc             	mov    %al,-0x4(%rbp)
    {
      if _GLIBCXX17_CONSTEXPR (_DecOnly)
	return static_cast<unsigned char>(__c - '0');
      else
	return __from_chars_alnum_to_val_table<_DecOnly>::value.__data[__c];
  404f94:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  404f98:	48 98                	cltq
  404f9a:	0f b6 80 c0 cb 41 00 	movzbl 0x41cbc0(%rax),%eax
    }
  404fa1:	5d                   	pop    %rbp
  404fa2:	c3                   	ret
  404fa3:	90                   	nop

0000000000404fa4 <_ZNSt12format_errorC1EPKc>:
  // [format.error], class format_error
  class format_error : public runtime_error
  {
  public:
    explicit format_error(const string& __what) : runtime_error(__what) { }
    explicit format_error(const char* __what) : runtime_error(__what) { }
  404fa4:	55                   	push   %rbp
  404fa5:	48 89 e5             	mov    %rsp,%rbp
  404fa8:	48 83 ec 10          	sub    $0x10,%rsp
  404fac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404fb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fb8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404fbc:	48 89 d6             	mov    %rdx,%rsi
  404fbf:	48 89 c7             	mov    %rax,%rdi
  404fc2:	e8 d9 f3 ff ff       	call   4043a0 <_ZNSt13runtime_errorC2EPKc@plt>
  404fc7:	ba 58 ce 41 00       	mov    $0x41ce58,%edx
  404fcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fd0:	48 89 10             	mov    %rdx,(%rax)
  404fd3:	90                   	nop
  404fd4:	c9                   	leave
  404fd5:	c3                   	ret

0000000000404fd6 <_ZNSt12format_errorD1Ev>:
  class format_error : public runtime_error
  404fd6:	55                   	push   %rbp
  404fd7:	48 89 e5             	mov    %rsp,%rbp
  404fda:	48 83 ec 10          	sub    $0x10,%rsp
  404fde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404fe2:	ba 58 ce 41 00       	mov    $0x41ce58,%edx
  404fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404feb:	48 89 10             	mov    %rdx,(%rax)
  404fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ff2:	48 89 c7             	mov    %rax,%rdi
  404ff5:	e8 56 f2 ff ff       	call   404250 <_ZNSt13runtime_errorD2Ev@plt>
  404ffa:	90                   	nop
  404ffb:	c9                   	leave
  404ffc:	c3                   	ret
  404ffd:	90                   	nop

0000000000404ffe <_ZNSt12format_errorD0Ev>:
  404ffe:	55                   	push   %rbp
  404fff:	48 89 e5             	mov    %rsp,%rbp
  405002:	48 83 ec 10          	sub    $0x10,%rsp
  405006:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40500a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40500e:	48 89 c7             	mov    %rax,%rdi
  405011:	e8 c0 ff ff ff       	call   404fd6 <_ZNSt12format_errorD1Ev>
  405016:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40501a:	be 10 00 00 00       	mov    $0x10,%esi
  40501f:	48 89 c7             	mov    %rax,%rdi
  405022:	e8 09 f2 ff ff       	call   404230 <_ZdlPvm@plt>
  405027:	c9                   	leave
  405028:	c3                   	ret

0000000000405029 <_ZSt20__throw_format_errorPKc>:

  /// @cond undocumented
  [[noreturn]]
  inline void
  __throw_format_error(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
  405029:	55                   	push   %rbp
  40502a:	48 89 e5             	mov    %rsp,%rbp
  40502d:	41 54                	push   %r12
  40502f:	53                   	push   %rbx
  405030:	48 83 ec 10          	sub    $0x10,%rsp
  405034:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405038:	bf 10 00 00 00       	mov    $0x10,%edi
  40503d:	e8 8e f0 ff ff       	call   4040d0 <__cxa_allocate_exception@plt>
  405042:	48 89 c3             	mov    %rax,%rbx
  405045:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405049:	48 89 c6             	mov    %rax,%rsi
  40504c:	48 89 df             	mov    %rbx,%rdi
  40504f:	e8 50 ff ff ff       	call   404fa4 <_ZNSt12format_errorC1EPKc>
  405054:	ba d6 4f 40 00       	mov    $0x404fd6,%edx
  405059:	be 38 d0 41 00       	mov    $0x41d038,%esi
  40505e:	48 89 df             	mov    %rbx,%rdi
  405061:	e8 fa f2 ff ff       	call   404360 <__cxa_throw@plt>
  405066:	49 89 c4             	mov    %rax,%r12
  405069:	48 89 df             	mov    %rbx,%rdi
  40506c:	e8 1f f1 ff ff       	call   404190 <__cxa_free_exception@plt>
  405071:	4c 89 e0             	mov    %r12,%rax
  405074:	48 89 c7             	mov    %rax,%rdi
  405077:	e8 f4 f2 ff ff       	call   404370 <_Unwind_Resume@plt>

000000000040507c <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>:
  // XXX use named functions for each constexpr error?

  [[noreturn]]
  inline void
  __unmatched_left_brace_in_format_string()
  { __throw_format_error("format error: unmatched '{' in format string"); }
  40507c:	55                   	push   %rbp
  40507d:	48 89 e5             	mov    %rsp,%rbp
  405080:	bf 48 a0 41 00       	mov    $0x41a048,%edi
  405085:	e8 9f ff ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>

000000000040508a <_ZNSt8__format40__unmatched_right_brace_in_format_stringEv>:

  [[noreturn]]
  inline void
  __unmatched_right_brace_in_format_string()
  { __throw_format_error("format error: unmatched '}' in format string"); }
  40508a:	55                   	push   %rbp
  40508b:	48 89 e5             	mov    %rsp,%rbp
  40508e:	bf 78 a0 41 00       	mov    $0x41a078,%edi
  405093:	e8 91 ff ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>

0000000000405098 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>:

  [[noreturn]]
  inline void
  __conflicting_indexing_in_format_string()
  { __throw_format_error("format error: conflicting indexing style in format string"); }
  405098:	55                   	push   %rbp
  405099:	48 89 e5             	mov    %rsp,%rbp
  40509c:	bf a8 a0 41 00       	mov    $0x41a0a8,%edi
  4050a1:	e8 83 ff ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004050a6 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>:

  [[noreturn]]
  inline void
  __invalid_arg_id_in_format_string()
  { __throw_format_error("format error: invalid arg-id in format string"); }
  4050a6:	55                   	push   %rbp
  4050a7:	48 89 e5             	mov    %rsp,%rbp
  4050aa:	bf e8 a0 41 00       	mov    $0x41a0e8,%edi
  4050af:	e8 75 ff ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004050b4 <_ZNSt8__format29__failed_to_parse_format_specEv>:

  [[noreturn]]
  inline void
  __failed_to_parse_format_spec()
  { __throw_format_error("format error: failed to parse format-spec"); }
  4050b4:	55                   	push   %rbp
  4050b5:	48 89 e5             	mov    %rsp,%rbp
  4050b8:	bf 18 a1 41 00       	mov    $0x41a118,%edi
  4050bd:	e8 67 ff ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004050c2 <_ZNSt8__format10__is_digitEc>:
  template<typename _Context>
    size_t
    __int_from_arg(const basic_format_arg<_Context>& __arg);

  constexpr bool __is_digit(char __c)
  { return std::__detail::__from_chars_alnum_to_val(__c) < 10; }
  4050c2:	55                   	push   %rbp
  4050c3:	48 89 e5             	mov    %rsp,%rbp
  4050c6:	48 83 ec 10          	sub    $0x10,%rsp
  4050ca:	89 f8                	mov    %edi,%eax
  4050cc:	88 45 fc             	mov    %al,-0x4(%rbp)
  4050cf:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  4050d3:	0f b6 c0             	movzbl %al,%eax
  4050d6:	89 c7                	mov    %eax,%edi
  4050d8:	e8 ae fe ff ff       	call   404f8b <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>
  4050dd:	3c 09                	cmp    $0x9,%al
  4050df:	0f 96 c0             	setbe  %al
  4050e2:	c9                   	leave
  4050e3:	c3                   	ret

00000000004050e4 <_ZNSt8__format11__is_xdigitEc>:

  constexpr bool __is_xdigit(char __c)
  { return std::__detail::__from_chars_alnum_to_val(__c) < 16; }
  4050e4:	55                   	push   %rbp
  4050e5:	48 89 e5             	mov    %rsp,%rbp
  4050e8:	48 83 ec 10          	sub    $0x10,%rsp
  4050ec:	89 f8                	mov    %edi,%eax
  4050ee:	88 45 fc             	mov    %al,-0x4(%rbp)
  4050f1:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  4050f5:	0f b6 c0             	movzbl %al,%eax
  4050f8:	89 c7                	mov    %eax,%edi
  4050fa:	e8 8c fe ff ff       	call   404f8b <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>
  4050ff:	3c 0f                	cmp    $0xf,%al
  405101:	0f 96 c0             	setbe  %al
  405104:	c9                   	leave
  405105:	c3                   	ret

0000000000405106 <_ZNSt8__format16_Optional_localeC1ERKSt6locale>:
  struct _Optional_locale
  {
    [[__gnu__::__always_inline__]]
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }

    _Optional_locale(const locale& __loc) noexcept
  405106:	55                   	push   %rbp
  405107:	48 89 e5             	mov    %rsp,%rbp
  40510a:	48 83 ec 10          	sub    $0x10,%rsp
  40510e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405112:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    : _M_loc(__loc), _M_hasval(true)
  405116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40511a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40511e:	48 89 d6             	mov    %rdx,%rsi
  405121:	48 89 c7             	mov    %rax,%rdi
  405124:	e8 37 f0 ff ff       	call   404160 <_ZNSt6localeC1ERKS_@plt>
  405129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40512d:	c6 40 08 01          	movb   $0x1,0x8(%rax)
    { }
  405131:	90                   	nop
  405132:	c9                   	leave
  405133:	c3                   	ret

0000000000405134 <_ZNSt8__format16_Optional_localeD1Ev>:
	  _M_hasval = true;
	}
      return *this;
    }

    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
  405134:	55                   	push   %rbp
  405135:	48 89 e5             	mov    %rsp,%rbp
  405138:	48 83 ec 10          	sub    $0x10,%rsp
  40513c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405144:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  405148:	84 c0                	test   %al,%al
  40514a:	74 0c                	je     405158 <_ZNSt8__format16_Optional_localeD1Ev+0x24>
  40514c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405150:	48 89 c7             	mov    %rax,%rdi
  405153:	e8 78 f1 ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
  405158:	90                   	nop
  405159:	c9                   	leave
  40515a:	c3                   	ret
  40515b:	90                   	nop

000000000040515c <_ZNSt8__format16_Optional_locale5valueEv>:
	}
      return *this;
    }

    const locale&
    value() noexcept
  40515c:	55                   	push   %rbp
  40515d:	48 89 e5             	mov    %rsp,%rbp
  405160:	48 83 ec 10          	sub    $0x10,%rsp
  405164:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if (!_M_hasval)
  405168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40516c:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  405170:	83 f0 01             	xor    $0x1,%eax
  405173:	84 c0                	test   %al,%al
  405175:	74 14                	je     40518b <_ZNSt8__format16_Optional_locale5valueEv+0x2f>
	{
	  std::construct_at(&_M_loc);
  405177:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40517b:	48 89 c7             	mov    %rax,%rdi
  40517e:	e8 94 23 00 00       	call   407517 <_ZSt12construct_atISt6localeJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	  _M_hasval = true;
  405183:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405187:	c6 40 08 01          	movb   $0x1,0x8(%rax)
	}
      return _M_loc;
  40518b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40518f:	c9                   	leave
  405190:	c3                   	ret
  405191:	90                   	nop

0000000000405192 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
  using _GLIBCXX_STD_C::vector;

  // A sink that fills a sequence (e.g. std::string, std::vector, std::deque).
  // Writes to a buffer then appends that to the sequence when it fills up.
  template<typename _Seq>
    class _Seq_sink final : public _Buf_sink<typename _Seq::value_type>
  405192:	55                   	push   %rbp
  405193:	48 89 e5             	mov    %rsp,%rbp
  405196:	48 83 ec 10          	sub    $0x10,%rsp
  40519a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40519e:	ba e0 cd 41 00       	mov    $0x41cde0,%edx
  4051a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4051a7:	48 89 10             	mov    %rdx,(%rax)
  4051aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4051ae:	48 05 20 01 00 00    	add    $0x120,%rax
  4051b4:	48 89 c7             	mov    %rax,%rdi
  4051b7:	e8 c6 17 00 00       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4051bc:	90                   	nop
  4051bd:	c9                   	leave
  4051be:	c3                   	ret

00000000004051bf <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:
#endif

  [[nodiscard]]
  inline string
  vformat(string_view __fmt, format_args __args)
  {
  4051bf:	55                   	push   %rbp
  4051c0:	48 89 e5             	mov    %rsp,%rbp
  4051c3:	53                   	push   %rbx
  4051c4:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  4051cb:	48 89 bd 28 fe ff ff 	mov    %rdi,-0x1d8(%rbp)
  4051d2:	48 89 f0             	mov    %rsi,%rax
  4051d5:	48 89 d6             	mov    %rdx,%rsi
  4051d8:	48 89 c0             	mov    %rax,%rax
  4051db:	ba 00 00 00 00       	mov    $0x0,%edx
  4051e0:	48 89 f2             	mov    %rsi,%rdx
  4051e3:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4051ea:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  4051f1:	48 89 c8             	mov    %rcx,%rax
  4051f4:	4c 89 c1             	mov    %r8,%rcx
  4051f7:	48 89 c0             	mov    %rax,%rax
  4051fa:	ba 00 00 00 00       	mov    $0x0,%edx
  4051ff:	48 89 ca             	mov    %rcx,%rdx
  405202:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  405209:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
      { }
  405210:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405217:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  40521b:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  40521f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405223:	48 8d 50 20          	lea    0x20(%rax),%rdx
  405227:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40522b:	48 89 d6             	mov    %rdx,%rsi
  40522e:	48 89 c7             	mov    %rax,%rdi
  405231:	e8 8c 54 00 00       	call   40a6c2 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  405236:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  40523a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40523e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405242:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  405249:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  405250:	ba 30 ce 41 00       	mov    $0x41ce30,%edx
  405255:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405259:	48 89 10             	mov    %rdx,(%rax)
  40525c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  405260:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  405267:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
  40526e:	48 89 41 08          	mov    %rax,0x8(%rcx)
  405272:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  405276:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40527a:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  405281:	48 89 c7             	mov    %rax,%rdi
  405284:	e8 8b 57 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  405289:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  40528d:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  40528e:	ba 08 ce 41 00       	mov    $0x41ce08,%edx
  405293:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405297:	48 89 10             	mov    %rdx,(%rax)
      { }
  40529a:	90                   	nop
      { }
  40529b:	b8 e0 cd 41 00       	mov    $0x41cde0,%eax
  4052a0:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  4052a7:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4052ae:	48 05 20 01 00 00    	add    $0x120,%rax
  4052b4:	48 89 c7             	mov    %rax,%rdi
  4052b7:	e8 2a f7 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  4052bc:	90                   	nop
  4052bd:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4052c4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  4052c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4052cc:	48 89 c7             	mov    %rax,%rdi
  4052cf:	e8 19 54 00 00       	call   40a6ed <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  4052d4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4052d8:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  4052d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4052dd:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  4052e4:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4052eb:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4052f2:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  4052f9:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
  405300:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  405307:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  40530e:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  405315:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
  40531c:	48 8d 85 58 fe ff ff 	lea    -0x1a8(%rbp),%rax
  405323:	48 89 c7             	mov    %rax,%rdi
  405326:	e8 40 3a 00 00       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40532b:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
  405332:	48 8b b5 40 fe ff ff 	mov    -0x1c0(%rbp),%rsi
  405339:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  405340:	48 8b 00             	mov    (%rax),%rax
  405343:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  405349:	48 89 c7             	mov    %rax,%rdi
  40534c:	e8 74 43 00 00       	call   4096c5 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  405351:	90                   	nop
    __format::_Str_sink<char> __buf;
    std::vformat_to(__buf.out(), __fmt, __args);
    return std::move(__buf).get();
  405352:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405359:	48 89 c7             	mov    %rax,%rdi
  40535c:	e8 e8 21 00 00       	call   407549 <_ZSt4moveIRNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEONSt16remove_referenceIT_E4typeEOSB_>
  405361:	48 89 c2             	mov    %rax,%rdx
  405364:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  40536b:	48 89 d6             	mov    %rdx,%rsi
  40536e:	48 89 c7             	mov    %rax,%rdi
  405371:	e8 e2 21 00 00       	call   407558 <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv>
  405376:	90                   	nop
  }
  405377:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40537e:	48 89 c7             	mov    %rax,%rdi
  405381:	e8 0c fe ff ff       	call   405192 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
    return std::move(__buf).get();
  405386:	eb 1d                	jmp    4053a5 <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x1e6>
  }
  405388:	48 89 c3             	mov    %rax,%rbx
  40538b:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405392:	48 89 c7             	mov    %rax,%rdi
  405395:	e8 f8 fd ff ff       	call   405192 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  40539a:	48 89 d8             	mov    %rbx,%rax
  40539d:	48 89 c7             	mov    %rax,%rdi
  4053a0:	e8 cb ef ff ff       	call   404370 <_Unwind_Resume@plt>
  4053a5:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4053ac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4053b0:	c9                   	leave
  4053b1:	c3                   	ret

00000000004053b2 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>:
      }
#endif

      [[nodiscard]]
      constexpr pointer
      data() const noexcept
  4053b2:	55                   	push   %rbp
  4053b3:	48 89 e5             	mov    %rsp,%rbp
  4053b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_ptr; }
  4053ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4053be:	48 8b 00             	mov    (%rax),%rax
  4053c1:	5d                   	pop    %rbp
  4053c2:	c3                   	ret
  4053c3:	90                   	nop

00000000004053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>:
      size() const noexcept
  4053c4:	55                   	push   %rbp
  4053c5:	48 89 e5             	mov    %rsp,%rbp
  4053c8:	48 83 ec 10          	sub    $0x10,%rsp
  4053cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_extent._M_extent(); }
  4053d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4053d4:	48 83 c0 08          	add    $0x8,%rax
  4053d8:	48 89 c7             	mov    %rax,%rdi
  4053db:	e8 6c f8 ff ff       	call   404c4c <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>
  4053e0:	c9                   	leave
  4053e1:	c3                   	ret

00000000004053e2 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  inline void
  vprint_nonunicode(FILE* __stream, string_view __fmt, format_args __args)
  {
  4053e2:	55                   	push   %rbp
  4053e3:	48 89 e5             	mov    %rsp,%rbp
  4053e6:	53                   	push   %rbx
  4053e7:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
  4053ee:	48 89 bd 18 fe ff ff 	mov    %rdi,-0x1e8(%rbp)
  4053f5:	48 89 f0             	mov    %rsi,%rax
  4053f8:	48 89 d6             	mov    %rdx,%rsi
  4053fb:	48 89 c0             	mov    %rax,%rax
  4053fe:	ba 00 00 00 00       	mov    $0x0,%edx
  405403:	48 89 f2             	mov    %rsi,%rdx
  405406:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  40540d:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
  405414:	48 89 c8             	mov    %rcx,%rax
  405417:	4c 89 c1             	mov    %r8,%rcx
  40541a:	48 89 c0             	mov    %rax,%rax
  40541d:	ba 00 00 00 00       	mov    $0x0,%edx
  405422:	48 89 ca             	mov    %rcx,%rdx
  405425:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  40542c:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
      { }
  405433:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40543a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  40543e:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  405442:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405446:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40544a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40544e:	48 89 d6             	mov    %rdx,%rsi
  405451:	48 89 c7             	mov    %rax,%rdi
  405454:	e8 69 52 00 00       	call   40a6c2 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  405459:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  40545d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  405461:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405465:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  40546c:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  405473:	ba 30 ce 41 00       	mov    $0x41ce30,%edx
  405478:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40547c:	48 89 10             	mov    %rdx,(%rax)
  40547f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  405483:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40548a:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
  405491:	48 89 41 08          	mov    %rax,0x8(%rcx)
  405495:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  405499:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40549d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  4054a4:	48 89 c7             	mov    %rax,%rdi
  4054a7:	e8 68 55 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4054ac:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  4054b0:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  4054b1:	ba 08 ce 41 00       	mov    $0x41ce08,%edx
  4054b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4054ba:	48 89 10             	mov    %rdx,(%rax)
      { }
  4054bd:	90                   	nop
      { }
  4054be:	b8 e0 cd 41 00       	mov    $0x41cde0,%eax
  4054c3:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  4054ca:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4054d1:	48 05 20 01 00 00    	add    $0x120,%rax
  4054d7:	48 89 c7             	mov    %rax,%rdi
  4054da:	e8 07 f5 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  4054df:	90                   	nop
  4054e0:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4054e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  4054eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4054ef:	48 89 c7             	mov    %rax,%rdi
  4054f2:	e8 f6 51 00 00       	call   40a6ed <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  4054f7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4054fb:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  4054fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  405500:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  405507:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40550e:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  405515:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  40551c:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
  405523:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  40552a:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  405531:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  405538:	48 89 95 28 fe ff ff 	mov    %rdx,-0x1d8(%rbp)
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
  40553f:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  405546:	48 89 c7             	mov    %rax,%rdi
  405549:	e8 1d 38 00 00       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40554e:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
  405555:	48 8b b5 30 fe ff ff 	mov    -0x1d0(%rbp),%rsi
  40555c:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  405563:	48 8b 00             	mov    (%rax),%rax
  405566:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  40556c:	48 89 c7             	mov    %rax,%rdi
  40556f:	e8 51 41 00 00       	call   4096c5 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  405574:	90                   	nop
    __format::_Str_sink<char> __buf;
    std::vformat_to(__buf.out(), __fmt, __args);
    auto __out = __buf.view();
  405575:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40557c:	48 89 c7             	mov    %rax,%rdi
  40557f:	e8 c0 20 00 00       	call   407644 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>
  405584:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  40558b:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
  405592:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  405599:	48 89 c7             	mov    %rax,%rdi
  40559c:	e8 23 fe ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4055a1:	48 89 c3             	mov    %rax,%rbx
  4055a4:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4055ab:	48 89 c7             	mov    %rax,%rdi
  4055ae:	e8 ff fd ff ff       	call   4053b2 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  4055b3:	48 89 c7             	mov    %rax,%rdi
  4055b6:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4055bd:	48 89 c1             	mov    %rax,%rcx
  4055c0:	48 89 da             	mov    %rbx,%rdx
  4055c3:	be 01 00 00 00       	mov    $0x1,%esi
  4055c8:	e8 f3 ed ff ff       	call   4043c0 <fwrite@plt>
  4055cd:	48 89 c3             	mov    %rax,%rbx
  4055d0:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4055d7:	48 89 c7             	mov    %rax,%rdi
  4055da:	e8 e5 fd ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4055df:	48 39 c3             	cmp    %rax,%rbx
  4055e2:	0f 95 c0             	setne  %al
  4055e5:	84 c0                	test   %al,%al
  4055e7:	74 0a                	je     4055f3 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x211>
      __throw_system_error(EIO);
  4055e9:	bf 05 00 00 00       	mov    $0x5,%edi
  4055ee:	e8 7d eb ff ff       	call   404170 <_ZSt20__throw_system_errori@plt>
  }
  4055f3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4055fa:	48 89 c7             	mov    %rax,%rdi
  4055fd:	e8 90 fb ff ff       	call   405192 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  405602:	eb 1d                	jmp    405621 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x23f>
  405604:	48 89 c3             	mov    %rax,%rbx
  405607:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40560e:	48 89 c7             	mov    %rax,%rdi
  405611:	e8 7c fb ff ff       	call   405192 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  405616:	48 89 d8             	mov    %rbx,%rax
  405619:	48 89 c7             	mov    %rax,%rdi
  40561c:	e8 4f ed ff ff       	call   404370 <_Unwind_Resume@plt>
  405621:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405625:	c9                   	leave
  405626:	c3                   	ret

0000000000405627 <_ZSt14vprint_unicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:

  inline void
  vprint_unicode(FILE* __stream, string_view __fmt, format_args __args)
  {
  405627:	55                   	push   %rbp
  405628:	48 89 e5             	mov    %rsp,%rbp
  40562b:	48 83 ec 30          	sub    $0x30,%rsp
  40562f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405633:	48 89 f0             	mov    %rsi,%rax
  405636:	48 89 d6             	mov    %rdx,%rsi
  405639:	48 89 c0             	mov    %rax,%rax
  40563c:	ba 00 00 00 00       	mov    $0x0,%edx
  405641:	48 89 f2             	mov    %rsi,%rdx
  405644:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405648:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40564c:	48 89 c8             	mov    %rcx,%rax
  40564f:	4c 89 c1             	mov    %r8,%rcx
  405652:	48 89 c0             	mov    %rax,%rax
  405655:	ba 00 00 00 00       	mov    $0x0,%edx
  40565a:	48 89 ca             	mov    %rcx,%rdx
  40565d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  405661:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
#if !defined(_WIN32) || defined(__CYGWIN__)
    // For most targets we don't need to do anything special to write
    // Unicode to a terminal.
    std::vprint_nonunicode(__stream, __fmt, __args);
  405665:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  405669:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40566d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  405671:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405675:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405679:	49 89 f8             	mov    %rdi,%r8
  40567c:	48 89 c7             	mov    %rax,%rdi
  40567f:	e8 5e fd ff ff       	call   4053e2 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>

    // Otherwise just write the string to the file as vprint_nonunicode does.
    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
      __throw_system_error(EIO);
#endif
  }
  405684:	90                   	nop
  405685:	c9                   	leave
  405686:	c3                   	ret
  405687:	90                   	nop

0000000000405688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
  405688:	55                   	push   %rbp
  405689:	48 89 e5             	mov    %rsp,%rbp
  40568c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  405690:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  405694:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  405698:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40569c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4056a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4056a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4056a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4056ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4056b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4056b4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  4056b8:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  4056b9:	90                   	nop
	: allocator_type(__a), _M_p(__dat) { }
  4056ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4056be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4056c2:	48 89 10             	mov    %rdx,(%rax)
  4056c5:	90                   	nop
  4056c6:	5d                   	pop    %rbp
  4056c7:	c3                   	ret

00000000004056c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  4056c8:	55                   	push   %rbp
  4056c9:	48 89 e5             	mov    %rsp,%rbp
  4056cc:	53                   	push   %rbx
  4056cd:	48 83 ec 38          	sub    $0x38,%rsp
  4056d1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4056d5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4056d9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
  4056dd:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4056e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4056e5:	48 89 c7             	mov    %rax,%rdi
  4056e8:	e8 2b f2 ff ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4056ed:	48 89 c1             	mov    %rax,%rcx
  4056f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4056f4:	48 89 c2             	mov    %rax,%rdx
  4056f7:	48 89 ce             	mov    %rcx,%rsi
  4056fa:	48 89 df             	mov    %rbx,%rdi
  4056fd:	e8 86 ff ff ff       	call   405688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
  405702:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  405707:	75 0a                	jne    405713 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x4b>
	  std::__throw_logic_error(__N("basic_string: "
  405709:	bf 48 a1 41 00       	mov    $0x41a148,%edi
  40570e:	e8 6d ea ff ff       	call   404180 <_ZSt19__throw_logic_errorPKc@plt>
	const _CharT* __end = __s + traits_type::length(__s);
  405713:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  405717:	48 89 c7             	mov    %rax,%rdi
  40571a:	e8 04 f0 ff ff       	call   404723 <_ZNSt11char_traitsIcE6lengthEPKc>
  40571f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  405723:	48 01 d0             	add    %rdx,%rax
  405726:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
  40572a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40572e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  405732:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405736:	48 89 ce             	mov    %rcx,%rsi
  405739:	48 89 c7             	mov    %rax,%rdi
  40573c:	e8 13 20 00 00       	call   407754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
  405741:	eb 1a                	jmp    40575d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x95>
  405743:	48 89 c3             	mov    %rax,%rbx
  405746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40574a:	48 89 c7             	mov    %rax,%rdi
  40574d:	e8 80 f2 ff ff       	call   4049d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  405752:	48 89 d8             	mov    %rbx,%rax
  405755:	48 89 c7             	mov    %rax,%rdi
  405758:	e8 13 ec ff ff       	call   404370 <_Unwind_Resume@plt>
  40575d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405761:	c9                   	leave
  405762:	c3                   	ret
  405763:	90                   	nop

0000000000405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      [[__gnu__::__nonnull__]]
      constexpr
      basic_string_view(const _CharT* __str) noexcept
  405764:	55                   	push   %rbp
  405765:	48 89 e5             	mov    %rsp,%rbp
  405768:	48 83 ec 10          	sub    $0x10,%rsp
  40576c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405770:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
  405774:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405778:	48 89 c7             	mov    %rax,%rdi
  40577b:	e8 a3 ef ff ff       	call   404723 <_ZNSt11char_traitsIcE6lengthEPKc>
  405780:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405784:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
  405787:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40578b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40578f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  405793:	90                   	nop
  405794:	c9                   	leave
  405795:	c3                   	ret

0000000000405796 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
  405796:	55                   	push   %rbp
  405797:	48 89 e5             	mov    %rsp,%rbp
  40579a:	48 83 ec 20          	sub    $0x20,%rsp
  40579e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
  4057a2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4057a9:	00
      while (!eq(__p[__i], char_type()))
  4057aa:	eb 05                	jmp    4057b1 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
  4057ac:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
  4057b1:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  4057b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4057b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4057bd:	48 01 c2             	add    %rax,%rdx
  4057c0:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  4057c4:	48 89 c6             	mov    %rax,%rsi
  4057c7:	48 89 d7             	mov    %rdx,%rdi
  4057ca:	e8 0d 00 00 00       	call   4057dc <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
  4057cf:	83 f0 01             	xor    $0x1,%eax
  4057d2:	84 c0                	test   %al,%al
  4057d4:	75 d6                	jne    4057ac <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
  4057d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4057da:	c9                   	leave
  4057db:	c3                   	ret

00000000004057dc <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
  4057dc:	55                   	push   %rbp
  4057dd:	48 89 e5             	mov    %rsp,%rbp
  4057e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4057e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
  4057e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4057ec:	0f b6 10             	movzbl (%rax),%edx
  4057ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4057f3:	0f b6 00             	movzbl (%rax),%eax
  4057f6:	38 c2                	cmp    %al,%dl
  4057f8:	0f 94 c0             	sete   %al
  4057fb:	5d                   	pop    %rbp
  4057fc:	c3                   	ret
  4057fd:	90                   	nop

00000000004057fe <_ZNSt8__format8_ScannerIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>:
      _Scanner(basic_string_view<_CharT> __str, size_t __nargs = -1)
  4057fe:	55                   	push   %rbp
  4057ff:	48 89 e5             	mov    %rsp,%rbp
  405802:	48 83 ec 20          	sub    $0x20,%rsp
  405806:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40580a:	48 89 f0             	mov    %rsi,%rax
  40580d:	48 89 d6             	mov    %rdx,%rsi
  405810:	48 89 c0             	mov    %rax,%rax
  405813:	ba 00 00 00 00       	mov    $0x0,%edx
  405818:	48 89 f2             	mov    %rsi,%rdx
  40581b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40581f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405823:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
      : _M_pc(__str, __nargs)
  405827:	ba c0 cd 41 00       	mov    $0x41cdc0,%edx
  40582c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405830:	48 89 10             	mov    %rdx,(%rax)
  405833:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405837:	48 8d 78 08          	lea    0x8(%rax),%rdi
  40583b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40583f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405847:	48 89 d6             	mov    %rdx,%rsi
  40584a:	48 89 c2             	mov    %rax,%rdx
  40584d:	e8 04 00 00 00       	call   405856 <_ZNSt26basic_format_parse_contextIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>
      { }
  405852:	90                   	nop
  405853:	c9                   	leave
  405854:	c3                   	ret
  405855:	90                   	nop

0000000000405856 <_ZNSt26basic_format_parse_contextIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>:
      basic_format_parse_context(basic_string_view<_CharT> __fmt,
  405856:	55                   	push   %rbp
  405857:	48 89 e5             	mov    %rsp,%rbp
  40585a:	48 83 ec 20          	sub    $0x20,%rsp
  40585e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405862:	48 89 f0             	mov    %rsi,%rax
  405865:	48 89 d6             	mov    %rdx,%rsi
  405868:	48 89 c0             	mov    %rax,%rax
  40586b:	ba 00 00 00 00       	mov    $0x0,%edx
  405870:	48 89 f2             	mov    %rsi,%rdx
  405873:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405877:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40587b:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
  40587f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405883:	48 89 c7             	mov    %rax,%rdi
  405886:	e8 41 00 00 00       	call   4058cc <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
  40588b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40588f:	48 89 02             	mov    %rax,(%rdx)
  405892:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405896:	48 89 c7             	mov    %rax,%rdi
  405899:	e8 40 00 00 00       	call   4058de <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>
  40589e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4058a2:	48 89 42 08          	mov    %rax,0x8(%rdx)
  4058a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058aa:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  4058b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058b5:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  4058bc:	00
  4058bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058c1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4058c5:	48 89 50 20          	mov    %rdx,0x20(%rax)
      { }
  4058c9:	90                   	nop
  4058ca:	c9                   	leave
  4058cb:	c3                   	ret

00000000004058cc <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>:

      // [string.view.iterators], iterator support

      [[nodiscard]]
      constexpr const_iterator
      begin() const noexcept
  4058cc:	55                   	push   %rbp
  4058cd:	48 89 e5             	mov    %rsp,%rbp
  4058d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
  4058d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058d8:	48 8b 40 08          	mov    0x8(%rax),%rax
  4058dc:	5d                   	pop    %rbp
  4058dd:	c3                   	ret

00000000004058de <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>:

      [[nodiscard]]
      constexpr const_iterator
      end() const noexcept
  4058de:	55                   	push   %rbp
  4058df:	48 89 e5             	mov    %rsp,%rbp
  4058e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str + this->_M_len; }
  4058e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058ea:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4058ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4058f2:	48 8b 00             	mov    (%rax),%rax
  4058f5:	48 01 d0             	add    %rdx,%rax
  4058f8:	5d                   	pop    %rbp
  4058f9:	c3                   	ret

00000000004058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:

      // [string.view.capacity], capacity

      [[nodiscard]]
      constexpr size_type
      size() const noexcept
  4058fa:	55                   	push   %rbp
  4058fb:	48 89 e5             	mov    %rsp,%rbp
  4058fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
  405902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405906:	48 8b 00             	mov    (%rax),%rax
  405909:	5d                   	pop    %rbp
  40590a:	c3                   	ret
  40590b:	90                   	nop

000000000040590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>:

      // [string.view.access], element access

      [[nodiscard]]
      constexpr const_reference
      operator[](size_type __pos) const noexcept
  40590c:	55                   	push   %rbp
  40590d:	48 89 e5             	mov    %rsp,%rbp
  405910:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405914:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405918:	b8 00 00 00 00       	mov    $0x0,%eax
      {
	__glibcxx_assert(__pos < this->_M_len);
  40591d:	84 c0                	test   %al,%al
  40591f:	74 14                	je     405935 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm+0x29>
  405921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405925:	48 8b 00             	mov    (%rax),%rax
  405928:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40592c:	0f 93 c0             	setae  %al
  40592f:	0f b6 c0             	movzbl %al,%eax
  405932:	48 85 c0             	test   %rax,%rax
	return *(this->_M_str + __pos);
  405935:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405939:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40593d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405941:	48 01 d0             	add    %rdx,%rax
      }
  405944:	5d                   	pop    %rbp
  405945:	c3                   	ret

0000000000405946 <_ZNSt8__format8_ScannerIcE7_M_scanEv>:
      _M_scan()
  405946:	55                   	push   %rbp
  405947:	48 89 e5             	mov    %rsp,%rbp
  40594a:	53                   	push   %rbx
  40594b:	48 83 ec 68          	sub    $0x68,%rsp
  40594f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
	basic_string_view<_CharT> __fmt = _M_fmt_str();
  405953:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405957:	48 89 c7             	mov    %rax,%rdi
  40595a:	e8 dd 03 00 00       	call   405d3c <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  40595f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405963:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
  405967:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40596b:	48 89 c7             	mov    %rax,%rdi
  40596e:	e8 87 ff ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  405973:	48 83 f8 02          	cmp    $0x2,%rax
  405977:	75 37                	jne    4059b0 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405979:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40597d:	be 00 00 00 00       	mov    $0x0,%esi
  405982:	48 89 c7             	mov    %rax,%rdi
  405985:	e8 82 ff ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40598a:	0f b6 00             	movzbl (%rax),%eax
  40598d:	3c 7b                	cmp    $0x7b,%al
  40598f:	75 1f                	jne    4059b0 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405991:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405995:	be 01 00 00 00       	mov    $0x1,%esi
  40599a:	48 89 c7             	mov    %rax,%rdi
  40599d:	e8 6a ff ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  4059a2:	0f b6 00             	movzbl (%rax),%eax
  4059a5:	3c 7d                	cmp    $0x7d,%al
  4059a7:	75 07                	jne    4059b0 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  4059a9:	b8 01 00 00 00       	mov    $0x1,%eax
  4059ae:	eb 05                	jmp    4059b5 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6f>
  4059b0:	b8 00 00 00 00       	mov    $0x0,%eax
  4059b5:	84 c0                	test   %al,%al
  4059b7:	74 55                	je     405a0e <_ZNSt8__format8_ScannerIcE7_M_scanEv+0xc8>
	    _M_pc.advance_to(begin() + 1);
  4059b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4059bd:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4059c1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4059c5:	48 89 c7             	mov    %rax,%rdi
  4059c8:	e8 b7 03 00 00       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  4059cd:	48 83 c0 01          	add    $0x1,%rax
  4059d1:	48 89 c6             	mov    %rax,%rsi
  4059d4:	48 89 df             	mov    %rbx,%rdi
  4059d7:	e8 6e 04 00 00       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	    _M_format_arg(_M_pc.next_arg_id());
  4059dc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4059e0:	48 8b 00             	mov    (%rax),%rax
  4059e3:	48 83 c0 08          	add    $0x8,%rax
  4059e7:	48 8b 18             	mov    (%rax),%rbx
  4059ea:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4059ee:	48 83 c0 08          	add    $0x8,%rax
  4059f2:	48 89 c7             	mov    %rax,%rdi
  4059f5:	e8 6a 04 00 00       	call   405e64 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  4059fa:	48 89 c2             	mov    %rax,%rdx
  4059fd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405a01:	48 89 d6             	mov    %rdx,%rsi
  405a04:	48 89 c7             	mov    %rax,%rdi
  405a07:	ff d3                	call   *%rbx
	    return;
  405a09:	e9 28 03 00 00       	jmp    405d36 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3f0>
	size_t __lbr = __fmt.find('{');
  405a0e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405a12:	ba 00 00 00 00       	mov    $0x0,%edx
  405a17:	be 7b 00 00 00       	mov    $0x7b,%esi
  405a1c:	48 89 c7             	mov    %rax,%rdi
  405a1f:	e8 a4 1e 00 00       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405a24:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t __rbr = __fmt.find('}');
  405a28:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405a2c:	ba 00 00 00 00       	mov    $0x0,%edx
  405a31:	be 7d 00 00 00       	mov    $0x7d,%esi
  405a36:	48 89 c7             	mov    %rax,%rdi
  405a39:	e8 8a 1e 00 00       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405a3e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (__fmt.size())
  405a42:	e9 d5 02 00 00       	jmp    405d1c <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
	    auto __cmp = __lbr <=> __rbr;
  405a47:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405a4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405a4f:	48 39 c2             	cmp    %rax,%rdx
  405a52:	74 11                	je     405a65 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x11f>
  405a54:	48 39 c2             	cmp    %rax,%rdx
  405a57:	73 06                	jae    405a5f <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x119>
  405a59:	c6 45 af ff          	movb   $0xff,-0x51(%rbp)
  405a5d:	eb 0a                	jmp    405a69 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x123>
  405a5f:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  405a63:	eb 04                	jmp    405a69 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x123>
  405a65:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
	    if (__cmp == 0)
  405a69:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
  405a6d:	89 c7                	mov    %eax,%edi
  405a6f:	e8 d2 ea ff ff       	call   404546 <_ZSteqSt15strong_orderingNSt9__cmp_cat8__unspecE>
  405a74:	84 c0                	test   %al,%al
  405a76:	74 49                	je     405ac1 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x17b>
		_M_on_chars(end());
  405a78:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405a7c:	48 8b 00             	mov    (%rax),%rax
  405a7f:	48 8b 18             	mov    (%rax),%rbx
  405a82:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405a86:	48 89 c7             	mov    %rax,%rdi
  405a89:	e8 26 03 00 00       	call   405db4 <_ZNKSt8__format8_ScannerIcE3endEv>
  405a8e:	48 89 c2             	mov    %rax,%rdx
  405a91:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405a95:	48 89 d6             	mov    %rdx,%rsi
  405a98:	48 89 c7             	mov    %rax,%rdi
  405a9b:	ff d3                	call   *%rbx
		_M_pc.advance_to(end());
  405a9d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405aa1:	48 8d 58 08          	lea    0x8(%rax),%rbx
  405aa5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405aa9:	48 89 c7             	mov    %rax,%rdi
  405aac:	e8 03 03 00 00       	call   405db4 <_ZNKSt8__format8_ScannerIcE3endEv>
  405ab1:	48 89 c6             	mov    %rax,%rsi
  405ab4:	48 89 df             	mov    %rbx,%rdi
  405ab7:	e8 8e 03 00 00       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  405abc:	e9 75 02 00 00       	jmp    405d36 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3f0>
	    else if (__cmp < 0)
  405ac1:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
  405ac5:	89 c7                	mov    %eax,%edi
  405ac7:	e8 8d ea ff ff       	call   404559 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
  405acc:	84 c0                	test   %al,%al
  405ace:	0f 84 71 01 00 00    	je     405c45 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x2ff>
		if (__lbr + 1 == __fmt.size()
  405ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405ad8:	48 8d 58 01          	lea    0x1(%rax),%rbx
  405adc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405ae0:	48 89 c7             	mov    %rax,%rdi
  405ae3:	e8 12 fe ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
  405ae8:	48 39 c3             	cmp    %rax,%rbx
  405aeb:	74 25                	je     405b12 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1cc>
  405aed:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  405af2:	75 25                	jne    405b19 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d3>
  405af4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405af8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  405afc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405b00:	48 89 d6             	mov    %rdx,%rsi
  405b03:	48 89 c7             	mov    %rax,%rdi
  405b06:	e8 01 fe ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405b0b:	0f b6 00             	movzbl (%rax),%eax
  405b0e:	3c 7b                	cmp    $0x7b,%al
  405b10:	74 07                	je     405b19 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d3>
  405b12:	b8 01 00 00 00       	mov    $0x1,%eax
  405b17:	eb 05                	jmp    405b1e <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d8>
  405b19:	b8 00 00 00 00       	mov    $0x0,%eax
		if (__lbr + 1 == __fmt.size()
  405b1e:	84 c0                	test   %al,%al
  405b20:	74 05                	je     405b27 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1e1>
		  __format::__unmatched_left_brace_in_format_string();
  405b22:	e8 55 f5 ff ff       	call   40507c <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
		const bool __is_escape = __fmt[__lbr + 1] == '{';
  405b27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405b2b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  405b2f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405b33:	48 89 d6             	mov    %rdx,%rsi
  405b36:	48 89 c7             	mov    %rax,%rdi
  405b39:	e8 ce fd ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405b3e:	0f b6 00             	movzbl (%rax),%eax
  405b41:	3c 7b                	cmp    $0x7b,%al
  405b43:	0f 94 c0             	sete   %al
  405b46:	88 45 d7             	mov    %al,-0x29(%rbp)
		iterator __last = begin() + __lbr + int(__is_escape);
  405b49:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405b4d:	48 89 c7             	mov    %rax,%rdi
  405b50:	e8 2f 02 00 00       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  405b55:	0f b6 4d d7          	movzbl -0x29(%rbp),%ecx
  405b59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405b5d:	48 01 ca             	add    %rcx,%rdx
  405b60:	48 01 d0             	add    %rdx,%rax
  405b63:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		_M_on_chars(__last);
  405b67:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405b6b:	48 8b 00             	mov    (%rax),%rax
  405b6e:	48 8b 08             	mov    (%rax),%rcx
  405b71:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405b75:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405b79:	48 89 d6             	mov    %rdx,%rsi
  405b7c:	48 89 c7             	mov    %rax,%rdi
  405b7f:	ff d1                	call   *%rcx
		_M_pc.advance_to(__last + 1);
  405b81:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405b85:	48 83 c0 08          	add    $0x8,%rax
  405b89:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405b8d:	48 83 c2 01          	add    $0x1,%rdx
  405b91:	48 89 d6             	mov    %rdx,%rsi
  405b94:	48 89 c7             	mov    %rax,%rdi
  405b97:	e8 ae 02 00 00       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
		__fmt = _M_fmt_str();
  405b9c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405ba0:	48 89 c7             	mov    %rax,%rdi
  405ba3:	e8 94 01 00 00       	call   405d3c <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405ba8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405bac:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		if (__is_escape)
  405bb0:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  405bb4:	74 36                	je     405bec <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x2a6>
		    if (__rbr != __fmt.npos)
  405bb6:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  405bbb:	74 10                	je     405bcd <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x287>
		      __rbr -= __lbr + 2;
  405bbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405bc1:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  405bc5:	48 83 e8 02          	sub    $0x2,%rax
  405bc9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    __lbr = __fmt.find('{');
  405bcd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405bd1:	ba 00 00 00 00       	mov    $0x0,%edx
  405bd6:	be 7b 00 00 00       	mov    $0x7b,%esi
  405bdb:	48 89 c7             	mov    %rax,%rdi
  405bde:	e8 e5 1c 00 00       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405be3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  405be7:	e9 30 01 00 00       	jmp    405d1c <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
		    _M_on_replacement_field();
  405bec:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405bf0:	48 89 c7             	mov    %rax,%rdi
  405bf3:	e8 06 1e 00 00       	call   4079fe <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv>
		    __fmt = _M_fmt_str();
  405bf8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405bfc:	48 89 c7             	mov    %rax,%rdi
  405bff:	e8 38 01 00 00       	call   405d3c <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405c04:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405c08:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		    __lbr = __fmt.find('{');
  405c0c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405c10:	ba 00 00 00 00       	mov    $0x0,%edx
  405c15:	be 7b 00 00 00       	mov    $0x7b,%esi
  405c1a:	48 89 c7             	mov    %rax,%rdi
  405c1d:	e8 a6 1c 00 00       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405c22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    __rbr = __fmt.find('}');
  405c26:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405c2a:	ba 00 00 00 00       	mov    $0x0,%edx
  405c2f:	be 7d 00 00 00       	mov    $0x7d,%esi
  405c34:	48 89 c7             	mov    %rax,%rdi
  405c37:	e8 8c 1c 00 00       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405c3c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405c40:	e9 d7 00 00 00       	jmp    405d1c <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
		if (++__rbr == __fmt.size() || __fmt[__rbr] != '}')
  405c45:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  405c4a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405c4e:	48 89 c7             	mov    %rax,%rdi
  405c51:	e8 a4 fc ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  405c56:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  405c5a:	74 1a                	je     405c76 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x330>
  405c5c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405c60:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405c64:	48 89 d6             	mov    %rdx,%rsi
  405c67:	48 89 c7             	mov    %rax,%rdi
  405c6a:	e8 9d fc ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405c6f:	0f b6 00             	movzbl (%rax),%eax
  405c72:	3c 7d                	cmp    $0x7d,%al
  405c74:	74 07                	je     405c7d <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x337>
  405c76:	b8 01 00 00 00       	mov    $0x1,%eax
  405c7b:	eb 05                	jmp    405c82 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x33c>
  405c7d:	b8 00 00 00 00       	mov    $0x0,%eax
  405c82:	84 c0                	test   %al,%al
  405c84:	74 05                	je     405c8b <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x345>
		  __format::__unmatched_right_brace_in_format_string();
  405c86:	e8 ff f3 ff ff       	call   40508a <_ZNSt8__format40__unmatched_right_brace_in_format_stringEv>
		iterator __last = begin() + __rbr;
  405c8b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405c8f:	48 89 c7             	mov    %rax,%rdi
  405c92:	e8 ed 00 00 00       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  405c97:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405c9b:	48 01 d0             	add    %rdx,%rax
  405c9e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		_M_on_chars(__last);
  405ca2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405ca6:	48 8b 00             	mov    (%rax),%rax
  405ca9:	48 8b 08             	mov    (%rax),%rcx
  405cac:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405cb0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405cb4:	48 89 d6             	mov    %rdx,%rsi
  405cb7:	48 89 c7             	mov    %rax,%rdi
  405cba:	ff d1                	call   *%rcx
		_M_pc.advance_to(__last + 1);
  405cbc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405cc0:	48 83 c0 08          	add    $0x8,%rax
  405cc4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  405cc8:	48 83 c2 01          	add    $0x1,%rdx
  405ccc:	48 89 d6             	mov    %rdx,%rsi
  405ccf:	48 89 c7             	mov    %rax,%rdi
  405cd2:	e8 73 01 00 00       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
		__fmt = _M_fmt_str();
  405cd7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405cdb:	48 89 c7             	mov    %rax,%rdi
  405cde:	e8 59 00 00 00       	call   405d3c <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405ce3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405ce7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		if (__lbr != __fmt.npos)
  405ceb:	48 83 7d e8 ff       	cmpq   $0xffffffffffffffff,-0x18(%rbp)
  405cf0:	74 10                	je     405d02 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3bc>
		  __lbr -= __rbr + 1;
  405cf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405cf6:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  405cfa:	48 83 e8 01          	sub    $0x1,%rax
  405cfe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		__rbr = __fmt.find('}');
  405d02:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405d06:	ba 00 00 00 00       	mov    $0x0,%edx
  405d0b:	be 7d 00 00 00       	mov    $0x7d,%esi
  405d10:	48 89 c7             	mov    %rax,%rdi
  405d13:	e8 b0 1b 00 00       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405d18:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (__fmt.size())
  405d1c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405d20:	48 89 c7             	mov    %rax,%rdi
  405d23:	e8 d2 fb ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  405d28:	48 85 c0             	test   %rax,%rax
  405d2b:	0f 95 c0             	setne  %al
  405d2e:	84 c0                	test   %al,%al
  405d30:	0f 85 11 fd ff ff    	jne    405a47 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x101>
      }
  405d36:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405d3a:	c9                   	leave
  405d3b:	c3                   	ret

0000000000405d3c <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>:
      _M_fmt_str() const noexcept
  405d3c:	55                   	push   %rbp
  405d3d:	48 89 e5             	mov    %rsp,%rbp
  405d40:	53                   	push   %rbx
  405d41:	48 83 ec 28          	sub    $0x28,%rsp
  405d45:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return {begin(), end()}; }
  405d49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405d4d:	48 89 c7             	mov    %rax,%rdi
  405d50:	e8 2f 00 00 00       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  405d55:	48 89 c3             	mov    %rax,%rbx
  405d58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405d5c:	48 89 c7             	mov    %rax,%rdi
  405d5f:	e8 50 00 00 00       	call   405db4 <_ZNKSt8__format8_ScannerIcE3endEv>
  405d64:	48 89 c2             	mov    %rax,%rdx
  405d67:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405d6b:	48 89 de             	mov    %rbx,%rsi
  405d6e:	48 89 c7             	mov    %rax,%rdi
  405d71:	e8 6e 00 00 00       	call   405de4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
  405d76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405d7a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405d7e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405d82:	c9                   	leave
  405d83:	c3                   	ret

0000000000405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>:
      constexpr iterator begin() const noexcept { return _M_pc.begin(); }
  405d84:	55                   	push   %rbp
  405d85:	48 89 e5             	mov    %rsp,%rbp
  405d88:	48 83 ec 10          	sub    $0x10,%rsp
  405d8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405d94:	48 83 c0 08          	add    $0x8,%rax
  405d98:	48 89 c7             	mov    %rax,%rdi
  405d9b:	e8 02 00 00 00       	call   405da2 <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  405da0:	c9                   	leave
  405da1:	c3                   	ret

0000000000405da2 <_ZNKSt26basic_format_parse_contextIcE5beginEv>:
      constexpr const_iterator begin() const noexcept { return _M_begin; }
  405da2:	55                   	push   %rbp
  405da3:	48 89 e5             	mov    %rsp,%rbp
  405da6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405dae:	48 8b 00             	mov    (%rax),%rax
  405db1:	5d                   	pop    %rbp
  405db2:	c3                   	ret
  405db3:	90                   	nop

0000000000405db4 <_ZNKSt8__format8_ScannerIcE3endEv>:
      constexpr iterator end() const noexcept { return _M_pc.end(); }
  405db4:	55                   	push   %rbp
  405db5:	48 89 e5             	mov    %rsp,%rbp
  405db8:	48 83 ec 10          	sub    $0x10,%rsp
  405dbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405dc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405dc4:	48 83 c0 08          	add    $0x8,%rax
  405dc8:	48 89 c7             	mov    %rax,%rdi
  405dcb:	e8 02 00 00 00       	call   405dd2 <_ZNKSt26basic_format_parse_contextIcE3endEv>
  405dd0:	c9                   	leave
  405dd1:	c3                   	ret

0000000000405dd2 <_ZNKSt26basic_format_parse_contextIcE3endEv>:
      constexpr const_iterator end() const noexcept { return _M_end; }
  405dd2:	55                   	push   %rbp
  405dd3:	48 89 e5             	mov    %rsp,%rbp
  405dd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405dde:	48 8b 40 08          	mov    0x8(%rax),%rax
  405de2:	5d                   	pop    %rbp
  405de3:	c3                   	ret

0000000000405de4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>:
	basic_string_view(_It __first, _End __last)
  405de4:	55                   	push   %rbp
  405de5:	48 89 e5             	mov    %rsp,%rbp
  405de8:	48 83 ec 20          	sub    $0x20,%rsp
  405dec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405df0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405df4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _M_len(__last - __first), _M_str(std::to_address(__first))
  405df8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405dfc:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  405e00:	48 89 c2             	mov    %rax,%rdx
  405e03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405e07:	48 89 10             	mov    %rdx,(%rax)
  405e0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405e0e:	48 89 c7             	mov    %rax,%rdi
  405e11:	e8 0b 00 00 00       	call   405e21 <_ZSt10to_addressIKcEPT_S2_>
  405e16:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405e1a:	48 89 42 08          	mov    %rax,0x8(%rdx)
	{ }
  405e1e:	90                   	nop
  405e1f:	c9                   	leave
  405e20:	c3                   	ret

0000000000405e21 <_ZSt10to_addressIKcEPT_S2_>:
   * @return @c __ptr
   * @ingroup pointer_abstractions
  */
  template<typename _Tp>
    constexpr _Tp*
    to_address(_Tp* __ptr) noexcept
  405e21:	55                   	push   %rbp
  405e22:	48 89 e5             	mov    %rsp,%rbp
  405e25:	48 83 ec 10          	sub    $0x10,%rsp
  405e29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__to_address(__ptr); }
  405e2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405e31:	48 89 c7             	mov    %rax,%rdi
  405e34:	e8 02 00 00 00       	call   405e3b <_ZSt12__to_addressIKcEPT_S2_>
  405e39:	c9                   	leave
  405e3a:	c3                   	ret

0000000000405e3b <_ZSt12__to_addressIKcEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
  405e3b:	55                   	push   %rbp
  405e3c:	48 89 e5             	mov    %rsp,%rbp
  405e3f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __ptr;
  405e43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  405e47:	5d                   	pop    %rbp
  405e48:	c3                   	ret
  405e49:	90                   	nop

0000000000405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>:
      advance_to(const_iterator __it) noexcept
  405e4a:	55                   	push   %rbp
  405e4b:	48 89 e5             	mov    %rsp,%rbp
  405e4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405e52:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_begin = __it; }
  405e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405e5a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405e5e:	48 89 10             	mov    %rdx,(%rax)
  405e61:	90                   	nop
  405e62:	5d                   	pop    %rbp
  405e63:	c3                   	ret

0000000000405e64 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>:
      next_arg_id()
  405e64:	55                   	push   %rbp
  405e65:	48 89 e5             	mov    %rsp,%rbp
  405e68:	48 83 ec 10          	sub    $0x10,%rsp
  405e6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (_M_indexing == _Manual)
  405e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405e74:	8b 40 10             	mov    0x10(%rax),%eax
  405e77:	83 f8 01             	cmp    $0x1,%eax
  405e7a:	75 05                	jne    405e81 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x1d>
	  __format::__conflicting_indexing_in_format_string();
  405e7c:	e8 17 f2 ff ff       	call   405098 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>
	_M_indexing = _Auto;
  405e81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405e85:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%rax)
	if (std::is_constant_evaluated())
  405e8c:	e8 aa e6 ff ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  405e91:	84 c0                	test   %al,%al
  405e93:	74 1a                	je     405eaf <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x4b>
	  if (_M_next_arg_id == _M_num_args)
  405e95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405e99:	48 8b 50 18          	mov    0x18(%rax),%rdx
  405e9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ea1:	48 8b 40 20          	mov    0x20(%rax),%rax
  405ea5:	48 39 c2             	cmp    %rax,%rdx
  405ea8:	75 05                	jne    405eaf <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x4b>
	    __format::__invalid_arg_id_in_format_string();
  405eaa:	e8 f7 f1 ff ff       	call   4050a6 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
	return _M_next_arg_id++;
  405eaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405eb3:	48 8b 40 18          	mov    0x18(%rax),%rax
  405eb7:	48 8d 48 01          	lea    0x1(%rax),%rcx
  405ebb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405ebf:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
      }
  405ec3:	c9                   	leave
  405ec4:	c3                   	ret
  405ec5:	90                   	nop

0000000000405ec6 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  405ec6:	55                   	push   %rbp
  405ec7:	48 89 e5             	mov    %rsp,%rbp
  405eca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  405ece:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ed2:	48 8b 50 08          	mov    0x8(%rax),%rdx
  405ed6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405eda:	48 8b 00             	mov    (%rax),%rax
  405edd:	48 8b 0a             	mov    (%rdx),%rcx
  405ee0:	48 89 08             	mov    %rcx,(%rax)
  405ee3:	8b 52 08             	mov    0x8(%rdx),%edx
  405ee6:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  405ee9:	90                   	nop
  405eea:	5d                   	pop    %rbp
  405eeb:	c3                   	ret

0000000000405eec <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  405eec:	55                   	push   %rbp
  405eed:	48 89 e5             	mov    %rsp,%rbp
  405ef0:	48 83 ec 10          	sub    $0x10,%rsp
  405ef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  405ef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405efc:	48 8b 00             	mov    (%rax),%rax
  405eff:	48 8b 10             	mov    (%rax),%rdx
  405f02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405f06:	48 8b 40 08          	mov    0x8(%rax),%rax
  405f0a:	48 8b 00             	mov    (%rax),%rax
  405f0d:	48 39 c2             	cmp    %rax,%rdx
  405f10:	74 11                	je     405f23 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  405f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405f16:	48 8b 00             	mov    (%rax),%rax
  405f19:	48 8b 00             	mov    (%rax),%rax
  405f1c:	0f b6 00             	movzbl (%rax),%eax
  405f1f:	3c 7d                	cmp    $0x7d,%al
  405f21:	75 17                	jne    405f3a <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  405f23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405f27:	48 8b 40 10          	mov    0x10(%rax),%rax
  405f2b:	48 89 c7             	mov    %rax,%rdi
  405f2e:	e8 93 ff ff ff       	call   405ec6 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  405f33:	b8 01 00 00 00       	mov    $0x1,%eax
  405f38:	eb 05                	jmp    405f3f <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  405f3a:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  405f3f:	c9                   	leave
  405f40:	c3                   	ret
  405f41:	90                   	nop

0000000000405f42 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  405f42:	55                   	push   %rbp
  405f43:	48 89 e5             	mov    %rsp,%rbp
  405f46:	48 83 ec 60          	sub    $0x60,%rsp
  405f4a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  405f4e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	auto __first = __pc.begin();
  405f52:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  405f56:	48 89 c7             	mov    %rax,%rdi
  405f59:	e8 44 fe ff ff       	call   405da2 <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  405f5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const auto __last = __pc.end();
  405f62:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  405f66:	48 89 c7             	mov    %rax,%rdi
  405f69:	e8 64 fe ff ff       	call   405dd2 <_ZNKSt26basic_format_parse_contextIcE3endEv>
  405f6e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	_Spec<_CharT> __spec{};
  405f72:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  405f79:	00
  405f7a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  405f81:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	auto __finalize = [this, &__spec] {
  405f88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  405f8c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  405f90:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  405f94:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  405f98:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  405f9c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405fa0:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  405fa4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405fa8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  405fac:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  405fb0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405fb4:	48 89 c7             	mov    %rax,%rdi
  405fb7:	e8 30 ff ff ff       	call   405eec <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  405fbc:	84 c0                	test   %al,%al
  405fbe:	74 09                	je     405fc9 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  405fc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405fc4:	e9 ca 00 00 00       	jmp    406093 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  405fc9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405fcd:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  405fd1:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  405fd5:	48 89 ce             	mov    %rcx,%rsi
  405fd8:	48 89 c7             	mov    %rax,%rdi
  405fdb:	e8 52 1d 00 00       	call   407d32 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  405fe0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  405fe4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405fe8:	48 89 c7             	mov    %rax,%rdi
  405feb:	e8 fc fe ff ff       	call   405eec <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  405ff0:	84 c0                	test   %al,%al
  405ff2:	74 09                	je     405ffd <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0xbb>
	  return __first;
  405ff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ff8:	e9 96 00 00 00       	jmp    406093 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_width(__first, __last, __pc);
  405ffd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406001:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  406005:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  406009:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40600d:	48 89 c7             	mov    %rax,%rdi
  406010:	e8 af 1e 00 00       	call   407ec4 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  406015:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  406019:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40601d:	48 89 c7             	mov    %rax,%rdi
  406020:	e8 c7 fe ff ff       	call   405eec <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  406025:	84 c0                	test   %al,%al
  406027:	74 06                	je     40602f <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0xed>
	  return __first;
  406029:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40602d:	eb 64                	jmp    406093 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_precision(__first, __last, __pc);
  40602f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  406033:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  406037:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40603b:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40603f:	48 89 c7             	mov    %rax,%rdi
  406042:	e8 1b 1f 00 00       	call   407f62 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>
  406047:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  40604b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40604f:	48 89 c7             	mov    %rax,%rdi
  406052:	e8 95 fe ff ff       	call   405eec <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  406057:	84 c0                	test   %al,%al
  406059:	74 06                	je     406061 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x11f>
	  return __first;
  40605b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40605f:	eb 32                	jmp    406093 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	if (*__first == 's')
  406061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406065:	0f b6 00             	movzbl (%rax),%eax
  406068:	3c 73                	cmp    $0x73,%al
  40606a:	75 0c                	jne    406078 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x136>
	  ++__first;
  40606c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406070:	48 83 c0 01          	add    $0x1,%rax
  406074:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  406078:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40607c:	48 89 c7             	mov    %rax,%rdi
  40607f:	e8 68 fe ff ff       	call   405eec <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  406084:	84 c0                	test   %al,%al
  406086:	74 06                	je     40608e <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x14c>
	  return __first;
  406088:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40608c:	eb 05                	jmp    406093 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__format::__failed_to_parse_format_spec();
  40608e:	e8 21 f0 ff ff       	call   4050b4 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  406093:	c9                   	leave
  406094:	c3                   	ret

0000000000406095 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406095:	55                   	push   %rbp
  406096:	48 89 e5             	mov    %rsp,%rbp
  406099:	48 83 ec 30          	sub    $0x30,%rsp
  40609d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4060a1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4060a5:	89 d0                	mov    %edx,%eax
  4060a7:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  4060aa:	88 45 dc             	mov    %al,-0x24(%rbp)
  4060ad:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  4060b2:	84 c0                	test   %al,%al
  4060b4:	74 30                	je     4060e6 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x51>
  4060b6:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
  4060ba:	0f 9e c0             	setle  %al
  4060bd:	0f b6 c0             	movzbl %al,%eax
  4060c0:	48 85 c0             	test   %rax,%rax
  4060c3:	75 0f                	jne    4060d4 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x3f>
  4060c5:	83 7d d8 24          	cmpl   $0x24,-0x28(%rbp)
  4060c9:	0f 9f c0             	setg   %al
  4060cc:	0f b6 c0             	movzbl %al,%eax
  4060cf:	48 85 c0             	test   %rax,%rax
  4060d2:	74 07                	je     4060db <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x46>
  4060d4:	b8 01 00 00 00       	mov    $0x1,%eax
  4060d9:	eb 05                	jmp    4060e0 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x4b>
  4060db:	b8 00 00 00 00       	mov    $0x0,%eax
  4060e0:	0f b6 c0             	movzbl %al,%eax
  4060e3:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  4060e6:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  4060ea:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__first == __last) [[__unlikely__]]
  4060ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4060f1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4060f5:	75 20                	jne    406117 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  4060f7:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  4060fb:	4c 89 ca             	mov    %r9,%rdx
  4060fe:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406105:	ff ff ff
  406108:	48 21 d0             	and    %rdx,%rax
  40610b:	48 83 c8 4b          	or     $0x4b,%rax
  40610f:	49 89 c1             	mov    %rax,%r9
  406112:	e9 f3 00 00 00       	jmp    40620a <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
      if (__value == 0)
  406117:	80 7d dc 00          	cmpb   $0x0,-0x24(%rbp)
  40611b:	75 2a                	jne    406147 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xb2>
	  *__first = '0';
  40611d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406121:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  406124:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406128:	48 83 c0 01          	add    $0x1,%rax
  40612c:	49 89 c0             	mov    %rax,%r8
  40612f:	4c 89 ca             	mov    %r9,%rdx
  406132:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406139:	ff ff ff
  40613c:	48 21 d0             	and    %rdx,%rax
  40613f:	49 89 c1             	mov    %rax,%r9
  406142:	e9 c3 00 00 00       	jmp    40620a <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
      switch (__base)
  406147:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  40614b:	74 28                	je     406175 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xe0>
  40614d:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406151:	0f 8f 96 00 00 00    	jg     4061ed <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
  406157:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  40615b:	74 36                	je     406193 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xfe>
  40615d:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406161:	0f 8f 86 00 00 00    	jg     4061ed <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
  406167:	83 7d d8 02          	cmpl   $0x2,-0x28(%rbp)
  40616b:	74 62                	je     4061cf <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x13a>
  40616d:	83 7d d8 08          	cmpl   $0x8,-0x28(%rbp)
  406171:	74 3e                	je     4061b1 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x11c>
  406173:	eb 78                	jmp    4061ed <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  406175:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406178:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40617c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406180:	48 89 ce             	mov    %rcx,%rsi
  406183:	48 89 c7             	mov    %rax,%rdi
  406186:	e8 a6 1e 00 00       	call   408031 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>
  40618b:	49 89 c0             	mov    %rax,%r8
  40618e:	49 89 d1             	mov    %rdx,%r9
  406191:	eb 77                	jmp    40620a <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  406193:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406196:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40619a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40619e:	48 89 ce             	mov    %rcx,%rsi
  4061a1:	48 89 c7             	mov    %rax,%rdi
  4061a4:	e8 c3 1f 00 00       	call   40816c <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>
  4061a9:	49 89 c0             	mov    %rax,%r8
  4061ac:	49 89 d1             	mov    %rdx,%r9
  4061af:	eb 59                	jmp    40620a <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  4061b1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4061b4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4061b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4061bc:	48 89 ce             	mov    %rcx,%rsi
  4061bf:	48 89 c7             	mov    %rax,%rdi
  4061c2:	e8 32 20 00 00       	call   4081f9 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>
  4061c7:	49 89 c0             	mov    %rax,%r8
  4061ca:	49 89 d1             	mov    %rdx,%r9
  4061cd:	eb 3b                	jmp    40620a <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  4061cf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4061d2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4061d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4061da:	48 89 ce             	mov    %rcx,%rsi
  4061dd:	48 89 c7             	mov    %rax,%rdi
  4061e0:	e8 41 21 00 00       	call   408326 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>
  4061e5:	49 89 c0             	mov    %rax,%r8
  4061e8:	49 89 d1             	mov    %rdx,%r9
  4061eb:	eb 1d                	jmp    40620a <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  4061ed:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  4061f0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4061f3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4061f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4061fb:	48 89 c7             	mov    %rax,%rdi
  4061fe:	e8 d2 21 00 00       	call   4083d5 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>
  406203:	49 89 c0             	mov    %rax,%r8
  406206:	49 89 d1             	mov    %rdx,%r9
  406209:	90                   	nop
    }
  40620a:	4c 89 c0             	mov    %r8,%rax
  40620d:	4c 89 ca             	mov    %r9,%rdx
  406210:	c9                   	leave
  406211:	c3                   	ret

0000000000406212 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406212:	55                   	push   %rbp
  406213:	48 89 e5             	mov    %rsp,%rbp
  406216:	48 83 ec 30          	sub    $0x30,%rsp
  40621a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40621e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406222:	89 55 dc             	mov    %edx,-0x24(%rbp)
  406225:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  406228:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  40622d:	84 c0                	test   %al,%al
  40622f:	74 30                	je     406261 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x4f>
  406231:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
  406235:	0f 9e c0             	setle  %al
  406238:	0f b6 c0             	movzbl %al,%eax
  40623b:	48 85 c0             	test   %rax,%rax
  40623e:	75 0f                	jne    40624f <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x3d>
  406240:	83 7d d8 24          	cmpl   $0x24,-0x28(%rbp)
  406244:	0f 9f c0             	setg   %al
  406247:	0f b6 c0             	movzbl %al,%eax
  40624a:	48 85 c0             	test   %rax,%rax
  40624d:	74 07                	je     406256 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x44>
  40624f:	b8 01 00 00 00       	mov    $0x1,%eax
  406254:	eb 05                	jmp    40625b <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x49>
  406256:	b8 00 00 00 00       	mov    $0x0,%eax
  40625b:	0f b6 c0             	movzbl %al,%eax
  40625e:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  406261:	8b 45 dc             	mov    -0x24(%rbp),%eax
  406264:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__first == __last) [[__unlikely__]]
  406267:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40626b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40626f:	75 20                	jne    406291 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x7f>
	return { __last, errc::value_too_large };
  406271:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  406275:	4c 89 ca             	mov    %r9,%rdx
  406278:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  40627f:	ff ff ff
  406282:	48 21 d0             	and    %rdx,%rax
  406285:	48 83 c8 4b          	or     $0x4b,%rax
  406289:	49 89 c1             	mov    %rax,%r9
  40628c:	e9 f3 00 00 00       	jmp    406384 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
      if (__value == 0)
  406291:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  406295:	75 2a                	jne    4062c1 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xaf>
	  *__first = '0';
  406297:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40629b:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  40629e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4062a2:	48 83 c0 01          	add    $0x1,%rax
  4062a6:	49 89 c0             	mov    %rax,%r8
  4062a9:	4c 89 ca             	mov    %r9,%rdx
  4062ac:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  4062b3:	ff ff ff
  4062b6:	48 21 d0             	and    %rdx,%rax
  4062b9:	49 89 c1             	mov    %rax,%r9
  4062bc:	e9 c3 00 00 00       	jmp    406384 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
      switch (__base)
  4062c1:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  4062c5:	74 28                	je     4062ef <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xdd>
  4062c7:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  4062cb:	0f 8f 96 00 00 00    	jg     406367 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
  4062d1:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  4062d5:	74 36                	je     40630d <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xfb>
  4062d7:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  4062db:	0f 8f 86 00 00 00    	jg     406367 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
  4062e1:	83 7d d8 02          	cmpl   $0x2,-0x28(%rbp)
  4062e5:	74 62                	je     406349 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x137>
  4062e7:	83 7d d8 08          	cmpl   $0x8,-0x28(%rbp)
  4062eb:	74 3e                	je     40632b <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x119>
  4062ed:	eb 78                	jmp    406367 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  4062ef:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4062f2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4062f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4062fa:	48 89 ce             	mov    %rcx,%rsi
  4062fd:	48 89 c7             	mov    %rax,%rdi
  406300:	e8 2c 1d 00 00       	call   408031 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>
  406305:	49 89 c0             	mov    %rax,%r8
  406308:	49 89 d1             	mov    %rdx,%r9
  40630b:	eb 77                	jmp    406384 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  40630d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406310:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406314:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406318:	48 89 ce             	mov    %rcx,%rsi
  40631b:	48 89 c7             	mov    %rax,%rdi
  40631e:	e8 49 1e 00 00       	call   40816c <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>
  406323:	49 89 c0             	mov    %rax,%r8
  406326:	49 89 d1             	mov    %rdx,%r9
  406329:	eb 59                	jmp    406384 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  40632b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40632e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406332:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406336:	48 89 ce             	mov    %rcx,%rsi
  406339:	48 89 c7             	mov    %rax,%rdi
  40633c:	e8 b8 1e 00 00       	call   4081f9 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>
  406341:	49 89 c0             	mov    %rax,%r8
  406344:	49 89 d1             	mov    %rdx,%r9
  406347:	eb 3b                	jmp    406384 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  406349:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40634c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406354:	48 89 ce             	mov    %rcx,%rsi
  406357:	48 89 c7             	mov    %rax,%rdi
  40635a:	e8 c7 1f 00 00       	call   408326 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>
  40635f:	49 89 c0             	mov    %rax,%r8
  406362:	49 89 d1             	mov    %rdx,%r9
  406365:	eb 1d                	jmp    406384 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  406367:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  40636a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40636d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406371:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406375:	48 89 c7             	mov    %rax,%rdi
  406378:	e8 58 20 00 00       	call   4083d5 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>
  40637d:	49 89 c0             	mov    %rax,%r8
  406380:	49 89 d1             	mov    %rdx,%r9
  406383:	90                   	nop
    }
  406384:	4c 89 c0             	mov    %r8,%rax
  406387:	4c 89 ca             	mov    %r9,%rdx
  40638a:	c9                   	leave
  40638b:	c3                   	ret

000000000040638c <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  40638c:	55                   	push   %rbp
  40638d:	48 89 e5             	mov    %rsp,%rbp
  406390:	48 83 ec 30          	sub    $0x30,%rsp
  406394:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406398:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40639c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4063a0:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  4063a3:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  4063a8:	84 c0                	test   %al,%al
  4063aa:	74 30                	je     4063dc <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x50>
  4063ac:	83 7d d4 01          	cmpl   $0x1,-0x2c(%rbp)
  4063b0:	0f 9e c0             	setle  %al
  4063b3:	0f b6 c0             	movzbl %al,%eax
  4063b6:	48 85 c0             	test   %rax,%rax
  4063b9:	75 0f                	jne    4063ca <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x3e>
  4063bb:	83 7d d4 24          	cmpl   $0x24,-0x2c(%rbp)
  4063bf:	0f 9f c0             	setg   %al
  4063c2:	0f b6 c0             	movzbl %al,%eax
  4063c5:	48 85 c0             	test   %rax,%rax
  4063c8:	74 07                	je     4063d1 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x45>
  4063ca:	b8 01 00 00 00       	mov    $0x1,%eax
  4063cf:	eb 05                	jmp    4063d6 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x4a>
  4063d1:	b8 00 00 00 00       	mov    $0x0,%eax
  4063d6:	0f b6 c0             	movzbl %al,%eax
  4063d9:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  4063dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4063e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  4063e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4063e8:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4063ec:	75 20                	jne    40640e <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  4063ee:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  4063f2:	4c 89 ca             	mov    %r9,%rdx
  4063f5:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  4063fc:	ff ff ff
  4063ff:	48 21 d0             	and    %rdx,%rax
  406402:	48 83 c8 4b          	or     $0x4b,%rax
  406406:	49 89 c1             	mov    %rax,%r9
  406409:	e9 f9 00 00 00       	jmp    406507 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
      if (__value == 0)
  40640e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  406413:	75 2a                	jne    40643f <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0xb3>
	  *__first = '0';
  406415:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406419:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  40641c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406420:	48 83 c0 01          	add    $0x1,%rax
  406424:	49 89 c0             	mov    %rax,%r8
  406427:	4c 89 ca             	mov    %r9,%rdx
  40642a:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406431:	ff ff ff
  406434:	48 21 d0             	and    %rdx,%rax
  406437:	49 89 c1             	mov    %rax,%r9
  40643a:	e9 c8 00 00 00       	jmp    406507 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
      switch (__base)
  40643f:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  406443:	74 28                	je     40646d <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0xe1>
  406445:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  406449:	0f 8f 9a 00 00 00    	jg     4064e9 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
  40644f:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  406453:	74 37                	je     40648c <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x100>
  406455:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  406459:	0f 8f 8a 00 00 00    	jg     4064e9 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
  40645f:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
  406463:	74 65                	je     4064ca <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x13e>
  406465:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  406469:	74 40                	je     4064ab <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x11f>
  40646b:	eb 7c                	jmp    4064e9 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  40646d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406471:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406475:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406479:	48 89 ce             	mov    %rcx,%rsi
  40647c:	48 89 c7             	mov    %rax,%rdi
  40647f:	e8 8c 20 00 00       	call   408510 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>
  406484:	49 89 c0             	mov    %rax,%r8
  406487:	49 89 d1             	mov    %rdx,%r9
  40648a:	eb 7b                	jmp    406507 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  40648c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406490:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406494:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406498:	48 89 ce             	mov    %rcx,%rsi
  40649b:	48 89 c7             	mov    %rax,%rdi
  40649e:	e8 d4 21 00 00       	call   408677 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>
  4064a3:	49 89 c0             	mov    %rax,%r8
  4064a6:	49 89 d1             	mov    %rdx,%r9
  4064a9:	eb 5c                	jmp    406507 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  4064ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4064af:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4064b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4064b7:	48 89 ce             	mov    %rcx,%rsi
  4064ba:	48 89 c7             	mov    %rax,%rdi
  4064bd:	e8 46 22 00 00       	call   408708 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>
  4064c2:	49 89 c0             	mov    %rax,%r8
  4064c5:	49 89 d1             	mov    %rdx,%r9
  4064c8:	eb 3d                	jmp    406507 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  4064ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4064ce:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4064d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4064d6:	48 89 ce             	mov    %rcx,%rsi
  4064d9:	48 89 c7             	mov    %rax,%rdi
  4064dc:	e8 67 23 00 00       	call   408848 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>
  4064e1:	49 89 c0             	mov    %rax,%r8
  4064e4:	49 89 d1             	mov    %rdx,%r9
  4064e7:	eb 1e                	jmp    406507 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  4064e9:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  4064ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4064f0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4064f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4064f8:	48 89 c7             	mov    %rax,%rdi
  4064fb:	e8 fc 23 00 00       	call   4088fc <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>
  406500:	49 89 c0             	mov    %rax,%r8
  406503:	49 89 d1             	mov    %rdx,%r9
  406506:	90                   	nop
    }
  406507:	4c 89 c0             	mov    %r8,%rax
  40650a:	4c 89 ca             	mov    %r9,%rdx
  40650d:	c9                   	leave
  40650e:	c3                   	ret

000000000040650f <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  40650f:	55                   	push   %rbp
  406510:	48 89 e5             	mov    %rsp,%rbp
  406513:	48 83 ec 30          	sub    $0x30,%rsp
  406517:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40651b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40651f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406523:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  406526:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  40652b:	84 c0                	test   %al,%al
  40652d:	74 30                	je     40655f <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x50>
  40652f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%rbp)
  406533:	0f 9e c0             	setle  %al
  406536:	0f b6 c0             	movzbl %al,%eax
  406539:	48 85 c0             	test   %rax,%rax
  40653c:	75 0f                	jne    40654d <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x3e>
  40653e:	83 7d d4 24          	cmpl   $0x24,-0x2c(%rbp)
  406542:	0f 9f c0             	setg   %al
  406545:	0f b6 c0             	movzbl %al,%eax
  406548:	48 85 c0             	test   %rax,%rax
  40654b:	74 07                	je     406554 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x45>
  40654d:	b8 01 00 00 00       	mov    $0x1,%eax
  406552:	eb 05                	jmp    406559 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x4a>
  406554:	b8 00 00 00 00       	mov    $0x0,%eax
  406559:	0f b6 c0             	movzbl %al,%eax
  40655c:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  40655f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406563:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  406567:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40656b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40656f:	75 20                	jne    406591 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  406571:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  406575:	4c 89 ca             	mov    %r9,%rdx
  406578:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  40657f:	ff ff ff
  406582:	48 21 d0             	and    %rdx,%rax
  406585:	48 83 c8 4b          	or     $0x4b,%rax
  406589:	49 89 c1             	mov    %rax,%r9
  40658c:	e9 f9 00 00 00       	jmp    40668a <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
      if (__value == 0)
  406591:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  406596:	75 2a                	jne    4065c2 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0xb3>
	  *__first = '0';
  406598:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40659c:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  40659f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065a3:	48 83 c0 01          	add    $0x1,%rax
  4065a7:	49 89 c0             	mov    %rax,%r8
  4065aa:	4c 89 ca             	mov    %r9,%rdx
  4065ad:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  4065b4:	ff ff ff
  4065b7:	48 21 d0             	and    %rdx,%rax
  4065ba:	49 89 c1             	mov    %rax,%r9
  4065bd:	e9 c8 00 00 00       	jmp    40668a <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
      switch (__base)
  4065c2:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  4065c6:	74 28                	je     4065f0 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0xe1>
  4065c8:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  4065cc:	0f 8f 9a 00 00 00    	jg     40666c <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
  4065d2:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  4065d6:	74 37                	je     40660f <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x100>
  4065d8:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  4065dc:	0f 8f 8a 00 00 00    	jg     40666c <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
  4065e2:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
  4065e6:	74 65                	je     40664d <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x13e>
  4065e8:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  4065ec:	74 40                	je     40662e <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x11f>
  4065ee:	eb 7c                	jmp    40666c <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  4065f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4065f4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4065f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4065fc:	48 89 ce             	mov    %rcx,%rsi
  4065ff:	48 89 c7             	mov    %rax,%rdi
  406602:	e8 09 1f 00 00       	call   408510 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>
  406607:	49 89 c0             	mov    %rax,%r8
  40660a:	49 89 d1             	mov    %rdx,%r9
  40660d:	eb 7b                	jmp    40668a <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  40660f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406613:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406617:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40661b:	48 89 ce             	mov    %rcx,%rsi
  40661e:	48 89 c7             	mov    %rax,%rdi
  406621:	e8 51 20 00 00       	call   408677 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>
  406626:	49 89 c0             	mov    %rax,%r8
  406629:	49 89 d1             	mov    %rdx,%r9
  40662c:	eb 5c                	jmp    40668a <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  40662e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406632:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40663a:	48 89 ce             	mov    %rcx,%rsi
  40663d:	48 89 c7             	mov    %rax,%rdi
  406640:	e8 c3 20 00 00       	call   408708 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>
  406645:	49 89 c0             	mov    %rax,%r8
  406648:	49 89 d1             	mov    %rdx,%r9
  40664b:	eb 3d                	jmp    40668a <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  40664d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406651:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406655:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406659:	48 89 ce             	mov    %rcx,%rsi
  40665c:	48 89 c7             	mov    %rax,%rdi
  40665f:	e8 e4 21 00 00       	call   408848 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>
  406664:	49 89 c0             	mov    %rax,%r8
  406667:	49 89 d1             	mov    %rdx,%r9
  40666a:	eb 1e                	jmp    40668a <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  40666c:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  40666f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406673:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406677:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40667b:	48 89 c7             	mov    %rax,%rdi
  40667e:	e8 79 22 00 00       	call   4088fc <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>
  406683:	49 89 c0             	mov    %rax,%r8
  406686:	49 89 d1             	mov    %rdx,%r9
  406689:	90                   	nop
    }
  40668a:	4c 89 c0             	mov    %r8,%rax
  40668d:	4c 89 ca             	mov    %r9,%rdx
  406690:	c9                   	leave
  406691:	c3                   	ret

0000000000406692 <_ZSt13__countl_zeroIjEiT_>:
    __countl_zero(_Tp __x) noexcept
  406692:	55                   	push   %rbp
  406693:	48 89 e5             	mov    %rsp,%rbp
  406696:	89 7d dc             	mov    %edi,-0x24(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  406699:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
      if (__x == 0)
  4066a0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  4066a4:	75 07                	jne    4066ad <_ZSt13__countl_zeroIjEiT_+0x1b>
        return _Nd;
  4066a6:	b8 20 00 00 00       	mov    $0x20,%eax
  4066ab:	eb 24                	jmp    4066d1 <_ZSt13__countl_zeroIjEiT_+0x3f>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  4066ad:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  4066b4:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  4066bb:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  constexpr int __diff = _Nd_u - _Nd;
  4066c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	  return __builtin_clz(__x) - __diff;
  4066c9:	0f bd 45 dc          	bsr    -0x24(%rbp),%eax
  4066cd:	83 f0 1f             	xor    $0x1f,%eax
  4066d0:	90                   	nop
    }
  4066d1:	5d                   	pop    %rbp
  4066d2:	c3                   	ret

00000000004066d3 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cpp_constexpr_dynamic_alloc // >= C++20
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
  4066d3:	55                   	push   %rbp
  4066d4:	48 89 e5             	mov    %rsp,%rbp
  4066d7:	53                   	push   %rbx
  4066d8:	48 83 ec 18          	sub    $0x18,%rsp
  4066dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4066e0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  4066e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4066e8:	48 89 c6             	mov    %rax,%rsi
  4066eb:	bf 01 00 00 00       	mov    $0x1,%edi
  4066f0:	e8 75 de ff ff       	call   40456a <_ZnwmPv>
  4066f5:	48 89 c3             	mov    %rax,%rbx
  4066f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4066fc:	48 89 c7             	mov    %rax,%rdi
  4066ff:	e8 39 23 00 00       	call   408a3d <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
  406704:	0f b6 00             	movzbl (%rax),%eax
  406707:	88 03                	mov    %al,(%rbx)
  406709:	48 89 d8             	mov    %rbx,%rax
  40670c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  406710:	c9                   	leave
  406711:	c3                   	ret

0000000000406712 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_>:
    char_traits<_CharT>::
  406712:	55                   	push   %rbp
  406713:	48 89 e5             	mov    %rsp,%rbp
  406716:	48 83 ec 30          	sub    $0x30,%rsp
  40671a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40671e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406722:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      for (std::size_t __i = 0; __i < __n; ++__i)
  406726:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40672d:	00
  40672e:	eb 30                	jmp    406760 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x4e>
        if (eq(__s[__i], __a))
  406730:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406734:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406738:	48 01 c2             	add    %rax,%rdx
  40673b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40673f:	48 89 c6             	mov    %rax,%rsi
  406742:	48 89 d7             	mov    %rdx,%rdi
  406745:	e8 92 f0 ff ff       	call   4057dc <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
  40674a:	84 c0                	test   %al,%al
  40674c:	74 0d                	je     40675b <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x49>
          return __s + __i;
  40674e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406756:	48 01 d0             	add    %rdx,%rax
  406759:	eb 14                	jmp    40676f <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x5d>
      for (std::size_t __i = 0; __i < __n; ++__i)
  40675b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  406760:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406764:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406768:	72 c6                	jb     406730 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x1e>
      return 0;
  40676a:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  40676f:	c9                   	leave
  406770:	c3                   	ret
  406771:	90                   	nop

0000000000406772 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>:
    char_traits<_CharT>::
  406772:	55                   	push   %rbp
  406773:	48 89 e5             	mov    %rsp,%rbp
  406776:	48 83 ec 20          	sub    $0x20,%rsp
  40677a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40677e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406782:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n == 0)
  406786:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40678b:	75 06                	jne    406793 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x21>
	return __s1;
  40678d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406791:	eb 41                	jmp    4067d4 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x62>
  406793:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  406798:	84 c0                	test   %al,%al
  40679a:	74 1d                	je     4067b9 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x47>
	    copy(__s1, __s2, __n);
  40679c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4067a0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4067a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067a8:	48 89 ce             	mov    %rcx,%rsi
  4067ab:	48 89 c7             	mov    %rax,%rdi
  4067ae:	e8 23 00 00 00       	call   4067d6 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  return __s1;
  4067b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067b7:	eb 1b                	jmp    4067d4 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x62>
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
  4067b9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4067bd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4067c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067c5:	48 89 ce             	mov    %rcx,%rsi
  4067c8:	48 89 c7             	mov    %rax,%rdi
  4067cb:	e8 60 db ff ff       	call   404330 <memmove@plt>
      return __s1;
  4067d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4067d4:	c9                   	leave
  4067d5:	c3                   	ret

00000000004067d6 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>:
    char_traits<_CharT>::
  4067d6:	55                   	push   %rbp
  4067d7:	48 89 e5             	mov    %rsp,%rbp
  4067da:	48 83 ec 30          	sub    $0x30,%rsp
  4067de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4067e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4067e6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__n == 0)
  4067ea:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4067ef:	75 06                	jne    4067f7 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x21>
	return __s1;
  4067f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4067f5:	eb 6a                	jmp    406861 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x8b>
  4067f7:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  4067fc:	84 c0                	test   %al,%al
  4067fe:	74 40                	je     406840 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x6a>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  406800:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406807:	00
  406808:	eb 26                	jmp    406830 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x5a>
	    std::construct_at(__s1 + __i, __s2[__i]);
  40680a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40680e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406812:	48 01 c2             	add    %rax,%rdx
  406815:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  406819:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40681d:	48 01 c8             	add    %rcx,%rax
  406820:	48 89 d6             	mov    %rdx,%rsi
  406823:	48 89 c7             	mov    %rax,%rdi
  406826:	e8 a8 fe ff ff       	call   4066d3 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  40682b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  406830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406834:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  406838:	72 d0                	jb     40680a <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x34>
	  return __s1;
  40683a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40683e:	eb 21                	jmp    406861 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x8b>
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
  406840:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406844:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406848:	48 89 d1             	mov    %rdx,%rcx
  40684b:	48 89 c6             	mov    %rax,%rsi
  40684e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406852:	48 89 c2             	mov    %rax,%rdx
  406855:	48 89 cf             	mov    %rcx,%rdi
  406858:	e8 73 d9 ff ff       	call   4041d0 <memcpy@plt>
      return __s1;
  40685d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  406861:	c9                   	leave
  406862:	c3                   	ret
  406863:	90                   	nop

0000000000406864 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc>:
    char_traits<_CharT>::
  406864:	55                   	push   %rbp
  406865:	48 89 e5             	mov    %rsp,%rbp
  406868:	48 83 ec 30          	sub    $0x30,%rsp
  40686c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406870:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406874:	89 d0                	mov    %edx,%eax
  406876:	88 45 dc             	mov    %al,-0x24(%rbp)
  406879:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  40687e:	84 c0                	test   %al,%al
  406880:	74 39                	je     4068bb <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x57>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  406882:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406889:	00
  40688a:	eb 1f                	jmp    4068ab <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x47>
	    std::construct_at(__s + __i, __a);
  40688c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406890:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406894:	48 01 c2             	add    %rax,%rdx
  406897:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40689b:	48 89 c6             	mov    %rax,%rsi
  40689e:	48 89 d7             	mov    %rdx,%rdi
  4068a1:	e8 a5 21 00 00       	call   408a4b <_ZSt12construct_atIcJRcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  4068a6:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  4068ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4068af:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4068b3:	72 d7                	jb     40688c <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x28>
	  return __s;
  4068b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4068b9:	eb 2b                	jmp    4068e6 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x82>
	  if (__n)
  4068bb:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4068c0:	74 20                	je     4068e2 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x7e>
	      __builtin_memcpy(&__c, __builtin_addressof(__a), 1);
  4068c2:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  4068c6:	88 45 f7             	mov    %al,-0x9(%rbp)
	      __builtin_memset(__s, __c, __n);
  4068c9:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  4068cd:	0f b6 c8             	movzbl %al,%ecx
  4068d0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4068d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4068d8:	89 ce                	mov    %ecx,%esi
  4068da:	48 89 c7             	mov    %rax,%rdi
  4068dd:	e8 1e d8 ff ff       	call   404100 <memset@plt>
      return __s;
  4068e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4068e6:	c9                   	leave
  4068e7:	c3                   	ret

00000000004068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
	return *(this->_M_str + this->_M_len - 1);
      }

      [[nodiscard]]
      constexpr const_pointer
      data() const noexcept
  4068e8:	55                   	push   %rbp
  4068e9:	48 89 e5             	mov    %rsp,%rbp
  4068ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
  4068f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4068f4:	48 8b 40 08          	mov    0x8(%rax),%rax
  4068f8:	5d                   	pop    %rbp
  4068f9:	c3                   	ret

00000000004068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>:
      basic_string_view(const _CharT* __str, size_type __len) noexcept
  4068fa:	55                   	push   %rbp
  4068fb:	48 89 e5             	mov    %rsp,%rbp
  4068fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406902:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406906:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : _M_len{__len}, _M_str{__str}
  40690a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40690e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406912:	48 89 10             	mov    %rdx,(%rax)
  406915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406919:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40691d:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  406921:	90                   	nop
  406922:	5d                   	pop    %rbp
  406923:	c3                   	ret

0000000000406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
  406924:	55                   	push   %rbp
  406925:	48 89 e5             	mov    %rsp,%rbp
  406928:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus._M_p; }
  40692c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406930:	48 8b 00             	mov    (%rax),%rax
  406933:	5d                   	pop    %rbp
  406934:	c3                   	ret
  406935:	90                   	nop

0000000000406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>:
      _M_set_length(size_type __n)
  406936:	55                   	push   %rbp
  406937:	48 89 e5             	mov    %rsp,%rbp
  40693a:	48 83 ec 20          	sub    $0x20,%rsp
  40693e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406942:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_length(__n);
  406946:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40694a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40694e:	48 89 d6             	mov    %rdx,%rsi
  406951:	48 89 c7             	mov    %rax,%rdi
  406954:	e8 31 21 00 00       	call   408a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	traits_type::assign(_M_data()[__n], _CharT());
  406959:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  40695d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406961:	48 89 c7             	mov    %rax,%rdi
  406964:	e8 bb ff ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  406969:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40696d:	48 01 c2             	add    %rax,%rdx
  406970:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  406974:	48 89 c6             	mov    %rax,%rsi
  406977:	48 89 d7             	mov    %rdx,%rdi
  40697a:	e8 62 dc ff ff       	call   4045e1 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40697f:	90                   	nop
  406980:	c9                   	leave
  406981:	c3                   	ret

0000000000406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
      ~basic_string()
  406982:	55                   	push   %rbp
  406983:	48 89 e5             	mov    %rsp,%rbp
  406986:	48 83 ec 10          	sub    $0x10,%rsp
  40698a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_dispose(); }
  40698e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406992:	48 89 c7             	mov    %rax,%rdi
  406995:	e8 0c 21 00 00       	call   408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  40699a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40699e:	48 89 c7             	mov    %rax,%rdi
  4069a1:	e8 2c e0 ff ff       	call   4049d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  4069a6:	90                   	nop
  4069a7:	c9                   	leave
  4069a8:	c3                   	ret

00000000004069a9 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    _GLIBCXX23_CONSTEXPR void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  4069a9:	55                   	push   %rbp
  4069aa:	48 89 e5             	mov    %rsp,%rbp
  4069ad:	48 83 ec 78          	sub    $0x78,%rsp
  4069b1:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  4069b8:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%rbp)
  4069be:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      constexpr char __digits[201] =
  4069c4:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  4069cb:	32 30 33
  4069ce:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  4069d5:	36 30 37
  4069d8:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4069df:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  4069e6:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  4069ed:	30 31 31
  4069f0:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  4069f7:	34 31 35
  4069fa:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  406a01:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  406a08:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  406a0f:	38 31 39
  406a12:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  406a19:	32 32 33
  406a1c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  406a23:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  406a2a:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  406a31:	36 32 37
  406a34:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  406a3b:	30 33 31
  406a3e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  406a45:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  406a4c:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  406a53:	34 33 35
  406a56:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  406a5d:	38 33 39
  406a60:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  406a67:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  406a6e:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  406a75:	32 34 33
  406a78:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  406a7f:	36 34 37
  406a82:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  406a89:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  406a90:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  406a97:	30 35 31
  406a9a:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  406aa1:	34 35 35
  406aa4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  406aa8:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  406aac:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  406ab3:	38 35 39
  406ab6:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  406abd:	32 36 33
  406ac0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  406ac4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  406ac8:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  406acf:	36 36 37
  406ad2:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  406ad9:	30 37 31
  406adc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  406ae0:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  406ae4:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  406aeb:	34 37 35
  406aee:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  406af5:	38 37 39
  406af8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406afc:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  406b00:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  406b07:	32 38 33
  406b0a:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  406b11:	36 38 37
  406b14:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406b18:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406b1c:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  406b23:	30 39 31
  406b26:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  406b2d:	34 39 35
  406b30:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406b34:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406b38:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  406b3f:	39 35 39
  406b42:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  406b49:	39 39 00
  406b4c:	48 89 45 d9          	mov    %rax,-0x27(%rbp)
  406b50:	48 89 55 e1          	mov    %rdx,-0x1f(%rbp)
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
  406b54:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  406b5a:	83 e8 01             	sub    $0x1,%eax
  406b5d:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  406b60:	e9 80 00 00 00       	jmp    406be5 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x23c>
	{
	  auto const __num = (__val % 100) * 2;
  406b65:	8b 8d 10 ff ff ff    	mov    -0xf0(%rbp),%ecx
  406b6b:	89 c8                	mov    %ecx,%eax
  406b6d:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
  406b74:	48 c1 e8 20          	shr    $0x20,%rax
  406b78:	c1 e8 05             	shr    $0x5,%eax
  406b7b:	6b d0 64             	imul   $0x64,%eax,%edx
  406b7e:	89 c8                	mov    %ecx,%eax
  406b80:	29 d0                	sub    %edx,%eax
  406b82:	01 c0                	add    %eax,%eax
  406b84:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val /= 100;
  406b87:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  406b8d:	89 c0                	mov    %eax,%eax
  406b8f:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
  406b96:	48 c1 e8 20          	shr    $0x20,%rax
  406b9a:	c1 e8 05             	shr    $0x5,%eax
  406b9d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%rbp)
	  __first[__pos] = __digits[__num + 1];
  406ba3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  406ba6:	8d 48 01             	lea    0x1(%rax),%ecx
  406ba9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406bac:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  406bb3:	48 01 c2             	add    %rax,%rdx
  406bb6:	89 c8                	mov    %ecx,%eax
  406bb8:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  406bbf:	ff
  406bc0:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  406bc2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  406bc5:	83 e8 01             	sub    $0x1,%eax
  406bc8:	89 c2                	mov    %eax,%edx
  406bca:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  406bd1:	48 01 c2             	add    %rax,%rdx
  406bd4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  406bd7:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  406bde:	ff
  406bdf:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  406be1:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  406be5:	83 bd 10 ff ff ff 63 	cmpl   $0x63,-0xf0(%rbp)
  406bec:	0f 87 73 ff ff ff    	ja     406b65 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x1bc>
	}
      if (__val >= 10)
  406bf2:	83 bd 10 ff ff ff 09 	cmpl   $0x9,-0xf0(%rbp)
  406bf9:	76 3e                	jbe    406c39 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x290>
	{
	  auto const __num = __val * 2;
  406bfb:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  406c01:	01 c0                	add    %eax,%eax
  406c03:	89 45 f8             	mov    %eax,-0x8(%rbp)
	  __first[1] = __digits[__num + 1];
  406c06:	8b 45 f8             	mov    -0x8(%rbp),%eax
  406c09:	8d 48 01             	lea    0x1(%rax),%ecx
  406c0c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  406c13:	48 8d 50 01          	lea    0x1(%rax),%rdx
  406c17:	89 c8                	mov    %ecx,%eax
  406c19:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  406c20:	ff
  406c21:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  406c23:	8b 45 f8             	mov    -0x8(%rbp),%eax
  406c26:	0f b6 94 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%edx
  406c2d:	ff
  406c2e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  406c35:	88 10                	mov    %dl,(%rax)
	}
      else
	__first[0] = '0' + __val;
    }
  406c37:	eb 14                	jmp    406c4d <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x2a4>
	__first[0] = '0' + __val;
  406c39:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  406c3f:	83 c0 30             	add    $0x30,%eax
  406c42:	89 c2                	mov    %eax,%edx
  406c44:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  406c4b:	88 10                	mov    %dl,(%rax)
    }
  406c4d:	90                   	nop
  406c4e:	c9                   	leave
  406c4f:	c3                   	ret

0000000000406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
  406c50:	55                   	push   %rbp
  406c51:	48 89 e5             	mov    %rsp,%rbp
  406c54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  406c58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406c5c:	5d                   	pop    %rbp
  406c5d:	c3                   	ret

0000000000406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
  406c5e:	55                   	push   %rbp
  406c5f:	48 89 e5             	mov    %rsp,%rbp
  406c62:	53                   	push   %rbx
  406c63:	48 83 ec 18          	sub    $0x18,%rsp
  406c67:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (_M_data() == _M_local_data())
  406c6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c6f:	48 89 c7             	mov    %rax,%rdi
  406c72:	e8 ad fc ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  406c77:	48 89 c3             	mov    %rax,%rbx
  406c7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c7e:	48 89 c7             	mov    %rax,%rdi
  406c81:	e8 5a 1e 00 00       	call   408ae0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  406c86:	48 39 c3             	cmp    %rax,%rbx
  406c89:	0f 94 c0             	sete   %al
  406c8c:	84 c0                	test   %al,%al
  406c8e:	74 13                	je     406ca3 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x45>
	    if (_M_string_length > _S_local_capacity)
  406c90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406c94:	48 8b 40 08          	mov    0x8(%rax),%rax
  406c98:	48 83 f8 0f          	cmp    $0xf,%rax
	    return true;
  406c9c:	b8 01 00 00 00       	mov    $0x1,%eax
  406ca1:	eb 05                	jmp    406ca8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x4a>
	return false;
  406ca3:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  406ca8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  406cac:	c9                   	leave
  406cad:	c3                   	ret

0000000000406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      length() const _GLIBCXX_NOEXCEPT
  406cae:	55                   	push   %rbp
  406caf:	48 89 e5             	mov    %rsp,%rbp
  406cb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  406cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406cba:	48 8b 40 08          	mov    0x8(%rax),%rax
  406cbe:	5d                   	pop    %rbp
  406cbf:	c3                   	ret

0000000000406cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
      basic_string(basic_string&& __str) noexcept
  406cc0:	55                   	push   %rbp
  406cc1:	48 89 e5             	mov    %rsp,%rbp
  406cc4:	41 54                	push   %r12
  406cc6:	53                   	push   %rbx
  406cc7:	48 83 ec 40          	sub    $0x40,%rsp
  406ccb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  406ccf:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
  406cd3:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  406cd7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406cdb:	48 89 c7             	mov    %rax,%rdi
  406cde:	e8 6d ff ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  406ce3:	48 89 c7             	mov    %rax,%rdi
  406ce6:	e8 d9 dc ff ff       	call   4049c4 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
  406ceb:	49 89 c4             	mov    %rax,%r12
  406cee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406cf2:	48 89 c7             	mov    %rax,%rdi
  406cf5:	e8 1e dc ff ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  406cfa:	4c 89 e2             	mov    %r12,%rdx
  406cfd:	48 89 c6             	mov    %rax,%rsi
  406d00:	48 89 df             	mov    %rbx,%rdi
  406d03:	e8 70 dc ff ff       	call   404978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
	if (__str._M_is_local())
  406d08:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406d0c:	48 89 c7             	mov    %rax,%rdi
  406d0f:	e8 4a ff ff ff       	call   406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  406d14:	84 c0                	test   %al,%al
  406d16:	74 67                	je     406d7f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xbf>
  406d18:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406d1c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
  406d20:	e8 16 d8 ff ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  406d25:	84 c0                	test   %al,%al
  406d27:	74 28                	je     406d51 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x91>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  406d29:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  406d30:	00
  406d31:	eb 17                	jmp    406d4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x8a>
	    _M_local_buf[__i] = _CharT();
  406d33:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406d37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406d3b:	48 01 d0             	add    %rdx,%rax
  406d3e:	48 83 c0 10          	add    $0x10,%rax
  406d42:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  406d45:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  406d4a:	48 83 7d e0 0f       	cmpq   $0xf,-0x20(%rbp)
  406d4f:	76 e2                	jbe    406d33 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x73>
      }
  406d51:	90                   	nop
			      __str.length() + 1);
  406d52:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406d56:	48 89 c7             	mov    %rax,%rdi
  406d59:	e8 50 ff ff ff       	call   406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
  406d5e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  406d62:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406d66:	48 8d 48 10          	lea    0x10(%rax),%rcx
  406d6a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406d6e:	48 83 c0 10          	add    $0x10,%rax
  406d72:	48 89 ce             	mov    %rcx,%rsi
  406d75:	48 89 c7             	mov    %rax,%rdi
  406d78:	e8 98 da ff ff       	call   404815 <_ZNSt11char_traitsIcE4copyEPcPKcm>
  406d7d:	eb 35                	jmp    406db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xf4>
	    _M_data(__str._M_data());
  406d7f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406d83:	48 89 c7             	mov    %rax,%rdi
  406d86:	e8 99 fb ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  406d8b:	48 89 c2             	mov    %rax,%rdx
  406d8e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406d92:	48 89 d6             	mov    %rdx,%rsi
  406d95:	48 89 c7             	mov    %rax,%rdi
  406d98:	e8 61 1d 00 00       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__str._M_allocated_capacity);
  406d9d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406da1:	48 8b 50 10          	mov    0x10(%rax),%rdx
  406da5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406da9:	48 89 d6             	mov    %rdx,%rsi
  406dac:	48 89 c7             	mov    %rax,%rdi
  406daf:	e8 64 1d 00 00       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	_M_length(__str.length());
  406db4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406db8:	48 89 c7             	mov    %rax,%rdi
  406dbb:	e8 ee fe ff ff       	call   406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  406dc0:	48 89 c2             	mov    %rax,%rdx
  406dc3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406dc7:	48 89 d6             	mov    %rdx,%rsi
  406dca:	48 89 c7             	mov    %rax,%rdi
  406dcd:	e8 b8 1c 00 00       	call   408a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
  406dd2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406dd6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  406dda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406dde:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (std::is_constant_evaluated())
  406de2:	e8 54 d7 ff ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  406de7:	84 c0                	test   %al,%al
  406de9:	74 28                	je     406e13 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x153>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  406deb:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  406df2:	00
  406df3:	eb 17                	jmp    406e0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x14c>
	    _M_local_buf[__i] = _CharT();
  406df5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  406df9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406dfd:	48 01 d0             	add    %rdx,%rax
  406e00:	48 83 c0 10          	add    $0x10,%rax
  406e04:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  406e07:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  406e0c:	48 83 7d c8 0f       	cmpq   $0xf,-0x38(%rbp)
  406e11:	76 e2                	jbe    406df5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x135>
      }
  406e13:	90                   	nop
	return _M_local_data();
  406e14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406e18:	48 89 c7             	mov    %rax,%rdi
  406e1b:	e8 f8 da ff ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  406e20:	48 89 c2             	mov    %rax,%rdx
  406e23:	90                   	nop
	__str._M_data(__str._M_use_local_data());
  406e24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406e28:	48 89 d6             	mov    %rdx,%rsi
  406e2b:	48 89 c7             	mov    %rax,%rdi
  406e2e:	e8 cb 1c 00 00       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	__str._M_set_length(0);
  406e33:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406e37:	be 00 00 00 00       	mov    $0x0,%esi
  406e3c:	48 89 c7             	mov    %rax,%rdi
  406e3f:	e8 f2 fa ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  406e44:	90                   	nop
  406e45:	48 83 c4 40          	add    $0x40,%rsp
  406e49:	5b                   	pop    %rbx
  406e4a:	41 5c                	pop    %r12
  406e4c:	5d                   	pop    %rbp
  406e4d:	c3                   	ret

0000000000406e4e <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  406e4e:	55                   	push   %rbp
  406e4f:	48 89 e5             	mov    %rsp,%rbp
  406e52:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  406e59:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  406e60:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  406e66:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
      constexpr char __digits[201] =
  406e6d:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  406e74:	32 30 33
  406e77:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  406e7e:	36 30 37
  406e81:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  406e88:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  406e8f:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  406e96:	30 31 31
  406e99:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  406ea0:	34 31 35
  406ea3:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  406eaa:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  406eb1:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  406eb8:	38 31 39
  406ebb:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  406ec2:	32 32 33
  406ec5:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  406ecc:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  406ed3:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  406eda:	36 32 37
  406edd:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  406ee4:	30 33 31
  406ee7:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  406eee:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  406ef5:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  406efc:	34 33 35
  406eff:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  406f06:	38 33 39
  406f09:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  406f10:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  406f17:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  406f1e:	32 34 33
  406f21:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  406f28:	36 34 37
  406f2b:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  406f32:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  406f39:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  406f40:	30 35 31
  406f43:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  406f4a:	34 35 35
  406f4d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  406f54:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  406f5b:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  406f62:	38 35 39
  406f65:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  406f6c:	32 36 33
  406f6f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  406f73:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  406f77:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  406f7e:	36 36 37
  406f81:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  406f88:	30 37 31
  406f8b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  406f8f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  406f93:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  406f9a:	34 37 35
  406f9d:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  406fa4:	38 37 39
  406fa7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  406fab:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  406faf:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  406fb6:	32 38 33
  406fb9:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  406fc0:	36 38 37
  406fc3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406fc7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  406fcb:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  406fd2:	30 39 31
  406fd5:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  406fdc:	34 39 35
  406fdf:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  406fe3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406fe7:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  406fee:	39 35 39
  406ff1:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  406ff8:	39 39 00
  406ffb:	48 89 45 c9          	mov    %rax,-0x37(%rbp)
  406fff:	48 89 55 d1          	mov    %rdx,-0x2f(%rbp)
      unsigned __pos = __len - 1;
  407003:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  407009:	83 e8 01             	sub    $0x1,%eax
  40700c:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  40700f:	e9 b4 00 00 00       	jmp    4070c8 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x27a>
	  auto const __num = (__val % 100) * 2;
  407014:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  40701b:	48 89 c8             	mov    %rcx,%rax
  40701e:	48 c1 e8 02          	shr    $0x2,%rax
  407022:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407029:	c2 f5 28
  40702c:	48 f7 e2             	mul    %rdx
  40702f:	48 c1 ea 02          	shr    $0x2,%rdx
  407033:	48 89 d0             	mov    %rdx,%rax
  407036:	48 c1 e0 02          	shl    $0x2,%rax
  40703a:	48 01 d0             	add    %rdx,%rax
  40703d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  407044:	00
  407045:	48 01 d0             	add    %rdx,%rax
  407048:	48 c1 e0 02          	shl    $0x2,%rax
  40704c:	48 29 c1             	sub    %rax,%rcx
  40704f:	48 89 ca             	mov    %rcx,%rdx
  407052:	48 8d 04 12          	lea    (%rdx,%rdx,1),%rax
  407056:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val /= 100;
  40705a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407061:	48 c1 e8 02          	shr    $0x2,%rax
  407065:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  40706c:	c2 f5 28
  40706f:	48 f7 e2             	mul    %rdx
  407072:	48 89 d0             	mov    %rdx,%rax
  407075:	48 c1 e8 02          	shr    $0x2,%rax
  407079:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407080:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407084:	48 83 c0 01          	add    $0x1,%rax
  407088:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40708b:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407092:	48 01 ca             	add    %rcx,%rdx
  407095:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  40709c:	ff
  40709d:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  40709f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4070a2:	83 e8 01             	sub    $0x1,%eax
  4070a5:	89 c2                	mov    %eax,%edx
  4070a7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4070ae:	48 01 c2             	add    %rax,%rdx
  4070b1:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
  4070b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4070bc:	48 01 c8             	add    %rcx,%rax
  4070bf:	0f b6 00             	movzbl (%rax),%eax
  4070c2:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  4070c4:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  4070c8:	48 83 bd f8 fe ff ff 	cmpq   $0x63,-0x108(%rbp)
  4070cf:	63
  4070d0:	0f 87 3e ff ff ff    	ja     407014 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x1c6>
      if (__val >= 10)
  4070d6:	48 83 bd f8 fe ff ff 	cmpq   $0x9,-0x108(%rbp)
  4070dd:	09
  4070de:	76 47                	jbe    407127 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x2d9>
	  auto const __num = __val * 2;
  4070e0:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4070e7:	48 01 c0             	add    %rax,%rax
  4070ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __first[1] = __digits[__num + 1];
  4070ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4070f2:	48 83 c0 01          	add    $0x1,%rax
  4070f6:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  4070fd:	48 83 c2 01          	add    $0x1,%rdx
  407101:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407108:	ff
  407109:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  40710b:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  407112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407116:	48 01 d0             	add    %rdx,%rax
  407119:	0f b6 10             	movzbl (%rax),%edx
  40711c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407123:	88 10                	mov    %dl,(%rax)
    }
  407125:	eb 15                	jmp    40713c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x2ee>
	__first[0] = '0' + __val;
  407127:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40712e:	83 c0 30             	add    $0x30,%eax
  407131:	89 c2                	mov    %eax,%edx
  407133:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40713a:	88 10                	mov    %dl,(%rax)
    }
  40713c:	90                   	nop
  40713d:	c9                   	leave
  40713e:	c3                   	ret

000000000040713f <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  40713f:	55                   	push   %rbp
  407140:	48 89 e5             	mov    %rsp,%rbp
  407143:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  40714a:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  407151:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  407157:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
      constexpr char __digits[201] =
  40715e:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  407165:	32 30 33
  407168:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  40716f:	36 30 37
  407172:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  407179:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  407180:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  407187:	30 31 31
  40718a:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  407191:	34 31 35
  407194:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40719b:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  4071a2:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  4071a9:	38 31 39
  4071ac:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  4071b3:	32 32 33
  4071b6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4071bd:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  4071c4:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  4071cb:	36 32 37
  4071ce:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  4071d5:	30 33 31
  4071d8:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4071df:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  4071e6:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  4071ed:	34 33 35
  4071f0:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  4071f7:	38 33 39
  4071fa:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407201:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  407208:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  40720f:	32 34 33
  407212:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  407219:	36 34 37
  40721c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407223:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  40722a:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  407231:	30 35 31
  407234:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  40723b:	34 35 35
  40723e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407245:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40724c:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  407253:	38 35 39
  407256:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  40725d:	32 36 33
  407260:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407264:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407268:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  40726f:	36 36 37
  407272:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  407279:	30 37 31
  40727c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407280:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407284:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  40728b:	34 37 35
  40728e:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  407295:	38 37 39
  407298:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40729c:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4072a0:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  4072a7:	32 38 33
  4072aa:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  4072b1:	36 38 37
  4072b4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4072b8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4072bc:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  4072c3:	30 39 31
  4072c6:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  4072cd:	34 39 35
  4072d0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4072d4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4072d8:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  4072df:	39 35 39
  4072e2:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  4072e9:	39 39 00
  4072ec:	48 89 45 c9          	mov    %rax,-0x37(%rbp)
  4072f0:	48 89 55 d1          	mov    %rdx,-0x2f(%rbp)
      unsigned __pos = __len - 1;
  4072f4:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  4072fa:	83 e8 01             	sub    $0x1,%eax
  4072fd:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  407300:	e9 b4 00 00 00       	jmp    4073b9 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x27a>
	  auto const __num = (__val % 100) * 2;
  407305:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  40730c:	48 89 c8             	mov    %rcx,%rax
  40730f:	48 c1 e8 02          	shr    $0x2,%rax
  407313:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  40731a:	c2 f5 28
  40731d:	48 f7 e2             	mul    %rdx
  407320:	48 c1 ea 02          	shr    $0x2,%rdx
  407324:	48 89 d0             	mov    %rdx,%rax
  407327:	48 c1 e0 02          	shl    $0x2,%rax
  40732b:	48 01 d0             	add    %rdx,%rax
  40732e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  407335:	00
  407336:	48 01 d0             	add    %rdx,%rax
  407339:	48 c1 e0 02          	shl    $0x2,%rax
  40733d:	48 29 c1             	sub    %rax,%rcx
  407340:	48 89 ca             	mov    %rcx,%rdx
  407343:	48 8d 04 12          	lea    (%rdx,%rdx,1),%rax
  407347:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val /= 100;
  40734b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407352:	48 c1 e8 02          	shr    $0x2,%rax
  407356:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  40735d:	c2 f5 28
  407360:	48 f7 e2             	mul    %rdx
  407363:	48 89 d0             	mov    %rdx,%rax
  407366:	48 c1 e8 02          	shr    $0x2,%rax
  40736a:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407371:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407375:	48 83 c0 01          	add    $0x1,%rax
  407379:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40737c:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407383:	48 01 ca             	add    %rcx,%rdx
  407386:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  40738d:	ff
  40738e:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  407390:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407393:	83 e8 01             	sub    $0x1,%eax
  407396:	89 c2                	mov    %eax,%edx
  407398:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40739f:	48 01 c2             	add    %rax,%rdx
  4073a2:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
  4073a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4073ad:	48 01 c8             	add    %rcx,%rax
  4073b0:	0f b6 00             	movzbl (%rax),%eax
  4073b3:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  4073b5:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  4073b9:	48 83 bd f8 fe ff ff 	cmpq   $0x63,-0x108(%rbp)
  4073c0:	63
  4073c1:	0f 87 3e ff ff ff    	ja     407305 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x1c6>
      if (__val >= 10)
  4073c7:	48 83 bd f8 fe ff ff 	cmpq   $0x9,-0x108(%rbp)
  4073ce:	09
  4073cf:	76 47                	jbe    407418 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x2d9>
	  auto const __num = __val * 2;
  4073d1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4073d8:	48 01 c0             	add    %rax,%rax
  4073db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __first[1] = __digits[__num + 1];
  4073df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4073e3:	48 83 c0 01          	add    $0x1,%rax
  4073e7:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  4073ee:	48 83 c2 01          	add    $0x1,%rdx
  4073f2:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  4073f9:	ff
  4073fa:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  4073fc:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  407403:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407407:	48 01 d0             	add    %rdx,%rax
  40740a:	0f b6 10             	movzbl (%rax),%edx
  40740d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407414:	88 10                	mov    %dl,(%rax)
    }
  407416:	eb 15                	jmp    40742d <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x2ee>
	__first[0] = '0' + __val;
  407418:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40741f:	83 c0 30             	add    $0x30,%eax
  407422:	89 c2                	mov    %eax,%edx
  407424:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40742b:	88 10                	mov    %dl,(%rax)
    }
  40742d:	90                   	nop
  40742e:	c9                   	leave
  40742f:	c3                   	ret

0000000000407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>:
      operator __sv_type() const noexcept
  407430:	55                   	push   %rbp
  407431:	48 89 e5             	mov    %rsp,%rbp
  407434:	53                   	push   %rbx
  407435:	48 83 ec 28          	sub    $0x28,%rsp
  407439:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return __sv_type(data(), size()); }
  40743d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407441:	48 89 c7             	mov    %rax,%rdi
  407444:	e8 d7 d7 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  407449:	48 89 c3             	mov    %rax,%rbx
  40744c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407450:	48 89 c7             	mov    %rax,%rdi
  407453:	e8 dc 16 00 00       	call   408b34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  407458:	48 89 c1             	mov    %rax,%rcx
  40745b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40745f:	48 89 da             	mov    %rbx,%rdx
  407462:	48 89 ce             	mov    %rcx,%rsi
  407465:	48 89 c7             	mov    %rax,%rdi
  407468:	e8 8d f4 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40746d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407471:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407475:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  407479:	c9                   	leave
  40747a:	c3                   	ret

000000000040747b <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>:
   *  @ingroup binary_search_algorithms
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  40747b:	55                   	push   %rbp
  40747c:	48 89 e5             	mov    %rsp,%rbp
  40747f:	48 83 ec 20          	sub    $0x20,%rsp
  407483:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407487:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40748b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __glibcxx_function_requires(_LessThanOpConcept<
	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_partitioned_upper(__first, __last, __val);

      return std::__upper_bound(__first, __last, __val,
				__gnu_cxx::__ops::__val_less_iter());
  40748f:	e8 ef d0 ff ff       	call   404583 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>
      return std::__upper_bound(__first, __last, __val,
  407494:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407498:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40749c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074a0:	48 89 ce             	mov    %rcx,%rsi
  4074a3:	48 89 c7             	mov    %rax,%rdi
  4074a6:	e8 b1 16 00 00       	call   408b5c <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_>
    }
  4074ab:	c9                   	leave
  4074ac:	c3                   	ret

00000000004074ad <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>:
   *  @ingroup binary_search_algorithms
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  4074ad:	55                   	push   %rbp
  4074ae:	48 89 e5             	mov    %rsp,%rbp
  4074b1:	48 83 ec 20          	sub    $0x20,%rsp
  4074b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4074b9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4074bd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __glibcxx_function_requires(_LessThanOpConcept<
	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
      __glibcxx_requires_partitioned_lower(__first, __last, __val);

      return std::__lower_bound(__first, __last, __val,
				__gnu_cxx::__ops::__iter_less_val());
  4074c1:	e8 b6 d0 ff ff       	call   40457c <_ZN9__gnu_cxx5__ops15__iter_less_valEv>
      return std::__lower_bound(__first, __last, __val,
  4074c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4074ca:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4074ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074d2:	48 89 ce             	mov    %rcx,%rsi
  4074d5:	48 89 c7             	mov    %rax,%rdi
  4074d8:	e8 5d 17 00 00       	call   408c3a <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_>
    }
  4074dd:	c9                   	leave
  4074de:	c3                   	ret

00000000004074df <_ZSt4findIPKDiDiET_S2_S2_RKT0_>:
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  4074df:	55                   	push   %rbp
  4074e0:	48 89 e5             	mov    %rsp,%rbp
  4074e3:	48 83 ec 20          	sub    $0x20,%rsp
  4074e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4074eb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4074ef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
		typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last,
  4074f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4074f7:	48 89 c7             	mov    %rax,%rdi
  4074fa:	e8 19 18 00 00       	call   408d18 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKDiEENS0_16_Iter_equals_valIT_EERS4_>
  4074ff:	48 89 c2             	mov    %rax,%rdx
  407502:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  407506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40750a:	48 89 ce             	mov    %rcx,%rsi
  40750d:	48 89 c7             	mov    %rax,%rdi
  407510:	e8 28 18 00 00       	call   408d3d <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_>
			    __gnu_cxx::__ops::__iter_equals_val(__val));
    }
  407515:	c9                   	leave
  407516:	c3                   	ret

0000000000407517 <_ZSt12construct_atISt6localeJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
  407517:	55                   	push   %rbp
  407518:	48 89 e5             	mov    %rsp,%rbp
  40751b:	53                   	push   %rbx
  40751c:	48 83 ec 18          	sub    $0x18,%rsp
  407520:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  407524:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407528:	48 89 c6             	mov    %rax,%rsi
  40752b:	bf 08 00 00 00       	mov    $0x8,%edi
  407530:	e8 35 d0 ff ff       	call   40456a <_ZnwmPv>
  407535:	48 89 c3             	mov    %rax,%rbx
  407538:	48 89 df             	mov    %rbx,%rdi
  40753b:	e8 90 ce ff ff       	call   4043d0 <_ZNSt6localeC1Ev@plt>
  407540:	48 89 d8             	mov    %rbx,%rax
  407543:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  407547:	c9                   	leave
  407548:	c3                   	ret

0000000000407549 <_ZSt4moveIRNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
  407549:	55                   	push   %rbp
  40754a:	48 89 e5             	mov    %rsp,%rbp
  40754d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  407551:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407555:	5d                   	pop    %rbp
  407556:	c3                   	ret
  407557:	90                   	nop

0000000000407558 <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv>:
      get() &&
  407558:	55                   	push   %rbp
  407559:	48 89 e5             	mov    %rsp,%rbp
  40755c:	53                   	push   %rbx
  40755d:	48 83 ec 38          	sub    $0x38,%rsp
  407561:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  407565:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	if (this->_M_used().size() != 0)
  407569:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40756d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  407571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407575:	48 8d 58 08          	lea    0x8(%rax),%rbx
  407579:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40757d:	48 83 c0 08          	add    $0x8,%rax
  407581:	48 89 c7             	mov    %rax,%rdi
  407584:	e8 8b 34 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  407589:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40758d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407591:	48 8d 50 18          	lea    0x18(%rax),%rdx
  407595:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  407599:	48 89 c6             	mov    %rax,%rsi
  40759c:	48 89 d7             	mov    %rdx,%rdi
  40759f:	e8 95 34 00 00       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  4075a4:	48 89 c6             	mov    %rax,%rsi
  4075a7:	48 89 df             	mov    %rbx,%rdi
  4075aa:	e8 c9 34 00 00       	call   40aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  4075af:	90                   	nop
	if (this->_M_used().size() != 0)
  4075b0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4075b4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4075b8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4075bc:	48 89 c7             	mov    %rax,%rdi
  4075bf:	e8 00 de ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4075c4:	48 85 c0             	test   %rax,%rax
  4075c7:	0f 95 c0             	setne  %al
  4075ca:	84 c0                	test   %al,%al
  4075cc:	74 0c                	je     4075da <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv+0x82>
	  _Seq_sink::_M_overflow();
  4075ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4075d2:	48 89 c7             	mov    %rax,%rdi
  4075d5:	e8 ac 24 00 00       	call   409a86 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	return std::move(_M_seq);
  4075da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4075de:	48 05 20 01 00 00    	add    $0x120,%rax
  4075e4:	48 89 c7             	mov    %rax,%rdi
  4075e7:	e8 62 15 00 00       	call   408b4e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
  4075ec:	48 89 c2             	mov    %rax,%rdx
  4075ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4075f3:	48 89 d6             	mov    %rdx,%rsi
  4075f6:	48 89 c7             	mov    %rax,%rdi
  4075f9:	e8 c2 f6 ff ff       	call   406cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      }
  4075fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  407602:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  407606:	c9                   	leave
  407607:	c3                   	ret

0000000000407608 <_ZNKSt6ranges8__access5_DataclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>:

    public:
      template<__maybe_borrowed_range _Tp>
	requires __member_data<_Tp> || __begin_data<_Tp>
	constexpr auto
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
  407608:	55                   	push   %rbp
  407609:	48 89 e5             	mov    %rsp,%rbp
  40760c:	48 83 ec 10          	sub    $0x10,%rsp
  407610:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407614:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  if constexpr (__member_data<_Tp>)
	    return __t.data();
  407618:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40761c:	48 89 c7             	mov    %rax,%rdi
  40761f:	e8 3e 25 00 00       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
	  else
	    return std::to_address(_Begin{}(__t));
	}
  407624:	c9                   	leave
  407625:	c3                   	ret

0000000000407626 <_ZNKSt6ranges8__access5_SizeclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  407626:	55                   	push   %rbp
  407627:	48 89 e5             	mov    %rsp,%rbp
  40762a:	48 83 ec 10          	sub    $0x10,%rsp
  40762e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407632:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.size();
  407636:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40763a:	48 89 c7             	mov    %rax,%rdi
  40763d:	e8 de d5 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
	}
  407642:	c9                   	leave
  407643:	c3                   	ret

0000000000407644 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>:
      view()
  407644:	55                   	push   %rbp
  407645:	48 89 e5             	mov    %rsp,%rbp
  407648:	53                   	push   %rbx
  407649:	48 83 ec 48          	sub    $0x48,%rsp
  40764d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __s = this->_M_used();
  407651:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407655:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  407659:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40765d:	48 8d 58 08          	lea    0x8(%rax),%rbx
  407661:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407665:	48 83 c0 08          	add    $0x8,%rax
  407669:	48 89 c7             	mov    %rax,%rdi
  40766c:	e8 a3 33 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  407671:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  407675:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407679:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40767d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  407681:	48 89 c6             	mov    %rax,%rsi
  407684:	48 89 d7             	mov    %rdx,%rdi
  407687:	e8 ad 33 00 00       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40768c:	48 89 c6             	mov    %rax,%rsi
  40768f:	48 89 df             	mov    %rbx,%rdi
  407692:	e8 e1 33 00 00       	call   40aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  407697:	90                   	nop
	auto __s = this->_M_used();
  407698:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40769c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (_M_seq.size())
  4076a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4076a4:	48 05 20 01 00 00    	add    $0x120,%rax
  4076aa:	48 89 c7             	mov    %rax,%rdi
  4076ad:	e8 6e d5 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4076b2:	48 85 c0             	test   %rax,%rax
  4076b5:	0f 95 c0             	setne  %al
  4076b8:	84 c0                	test   %al,%al
  4076ba:	74 46                	je     407702 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0xbe>
	    if (__s.size() != 0)
  4076bc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4076c0:	48 89 c7             	mov    %rax,%rdi
  4076c3:	e8 fc dc ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4076c8:	48 85 c0             	test   %rax,%rax
  4076cb:	0f 95 c0             	setne  %al
  4076ce:	84 c0                	test   %al,%al
  4076d0:	74 0c                	je     4076de <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0x9a>
	      _Seq_sink::_M_overflow();
  4076d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4076d6:	48 89 c7             	mov    %rax,%rdi
  4076d9:	e8 a8 23 00 00       	call   409a86 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	    return _M_seq;
  4076de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4076e2:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  4076e9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4076ed:	48 89 d6             	mov    %rdx,%rsi
  4076f0:	48 89 c7             	mov    %rax,%rdi
  4076f3:	e8 84 24 00 00       	call   409b7c <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>
  4076f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4076fc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  407700:	eb 08                	jmp    40770a <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0xc6>
	return __s;
  407702:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  407706:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
      }
  40770a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40770e:	c9                   	leave
  40770f:	c3                   	ret

0000000000407710 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
  407710:	55                   	push   %rbp
  407711:	48 89 e5             	mov    %rsp,%rbp
  407714:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407718:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40771c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407720:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  407724:	48 89 10             	mov    %rdx,(%rax)
  407727:	90                   	nop
  407728:	5d                   	pop    %rbp
  407729:	c3                   	ret

000000000040772a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
  40772a:	55                   	push   %rbp
  40772b:	48 89 e5             	mov    %rsp,%rbp
  40772e:	48 83 ec 10          	sub    $0x10,%rsp
  407732:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407736:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40773a:	48 8b 00             	mov    (%rax),%rax
  40773d:	48 85 c0             	test   %rax,%rax
  407740:	74 0f                	je     407751 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
  407742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407746:	48 8b 00             	mov    (%rax),%rax
  407749:	48 89 c7             	mov    %rax,%rdi
  40774c:	e8 55 13 00 00       	call   408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  407751:	90                   	nop
  407752:	c9                   	leave
  407753:	c3                   	ret

0000000000407754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
  407754:	55                   	push   %rbp
  407755:	48 89 e5             	mov    %rsp,%rbp
  407758:	48 83 ec 70          	sub    $0x70,%rsp
  40775c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  407760:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  407764:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407768:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40776c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407770:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  407774:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
  407778:	90                   	nop
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
  407779:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40777d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  407781:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407785:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      return __last - __first;
  407789:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40778d:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
			     std::__iterator_category(__first));
  407791:	90                   	nop
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  407792:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (__dnew > size_type(_S_local_capacity))
  407796:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40779a:	48 83 f8 0f          	cmp    $0xf,%rax
  40779e:	76 3f                	jbe    4077df <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8b>
	    _M_data(_M_create(__dnew, size_type(0)));
  4077a0:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  4077a4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4077a8:	ba 00 00 00 00       	mov    $0x0,%edx
  4077ad:	48 89 ce             	mov    %rcx,%rsi
  4077b0:	48 89 c7             	mov    %rax,%rdi
  4077b3:	e8 42 24 00 00       	call   409bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  4077b8:	48 89 c2             	mov    %rax,%rdx
  4077bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4077bf:	48 89 d6             	mov    %rdx,%rsi
  4077c2:	48 89 c7             	mov    %rax,%rdi
  4077c5:	e8 34 13 00 00       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
  4077ca:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4077ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4077d2:	48 89 d6             	mov    %rdx,%rsi
  4077d5:	48 89 c7             	mov    %rax,%rdi
  4077d8:	e8 3b 13 00 00       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  4077dd:	eb 3a                	jmp    407819 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc5>
  4077df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4077e3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (std::is_constant_evaluated())
  4077e7:	e8 4f cd ff ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  4077ec:	84 c0                	test   %al,%al
  4077ee:	74 28                	je     407818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc4>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4077f0:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  4077f7:	00
  4077f8:	eb 17                	jmp    407811 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xbd>
	    _M_local_buf[__i] = _CharT();
  4077fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4077fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407802:	48 01 d0             	add    %rdx,%rax
  407805:	48 83 c0 10          	add    $0x10,%rax
  407809:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  40780c:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  407811:	48 83 7d d8 0f       	cmpq   $0xf,-0x28(%rbp)
  407816:	76 e2                	jbe    4077fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xa6>
      }
  407818:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
  407819:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40781d:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  407821:	48 89 d6             	mov    %rdx,%rsi
  407824:	48 89 c7             	mov    %rax,%rdi
  407827:	e8 e4 fe ff ff       	call   407710 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
  40782c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  407830:	48 89 c7             	mov    %rax,%rdi
  407833:	e8 ec f0 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  407838:	48 89 c1             	mov    %rax,%rcx
  40783b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40783f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  407843:	48 89 c6             	mov    %rax,%rsi
  407846:	48 89 cf             	mov    %rcx,%rdi
  407849:	e8 6f 24 00 00       	call   409cbd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
  40784e:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  407855:	00

	_M_set_length(__dnew);
  407856:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40785a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40785e:	48 89 d6             	mov    %rdx,%rsi
  407861:	48 89 c7             	mov    %rax,%rdi
  407864:	e8 cd f0 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  407869:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  40786d:	48 89 c7             	mov    %rax,%rdi
  407870:	e8 b5 fe ff ff       	call   40772a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
  407875:	c9                   	leave
  407876:	c3                   	ret

0000000000407877 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
		 std::format(__fmt, std::forward<_Args>(__args)...));
    }

  template<typename... _Args>
    inline void
    println(format_string<_Args...> __fmt, _Args&&... __args)
  407877:	55                   	push   %rbp
  407878:	48 89 e5             	mov    %rsp,%rbp
  40787b:	53                   	push   %rbx
  40787c:	48 83 ec 28          	sub    $0x28,%rsp
  407880:	48 89 f8             	mov    %rdi,%rax
  407883:	48 89 c1             	mov    %rax,%rcx
  407886:	bb 00 00 00 00       	mov    $0x0,%ebx
  40788b:	48 89 f3             	mov    %rsi,%rbx
  40788e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  407892:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
  407896:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { std::println(stdout, __fmt, std::forward<_Args>(__args)...); }
  40789a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40789e:	48 89 c7             	mov    %rax,%rdi
  4078a1:	e8 4c 24 00 00       	call   409cf2 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
  4078a6:	48 89 c1             	mov    %rax,%rcx
  4078a9:	48 8b 05 38 d9 01 00 	mov    0x1d938(%rip),%rax        # 4251e8 <stdout@GLIBC_2.2.5>
  4078b0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4078b4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4078b8:	48 89 c7             	mov    %rax,%rdi
  4078bb:	e8 40 24 00 00       	call   409d00 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>
  4078c0:	90                   	nop
  4078c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4078c5:	c9                   	leave
  4078c6:	c3                   	ret
  4078c7:	90                   	nop

00000000004078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
  4078c8:	55                   	push   %rbp
  4078c9:	48 89 e5             	mov    %rsp,%rbp
  4078cc:	48 83 ec 40          	sub    $0x40,%rsp
  4078d0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4078d4:	89 f0                	mov    %esi,%eax
  4078d6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4078da:	88 45 d4             	mov    %al,-0x2c(%rbp)
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
  4078dd:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
  4078e4:	ff
      if (__pos < this->_M_len)
  4078e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4078e9:	48 8b 00             	mov    (%rax),%rax
  4078ec:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  4078f0:	73 50                	jae    407942 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm+0x7a>
	{
	  const size_type __n = this->_M_len - __pos;
  4078f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4078f6:	48 8b 00             	mov    (%rax),%rax
  4078f9:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  4078fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
  407901:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407905:	48 8b 50 08          	mov    0x8(%rax),%rdx
  407909:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40790d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  407911:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  407915:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407919:	48 89 c6             	mov    %rax,%rsi
  40791c:	48 89 cf             	mov    %rcx,%rdi
  40791f:	e8 31 ce ff ff       	call   404755 <_ZNSt11char_traitsIcE4findEPKcmRS1_>
  407924:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__p)
  407928:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40792d:	74 13                	je     407942 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm+0x7a>
	    __ret = __p - this->_M_str;
  40792f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407933:	48 8b 40 08          	mov    0x8(%rax),%rax
  407937:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40793b:	48 29 c2             	sub    %rax,%rdx
  40793e:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	}
      return __ret;
  407942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  407946:	c9                   	leave
  407947:	c3                   	ret

0000000000407948 <_ZNSt8__format8_ScannerIcE11_M_on_charsEPKc>:
      constexpr virtual void _M_on_chars(iterator) { }
  407948:	55                   	push   %rbp
  407949:	48 89 e5             	mov    %rsp,%rbp
  40794c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407950:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407954:	90                   	nop
  407955:	5d                   	pop    %rbp
  407956:	c3                   	ret

0000000000407957 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
  407957:	55                   	push   %rbp
  407958:	48 89 e5             	mov    %rsp,%rbp
  40795b:	48 83 ec 10          	sub    $0x10,%rsp
  40795f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
  407963:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407967:	48 89 c7             	mov    %rax,%rdi
  40796a:	e8 0a 00 00 00       	call   407979 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>
  40796f:	48 89 c7             	mov    %rax,%rdi
  407972:	e8 10 00 00 00       	call   407987 <_ZNSt10__pair_getILm0EE10__move_getItPKcEEOT_OSt4pairIS4_T0_E>
  407977:	c9                   	leave
  407978:	c3                   	ret

0000000000407979 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
  407979:	55                   	push   %rbp
  40797a:	48 89 e5             	mov    %rsp,%rbp
  40797d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  407981:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407985:	5d                   	pop    %rbp
  407986:	c3                   	ret

0000000000407987 <_ZNSt10__pair_getILm0EE10__move_getItPKcEEOT_OSt4pairIS4_T0_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
  407987:	55                   	push   %rbp
  407988:	48 89 e5             	mov    %rsp,%rbp
  40798b:	48 83 ec 10          	sub    $0x10,%rsp
  40798f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return std::forward<_Tp1>(__pair.first); }
  407993:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407997:	48 89 c7             	mov    %rax,%rdi
  40799a:	e8 02 00 00 00       	call   4079a1 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
  40799f:	c9                   	leave
  4079a0:	c3                   	ret

00000000004079a1 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4079a1:	55                   	push   %rbp
  4079a2:	48 89 e5             	mov    %rsp,%rbp
  4079a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4079a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4079ad:	5d                   	pop    %rbp
  4079ae:	c3                   	ret

00000000004079af <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
  4079af:	55                   	push   %rbp
  4079b0:	48 89 e5             	mov    %rsp,%rbp
  4079b3:	48 83 ec 10          	sub    $0x10,%rsp
  4079b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
  4079bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4079bf:	48 89 c7             	mov    %rax,%rdi
  4079c2:	e8 b2 ff ff ff       	call   407979 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>
  4079c7:	48 89 c7             	mov    %rax,%rdi
  4079ca:	e8 02 00 00 00       	call   4079d1 <_ZNSt10__pair_getILm1EE10__move_getItPKcEEOT0_OSt4pairIT_S4_E>
  4079cf:	c9                   	leave
  4079d0:	c3                   	ret

00000000004079d1 <_ZNSt10__pair_getILm1EE10__move_getItPKcEEOT0_OSt4pairIT_S4_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
  4079d1:	55                   	push   %rbp
  4079d2:	48 89 e5             	mov    %rsp,%rbp
  4079d5:	48 83 ec 10          	sub    $0x10,%rsp
  4079d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return std::forward<_Tp2>(__pair.second); }
  4079dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4079e1:	48 83 c0 08          	add    $0x8,%rax
  4079e5:	48 89 c7             	mov    %rax,%rdi
  4079e8:	e8 02 00 00 00       	call   4079ef <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
  4079ed:	c9                   	leave
  4079ee:	c3                   	ret

00000000004079ef <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4079ef:	55                   	push   %rbp
  4079f0:	48 89 e5             	mov    %rsp,%rbp
  4079f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4079f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4079fb:	5d                   	pop    %rbp
  4079fc:	c3                   	ret
  4079fd:	90                   	nop

00000000004079fe <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv>:
      constexpr void _M_on_replacement_field()
  4079fe:	55                   	push   %rbp
  4079ff:	48 89 e5             	mov    %rsp,%rbp
  407a02:	53                   	push   %rbx
  407a03:	48 83 ec 48          	sub    $0x48,%rsp
  407a07:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __next = begin();
  407a0b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407a0f:	48 89 c7             	mov    %rax,%rdi
  407a12:	e8 6d e3 ff ff       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  407a17:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (*__next == '}')
  407a1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407a1f:	0f b6 00             	movzbl (%rax),%eax
  407a22:	3c 7d                	cmp    $0x7d,%al
  407a24:	75 19                	jne    407a3f <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x41>
	  __id = _M_pc.next_arg_id();
  407a26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407a2a:	48 83 c0 08          	add    $0x8,%rax
  407a2e:	48 89 c7             	mov    %rax,%rdi
  407a31:	e8 2e e4 ff ff       	call   405e64 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  407a36:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  407a3a:	e9 3a 01 00 00       	jmp    407b79 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	else if (*__next == ':')
  407a3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407a43:	0f b6 00             	movzbl (%rax),%eax
  407a46:	3c 3a                	cmp    $0x3a,%al
  407a48:	75 35                	jne    407a7f <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x81>
	    __id = _M_pc.next_arg_id();
  407a4a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407a4e:	48 83 c0 08          	add    $0x8,%rax
  407a52:	48 89 c7             	mov    %rax,%rdi
  407a55:	e8 0a e4 ff ff       	call   405e64 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  407a5a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    _M_pc.advance_to(++__next);
  407a5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407a62:	48 8d 50 08          	lea    0x8(%rax),%rdx
  407a66:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  407a6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407a6f:	48 89 c6             	mov    %rax,%rsi
  407a72:	48 89 d7             	mov    %rdx,%rdi
  407a75:	e8 d0 e3 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  407a7a:	e9 fa 00 00 00       	jmp    407b79 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	    auto [__i, __ptr] = __format::__parse_arg_id(begin(), end());
  407a7f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407a83:	48 89 c7             	mov    %rax,%rdi
  407a86:	e8 29 e3 ff ff       	call   405db4 <_ZNKSt8__format8_ScannerIcE3endEv>
  407a8b:	48 89 c3             	mov    %rax,%rbx
  407a8e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407a92:	48 89 c7             	mov    %rax,%rdi
  407a95:	e8 ea e2 ff ff       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  407a9a:	48 89 de             	mov    %rbx,%rsi
  407a9d:	48 89 c7             	mov    %rax,%rdi
  407aa0:	e8 07 23 00 00       	call   409dac <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>
  407aa5:	89 c1                	mov    %eax,%ecx
  407aa7:	48 89 d0             	mov    %rdx,%rax
  407aaa:	89 4d c0             	mov    %ecx,-0x40(%rbp)
  407aad:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  407ab1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  407ab5:	48 89 c7             	mov    %rax,%rdi
  407ab8:	e8 9a fe ff ff       	call   407957 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  407abd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  407ac1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  407ac5:	48 89 c7             	mov    %rax,%rdi
  407ac8:	e8 e2 fe ff ff       	call   4079af <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  407acd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
  407ad1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407ad5:	48 8b 00             	mov    (%rax),%rax
  407ad8:	48 85 c0             	test   %rax,%rax
  407adb:	74 1c                	je     407af9 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0xfb>
  407add:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407ae1:	48 8b 00             	mov    (%rax),%rax
  407ae4:	0f b6 00             	movzbl (%rax),%eax
  407ae7:	3c 7d                	cmp    $0x7d,%al
  407ae9:	74 13                	je     407afe <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x100>
  407aeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407aef:	48 8b 00             	mov    (%rax),%rax
  407af2:	0f b6 00             	movzbl (%rax),%eax
  407af5:	3c 3a                	cmp    $0x3a,%al
  407af7:	74 05                	je     407afe <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x100>
	      __format::__invalid_arg_id_in_format_string();
  407af9:	e8 a8 d5 ff ff       	call   4050a6 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
	    _M_pc.check_arg_id(__id = __i);
  407afe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407b02:	48 8d 50 08          	lea    0x8(%rax),%rdx
  407b06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407b0a:	0f b7 00             	movzwl (%rax),%eax
  407b0d:	0f b7 c0             	movzwl %ax,%eax
  407b10:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  407b14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407b18:	48 89 c6             	mov    %rax,%rsi
  407b1b:	48 89 d7             	mov    %rdx,%rdi
  407b1e:	e8 a9 23 00 00       	call   409ecc <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>
	    if (*__ptr == ':')
  407b23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b27:	48 8b 00             	mov    (%rax),%rax
  407b2a:	0f b6 00             	movzbl (%rax),%eax
  407b2d:	3c 3a                	cmp    $0x3a,%al
  407b2f:	75 2e                	jne    407b5f <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x161>
		_M_pc.advance_to(++__ptr);
  407b31:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407b35:	48 8d 50 08          	lea    0x8(%rax),%rdx
  407b39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b3d:	48 8b 00             	mov    (%rax),%rax
  407b40:	48 8d 48 01          	lea    0x1(%rax),%rcx
  407b44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b48:	48 89 08             	mov    %rcx,(%rax)
  407b4b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b4f:	48 8b 00             	mov    (%rax),%rax
  407b52:	48 89 c6             	mov    %rax,%rsi
  407b55:	48 89 d7             	mov    %rdx,%rdi
  407b58:	e8 ed e2 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  407b5d:	eb 1a                	jmp    407b79 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	      _M_pc.advance_to(__ptr);
  407b5f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407b63:	48 8d 50 08          	lea    0x8(%rax),%rdx
  407b67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  407b6b:	48 8b 00             	mov    (%rax),%rax
  407b6e:	48 89 c6             	mov    %rax,%rsi
  407b71:	48 89 d7             	mov    %rdx,%rdi
  407b74:	e8 d1 e2 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	_M_format_arg(__id);
  407b79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407b7d:	48 8b 00             	mov    (%rax),%rax
  407b80:	48 83 c0 08          	add    $0x8,%rax
  407b84:	48 8b 08             	mov    (%rax),%rcx
  407b87:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407b8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407b8f:	48 89 d6             	mov    %rdx,%rsi
  407b92:	48 89 c7             	mov    %rax,%rdi
  407b95:	ff d1                	call   *%rcx
	if (begin() == end() || *begin() != '}')
  407b97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407b9b:	48 89 c7             	mov    %rax,%rdi
  407b9e:	e8 e1 e1 ff ff       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  407ba3:	48 89 c3             	mov    %rax,%rbx
  407ba6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407baa:	48 89 c7             	mov    %rax,%rdi
  407bad:	e8 02 e2 ff ff       	call   405db4 <_ZNKSt8__format8_ScannerIcE3endEv>
  407bb2:	48 39 c3             	cmp    %rax,%rbx
  407bb5:	74 13                	je     407bca <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1cc>
  407bb7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407bbb:	48 89 c7             	mov    %rax,%rdi
  407bbe:	e8 c1 e1 ff ff       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  407bc3:	0f b6 00             	movzbl (%rax),%eax
  407bc6:	3c 7d                	cmp    $0x7d,%al
  407bc8:	74 07                	je     407bd1 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1d3>
  407bca:	b8 01 00 00 00       	mov    $0x1,%eax
  407bcf:	eb 05                	jmp    407bd6 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1d8>
  407bd1:	b8 00 00 00 00       	mov    $0x0,%eax
  407bd6:	84 c0                	test   %al,%al
  407bd8:	74 05                	je     407bdf <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1e1>
	  __format::__unmatched_left_brace_in_format_string();
  407bda:	e8 9d d4 ff ff       	call   40507c <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
	_M_pc.advance_to(begin() + 1); // Move past '}'
  407bdf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407be3:	48 8d 58 08          	lea    0x8(%rax),%rbx
  407be7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407beb:	48 89 c7             	mov    %rax,%rdi
  407bee:	e8 91 e1 ff ff       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  407bf3:	48 83 c0 01          	add    $0x1,%rax
  407bf7:	48 89 c6             	mov    %rax,%rsi
  407bfa:	48 89 df             	mov    %rbx,%rdi
  407bfd:	e8 48 e2 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
      }
  407c02:	90                   	nop
  407c03:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  407c07:	c9                   	leave
  407c08:	c3                   	ret
  407c09:	90                   	nop

0000000000407c0a <_ZNKSt6ranges8__access6_BeginclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  407c0a:	55                   	push   %rbp
  407c0b:	48 89 e5             	mov    %rsp,%rbp
  407c0e:	48 83 ec 10          	sub    $0x10,%rsp
  407c12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  407c1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c1e:	48 89 c7             	mov    %rax,%rdi
  407c21:	e8 f2 22 00 00       	call   409f18 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5beginEv>
	}
  407c26:	c9                   	leave
  407c27:	c3                   	ret

0000000000407c28 <_ZNKSt6ranges8__access4_EndclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  407c28:	55                   	push   %rbp
  407c29:	48 89 e5             	mov    %rsp,%rbp
  407c2c:	48 83 ec 10          	sub    $0x10,%rsp
  407c30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c34:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  407c38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c3c:	48 89 c7             	mov    %rax,%rdi
  407c3f:	e8 e6 22 00 00       	call   409f2a <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE3endEv>
	}
  407c44:	c9                   	leave
  407c45:	c3                   	ret

0000000000407c46 <_ZNKSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5emptyEv>:
      constexpr bool empty() const { return ranges::empty(_M_base); }
  407c46:	55                   	push   %rbp
  407c47:	48 89 e5             	mov    %rsp,%rbp
  407c4a:	48 83 ec 10          	sub    $0x10,%rsp
  407c4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c56:	48 89 c6             	mov    %rax,%rsi
  407c59:	bf 07 a0 41 00       	mov    $0x41a007,%edi
  407c5e:	e8 03 00 00 00       	call   407c66 <_ZNKSt6ranges8__access6_EmptyclIRKNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEbOT_>
  407c63:	c9                   	leave
  407c64:	c3                   	ret
  407c65:	90                   	nop

0000000000407c66 <_ZNKSt6ranges8__access6_EmptyclIRKNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEbOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  407c66:	55                   	push   %rbp
  407c67:	48 89 e5             	mov    %rsp,%rbp
  407c6a:	48 83 ec 10          	sub    $0x10,%rsp
  407c6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c72:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return bool(__t.empty());
  407c76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c7a:	48 89 c7             	mov    %rax,%rdi
  407c7d:	e8 02 00 00 00       	call   407c84 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5emptyEv>
	}
  407c82:	c9                   	leave
  407c83:	c3                   	ret

0000000000407c84 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5emptyEv>:
      begin() requires (!copyable<_It>)
      { return std::move(_M_begin); }

      constexpr _Sent end() const { return _M_end; }

      constexpr bool empty() const { return _M_begin == _M_end; }
  407c84:	55                   	push   %rbp
  407c85:	48 89 e5             	mov    %rsp,%rbp
  407c88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407c8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c90:	48 8b 10             	mov    (%rax),%rdx
  407c93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407c97:	48 8b 40 08          	mov    0x8(%rax),%rax
  407c9b:	48 39 c2             	cmp    %rax,%rdx
  407c9e:	0f 94 c0             	sete   %al
  407ca1:	5d                   	pop    %rbp
  407ca2:	c3                   	ret
  407ca3:	90                   	nop

0000000000407ca4 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE8_M_beginIS4_S4_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  407ca4:	55                   	push   %rbp
  407ca5:	48 89 e5             	mov    %rsp,%rbp
  407ca8:	48 83 ec 20          	sub    $0x20,%rsp
  407cac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407cb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407cb4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  407cb8:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  407cbc:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407cc0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407cc4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  407cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407ccc:	48 89 c7             	mov    %rax,%rdi
  407ccf:	e8 f6 22 00 00       	call   409fca <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  407cd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407cd8:	c9                   	leave
  407cd9:	c3                   	ret

0000000000407cda <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5beginEv>:
      constexpr auto begin()
  407cda:	55                   	push   %rbp
  407cdb:	48 89 e5             	mov    %rsp,%rbp
  407cde:	53                   	push   %rbx
  407cdf:	48 83 ec 18          	sub    $0x18,%rsp
  407ce3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407ce7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  407ceb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407cef:	48 89 c6             	mov    %rax,%rsi
  407cf2:	bf 05 a0 41 00       	mov    $0x41a005,%edi
  407cf7:	e8 2c ff ff ff       	call   407c28 <_ZNKSt6ranges8__access4_EndclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>
  407cfc:	48 89 c3             	mov    %rax,%rbx
  407cff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407d03:	48 89 c6             	mov    %rax,%rsi
  407d06:	bf 04 a0 41 00       	mov    $0x41a004,%edi
  407d0b:	e8 fa fe ff ff       	call   407c0a <_ZNKSt6ranges8__access6_BeginclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>
  407d10:	48 89 c2             	mov    %rax,%rdx
  407d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d17:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  407d1b:	48 89 d9             	mov    %rbx,%rcx
  407d1e:	48 89 c7             	mov    %rax,%rdi
  407d21:	e8 7e ff ff ff       	call   407ca4 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE8_M_beginIS4_S4_EEDaT_T0_>
  407d26:	90                   	nop
  407d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407d2b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  407d2f:	c9                   	leave
  407d30:	c3                   	ret
  407d31:	90                   	nop

0000000000407d32 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>:
      _M_parse_fill_and_align(iterator __first, iterator __last) noexcept
  407d32:	55                   	push   %rbp
  407d33:	48 89 e5             	mov    %rsp,%rbp
  407d36:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  407d3d:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  407d44:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  407d4b:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	if (*__first != '{')
  407d52:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  407d59:	0f b6 00             	movzbl (%rax),%eax
  407d5c:	3c 7b                	cmp    $0x7b,%al
  407d5e:	0f 84 57 01 00 00    	je     407ebb <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x189>
		_Utf32_view<ranges::subrange<iterator>> __uv({__first, __last});
  407d64:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  407d6b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  407d72:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  407d76:	48 89 ce             	mov    %rcx,%rsi
  407d79:	48 89 c7             	mov    %rax,%rdi
  407d7c:	e8 bb 21 00 00       	call   409f3c <_ZNSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EEC1IS2_EET_S2_>
  407d81:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  407d85:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  407d89:	48 89 d6             	mov    %rdx,%rsi
  407d8c:	48 89 c7             	mov    %rax,%rdi
  407d8f:	e8 f2 21 00 00       	call   409f86 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEEC1EOS6_>
		if (!__uv.empty())
  407d94:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  407d98:	48 89 c7             	mov    %rax,%rdi
  407d9b:	e8 a6 fe ff ff       	call   407c46 <_ZNKSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5emptyEv>
  407da0:	83 f0 01             	xor    $0x1,%eax
  407da3:	84 c0                	test   %al,%al
  407da5:	0f 84 bc 00 00 00    	je     407e67 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
		    auto __beg = __uv.begin();
  407dab:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  407db2:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  407db6:	48 89 d6             	mov    %rdx,%rsi
  407db9:	48 89 c7             	mov    %rax,%rdi
  407dbc:	e8 19 ff ff ff       	call   407cda <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5beginEv>
		    char32_t __c = *__beg++;
  407dc1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  407dc5:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
  407dcc:	ba 00 00 00 00       	mov    $0x0,%edx
  407dd1:	48 89 ce             	mov    %rcx,%rsi
  407dd4:	48 89 c7             	mov    %rax,%rdi
  407dd7:	e8 82 22 00 00       	call   40a05e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEi>
  407ddc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  407de0:	48 89 c7             	mov    %rax,%rdi
  407de3:	e8 d0 22 00 00       	call   40a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  407de8:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    if (__is_scalar_value(__c))
  407deb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407dee:	89 c7                	mov    %eax,%edi
  407df0:	e8 68 ce ff ff       	call   404c5d <_ZNSt9__unicode17__is_scalar_valueEDi>
  407df5:	84 c0                	test   %al,%al
  407df7:	74 6e                	je     407e67 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
		      if (auto __next = __beg.base(); __next != __last)
  407df9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  407e00:	48 89 c7             	mov    %rax,%rdi
  407e03:	e8 da 22 00 00       	call   40a0e2 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>
  407e08:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  407e0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407e10:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
  407e17:	74 4e                	je     407e67 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
			if (_Align __align = _S_align(*__next))
  407e19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407e1d:	0f b6 00             	movzbl (%rax),%eax
  407e20:	0f be c0             	movsbl %al,%eax
  407e23:	89 c7                	mov    %eax,%edi
  407e25:	e8 d2 22 00 00       	call   40a0fc <_ZNSt8__format5_SpecIcE8_S_alignEc>
  407e2a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  407e2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  407e31:	74 34                	je     407e67 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
			    _M_fill = __c;
  407e33:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  407e3a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  407e3d:	89 50 08             	mov    %edx,0x8(%rax)
			    _M_align = __align;
  407e40:	8b 45 ec             	mov    -0x14(%rbp),%eax
  407e43:	83 e0 03             	and    $0x3,%eax
  407e46:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  407e4d:	83 e0 03             	and    $0x3,%eax
  407e50:	89 c1                	mov    %eax,%ecx
  407e52:	0f b6 02             	movzbl (%rdx),%eax
  407e55:	83 e0 fc             	and    $0xfffffffc,%eax
  407e58:	09 c8                	or     %ecx,%eax
  407e5a:	88 02                	mov    %al,(%rdx)
			    return ++__next;
  407e5c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  407e61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407e65:	eb 5b                	jmp    407ec2 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x190>
	    if (_Align __align = _S_align(__first[0]))
  407e67:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  407e6e:	0f b6 00             	movzbl (%rax),%eax
  407e71:	0f be c0             	movsbl %al,%eax
  407e74:	89 c7                	mov    %eax,%edi
  407e76:	e8 81 22 00 00       	call   40a0fc <_ZNSt8__format5_SpecIcE8_S_alignEc>
  407e7b:	89 45 e8             	mov    %eax,-0x18(%rbp)
  407e7e:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  407e82:	74 37                	je     407ebb <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x189>
		_M_fill = ' ';
  407e84:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  407e8b:	c7 40 08 20 00 00 00 	movl   $0x20,0x8(%rax)
		_M_align = __align;
  407e92:	8b 45 e8             	mov    -0x18(%rbp),%eax
  407e95:	83 e0 03             	and    $0x3,%eax
  407e98:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  407e9f:	83 e0 03             	and    $0x3,%eax
  407ea2:	89 c1                	mov    %eax,%ecx
  407ea4:	0f b6 02             	movzbl (%rdx),%eax
  407ea7:	83 e0 fc             	and    $0xfffffffc,%eax
  407eaa:	09 c8                	or     %ecx,%eax
  407eac:	88 02                	mov    %al,(%rdx)
		return __first + 1;
  407eae:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  407eb5:	48 83 c0 01          	add    $0x1,%rax
  407eb9:	eb 07                	jmp    407ec2 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x190>
	return __first;
  407ebb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
      }
  407ec2:	c9                   	leave
  407ec3:	c3                   	ret

0000000000407ec4 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>:
      _M_parse_width(iterator __first, iterator __last,
  407ec4:	55                   	push   %rbp
  407ec5:	48 89 e5             	mov    %rsp,%rbp
  407ec8:	48 83 ec 30          	sub    $0x30,%rsp
  407ecc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407ed0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407ed4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  407ed8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	bool __arg_id = false;
  407edc:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
	if (*__first == '0')
  407ee0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407ee4:	0f b6 00             	movzbl (%rax),%eax
  407ee7:	3c 30                	cmp    $0x30,%al
  407ee9:	75 0a                	jne    407ef5 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x31>
	  __throw_format_error("format error: width must be non-zero in "
  407eeb:	bf a8 a1 41 00       	mov    $0x41a1a8,%edi
  407ef0:	e8 34 d1 ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
  407ef5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407ef9:	48 8d 78 04          	lea    0x4(%rax),%rdi
  407efd:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407f01:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  407f05:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  407f09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f0d:	49 89 c8             	mov    %rcx,%r8
  407f10:	48 89 d1             	mov    %rdx,%rcx
  407f13:	48 89 fa             	mov    %rdi,%rdx
  407f16:	48 89 c7             	mov    %rax,%rdi
  407f19:	e8 1d 22 00 00       	call   40a13b <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>
  407f1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__next != __first)
  407f22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407f26:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407f2a:	74 30                	je     407f5c <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x98>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
  407f2c:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  407f30:	84 c0                	test   %al,%al
  407f32:	74 07                	je     407f3b <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x77>
  407f34:	ba 02 00 00 00       	mov    $0x2,%edx
  407f39:	eb 05                	jmp    407f40 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x7c>
  407f3b:	ba 01 00 00 00       	mov    $0x1,%edx
  407f40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f44:	0f b6 d2             	movzbl %dl,%edx
  407f47:	83 e2 03             	and    $0x3,%edx
  407f4a:	89 d1                	mov    %edx,%ecx
  407f4c:	c1 e1 07             	shl    $0x7,%ecx
  407f4f:	0f b7 10             	movzwl (%rax),%edx
  407f52:	66 81 e2 7f fe       	and    $0xfe7f,%dx
  407f57:	09 ca                	or     %ecx,%edx
  407f59:	66 89 10             	mov    %dx,(%rax)
	return __next;
  407f5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  407f60:	c9                   	leave
  407f61:	c3                   	ret

0000000000407f62 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>:
      _M_parse_precision(iterator __first, iterator __last,
  407f62:	55                   	push   %rbp
  407f63:	48 89 e5             	mov    %rsp,%rbp
  407f66:	48 83 ec 30          	sub    $0x30,%rsp
  407f6a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407f6e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407f72:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  407f76:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (__first[0] != '.')
  407f7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f7e:	0f b6 00             	movzbl (%rax),%eax
  407f81:	3c 2e                	cmp    $0x2e,%al
  407f83:	74 09                	je     407f8e <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x2c>
	  return __first;
  407f85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f89:	e9 8a 00 00 00       	jmp    408018 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0xb6>
	iterator __next = ++__first;
  407f8e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  407f93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f97:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	bool __arg_id = false;
  407f9b:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
	if (__next != __last)
  407f9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fa3:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  407fa7:	74 2d                	je     407fd6 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x74>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
  407fa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407fad:	48 8d 78 06          	lea    0x6(%rax),%rdi
  407fb1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  407fb5:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  407fb9:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  407fbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407fc1:	49 89 c8             	mov    %rcx,%r8
  407fc4:	48 89 d1             	mov    %rdx,%rcx
  407fc7:	48 89 fa             	mov    %rdi,%rdx
  407fca:	48 89 c7             	mov    %rax,%rdi
  407fcd:	e8 69 21 00 00       	call   40a13b <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>
  407fd2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__next == __first)
  407fd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407fda:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  407fde:	75 0a                	jne    407fea <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x88>
	  __throw_format_error("format error: missing precision after '.' in "
  407fe0:	bf e0 a1 41 00       	mov    $0x41a1e0,%edi
  407fe5:	e8 3f d0 ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
  407fea:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  407fee:	84 c0                	test   %al,%al
  407ff0:	74 07                	je     407ff9 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x97>
  407ff2:	ba 02 00 00 00       	mov    $0x2,%edx
  407ff7:	eb 05                	jmp    407ffe <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x9c>
  407ff9:	ba 01 00 00 00       	mov    $0x1,%edx
  407ffe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408002:	83 e2 03             	and    $0x3,%edx
  408005:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
  408008:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  40800c:	83 e2 f9             	and    $0xfffffff9,%edx
  40800f:	09 ca                	or     %ecx,%edx
  408011:	88 50 01             	mov    %dl,0x1(%rax)
	return __next;
  408014:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  408018:	c9                   	leave
  408019:	c3                   	ret

000000000040801a <_ZNSt8__detail16__to_chars_len_2IjEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  40801a:	55                   	push   %rbp
  40801b:	48 89 e5             	mov    %rsp,%rbp
  40801e:	48 83 ec 10          	sub    $0x10,%rsp
  408022:	89 7d fc             	mov    %edi,-0x4(%rbp)
    { return std::__bit_width(__value); }
  408025:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408028:	89 c7                	mov    %eax,%edi
  40802a:	e8 8b c5 ff ff       	call   4045ba <_ZSt11__bit_widthIjEiT_>
  40802f:	c9                   	leave
  408030:	c3                   	ret

0000000000408031 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  408031:	55                   	push   %rbp
  408032:	48 89 e5             	mov    %rsp,%rbp
  408035:	48 83 ec 50          	sub    $0x50,%rsp
  408039:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40803d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408041:	89 55 bc             	mov    %edx,-0x44(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  408044:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408047:	89 c7                	mov    %eax,%edi
  408049:	e8 cc ff ff ff       	call   40801a <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  40804e:	83 c0 03             	add    $0x3,%eax
  408051:	c1 e8 02             	shr    $0x2,%eax
  408054:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408057:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40805b:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40805f:	48 89 c2             	mov    %rax,%rdx
  408062:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408065:	48 39 c2             	cmp    %rax,%rdx
  408068:	0f 9c c0             	setl   %al
  40806b:	0f b6 c0             	movzbl %al,%eax
  40806e:	48 85 c0             	test   %rax,%rax
  408071:	74 1c                	je     40808f <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x5e>
	  __res.ptr = __last;
  408073:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408077:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  40807b:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408082:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408086:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40808a:	e9 db 00 00 00       	jmp    40816a <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x139>
      constexpr char __digits[] = {
  40808f:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  408096:	35 36 37
  408099:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  4080a0:	64 65 66
  4080a3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4080a7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      unsigned __pos = __len - 1;
  4080ab:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4080ae:	83 e8 01             	sub    $0x1,%eax
  4080b1:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  4080b4:	eb 4b                	jmp    408101 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0xd0>
	  auto __num = __val & 0xF;
  4080b6:	8b 45 bc             	mov    -0x44(%rbp),%eax
  4080b9:	83 e0 0f             	and    $0xf,%eax
  4080bc:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 4;
  4080bf:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[__pos] = __digits[__num];
  4080c3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4080c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4080ca:	48 01 c2             	add    %rax,%rdx
  4080cd:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4080d0:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  4080d5:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  4080d7:	8b 45 bc             	mov    -0x44(%rbp),%eax
  4080da:	83 e0 0f             	and    $0xf,%eax
  4080dd:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 4;
  4080e0:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[__pos - 1] = __digits[__num];
  4080e4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4080e7:	83 e8 01             	sub    $0x1,%eax
  4080ea:	89 c2                	mov    %eax,%edx
  4080ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4080f0:	48 01 c2             	add    %rax,%rdx
  4080f3:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4080f6:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  4080fb:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  4080fd:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  408101:	81 7d bc ff 00 00 00 	cmpl   $0xff,-0x44(%rbp)
  408108:	77 ac                	ja     4080b6 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x85>
      if (__val >= 0x10)
  40810a:	83 7d bc 0f          	cmpl   $0xf,-0x44(%rbp)
  40810e:	76 2f                	jbe    40813f <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x10e>
	  const auto __num = __val & 0xF;
  408110:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408113:	83 e0 0f             	and    $0xf,%eax
  408116:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val >>= 4;
  408119:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[1] = __digits[__num];
  40811d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408121:	48 8d 50 01          	lea    0x1(%rax),%rdx
  408125:	8b 45 f4             	mov    -0xc(%rbp),%eax
  408128:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  40812d:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  40812f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408132:	0f b6 54 05 d0       	movzbl -0x30(%rbp,%rax,1),%edx
  408137:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40813b:	88 10                	mov    %dl,(%rax)
  40813d:	eb 0e                	jmp    40814d <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x11c>
	__first[0] = __digits[__val];
  40813f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408142:	0f b6 54 05 d0       	movzbl -0x30(%rbp,%rax,1),%edx
  408147:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40814b:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  40814d:	8b 55 f8             	mov    -0x8(%rbp),%edx
  408150:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408154:	48 01 d0             	add    %rdx,%rax
  408157:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  40815b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  408162:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408166:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  40816a:	c9                   	leave
  40816b:	c3                   	ret

000000000040816c <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  40816c:	55                   	push   %rbp
  40816d:	48 89 e5             	mov    %rsp,%rbp
  408170:	48 83 ec 40          	sub    $0x40,%rsp
  408174:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408178:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40817c:	89 55 cc             	mov    %edx,-0x34(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  40817f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408182:	be 0a 00 00 00       	mov    $0xa,%esi
  408187:	89 c7                	mov    %eax,%edi
  408189:	e8 e7 c8 ff ff       	call   404a75 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  40818e:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408191:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408195:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  408199:	48 89 c2             	mov    %rax,%rdx
  40819c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40819f:	48 39 c2             	cmp    %rax,%rdx
  4081a2:	0f 9c c0             	setl   %al
  4081a5:	0f b6 c0             	movzbl %al,%eax
  4081a8:	48 85 c0             	test   %rax,%rax
  4081ab:	74 19                	je     4081c6 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_+0x5a>
	  __res.ptr = __last;
  4081ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4081b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  4081b5:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  4081bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4081c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4081c4:	eb 31                	jmp    4081f7 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_+0x8b>
      __detail::__to_chars_10_impl(__first, __len, __val);
  4081c6:	8b 55 cc             	mov    -0x34(%rbp),%edx
  4081c9:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  4081cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4081d0:	89 ce                	mov    %ecx,%esi
  4081d2:	48 89 c7             	mov    %rax,%rdi
  4081d5:	e8 cf e7 ff ff       	call   4069a9 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
      __res.ptr = __first + __len;
  4081da:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4081dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4081e1:	48 01 d0             	add    %rdx,%rax
  4081e4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4081e8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4081ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4081f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4081f7:	c9                   	leave
  4081f8:	c3                   	ret

00000000004081f9 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  4081f9:	55                   	push   %rbp
  4081fa:	48 89 e5             	mov    %rsp,%rbp
  4081fd:	48 83 ec 40          	sub    $0x40,%rsp
  408201:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408205:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408209:	89 55 cc             	mov    %edx,-0x34(%rbp)
      unsigned __len = 0;
  40820c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  408213:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408216:	89 c7                	mov    %eax,%edi
  408218:	e8 fd fd ff ff       	call   40801a <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  40821d:	83 c0 02             	add    $0x2,%eax
  408220:	89 c2                	mov    %eax,%edx
  408222:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  408227:	48 0f af c2          	imul   %rdx,%rax
  40822b:	48 c1 e8 20          	shr    $0x20,%rax
  40822f:	d1 e8                	shr    %eax
  408231:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408234:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408238:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  40823c:	48 89 c2             	mov    %rax,%rdx
  40823f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408242:	48 39 c2             	cmp    %rax,%rdx
  408245:	0f 9c c0             	setl   %al
  408248:	0f b6 c0             	movzbl %al,%eax
  40824b:	48 85 c0             	test   %rax,%rax
  40824e:	74 1c                	je     40826c <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x73>
	  __res.ptr = __last;
  408250:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408254:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408258:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  40825f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408263:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408267:	e9 b8 00 00 00       	jmp    408324 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x12b>
      unsigned __pos = __len - 1;
  40826c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40826f:	83 e8 01             	sub    $0x1,%eax
  408272:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  408275:	eb 49                	jmp    4082c0 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0xc7>
	  auto __num = __val & 7;
  408277:	8b 45 cc             	mov    -0x34(%rbp),%eax
  40827a:	83 e0 07             	and    $0x7,%eax
  40827d:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 3;
  408280:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[__pos] = '0' + __num;
  408284:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408287:	8d 48 30             	lea    0x30(%rax),%ecx
  40828a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40828d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408291:	48 01 d0             	add    %rdx,%rax
  408294:	89 ca                	mov    %ecx,%edx
  408296:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  408298:	8b 45 cc             	mov    -0x34(%rbp),%eax
  40829b:	83 e0 07             	and    $0x7,%eax
  40829e:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 3;
  4082a1:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[__pos - 1] = '0' + __num;
  4082a5:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4082a8:	8d 50 30             	lea    0x30(%rax),%edx
  4082ab:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4082ae:	83 e8 01             	sub    $0x1,%eax
  4082b1:	89 c1                	mov    %eax,%ecx
  4082b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082b7:	48 01 c8             	add    %rcx,%rax
  4082ba:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  4082bc:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  4082c0:	83 7d cc 3f          	cmpl   $0x3f,-0x34(%rbp)
  4082c4:	77 b1                	ja     408277 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x7e>
      if (__val >= 010)
  4082c6:	83 7d cc 07          	cmpl   $0x7,-0x34(%rbp)
  4082ca:	76 2d                	jbe    4082f9 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x100>
	  auto const __num = __val & 7;
  4082cc:	8b 45 cc             	mov    -0x34(%rbp),%eax
  4082cf:	83 e0 07             	and    $0x7,%eax
  4082d2:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val >>= 3;
  4082d5:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[1] = '0' + __num;
  4082d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4082dc:	8d 50 30             	lea    0x30(%rax),%edx
  4082df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082e3:	48 83 c0 01          	add    $0x1,%rax
  4082e7:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  4082e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  4082ec:	83 c0 30             	add    $0x30,%eax
  4082ef:	89 c2                	mov    %eax,%edx
  4082f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4082f5:	88 10                	mov    %dl,(%rax)
  4082f7:	eb 0e                	jmp    408307 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x10e>
	__first[0] = '0' + __val;
  4082f9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  4082fc:	83 c0 30             	add    $0x30,%eax
  4082ff:	89 c2                	mov    %eax,%edx
  408301:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408305:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408307:	8b 55 f8             	mov    -0x8(%rbp),%edx
  40830a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40830e:	48 01 d0             	add    %rdx,%rax
  408311:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  408315:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  40831c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408320:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408324:	c9                   	leave
  408325:	c3                   	ret

0000000000408326 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  408326:	55                   	push   %rbp
  408327:	48 89 e5             	mov    %rsp,%rbp
  40832a:	48 83 ec 40          	sub    $0x40,%rsp
  40832e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408332:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408336:	89 55 cc             	mov    %edx,-0x34(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  408339:	8b 45 cc             	mov    -0x34(%rbp),%eax
  40833c:	89 c7                	mov    %eax,%edi
  40833e:	e8 d7 fc ff ff       	call   40801a <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  408343:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408346:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40834a:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  40834e:	48 89 c2             	mov    %rax,%rdx
  408351:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408354:	48 39 c2             	cmp    %rax,%rdx
  408357:	0f 9c c0             	setl   %al
  40835a:	0f b6 c0             	movzbl %al,%eax
  40835d:	48 85 c0             	test   %rax,%rax
  408360:	74 19                	je     40837b <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x55>
	  __res.ptr = __last;
  408362:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408366:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  40836a:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408371:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408375:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408379:	eb 58                	jmp    4083d3 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0xad>
      unsigned __pos = __len - 1;
  40837b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40837e:	83 e8 01             	sub    $0x1,%eax
  408381:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  408384:	eb 23                	jmp    4083a9 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x83>
	  __first[__pos--] = '0' + (__val & 1);
  408386:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408389:	83 e0 01             	and    $0x1,%eax
  40838c:	83 c0 30             	add    $0x30,%eax
  40838f:	89 c6                	mov    %eax,%esi
  408391:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  408395:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408398:	8d 50 ff             	lea    -0x1(%rax),%edx
  40839b:	89 55 fc             	mov    %edx,-0x4(%rbp)
  40839e:	89 c0                	mov    %eax,%eax
  4083a0:	48 01 c8             	add    %rcx,%rax
  4083a3:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  4083a6:	d1 6d cc             	shrl   -0x34(%rbp)
      while (__pos)
  4083a9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4083ad:	75 d7                	jne    408386 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x60>
      __first[0] = '1';
  4083af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4083b3:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  4083b6:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4083b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4083bd:	48 01 d0             	add    %rdx,%rax
  4083c0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4083c4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4083cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4083cf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4083d3:	c9                   	leave
  4083d4:	c3                   	ret

00000000004083d5 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  4083d5:	55                   	push   %rbp
  4083d6:	48 89 e5             	mov    %rsp,%rbp
  4083d9:	48 83 ec 70          	sub    $0x70,%rsp
  4083dd:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4083e1:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4083e5:	89 55 9c             	mov    %edx,-0x64(%rbp)
  4083e8:	89 4d 98             	mov    %ecx,-0x68(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  4083eb:	8b 55 98             	mov    -0x68(%rbp),%edx
  4083ee:	8b 45 9c             	mov    -0x64(%rbp),%eax
  4083f1:	89 d6                	mov    %edx,%esi
  4083f3:	89 c7                	mov    %eax,%edi
  4083f5:	e8 7b c6 ff ff       	call   404a75 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  4083fa:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  4083fd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408401:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  408405:	48 89 c2             	mov    %rax,%rdx
  408408:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40840b:	48 39 c2             	cmp    %rax,%rdx
  40840e:	0f 9c c0             	setl   %al
  408411:	0f b6 c0             	movzbl %al,%eax
  408414:	48 85 c0             	test   %rax,%rax
  408417:	74 1c                	je     408435 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0x60>
	  __res.ptr = __last;
  408419:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40841d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408421:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408428:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40842c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408430:	e9 bf 00 00 00       	jmp    4084f4 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0x11f>
      unsigned __pos = __len - 1;
  408435:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408438:	83 e8 01             	sub    $0x1,%eax
  40843b:	89 45 fc             	mov    %eax,-0x4(%rbp)
      constexpr char __digits[] = {
  40843e:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  408445:	35 36 37
  408448:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  40844f:	64 65 66
  408452:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  408456:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40845a:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  408461:	6c 6d 6e
  408464:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  40846b:	74 75 76
  40846e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  408472:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  408476:	c7 45 d0 77 78 79 7a 	movl   $0x7a797877,-0x30(%rbp)
      while (__val >= (unsigned)__base)
  40847d:	eb 42                	jmp    4084c1 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0xec>
	  auto const __quo = __val / __base;
  40847f:	8b 7d 98             	mov    -0x68(%rbp),%edi
  408482:	8b 45 9c             	mov    -0x64(%rbp),%eax
  408485:	ba 00 00 00 00       	mov    $0x0,%edx
  40848a:	f7 f7                	div    %edi
  40848c:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  auto const __rem = __val % __base;
  40848f:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  408492:	8b 45 9c             	mov    -0x64(%rbp),%eax
  408495:	ba 00 00 00 00       	mov    $0x0,%edx
  40849a:	f7 f1                	div    %ecx
  40849c:	89 55 f0             	mov    %edx,-0x10(%rbp)
	  __first[__pos--] = __digits[__rem];
  40849f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4084a2:	0f b6 54 05 b0       	movzbl -0x50(%rbp,%rax,1),%edx
  4084a7:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  4084ab:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4084ae:	8d 48 ff             	lea    -0x1(%rax),%ecx
  4084b1:	89 4d fc             	mov    %ecx,-0x4(%rbp)
  4084b4:	89 c0                	mov    %eax,%eax
  4084b6:	48 01 f0             	add    %rsi,%rax
  4084b9:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  4084bb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4084be:	89 45 9c             	mov    %eax,-0x64(%rbp)
      while (__val >= (unsigned)__base)
  4084c1:	8b 45 98             	mov    -0x68(%rbp),%eax
  4084c4:	39 45 9c             	cmp    %eax,-0x64(%rbp)
  4084c7:	73 b6                	jae    40847f <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0xaa>
      *__first = __digits[__val];
  4084c9:	8b 45 9c             	mov    -0x64(%rbp),%eax
  4084cc:	0f b6 54 05 b0       	movzbl -0x50(%rbp,%rax,1),%edx
  4084d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4084d5:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  4084d7:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4084da:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4084de:	48 01 d0             	add    %rdx,%rax
  4084e1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4084e5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4084ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4084f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4084f4:	c9                   	leave
  4084f5:	c3                   	ret

00000000004084f6 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  4084f6:	55                   	push   %rbp
  4084f7:	48 89 e5             	mov    %rsp,%rbp
  4084fa:	48 83 ec 10          	sub    $0x10,%rsp
  4084fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__bit_width(__value); }
  408502:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408506:	48 89 c7             	mov    %rax,%rdi
  408509:	e8 c8 1d 00 00       	call   40a2d6 <_ZSt11__bit_widthImEiT_>
  40850e:	c9                   	leave
  40850f:	c3                   	ret

0000000000408510 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  408510:	55                   	push   %rbp
  408511:	48 89 e5             	mov    %rsp,%rbp
  408514:	48 83 ec 60          	sub    $0x60,%rsp
  408518:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40851c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  408520:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  408524:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408528:	48 89 c7             	mov    %rax,%rdi
  40852b:	e8 c6 ff ff ff       	call   4084f6 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  408530:	83 c0 03             	add    $0x3,%eax
  408533:	c1 e8 02             	shr    $0x2,%eax
  408536:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408539:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40853d:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  408541:	48 89 c2             	mov    %rax,%rdx
  408544:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408547:	48 39 c2             	cmp    %rax,%rdx
  40854a:	0f 9c c0             	setl   %al
  40854d:	0f b6 c0             	movzbl %al,%eax
  408550:	48 85 c0             	test   %rax,%rax
  408553:	74 1c                	je     408571 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x61>
	  __res.ptr = __last;
  408555:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  408559:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  40855d:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  408564:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408568:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40856c:	e9 04 01 00 00       	jmp    408675 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x165>
      constexpr char __digits[] = {
  408571:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  408578:	35 36 37
  40857b:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  408582:	64 65 66
  408585:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  408589:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      unsigned __pos = __len - 1;
  40858d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408590:	83 e8 01             	sub    $0x1,%eax
  408593:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  408596:	eb 5d                	jmp    4085f5 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0xe5>
	  auto __num = __val & 0xF;
  408598:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40859c:	83 e0 0f             	and    $0xf,%eax
  40859f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 4;
  4085a3:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[__pos] = __digits[__num];
  4085a8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4085ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4085af:	48 01 c2             	add    %rax,%rdx
  4085b2:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  4085b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4085ba:	48 01 c8             	add    %rcx,%rax
  4085bd:	0f b6 00             	movzbl (%rax),%eax
  4085c0:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  4085c2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4085c6:	83 e0 0f             	and    $0xf,%eax
  4085c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 4;
  4085cd:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[__pos - 1] = __digits[__num];
  4085d2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4085d5:	83 e8 01             	sub    $0x1,%eax
  4085d8:	89 c2                	mov    %eax,%edx
  4085da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4085de:	48 01 c2             	add    %rax,%rdx
  4085e1:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  4085e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4085e9:	48 01 c8             	add    %rcx,%rax
  4085ec:	0f b6 00             	movzbl (%rax),%eax
  4085ef:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  4085f1:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  4085f5:	48 81 7d a8 ff 00 00 	cmpq   $0xff,-0x58(%rbp)
  4085fc:	00
  4085fd:	77 99                	ja     408598 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x88>
      if (__val >= 0x10)
  4085ff:	48 83 7d a8 0f       	cmpq   $0xf,-0x58(%rbp)
  408604:	76 3e                	jbe    408644 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x134>
	  const auto __num = __val & 0xF;
  408606:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40860a:	83 e0 0f             	and    $0xf,%eax
  40860d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __val >>= 4;
  408611:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[1] = __digits[__num];
  408616:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40861a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40861e:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  408622:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408626:	48 01 c8             	add    %rcx,%rax
  408629:	0f b6 00             	movzbl (%rax),%eax
  40862c:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  40862e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  408632:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408636:	48 01 d0             	add    %rdx,%rax
  408639:	0f b6 10             	movzbl (%rax),%edx
  40863c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408640:	88 10                	mov    %dl,(%rax)
  408642:	eb 14                	jmp    408658 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x148>
	__first[0] = __digits[__val];
  408644:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  408648:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40864c:	48 01 d0             	add    %rdx,%rax
  40864f:	0f b6 10             	movzbl (%rax),%edx
  408652:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408656:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408658:	8b 55 f8             	mov    -0x8(%rbp),%edx
  40865b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40865f:	48 01 d0             	add    %rdx,%rax
  408662:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  408666:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  40866d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408671:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  408675:	c9                   	leave
  408676:	c3                   	ret

0000000000408677 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  408677:	55                   	push   %rbp
  408678:	48 89 e5             	mov    %rsp,%rbp
  40867b:	48 83 ec 40          	sub    $0x40,%rsp
  40867f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408683:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408687:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  40868b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40868f:	be 0a 00 00 00       	mov    $0xa,%esi
  408694:	48 89 c7             	mov    %rax,%rdi
  408697:	e8 61 c4 ff ff       	call   404afd <_ZNSt8__detail14__to_chars_lenImEEjT_i>
  40869c:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  40869f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4086a3:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4086a7:	48 89 c2             	mov    %rax,%rdx
  4086aa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4086ad:	48 39 c2             	cmp    %rax,%rdx
  4086b0:	0f 9c c0             	setl   %al
  4086b3:	0f b6 c0             	movzbl %al,%eax
  4086b6:	48 85 c0             	test   %rax,%rax
  4086b9:	74 19                	je     4086d4 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_+0x5d>
	  __res.ptr = __last;
  4086bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4086bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  4086c3:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  4086ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4086ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4086d2:	eb 32                	jmp    408706 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_+0x8f>
      __detail::__to_chars_10_impl(__first, __len, __val);
  4086d4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4086d8:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  4086db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4086df:	89 ce                	mov    %ecx,%esi
  4086e1:	48 89 c7             	mov    %rax,%rdi
  4086e4:	e8 65 e7 ff ff       	call   406e4e <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>
      __res.ptr = __first + __len;
  4086e9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4086ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4086f0:	48 01 d0             	add    %rdx,%rax
  4086f3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4086f7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4086fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408702:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408706:	c9                   	leave
  408707:	c3                   	ret

0000000000408708 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  408708:	55                   	push   %rbp
  408709:	48 89 e5             	mov    %rsp,%rbp
  40870c:	48 83 ec 50          	sub    $0x50,%rsp
  408710:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408714:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408718:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      unsigned __len = 0;
  40871c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  408723:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408727:	48 89 c7             	mov    %rax,%rdi
  40872a:	e8 c7 fd ff ff       	call   4084f6 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  40872f:	83 c0 02             	add    $0x2,%eax
  408732:	89 c2                	mov    %eax,%edx
  408734:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  408739:	48 0f af c2          	imul   %rdx,%rax
  40873d:	48 c1 e8 20          	shr    $0x20,%rax
  408741:	d1 e8                	shr    %eax
  408743:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408746:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40874a:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40874e:	48 89 c2             	mov    %rax,%rdx
  408751:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408754:	48 39 c2             	cmp    %rax,%rdx
  408757:	0f 9c c0             	setl   %al
  40875a:	0f b6 c0             	movzbl %al,%eax
  40875d:	48 85 c0             	test   %rax,%rax
  408760:	74 1c                	je     40877e <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x76>
	  __res.ptr = __last;
  408762:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408766:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  40876a:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  408771:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408775:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  408779:	e9 c8 00 00 00       	jmp    408846 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x13e>
      unsigned __pos = __len - 1;
  40877e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408781:	83 e8 01             	sub    $0x1,%eax
  408784:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  408787:	eb 51                	jmp    4087da <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0xd2>
	  auto __num = __val & 7;
  408789:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40878d:	83 e0 07             	and    $0x7,%eax
  408790:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 3;
  408794:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[__pos] = '0' + __num;
  408799:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40879d:	8d 48 30             	lea    0x30(%rax),%ecx
  4087a0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4087a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4087a7:	48 01 d0             	add    %rdx,%rax
  4087aa:	89 ca                	mov    %ecx,%edx
  4087ac:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  4087ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4087b2:	83 e0 07             	and    $0x7,%eax
  4087b5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 3;
  4087b9:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[__pos - 1] = '0' + __num;
  4087be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4087c2:	8d 50 30             	lea    0x30(%rax),%edx
  4087c5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4087c8:	83 e8 01             	sub    $0x1,%eax
  4087cb:	89 c1                	mov    %eax,%ecx
  4087cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4087d1:	48 01 c8             	add    %rcx,%rax
  4087d4:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  4087d6:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  4087da:	48 83 7d b8 3f       	cmpq   $0x3f,-0x48(%rbp)
  4087df:	77 a8                	ja     408789 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x81>
      if (__val >= 010)
  4087e1:	48 83 7d b8 07       	cmpq   $0x7,-0x48(%rbp)
  4087e6:	76 32                	jbe    40881a <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x112>
	  auto const __num = __val & 7;
  4087e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4087ec:	83 e0 07             	and    $0x7,%eax
  4087ef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __val >>= 3;
  4087f3:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[1] = '0' + __num;
  4087f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4087fc:	8d 50 30             	lea    0x30(%rax),%edx
  4087ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408803:	48 83 c0 01          	add    $0x1,%rax
  408807:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  408809:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40880d:	83 c0 30             	add    $0x30,%eax
  408810:	89 c2                	mov    %eax,%edx
  408812:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408816:	88 10                	mov    %dl,(%rax)
  408818:	eb 0f                	jmp    408829 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x121>
	__first[0] = '0' + __val;
  40881a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40881e:	83 c0 30             	add    $0x30,%eax
  408821:	89 c2                	mov    %eax,%edx
  408823:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408827:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408829:	8b 55 f8             	mov    -0x8(%rbp),%edx
  40882c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408830:	48 01 d0             	add    %rdx,%rax
  408833:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  408837:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  40883e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408842:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  408846:	c9                   	leave
  408847:	c3                   	ret

0000000000408848 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  408848:	55                   	push   %rbp
  408849:	48 89 e5             	mov    %rsp,%rbp
  40884c:	48 83 ec 40          	sub    $0x40,%rsp
  408850:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408854:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408858:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  40885c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408860:	48 89 c7             	mov    %rax,%rdi
  408863:	e8 8e fc ff ff       	call   4084f6 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  408868:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  40886b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40886f:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  408873:	48 89 c2             	mov    %rax,%rdx
  408876:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408879:	48 39 c2             	cmp    %rax,%rdx
  40887c:	0f 9c c0             	setl   %al
  40887f:	0f b6 c0             	movzbl %al,%eax
  408882:	48 85 c0             	test   %rax,%rax
  408885:	74 19                	je     4088a0 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x58>
	  __res.ptr = __last;
  408887:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40888b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  40888f:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408896:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40889a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40889e:	eb 5a                	jmp    4088fa <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0xb2>
      unsigned __pos = __len - 1;
  4088a0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4088a3:	83 e8 01             	sub    $0x1,%eax
  4088a6:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  4088a9:	eb 25                	jmp    4088d0 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x88>
	  __first[__pos--] = '0' + (__val & 1);
  4088ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4088af:	83 e0 01             	and    $0x1,%eax
  4088b2:	83 c0 30             	add    $0x30,%eax
  4088b5:	89 c6                	mov    %eax,%esi
  4088b7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4088bb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4088be:	8d 50 ff             	lea    -0x1(%rax),%edx
  4088c1:	89 55 fc             	mov    %edx,-0x4(%rbp)
  4088c4:	89 c0                	mov    %eax,%eax
  4088c6:	48 01 c8             	add    %rcx,%rax
  4088c9:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  4088cc:	48 d1 6d c8          	shrq   -0x38(%rbp)
      while (__pos)
  4088d0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4088d4:	75 d5                	jne    4088ab <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x63>
      __first[0] = '1';
  4088d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4088da:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  4088dd:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4088e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4088e4:	48 01 d0             	add    %rdx,%rax
  4088e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4088eb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4088f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4088fa:	c9                   	leave
  4088fb:	c3                   	ret

00000000004088fc <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  4088fc:	55                   	push   %rbp
  4088fd:	48 89 e5             	mov    %rsp,%rbp
  408900:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  408904:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  408908:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40890c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  408910:	89 4d 84             	mov    %ecx,-0x7c(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  408913:	8b 55 84             	mov    -0x7c(%rbp),%edx
  408916:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40891a:	89 d6                	mov    %edx,%esi
  40891c:	48 89 c7             	mov    %rax,%rdi
  40891f:	e8 d9 c1 ff ff       	call   404afd <_ZNSt8__detail14__to_chars_lenImEEjT_i>
  408924:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408927:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40892b:	48 2b 45 98          	sub    -0x68(%rbp),%rax
  40892f:	48 89 c2             	mov    %rax,%rdx
  408932:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408935:	48 39 c2             	cmp    %rax,%rdx
  408938:	0f 9c c0             	setl   %al
  40893b:	0f b6 c0             	movzbl %al,%eax
  40893e:	48 85 c0             	test   %rax,%rax
  408941:	74 1c                	je     40895f <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x63>
	  __res.ptr = __last;
  408943:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  408947:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  40894b:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  408952:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408956:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40895a:	e9 dc 00 00 00       	jmp    408a3b <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x13f>
      unsigned __pos = __len - 1;
  40895f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408962:	83 e8 01             	sub    $0x1,%eax
  408965:	89 45 fc             	mov    %eax,-0x4(%rbp)
      constexpr char __digits[] = {
  408968:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  40896f:	35 36 37
  408972:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  408979:	64 65 66
  40897c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408980:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  408984:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  40898b:	6c 6d 6e
  40898e:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  408995:	74 75 76
  408998:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40899c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4089a0:	c7 45 c0 77 78 79 7a 	movl   $0x7a797877,-0x40(%rbp)
      while (__val >= (unsigned)__base)
  4089a7:	eb 56                	jmp    4089ff <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x103>
	  auto const __quo = __val / __base;
  4089a9:	8b 45 84             	mov    -0x7c(%rbp),%eax
  4089ac:	48 63 f8             	movslq %eax,%rdi
  4089af:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4089b3:	ba 00 00 00 00       	mov    $0x0,%edx
  4089b8:	48 f7 f7             	div    %rdi
  4089bb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  auto const __rem = __val % __base;
  4089bf:	8b 45 84             	mov    -0x7c(%rbp),%eax
  4089c2:	48 63 c8             	movslq %eax,%rcx
  4089c5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4089c9:	ba 00 00 00 00       	mov    $0x0,%edx
  4089ce:	48 f7 f1             	div    %rcx
  4089d1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __first[__pos--] = __digits[__rem];
  4089d5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  4089d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4089dd:	48 01 d0             	add    %rdx,%rax
  4089e0:	0f b6 10             	movzbl (%rax),%edx
  4089e3:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  4089e7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4089ea:	8d 48 ff             	lea    -0x1(%rax),%ecx
  4089ed:	89 4d fc             	mov    %ecx,-0x4(%rbp)
  4089f0:	89 c0                	mov    %eax,%eax
  4089f2:	48 01 f0             	add    %rsi,%rax
  4089f5:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  4089f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4089fb:	48 89 45 88          	mov    %rax,-0x78(%rbp)
      while (__val >= (unsigned)__base)
  4089ff:	8b 45 84             	mov    -0x7c(%rbp),%eax
  408a02:	89 c0                	mov    %eax,%eax
  408a04:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
  408a08:	73 9f                	jae    4089a9 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0xad>
      *__first = __digits[__val];
  408a0a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  408a0e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  408a12:	48 01 d0             	add    %rdx,%rax
  408a15:	0f b6 10             	movzbl (%rax),%edx
  408a18:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408a1c:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408a1e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  408a21:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408a25:	48 01 d0             	add    %rdx,%rax
  408a28:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  408a2c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  408a33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408a37:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  408a3b:	c9                   	leave
  408a3c:	c3                   	ret

0000000000408a3d <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  408a3d:	55                   	push   %rbp
  408a3e:	48 89 e5             	mov    %rsp,%rbp
  408a41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  408a45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a49:	5d                   	pop    %rbp
  408a4a:	c3                   	ret

0000000000408a4b <_ZSt12construct_atIcJRcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
  408a4b:	55                   	push   %rbp
  408a4c:	48 89 e5             	mov    %rsp,%rbp
  408a4f:	53                   	push   %rbx
  408a50:	48 83 ec 18          	sub    $0x18,%rsp
  408a54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408a58:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  408a5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408a60:	48 89 c6             	mov    %rax,%rsi
  408a63:	bf 01 00 00 00       	mov    $0x1,%edi
  408a68:	e8 fd ba ff ff       	call   40456a <_ZnwmPv>
  408a6d:	48 89 c3             	mov    %rax,%rbx
  408a70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408a74:	48 89 c7             	mov    %rax,%rdi
  408a77:	e8 84 18 00 00       	call   40a300 <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>
  408a7c:	0f b6 00             	movzbl (%rax),%eax
  408a7f:	88 03                	mov    %al,(%rbx)
  408a81:	48 89 d8             	mov    %rbx,%rax
  408a84:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408a88:	c9                   	leave
  408a89:	c3                   	ret

0000000000408a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>:
      _M_length(size_type __length)
  408a8a:	55                   	push   %rbp
  408a8b:	48 89 e5             	mov    %rsp,%rbp
  408a8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408a92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_string_length = __length; }
  408a96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408a9a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408a9e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  408aa2:	90                   	nop
  408aa3:	5d                   	pop    %rbp
  408aa4:	c3                   	ret
  408aa5:	90                   	nop

0000000000408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
  408aa6:	55                   	push   %rbp
  408aa7:	48 89 e5             	mov    %rsp,%rbp
  408aaa:	48 83 ec 10          	sub    $0x10,%rsp
  408aae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!_M_is_local())
  408ab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ab6:	48 89 c7             	mov    %rax,%rdi
  408ab9:	e8 a0 e1 ff ff       	call   406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  408abe:	83 f0 01             	xor    $0x1,%eax
  408ac1:	84 c0                	test   %al,%al
  408ac3:	74 17                	je     408adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x36>
	  _M_destroy(_M_allocated_capacity);
  408ac5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ac9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ad1:	48 89 d6             	mov    %rdx,%rsi
  408ad4:	48 89 c7             	mov    %rax,%rdi
  408ad7:	e8 32 18 00 00       	call   40a30e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
      }
  408adc:	90                   	nop
  408add:	c9                   	leave
  408ade:	c3                   	ret
  408adf:	90                   	nop

0000000000408ae0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
  408ae0:	55                   	push   %rbp
  408ae1:	48 89 e5             	mov    %rsp,%rbp
  408ae4:	48 83 ec 10          	sub    $0x10,%rsp
  408ae8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  408aec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408af0:	48 83 c0 10          	add    $0x10,%rax
  408af4:	48 89 c7             	mov    %rax,%rdi
  408af7:	e8 8a 19 00 00       	call   40a486 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>
      }
  408afc:	c9                   	leave
  408afd:	c3                   	ret

0000000000408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
  408afe:	55                   	push   %rbp
  408aff:	48 89 e5             	mov    %rsp,%rbp
  408b02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408b06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_dataplus._M_p = __p; }
  408b0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408b0e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408b12:	48 89 10             	mov    %rdx,(%rax)
  408b15:	90                   	nop
  408b16:	5d                   	pop    %rbp
  408b17:	c3                   	ret

0000000000408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>:
      _M_capacity(size_type __capacity)
  408b18:	55                   	push   %rbp
  408b19:	48 89 e5             	mov    %rsp,%rbp
  408b1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408b20:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_allocated_capacity = __capacity; }
  408b24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408b28:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408b2c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  408b30:	90                   	nop
  408b31:	5d                   	pop    %rbp
  408b32:	c3                   	ret
  408b33:	90                   	nop

0000000000408b34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      const _CharT*
      data() const _GLIBCXX_NOEXCEPT
  408b34:	55                   	push   %rbp
  408b35:	48 89 e5             	mov    %rsp,%rbp
  408b38:	48 83 ec 10          	sub    $0x10,%rsp
  408b3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
  408b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408b44:	48 89 c7             	mov    %rax,%rdi
  408b47:	e8 d8 dd ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  408b4c:	c9                   	leave
  408b4d:	c3                   	ret

0000000000408b4e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
  408b4e:	55                   	push   %rbp
  408b4f:	48 89 e5             	mov    %rsp,%rbp
  408b52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  408b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408b5a:	5d                   	pop    %rbp
  408b5b:	c3                   	ret

0000000000408b5c <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_>:
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  408b5c:	55                   	push   %rbp
  408b5d:	48 89 e5             	mov    %rsp,%rbp
  408b60:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  408b64:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  408b68:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  408b6c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  408b70:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408b74:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408b78:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  408b7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  408b80:	90                   	nop
      return std::__distance(__first, __last,
  408b81:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408b85:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408b89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408b8d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      return __last - __first;
  408b91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408b95:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  408b99:	48 c1 f8 02          	sar    $0x2,%rax
			     std::__iterator_category(__first));
  408b9d:	90                   	nop
      _DistanceType __len = std::distance(__first, __last);
  408b9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  408ba2:	e9 82 00 00 00       	jmp    408c29 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xcd>
	  _DistanceType __half = __len >> 1;
  408ba7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408bab:	48 d1 f8             	sar    %rax
  408bae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  _ForwardIterator __middle = __first;
  408bb2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408bb6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408bba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408bbe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    __attribute__((__always_inline__))
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  408bc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408bc6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  408bca:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  408bce:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  408bd2:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  408bd3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  408bd7:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  408bdb:	48 89 d6             	mov    %rdx,%rsi
  408bde:	48 89 c7             	mov    %rax,%rdi
  408be1:	e8 be 28 00 00       	call   40b4a4 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>
    }
  408be6:	90                   	nop
	  if (__comp(__val, __middle))
  408be7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  408beb:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  408bef:	48 8d 45 87          	lea    -0x79(%rbp),%rax
  408bf3:	48 89 ce             	mov    %rcx,%rsi
  408bf6:	48 89 c7             	mov    %rax,%rdi
  408bf9:	e8 a2 18 00 00       	call   40a4a0 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKDiPS3_EEbRT_T0_>
  408bfe:	84 c0                	test   %al,%al
  408c00:	74 0a                	je     408c0c <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xb0>
	    __len = __half;
  408c02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408c0a:	eb 1d                	jmp    408c29 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xcd>
	      __first = __middle;
  408c0c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408c10:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	      ++__first;
  408c14:	48 83 45 98 04       	addq   $0x4,-0x68(%rbp)
	      __len = __len - __half - 1;
  408c19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c1d:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  408c21:	48 83 e8 01          	sub    $0x1,%rax
  408c25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  408c29:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408c2e:	0f 8f 73 ff ff ff    	jg     408ba7 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0x4b>
      return __first;
  408c34:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    }
  408c38:	c9                   	leave
  408c39:	c3                   	ret

0000000000408c3a <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_>:
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  408c3a:	55                   	push   %rbp
  408c3b:	48 89 e5             	mov    %rsp,%rbp
  408c3e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  408c42:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  408c46:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  408c4a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  408c4e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408c52:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  408c56:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  408c5a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  408c5e:	90                   	nop
      return std::__distance(__first, __last,
  408c5f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408c63:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408c67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408c6b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      return __last - __first;
  408c6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408c73:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  408c77:	48 c1 f8 02          	sar    $0x2,%rax
			     std::__iterator_category(__first));
  408c7b:	90                   	nop
      _DistanceType __len = std::distance(__first, __last);
  408c7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  408c80:	e9 82 00 00 00       	jmp    408d07 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xcd>
	  _DistanceType __half = __len >> 1;
  408c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c89:	48 d1 f8             	sar    %rax
  408c8c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  _ForwardIterator __middle = __first;
  408c90:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408c94:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  408c98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c9c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  408ca0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408ca4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  408ca8:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  408cac:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  408cb0:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  408cb1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  408cb5:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  408cb9:	48 89 d6             	mov    %rdx,%rsi
  408cbc:	48 89 c7             	mov    %rax,%rdi
  408cbf:	e8 08 28 00 00       	call   40b4cc <_ZSt9__advanceIPKjlEvRT_T0_St26random_access_iterator_tag>
    }
  408cc4:	90                   	nop
	  if (__comp(__middle, __val))
  408cc5:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  408cc9:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  408ccd:	48 8d 45 87          	lea    -0x79(%rbp),%rax
  408cd1:	48 89 ce             	mov    %rcx,%rsi
  408cd4:	48 89 c7             	mov    %rax,%rdi
  408cd7:	e8 e8 17 00 00       	call   40a4c4 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPKjS3_EEbT_RT0_>
  408cdc:	84 c0                	test   %al,%al
  408cde:	74 1f                	je     408cff <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xc5>
	      __first = __middle;
  408ce0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408ce4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	      ++__first;
  408ce8:	48 83 45 98 04       	addq   $0x4,-0x68(%rbp)
	      __len = __len - __half - 1;
  408ced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408cf1:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  408cf5:	48 83 e8 01          	sub    $0x1,%rax
  408cf9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408cfd:	eb 08                	jmp    408d07 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xcd>
	    __len = __half;
  408cff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408d03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  408d07:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  408d0c:	0f 8f 73 ff ff ff    	jg     408c85 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0x4b>
      return __first;
  408d12:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    }
  408d16:	c9                   	leave
  408d17:	c3                   	ret

0000000000408d18 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKDiEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
  408d18:	55                   	push   %rbp
  408d19:	48 89 e5             	mov    %rsp,%rbp
  408d1c:	48 83 ec 20          	sub    $0x20,%rsp
  408d20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _Iter_equals_val<_Value>(__val); }
  408d24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408d28:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  408d2c:	48 89 d6             	mov    %rdx,%rsi
  408d2f:	48 89 c7             	mov    %rax,%rdi
  408d32:	e8 b1 17 00 00       	call   40a4e8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEC1ERS2_>
  408d37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408d3b:	c9                   	leave
  408d3c:	c3                   	ret

0000000000408d3d <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
  408d3d:	55                   	push   %rbp
  408d3e:	48 89 e5             	mov    %rsp,%rbp
  408d41:	48 83 ec 20          	sub    $0x20,%rsp
  408d45:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408d49:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408d4d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  408d51:	90                   	nop
    {
      return __find_if(__first, __last, __pred,
  408d52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408d56:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408d5a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408d5e:	48 89 ce             	mov    %rcx,%rsi
  408d61:	48 89 c7             	mov    %rax,%rdi
  408d64:	e8 99 17 00 00       	call   40a502 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag>
		       std::__iterator_category(__first));
    }
  408d69:	c9                   	leave
  408d6a:	c3                   	ret

0000000000408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
  408d6b:	55                   	push   %rbp
  408d6c:	48 89 e5             	mov    %rsp,%rbp
  408d6f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  408d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408d77:	5d                   	pop    %rbp
  408d78:	c3                   	ret
  408d79:	90                   	nop

0000000000408d7a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clISt9monostateEEDaSJ_>:
	    std::visit_format_arg([&](auto& __arg) {
  408d7a:	55                   	push   %rbp
  408d7b:	48 89 e5             	mov    %rsp,%rbp
  408d7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408d82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408d86:	90                   	nop
  408d87:	5d                   	pop    %rbp
  408d88:	c3                   	ret
  408d89:	90                   	nop

0000000000408d8a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_>:
  408d8a:	55                   	push   %rbp
  408d8b:	48 89 e5             	mov    %rsp,%rbp
  408d8e:	53                   	push   %rbx
  408d8f:	48 83 ec 48          	sub    $0x48,%rsp
  408d93:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  408d97:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
		  size_t __len = 4 + !__arg;
  408d9b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  408d9f:	0f b6 00             	movzbl (%rax),%eax
  408da2:	83 f0 01             	xor    $0x1,%eax
  408da5:	0f b6 c0             	movzbl %al,%eax
  408da8:	83 c0 04             	add    $0x4,%eax
  408dab:	48 98                	cltq
  408dad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  const char* __chars[] = { "false", "true" };
  408db1:	48 c7 45 d0 1b a2 41 	movq   $0x41a21b,-0x30(%rbp)
  408db8:	00
  408db9:	48 c7 45 d8 21 a2 41 	movq   $0x41a221,-0x28(%rbp)
  408dc0:	00
		  if (auto __res = __sink_out._M_reserve(__len))
  408dc1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408dc5:	48 8b 00             	mov    (%rax),%rax
  408dc8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408dcc:	48 89 d6             	mov    %rdx,%rsi
  408dcf:	48 89 c7             	mov    %rax,%rdi
  408dd2:	e8 6b 00 00 00       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  408dd7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  408ddb:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  408ddf:	48 89 c7             	mov    %rax,%rdi
  408de2:	e8 67 1a 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  408de7:	84 c0                	test   %al,%al
  408de9:	74 50                	je     408e3b <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_+0xb1>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
  408deb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  408def:	0f b6 00             	movzbl (%rax),%eax
  408df2:	0f b6 c0             	movzbl %al,%eax
  408df5:	48 98                	cltq
  408df7:	48 8b 5c c5 d0       	mov    -0x30(%rbp,%rax,8),%rbx
  408dfc:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  408e00:	48 89 c7             	mov    %rax,%rdi
  408e03:	e8 5e 1a 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  408e08:	48 89 c1             	mov    %rax,%rcx
  408e0b:	48 89 de             	mov    %rbx,%rsi
  408e0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408e12:	48 89 c2             	mov    %rax,%rdx
  408e15:	48 89 cf             	mov    %rcx,%rdi
  408e18:	e8 b3 b3 ff ff       	call   4041d0 <memcpy@plt>
		      __res._M_bump(__len);
  408e1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408e21:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  408e25:	48 89 d6             	mov    %rdx,%rsi
  408e28:	48 89 c7             	mov    %rax,%rdi
  408e2b:	e8 58 1a 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  408e30:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408e34:	48 8b 40 08          	mov    0x8(%rax),%rax
  408e38:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  408e3b:	90                   	nop
  408e3c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408e40:	c9                   	leave
  408e41:	c3                   	ret

0000000000408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>:
      _M_reserve(size_t __n) const
  408e42:	55                   	push   %rbp
  408e43:	48 89 e5             	mov    %rsp,%rbp
  408e46:	48 83 ec 10          	sub    $0x10,%rsp
  408e4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408e4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_sink->_M_reserve(__n); }
  408e52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408e56:	48 8b 00             	mov    (%rax),%rax
  408e59:	48 8b 00             	mov    (%rax),%rax
  408e5c:	48 83 c0 08          	add    $0x8,%rax
  408e60:	48 8b 08             	mov    (%rax),%rcx
  408e63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408e67:	48 8b 00             	mov    (%rax),%rax
  408e6a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408e6e:	48 89 d6             	mov    %rdx,%rsi
  408e71:	48 89 c7             	mov    %rax,%rdi
  408e74:	ff d1                	call   *%rcx
  408e76:	c9                   	leave
  408e77:	c3                   	ret

0000000000408e78 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_>:
	    std::visit_format_arg([&](auto& __arg) {
  408e78:	55                   	push   %rbp
  408e79:	48 89 e5             	mov    %rsp,%rbp
  408e7c:	53                   	push   %rbx
  408e7d:	48 83 ec 28          	sub    $0x28,%rsp
  408e81:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408e85:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  if (auto __res = __sink_out._M_reserve(1))
  408e89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408e8d:	48 8b 00             	mov    (%rax),%rax
  408e90:	be 01 00 00 00       	mov    $0x1,%esi
  408e95:	48 89 c7             	mov    %rax,%rdi
  408e98:	e8 a5 ff ff ff       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  408e9d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  408ea1:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  408ea5:	48 89 c7             	mov    %rax,%rdi
  408ea8:	e8 a1 19 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  408ead:	84 c0                	test   %al,%al
  408eaf:	74 31                	je     408ee2 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_+0x6a>
		      *__res.get() = __arg;
  408eb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408eb5:	0f b6 18             	movzbl (%rax),%ebx
  408eb8:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  408ebc:	48 89 c7             	mov    %rax,%rdi
  408ebf:	e8 a2 19 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  408ec4:	88 18                	mov    %bl,(%rax)
		      __res._M_bump(1);
  408ec6:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  408eca:	be 01 00 00 00       	mov    $0x1,%esi
  408ecf:	48 89 c7             	mov    %rax,%rdi
  408ed2:	e8 b1 19 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  408ed7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408edb:	48 8b 40 08          	mov    0x8(%rax),%rax
  408edf:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  408ee2:	90                   	nop
  408ee3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408ee7:	c9                   	leave
  408ee8:	c3                   	ret
  408ee9:	90                   	nop

0000000000408eea <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_>:
  408eea:	55                   	push   %rbp
  408eeb:	48 89 e5             	mov    %rsp,%rbp
  408eee:	48 83 ec 30          	sub    $0x30,%rsp
  408ef2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408ef6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  408efa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408efe:	8b 00                	mov    (%rax),%eax
  408f00:	c1 e8 1f             	shr    $0x1f,%eax
  408f03:	88 45 fb             	mov    %al,-0x5(%rbp)
		  if (__neg)
  408f06:	80 7d fb 00          	cmpb   $0x0,-0x5(%rbp)
  408f0a:	74 0d                	je     408f19 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0x2f>
		    __uval = make_unsigned_t<_Tp>(~__arg) + 1u;
  408f0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408f10:	8b 00                	mov    (%rax),%eax
  408f12:	f7 d8                	neg    %eax
  408f14:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408f17:	eb 09                	jmp    408f22 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0x38>
		    __uval = __arg;
  408f19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408f1d:	8b 00                	mov    (%rax),%eax
  408f1f:	89 45 fc             	mov    %eax,-0x4(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  408f22:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408f25:	be 0a 00 00 00       	mov    $0xa,%esi
  408f2a:	89 c7                	mov    %eax,%edi
  408f2c:	e8 44 bb ff ff       	call   404a75 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  408f31:	89 45 f4             	mov    %eax,-0xc(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  408f34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f38:	48 8b 00             	mov    (%rax),%rax
  408f3b:	0f b6 4d fb          	movzbl -0x5(%rbp),%ecx
  408f3f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  408f42:	01 ca                	add    %ecx,%edx
  408f44:	89 d2                	mov    %edx,%edx
  408f46:	48 89 d6             	mov    %rdx,%rsi
  408f49:	48 89 c7             	mov    %rax,%rdi
  408f4c:	e8 f1 fe ff ff       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  408f51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408f55:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408f59:	48 89 c7             	mov    %rax,%rdi
  408f5c:	e8 ed 18 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  408f61:	84 c0                	test   %al,%al
  408f63:	74 58                	je     408fbd <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0xd3>
		      auto __ptr = __res.get();
  408f65:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408f69:	48 89 c7             	mov    %rax,%rdi
  408f6c:	e8 f5 18 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  408f71:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  408f75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408f79:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  408f7c:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  408f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408f84:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  408f88:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408f8b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  408f8e:	89 c6                	mov    %eax,%esi
  408f90:	48 89 cf             	mov    %rcx,%rdi
  408f93:	e8 11 da ff ff       	call   4069a9 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
		      __res._M_bump(__n + __neg);
  408f98:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  408f9c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  408f9f:	01 d0                	add    %edx,%eax
  408fa1:	89 c2                	mov    %eax,%edx
  408fa3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408fa7:	48 89 d6             	mov    %rdx,%rsi
  408faa:	48 89 c7             	mov    %rax,%rdi
  408fad:	e8 d6 18 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  408fb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408fb6:	48 8b 40 08          	mov    0x8(%rax),%rax
  408fba:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  408fbd:	90                   	nop
  408fbe:	c9                   	leave
  408fbf:	c3                   	ret

0000000000408fc0 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_>:
  408fc0:	55                   	push   %rbp
  408fc1:	48 89 e5             	mov    %rsp,%rbp
  408fc4:	48 83 ec 30          	sub    $0x30,%rsp
  408fc8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408fcc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  408fd0:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		    __uval = __arg;
  408fd4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408fd8:	8b 00                	mov    (%rax),%eax
  408fda:	89 45 f8             	mov    %eax,-0x8(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  408fdd:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408fe0:	be 0a 00 00 00       	mov    $0xa,%esi
  408fe5:	89 c7                	mov    %eax,%edi
  408fe7:	e8 89 ba ff ff       	call   404a75 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  408fec:	89 45 f4             	mov    %eax,-0xc(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  408fef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408ff3:	48 8b 00             	mov    (%rax),%rax
  408ff6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  408ff9:	48 89 d6             	mov    %rdx,%rsi
  408ffc:	48 89 c7             	mov    %rax,%rdi
  408fff:	e8 3e fe ff ff       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409004:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409008:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40900c:	48 89 c7             	mov    %rax,%rdi
  40900f:	e8 3a 18 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409014:	84 c0                	test   %al,%al
  409016:	74 48                	je     409060 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_+0xa0>
		      auto __ptr = __res.get();
  409018:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40901c:	48 89 c7             	mov    %rax,%rdi
  40901f:	e8 42 18 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409024:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  409028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40902c:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  40902f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409032:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  409035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409039:	89 ce                	mov    %ecx,%esi
  40903b:	48 89 c7             	mov    %rax,%rdi
  40903e:	e8 66 d9 ff ff       	call   4069a9 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409043:	8b 55 f4             	mov    -0xc(%rbp),%edx
  409046:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40904a:	48 89 d6             	mov    %rdx,%rsi
  40904d:	48 89 c7             	mov    %rax,%rdi
  409050:	e8 33 18 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409055:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409059:	48 8b 40 08          	mov    0x8(%rax),%rax
  40905d:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409060:	90                   	nop
  409061:	c9                   	leave
  409062:	c3                   	ret
  409063:	90                   	nop

0000000000409064 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_>:
  409064:	55                   	push   %rbp
  409065:	48 89 e5             	mov    %rsp,%rbp
  409068:	48 83 ec 30          	sub    $0x30,%rsp
  40906c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409070:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  409074:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409078:	48 8b 00             	mov    (%rax),%rax
  40907b:	48 c1 e8 3f          	shr    $0x3f,%rax
  40907f:	88 45 f7             	mov    %al,-0x9(%rbp)
		  if (__neg)
  409082:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  409086:	74 10                	je     409098 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0x34>
		    __uval = make_unsigned_t<_Tp>(~__arg) + 1u;
  409088:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40908c:	48 8b 00             	mov    (%rax),%rax
  40908f:	48 f7 d8             	neg    %rax
  409092:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409096:	eb 0b                	jmp    4090a3 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0x3f>
		    __uval = __arg;
  409098:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40909c:	48 8b 00             	mov    (%rax),%rax
  40909f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  4090a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4090a7:	be 0a 00 00 00       	mov    $0xa,%esi
  4090ac:	48 89 c7             	mov    %rax,%rdi
  4090af:	e8 da ba ff ff       	call   404b8e <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
  4090b4:	89 45 f0             	mov    %eax,-0x10(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  4090b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4090bb:	48 8b 00             	mov    (%rax),%rax
  4090be:	0f b6 4d f7          	movzbl -0x9(%rbp),%ecx
  4090c2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  4090c5:	01 ca                	add    %ecx,%edx
  4090c7:	89 d2                	mov    %edx,%edx
  4090c9:	48 89 d6             	mov    %rdx,%rsi
  4090cc:	48 89 c7             	mov    %rax,%rdi
  4090cf:	e8 6e fd ff ff       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  4090d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4090d8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4090dc:	48 89 c7             	mov    %rax,%rdi
  4090df:	e8 6a 17 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  4090e4:	84 c0                	test   %al,%al
  4090e6:	74 59                	je     409141 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0xdd>
		      auto __ptr = __res.get();
  4090e8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4090ec:	48 89 c7             	mov    %rax,%rdi
  4090ef:	e8 72 17 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  4090f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  4090f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4090fc:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  4090ff:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  409103:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409107:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40910b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40910f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409112:	89 c6                	mov    %eax,%esi
  409114:	48 89 cf             	mov    %rcx,%rdi
  409117:	e8 23 e0 ff ff       	call   40713f <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
		      __res._M_bump(__n + __neg);
  40911c:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  409120:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409123:	01 d0                	add    %edx,%eax
  409125:	89 c2                	mov    %eax,%edx
  409127:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40912b:	48 89 d6             	mov    %rdx,%rsi
  40912e:	48 89 c7             	mov    %rax,%rdi
  409131:	e8 52 17 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409136:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40913a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40913e:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409141:	90                   	nop
  409142:	c9                   	leave
  409143:	c3                   	ret

0000000000409144 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_>:
  409144:	55                   	push   %rbp
  409145:	48 89 e5             	mov    %rsp,%rbp
  409148:	48 83 ec 40          	sub    $0x40,%rsp
  40914c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  409150:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  const bool __neg = __arg < 0;
  409154:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		    __uval = __arg;
  409158:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40915c:	48 8b 00             	mov    (%rax),%rax
  40915f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409163:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409167:	be 0a 00 00 00       	mov    $0xa,%esi
  40916c:	48 89 c7             	mov    %rax,%rdi
  40916f:	e8 1a ba ff ff       	call   404b8e <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
  409174:	89 45 ec             	mov    %eax,-0x14(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409177:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40917b:	48 8b 00             	mov    (%rax),%rax
  40917e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  409181:	48 89 d6             	mov    %rdx,%rsi
  409184:	48 89 c7             	mov    %rax,%rdi
  409187:	e8 b6 fc ff ff       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  40918c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409190:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409194:	48 89 c7             	mov    %rax,%rdi
  409197:	e8 b2 16 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  40919c:	84 c0                	test   %al,%al
  40919e:	74 49                	je     4091e9 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_+0xa5>
		      auto __ptr = __res.get();
  4091a0:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4091a4:	48 89 c7             	mov    %rax,%rdi
  4091a7:	e8 ba 16 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  4091ac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		      *__ptr = '-';
  4091b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4091b4:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  4091b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4091bb:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  4091be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4091c2:	89 ce                	mov    %ecx,%esi
  4091c4:	48 89 c7             	mov    %rax,%rdi
  4091c7:	e8 73 df ff ff       	call   40713f <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
		      __res._M_bump(__n + __neg);
  4091cc:	8b 55 ec             	mov    -0x14(%rbp),%edx
  4091cf:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4091d3:	48 89 d6             	mov    %rdx,%rsi
  4091d6:	48 89 c7             	mov    %rax,%rdi
  4091d9:	e8 aa 16 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  4091de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4091e2:	48 8b 40 08          	mov    0x8(%rax),%rax
  4091e6:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  4091e9:	90                   	nop
  4091ea:	c9                   	leave
  4091eb:	c3                   	ret

00000000004091ec <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIfEEDaSJ_>:
  4091ec:	55                   	push   %rbp
  4091ed:	48 89 e5             	mov    %rsp,%rbp
  4091f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4091f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4091f8:	90                   	nop
  4091f9:	5d                   	pop    %rbp
  4091fa:	c3                   	ret
  4091fb:	90                   	nop

00000000004091fc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIdEEDaSJ_>:
  4091fc:	55                   	push   %rbp
  4091fd:	48 89 e5             	mov    %rsp,%rbp
  409200:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409204:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409208:	90                   	nop
  409209:	5d                   	pop    %rbp
  40920a:	c3                   	ret
  40920b:	90                   	nop

000000000040920c <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIeEEDaSJ_>:
  40920c:	55                   	push   %rbp
  40920d:	48 89 e5             	mov    %rsp,%rbp
  409210:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409214:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409218:	90                   	nop
  409219:	5d                   	pop    %rbp
  40921a:	c3                   	ret
  40921b:	90                   	nop

000000000040921c <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_>:
  40921c:	55                   	push   %rbp
  40921d:	48 89 e5             	mov    %rsp,%rbp
  409220:	41 54                	push   %r12
  409222:	53                   	push   %rbx
  409223:	48 83 ec 30          	sub    $0x30,%rsp
  409227:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40922b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  string_view __sv = __arg;
  40922f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409233:	48 8b 10             	mov    (%rax),%rdx
  409236:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40923a:	48 89 d6             	mov    %rdx,%rsi
  40923d:	48 89 c7             	mov    %rax,%rdi
  409240:	e8 1f c5 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
  409245:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409249:	48 8b 18             	mov    (%rax),%rbx
  40924c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409250:	48 89 c7             	mov    %rax,%rdi
  409253:	e8 a2 c6 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409258:	48 89 c6             	mov    %rax,%rsi
  40925b:	48 89 df             	mov    %rbx,%rdi
  40925e:	e8 df fb ff ff       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409263:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409267:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40926b:	48 89 c7             	mov    %rax,%rdi
  40926e:	e8 db 15 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409273:	84 c0                	test   %al,%al
  409275:	74 64                	je     4092db <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_+0xbf>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
  409277:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40927b:	48 89 c7             	mov    %rax,%rdi
  40927e:	e8 77 c6 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409283:	48 89 c3             	mov    %rax,%rbx
  409286:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40928a:	48 89 c7             	mov    %rax,%rdi
  40928d:	e8 56 d6 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  409292:	49 89 c4             	mov    %rax,%r12
  409295:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409299:	48 89 c7             	mov    %rax,%rdi
  40929c:	e8 c5 15 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  4092a1:	4c 89 e1             	mov    %r12,%rcx
  4092a4:	48 89 da             	mov    %rbx,%rdx
  4092a7:	48 89 ce             	mov    %rcx,%rsi
  4092aa:	48 89 c7             	mov    %rax,%rdi
  4092ad:	e8 1e af ff ff       	call   4041d0 <memcpy@plt>
		      __res._M_bump(__sv.size());
  4092b2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4092b6:	48 89 c7             	mov    %rax,%rdi
  4092b9:	e8 3c c6 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4092be:	48 89 c2             	mov    %rax,%rdx
  4092c1:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4092c5:	48 89 d6             	mov    %rdx,%rsi
  4092c8:	48 89 c7             	mov    %rax,%rdi
  4092cb:	e8 b8 15 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  4092d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4092d4:	48 8b 40 08          	mov    0x8(%rax),%rax
  4092d8:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  4092db:	90                   	nop
  4092dc:	48 83 c4 30          	add    $0x30,%rsp
  4092e0:	5b                   	pop    %rbx
  4092e1:	41 5c                	pop    %r12
  4092e3:	5d                   	pop    %rbp
  4092e4:	c3                   	ret
  4092e5:	90                   	nop

00000000004092e6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_>:
  4092e6:	55                   	push   %rbp
  4092e7:	48 89 e5             	mov    %rsp,%rbp
  4092ea:	41 54                	push   %r12
  4092ec:	53                   	push   %rbx
  4092ed:	48 83 ec 30          	sub    $0x30,%rsp
  4092f1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4092f5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  string_view __sv = __arg;
  4092f9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4092fd:	48 8b 50 08          	mov    0x8(%rax),%rdx
  409301:	48 8b 00             	mov    (%rax),%rax
  409304:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409308:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
  40930c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409310:	48 8b 18             	mov    (%rax),%rbx
  409313:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409317:	48 89 c7             	mov    %rax,%rdi
  40931a:	e8 db c5 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40931f:	48 89 c6             	mov    %rax,%rsi
  409322:	48 89 df             	mov    %rbx,%rdi
  409325:	e8 18 fb ff ff       	call   408e42 <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  40932a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40932e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409332:	48 89 c7             	mov    %rax,%rdi
  409335:	e8 14 15 00 00       	call   40a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  40933a:	84 c0                	test   %al,%al
  40933c:	74 64                	je     4093a2 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_+0xbc>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
  40933e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409342:	48 89 c7             	mov    %rax,%rdi
  409345:	e8 b0 c5 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40934a:	48 89 c3             	mov    %rax,%rbx
  40934d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409351:	48 89 c7             	mov    %rax,%rdi
  409354:	e8 8f d5 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  409359:	49 89 c4             	mov    %rax,%r12
  40935c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409360:	48 89 c7             	mov    %rax,%rdi
  409363:	e8 fe 14 00 00       	call   40a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409368:	4c 89 e1             	mov    %r12,%rcx
  40936b:	48 89 da             	mov    %rbx,%rdx
  40936e:	48 89 ce             	mov    %rcx,%rsi
  409371:	48 89 c7             	mov    %rax,%rdi
  409374:	e8 57 ae ff ff       	call   4041d0 <memcpy@plt>
		      __res._M_bump(__sv.size());
  409379:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40937d:	48 89 c7             	mov    %rax,%rdi
  409380:	e8 75 c5 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409385:	48 89 c2             	mov    %rax,%rdx
  409388:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40938c:	48 89 d6             	mov    %rdx,%rsi
  40938f:	48 89 c7             	mov    %rax,%rdi
  409392:	e8 f1 14 00 00       	call   40a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409397:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40939b:	48 8b 40 08          	mov    0x8(%rax),%rax
  40939f:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  4093a2:	90                   	nop
  4093a3:	48 83 c4 30          	add    $0x30,%rsp
  4093a7:	5b                   	pop    %rbx
  4093a8:	41 5c                	pop    %r12
  4093aa:	5d                   	pop    %rbp
  4093ab:	c3                   	ret

00000000004093ac <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKvEEDaSJ_>:
  4093ac:	55                   	push   %rbp
  4093ad:	48 89 e5             	mov    %rsp,%rbp
  4093b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4093b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4093b8:	90                   	nop
  4093b9:	5d                   	pop    %rbp
  4093ba:	c3                   	ret
  4093bb:	90                   	nop

00000000004093bc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clINSt16basic_format_argIS4_E6handleEEEDaSJ_>:
  4093bc:	55                   	push   %rbp
  4093bd:	48 89 e5             	mov    %rsp,%rbp
  4093c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4093c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4093c8:	90                   	nop
  4093c9:	5d                   	pop    %rbp
  4093ca:	c3                   	ret
  4093cb:	90                   	nop

00000000004093cc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clInEEDaSJ_>:
  4093cc:	55                   	push   %rbp
  4093cd:	48 89 e5             	mov    %rsp,%rbp
  4093d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4093d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4093d8:	90                   	nop
  4093d9:	5d                   	pop    %rbp
  4093da:	c3                   	ret
  4093db:	90                   	nop

00000000004093dc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIoEEDaSJ_>:
  4093dc:	55                   	push   %rbp
  4093dd:	48 89 e5             	mov    %rsp,%rbp
  4093e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4093e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4093e8:	90                   	nop
  4093e9:	5d                   	pop    %rbp
  4093ea:	c3                   	ret
  4093eb:	90                   	nop

00000000004093ec <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIDF128_EEDaSJ_>:
  4093ec:	55                   	push   %rbp
  4093ed:	48 89 e5             	mov    %rsp,%rbp
  4093f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4093f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4093f8:	90                   	nop
  4093f9:	5d                   	pop    %rbp
  4093fa:	c3                   	ret
  4093fb:	90                   	nop

00000000004093fc <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  4093fc:	55                   	push   %rbp
  4093fd:	48 89 e5             	mov    %rsp,%rbp
  409400:	48 83 ec 30          	sub    $0x30,%rsp
  409404:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409408:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40940c:	89 d0                	mov    %edx,%eax
  40940e:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  409411:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  409415:	89 c0                	mov    %eax,%eax
  409417:	48 8b 04 c5 c0 cc 41 	mov    0x41ccc0(,%rax,8),%rax
  40941e:	00
  40941f:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  409421:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409425:	48 89 c7             	mov    %rax,%rdi
  409428:	e8 da 12 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40942d:	48 89 c2             	mov    %rax,%rdx
  409430:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409434:	48 89 c6             	mov    %rax,%rsi
  409437:	48 89 d7             	mov    %rdx,%rdi
  40943a:	e8 3b f9 ff ff       	call   408d7a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clISt9monostateEEDaSJ_>
  40943f:	e9 2b 02 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  409444:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409448:	48 89 c7             	mov    %rax,%rdi
  40944b:	e8 b7 12 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  409450:	48 89 c2             	mov    %rax,%rdx
  409453:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409457:	48 89 c6             	mov    %rax,%rsi
  40945a:	48 89 d7             	mov    %rdx,%rdi
  40945d:	e8 28 f9 ff ff       	call   408d8a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_>
  409462:	e9 08 02 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  409467:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40946b:	48 89 c7             	mov    %rax,%rdi
  40946e:	e8 94 12 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  409473:	48 89 c2             	mov    %rax,%rdx
  409476:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40947a:	48 89 c6             	mov    %rax,%rsi
  40947d:	48 89 d7             	mov    %rdx,%rdi
  409480:	e8 f3 f9 ff ff       	call   408e78 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_>
  409485:	e9 e5 01 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  40948a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40948e:	48 89 c7             	mov    %rax,%rdi
  409491:	e8 71 12 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  409496:	48 89 c2             	mov    %rax,%rdx
  409499:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40949d:	48 89 c6             	mov    %rax,%rsi
  4094a0:	48 89 d7             	mov    %rdx,%rdi
  4094a3:	e8 42 fa ff ff       	call   408eea <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_>
  4094a8:	e9 c2 01 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  4094ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4094b1:	48 89 c7             	mov    %rax,%rdi
  4094b4:	e8 4e 12 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  4094b9:	48 89 c2             	mov    %rax,%rdx
  4094bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4094c0:	48 89 c6             	mov    %rax,%rsi
  4094c3:	48 89 d7             	mov    %rdx,%rdi
  4094c6:	e8 f5 fa ff ff       	call   408fc0 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_>
  4094cb:	e9 9f 01 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  4094d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4094d4:	48 89 c7             	mov    %rax,%rdi
  4094d7:	e8 2b 12 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  4094dc:	48 89 c2             	mov    %rax,%rdx
  4094df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4094e3:	48 89 c6             	mov    %rax,%rsi
  4094e6:	48 89 d7             	mov    %rdx,%rdi
  4094e9:	e8 76 fb ff ff       	call   409064 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_>
  4094ee:	e9 7c 01 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  4094f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4094f7:	48 89 c7             	mov    %rax,%rdi
  4094fa:	e8 08 12 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  4094ff:	48 89 c2             	mov    %rax,%rdx
  409502:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409506:	48 89 c6             	mov    %rax,%rsi
  409509:	48 89 d7             	mov    %rdx,%rdi
  40950c:	e8 33 fc ff ff       	call   409144 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_>
  409511:	e9 59 01 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  409516:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40951a:	48 89 c7             	mov    %rax,%rdi
  40951d:	e8 e5 11 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  409522:	48 89 c2             	mov    %rax,%rdx
  409525:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409529:	48 89 c6             	mov    %rax,%rsi
  40952c:	48 89 d7             	mov    %rdx,%rdi
  40952f:	e8 b8 fc ff ff       	call   4091ec <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIfEEDaSJ_>
  409534:	e9 36 01 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  409539:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40953d:	48 89 c7             	mov    %rax,%rdi
  409540:	e8 c2 11 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  409545:	48 89 c2             	mov    %rax,%rdx
  409548:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40954c:	48 89 c6             	mov    %rax,%rsi
  40954f:	48 89 d7             	mov    %rdx,%rdi
  409552:	e8 a5 fc ff ff       	call   4091fc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIdEEDaSJ_>
  409557:	e9 13 01 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  40955c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409560:	48 89 c7             	mov    %rax,%rdi
  409563:	e8 9f 11 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  409568:	48 89 c2             	mov    %rax,%rdx
  40956b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40956f:	48 89 c6             	mov    %rax,%rsi
  409572:	48 89 d7             	mov    %rdx,%rdi
  409575:	e8 92 fc ff ff       	call   40920c <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIeEEDaSJ_>
  40957a:	e9 f0 00 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  40957f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409583:	48 89 c7             	mov    %rax,%rdi
  409586:	e8 7c 11 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40958b:	48 89 c2             	mov    %rax,%rdx
  40958e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409592:	48 89 c6             	mov    %rax,%rsi
  409595:	48 89 d7             	mov    %rdx,%rdi
  409598:	e8 7f fc ff ff       	call   40921c <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_>
  40959d:	e9 cd 00 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  4095a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4095a6:	48 89 c7             	mov    %rax,%rdi
  4095a9:	e8 59 11 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  4095ae:	48 89 c2             	mov    %rax,%rdx
  4095b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095b5:	48 89 c6             	mov    %rax,%rsi
  4095b8:	48 89 d7             	mov    %rdx,%rdi
  4095bb:	e8 26 fd ff ff       	call   4092e6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_>
  4095c0:	e9 aa 00 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  4095c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4095c9:	48 89 c7             	mov    %rax,%rdi
  4095cc:	e8 36 11 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  4095d1:	48 89 c2             	mov    %rax,%rdx
  4095d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095d8:	48 89 c6             	mov    %rax,%rsi
  4095db:	48 89 d7             	mov    %rdx,%rdi
  4095de:	e8 c9 fd ff ff       	call   4093ac <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKvEEDaSJ_>
  4095e3:	e9 87 00 00 00       	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  4095e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4095ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  4095f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4095f4:	48 89 c7             	mov    %rax,%rdi
  4095f7:	e8 0b 11 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  4095fc:	48 89 c2             	mov    %rax,%rdx
  4095ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409603:	48 89 c6             	mov    %rax,%rsi
  409606:	48 89 d7             	mov    %rdx,%rdi
  409609:	e8 ae fd ff ff       	call   4093bc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clINSt16basic_format_argIS4_E6handleEEEDaSJ_>
  40960e:	eb 5f                	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  409610:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409614:	48 89 c7             	mov    %rax,%rdi
  409617:	e8 eb 10 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40961c:	48 89 c2             	mov    %rax,%rdx
  40961f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409623:	48 89 c6             	mov    %rax,%rsi
  409626:	48 89 d7             	mov    %rdx,%rdi
  409629:	e8 9e fd ff ff       	call   4093cc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clInEEDaSJ_>
  40962e:	eb 3f                	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  409630:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409634:	48 89 c7             	mov    %rax,%rdi
  409637:	e8 cb 10 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40963c:	48 89 c2             	mov    %rax,%rdx
  40963f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409643:	48 89 c6             	mov    %rax,%rsi
  409646:	48 89 d7             	mov    %rdx,%rdi
  409649:	e8 8e fd ff ff       	call   4093dc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIoEEDaSJ_>
  40964e:	eb 1f                	jmp    40966f <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  409650:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409654:	48 89 c7             	mov    %rax,%rdi
  409657:	e8 ab 10 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40965c:	48 89 c2             	mov    %rax,%rdx
  40965f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409663:	48 89 c6             	mov    %rax,%rsi
  409666:	48 89 d7             	mov    %rdx,%rdi
  409669:	e8 7e fd ff ff       	call   4093ec <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIDF128_EEDaSJ_>
  40966e:	90                   	nop
	}
  40966f:	c9                   	leave
  409670:	c3                   	ret

0000000000409671 <_ZSt16visit_format_argIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_S5_EDcOS6_St16basic_format_argIS8_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  409671:	55                   	push   %rbp
  409672:	48 89 e5             	mov    %rsp,%rbp
  409675:	53                   	push   %rbx
  409676:	48 83 ec 18          	sub    $0x18,%rsp
  40967a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  40967e:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  409682:	0f b6 d8             	movzbl %al,%ebx
  409685:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409689:	48 89 c7             	mov    %rax,%rdi
  40968c:	e8 76 10 00 00       	call   40a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  409691:	89 da                	mov    %ebx,%edx
  409693:	48 89 c6             	mov    %rax,%rsi
  409696:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  40969a:	e8 5d fd ff ff       	call   4093fc <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE>
  40969f:	90                   	nop
    }
  4096a0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4096a4:	c9                   	leave
  4096a5:	c3                   	ret

00000000004096a6 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>:
      ~basic_format_context() = default;
  4096a6:	55                   	push   %rbp
  4096a7:	48 89 e5             	mov    %rsp,%rbp
  4096aa:	48 83 ec 10          	sub    $0x10,%rsp
  4096ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4096b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4096b6:	48 83 c0 18          	add    $0x18,%rax
  4096ba:	48 89 c7             	mov    %rax,%rdi
  4096bd:	e8 72 ba ff ff       	call   405134 <_ZNSt8__format16_Optional_localeD1Ev>
  4096c2:	90                   	nop
  4096c3:	c9                   	leave
  4096c4:	c3                   	ret

00000000004096c5 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>:
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
  4096c5:	55                   	push   %rbp
  4096c6:	48 89 e5             	mov    %rsp,%rbp
  4096c9:	53                   	push   %rbx
  4096ca:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
  4096d1:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  4096d8:	48 89 f0             	mov    %rsi,%rax
  4096db:	48 89 d6             	mov    %rdx,%rsi
  4096de:	48 89 c0             	mov    %rax,%rax
  4096e1:	ba 00 00 00 00       	mov    $0x0,%edx
  4096e6:	48 89 f2             	mov    %rsi,%rdx
  4096e9:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
  4096f0:	48 89 95 88 fd ff ff 	mov    %rdx,-0x278(%rbp)
  4096f7:	48 89 8d 90 fd ff ff 	mov    %rcx,-0x270(%rbp)
  4096fe:	4c 89 85 78 fd ff ff 	mov    %r8,-0x288(%rbp)
      _Iter_sink<_CharT, _Out> __sink(std::move(__out));
  409705:	48 8d 85 98 fd ff ff 	lea    -0x268(%rbp),%rax
  40970c:	48 89 c7             	mov    %rax,%rdi
  40970f:	e8 57 f6 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  409714:	48 8b 00             	mov    (%rax),%rax
  409717:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  40971e:	48 c7 45 e8 ff ff ff 	movq   $0xffffffffffffffff,-0x18(%rbp)
  409725:	ff
      : _M_out(std::move(__out)), _M_max(__max)
  409726:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  40972d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  409731:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  409735:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409739:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40973d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  409741:	48 89 d6             	mov    %rdx,%rsi
  409744:	48 89 c7             	mov    %rax,%rdi
  409747:	e8 76 0f 00 00       	call   40a6c2 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  40974c:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  409750:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409754:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  409758:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40975f:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  409766:	ba 30 ce 41 00       	mov    $0x41ce30,%edx
  40976b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40976f:	48 89 10             	mov    %rdx,(%rax)
  409772:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  409776:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  40977d:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  409784:	48 89 41 08          	mov    %rax,0x8(%rcx)
  409788:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  40978c:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  409790:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
  409797:	48 89 c7             	mov    %rax,%rdi
  40979a:	e8 75 12 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40979f:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  4097a3:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  4097a4:	ba 08 ce 41 00       	mov    $0x41ce08,%edx
  4097a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4097ad:	48 89 10             	mov    %rdx,(%rax)
      { }
  4097b0:	90                   	nop
      : _M_out(std::move(__out)), _M_max(__max)
  4097b1:	b8 98 cd 41 00       	mov    $0x41cd98,%eax
  4097b6:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  4097bd:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
  4097c4:	48 89 c7             	mov    %rax,%rdi
  4097c7:	e8 9f f5 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4097cc:	48 8b 00             	mov    (%rax),%rax
  4097cf:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  4097d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4097da:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4097e1:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  4097e8:	00 00 00 00
      { }
  4097ec:	90                   	nop
      _Sink_iter<_CharT> __sink_out;
  4097ed:	48 c7 85 38 fe ff ff 	movq   $0x0,-0x1c8(%rbp)
  4097f4:	00 00 00 00
	__sink_out = __out; // Already a sink iterator, safe to use post-move.
  4097f8:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4097ff:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
  409806:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40980d:	48 89 c7             	mov    %rax,%rdi
  409810:	e8 e5 c0 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409815:	48 83 f8 02          	cmp    $0x2,%rax
  409819:	75 3d                	jne    409858 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  40981b:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  409822:	be 00 00 00 00       	mov    $0x0,%esi
  409827:	48 89 c7             	mov    %rax,%rdi
  40982a:	e8 dd c0 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40982f:	0f b6 00             	movzbl (%rax),%eax
  409832:	3c 7b                	cmp    $0x7b,%al
  409834:	75 22                	jne    409858 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  409836:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40983d:	be 01 00 00 00       	mov    $0x1,%esi
  409842:	48 89 c7             	mov    %rax,%rdi
  409845:	e8 c2 c0 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40984a:	0f b6 00             	movzbl (%rax),%eax
  40984d:	3c 7d                	cmp    $0x7d,%al
  40984f:	75 07                	jne    409858 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  409851:	b8 01 00 00 00       	mov    $0x1,%eax
  409856:	eb 05                	jmp    40985d <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x198>
  409858:	b8 00 00 00 00       	mov    $0x0,%eax
  40985d:	84 c0                	test   %al,%al
  40985f:	0f 84 23 01 00 00    	je     409988 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2c3>
	    bool __done = false;
  409865:	c6 85 af fd ff ff 00 	movb   $0x0,-0x251(%rbp)
  40986c:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  409873:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  409877:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40987e:	00
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40987f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  409883:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _Arg_value() : _M_none() { }
  409887:	90                   	nop
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  409888:	c6 45 90 00          	movb   $0x0,-0x70(%rbp)
  40988c:	90                   	nop
	if (__i < _M_packed_size)
  40988d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409891:	0f b6 00             	movzbl (%rax),%eax
  409894:	83 e0 0f             	and    $0xf,%eax
  409897:	0f b6 c0             	movzbl %al,%eax
  40989a:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40989e:	73 3a                	jae    4098da <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x215>
	    __arg._M_type = _M_type(__i);
  4098a0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4098a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4098a8:	48 89 d6             	mov    %rdx,%rsi
  4098ab:	48 89 c7             	mov    %rax,%rdi
  4098ae:	e8 b3 1c 00 00       	call   40b566 <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>
  4098b3:	88 45 90             	mov    %al,-0x70(%rbp)
	    __arg._M_val = _M_values[__i];
  4098b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4098ba:	48 8b 40 08          	mov    0x8(%rax),%rax
  4098be:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4098c2:	48 c1 e2 04          	shl    $0x4,%rdx
  4098c6:	48 01 d0             	add    %rdx,%rax
  4098c9:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4098cd:	48 8b 00             	mov    (%rax),%rax
  4098d0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4098d4:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	return __arg;
  4098d8:	eb 4a                	jmp    409924 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
  4098da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4098de:	0f b6 00             	movzbl (%rax),%eax
  4098e1:	83 e0 0f             	and    $0xf,%eax
  4098e4:	84 c0                	test   %al,%al
  4098e6:	75 3c                	jne    409924 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
  4098e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4098ec:	48 8b 00             	mov    (%rax),%rax
  4098ef:	48 c1 e8 04          	shr    $0x4,%rax
  4098f3:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  4098f7:	73 2b                	jae    409924 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
	  __arg = _M_args[__i];
  4098f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4098fd:	48 8b 40 08          	mov    0x8(%rax),%rax
  409901:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  409905:	48 c1 e2 05          	shl    $0x5,%rdx
  409909:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  40990d:	48 8b 01             	mov    (%rcx),%rax
  409910:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  409914:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  409918:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40991c:	0f b6 41 10          	movzbl 0x10(%rcx),%eax
  409920:	88 45 90             	mov    %al,-0x70(%rbp)
	return __arg;
  409923:	90                   	nop
  409924:	90                   	nop
	    std::visit_format_arg([&](auto& __arg) {
  409925:	48 8d 85 38 fe ff ff 	lea    -0x1c8(%rbp),%rax
  40992c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  409930:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
  409937:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40993b:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  40993f:	48 83 ec 20          	sub    $0x20,%rsp
  409943:	48 89 e1             	mov    %rsp,%rcx
  409946:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40994a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40994e:	48 89 01             	mov    %rax,(%rcx)
  409951:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  409955:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  409959:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40995d:	48 89 41 10          	mov    %rax,0x10(%rcx)
  409961:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  409965:	48 89 f7             	mov    %rsi,%rdi
  409968:	e8 04 fd ff ff       	call   409671 <_ZSt16visit_format_argIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_S5_EDcOS6_St16basic_format_argIS8_E>
  40996d:	48 83 c4 20          	add    $0x20,%rsp
	    if (__done)
  409971:	0f b6 85 af fd ff ff 	movzbl -0x251(%rbp),%eax
  409978:	84 c0                	test   %al,%al
  40997a:	74 0c                	je     409988 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2c3>
		  return __sink_out;
  40997c:	48 8b 9d 38 fe ff ff 	mov    -0x1c8(%rbp),%rbx
  409983:	e9 b6 00 00 00       	jmp    409a3e <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x379>
		     ? _Context(__args, __sink_out)
  409988:	48 83 bd 78 fd ff ff 	cmpq   $0x0,-0x288(%rbp)
  40998f:	00
  409990:	75 26                	jne    4099b8 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2f3>
      auto __ctx = __loc == nullptr
  409992:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  409999:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4099a0:	48 8b 30             	mov    (%rax),%rsi
  4099a3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4099a7:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4099ae:	48 89 c7             	mov    %rax,%rdi
  4099b1:	e8 0a 0f 00 00       	call   40a8c0 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_>
  4099b6:	eb 2e                	jmp    4099e6 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x321>
  4099b8:	48 8b bd 78 fd ff ff 	mov    -0x288(%rbp),%rdi
  4099bf:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  4099c6:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4099cd:	48 8b 30             	mov    (%rax),%rsi
  4099d0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4099d4:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4099db:	49 89 f8             	mov    %rdi,%r8
  4099de:	48 89 c7             	mov    %rax,%rdi
  4099e1:	e8 4c 0f 00 00       	call   40a932 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_RKSt6locale>
      _Formatting_scanner<_Sink_iter<_CharT>, _CharT> __scanner(__ctx, __fmt);
  4099e6:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  4099ed:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  4099f4:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
  4099fb:	48 8d bd d0 fd ff ff 	lea    -0x230(%rbp),%rdi
  409a02:	48 89 d1             	mov    %rdx,%rcx
  409a05:	48 89 c2             	mov    %rax,%rdx
  409a08:	e8 97 0f 00 00       	call   40a9a4 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEC1ERSt20basic_format_contextIS2_cESt17basic_string_viewIcSt11char_traitsIcEE>
      __scanner._M_scan();
  409a0d:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  409a14:	48 89 c7             	mov    %rax,%rdi
  409a17:	e8 2a bf ff ff       	call   405946 <_ZNSt8__format8_ScannerIcE7_M_scanEv>
	return __ctx.out();
  409a1c:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  409a23:	48 89 c7             	mov    %rax,%rdi
  409a26:	e8 c7 0f 00 00       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  409a2b:	48 89 c3             	mov    %rax,%rbx
  409a2e:	90                   	nop
    }
  409a2f:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  409a36:	48 89 c7             	mov    %rax,%rdi
  409a39:	e8 68 fc ff ff       	call   4096a6 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>
  409a3e:	48 89 d8             	mov    %rbx,%rax
  409a41:	eb 1d                	jmp    409a60 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x39b>
  409a43:	48 89 c3             	mov    %rax,%rbx
  409a46:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  409a4d:	48 89 c7             	mov    %rax,%rdi
  409a50:	e8 51 fc ff ff       	call   4096a6 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>
  409a55:	48 89 d8             	mov    %rbx,%rax
  409a58:	48 89 c7             	mov    %rax,%rdi
  409a5b:	e8 10 a9 ff ff       	call   404370 <_Unwind_Resume@plt>
  409a60:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409a64:	c9                   	leave
  409a65:	c3                   	ret

0000000000409a66 <_ZNKSt4spanIcLm18446744073709551615EE5emptyEv>:
      empty() const noexcept
  409a66:	55                   	push   %rbp
  409a67:	48 89 e5             	mov    %rsp,%rbp
  409a6a:	48 83 ec 10          	sub    $0x10,%rsp
  409a6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size() == 0; }
  409a72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a76:	48 89 c7             	mov    %rax,%rdi
  409a79:	e8 46 b9 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  409a7e:	48 85 c0             	test   %rax,%rax
  409a81:	0f 94 c0             	sete   %al
  409a84:	c9                   	leave
  409a85:	c3                   	ret

0000000000409a86 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>:
      _M_overflow() override
  409a86:	55                   	push   %rbp
  409a87:	48 89 e5             	mov    %rsp,%rbp
  409a8a:	41 54                	push   %r12
  409a8c:	53                   	push   %rbx
  409a8d:	48 83 ec 40          	sub    $0x40,%rsp
  409a91:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __s = this->_M_used();
  409a95:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409a99:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  409a9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409aa1:	48 8d 58 08          	lea    0x8(%rax),%rbx
  409aa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409aa9:	48 83 c0 08          	add    $0x8,%rax
  409aad:	48 89 c7             	mov    %rax,%rdi
  409ab0:	e8 5f 0f 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  409ab5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409ab9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409abd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  409ac1:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409ac5:	48 89 c6             	mov    %rax,%rsi
  409ac8:	48 89 d7             	mov    %rdx,%rdi
  409acb:	e8 69 0f 00 00       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  409ad0:	48 89 c6             	mov    %rax,%rsi
  409ad3:	48 89 df             	mov    %rbx,%rdi
  409ad6:	e8 9d 0f 00 00       	call   40aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  409adb:	90                   	nop
	auto __s = this->_M_used();
  409adc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409ae0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__s.empty()) [[unlikely]]
  409ae4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  409ae8:	48 89 c7             	mov    %rax,%rdi
  409aeb:	e8 76 ff ff ff       	call   409a66 <_ZNKSt4spanIcLm18446744073709551615EE5emptyEv>
  409af0:	84 c0                	test   %al,%al
  409af2:	75 56                	jne    409b4a <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv+0xc4>
	  _M_seq.append(__s.data(), __s.size());
  409af4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409af8:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  409aff:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  409b03:	48 89 c7             	mov    %rax,%rdi
  409b06:	e8 b9 b8 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  409b0b:	49 89 c4             	mov    %rax,%r12
  409b0e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  409b12:	48 89 c7             	mov    %rax,%rdi
  409b15:	e8 98 b8 ff ff       	call   4053b2 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  409b1a:	4c 89 e2             	mov    %r12,%rdx
  409b1d:	48 89 c6             	mov    %rax,%rsi
  409b20:	48 89 df             	mov    %rbx,%rdi
  409b23:	e8 b4 0f 00 00       	call   40aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>
	this->_M_rewind();
  409b28:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409b2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { _M_next = _M_span.begin(); }
  409b30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409b34:	48 83 c0 08          	add    $0x8,%rax
  409b38:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  409b3c:	48 89 c7             	mov    %rax,%rdi
  409b3f:	e8 d0 0e 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  409b44:	48 89 43 18          	mov    %rax,0x18(%rbx)
  409b48:	eb 01                	jmp    409b4b <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv+0xc5>
	  return; // Nothing in the buffer to transfer to _M_seq.
  409b4a:	90                   	nop
      }
  409b4b:	48 83 c4 40          	add    $0x40,%rsp
  409b4f:	5b                   	pop    %rbx
  409b50:	41 5c                	pop    %r12
  409b52:	5d                   	pop    %rbp
  409b53:	c3                   	ret

0000000000409b54 <_ZSt12__to_addressIcEPT_S1_>:
    __to_address(_Tp* __ptr) noexcept
  409b54:	55                   	push   %rbp
  409b55:	48 89 e5             	mov    %rsp,%rbp
  409b58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __ptr;
  409b5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  409b60:	5d                   	pop    %rbp
  409b61:	c3                   	ret

0000000000409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  This is a pointer to the character sequence held by the string.
       *  Modifying the characters in the sequence is allowed.
      */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      _CharT*
      data() noexcept
  409b62:	55                   	push   %rbp
  409b63:	48 89 e5             	mov    %rsp,%rbp
  409b66:	48 83 ec 10          	sub    $0x10,%rsp
  409b6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
  409b6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409b72:	48 89 c7             	mov    %rax,%rdi
  409b75:	e8 aa cd ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  409b7a:	c9                   	leave
  409b7b:	c3                   	ret

0000000000409b7c <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>:
	span(_Range&& __range)
  409b7c:	55                   	push   %rbp
  409b7d:	48 89 e5             	mov    %rsp,%rbp
  409b80:	53                   	push   %rbx
  409b81:	48 83 ec 18          	sub    $0x18,%rsp
  409b85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409b89:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: span(ranges::data(__range), ranges::size(__range))
  409b8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409b91:	48 89 c6             	mov    %rax,%rsi
  409b94:	bf 06 a0 41 00       	mov    $0x41a006,%edi
  409b99:	e8 88 da ff ff       	call   407626 <_ZNKSt6ranges8__access5_SizeclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>
  409b9e:	48 89 c3             	mov    %rax,%rbx
  409ba1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409ba5:	48 89 c6             	mov    %rax,%rsi
  409ba8:	bf 08 a0 41 00       	mov    $0x41a008,%edi
  409bad:	e8 56 da ff ff       	call   407608 <_ZNKSt6ranges8__access5_DataclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>
  409bb2:	48 89 c1             	mov    %rax,%rcx
  409bb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409bb9:	48 89 da             	mov    %rbx,%rdx
  409bbc:	48 89 ce             	mov    %rcx,%rsi
  409bbf:	48 89 c7             	mov    %rax,%rdi
  409bc2:	e8 9f 0a 00 00       	call   40a666 <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
	}
  409bc7:	90                   	nop
  409bc8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409bcc:	c9                   	leave
  409bcd:	c3                   	ret

0000000000409bce <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
  409bce:	55                   	push   %rbp
  409bcf:	48 89 e5             	mov    %rsp,%rbp
  409bd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409bd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__b < __a)
  409bda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409bde:	48 8b 10             	mov    (%rax),%rdx
  409be1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409be5:	48 8b 00             	mov    (%rax),%rax
  409be8:	48 39 c2             	cmp    %rax,%rdx
  409beb:	73 06                	jae    409bf3 <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
  409bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409bf1:	eb 04                	jmp    409bf7 <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
  409bf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  409bf7:	5d                   	pop    %rbp
  409bf8:	c3                   	ret
  409bf9:	90                   	nop

0000000000409bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>:
    basic_string<_CharT, _Traits, _Alloc>::
  409bfa:	55                   	push   %rbp
  409bfb:	48 89 e5             	mov    %rsp,%rbp
  409bfe:	53                   	push   %rbx
  409bff:	48 83 ec 28          	sub    $0x28,%rsp
  409c03:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409c07:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  409c0b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__capacity > max_size())
  409c0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409c13:	48 8b 18             	mov    (%rax),%rbx
  409c16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409c1a:	48 89 c7             	mov    %rax,%rdi
  409c1d:	e8 a2 0f 00 00       	call   40abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  409c22:	48 39 d8             	cmp    %rbx,%rax
  409c25:	0f 92 c0             	setb   %al
  409c28:	84 c0                	test   %al,%al
  409c2a:	74 0a                	je     409c36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x3c>
	std::__throw_length_error(__N("basic_string::_M_create"));
  409c2c:	bf 26 a2 41 00       	mov    $0x41a226,%edi
  409c31:	e8 ba a4 ff ff       	call   4040f0 <_ZSt20__throw_length_errorPKc@plt>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
  409c36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409c3a:	48 8b 00             	mov    (%rax),%rax
  409c3d:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  409c41:	73 52                	jae    409c95 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
  409c43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409c47:	48 8b 10             	mov    (%rax),%rdx
  409c4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c4e:	48 01 c0             	add    %rax,%rax
  409c51:	48 39 c2             	cmp    %rax,%rdx
  409c54:	73 3f                	jae    409c95 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
	  __capacity = 2 * __old_capacity;
  409c56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c5a:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  409c5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409c62:	48 89 10             	mov    %rdx,(%rax)
	  if (__capacity > max_size())
  409c65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409c69:	48 8b 18             	mov    (%rax),%rbx
  409c6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409c70:	48 89 c7             	mov    %rax,%rdi
  409c73:	e8 4c 0f 00 00       	call   40abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  409c78:	48 39 d8             	cmp    %rbx,%rax
  409c7b:	0f 92 c0             	setb   %al
  409c7e:	84 c0                	test   %al,%al
  409c80:	74 13                	je     409c95 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
	    __capacity = max_size();
  409c82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409c86:	48 89 c7             	mov    %rax,%rdi
  409c89:	e8 36 0f 00 00       	call   40abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  409c8e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  409c92:	48 89 02             	mov    %rax,(%rdx)
      return _S_allocate(_M_get_allocator(), __capacity + 1);
  409c95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409c99:	48 8b 00             	mov    (%rax),%rax
  409c9c:	48 8d 58 01          	lea    0x1(%rax),%rbx
  409ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409ca4:	48 89 c7             	mov    %rax,%rdi
  409ca7:	e8 a4 cf ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  409cac:	48 89 de             	mov    %rbx,%rsi
  409caf:	48 89 c7             	mov    %rax,%rdi
  409cb2:	e8 39 0f 00 00       	call   40abf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
    }
  409cb7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409cbb:	c9                   	leave
  409cbc:	c3                   	ret

0000000000409cbd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
  409cbd:	55                   	push   %rbp
  409cbe:	48 89 e5             	mov    %rsp,%rbp
  409cc1:	48 83 ec 20          	sub    $0x20,%rsp
  409cc5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409cc9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409ccd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
  409cd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409cd5:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  409cd9:	48 89 c2             	mov    %rax,%rdx
  409cdc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  409ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409ce4:	48 89 ce             	mov    %rcx,%rsi
  409ce7:	48 89 c7             	mov    %rax,%rdi
  409cea:	e8 85 0f 00 00       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  409cef:	90                   	nop
  409cf0:	c9                   	leave
  409cf1:	c3                   	ret

0000000000409cf2 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  409cf2:	55                   	push   %rbp
  409cf3:	48 89 e5             	mov    %rsp,%rbp
  409cf6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  409cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409cfe:	5d                   	pop    %rbp
  409cff:	c3                   	ret

0000000000409d00 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>:
    println(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  409d00:	55                   	push   %rbp
  409d01:	48 89 e5             	mov    %rsp,%rbp
  409d04:	41 55                	push   %r13
  409d06:	41 54                	push   %r12
  409d08:	53                   	push   %rbx
  409d09:	48 83 ec 48          	sub    $0x48,%rsp
  409d0d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  409d11:	48 89 f0             	mov    %rsi,%rax
  409d14:	48 89 d6             	mov    %rdx,%rsi
  409d17:	48 89 c0             	mov    %rax,%rax
  409d1a:	ba 00 00 00 00       	mov    $0x0,%edx
  409d1f:	48 89 f2             	mov    %rsi,%rdx
  409d22:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  409d26:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  409d2a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
		 std::format(__fmt, std::forward<_Args>(__args)...));
  409d2e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409d32:	48 89 c7             	mov    %rax,%rdi
  409d35:	e8 b8 ff ff ff       	call   409cf2 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
  409d3a:	48 89 c1             	mov    %rax,%rcx
  409d3d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  409d41:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  409d45:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  409d49:	48 89 c7             	mov    %rax,%rdi
  409d4c:	e8 6d 0f 00 00       	call   40acbe <_ZSt6formatIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES5_St19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>
      std::print(__stream, "{}\n",
  409d51:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  409d57:	41 bd 3e a2 41 00    	mov    $0x41a23e,%r13d
  409d5d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  409d61:	4c 89 e6             	mov    %r12,%rsi
  409d64:	4c 89 ef             	mov    %r13,%rdi
  409d67:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409d6b:	48 89 d1             	mov    %rdx,%rcx
  409d6e:	48 89 fa             	mov    %rdi,%rdx
  409d71:	48 89 c7             	mov    %rax,%rdi
  409d74:	e8 04 10 00 00       	call   40ad7d <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  409d79:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  409d7d:	48 89 c7             	mov    %rax,%rdi
  409d80:	e8 fd cb ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  409d85:	eb 1a                	jmp    409da1 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  409d87:	48 89 c3             	mov    %rax,%rbx
  409d8a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  409d8e:	48 89 c7             	mov    %rax,%rdi
  409d91:	e8 ec cb ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  409d96:	48 89 d8             	mov    %rbx,%rax
  409d99:	48 89 c7             	mov    %rax,%rdi
  409d9c:	e8 cf a5 ff ff       	call   404370 <_Unwind_Resume@plt>
    }
  409da1:	48 83 c4 48          	add    $0x48,%rsp
  409da5:	5b                   	pop    %rbx
  409da6:	41 5c                	pop    %r12
  409da8:	41 5d                	pop    %r13
  409daa:	5d                   	pop    %rbp
  409dab:	c3                   	ret

0000000000409dac <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>:
    __parse_arg_id(const _CharT* __first, const _CharT* __last)
  409dac:	55                   	push   %rbp
  409dad:	48 89 e5             	mov    %rsp,%rbp
  409db0:	48 83 ec 70          	sub    $0x70,%rsp
  409db4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  409db8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
      if (__first == __last)
  409dbc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409dc0:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
      if (*__first == '0')
  409dc4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409dc8:	0f b6 00             	movzbl (%rax),%eax
  409dcb:	3c 30                	cmp    $0x30,%al
  409dcd:	75 37                	jne    409e06 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x5a>
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
  409dcf:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  409dd6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409dda:	48 83 c0 01          	add    $0x1,%rax
  409dde:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  409de2:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  409de6:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  409dea:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  409dee:	48 89 ce             	mov    %rcx,%rsi
  409df1:	48 89 c7             	mov    %rax,%rdi
  409df4:	e8 4b 10 00 00       	call   40ae44 <_ZNSt4pairItPKcEC1IiS1_EEOT_OT0_>
  409df9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409dfd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  409e01:	e9 c0 00 00 00       	jmp    409ec6 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
      if ('1' <= *__first && *__first <= '9')
  409e06:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409e0a:	0f b6 00             	movzbl (%rax),%eax
  409e0d:	3c 30                	cmp    $0x30,%al
  409e0f:	0f 8e 83 00 00 00    	jle    409e98 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xec>
  409e15:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409e19:	0f b6 00             	movzbl (%rax),%eax
  409e1c:	3c 39                	cmp    $0x39,%al
  409e1e:	7f 78                	jg     409e98 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xec>
	  const unsigned short __id = *__first - '0';
  409e20:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409e24:	0f b6 00             	movzbl (%rax),%eax
  409e27:	66 98                	cbtw
  409e29:	83 e8 30             	sub    $0x30,%eax
  409e2c:	66 89 45 ae          	mov    %ax,-0x52(%rbp)
	  const auto __next = __first + 1;
  409e30:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409e34:	48 83 c0 01          	add    $0x1,%rax
  409e38:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
  409e3c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409e40:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  409e44:	74 16                	je     409e5c <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xb0>
  409e46:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409e4a:	0f b6 00             	movzbl (%rax),%eax
  409e4d:	3c 2f                	cmp    $0x2f,%al
  409e4f:	7e 0b                	jle    409e5c <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xb0>
  409e51:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  409e55:	0f b6 00             	movzbl (%rax),%eax
  409e58:	3c 39                	cmp    $0x39,%al
  409e5a:	7e 21                	jle    409e7d <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xd1>
	    return {__id, __next};
  409e5c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  409e60:	48 8d 4d ae          	lea    -0x52(%rbp),%rcx
  409e64:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  409e68:	48 89 ce             	mov    %rcx,%rsi
  409e6b:	48 89 c7             	mov    %rax,%rdi
  409e6e:	e8 17 10 00 00       	call   40ae8a <_ZNSt4pairItPKcEC1ERKtRKS1_>
  409e73:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409e77:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409e7b:	eb 49                	jmp    409ec6 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
	    return __format::__parse_integer(__first, __last);
  409e7d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  409e81:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409e85:	48 89 d6             	mov    %rdx,%rsi
  409e88:	48 89 c7             	mov    %rax,%rdi
  409e8b:	e8 2a 10 00 00       	call   40aeba <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>
  409e90:	48 89 d1             	mov    %rdx,%rcx
  409e93:	48 89 ca             	mov    %rcx,%rdx
  409e96:	eb 2e                	jmp    409ec6 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
      return {0, nullptr};
  409e98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  409e9f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  409ea6:	00
  409ea7:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  409eab:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
  409eaf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409eb3:	48 89 ce             	mov    %rcx,%rsi
  409eb6:	48 89 c7             	mov    %rax,%rdi
  409eb9:	e8 bc 10 00 00       	call   40af7a <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>
  409ebe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409ec2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  409ec6:	89 c1                	mov    %eax,%ecx
  409ec8:	89 c8                	mov    %ecx,%eax
  409eca:	c9                   	leave
  409ecb:	c3                   	ret

0000000000409ecc <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>:
      check_arg_id(size_t __id)
  409ecc:	55                   	push   %rbp
  409ecd:	48 89 e5             	mov    %rsp,%rbp
  409ed0:	48 83 ec 10          	sub    $0x10,%rsp
  409ed4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409ed8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (_M_indexing == _Auto)
  409edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409ee0:	8b 40 10             	mov    0x10(%rax),%eax
  409ee3:	83 f8 02             	cmp    $0x2,%eax
  409ee6:	75 05                	jne    409eed <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x21>
	  __format::__conflicting_indexing_in_format_string();
  409ee8:	e8 ab b1 ff ff       	call   405098 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>
	_M_indexing = _Manual;
  409eed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409ef1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
	if (std::is_constant_evaluated())
  409ef8:	e8 3e a6 ff ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  409efd:	84 c0                	test   %al,%al
  409eff:	74 13                	je     409f14 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x48>
	  if (__id >= _M_num_args)
  409f01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f05:	48 8b 40 20          	mov    0x20(%rax),%rax
  409f09:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  409f0d:	72 05                	jb     409f14 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x48>
	    __format::__invalid_arg_id_in_format_string();
  409f0f:	e8 92 b1 ff ff       	call   4050a6 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
      }
  409f14:	90                   	nop
  409f15:	c9                   	leave
  409f16:	c3                   	ret
  409f17:	90                   	nop

0000000000409f18 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5beginEv>:
      begin() const requires copyable<_It>
  409f18:	55                   	push   %rbp
  409f19:	48 89 e5             	mov    %rsp,%rbp
  409f1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_begin; }
  409f20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f24:	48 8b 00             	mov    (%rax),%rax
  409f27:	5d                   	pop    %rbp
  409f28:	c3                   	ret
  409f29:	90                   	nop

0000000000409f2a <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE3endEv>:
      constexpr _Sent end() const { return _M_end; }
  409f2a:	55                   	push   %rbp
  409f2b:	48 89 e5             	mov    %rsp,%rbp
  409f2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409f32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409f36:	48 8b 40 08          	mov    0x8(%rax),%rax
  409f3a:	5d                   	pop    %rbp
  409f3b:	c3                   	ret

0000000000409f3c <_ZNSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EEC1IS2_EET_S2_>:
      subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s)
  409f3c:	55                   	push   %rbp
  409f3d:	48 89 e5             	mov    %rsp,%rbp
  409f40:	48 83 ec 30          	sub    $0x30,%rsp
  409f44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409f48:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  409f4c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_begin(std::move(__i)), _M_end(__s)
  409f50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f54:	48 89 c7             	mov    %rax,%rdi
  409f57:	e8 64 10 00 00       	call   40afc0 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
  409f5c:	48 8b 10             	mov    (%rax),%rdx
  409f5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409f63:	48 89 10             	mov    %rdx,(%rax)
  409f66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409f6a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409f6e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  409f72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409f76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409f7a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  409f81:	00
	  constexpr _Size(_Tp = {}) { }
  409f82:	90                   	nop
      { }
  409f83:	90                   	nop
  409f84:	c9                   	leave
  409f85:	c3                   	ret

0000000000409f86 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEEC1EOS6_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  409f86:	55                   	push   %rbp
  409f87:	48 89 e5             	mov    %rsp,%rbp
  409f8a:	48 83 ec 10          	sub    $0x10,%rsp
  409f8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409f92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409f96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409f9a:	48 89 c7             	mov    %rax,%rdi
  409f9d:	e8 2c 10 00 00       	call   40afce <_ZSt7forwardINSt6ranges8subrangeIPKcS3_LNS0_13subrange_kindE1EEEEOT_RNSt16remove_referenceIS6_E4typeE>
  409fa2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  409fa6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  409faa:	48 8b 00             	mov    (%rax),%rax
  409fad:	48 89 01             	mov    %rax,(%rcx)
  409fb0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  409fb4:	90                   	nop
  409fb5:	c9                   	leave
  409fb6:	c3                   	ret
  409fb7:	90                   	nop

0000000000409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() { return _M_first_and_curr._M_curr; }
  409fb8:	55                   	push   %rbp
  409fb9:	48 89 e5             	mov    %rsp,%rbp
  409fbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409fc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409fc4:	48 83 c0 10          	add    $0x10,%rax
  409fc8:	5d                   	pop    %rbp
  409fc9:	c3                   	ret

0000000000409fca <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>:
      _Utf_iterator(_Iter __first, _Iter __it, _Sent __last)
  409fca:	55                   	push   %rbp
  409fcb:	48 89 e5             	mov    %rsp,%rbp
  409fce:	48 83 ec 20          	sub    $0x20,%rsp
  409fd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409fd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409fda:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  409fde:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_first_and_curr{__first, __it}, _M_last(__last)
  409fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409fe6:	48 8d 48 08          	lea    0x8(%rax),%rcx
  409fea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409fee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409ff2:	48 89 c6             	mov    %rax,%rsi
  409ff5:	48 89 cf             	mov    %rcx,%rdi
  409ff8:	e8 df 0f 00 00       	call   40afdc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>
  409ffd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a001:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  40a005:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a009:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  40a00d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a011:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
  40a015:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a019:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a01d:	48 89 50 20          	mov    %rdx,0x20(%rax)
	if (_M_curr() != _M_last)
  40a021:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a025:	48 89 c7             	mov    %rax,%rdi
  40a028:	e8 8b ff ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40a02d:	48 8b 10             	mov    (%rax),%rdx
  40a030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a034:	48 8b 40 20          	mov    0x20(%rax),%rax
  40a038:	48 39 c2             	cmp    %rax,%rdx
  40a03b:	0f 95 c0             	setne  %al
  40a03e:	84 c0                	test   %al,%al
  40a040:	74 0e                	je     40a050 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_+0x86>
	  _M_read();
  40a042:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a046:	48 89 c7             	mov    %rax,%rdi
  40a049:	e8 b8 0f 00 00       	call   40b006 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>
      }
  40a04e:	eb 0a                	jmp    40a05a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_+0x90>
	  _M_buf = {};
  40a050:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a054:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      }
  40a05a:	90                   	nop
  40a05b:	c9                   	leave
  40a05c:	c3                   	ret
  40a05d:	90                   	nop

000000000040a05e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEi>:
      operator++(int)
  40a05e:	55                   	push   %rbp
  40a05f:	48 89 e5             	mov    %rsp,%rbp
  40a062:	53                   	push   %rbx
  40a063:	48 83 ec 28          	sub    $0x28,%rsp
  40a067:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a06b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a06f:	89 55 dc             	mov    %edx,-0x24(%rbp)
	auto __tmp = *this;
  40a072:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a076:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a07a:	48 8b 0a             	mov    (%rdx),%rcx
  40a07d:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
  40a081:	48 89 08             	mov    %rcx,(%rax)
  40a084:	48 89 58 08          	mov    %rbx,0x8(%rax)
  40a088:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  40a08c:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
  40a090:	48 89 48 10          	mov    %rcx,0x10(%rax)
  40a094:	48 89 58 18          	mov    %rbx,0x18(%rax)
  40a098:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  40a09c:	48 89 50 20          	mov    %rdx,0x20(%rax)
	++*this;
  40a0a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a0a4:	48 89 c7             	mov    %rax,%rdi
  40a0a7:	e8 76 0f 00 00       	call   40b022 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
	return __tmp;
  40a0ac:	90                   	nop
      }
  40a0ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a0b1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a0b5:	c9                   	leave
  40a0b6:	c3                   	ret
  40a0b7:	90                   	nop

000000000040a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>:
      operator*() const { return _M_buf[_M_buf_index]; }
  40a0b8:	55                   	push   %rbp
  40a0b9:	48 89 e5             	mov    %rsp,%rbp
  40a0bc:	48 83 ec 10          	sub    $0x10,%rsp
  40a0c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a0c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a0c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40a0cc:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
  40a0d0:	0f b6 d2             	movzbl %dl,%edx
  40a0d3:	48 89 d6             	mov    %rdx,%rsi
  40a0d6:	48 89 c7             	mov    %rax,%rdi
  40a0d9:	e8 50 10 00 00       	call   40b12e <_ZNKSt5arrayIDiLm1EEixEm>
  40a0de:	8b 00                	mov    (%rax),%eax
  40a0e0:	c9                   	leave
  40a0e1:	c3                   	ret

000000000040a0e2 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>:
      base() const requires forward_iterator<_Iter>
  40a0e2:	55                   	push   %rbp
  40a0e3:	48 89 e5             	mov    %rsp,%rbp
  40a0e6:	48 83 ec 10          	sub    $0x10,%rsp
  40a0ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_curr(); }
  40a0ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a0f2:	48 89 c7             	mov    %rax,%rdi
  40a0f5:	e8 56 10 00 00       	call   40b150 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40a0fa:	c9                   	leave
  40a0fb:	c3                   	ret

000000000040a0fc <_ZNSt8__format5_SpecIcE8_S_alignEc>:
      _S_align(_CharT __c) noexcept
  40a0fc:	55                   	push   %rbp
  40a0fd:	48 89 e5             	mov    %rsp,%rbp
  40a100:	89 f8                	mov    %edi,%eax
  40a102:	88 45 fc             	mov    %al,-0x4(%rbp)
	switch (__c)
  40a105:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  40a109:	83 f8 5e             	cmp    $0x5e,%eax
  40a10c:	74 1f                	je     40a12d <_ZNSt8__format5_SpecIcE8_S_alignEc+0x31>
  40a10e:	83 f8 5e             	cmp    $0x5e,%eax
  40a111:	7f 21                	jg     40a134 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x38>
  40a113:	83 f8 3c             	cmp    $0x3c,%eax
  40a116:	74 07                	je     40a11f <_ZNSt8__format5_SpecIcE8_S_alignEc+0x23>
  40a118:	83 f8 3e             	cmp    $0x3e,%eax
  40a11b:	74 09                	je     40a126 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x2a>
  40a11d:	eb 15                	jmp    40a134 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x38>
	  case '<': return _Align_left;
  40a11f:	b8 01 00 00 00       	mov    $0x1,%eax
  40a124:	eb 13                	jmp    40a139 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  case '>': return _Align_right;
  40a126:	b8 02 00 00 00       	mov    $0x2,%eax
  40a12b:	eb 0c                	jmp    40a139 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  case '^': return _Align_centre;
  40a12d:	b8 03 00 00 00       	mov    $0x3,%eax
  40a132:	eb 05                	jmp    40a139 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  default: return _Align_default;
  40a134:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40a139:	5d                   	pop    %rbp
  40a13a:	c3                   	ret

000000000040a13b <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>:
      _S_parse_width_or_precision(iterator __first, iterator __last,
  40a13b:	55                   	push   %rbp
  40a13c:	48 89 e5             	mov    %rsp,%rbp
  40a13f:	48 83 ec 70          	sub    $0x70,%rsp
  40a143:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40a147:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40a14b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40a14f:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40a153:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
	if (__format::__is_digit(*__first))
  40a157:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a15b:	0f b6 00             	movzbl (%rax),%eax
  40a15e:	0f be c0             	movsbl %al,%eax
  40a161:	89 c7                	mov    %eax,%edi
  40a163:	e8 5a af ff ff       	call   4050c2 <_ZNSt8__format10__is_digitEc>
  40a168:	84 c0                	test   %al,%al
  40a16a:	74 73                	je     40a1df <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xa4>
	    auto [__v, __ptr] = __format::__parse_integer(__first, __last);
  40a16c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40a170:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a174:	48 89 d6             	mov    %rdx,%rsi
  40a177:	48 89 c7             	mov    %rax,%rdi
  40a17a:	e8 3b 0d 00 00       	call   40aeba <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>
  40a17f:	89 c1                	mov    %eax,%ecx
  40a181:	48 89 d0             	mov    %rdx,%rax
  40a184:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  40a187:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40a18b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a18f:	48 89 c7             	mov    %rax,%rdi
  40a192:	e8 c0 d7 ff ff       	call   407957 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40a197:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40a19b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a19f:	48 89 c7             	mov    %rax,%rdi
  40a1a2:	e8 08 d8 ff ff       	call   4079af <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40a1a7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    if (!__ptr)
  40a1ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1af:	48 8b 00             	mov    (%rax),%rax
  40a1b2:	48 85 c0             	test   %rax,%rax
  40a1b5:	75 0a                	jne    40a1c1 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x86>
	      __throw_format_error("format error: invalid width or precision "
  40a1b7:	bf 48 a2 41 00       	mov    $0x41a248,%edi
  40a1bc:	e8 68 ae ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	    __first = __ptr;
  40a1c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1c5:	48 8b 00             	mov    (%rax),%rax
  40a1c8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	    __val = __v;
  40a1cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a1d0:	0f b7 10             	movzwl (%rax),%edx
  40a1d3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a1d7:	66 89 10             	mov    %dx,(%rax)
  40a1da:	e9 f1 00 00 00       	jmp    40a2d0 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x195>
	else if (*__first == '{')
  40a1df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a1e3:	0f b6 00             	movzbl (%rax),%eax
  40a1e6:	3c 7b                	cmp    $0x7b,%al
  40a1e8:	0f 85 e2 00 00 00    	jne    40a2d0 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x195>
	    __arg_id = true;
  40a1ee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40a1f2:	c6 00 01             	movb   $0x1,(%rax)
	    ++__first;
  40a1f5:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
	    if (__first == __last)
  40a1fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a1fe:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40a202:	75 05                	jne    40a209 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xce>
	      __format::__unmatched_left_brace_in_format_string();
  40a204:	e8 73 ae ff ff       	call   40507c <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
	    if (*__first == '}')
  40a209:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a20d:	0f b6 00             	movzbl (%rax),%eax
  40a210:	3c 7d                	cmp    $0x7d,%al
  40a212:	75 1a                	jne    40a22e <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xf3>
	      __val = __pc.next_arg_id();
  40a214:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40a218:	48 89 c7             	mov    %rax,%rdi
  40a21b:	e8 44 bc ff ff       	call   405e64 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  40a220:	89 c2                	mov    %eax,%edx
  40a222:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a226:	66 89 10             	mov    %dx,(%rax)
  40a229:	e9 9d 00 00 00       	jmp    40a2cb <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x190>
		auto [__v, __ptr] = __format::__parse_arg_id(__first, __last);
  40a22e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40a232:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a236:	48 89 d6             	mov    %rdx,%rsi
  40a239:	48 89 c7             	mov    %rax,%rdi
  40a23c:	e8 6b fb ff ff       	call   409dac <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>
  40a241:	89 c1                	mov    %eax,%ecx
  40a243:	48 89 d0             	mov    %rdx,%rax
  40a246:	89 4d c0             	mov    %ecx,-0x40(%rbp)
  40a249:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a24d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a251:	48 89 c7             	mov    %rax,%rdi
  40a254:	e8 fe d6 ff ff       	call   407957 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40a259:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40a25d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a261:	48 89 c7             	mov    %rax,%rdi
  40a264:	e8 46 d7 ff ff       	call   4079af <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40a269:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
  40a26d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a271:	48 8b 00             	mov    (%rax),%rax
  40a274:	48 85 c0             	test   %rax,%rax
  40a277:	74 1b                	je     40a294 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x159>
  40a279:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a27d:	48 8b 00             	mov    (%rax),%rax
  40a280:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  40a284:	74 0e                	je     40a294 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x159>
  40a286:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a28a:	48 8b 00             	mov    (%rax),%rax
  40a28d:	0f b6 00             	movzbl (%rax),%eax
  40a290:	3c 7d                	cmp    $0x7d,%al
  40a292:	74 05                	je     40a299 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x15e>
		  __format::__invalid_arg_id_in_format_string();
  40a294:	e8 0d ae ff ff       	call   4050a6 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
		__first = __ptr;
  40a299:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a29d:	48 8b 00             	mov    (%rax),%rax
  40a2a0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		__pc.check_arg_id(__v);
  40a2a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a2a8:	0f b7 00             	movzwl (%rax),%eax
  40a2ab:	0f b7 d0             	movzwl %ax,%edx
  40a2ae:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40a2b2:	48 89 d6             	mov    %rdx,%rsi
  40a2b5:	48 89 c7             	mov    %rax,%rdi
  40a2b8:	e8 0f fc ff ff       	call   409ecc <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>
		__val = __v;
  40a2bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a2c1:	0f b7 10             	movzwl (%rax),%edx
  40a2c4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a2c8:	66 89 10             	mov    %dx,(%rax)
	    ++__first; // past the '}'
  40a2cb:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
	return __first;
  40a2d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
      }
  40a2d4:	c9                   	leave
  40a2d5:	c3                   	ret

000000000040a2d6 <_ZSt11__bit_widthImEiT_>:
    __bit_width(_Tp __x) noexcept
  40a2d6:	55                   	push   %rbp
  40a2d7:	48 89 e5             	mov    %rsp,%rbp
  40a2da:	48 83 ec 20          	sub    $0x20,%rsp
  40a2de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  40a2e2:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  40a2e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a2ed:	48 89 c7             	mov    %rax,%rdi
  40a2f0:	e8 6d 0e 00 00       	call   40b162 <_ZSt13__countl_zeroImEiT_>
  40a2f5:	ba 40 00 00 00       	mov    $0x40,%edx
  40a2fa:	29 c2                	sub    %eax,%edx
  40a2fc:	89 d0                	mov    %edx,%eax
    }
  40a2fe:	c9                   	leave
  40a2ff:	c3                   	ret

000000000040a300 <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a300:	55                   	push   %rbp
  40a301:	48 89 e5             	mov    %rsp,%rbp
  40a304:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a308:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a30c:	5d                   	pop    %rbp
  40a30d:	c3                   	ret

000000000040a30e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>:
      _M_destroy(size_type __size) throw()
  40a30e:	55                   	push   %rbp
  40a30f:	48 89 e5             	mov    %rsp,%rbp
  40a312:	41 54                	push   %r12
  40a314:	53                   	push   %rbx
  40a315:	48 83 ec 40          	sub    $0x40,%rsp
  40a319:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40a31d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40a321:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a325:	4c 8d 60 01          	lea    0x1(%rax),%r12
  40a329:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a32d:	48 89 c7             	mov    %rax,%rdi
  40a330:	e8 ef c5 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40a335:	48 89 c3             	mov    %rax,%rbx
  40a338:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a33c:	48 89 c7             	mov    %rax,%rdi
  40a33f:	e8 0c c9 ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40a344:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40a348:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
  40a34c:	4c 89 65 d8          	mov    %r12,-0x28(%rbp)
  40a350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a354:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a358:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a35c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40a360:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a364:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40a368:	b8 00 00 00 00       	mov    $0x0,%eax

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
  40a36d:	84 c0                	test   %al,%al
  40a36f:	74 0e                	je     40a37f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm+0x71>
	  {
	    ::operator delete(__p);
  40a371:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a375:	48 89 c7             	mov    %rax,%rdi
  40a378:	e8 83 9e ff ff       	call   404200 <_ZdlPv@plt>
	    return;
  40a37d:	eb 17                	jmp    40a396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm+0x88>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
  40a37f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40a383:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40a387:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a38b:	48 89 ce             	mov    %rcx,%rsi
  40a38e:	48 89 c7             	mov    %rax,%rdi
  40a391:	e8 ac 20 00 00       	call   40c442 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      [[__gnu__::__always_inline__]]
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
  40a396:	90                   	nop
  40a397:	90                   	nop
  40a398:	48 83 c4 40          	add    $0x40,%rsp
  40a39c:	5b                   	pop    %rbx
  40a39d:	41 5c                	pop    %r12
  40a39f:	5d                   	pop    %rbp
  40a3a0:	c3                   	ret
  40a3a1:	90                   	nop

000000000040a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
  40a3a2:	55                   	push   %rbp
  40a3a3:	48 89 e5             	mov    %rsp,%rbp
  40a3a6:	48 83 ec 10          	sub    $0x10,%rsp
  40a3aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _M_is_local() ? size_type(_S_local_capacity)
  40a3ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a3b2:	48 89 c7             	mov    %rax,%rdi
  40a3b5:	e8 a4 c8 ff ff       	call   406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  40a3ba:	84 c0                	test   %al,%al
  40a3bc:	74 07                	je     40a3c5 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x23>
  40a3be:	b8 0f 00 00 00       	mov    $0xf,%eax
	                     : _M_allocated_capacity;
  40a3c3:	eb 08                	jmp    40a3cd <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x2b>
	return _M_is_local() ? size_type(_S_local_capacity)
  40a3c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a3c9:	48 8b 40 10          	mov    0x10(%rax),%rax
      }
  40a3cd:	c9                   	leave
  40a3ce:	c3                   	ret
  40a3cf:	90                   	nop

000000000040a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    basic_string<_CharT, _Traits, _Alloc>::
  40a3d0:	55                   	push   %rbp
  40a3d1:	48 89 e5             	mov    %rsp,%rbp
  40a3d4:	53                   	push   %rbx
  40a3d5:	48 83 ec 28          	sub    $0x28,%rsp
  40a3d9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40a3dd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    reserve(size_type __res)
    {
      const size_type __capacity = capacity();
  40a3e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a3e5:	48 89 c7             	mov    %rax,%rdi
  40a3e8:	e8 b5 ff ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40a3ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2968. Inconsistencies between basic_string reserve and
      // vector/unordered_map/unordered_set reserve functions
      // P0966 reserve should not shrink
      if (__res <= __capacity)
  40a3f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a3f5:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40a3f9:	0f 83 80 00 00 00    	jae    40a47f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm+0xaf>
	return;

      pointer __tmp = _M_create(__res, __capacity);
  40a3ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a403:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  40a407:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a40b:	48 89 ce             	mov    %rcx,%rsi
  40a40e:	48 89 c7             	mov    %rax,%rdi
  40a411:	e8 e4 f7 ff ff       	call   409bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  40a416:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      this->_S_copy(__tmp, _M_data(), length() + 1);
  40a41a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a41e:	48 89 c7             	mov    %rax,%rdi
  40a421:	e8 88 c8 ff ff       	call   406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40a426:	48 8d 58 01          	lea    0x1(%rax),%rbx
  40a42a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a42e:	48 89 c7             	mov    %rax,%rdi
  40a431:	e8 ee c4 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40a436:	48 89 c1             	mov    %rax,%rcx
  40a439:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a43d:	48 89 da             	mov    %rbx,%rdx
  40a440:	48 89 ce             	mov    %rcx,%rsi
  40a443:	48 89 c7             	mov    %rax,%rdi
  40a446:	e8 29 08 00 00       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
  40a44b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a44f:	48 89 c7             	mov    %rax,%rdi
  40a452:	e8 4f e6 ff ff       	call   408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__tmp);
  40a457:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40a45b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a45f:	48 89 d6             	mov    %rdx,%rsi
  40a462:	48 89 c7             	mov    %rax,%rdi
  40a465:	e8 94 e6 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__res);
  40a46a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40a46e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a472:	48 89 d6             	mov    %rdx,%rsi
  40a475:	48 89 c7             	mov    %rax,%rdi
  40a478:	e8 9b e6 ff ff       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  40a47d:	eb 01                	jmp    40a480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm+0xb0>
	return;
  40a47f:	90                   	nop
    }
  40a480:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a484:	c9                   	leave
  40a485:	c3                   	ret

000000000040a486 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>:
      pointer_to(element_type& __r) noexcept
  40a486:	55                   	push   %rbp
  40a487:	48 89 e5             	mov    %rsp,%rbp
  40a48a:	48 83 ec 10          	sub    $0x10,%rsp
  40a48e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  40a492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a496:	48 89 c7             	mov    %rax,%rdi
  40a499:	e8 09 0d 00 00       	call   40b1a7 <_ZSt9addressofIKcEPT_RS1_>
  40a49e:	c9                   	leave
  40a49f:	c3                   	ret

000000000040a4a0 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKDiPS3_EEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
  40a4a0:	55                   	push   %rbp
  40a4a1:	48 89 e5             	mov    %rsp,%rbp
  40a4a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a4a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a4ac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return __val < *__it; }
  40a4b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a4b4:	8b 10                	mov    (%rax),%edx
  40a4b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a4ba:	8b 00                	mov    (%rax),%eax
  40a4bc:	39 c2                	cmp    %eax,%edx
  40a4be:	0f 92 c0             	setb   %al
  40a4c1:	5d                   	pop    %rbp
  40a4c2:	c3                   	ret
  40a4c3:	90                   	nop

000000000040a4c4 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPKjS3_EEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
  40a4c4:	55                   	push   %rbp
  40a4c5:	48 89 e5             	mov    %rsp,%rbp
  40a4c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a4cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a4d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return *__it < __val; }
  40a4d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a4d8:	8b 10                	mov    (%rax),%edx
  40a4da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a4de:	8b 00                	mov    (%rax),%eax
  40a4e0:	39 c2                	cmp    %eax,%edx
  40a4e2:	0f 92 c0             	setb   %al
  40a4e5:	5d                   	pop    %rbp
  40a4e6:	c3                   	ret
  40a4e7:	90                   	nop

000000000040a4e8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
  40a4e8:	55                   	push   %rbp
  40a4e9:	48 89 e5             	mov    %rsp,%rbp
  40a4ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a4f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_value(__value)
  40a4f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a4f8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a4fc:	48 89 10             	mov    %rdx,(%rax)
      { }
  40a4ff:	90                   	nop
  40a500:	5d                   	pop    %rbp
  40a501:	c3                   	ret

000000000040a502 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
  40a502:	55                   	push   %rbp
  40a503:	48 89 e5             	mov    %rsp,%rbp
  40a506:	48 83 ec 30          	sub    $0x30,%rsp
  40a50a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a50e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a512:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	__trip_count = (__last - __first) >> 2;
  40a516:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a51a:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40a51e:	48 c1 f8 02          	sar    $0x2,%rax
  40a522:	48 c1 f8 02          	sar    $0x2,%rax
  40a526:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __trip_count > 0; --__trip_count)
  40a52a:	e9 99 00 00 00       	jmp    40a5c8 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xc6>
	  if (__pred(__first))
  40a52f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a533:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a537:	48 89 d6             	mov    %rdx,%rsi
  40a53a:	48 89 c7             	mov    %rax,%rdi
  40a53d:	e8 b2 0f 00 00       	call   40b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40a542:	84 c0                	test   %al,%al
  40a544:	74 09                	je     40a54f <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x4d>
	    return __first;
  40a546:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a54a:	e9 14 01 00 00       	jmp    40a663 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40a54f:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40a554:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a558:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a55c:	48 89 d6             	mov    %rdx,%rsi
  40a55f:	48 89 c7             	mov    %rax,%rdi
  40a562:	e8 8d 0f 00 00       	call   40b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40a567:	84 c0                	test   %al,%al
  40a569:	74 09                	je     40a574 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x72>
	    return __first;
  40a56b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a56f:	e9 ef 00 00 00       	jmp    40a663 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40a574:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40a579:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a57d:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a581:	48 89 d6             	mov    %rdx,%rsi
  40a584:	48 89 c7             	mov    %rax,%rdi
  40a587:	e8 68 0f 00 00       	call   40b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40a58c:	84 c0                	test   %al,%al
  40a58e:	74 09                	je     40a599 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x97>
	    return __first;
  40a590:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a594:	e9 ca 00 00 00       	jmp    40a663 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40a599:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40a59e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a5a2:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a5a6:	48 89 d6             	mov    %rdx,%rsi
  40a5a9:	48 89 c7             	mov    %rax,%rdi
  40a5ac:	e8 43 0f 00 00       	call   40b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40a5b1:	84 c0                	test   %al,%al
  40a5b3:	74 09                	je     40a5be <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xbc>
	    return __first;
  40a5b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a5b9:	e9 a5 00 00 00       	jmp    40a663 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40a5be:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
      for (; __trip_count > 0; --__trip_count)
  40a5c3:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
  40a5c8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40a5cd:	0f 8f 5c ff ff ff    	jg     40a52f <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x2d>
      switch (__last - __first)
  40a5d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a5d7:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40a5db:	48 c1 f8 02          	sar    $0x2,%rax
  40a5df:	48 83 f8 03          	cmp    $0x3,%rax
  40a5e3:	74 14                	je     40a5f9 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xf7>
  40a5e5:	48 83 f8 03          	cmp    $0x3,%rax
  40a5e9:	7f 74                	jg     40a65f <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x15d>
  40a5eb:	48 83 f8 01          	cmp    $0x1,%rax
  40a5ef:	74 4c                	je     40a63d <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x13b>
  40a5f1:	48 83 f8 02          	cmp    $0x2,%rax
  40a5f5:	74 24                	je     40a61b <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x119>
  40a5f7:	eb 66                	jmp    40a65f <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x15d>
	  if (__pred(__first))
  40a5f9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a5fd:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a601:	48 89 d6             	mov    %rdx,%rsi
  40a604:	48 89 c7             	mov    %rax,%rdi
  40a607:	e8 e8 0e 00 00       	call   40b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40a60c:	84 c0                	test   %al,%al
  40a60e:	74 06                	je     40a616 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x114>
	    return __first;
  40a610:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a614:	eb 4d                	jmp    40a663 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40a616:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40a61b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a61f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a623:	48 89 d6             	mov    %rdx,%rsi
  40a626:	48 89 c7             	mov    %rax,%rdi
  40a629:	e8 c6 0e 00 00       	call   40b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40a62e:	84 c0                	test   %al,%al
  40a630:	74 06                	je     40a638 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x136>
	    return __first;
  40a632:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a636:	eb 2b                	jmp    40a663 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40a638:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40a63d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a641:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a645:	48 89 d6             	mov    %rdx,%rsi
  40a648:	48 89 c7             	mov    %rax,%rdi
  40a64b:	e8 a4 0e 00 00       	call   40b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40a650:	84 c0                	test   %al,%al
  40a652:	74 06                	je     40a65a <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x158>
	    return __first;
  40a654:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a658:	eb 09                	jmp    40a663 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40a65a:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  return __last;
  40a65f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  40a663:	c9                   	leave
  40a664:	c3                   	ret
  40a665:	90                   	nop

000000000040a666 <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>:
	span(_It __first, size_type __count)
  40a666:	55                   	push   %rbp
  40a667:	48 89 e5             	mov    %rsp,%rbp
  40a66a:	48 83 ec 20          	sub    $0x20,%rsp
  40a66e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a672:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a676:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _M_ptr(std::to_address(__first)), _M_extent(__count)
  40a67a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a67e:	48 89 c7             	mov    %rax,%rdi
  40a681:	e8 21 00 00 00       	call   40a6a7 <_ZSt10to_addressIcEPT_S1_>
  40a686:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40a68a:	48 89 02             	mov    %rax,(%rdx)
  40a68d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a691:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40a695:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a699:	48 89 c6             	mov    %rax,%rsi
  40a69c:	48 89 d7             	mov    %rdx,%rdi
  40a69f:	e8 8e a5 ff ff       	call   404c32 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>
	}
  40a6a4:	90                   	nop
  40a6a5:	c9                   	leave
  40a6a6:	c3                   	ret

000000000040a6a7 <_ZSt10to_addressIcEPT_S1_>:
    to_address(_Tp* __ptr) noexcept
  40a6a7:	55                   	push   %rbp
  40a6a8:	48 89 e5             	mov    %rsp,%rbp
  40a6ab:	48 83 ec 10          	sub    $0x10,%rsp
  40a6af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__to_address(__ptr); }
  40a6b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a6b7:	48 89 c7             	mov    %rax,%rdi
  40a6ba:	e8 95 f4 ff ff       	call   409b54 <_ZSt12__to_addressIcEPT_S1_>
  40a6bf:	c9                   	leave
  40a6c0:	c3                   	ret
  40a6c1:	90                   	nop

000000000040a6c2 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>:
	span(type_identity_t<element_type> (&__arr)[_ArrayExtent]) noexcept
  40a6c2:	55                   	push   %rbp
  40a6c3:	48 89 e5             	mov    %rsp,%rbp
  40a6c6:	48 83 ec 10          	sub    $0x10,%rsp
  40a6ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a6ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: span(static_cast<pointer>(__arr), _ArrayExtent)
  40a6d2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40a6d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a6da:	ba 00 01 00 00       	mov    $0x100,%edx
  40a6df:	48 89 ce             	mov    %rcx,%rsi
  40a6e2:	48 89 c7             	mov    %rax,%rdi
  40a6e5:	e8 7c ff ff ff       	call   40a666 <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
	{ }
  40a6ea:	90                   	nop
  40a6eb:	c9                   	leave
  40a6ec:	c3                   	ret

000000000040a6ed <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
  40a6ed:	55                   	push   %rbp
  40a6ee:	48 89 e5             	mov    %rsp,%rbp
  40a6f1:	48 83 ec 10          	sub    $0x10,%rsp
  40a6f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  40a6f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a6fd:	48 89 c7             	mov    %rax,%rdi
  40a700:	e8 52 0e 00 00       	call   40b557 <_ZSt11__addressofINSt8__format5_SinkIcEEEPT_RS3_>
  40a705:	c9                   	leave
  40a706:	c3                   	ret

000000000040a707 <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a707:	55                   	push   %rbp
  40a708:	48 89 e5             	mov    %rsp,%rbp
  40a70b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a70f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a713:	5d                   	pop    %rbp
  40a714:	c3                   	ret
  40a715:	90                   	nop

000000000040a716 <_ZNSt8__format5_SinkIcE10_M_reserveEm>:
      _M_reserve(size_t __n)
  40a716:	55                   	push   %rbp
  40a717:	48 89 e5             	mov    %rsp,%rbp
  40a71a:	53                   	push   %rbx
  40a71b:	48 83 ec 58          	sub    $0x58,%rsp
  40a71f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40a723:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  40a727:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a72b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  40a72f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a733:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40a737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a73b:	48 83 c0 08          	add    $0x8,%rax
  40a73f:	48 89 c7             	mov    %rax,%rdi
  40a742:	e8 cd 02 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a747:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a74b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a74f:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a753:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40a757:	48 89 c6             	mov    %rax,%rsi
  40a75a:	48 89 d7             	mov    %rdx,%rdi
  40a75d:	e8 d7 02 00 00       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40a762:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40a769:	48 89 c6             	mov    %rax,%rsi
  40a76c:	48 89 df             	mov    %rbx,%rdi
  40a76f:	e8 ea 19 00 00       	call   40c15e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  40a774:	90                   	nop
	if (__n <= _M_unused().size())
  40a775:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40a779:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40a77d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40a781:	48 89 c7             	mov    %rax,%rdi
  40a784:	e8 3b ac ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40a789:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40a78d:	0f 93 c0             	setae  %al
  40a790:	84 c0                	test   %al,%al
  40a792:	74 09                	je     40a79d <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x87>
	  return { this };
  40a794:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a798:	e9 aa 00 00 00       	jmp    40a847 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x131>
	if (__n <= _M_span.size()) // Cannot meet the request.
  40a79d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a7a1:	48 83 c0 08          	add    $0x8,%rax
  40a7a5:	48 89 c7             	mov    %rax,%rdi
  40a7a8:	e8 17 ac ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40a7ad:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40a7b1:	0f 93 c0             	setae  %al
  40a7b4:	84 c0                	test   %al,%al
  40a7b6:	0f 84 86 00 00 00    	je     40a842 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x12c>
	    _M_overflow(); // Make more space available.
  40a7bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a7c0:	48 8b 00             	mov    (%rax),%rax
  40a7c3:	48 8b 10             	mov    (%rax),%rdx
  40a7c6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a7ca:	48 89 c7             	mov    %rax,%rdi
  40a7cd:	ff d2                	call   *%rdx
  40a7cf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a7d3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  40a7d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a7db:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40a7df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a7e3:	48 83 c0 08          	add    $0x8,%rax
  40a7e7:	48 89 c7             	mov    %rax,%rdi
  40a7ea:	e8 25 02 00 00       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a7ef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40a7f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a7f7:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a7fb:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a7ff:	48 89 c6             	mov    %rax,%rsi
  40a802:	48 89 d7             	mov    %rdx,%rdi
  40a805:	e8 2f 02 00 00       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40a80a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40a811:	48 89 c6             	mov    %rax,%rsi
  40a814:	48 89 df             	mov    %rbx,%rdi
  40a817:	e8 42 19 00 00       	call   40c15e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  40a81c:	90                   	nop
	    if (__n <= _M_unused().size())
  40a81d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40a821:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40a825:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a829:	48 89 c7             	mov    %rax,%rdi
  40a82c:	e8 93 ab ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40a831:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40a835:	0f 93 c0             	setae  %al
  40a838:	84 c0                	test   %al,%al
  40a83a:	74 06                	je     40a842 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x12c>
	      return { this };
  40a83c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40a840:	eb 05                	jmp    40a847 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x131>
	return { nullptr };
  40a842:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40a847:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a84b:	c9                   	leave
  40a84c:	c3                   	ret
  40a84d:	90                   	nop

000000000040a84e <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>:
	explicit operator bool() const noexcept { return _M_sink; }
  40a84e:	55                   	push   %rbp
  40a84f:	48 89 e5             	mov    %rsp,%rbp
  40a852:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a85a:	48 8b 00             	mov    (%rax),%rax
  40a85d:	48 85 c0             	test   %rax,%rax
  40a860:	0f 95 c0             	setne  %al
  40a863:	5d                   	pop    %rbp
  40a864:	c3                   	ret
  40a865:	90                   	nop

000000000040a866 <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>:
	_CharT* get() const noexcept { return _M_sink->_M_next.operator->(); }
  40a866:	55                   	push   %rbp
  40a867:	48 89 e5             	mov    %rsp,%rbp
  40a86a:	48 83 ec 10          	sub    $0x10,%rsp
  40a86e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a876:	48 8b 00             	mov    (%rax),%rax
  40a879:	48 83 c0 18          	add    $0x18,%rax
  40a87d:	48 89 c7             	mov    %rax,%rdi
  40a880:	e8 3d 0d 00 00       	call   40b5c2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEptEv>
  40a885:	c9                   	leave
  40a886:	c3                   	ret
  40a887:	90                   	nop

000000000040a888 <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>:
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
  40a888:	55                   	push   %rbp
  40a889:	48 89 e5             	mov    %rsp,%rbp
  40a88c:	48 83 ec 10          	sub    $0x10,%rsp
  40a890:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a894:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a89c:	48 8b 00             	mov    (%rax),%rax
  40a89f:	48 8b 00             	mov    (%rax),%rax
  40a8a2:	48 83 c0 10          	add    $0x10,%rax
  40a8a6:	48 8b 08             	mov    (%rax),%rcx
  40a8a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a8ad:	48 8b 00             	mov    (%rax),%rax
  40a8b0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a8b4:	48 89 d6             	mov    %rdx,%rsi
  40a8b7:	48 89 c7             	mov    %rax,%rdi
  40a8ba:	ff d1                	call   *%rcx
  40a8bc:	90                   	nop
  40a8bd:	c9                   	leave
  40a8be:	c3                   	ret
  40a8bf:	90                   	nop

000000000040a8c0 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_>:
      basic_format_context(basic_format_args<basic_format_context> __args,
  40a8c0:	55                   	push   %rbp
  40a8c1:	48 89 e5             	mov    %rsp,%rbp
  40a8c4:	48 83 ec 30          	sub    $0x30,%rsp
  40a8c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a8cc:	48 89 f0             	mov    %rsi,%rax
  40a8cf:	48 89 d6             	mov    %rdx,%rsi
  40a8d2:	48 89 c0             	mov    %rax,%rax
  40a8d5:	ba 00 00 00 00       	mov    $0x0,%edx
  40a8da:	48 89 f2             	mov    %rsi,%rdx
  40a8dd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a8e1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40a8e5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_args(__args), _M_out(std::move(__out))
  40a8e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40a8ed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a8f1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40a8f5:	48 89 01             	mov    %rax,(%rcx)
  40a8f8:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40a8fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40a900:	48 89 c7             	mov    %rax,%rdi
  40a903:	e8 63 e4 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40a908:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a90c:	48 8b 00             	mov    (%rax),%rax
  40a90f:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40a913:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a917:	48 83 c0 18          	add    $0x18,%rax
  40a91b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
  40a91f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a923:	c6 00 00             	movb   $0x0,(%rax)
  40a926:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a92a:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  40a92e:	90                   	nop
      { }
  40a92f:	90                   	nop
  40a930:	c9                   	leave
  40a931:	c3                   	ret

000000000040a932 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_RKSt6locale>:
      basic_format_context(basic_format_args<basic_format_context> __args,
  40a932:	55                   	push   %rbp
  40a933:	48 89 e5             	mov    %rsp,%rbp
  40a936:	48 83 ec 30          	sub    $0x30,%rsp
  40a93a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a93e:	48 89 f0             	mov    %rsi,%rax
  40a941:	48 89 d6             	mov    %rdx,%rsi
  40a944:	48 89 c0             	mov    %rax,%rax
  40a947:	ba 00 00 00 00       	mov    $0x0,%edx
  40a94c:	48 89 f2             	mov    %rsi,%rdx
  40a94f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40a953:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40a957:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  40a95b:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
      : _M_args(__args), _M_out(std::move(__out)), _M_loc(__loc)
  40a95f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40a963:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a967:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a96b:	48 89 01             	mov    %rax,(%rcx)
  40a96e:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40a972:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40a976:	48 89 c7             	mov    %rax,%rdi
  40a979:	e8 ed e3 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40a97e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40a982:	48 8b 00             	mov    (%rax),%rax
  40a985:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40a989:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a98d:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a991:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a995:	48 89 c6             	mov    %rax,%rsi
  40a998:	48 89 d7             	mov    %rdx,%rdi
  40a99b:	e8 66 a7 ff ff       	call   405106 <_ZNSt8__format16_Optional_localeC1ERKSt6locale>
      { }
  40a9a0:	90                   	nop
  40a9a1:	c9                   	leave
  40a9a2:	c3                   	ret
  40a9a3:	90                   	nop

000000000040a9a4 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEC1ERSt20basic_format_contextIS2_cESt17basic_string_viewIcSt11char_traitsIcEE>:
      _Formatting_scanner(basic_format_context<_Out, _CharT>& __fc,
  40a9a4:	55                   	push   %rbp
  40a9a5:	48 89 e5             	mov    %rsp,%rbp
  40a9a8:	48 83 ec 20          	sub    $0x20,%rsp
  40a9ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a9b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a9b4:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  40a9b8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
      : _Scanner<_CharT>(__str), _M_fc(__fc)
  40a9bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9c0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40a9c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40a9c8:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  40a9cf:	48 89 c7             	mov    %rax,%rdi
  40a9d2:	e8 27 ae ff ff       	call   4057fe <_ZNSt8__format8_ScannerIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>
  40a9d7:	ba 78 cd 41 00       	mov    $0x41cd78,%edx
  40a9dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9e0:	48 89 10             	mov    %rdx,(%rax)
  40a9e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9e7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40a9eb:	48 89 50 30          	mov    %rdx,0x30(%rax)
      { }
  40a9ef:	90                   	nop
  40a9f0:	c9                   	leave
  40a9f1:	c3                   	ret

000000000040a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>:
      iterator out() { return std::move(_M_out); }
  40a9f2:	55                   	push   %rbp
  40a9f3:	48 89 e5             	mov    %rsp,%rbp
  40a9f6:	48 83 ec 10          	sub    $0x10,%rsp
  40a9fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a9fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa02:	48 83 c0 10          	add    $0x10,%rax
  40aa06:	48 89 c7             	mov    %rax,%rdi
  40aa09:	e8 5d e3 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40aa0e:	48 8b 00             	mov    (%rax),%rax
  40aa11:	c9                   	leave
  40aa12:	c3                   	ret
  40aa13:	90                   	nop

000000000040aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>:

      // iterator support

      [[nodiscard]]
      constexpr iterator
      begin() const noexcept
  40aa14:	55                   	push   %rbp
  40aa15:	48 89 e5             	mov    %rsp,%rbp
  40aa18:	48 83 ec 20          	sub    $0x20,%rsp
  40aa1c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_ptr); }
  40aa20:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40aa24:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  40aa28:	48 89 d6             	mov    %rdx,%rsi
  40aa2b:	48 89 c7             	mov    %rax,%rdi
  40aa2e:	e8 71 0b 00 00       	call   40b5a4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  40aa33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa37:	c9                   	leave
  40aa38:	c3                   	ret

000000000040aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  40aa39:	55                   	push   %rbp
  40aa3a:	48 89 e5             	mov    %rsp,%rbp
  40aa3d:	53                   	push   %rbx
  40aa3e:	48 83 ec 18          	sub    $0x18,%rsp
  40aa42:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40aa46:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  40aa4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aa4e:	48 89 c7             	mov    %rax,%rdi
  40aa51:	e8 a8 0b 00 00       	call   40b5fe <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  40aa56:	48 8b 18             	mov    (%rax),%rbx
  40aa59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aa5d:	48 89 c7             	mov    %rax,%rdi
  40aa60:	e8 99 0b 00 00       	call   40b5fe <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  40aa65:	48 8b 00             	mov    (%rax),%rax
  40aa68:	48 89 da             	mov    %rbx,%rdx
  40aa6b:	48 29 c2             	sub    %rax,%rdx
  40aa6e:	48 89 d0             	mov    %rdx,%rax
  40aa71:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40aa75:	c9                   	leave
  40aa76:	c3                   	ret
  40aa77:	90                   	nop

000000000040aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>:
	  return _Sp{ this->data(), _Count };
	}

      [[nodiscard]]
      constexpr span<element_type, dynamic_extent>
      first(size_type __count) const noexcept
  40aa78:	55                   	push   %rbp
  40aa79:	48 89 e5             	mov    %rsp,%rbp
  40aa7c:	48 83 ec 20          	sub    $0x20,%rsp
  40aa80:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40aa84:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40aa88:	b8 00 00 00 00       	mov    $0x0,%eax
      {
	__glibcxx_assert(__count <= size());
  40aa8d:	84 c0                	test   %al,%al
  40aa8f:	74 1e                	je     40aaaf <_ZNKSt4spanIcLm18446744073709551615EE5firstEm+0x37>
  40aa91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aa95:	48 89 c7             	mov    %rax,%rdi
  40aa98:	e8 27 a9 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40aa9d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40aaa1:	0f 92 c0             	setb   %al
  40aaa4:	0f b6 c0             	movzbl %al,%eax
  40aaa7:	48 85 c0             	test   %rax,%rax
  40aaaa:	0f 95 c0             	setne  %al
  40aaad:	84 c0                	test   %al,%al
	return { this->data(), __count };
  40aaaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aab3:	48 89 c7             	mov    %rax,%rdi
  40aab6:	e8 f7 a8 ff ff       	call   4053b2 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40aabb:	48 89 c1             	mov    %rax,%rcx
  40aabe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40aac2:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40aac6:	48 89 ce             	mov    %rcx,%rsi
  40aac9:	48 89 c7             	mov    %rax,%rdi
  40aacc:	e8 95 fb ff ff       	call   40a666 <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
  40aad1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40aad5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
      }
  40aad9:	c9                   	leave
  40aada:	c3                   	ret
  40aadb:	90                   	nop

000000000040aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>:
      append(const _CharT* __s, size_type __n)
  40aadc:	55                   	push   %rbp
  40aadd:	48 89 e5             	mov    %rsp,%rbp
  40aae0:	48 83 ec 20          	sub    $0x20,%rsp
  40aae4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40aae8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40aaec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_M_check_length(size_type(0), __n, "basic_string::append");
  40aaf0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40aaf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aaf8:	b9 80 a2 41 00       	mov    $0x41a280,%ecx
  40aafd:	be 00 00 00 00       	mov    $0x0,%esi
  40ab02:	48 89 c7             	mov    %rax,%rdi
  40ab05:	e8 02 0b 00 00       	call   40b60c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
	return _M_append(__s, __n);
  40ab0a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ab0e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ab12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab16:	48 89 ce             	mov    %rcx,%rsi
  40ab19:	48 89 c7             	mov    %rax,%rdi
  40ab1c:	e8 49 0b 00 00       	call   40b66a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>
      }
  40ab21:	c9                   	leave
  40ab22:	c3                   	ret
  40ab23:	90                   	nop

000000000040ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>:
	return __rlen;
      }

      [[nodiscard]]
      constexpr basic_string_view
      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
  40ab24:	55                   	push   %rbp
  40ab25:	48 89 e5             	mov    %rsp,%rbp
  40ab28:	48 83 ec 50          	sub    $0x50,%rsp
  40ab2c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40ab30:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40ab34:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      {
	__pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
  40ab38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ab3c:	48 89 c7             	mov    %rax,%rdi
  40ab3f:	e8 b6 ad ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40ab44:	48 89 c1             	mov    %rax,%rcx
  40ab47:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ab4b:	ba 95 a2 41 00       	mov    $0x41a295,%edx
  40ab50:	48 89 c6             	mov    %rax,%rsi
  40ab53:	48 89 cf             	mov    %rcx,%rdi
  40ab56:	e8 7a 9d ff ff       	call   4048d5 <_ZSt10__sv_checkmmPKc>
  40ab5b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
  40ab5f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ab63:	48 8b 00             	mov    (%rax),%rax
  40ab66:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  40ab6a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ab6e:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
  40ab72:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40ab76:	48 89 d6             	mov    %rdx,%rsi
  40ab79:	48 89 c7             	mov    %rax,%rdi
  40ab7c:	e8 4d f0 ff ff       	call   409bce <_ZSt3minImERKT_S2_S2_>
  40ab81:	48 8b 00             	mov    (%rax),%rax
  40ab84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return basic_string_view{_M_str + __pos, __rlen};
  40ab88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ab8c:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40ab90:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ab94:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40ab98:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40ab9c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40aba0:	48 89 ce             	mov    %rcx,%rsi
  40aba3:	48 89 c7             	mov    %rax,%rdi
  40aba6:	e8 4f bd ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40abab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40abaf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
      }
  40abb3:	c9                   	leave
  40abb4:	c3                   	ret
  40abb5:	90                   	nop

000000000040abb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
  40abb6:	55                   	push   %rbp
  40abb7:	48 89 e5             	mov    %rsp,%rbp
  40abba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  40abbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abc2:	5d                   	pop    %rbp
  40abc3:	c3                   	ret

000000000040abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
  40abc4:	55                   	push   %rbp
  40abc5:	48 89 e5             	mov    %rsp,%rbp
  40abc8:	48 83 ec 20          	sub    $0x20,%rsp
  40abcc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
  40abd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40abd4:	48 89 c7             	mov    %rax,%rdi
  40abd7:	e8 da ff ff ff       	call   40abb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40abdc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {
#if __cplusplus <= 201703L
	return __a.max_size();
#else
	return size_t(-1) / sizeof(value_type);
  40abe0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  40abe7:	48 83 e8 01          	sub    $0x1,%rax
  40abeb:	48 d1 e8             	shr    %rax
  40abee:	c9                   	leave
  40abef:	c3                   	ret

000000000040abf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>:
      _S_allocate(_Char_alloc_type& __a, size_type __n)
  40abf0:	55                   	push   %rbp
  40abf1:	48 89 e5             	mov    %rsp,%rbp
  40abf4:	48 83 ec 40          	sub    $0x40,%rsp
  40abf8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40abfc:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40ac00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ac04:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40ac08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ac0c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40ac10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ac14:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ac18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ac1c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ac20:	b8 00 00 00 00       	mov    $0x0,%eax
	if (std::__is_constant_evaluated())
  40ac25:	84 c0                	test   %al,%al
  40ac27:	74 27                	je     40ac50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x60>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
  40ac29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ac2d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ac31:	b8 00 00 00 00       	mov    $0x0,%eax
  40ac36:	83 e0 01             	and    $0x1,%eax
  40ac39:	84 c0                	test   %al,%al
  40ac3b:	74 05                	je     40ac42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x52>
	      std::__throw_bad_array_new_length();
  40ac3d:	e8 7e 95 ff ff       	call   4041c0 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
  40ac42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ac46:	48 89 c7             	mov    %rax,%rdi
  40ac49:	e8 c2 95 ff ff       	call   404210 <_Znwm@plt>
  40ac4e:	eb 19                	jmp    40ac69 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x79>
	return __allocator_base<_Tp>::allocate(__n, 0);
  40ac50:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40ac54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ac58:	ba 00 00 00 00       	mov    $0x0,%edx
  40ac5d:	48 89 ce             	mov    %rcx,%rsi
  40ac60:	48 89 c7             	mov    %rax,%rdi
  40ac63:	e8 3a 18 00 00       	call   40c4a2 <_ZNSt15__new_allocatorIcE8allocateEmPKv>
  40ac68:	90                   	nop
      { return __a.allocate(__n); }
  40ac69:	90                   	nop
	pointer __p = _Alloc_traits::allocate(__a, __n);
  40ac6a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return __p;
  40ac6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40ac72:	c9                   	leave
  40ac73:	c3                   	ret

000000000040ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
  40ac74:	55                   	push   %rbp
  40ac75:	48 89 e5             	mov    %rsp,%rbp
  40ac78:	48 83 ec 20          	sub    $0x20,%rsp
  40ac7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ac80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ac84:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
  40ac88:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
  40ac8d:	75 15                	jne    40aca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
  40ac8f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ac93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac97:	48 89 d6             	mov    %rdx,%rsi
  40ac9a:	48 89 c7             	mov    %rax,%rdi
  40ac9d:	e8 3f 99 ff ff       	call   4045e1 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40aca2:	eb 17                	jmp    40acbb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x47>
	  traits_type::copy(__d, __s, __n);
  40aca4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40aca8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40acac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acb0:	48 89 ce             	mov    %rcx,%rsi
  40acb3:	48 89 c7             	mov    %rax,%rdi
  40acb6:	e8 5a 9b ff ff       	call   404815 <_ZNSt11char_traitsIcE4copyEPcPKcm>
      }
  40acbb:	90                   	nop
  40acbc:	c9                   	leave
  40acbd:	c3                   	ret

000000000040acbe <_ZSt6formatIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES5_St19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
#endif

  template<typename... _Args>
    [[nodiscard]]
    inline string
    format(format_string<_Args...> __fmt, _Args&&... __args)
  40acbe:	55                   	push   %rbp
  40acbf:	48 89 e5             	mov    %rsp,%rbp
  40acc2:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40acc6:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40acca:	48 89 f0             	mov    %rsi,%rax
  40accd:	48 89 d6             	mov    %rdx,%rsi
  40acd0:	48 89 c0             	mov    %rax,%rax
  40acd3:	ba 00 00 00 00       	mov    $0x0,%edx
  40acd8:	48 89 f2             	mov    %rsi,%rdx
  40acdb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40acdf:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40ace3:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40ace7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40aceb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40acef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acf3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40acf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40acfb:	48 89 c7             	mov    %rax,%rdi
  40acfe:	e8 6a 15 00 00       	call   40c26d <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40ad03:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ad07:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40ad0b:	90                   	nop
      return _Store(__fmt_args...);
  40ad0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ad10:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40ad14:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ad18:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ad1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ad20:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ad24:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40ad28:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40ad2c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ad30:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40ad34:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40ad38:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40ad3c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40ad40:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ad44:	48 89 d6             	mov    %rdx,%rsi
  40ad47:	48 89 c7             	mov    %rax,%rdi
  40ad4a:	e8 c5 0b 00 00       	call   40b914 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40ad4f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40ad53:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40ad57:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40ad5b:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  40ad5f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40ad63:	49 89 c1             	mov    %rax,%r9
  40ad66:	48 89 d0             	mov    %rdx,%rax
  40ad69:	49 89 f0             	mov    %rsi,%r8
  40ad6c:	4c 89 ce             	mov    %r9,%rsi
  40ad6f:	48 89 c2             	mov    %rax,%rdx
  40ad72:	e8 48 a4 ff ff       	call   4051bf <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
  40ad77:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ad7b:	c9                   	leave
  40ad7c:	c3                   	ret

000000000040ad7d <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>:
    print(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40ad7d:	55                   	push   %rbp
  40ad7e:	48 89 e5             	mov    %rsp,%rbp
  40ad81:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40ad85:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40ad89:	48 89 f0             	mov    %rsi,%rax
  40ad8c:	48 89 d6             	mov    %rdx,%rsi
  40ad8f:	48 89 c0             	mov    %rax,%rax
  40ad92:	ba 00 00 00 00       	mov    $0x0,%edx
  40ad97:	48 89 f2             	mov    %rsi,%rdx
  40ad9a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40ad9e:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40ada2:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40ada6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40adaa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40adae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40adb2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40adb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40adba:	48 89 c7             	mov    %rax,%rdi
  40adbd:	e8 ab 14 00 00       	call   40c26d <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40adc2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40adc6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40adca:	90                   	nop
      return _Store(__fmt_args...);
  40adcb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40adcf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40add3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40add7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40addb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40addf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ade3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40ade7:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      auto __fmtargs = std::make_format_args(__args...);
  40adeb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40adef:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40adf3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40adf7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	std::vprint_unicode(__stream, __fmt.get(), __fmtargs);
  40adfb:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  40adff:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ae03:	48 89 d6             	mov    %rdx,%rsi
  40ae06:	48 89 c7             	mov    %rax,%rdi
  40ae09:	e8 06 0b 00 00       	call   40b914 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40ae0e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40ae12:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40ae16:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40ae1a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40ae1e:	48 89 c7             	mov    %rax,%rdi
  40ae21:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ae25:	49 89 f0             	mov    %rsi,%r8
  40ae28:	48 89 fe             	mov    %rdi,%rsi
  40ae2b:	48 89 c7             	mov    %rax,%rdi
  40ae2e:	e8 f4 a7 ff ff       	call   405627 <_ZSt14vprint_unicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
    }
  40ae33:	90                   	nop
  40ae34:	c9                   	leave
  40ae35:	c3                   	ret

000000000040ae36 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40ae36:	55                   	push   %rbp
  40ae37:	48 89 e5             	mov    %rsp,%rbp
  40ae3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40ae3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae42:	5d                   	pop    %rbp
  40ae43:	c3                   	ret

000000000040ae44 <_ZNSt4pairItPKcEC1IiS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40ae44:	55                   	push   %rbp
  40ae45:	48 89 e5             	mov    %rsp,%rbp
  40ae48:	48 83 ec 20          	sub    $0x20,%rsp
  40ae4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ae50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ae54:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40ae58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ae5c:	48 89 c7             	mov    %rax,%rdi
  40ae5f:	e8 d2 ff ff ff       	call   40ae36 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  40ae64:	8b 00                	mov    (%rax),%eax
  40ae66:	89 c2                	mov    %eax,%edx
  40ae68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae6c:	66 89 10             	mov    %dx,(%rax)
  40ae6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ae73:	48 89 c7             	mov    %rax,%rdi
  40ae76:	e8 74 cb ff ff       	call   4079ef <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
  40ae7b:	48 8b 10             	mov    (%rax),%rdx
  40ae7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ae82:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
  40ae86:	90                   	nop
  40ae87:	c9                   	leave
  40ae88:	c3                   	ret
  40ae89:	90                   	nop

000000000040ae8a <_ZNSt4pairItPKcEC1ERKtRKS1_>:
      pair(const _T1& __x, const _T2& __y)
  40ae8a:	55                   	push   %rbp
  40ae8b:	48 89 e5             	mov    %rsp,%rbp
  40ae8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ae92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ae96:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : first(__x), second(__y)
  40ae9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ae9e:	0f b7 10             	movzwl (%rax),%edx
  40aea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aea5:	66 89 10             	mov    %dx,(%rax)
  40aea8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aeac:	48 8b 10             	mov    (%rax),%rdx
  40aeaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aeb3:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  40aeb7:	90                   	nop
  40aeb8:	5d                   	pop    %rbp
  40aeb9:	c3                   	ret

000000000040aeba <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>:
    __parse_integer(const _CharT* __first, const _CharT* __last)
  40aeba:	55                   	push   %rbp
  40aebb:	48 89 e5             	mov    %rsp,%rbp
  40aebe:	48 83 ec 60          	sub    $0x60,%rsp
  40aec2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40aec6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
      if (__first == __last)
  40aeca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40aece:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
	  const auto __start = __first;
  40aed2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40aed6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  unsigned short __val = 0;
  40aeda:	66 c7 45 be 00 00    	movw   $0x0,-0x42(%rbp)
	  if (__detail::__from_chars_alnum<true>(__first, __last, __val, 10)
  40aee0:	48 8d 55 be          	lea    -0x42(%rbp),%rdx
  40aee4:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40aee8:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  40aeec:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40aef1:	48 89 c7             	mov    %rax,%rdi
  40aef4:	e8 8f 0a 00 00       	call   40b988 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i>
		&& __first != __start) [[likely]]
  40aef9:	84 c0                	test   %al,%al
  40aefb:	74 11                	je     40af0e <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x54>
  40aefd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40af01:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40af05:	74 07                	je     40af0e <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x54>
  40af07:	b8 01 00 00 00       	mov    $0x1,%eax
  40af0c:	eb 05                	jmp    40af13 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x59>
  40af0e:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (__detail::__from_chars_alnum<true>(__first, __last, __val, 10)
  40af13:	84 c0                	test   %al,%al
  40af15:	74 21                	je     40af38 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x7e>
	    return {__val, __first};
  40af17:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
  40af1b:	48 8d 4d be          	lea    -0x42(%rbp),%rcx
  40af1f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40af23:	48 89 ce             	mov    %rcx,%rsi
  40af26:	48 89 c7             	mov    %rax,%rdi
  40af29:	e8 78 0b 00 00       	call   40baa6 <_ZNSt4pairItPKcEC1IRtRS1_EEOT_OT0_>
  40af2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40af32:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40af36:	eb 2e                	jmp    40af66 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0xac>
      return {0, nullptr};
  40af38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40af3f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40af46:	00
  40af47:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  40af4b:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
  40af4f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40af53:	48 89 ce             	mov    %rcx,%rsi
  40af56:	48 89 c7             	mov    %rax,%rdi
  40af59:	e8 1c 00 00 00       	call   40af7a <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>
  40af5e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40af62:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  40af66:	89 c1                	mov    %eax,%ecx
  40af68:	89 c8                	mov    %ecx,%eax
  40af6a:	c9                   	leave
  40af6b:	c3                   	ret

000000000040af6c <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40af6c:	55                   	push   %rbp
  40af6d:	48 89 e5             	mov    %rsp,%rbp
  40af70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40af74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40af78:	5d                   	pop    %rbp
  40af79:	c3                   	ret

000000000040af7a <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40af7a:	55                   	push   %rbp
  40af7b:	48 89 e5             	mov    %rsp,%rbp
  40af7e:	48 83 ec 20          	sub    $0x20,%rsp
  40af82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40af86:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40af8a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40af8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40af92:	48 89 c7             	mov    %rax,%rdi
  40af95:	e8 9c fe ff ff       	call   40ae36 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  40af9a:	8b 00                	mov    (%rax),%eax
  40af9c:	89 c2                	mov    %eax,%edx
  40af9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40afa2:	66 89 10             	mov    %dx,(%rax)
  40afa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40afa9:	48 89 c7             	mov    %rax,%rdi
  40afac:	e8 bb ff ff ff       	call   40af6c <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
  40afb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40afb5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40afbc:	00
	{ }
  40afbd:	90                   	nop
  40afbe:	c9                   	leave
  40afbf:	c3                   	ret

000000000040afc0 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
  40afc0:	55                   	push   %rbp
  40afc1:	48 89 e5             	mov    %rsp,%rbp
  40afc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40afc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40afcc:	5d                   	pop    %rbp
  40afcd:	c3                   	ret

000000000040afce <_ZSt7forwardINSt6ranges8subrangeIPKcS3_LNS0_13subrange_kindE1EEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40afce:	55                   	push   %rbp
  40afcf:	48 89 e5             	mov    %rsp,%rbp
  40afd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40afd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40afda:	5d                   	pop    %rbp
  40afdb:	c3                   	ret

000000000040afdc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>:
	  _First_and_curr(_It __first, _It __curr)
  40afdc:	55                   	push   %rbp
  40afdd:	48 89 e5             	mov    %rsp,%rbp
  40afe0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40afe4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40afe8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  : _M_first(__first), _M_curr(__curr) { }
  40afec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aff0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40aff4:	48 89 10             	mov    %rdx,(%rax)
  40aff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40affb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40afff:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40b003:	90                   	nop
  40b004:	5d                   	pop    %rbp
  40b005:	c3                   	ret

000000000040b006 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>:
      _M_read()
  40b006:	55                   	push   %rbp
  40b007:	48 89 e5             	mov    %rsp,%rbp
  40b00a:	48 83 ec 10          	sub    $0x10,%rsp
  40b00e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_read_utf8();
  40b012:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b016:	48 89 c7             	mov    %rax,%rdi
  40b019:	e8 06 0b 00 00       	call   40bb24 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev>
      }
  40b01e:	90                   	nop
  40b01f:	c9                   	leave
  40b020:	c3                   	ret
  40b021:	90                   	nop

000000000040b022 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>:
      operator++()
  40b022:	55                   	push   %rbp
  40b023:	48 89 e5             	mov    %rsp,%rbp
  40b026:	53                   	push   %rbx
  40b027:	48 83 ec 38          	sub    $0x38,%rsp
  40b02b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
  40b02f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b033:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40b037:	0f b6 c0             	movzbl %al,%eax
  40b03a:	8d 50 01             	lea    0x1(%rax),%edx
  40b03d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b041:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  40b045:	0f b6 c0             	movzbl %al,%eax
  40b048:	39 c2                	cmp    %eax,%edx
  40b04a:	75 23                	jne    40b06f <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x4d>
  40b04c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b050:	48 89 c7             	mov    %rax,%rdi
  40b053:	e8 60 ef ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40b058:	48 8b 10             	mov    (%rax),%rdx
  40b05b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b05f:	48 8b 40 20          	mov    0x20(%rax),%rax
  40b063:	48 39 c2             	cmp    %rax,%rdx
  40b066:	74 07                	je     40b06f <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x4d>
  40b068:	b8 01 00 00 00       	mov    $0x1,%eax
  40b06d:	eb 05                	jmp    40b074 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x52>
  40b06f:	b8 00 00 00 00       	mov    $0x0,%eax
  40b074:	84 c0                	test   %al,%al
  40b076:	74 7c                	je     40b0f4 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0xd2>
	      std::advance(_M_curr(), _M_to_increment);
  40b078:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b07c:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  40b080:	0f b6 d8             	movzbl %al,%ebx
  40b083:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b087:	48 89 c7             	mov    %rax,%rdi
  40b08a:	e8 29 ef ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40b08f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40b093:	88 5d e7             	mov    %bl,-0x19(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  40b096:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  40b09a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40b09e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b0a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b0a6:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  40b0a7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b0ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b0af:	48 89 d6             	mov    %rdx,%rsi
  40b0b2:	48 89 c7             	mov    %rax,%rdi
  40b0b5:	e8 63 13 00 00       	call   40c41d <_ZSt9__advanceIPKclEvRT_T0_St26random_access_iterator_tag>
    }
  40b0ba:	90                   	nop
	    if (_M_curr() == _M_last)
  40b0bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b0bf:	48 89 c7             	mov    %rax,%rdi
  40b0c2:	e8 f1 ee ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40b0c7:	48 8b 10             	mov    (%rax),%rdx
  40b0ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b0ce:	48 8b 40 20          	mov    0x20(%rax),%rax
  40b0d2:	48 39 c2             	cmp    %rax,%rdx
  40b0d5:	0f 94 c0             	sete   %al
  40b0d8:	84 c0                	test   %al,%al
  40b0da:	74 0a                	je     40b0e6 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0xc4>
	      _M_buf_index = 0;
  40b0dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b0e0:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  40b0e4:	eb 3d                	jmp    40b123 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	      _M_read();
  40b0e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b0ea:	48 89 c7             	mov    %rax,%rdi
  40b0ed:	e8 14 ff ff ff       	call   40b006 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>
  40b0f2:	eb 2f                	jmp    40b123 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	else if (_M_buf_index + 1 < _M_buf_last)
  40b0f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b0f8:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40b0fc:	0f b6 c0             	movzbl %al,%eax
  40b0ff:	8d 50 01             	lea    0x1(%rax),%edx
  40b102:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b106:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  40b10a:	0f b6 c0             	movzbl %al,%eax
  40b10d:	39 c2                	cmp    %eax,%edx
  40b10f:	7d 12                	jge    40b123 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	  ++_M_buf_index;
  40b111:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b115:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40b119:	8d 50 01             	lea    0x1(%rax),%edx
  40b11c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b120:	88 50 18             	mov    %dl,0x18(%rax)
	return *this;
  40b123:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      }
  40b127:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b12b:	c9                   	leave
  40b12c:	c3                   	ret
  40b12d:	90                   	nop

000000000040b12e <_ZNKSt5arrayIDiLm1EEixEm>:
	return _M_elems[__n];
      }

      [[__nodiscard__]]
      constexpr const_reference
      operator[](size_type __n) const noexcept
  40b12e:	55                   	push   %rbp
  40b12f:	48 89 e5             	mov    %rsp,%rbp
  40b132:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b136:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _M_elems[__n];
  40b13a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b13e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40b145:	00
  40b146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b14a:	48 01 d0             	add    %rdx,%rax
      }
  40b14d:	5d                   	pop    %rbp
  40b14e:	c3                   	ret
  40b14f:	90                   	nop

000000000040b150 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() const { return _M_first_and_curr._M_curr; }
  40b150:	55                   	push   %rbp
  40b151:	48 89 e5             	mov    %rsp,%rbp
  40b154:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b158:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b15c:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b160:	5d                   	pop    %rbp
  40b161:	c3                   	ret

000000000040b162 <_ZSt13__countl_zeroImEiT_>:
    __countl_zero(_Tp __x) noexcept
  40b162:	55                   	push   %rbp
  40b163:	48 89 e5             	mov    %rsp,%rbp
  40b166:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  40b16a:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%rbp)
      if (__x == 0)
  40b171:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40b176:	75 07                	jne    40b17f <_ZSt13__countl_zeroImEiT_+0x1d>
        return _Nd;
  40b178:	b8 40 00 00 00       	mov    $0x40,%eax
  40b17d:	eb 26                	jmp    40b1a5 <_ZSt13__countl_zeroImEiT_+0x43>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  40b17f:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  40b186:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  40b18d:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  constexpr int __diff = _Nd_ul - _Nd;
  40b194:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	  return __builtin_clzl(__x) - __diff;
  40b19b:	48 0f bd 45 d8       	bsr    -0x28(%rbp),%rax
  40b1a0:	48 83 f0 3f          	xor    $0x3f,%rax
  40b1a4:	90                   	nop
    }
  40b1a5:	5d                   	pop    %rbp
  40b1a6:	c3                   	ret

000000000040b1a7 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
  40b1a7:	55                   	push   %rbp
  40b1a8:	48 89 e5             	mov    %rsp,%rbp
  40b1ab:	48 83 ec 10          	sub    $0x10,%rsp
  40b1af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  40b1b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b1b7:	48 89 c7             	mov    %rax,%rdi
  40b1ba:	e8 82 0d 00 00       	call   40bf41 <_ZSt11__addressofIKcEPT_RS1_>
  40b1bf:	c9                   	leave
  40b1c0:	c3                   	ret
  40b1c1:	90                   	nop

000000000040b1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
  40b1c2:	55                   	push   %rbp
  40b1c3:	48 89 e5             	mov    %rsp,%rbp
  40b1c6:	48 83 ec 70          	sub    $0x70,%rsp
  40b1ca:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40b1ce:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40b1d2:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40b1d6:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40b1da:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
	       const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");
  40b1de:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40b1e2:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40b1e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b1ea:	b9 af a2 41 00       	mov    $0x41a2af,%ecx
  40b1ef:	48 89 c7             	mov    %rax,%rdi
  40b1f2:	e8 15 04 00 00       	call   40b60c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>

      const size_type __old_size = this->size();
  40b1f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b1fb:	48 89 c7             	mov    %rax,%rdi
  40b1fe:	e8 1d 9a ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40b203:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      const size_type __new_size = __old_size + __len2 - __len1;
  40b207:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b20b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40b20f:	48 01 d0             	add    %rdx,%rax
  40b212:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  40b216:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

      if (__new_size <= this->capacity())
  40b21a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b21e:	48 89 c7             	mov    %rax,%rdi
  40b221:	e8 7c f1 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40b226:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40b22a:	0f 93 c0             	setae  %al
  40b22d:	84 c0                	test   %al,%al
  40b22f:	0f 84 dd 01 00 00    	je     40b412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
	{
	  pointer __p = this->_M_data() + __pos;
  40b235:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b239:	48 89 c7             	mov    %rax,%rdi
  40b23c:	e8 e3 b6 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b241:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40b245:	48 01 d0             	add    %rdx,%rax
  40b248:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	  const size_type __how_much = __old_size - __pos - __len1;
  40b24c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b250:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  40b254:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  40b258:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if __cpp_lib_is_constant_evaluated
	  if (std::is_constant_evaluated())
  40b25c:	e8 da 92 ff ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  40b261:	84 c0                	test   %al,%al
  40b263:	0f 84 09 01 00 00    	je     40b372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x1b0>
	    {
	      auto __newp = _S_allocate(_M_get_allocator(), __new_size);
  40b269:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b26d:	48 89 c7             	mov    %rax,%rdi
  40b270:	e8 db b9 ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40b275:	48 89 c2             	mov    %rax,%rdx
  40b278:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b27c:	48 89 c6             	mov    %rax,%rsi
  40b27f:	48 89 d7             	mov    %rdx,%rdi
  40b282:	e8 69 f9 ff ff       	call   40abf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
  40b287:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      _S_copy(__newp, this->_M_data(), __pos);
  40b28b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b28f:	48 89 c7             	mov    %rax,%rdi
  40b292:	e8 8d b6 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b297:	48 89 c1             	mov    %rax,%rcx
  40b29a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40b29e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b2a2:	48 89 ce             	mov    %rcx,%rsi
  40b2a5:	48 89 c7             	mov    %rax,%rdi
  40b2a8:	e8 c7 f9 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos, __s, __len2);
  40b2ad:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b2b1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40b2b5:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40b2b9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40b2bd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40b2c1:	48 89 c6             	mov    %rax,%rsi
  40b2c4:	48 89 cf             	mov    %rcx,%rdi
  40b2c7:	e8 a8 f9 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);
  40b2cc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b2d0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b2d4:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  40b2d8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40b2dc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40b2e0:	48 01 c2             	add    %rax,%rdx
  40b2e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b2e7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40b2eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b2ef:	48 89 c2             	mov    %rax,%rdx
  40b2f2:	48 89 cf             	mov    %rcx,%rdi
  40b2f5:	e8 7a f9 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(this->_M_data(), __newp, __new_size);
  40b2fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b2fe:	48 89 c7             	mov    %rax,%rdi
  40b301:	e8 1e b6 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b306:	48 89 c1             	mov    %rax,%rcx
  40b309:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b30d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b311:	48 89 c6             	mov    %rax,%rsi
  40b314:	48 89 cf             	mov    %rcx,%rdi
  40b317:	e8 58 f9 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      this->_M_get_allocator().deallocate(__newp, __new_size);
  40b31c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b320:	48 89 c7             	mov    %rax,%rdi
  40b323:	e8 28 b9 ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40b328:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b32c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b330:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40b334:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b338:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b33c:	b8 00 00 00 00       	mov    $0x0,%eax
	if (std::__is_constant_evaluated())
  40b341:	84 c0                	test   %al,%al
  40b343:	74 11                	je     40b356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x194>
	    ::operator delete(__p);
  40b345:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b349:	48 89 c7             	mov    %rax,%rdi
  40b34c:	e8 af 8e ff ff       	call   404200 <_ZdlPv@plt>
	    return;
  40b351:	e9 db 00 00 00       	jmp    40b431 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	__allocator_base<_Tp>::deallocate(__p, __n);
  40b356:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40b35a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40b35e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b362:	48 89 ce             	mov    %rcx,%rsi
  40b365:	48 89 c7             	mov    %rax,%rdi
  40b368:	e8 d5 10 00 00       	call   40c442 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
  40b36d:	e9 bf 00 00 00       	jmp    40b431 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	    }
	  else
#endif
	  if (__builtin_expect(_M_disjunct(__s), true))
  40b372:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40b376:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b37a:	48 89 d6             	mov    %rdx,%rsi
  40b37d:	48 89 c7             	mov    %rax,%rdi
  40b380:	e8 cb 0b 00 00       	call   40bf50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
  40b385:	0f b6 c0             	movzbl %al,%eax
  40b388:	48 85 c0             	test   %rax,%rax
  40b38b:	0f 95 c0             	setne  %al
  40b38e:	84 c0                	test   %al,%al
  40b390:	74 58                	je     40b3ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x228>
	    {
	      if (__how_much && __len1 != __len2)
  40b392:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40b397:	74 31                	je     40b3ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x208>
  40b399:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b39d:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  40b3a1:	74 27                	je     40b3ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x208>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
  40b3a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b3a7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b3ab:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  40b3af:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b3b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40b3b7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40b3bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b3bf:	48 89 c2             	mov    %rax,%rdx
  40b3c2:	48 89 cf             	mov    %rcx,%rdi
  40b3c5:	e8 05 0c 00 00       	call   40bfcf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2)
  40b3ca:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  40b3cf:	74 60                	je     40b431 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
		this->_S_copy(__p, __s, __len2);
  40b3d1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40b3d5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40b3d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b3dd:	48 89 ce             	mov    %rcx,%rsi
  40b3e0:	48 89 c7             	mov    %rax,%rdi
  40b3e3:	e8 8c f8 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40b3e8:	eb 47                	jmp    40b431 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	    }
	  else
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
  40b3ea:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  40b3ee:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40b3f2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40b3f6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b3fa:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40b3fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b402:	4d 89 c1             	mov    %r8,%r9
  40b405:	49 89 f8             	mov    %rdi,%r8
  40b408:	48 89 c7             	mov    %rax,%rdi
  40b40b:	e8 b0 8e ff ff       	call   4042c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@plt>
  40b410:	eb 1f                	jmp    40b431 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	}
      else
	this->_M_mutate(__pos, __len1, __s, __len2);
  40b412:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40b416:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40b41a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b41e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40b422:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b426:	49 89 f8             	mov    %rdi,%r8
  40b429:	48 89 c7             	mov    %rax,%rdi
  40b42c:	e8 e9 0b 00 00       	call   40c01a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__new_size);
  40b431:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b435:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b439:	48 89 d6             	mov    %rdx,%rsi
  40b43c:	48 89 c7             	mov    %rax,%rdi
  40b43f:	e8 f2 b4 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  40b444:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  40b448:	c9                   	leave
  40b449:	c3                   	ret

000000000040b44a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>:
      _M_check(size_type __pos, const char* __s) const
  40b44a:	55                   	push   %rbp
  40b44b:	48 89 e5             	mov    %rsp,%rbp
  40b44e:	48 83 ec 20          	sub    $0x20,%rsp
  40b452:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b456:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b45a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__pos > this->size())
  40b45e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b462:	48 89 c7             	mov    %rax,%rdi
  40b465:	e8 b6 97 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40b46a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40b46e:	0f 92 c0             	setb   %al
  40b471:	84 c0                	test   %al,%al
  40b473:	74 29                	je     40b49e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc+0x54>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
  40b475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b479:	48 89 c7             	mov    %rax,%rdi
  40b47c:	e8 9f 97 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40b481:	48 89 c1             	mov    %rax,%rcx
  40b484:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b488:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b48c:	48 89 c6             	mov    %rax,%rsi
  40b48f:	bf c8 a2 41 00       	mov    $0x41a2c8,%edi
  40b494:	b8 00 00 00 00       	mov    $0x0,%eax
  40b499:	e8 52 8e ff ff       	call   4042f0 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
	return __pos;
  40b49e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  40b4a2:	c9                   	leave
  40b4a3:	c3                   	ret

000000000040b4a4 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40b4a4:	55                   	push   %rbp
  40b4a5:	48 89 e5             	mov    %rsp,%rbp
  40b4a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b4ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40b4b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b4b4:	48 8b 00             	mov    (%rax),%rax
  40b4b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b4bb:	48 c1 e2 02          	shl    $0x2,%rdx
  40b4bf:	48 01 c2             	add    %rax,%rdx
  40b4c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b4c6:	48 89 10             	mov    %rdx,(%rax)
    }
  40b4c9:	90                   	nop
  40b4ca:	5d                   	pop    %rbp
  40b4cb:	c3                   	ret

000000000040b4cc <_ZSt9__advanceIPKjlEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40b4cc:	55                   	push   %rbp
  40b4cd:	48 89 e5             	mov    %rsp,%rbp
  40b4d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b4d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40b4d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b4dc:	48 8b 00             	mov    (%rax),%rax
  40b4df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b4e3:	48 c1 e2 02          	shl    $0x2,%rdx
  40b4e7:	48 01 c2             	add    %rax,%rdx
  40b4ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b4ee:	48 89 10             	mov    %rdx,(%rax)
    }
  40b4f1:	90                   	nop
  40b4f2:	5d                   	pop    %rbp
  40b4f3:	c3                   	ret

000000000040b4f4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>:
	operator()(_Iterator __it)
  40b4f4:	55                   	push   %rbp
  40b4f5:	48 89 e5             	mov    %rsp,%rbp
  40b4f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b4fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return *__it == _M_value; }
  40b500:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b504:	8b 10                	mov    (%rax),%edx
  40b506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b50a:	48 8b 00             	mov    (%rax),%rax
  40b50d:	8b 00                	mov    (%rax),%eax
  40b50f:	39 c2                	cmp    %eax,%edx
  40b511:	0f 94 c0             	sete   %al
  40b514:	5d                   	pop    %rbp
  40b515:	c3                   	ret

000000000040b516 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm>:
      remove_suffix(size_type __n) noexcept
  40b516:	55                   	push   %rbp
  40b517:	48 89 e5             	mov    %rsp,%rbp
  40b51a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b51e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b522:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(this->_M_len >= __n);
  40b527:	84 c0                	test   %al,%al
  40b529:	74 14                	je     40b53f <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm+0x29>
  40b52b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b52f:	48 8b 00             	mov    (%rax),%rax
  40b532:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40b536:	0f 92 c0             	setb   %al
  40b539:	0f b6 c0             	movzbl %al,%eax
  40b53c:	48 85 c0             	test   %rax,%rax
	this->_M_len -= __n;
  40b53f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b543:	48 8b 00             	mov    (%rax),%rax
  40b546:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40b54a:	48 89 c2             	mov    %rax,%rdx
  40b54d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b551:	48 89 10             	mov    %rdx,(%rax)
      }
  40b554:	90                   	nop
  40b555:	5d                   	pop    %rbp
  40b556:	c3                   	ret

000000000040b557 <_ZSt11__addressofINSt8__format5_SinkIcEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40b557:	55                   	push   %rbp
  40b558:	48 89 e5             	mov    %rsp,%rbp
  40b55b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  40b55f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b563:	5d                   	pop    %rbp
  40b564:	c3                   	ret
  40b565:	90                   	nop

000000000040b566 <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>:
      _M_type(size_t __i) const noexcept
  40b566:	55                   	push   %rbp
  40b567:	48 89 e5             	mov    %rsp,%rbp
  40b56a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b56e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
  40b572:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b576:	48 8b 00             	mov    (%rax),%rax
  40b579:	48 c1 e8 04          	shr    $0x4,%rax
  40b57d:	48 89 c6             	mov    %rax,%rsi
  40b580:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b584:	48 89 d0             	mov    %rdx,%rax
  40b587:	48 c1 e0 02          	shl    $0x2,%rax
  40b58b:	48 01 d0             	add    %rdx,%rax
  40b58e:	89 c1                	mov    %eax,%ecx
  40b590:	48 d3 ee             	shr    %cl,%rsi
  40b593:	48 89 f0             	mov    %rsi,%rax
  40b596:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
  40b59a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b59e:	83 e0 1f             	and    $0x1f,%eax
      }
  40b5a1:	5d                   	pop    %rbp
  40b5a2:	c3                   	ret
  40b5a3:	90                   	nop

000000000040b5a4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  40b5a4:	55                   	push   %rbp
  40b5a5:	48 89 e5             	mov    %rsp,%rbp
  40b5a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b5ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  40b5b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b5b4:	48 8b 10             	mov    (%rax),%rdx
  40b5b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b5bb:	48 89 10             	mov    %rdx,(%rax)
  40b5be:	90                   	nop
  40b5bf:	5d                   	pop    %rbp
  40b5c0:	c3                   	ret
  40b5c1:	90                   	nop

000000000040b5c2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
  40b5c2:	55                   	push   %rbp
  40b5c3:	48 89 e5             	mov    %rsp,%rbp
  40b5c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40b5ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b5ce:	48 8b 00             	mov    (%rax),%rax
  40b5d1:	5d                   	pop    %rbp
  40b5d2:	c3                   	ret
  40b5d3:	90                   	nop

000000000040b5d4 <_ZNSt8__format5_SinkIcE7_M_bumpEm>:
      _M_bump(size_t __n)
  40b5d4:	55                   	push   %rbp
  40b5d5:	48 89 e5             	mov    %rsp,%rbp
  40b5d8:	48 83 ec 10          	sub    $0x10,%rsp
  40b5dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b5e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_next += __n; }
  40b5e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b5e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b5ec:	48 83 c2 18          	add    $0x18,%rdx
  40b5f0:	48 89 c6             	mov    %rax,%rsi
  40b5f3:	48 89 d7             	mov    %rdx,%rdi
  40b5f6:	e8 4b 0c 00 00       	call   40c246 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
  40b5fb:	90                   	nop
  40b5fc:	c9                   	leave
  40b5fd:	c3                   	ret

000000000040b5fe <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
  40b5fe:	55                   	push   %rbp
  40b5ff:	48 89 e5             	mov    %rsp,%rbp
  40b602:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40b606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b60a:	5d                   	pop    %rbp
  40b60b:	c3                   	ret

000000000040b60c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
  40b60c:	55                   	push   %rbp
  40b60d:	48 89 e5             	mov    %rsp,%rbp
  40b610:	53                   	push   %rbx
  40b611:	48 83 ec 28          	sub    $0x28,%rsp
  40b615:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b619:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b61d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b621:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (this->max_size() - (this->size() - __n1) < __n2)
  40b625:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b629:	48 89 c7             	mov    %rax,%rdi
  40b62c:	e8 93 f5 ff ff       	call   40abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40b631:	48 89 c3             	mov    %rax,%rbx
  40b634:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b638:	48 89 c7             	mov    %rax,%rdi
  40b63b:	e8 e0 95 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40b640:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b644:	48 29 c2             	sub    %rax,%rdx
  40b647:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
  40b64b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40b64f:	0f 92 c0             	setb   %al
  40b652:	84 c0                	test   %al,%al
  40b654:	74 0c                	je     40b662 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc+0x56>
	  __throw_length_error(__N(__s));
  40b656:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b65a:	48 89 c7             	mov    %rax,%rdi
  40b65d:	e8 8e 8a ff ff       	call   4040f0 <_ZSt20__throw_length_errorPKc@plt>
      }
  40b662:	90                   	nop
  40b663:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b667:	c9                   	leave
  40b668:	c3                   	ret
  40b669:	90                   	nop

000000000040b66a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40b66a:	55                   	push   %rbp
  40b66b:	48 89 e5             	mov    %rsp,%rbp
  40b66e:	53                   	push   %rbx
  40b66f:	48 83 ec 38          	sub    $0x38,%rsp
  40b673:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b677:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40b67b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const size_type __len = __n + this->size();
  40b67f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b683:	48 89 c7             	mov    %rax,%rdi
  40b686:	e8 95 95 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40b68b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40b68f:	48 01 d0             	add    %rdx,%rax
  40b692:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__len <= this->capacity())
  40b696:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b69a:	48 89 c7             	mov    %rax,%rdi
  40b69d:	e8 00 ed ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40b6a2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40b6a6:	0f 93 c0             	setae  %al
  40b6a9:	84 c0                	test   %al,%al
  40b6ab:	74 3b                	je     40b6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0x7e>
	  if (__n)
  40b6ad:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40b6b2:	74 62                	je     40b716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
  40b6b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b6b8:	48 89 c7             	mov    %rax,%rdi
  40b6bb:	e8 64 b2 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b6c0:	48 89 c3             	mov    %rax,%rbx
  40b6c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b6c7:	48 89 c7             	mov    %rax,%rdi
  40b6ca:	e8 51 95 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40b6cf:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40b6d3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40b6d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b6db:	48 89 c6             	mov    %rax,%rsi
  40b6de:	48 89 cf             	mov    %rcx,%rdi
  40b6e1:	e8 8e f5 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40b6e6:	eb 2e                	jmp    40b716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
  40b6e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b6ec:	48 89 c7             	mov    %rax,%rdi
  40b6ef:	e8 2c 95 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40b6f4:	48 89 c6             	mov    %rax,%rsi
  40b6f7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40b6fb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40b6ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b703:	49 89 c8             	mov    %rcx,%r8
  40b706:	48 89 d1             	mov    %rdx,%rcx
  40b709:	ba 00 00 00 00       	mov    $0x0,%edx
  40b70e:	48 89 c7             	mov    %rax,%rdi
  40b711:	e8 04 09 00 00       	call   40c01a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
      this->_M_set_length(__len);
  40b716:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b71a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b71e:	48 89 d6             	mov    %rdx,%rsi
  40b721:	48 89 c7             	mov    %rax,%rdi
  40b724:	e8 0d b2 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  40b729:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
  40b72d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b731:	c9                   	leave
  40b732:	c3                   	ret
  40b733:	90                   	nop

000000000040b734 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEEdeEv>:
      operator*() const
  40b734:	55                   	push   %rbp
  40b735:	48 89 e5             	mov    %rsp,%rbp
  40b738:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	_Iterator __tmp = current;
  40b73c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b740:	48 8b 00             	mov    (%rax),%rax
  40b743:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return *--__tmp;
  40b747:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
  40b74c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40b750:	5d                   	pop    %rbp
  40b751:	c3                   	ret

000000000040b752 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4rendEv>:
      rend() const noexcept
  40b752:	55                   	push   %rbp
  40b753:	48 89 e5             	mov    %rsp,%rbp
  40b756:	48 83 ec 10          	sub    $0x10,%rsp
  40b75a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b75e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return const_reverse_iterator(begin()); }
  40b762:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b766:	48 89 c7             	mov    %rax,%rdi
  40b769:	e8 18 00 00 00       	call   40b786 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE5beginEv>
  40b76e:	48 89 c2             	mov    %rax,%rdx
  40b771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b775:	48 89 d6             	mov    %rdx,%rsi
  40b778:	48 89 c7             	mov    %rax,%rdi
  40b77b:	e8 2e 00 00 00       	call   40b7ae <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>
  40b780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b784:	c9                   	leave
  40b785:	c3                   	ret

000000000040b786 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE5beginEv>:
      begin() const noexcept
  40b786:	55                   	push   %rbp
  40b787:	48 89 e5             	mov    %rsp,%rbp
  40b78a:	48 83 ec 10          	sub    $0x10,%rsp
  40b78e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_iterator(data()); }
  40b792:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b796:	48 89 c7             	mov    %rax,%rdi
  40b799:	e8 02 00 00 00       	call   40b7a0 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>
  40b79e:	c9                   	leave
  40b79f:	c3                   	ret

000000000040b7a0 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>:
      data() noexcept
      { return static_cast<pointer>(_M_elems); }

      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
  40b7a0:	55                   	push   %rbp
  40b7a1:	48 89 e5             	mov    %rsp,%rbp
  40b7a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const_pointer>(_M_elems); }
  40b7a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b7ac:	5d                   	pop    %rbp
  40b7ad:	c3                   	ret

000000000040b7ae <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>:
      reverse_iterator(iterator_type __x)
  40b7ae:	55                   	push   %rbp
  40b7af:	48 89 e5             	mov    %rsp,%rbp
  40b7b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b7b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : current(__x)
  40b7ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b7be:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b7c2:	48 89 10             	mov    %rdx,(%rax)
      { }
  40b7c5:	90                   	nop
  40b7c6:	5d                   	pop    %rbp
  40b7c7:	c3                   	ret

000000000040b7c8 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>:
      base() const
  40b7c8:	55                   	push   %rbp
  40b7c9:	48 89 e5             	mov    %rsp,%rbp
  40b7cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return current; }
  40b7d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b7d4:	48 8b 00             	mov    (%rax),%rax
  40b7d7:	5d                   	pop    %rbp
  40b7d8:	c3                   	ret

000000000040b7d9 <_ZSteqIPKNSt8__format6_Arg_tEEbRKSt16reverse_iteratorIT_ES8_>:
    operator==(const reverse_iterator<_Iterator>& __x,
  40b7d9:	55                   	push   %rbp
  40b7da:	48 89 e5             	mov    %rsp,%rbp
  40b7dd:	53                   	push   %rbx
  40b7de:	48 83 ec 18          	sub    $0x18,%rsp
  40b7e2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b7e6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __x.base() == __y.base(); }
  40b7ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b7ee:	48 89 c7             	mov    %rax,%rdi
  40b7f1:	e8 d2 ff ff ff       	call   40b7c8 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>
  40b7f6:	48 89 c3             	mov    %rax,%rbx
  40b7f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b7fd:	48 89 c7             	mov    %rax,%rdi
  40b800:	e8 c3 ff ff ff       	call   40b7c8 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>
  40b805:	48 39 c3             	cmp    %rax,%rbx
  40b808:	0f 94 c0             	sete   %al
  40b80b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b80f:	c9                   	leave
  40b810:	c3                   	ret

000000000040b811 <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>:
    __pack_arg_types(const array<_Arg_t, _Nm>& __types)
  40b811:	55                   	push   %rbp
  40b812:	48 89 e5             	mov    %rsp,%rbp
  40b815:	53                   	push   %rbx
  40b816:	48 83 ec 38          	sub    $0x38,%rsp
  40b81a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      __UINT64_TYPE__ __packed_types = 0;
  40b81e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40b825:	00
      for (auto __i = __types.rbegin(); __i != __types.rend(); ++__i)
  40b826:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b82a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40b82e:	48 89 d6             	mov    %rdx,%rsi
  40b831:	48 89 c7             	mov    %rax,%rdi
  40b834:	e8 69 00 00 00       	call   40b8a2 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE6rbeginEv>
  40b839:	eb 30                	jmp    40b86b <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE+0x5a>
	__packed_types = (__packed_types << _Bits) | *__i;
  40b83b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b83f:	48 c1 e0 05          	shl    $0x5,%rax
  40b843:	48 89 c3             	mov    %rax,%rbx
  40b846:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b84a:	48 89 c7             	mov    %rax,%rdi
  40b84d:	e8 e2 fe ff ff       	call   40b734 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEEdeEv>
  40b852:	0f b6 00             	movzbl (%rax),%eax
  40b855:	0f b6 c0             	movzbl %al,%eax
  40b858:	48 09 d8             	or     %rbx,%rax
  40b85b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      for (auto __i = __types.rbegin(); __i != __types.rend(); ++__i)
  40b85f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b863:	48 89 c7             	mov    %rax,%rdi
  40b866:	e8 89 00 00 00       	call   40b8f4 <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEppEv>
  40b86b:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40b86f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40b873:	48 89 d6             	mov    %rdx,%rsi
  40b876:	48 89 c7             	mov    %rax,%rdi
  40b879:	e8 d4 fe ff ff       	call   40b752 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4rendEv>
  40b87e:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  40b882:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b886:	48 89 d6             	mov    %rdx,%rsi
  40b889:	48 89 c7             	mov    %rax,%rdi
  40b88c:	e8 48 ff ff ff       	call   40b7d9 <_ZSteqIPKNSt8__format6_Arg_tEEbRKSt16reverse_iteratorIT_ES8_>
  40b891:	83 f0 01             	xor    $0x1,%eax
  40b894:	84 c0                	test   %al,%al
  40b896:	75 a3                	jne    40b83b <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE+0x2a>
      return __packed_types;
  40b898:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  40b89c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b8a0:	c9                   	leave
  40b8a1:	c3                   	ret

000000000040b8a2 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE6rbeginEv>:
      rbegin() const noexcept
  40b8a2:	55                   	push   %rbp
  40b8a3:	48 89 e5             	mov    %rsp,%rbp
  40b8a6:	48 83 ec 10          	sub    $0x10,%rsp
  40b8aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b8ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return const_reverse_iterator(end()); }
  40b8b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b8b6:	48 89 c7             	mov    %rax,%rdi
  40b8b9:	e8 18 00 00 00       	call   40b8d6 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE3endEv>
  40b8be:	48 89 c2             	mov    %rax,%rdx
  40b8c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8c5:	48 89 d6             	mov    %rdx,%rsi
  40b8c8:	48 89 c7             	mov    %rax,%rdi
  40b8cb:	e8 de fe ff ff       	call   40b7ae <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>
  40b8d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8d4:	c9                   	leave
  40b8d5:	c3                   	ret

000000000040b8d6 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE3endEv>:
      end() const noexcept
  40b8d6:	55                   	push   %rbp
  40b8d7:	48 89 e5             	mov    %rsp,%rbp
  40b8da:	48 83 ec 10          	sub    $0x10,%rsp
  40b8de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_iterator(data() + _Nm); }
  40b8e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8e6:	48 89 c7             	mov    %rax,%rdi
  40b8e9:	e8 b2 fe ff ff       	call   40b7a0 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>
  40b8ee:	48 83 c0 01          	add    $0x1,%rax
  40b8f2:	c9                   	leave
  40b8f3:	c3                   	ret

000000000040b8f4 <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEppEv>:
      operator++()
  40b8f4:	55                   	push   %rbp
  40b8f5:	48 89 e5             	mov    %rsp,%rbp
  40b8f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	--current;
  40b8fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b900:	48 8b 00             	mov    (%rax),%rax
  40b903:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40b907:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b90b:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  40b90e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40b912:	5d                   	pop    %rbp
  40b913:	c3                   	ret

000000000040b914 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>:
      basic_format_args<_Context>::
  40b914:	55                   	push   %rbp
  40b915:	48 89 e5             	mov    %rsp,%rbp
  40b918:	48 83 ec 20          	sub    $0x20,%rsp
  40b91c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b920:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	    _M_packed_size = sizeof...(_Args);
  40b924:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b928:	0f b6 10             	movzbl (%rax),%edx
  40b92b:	83 e2 f0             	and    $0xfffffff0,%edx
  40b92e:	83 ca 01             	or     $0x1,%edx
  40b931:	88 10                	mov    %dl,(%rax)
	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
  40b933:	c6 45 ff 0b          	movb   $0xb,-0x1(%rbp)
  40b937:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40b93b:	48 89 c7             	mov    %rax,%rdi
  40b93e:	e8 ce fe ff ff       	call   40b811 <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>
  40b943:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  40b94a:	ff ff 0f
  40b94d:	48 21 c2             	and    %rax,%rdx
  40b950:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b954:	48 89 d1             	mov    %rdx,%rcx
  40b957:	48 c1 e1 04          	shl    $0x4,%rcx
  40b95b:	48 8b 10             	mov    (%rax),%rdx
  40b95e:	83 e2 0f             	and    $0xf,%edx
  40b961:	48 09 ca             	or     %rcx,%rdx
  40b964:	48 89 10             	mov    %rdx,(%rax)
	    _M_values = __store._M_args;
  40b967:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b96b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b96f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  40b973:	90                   	nop
  40b974:	c9                   	leave
  40b975:	c3                   	ret

000000000040b976 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>:
    __from_chars_alnum_to_val(unsigned char __c)
  40b976:	55                   	push   %rbp
  40b977:	48 89 e5             	mov    %rsp,%rbp
  40b97a:	89 f8                	mov    %edi,%eax
  40b97c:	88 45 fc             	mov    %al,-0x4(%rbp)
	return static_cast<unsigned char>(__c - '0');
  40b97f:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  40b983:	83 e8 30             	sub    $0x30,%eax
    }
  40b986:	5d                   	pop    %rbp
  40b987:	c3                   	ret

000000000040b988 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i>:

  /// std::from_chars implementation for integers in any base.
  /// If _DecOnly is true, then we may assume __base is at most 10.
  template<bool _DecOnly, typename _Tp>
    constexpr bool
    __from_chars_alnum(const char*& __first, const char* __last, _Tp& __val,
  40b988:	55                   	push   %rbp
  40b989:	48 89 e5             	mov    %rsp,%rbp
  40b98c:	48 83 ec 30          	sub    $0x30,%rsp
  40b990:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b994:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b998:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b99c:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
		       int __base)
    {
      // __glibcxx_assert(_DecOnly ? __base <= 10 : __base <= 36);

      const int __bits_per_digit = __bit_width(unsigned(__base & 0x3f));
  40b99f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40b9a2:	83 e0 3f             	and    $0x3f,%eax
  40b9a5:	89 c7                	mov    %eax,%edi
  40b9a7:	e8 0e 8c ff ff       	call   4045ba <_ZSt11__bit_widthIjEiT_>
  40b9ac:	89 45 f8             	mov    %eax,-0x8(%rbp)
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
  40b9af:	c7 45 fc 10 00 00 00 	movl   $0x10,-0x4(%rbp)
      for (; __first != __last; ++__first)
  40b9b6:	e9 d3 00 00 00       	jmp    40ba8e <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x106>
	{
	  const unsigned char __c = __from_chars_alnum_to_val<_DecOnly>(*__first);
  40b9bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b9bf:	48 8b 00             	mov    (%rax),%rax
  40b9c2:	0f b6 00             	movzbl (%rax),%eax
  40b9c5:	0f b6 c0             	movzbl %al,%eax
  40b9c8:	89 c7                	mov    %eax,%edi
  40b9ca:	e8 a7 ff ff ff       	call   40b976 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>
  40b9cf:	88 45 f7             	mov    %al,-0x9(%rbp)
	  if (__c >= __base)
  40b9d2:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  40b9d6:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  40b9d9:	7f 0a                	jg     40b9e5 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x5d>
	    return true;
  40b9db:	b8 01 00 00 00       	mov    $0x1,%eax
  40b9e0:	e9 bf 00 00 00       	jmp    40baa4 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x11c>

	  __unused_bits_lower_bound -= __bits_per_digit;
  40b9e5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40b9e8:	29 45 fc             	sub    %eax,-0x4(%rbp)
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
  40b9eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40b9ef:	78 1c                	js     40ba0d <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x85>
	    // We're definitely not going to overflow.
	    __val = __val * __base + __c;
  40b9f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b9f5:	0f b7 00             	movzwl (%rax),%eax
  40b9f8:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  40b9fb:	0f af d0             	imul   %eax,%edx
  40b9fe:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  40ba02:	01 c2                	add    %eax,%edx
  40ba04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ba08:	66 89 10             	mov    %dx,(%rax)
  40ba0b:	eb 6f                	jmp    40ba7c <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xf4>
	  else if (!__raise_and_add(__val, __base, __c)) [[__unlikely__]]
  40ba0d:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  40ba11:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  40ba14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ba18:	89 ce                	mov    %ecx,%esi
  40ba1a:	48 89 c7             	mov    %rax,%rdi
  40ba1d:	e8 84 08 00 00       	call   40c2a6 <_ZNSt8__detail15__raise_and_addItEEbRT_ih>
  40ba22:	83 f0 01             	xor    $0x1,%eax
  40ba25:	84 c0                	test   %al,%al
  40ba27:	74 53                	je     40ba7c <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xf4>
	    {
	      while (++__first != __last
  40ba29:	90                   	nop
  40ba2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba2e:	48 8b 00             	mov    (%rax),%rax
  40ba31:	48 8d 50 01          	lea    0x1(%rax),%rdx
		     && __from_chars_alnum_to_val<_DecOnly>(*__first) < __base)
  40ba35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba39:	48 89 10             	mov    %rdx,(%rax)
	      while (++__first != __last
  40ba3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba40:	48 8b 00             	mov    (%rax),%rax
		     && __from_chars_alnum_to_val<_DecOnly>(*__first) < __base)
  40ba43:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40ba47:	74 23                	je     40ba6c <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe4>
  40ba49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba4d:	48 8b 00             	mov    (%rax),%rax
  40ba50:	0f b6 00             	movzbl (%rax),%eax
  40ba53:	0f b6 c0             	movzbl %al,%eax
  40ba56:	89 c7                	mov    %eax,%edi
  40ba58:	e8 19 ff ff ff       	call   40b976 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>
  40ba5d:	0f b6 c0             	movzbl %al,%eax
  40ba60:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  40ba63:	7e 07                	jle    40ba6c <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe4>
  40ba65:	b8 01 00 00 00       	mov    $0x1,%eax
  40ba6a:	eb 05                	jmp    40ba71 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe9>
  40ba6c:	b8 00 00 00 00       	mov    $0x0,%eax
  40ba71:	84 c0                	test   %al,%al
  40ba73:	75 b5                	jne    40ba2a <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xa2>
		;
	      return false;
  40ba75:	b8 00 00 00 00       	mov    $0x0,%eax
  40ba7a:	eb 28                	jmp    40baa4 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x11c>
      for (; __first != __last; ++__first)
  40ba7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba80:	48 8b 00             	mov    (%rax),%rax
  40ba83:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40ba87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba8b:	48 89 10             	mov    %rdx,(%rax)
  40ba8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba92:	48 8b 00             	mov    (%rax),%rax
  40ba95:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40ba99:	0f 85 1c ff ff ff    	jne    40b9bb <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x33>
	    }
	}
      return true;
  40ba9f:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40baa4:	c9                   	leave
  40baa5:	c3                   	ret

000000000040baa6 <_ZNSt4pairItPKcEC1IRtRS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40baa6:	55                   	push   %rbp
  40baa7:	48 89 e5             	mov    %rsp,%rbp
  40baaa:	48 83 ec 20          	sub    $0x20,%rsp
  40baae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40bab2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40bab6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40baba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40babe:	48 89 c7             	mov    %rax,%rdi
  40bac1:	e8 72 08 00 00       	call   40c338 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
  40bac6:	0f b7 10             	movzwl (%rax),%edx
  40bac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bacd:	66 89 10             	mov    %dx,(%rax)
  40bad0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bad4:	48 89 c7             	mov    %rax,%rdi
  40bad7:	e8 6a 08 00 00       	call   40c346 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
  40badc:	48 8b 10             	mov    (%rax),%rdx
  40badf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bae3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
  40bae7:	90                   	nop
  40bae8:	c9                   	leave
  40bae9:	c3                   	ret

000000000040baea <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>:
	auto __incr = [&, this] {
  40baea:	55                   	push   %rbp
  40baeb:	48 89 e5             	mov    %rsp,%rbp
  40baee:	48 83 ec 10          	sub    $0x10,%rsp
  40baf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  ++__to_incr;
  40baf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bafa:	48 8b 40 08          	mov    0x8(%rax),%rax
  40bafe:	0f b6 10             	movzbl (%rax),%edx
  40bb01:	83 c2 01             	add    $0x1,%edx
  40bb04:	88 10                	mov    %dl,(%rax)
	  return ++_M_curr();
  40bb06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bb0a:	48 8b 00             	mov    (%rax),%rax
  40bb0d:	48 89 c7             	mov    %rax,%rdi
  40bb10:	e8 a3 e4 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bb15:	48 8b 10             	mov    (%rax),%rdx
  40bb18:	48 83 c2 01          	add    $0x1,%rdx
  40bb1c:	48 89 10             	mov    %rdx,(%rax)
  40bb1f:	48 8b 00             	mov    (%rax),%rax
	auto __incr = [&, this] {
  40bb22:	c9                   	leave
  40bb23:	c3                   	ret

000000000040bb24 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev>:
      _M_read_utf8()
  40bb24:	55                   	push   %rbp
  40bb25:	48 89 e5             	mov    %rsp,%rbp
  40bb28:	48 83 ec 50          	sub    $0x50,%rsp
  40bb2c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	_Guard<_Iter> __g{this, _M_curr()};
  40bb30:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bb34:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40bb38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bb3c:	48 89 c7             	mov    %rax,%rdi
  40bb3f:	e8 74 e4 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bb44:	48 8b 00             	mov    (%rax),%rax
  40bb47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	char32_t __c{};
  40bb4b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	const uint8_t __lo_bound = 0x80, __hi_bound = 0xBF;
  40bb52:	c6 45 fb 80          	movb   $0x80,-0x5(%rbp)
  40bb56:	c6 45 fa bf          	movb   $0xbf,-0x6(%rbp)
	uint8_t __u = *_M_curr()++;
  40bb5a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bb5e:	48 89 c7             	mov    %rax,%rdi
  40bb61:	e8 52 e4 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bb66:	48 8b 10             	mov    (%rax),%rdx
  40bb69:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  40bb6d:	48 89 08             	mov    %rcx,(%rax)
  40bb70:	0f b6 02             	movzbl (%rdx),%eax
  40bb73:	88 45 f9             	mov    %al,-0x7(%rbp)
	uint8_t __to_incr = 1;
  40bb76:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	auto __incr = [&, this] {
  40bb7a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bb7e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bb82:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40bb86:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	if (__u <= 0x7F) [[likely]]      // 0x00 to 0x7F
  40bb8a:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bb8e:	84 c0                	test   %al,%al
  40bb90:	78 0c                	js     40bb9e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x7a>
	  __c = __u;
  40bb92:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bb96:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bb99:	e9 7d 03 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u < 0xC2) [[unlikely]]
  40bb9e:	80 7d f9 c1          	cmpb   $0xc1,-0x7(%rbp)
  40bba2:	77 14                	ja     40bbb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x94>
	  __c = _S_error();
  40bba4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bba8:	48 89 c7             	mov    %rax,%rdi
  40bbab:	e8 de 07 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bbb0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bbb3:	e9 63 03 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (_M_curr() == _M_last) [[unlikely]]
  40bbb8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bbbc:	48 89 c7             	mov    %rax,%rdi
  40bbbf:	e8 f4 e3 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bbc4:	48 8b 10             	mov    (%rax),%rdx
  40bbc7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bbcb:	48 8b 40 20          	mov    0x20(%rax),%rax
  40bbcf:	48 39 c2             	cmp    %rax,%rdx
  40bbd2:	0f 94 c0             	sete   %al
  40bbd5:	84 c0                	test   %al,%al
  40bbd7:	74 14                	je     40bbed <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0xc9>
	  __c = _S_error();
  40bbd9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bbdd:	48 89 c7             	mov    %rax,%rdi
  40bbe0:	e8 a9 07 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bbe5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bbe8:	e9 2e 03 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xDF) // 0xC2 to 0xDF
  40bbed:	80 7d f9 df          	cmpb   $0xdf,-0x7(%rbp)
  40bbf1:	77 66                	ja     40bc59 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x135>
	    __c = __u & 0x1F;
  40bbf3:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bbf7:	83 e0 1f             	and    $0x1f,%eax
  40bbfa:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40bbfd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bc01:	48 89 c7             	mov    %rax,%rdi
  40bc04:	e8 af e3 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bc09:	48 8b 00             	mov    (%rax),%rax
  40bc0c:	0f b6 00             	movzbl (%rax),%eax
  40bc0f:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40bc12:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bc16:	84 c0                	test   %al,%al
  40bc18:	79 06                	jns    40bc20 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0xfc>
  40bc1a:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40bc1e:	76 14                	jbe    40bc34 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x110>
	      __c = _S_error();
  40bc20:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bc24:	48 89 c7             	mov    %rax,%rdi
  40bc27:	e8 62 07 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bc2c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bc2f:	e9 e7 02 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40bc34:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40bc37:	c1 e0 06             	shl    $0x6,%eax
  40bc3a:	89 c2                	mov    %eax,%edx
  40bc3c:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bc40:	83 e0 3f             	and    $0x3f,%eax
  40bc43:	09 d0                	or     %edx,%eax
  40bc45:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__incr();
  40bc48:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40bc4c:	48 89 c7             	mov    %rax,%rdi
  40bc4f:	e8 96 fe ff ff       	call   40baea <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40bc54:	e9 c2 02 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xEF) // 0xE0 to 0xEF
  40bc59:	80 7d f9 ef          	cmpb   $0xef,-0x7(%rbp)
  40bc5d:	0f 87 14 01 00 00    	ja     40bd77 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x253>
	    const uint8_t __lo_bound_2 = __u == 0xE0 ? 0xA0 : __lo_bound;
  40bc63:	80 7d f9 e0          	cmpb   $0xe0,-0x7(%rbp)
  40bc67:	75 07                	jne    40bc70 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x14c>
  40bc69:	b8 a0 ff ff ff       	mov    $0xffffffa0,%eax
  40bc6e:	eb 05                	jmp    40bc75 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x151>
  40bc70:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
  40bc75:	88 45 f6             	mov    %al,-0xa(%rbp)
	    const uint8_t __hi_bound_2 = __u == 0xED ? 0x9F : __hi_bound;
  40bc78:	80 7d f9 ed          	cmpb   $0xed,-0x7(%rbp)
  40bc7c:	75 07                	jne    40bc85 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x161>
  40bc7e:	b8 9f ff ff ff       	mov    $0xffffff9f,%eax
  40bc83:	eb 05                	jmp    40bc8a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x166>
  40bc85:	b8 bf ff ff ff       	mov    $0xffffffbf,%eax
  40bc8a:	88 45 f5             	mov    %al,-0xb(%rbp)
	    __c = __u & 0x0F;
  40bc8d:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bc91:	83 e0 0f             	and    $0xf,%eax
  40bc94:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40bc97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bc9b:	48 89 c7             	mov    %rax,%rdi
  40bc9e:	e8 15 e3 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bca3:	48 8b 00             	mov    (%rax),%rax
  40bca6:	0f b6 00             	movzbl (%rax),%eax
  40bca9:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
  40bcac:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bcb0:	3a 45 f6             	cmp    -0xa(%rbp),%al
  40bcb3:	72 09                	jb     40bcbe <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x19a>
  40bcb5:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bcb9:	38 45 f5             	cmp    %al,-0xb(%rbp)
  40bcbc:	73 14                	jae    40bcd2 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x1ae>
	      __c = _S_error();
  40bcbe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bcc2:	48 89 c7             	mov    %rax,%rdi
  40bcc5:	e8 c4 06 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bcca:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bccd:	e9 49 02 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	    else if (__incr() == _M_last) [[unlikely]]
  40bcd2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40bcd6:	48 89 c7             	mov    %rax,%rdi
  40bcd9:	e8 0c fe ff ff       	call   40baea <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40bcde:	48 89 c2             	mov    %rax,%rdx
  40bce1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bce5:	48 8b 40 20          	mov    0x20(%rax),%rax
  40bce9:	48 39 c2             	cmp    %rax,%rdx
  40bcec:	0f 94 c0             	sete   %al
  40bcef:	84 c0                	test   %al,%al
  40bcf1:	74 14                	je     40bd07 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x1e3>
	      __c = _S_error();
  40bcf3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bcf7:	48 89 c7             	mov    %rax,%rdi
  40bcfa:	e8 8f 06 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bcff:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bd02:	e9 14 02 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40bd07:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40bd0a:	c1 e0 06             	shl    $0x6,%eax
  40bd0d:	89 c2                	mov    %eax,%edx
  40bd0f:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bd13:	83 e0 3f             	and    $0x3f,%eax
  40bd16:	09 d0                	or     %edx,%eax
  40bd18:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__u = *_M_curr();
  40bd1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bd1f:	48 89 c7             	mov    %rax,%rdi
  40bd22:	e8 91 e2 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bd27:	48 8b 00             	mov    (%rax),%rax
  40bd2a:	0f b6 00             	movzbl (%rax),%eax
  40bd2d:	88 45 f9             	mov    %al,-0x7(%rbp)
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40bd30:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bd34:	84 c0                	test   %al,%al
  40bd36:	79 06                	jns    40bd3e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x21a>
  40bd38:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40bd3c:	76 14                	jbe    40bd52 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x22e>
		  __c = _S_error();
  40bd3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bd42:	48 89 c7             	mov    %rax,%rdi
  40bd45:	e8 44 06 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bd4a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bd4d:	e9 c9 01 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		    __c = (__c << 6) | (__u & 0x3F);
  40bd52:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40bd55:	c1 e0 06             	shl    $0x6,%eax
  40bd58:	89 c2                	mov    %eax,%edx
  40bd5a:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bd5e:	83 e0 3f             	and    $0x3f,%eax
  40bd61:	09 d0                	or     %edx,%eax
  40bd63:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    __incr();
  40bd66:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40bd6a:	48 89 c7             	mov    %rax,%rdi
  40bd6d:	e8 78 fd ff ff       	call   40baea <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40bd72:	e9 a4 01 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xF4) // 0xF0 to 0xF4
  40bd77:	80 7d f9 f4          	cmpb   $0xf4,-0x7(%rbp)
  40bd7b:	0f 87 8b 01 00 00    	ja     40bf0c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3e8>
	    const uint8_t __lo_bound_2 = __u == 0xF0 ? 0x90 : __lo_bound;
  40bd81:	80 7d f9 f0          	cmpb   $0xf0,-0x7(%rbp)
  40bd85:	75 07                	jne    40bd8e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x26a>
  40bd87:	b8 90 ff ff ff       	mov    $0xffffff90,%eax
  40bd8c:	eb 05                	jmp    40bd93 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x26f>
  40bd8e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
  40bd93:	88 45 f8             	mov    %al,-0x8(%rbp)
	    const uint8_t __hi_bound_2 = __u == 0xF4 ? 0x8F : __hi_bound;
  40bd96:	80 7d f9 f4          	cmpb   $0xf4,-0x7(%rbp)
  40bd9a:	75 07                	jne    40bda3 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x27f>
  40bd9c:	b8 8f ff ff ff       	mov    $0xffffff8f,%eax
  40bda1:	eb 05                	jmp    40bda8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x284>
  40bda3:	b8 bf ff ff ff       	mov    $0xffffffbf,%eax
  40bda8:	88 45 f7             	mov    %al,-0x9(%rbp)
	    __c = __u & 0x07;
  40bdab:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bdaf:	83 e0 07             	and    $0x7,%eax
  40bdb2:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40bdb5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bdb9:	48 89 c7             	mov    %rax,%rdi
  40bdbc:	e8 f7 e1 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bdc1:	48 8b 00             	mov    (%rax),%rax
  40bdc4:	0f b6 00             	movzbl (%rax),%eax
  40bdc7:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
  40bdca:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bdce:	3a 45 f8             	cmp    -0x8(%rbp),%al
  40bdd1:	72 09                	jb     40bddc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x2b8>
  40bdd3:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bdd7:	38 45 f7             	cmp    %al,-0x9(%rbp)
  40bdda:	73 14                	jae    40bdf0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x2cc>
	      __c = _S_error();
  40bddc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bde0:	48 89 c7             	mov    %rax,%rdi
  40bde3:	e8 a6 05 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bde8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bdeb:	e9 2b 01 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	    else if (__incr() == _M_last) [[unlikely]]
  40bdf0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40bdf4:	48 89 c7             	mov    %rax,%rdi
  40bdf7:	e8 ee fc ff ff       	call   40baea <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40bdfc:	48 89 c2             	mov    %rax,%rdx
  40bdff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40be03:	48 8b 40 20          	mov    0x20(%rax),%rax
  40be07:	48 39 c2             	cmp    %rax,%rdx
  40be0a:	0f 94 c0             	sete   %al
  40be0d:	84 c0                	test   %al,%al
  40be0f:	74 14                	je     40be25 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x301>
	      __c = _S_error();
  40be11:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40be15:	48 89 c7             	mov    %rax,%rdi
  40be18:	e8 71 05 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40be1d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40be20:	e9 f6 00 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40be25:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40be28:	c1 e0 06             	shl    $0x6,%eax
  40be2b:	89 c2                	mov    %eax,%edx
  40be2d:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40be31:	83 e0 3f             	and    $0x3f,%eax
  40be34:	09 d0                	or     %edx,%eax
  40be36:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__u = *_M_curr();
  40be39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40be3d:	48 89 c7             	mov    %rax,%rdi
  40be40:	e8 73 e1 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40be45:	48 8b 00             	mov    (%rax),%rax
  40be48:	0f b6 00             	movzbl (%rax),%eax
  40be4b:	88 45 f9             	mov    %al,-0x7(%rbp)
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40be4e:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40be52:	84 c0                	test   %al,%al
  40be54:	79 06                	jns    40be5c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x338>
  40be56:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40be5a:	76 14                	jbe    40be70 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x34c>
		  __c = _S_error();
  40be5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40be60:	48 89 c7             	mov    %rax,%rdi
  40be63:	e8 26 05 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40be68:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40be6b:	e9 ab 00 00 00       	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		else if (__incr() == _M_last) [[unlikely]]
  40be70:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40be74:	48 89 c7             	mov    %rax,%rdi
  40be77:	e8 6e fc ff ff       	call   40baea <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40be7c:	48 89 c2             	mov    %rax,%rdx
  40be7f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40be83:	48 8b 40 20          	mov    0x20(%rax),%rax
  40be87:	48 39 c2             	cmp    %rax,%rdx
  40be8a:	0f 94 c0             	sete   %al
  40be8d:	84 c0                	test   %al,%al
  40be8f:	74 11                	je     40bea2 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x37e>
		  __c = _S_error();
  40be91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40be95:	48 89 c7             	mov    %rax,%rdi
  40be98:	e8 f1 04 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40be9d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bea0:	eb 79                	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		    __c = (__c << 6) | (__u & 0x3F);
  40bea2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40bea5:	c1 e0 06             	shl    $0x6,%eax
  40bea8:	89 c2                	mov    %eax,%edx
  40beaa:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40beae:	83 e0 3f             	and    $0x3f,%eax
  40beb1:	09 d0                	or     %edx,%eax
  40beb3:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    __u = *_M_curr();
  40beb6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40beba:	48 89 c7             	mov    %rax,%rdi
  40bebd:	e8 f6 e0 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bec2:	48 8b 00             	mov    (%rax),%rax
  40bec5:	0f b6 00             	movzbl (%rax),%eax
  40bec8:	88 45 f9             	mov    %al,-0x7(%rbp)
		    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40becb:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40becf:	84 c0                	test   %al,%al
  40bed1:	79 06                	jns    40bed9 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3b5>
  40bed3:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40bed7:	76 11                	jbe    40beea <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3c6>
		      __c = _S_error();
  40bed9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bedd:	48 89 c7             	mov    %rax,%rdi
  40bee0:	e8 a9 04 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bee5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40bee8:	eb 31                	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
			__c = (__c << 6) | (__u & 0x3F);
  40beea:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40beed:	c1 e0 06             	shl    $0x6,%eax
  40bef0:	89 c2                	mov    %eax,%edx
  40bef2:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40bef6:	83 e0 3f             	and    $0x3f,%eax
  40bef9:	09 d0                	or     %edx,%eax
  40befb:	89 45 fc             	mov    %eax,-0x4(%rbp)
			__incr();
  40befe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40bf02:	48 89 c7             	mov    %rax,%rdi
  40bf05:	e8 e0 fb ff ff       	call   40baea <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40bf0a:	eb 0f                	jmp    40bf1b <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	  __c = _S_error();
  40bf0c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bf10:	48 89 c7             	mov    %rax,%rdi
  40bf13:	e8 76 04 00 00       	call   40c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40bf18:	89 45 fc             	mov    %eax,-0x4(%rbp)
	_M_update(__c, __to_incr);
  40bf1b:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  40bf1f:	0f b6 d0             	movzbl %al,%edx
  40bf22:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40bf25:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40bf29:	89 ce                	mov    %ecx,%esi
  40bf2b:	48 89 c7             	mov    %rax,%rdi
  40bf2e:	e8 9d 04 00 00       	call   40c3d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE9_M_updateEDih>
      }
  40bf33:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40bf37:	48 89 c7             	mov    %rax,%rdi
  40bf3a:	e8 15 04 00 00       	call   40c354 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE6_GuardIS2_ED1Ev>
  40bf3f:	c9                   	leave
  40bf40:	c3                   	ret

000000000040bf41 <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40bf41:	55                   	push   %rbp
  40bf42:	48 89 e5             	mov    %rsp,%rbp
  40bf45:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  40bf49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bf4d:	5d                   	pop    %rbp
  40bf4e:	c3                   	ret
  40bf4f:	90                   	nop

000000000040bf50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
  40bf50:	55                   	push   %rbp
  40bf51:	48 89 e5             	mov    %rsp,%rbp
  40bf54:	53                   	push   %rbx
  40bf55:	48 83 ec 28          	sub    $0x28,%rsp
  40bf59:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40bf5d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	return (less<const _CharT*>()(__s, _M_data())
  40bf61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bf65:	48 89 c7             	mov    %rax,%rdi
  40bf68:	e8 b7 a9 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40bf6d:	48 89 c2             	mov    %rax,%rdx
  40bf70:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40bf74:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
  40bf78:	48 89 ce             	mov    %rcx,%rsi
  40bf7b:	48 89 c7             	mov    %rax,%rdi
  40bf7e:	e8 e9 04 00 00       	call   40c46c <_ZNKSt4lessIPKcEclES1_S1_>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
  40bf83:	84 c0                	test   %al,%al
  40bf85:	75 36                	jne    40bfbd <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x6d>
  40bf87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bf8b:	48 89 c7             	mov    %rax,%rdi
  40bf8e:	e8 91 a9 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40bf93:	48 89 c3             	mov    %rax,%rbx
  40bf96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bf9a:	48 89 c7             	mov    %rax,%rdi
  40bf9d:	e8 7e 8c ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40bfa2:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40bfa6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40bfaa:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  40bfae:	48 89 ce             	mov    %rcx,%rsi
  40bfb1:	48 89 c7             	mov    %rax,%rdi
  40bfb4:	e8 b3 04 00 00       	call   40c46c <_ZNKSt4lessIPKcEclES1_S1_>
  40bfb9:	84 c0                	test   %al,%al
  40bfbb:	74 07                	je     40bfc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x74>
  40bfbd:	b8 01 00 00 00       	mov    $0x1,%eax
  40bfc2:	eb 05                	jmp    40bfc9 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x79>
  40bfc4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40bfc9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40bfcd:	c9                   	leave
  40bfce:	c3                   	ret

000000000040bfcf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
  40bfcf:	55                   	push   %rbp
  40bfd0:	48 89 e5             	mov    %rsp,%rbp
  40bfd3:	48 83 ec 20          	sub    $0x20,%rsp
  40bfd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40bfdb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40bfdf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
  40bfe3:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
  40bfe8:	75 15                	jne    40bfff <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
  40bfea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40bfee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bff2:	48 89 d6             	mov    %rdx,%rsi
  40bff5:	48 89 c7             	mov    %rax,%rdi
  40bff8:	e8 e4 85 ff ff       	call   4045e1 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40bffd:	eb 17                	jmp    40c016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x47>
	  traits_type::move(__d, __s, __n);
  40bfff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c003:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40c007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c00b:	48 89 ce             	mov    %rcx,%rsi
  40c00e:	48 89 c7             	mov    %rax,%rdi
  40c011:	e8 a2 87 ff ff       	call   4047b8 <_ZNSt11char_traitsIcE4moveEPcPKcm>
      }
  40c016:	90                   	nop
  40c017:	c9                   	leave
  40c018:	c3                   	ret
  40c019:	90                   	nop

000000000040c01a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40c01a:	55                   	push   %rbp
  40c01b:	48 89 e5             	mov    %rsp,%rbp
  40c01e:	48 83 ec 50          	sub    $0x50,%rsp
  40c022:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40c026:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40c02a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c02e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40c032:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
      const size_type __how_much = length() - __pos - __len1;
  40c036:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c03a:	48 89 c7             	mov    %rax,%rdi
  40c03d:	e8 6c ac ff ff       	call   406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40c042:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  40c046:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40c04a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      size_type __new_capacity = length() + __len2 - __len1;
  40c04e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c052:	48 89 c7             	mov    %rax,%rdi
  40c055:	e8 54 ac ff ff       	call   406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40c05a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40c05e:	48 01 d0             	add    %rdx,%rax
  40c061:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40c065:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __r = _M_create(__new_capacity, capacity());
  40c069:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c06d:	48 89 c7             	mov    %rax,%rdi
  40c070:	e8 2d e3 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40c075:	48 89 c2             	mov    %rax,%rdx
  40c078:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  40c07c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c080:	48 89 ce             	mov    %rcx,%rsi
  40c083:	48 89 c7             	mov    %rax,%rdi
  40c086:	e8 6f db ff ff       	call   409bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  40c08b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__pos)
  40c08f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40c094:	74 22                	je     40c0b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x9e>
	this->_S_copy(__r, _M_data(), __pos);
  40c096:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c09a:	48 89 c7             	mov    %rax,%rdi
  40c09d:	e8 82 a8 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c0a2:	48 89 c1             	mov    %rax,%rcx
  40c0a5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c0a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c0ad:	48 89 ce             	mov    %rcx,%rsi
  40c0b0:	48 89 c7             	mov    %rax,%rdi
  40c0b3:	e8 bc eb ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__s && __len2)
  40c0b8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40c0bd:	74 26                	je     40c0e5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
  40c0bf:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  40c0c4:	74 1f                	je     40c0e5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
	this->_S_copy(__r + __pos, __s, __len2);
  40c0c6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c0ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c0ce:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c0d2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40c0d6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c0da:	48 89 c6             	mov    %rax,%rsi
  40c0dd:	48 89 cf             	mov    %rcx,%rdi
  40c0e0:	e8 8f eb ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__how_much)
  40c0e5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40c0ea:	74 3d                	je     40c129 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x10f>
		      _M_data() + __pos + __len1, __how_much);
  40c0ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c0f0:	48 89 c7             	mov    %rax,%rdi
  40c0f3:	e8 2c a8 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c0f8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40c0fc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c100:	48 01 ca             	add    %rcx,%rdx
  40c103:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
	this->_S_copy(__r + __pos + __len2,
  40c107:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c10b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c10f:	48 01 c2             	add    %rax,%rdx
  40c112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c116:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c11a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c11e:	48 89 c2             	mov    %rax,%rdx
  40c121:	48 89 cf             	mov    %rcx,%rdi
  40c124:	e8 4b eb ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
  40c129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c12d:	48 89 c7             	mov    %rax,%rdi
  40c130:	e8 71 c9 ff ff       	call   408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
  40c135:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c139:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c13d:	48 89 d6             	mov    %rdx,%rsi
  40c140:	48 89 c7             	mov    %rax,%rdi
  40c143:	e8 b6 c9 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
  40c148:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c14c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c150:	48 89 d6             	mov    %rdx,%rsi
  40c153:	48 89 c7             	mov    %rax,%rdi
  40c156:	e8 bd c9 ff ff       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    }
  40c15b:	90                   	nop
  40c15c:	c9                   	leave
  40c15d:	c3                   	ret

000000000040c15e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>:
	    }
	}

      [[nodiscard]]
      constexpr span<element_type, dynamic_extent>
      subspan(size_type __offset, size_type __count = dynamic_extent) const
  40c15e:	55                   	push   %rbp
  40c15f:	48 89 e5             	mov    %rsp,%rbp
  40c162:	53                   	push   %rbx
  40c163:	48 83 ec 38          	sub    $0x38,%rsp
  40c167:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40c16b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40c16f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c173:	b8 00 00 00 00       	mov    $0x0,%eax
      noexcept
      {
	__glibcxx_assert(__offset <= size());
  40c178:	84 c0                	test   %al,%al
  40c17a:	74 1e                	je     40c19a <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x3c>
  40c17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c180:	48 89 c7             	mov    %rax,%rdi
  40c183:	e8 3c 92 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40c188:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40c18c:	0f 92 c0             	setb   %al
  40c18f:	0f b6 c0             	movzbl %al,%eax
  40c192:	48 85 c0             	test   %rax,%rax
  40c195:	0f 95 c0             	setne  %al
  40c198:	84 c0                	test   %al,%al
	if (__count == dynamic_extent)
  40c19a:	48 83 7d c8 ff       	cmpq   $0xffffffffffffffff,-0x38(%rbp)
  40c19f:	75 16                	jne    40c1b7 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x59>
	  __count = this->size() - __offset;
  40c1a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c1a5:	48 89 c7             	mov    %rax,%rdi
  40c1a8:	e8 17 92 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40c1ad:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  40c1b1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c1b5:	eb 59                	jmp    40c210 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0xb2>
  40c1b7:	b8 00 00 00 00       	mov    $0x0,%eax
	else
	  {
	    __glibcxx_assert(__count <= size());
  40c1bc:	84 c0                	test   %al,%al
  40c1be:	74 1e                	je     40c1de <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x80>
  40c1c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c1c4:	48 89 c7             	mov    %rax,%rdi
  40c1c7:	e8 f8 91 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40c1cc:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40c1d0:	0f 92 c0             	setb   %al
  40c1d3:	0f b6 c0             	movzbl %al,%eax
  40c1d6:	48 85 c0             	test   %rax,%rax
  40c1d9:	0f 95 c0             	setne  %al
  40c1dc:	84 c0                	test   %al,%al
  40c1de:	b8 00 00 00 00       	mov    $0x0,%eax
	    __glibcxx_assert(__offset + __count <= size());
  40c1e3:	84 c0                	test   %al,%al
  40c1e5:	74 29                	je     40c210 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0xb2>
  40c1e7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c1eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c1ef:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  40c1f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c1f7:	48 89 c7             	mov    %rax,%rdi
  40c1fa:	e8 c5 91 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40c1ff:	48 39 d8             	cmp    %rbx,%rax
  40c202:	0f 92 c0             	setb   %al
  40c205:	0f b6 c0             	movzbl %al,%eax
  40c208:	48 85 c0             	test   %rax,%rax
  40c20b:	0f 95 c0             	setne  %al
  40c20e:	84 c0                	test   %al,%al
	  }
	return {this->data() + __offset, __count};
  40c210:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c214:	48 89 c7             	mov    %rax,%rdi
  40c217:	e8 96 91 ff ff       	call   4053b2 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40c21c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c220:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  40c224:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c228:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40c22c:	48 89 ce             	mov    %rcx,%rsi
  40c22f:	48 89 c7             	mov    %rax,%rdi
  40c232:	e8 2f e4 ff ff       	call   40a666 <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
  40c237:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c23b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
      }
  40c23f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c243:	c9                   	leave
  40c244:	c3                   	ret
  40c245:	90                   	nop

000000000040c246 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
  40c246:	55                   	push   %rbp
  40c247:	48 89 e5             	mov    %rsp,%rbp
  40c24a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c24e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_current += __n; return *this; }
  40c252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c256:	48 8b 10             	mov    (%rax),%rdx
  40c259:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c25d:	48 01 c2             	add    %rax,%rdx
  40c260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c264:	48 89 10             	mov    %rdx,(%rax)
  40c267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c26b:	5d                   	pop    %rbp
  40c26c:	c3                   	ret

000000000040c26d <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>:
	_S_make_elt(_Tp& __v)
  40c26d:	55                   	push   %rbp
  40c26e:	48 89 e5             	mov    %rsp,%rbp
  40c271:	48 83 ec 50          	sub    $0x50,%rsp
  40c275:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	  basic_format_arg<_Context> __arg(__v);
  40c279:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c27d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40c281:	48 89 d6             	mov    %rdx,%rsi
  40c284:	48 89 c7             	mov    %rax,%rdi
  40c287:	e8 64 02 00 00       	call   40c4f0 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_>
	    return __arg._M_val;
  40c28c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c290:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c294:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40c298:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40c29c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c2a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
	}
  40c2a4:	c9                   	leave
  40c2a5:	c3                   	ret

000000000040c2a6 <_ZNSt8__detail15__raise_and_addItEEbRT_ih>:
    __raise_and_add(_Tp& __val, int __base, unsigned char __c)
  40c2a6:	55                   	push   %rbp
  40c2a7:	48 89 e5             	mov    %rsp,%rbp
  40c2aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c2ae:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40c2b1:	89 d0                	mov    %edx,%eax
  40c2b3:	88 45 f0             	mov    %al,-0x10(%rbp)
      if (__builtin_mul_overflow(__val, __base, &__val)
  40c2b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c2ba:	0f b7 00             	movzwl (%rax),%eax
  40c2bd:	b9 00 00 00 00       	mov    $0x0,%ecx
  40c2c2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40c2c5:	48 63 d2             	movslq %edx,%rdx
  40c2c8:	0f b7 c0             	movzwl %ax,%eax
  40c2cb:	48 0f af c2          	imul   %rdx,%rax
  40c2cf:	0f b7 d0             	movzwl %ax,%edx
  40c2d2:	48 39 d0             	cmp    %rdx,%rax
  40c2d5:	74 05                	je     40c2dc <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x36>
  40c2d7:	b9 01 00 00 00       	mov    $0x1,%ecx
  40c2dc:	89 c2                	mov    %eax,%edx
  40c2de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c2e2:	66 89 10             	mov    %dx,(%rax)
  40c2e5:	89 c8                	mov    %ecx,%eax
  40c2e7:	83 e0 01             	and    $0x1,%eax
	  || __builtin_add_overflow(__val, __c, &__val))
  40c2ea:	84 c0                	test   %al,%al
  40c2ec:	75 2c                	jne    40c31a <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x74>
  40c2ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c2f2:	0f b7 10             	movzwl (%rax),%edx
  40c2f5:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  40c2f9:	b9 00 00 00 00       	mov    $0x0,%ecx
  40c2fe:	66 01 d0             	add    %dx,%ax
  40c301:	73 05                	jae    40c308 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x62>
  40c303:	b9 01 00 00 00       	mov    $0x1,%ecx
  40c308:	89 c2                	mov    %eax,%edx
  40c30a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c30e:	66 89 10             	mov    %dx,(%rax)
  40c311:	89 c8                	mov    %ecx,%eax
  40c313:	83 e0 01             	and    $0x1,%eax
  40c316:	84 c0                	test   %al,%al
  40c318:	74 07                	je     40c321 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x7b>
  40c31a:	b8 01 00 00 00       	mov    $0x1,%eax
  40c31f:	eb 05                	jmp    40c326 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x80>
  40c321:	b8 00 00 00 00       	mov    $0x0,%eax
      if (__builtin_mul_overflow(__val, __base, &__val)
  40c326:	84 c0                	test   %al,%al
  40c328:	74 07                	je     40c331 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x8b>
	return false;
  40c32a:	b8 00 00 00 00       	mov    $0x0,%eax
  40c32f:	eb 05                	jmp    40c336 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x90>
      return true;
  40c331:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40c336:	5d                   	pop    %rbp
  40c337:	c3                   	ret

000000000040c338 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40c338:	55                   	push   %rbp
  40c339:	48 89 e5             	mov    %rsp,%rbp
  40c33c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40c340:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c344:	5d                   	pop    %rbp
  40c345:	c3                   	ret

000000000040c346 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40c346:	55                   	push   %rbp
  40c347:	48 89 e5             	mov    %rsp,%rbp
  40c34a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40c34e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c352:	5d                   	pop    %rbp
  40c353:	c3                   	ret

000000000040c354 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE6_GuardIS2_ED1Ev>:
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
  40c354:	55                   	push   %rbp
  40c355:	48 89 e5             	mov    %rsp,%rbp
  40c358:	53                   	push   %rbx
  40c359:	48 83 ec 18          	sub    $0x18,%rsp
  40c35d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c361:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c365:	48 83 c0 08          	add    $0x8,%rax
  40c369:	48 89 c7             	mov    %rax,%rdi
  40c36c:	e8 4f ec ff ff       	call   40afc0 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
  40c371:	48 8b 18             	mov    (%rax),%rbx
  40c374:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c378:	48 8b 00             	mov    (%rax),%rax
  40c37b:	48 89 c7             	mov    %rax,%rdi
  40c37e:	e8 35 dc ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40c383:	48 89 18             	mov    %rbx,(%rax)
  40c386:	90                   	nop
  40c387:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c38b:	c9                   	leave
  40c38c:	c3                   	ret
  40c38d:	90                   	nop

000000000040c38e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>:
      _S_error()
  40c38e:	55                   	push   %rbp
  40c38f:	48 89 e5             	mov    %rsp,%rbp
  40c392:	48 83 ec 20          	sub    $0x20,%rsp
  40c396:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char32_t __c = _ErrorHandler()();
  40c39a:	48 8d 45 fb          	lea    -0x5(%rbp),%rax
  40c39e:	48 89 c7             	mov    %rax,%rdi
  40c3a1:	e8 f0 88 ff ff       	call   404c96 <_ZNKSt9__unicode5_ReplclEv>
  40c3a6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40c3a9:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__is_scalar_value(__c));
  40c3ae:	84 c0                	test   %al,%al
  40c3b0:	74 18                	je     40c3ca <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv+0x3c>
  40c3b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c3b5:	89 c7                	mov    %eax,%edi
  40c3b7:	e8 a1 88 ff ff       	call   404c5d <_ZNSt9__unicode17__is_scalar_valueEDi>
  40c3bc:	83 f0 01             	xor    $0x1,%eax
  40c3bf:	0f b6 c0             	movzbl %al,%eax
  40c3c2:	48 85 c0             	test   %rax,%rax
  40c3c5:	0f 95 c0             	setne  %al
  40c3c8:	84 c0                	test   %al,%al
	return __c;
  40c3ca:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
  40c3cd:	c9                   	leave
  40c3ce:	c3                   	ret
  40c3cf:	90                   	nop

000000000040c3d0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE9_M_updateEDih>:
      _M_update(char32_t __c, uint8_t __to_incr)
  40c3d0:	55                   	push   %rbp
  40c3d1:	48 89 e5             	mov    %rsp,%rbp
  40c3d4:	53                   	push   %rbx
  40c3d5:	48 83 ec 18          	sub    $0x18,%rsp
  40c3d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c3dd:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  40c3e0:	89 d0                	mov    %edx,%eax
  40c3e2:	88 45 e0             	mov    %al,-0x20(%rbp)
	_M_to_increment = __to_incr;
  40c3e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c3e9:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
  40c3ed:	88 50 1a             	mov    %dl,0x1a(%rax)
	_M_buf_index = 0;
  40c3f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c3f4:	c6 40 18 00          	movb   $0x0,0x18(%rax)
	    _M_buf[0] = __c;
  40c3f8:	8b 5d e4             	mov    -0x1c(%rbp),%ebx
  40c3fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c3ff:	be 00 00 00 00       	mov    $0x0,%esi
  40c404:	48 89 c7             	mov    %rax,%rdi
  40c407:	e8 4a 01 00 00       	call   40c556 <_ZNSt5arrayIDiLm1EEixEm>
  40c40c:	89 18                	mov    %ebx,(%rax)
	    _M_buf_last = 1;
  40c40e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c412:	c6 40 19 01          	movb   $0x1,0x19(%rax)
      }
  40c416:	90                   	nop
  40c417:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c41b:	c9                   	leave
  40c41c:	c3                   	ret

000000000040c41d <_ZSt9__advanceIPKclEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40c41d:	55                   	push   %rbp
  40c41e:	48 89 e5             	mov    %rsp,%rbp
  40c421:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c425:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40c429:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c42d:	48 8b 10             	mov    (%rax),%rdx
  40c430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c434:	48 01 c2             	add    %rax,%rdx
  40c437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c43b:	48 89 10             	mov    %rdx,(%rax)
    }
  40c43e:	90                   	nop
  40c43f:	5d                   	pop    %rbp
  40c440:	c3                   	ret
  40c441:	90                   	nop

000000000040c442 <_ZNSt15__new_allocatorIcE10deallocateEPcm>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
  40c442:	55                   	push   %rbp
  40c443:	48 89 e5             	mov    %rsp,%rbp
  40c446:	48 83 ec 20          	sub    $0x20,%rsp
  40c44a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c44e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40c452:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  40c456:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c45a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c45e:	48 89 d6             	mov    %rdx,%rsi
  40c461:	48 89 c7             	mov    %rax,%rdi
  40c464:	e8 c7 7d ff ff       	call   404230 <_ZdlPvm@plt>
      }
  40c469:	c9                   	leave
  40c46a:	c3                   	ret
  40c46b:	90                   	nop

000000000040c46c <_ZNKSt4lessIPKcEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
  40c46c:	55                   	push   %rbp
  40c46d:	48 89 e5             	mov    %rsp,%rbp
  40c470:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c474:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40c478:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40c47c:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
  40c481:	84 c0                	test   %al,%al
  40c483:	74 0d                	je     40c492 <_ZNKSt4lessIPKcEclES1_S1_+0x26>
	  return __x < __y;
  40c485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c489:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40c48d:	0f 92 c0             	setb   %al
  40c490:	eb 0e                	jmp    40c4a0 <_ZNKSt4lessIPKcEclES1_S1_+0x34>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
  40c492:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c496:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c49a:	48 39 c2             	cmp    %rax,%rdx
  40c49d:	0f 92 c0             	setb   %al
      }
  40c4a0:	5d                   	pop    %rbp
  40c4a1:	c3                   	ret

000000000040c4a2 <_ZNSt15__new_allocatorIcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  40c4a2:	55                   	push   %rbp
  40c4a3:	48 89 e5             	mov    %rsp,%rbp
  40c4a6:	48 83 ec 30          	sub    $0x30,%rsp
  40c4aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c4ae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40c4b2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c4b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c4ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
  40c4be:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  40c4c5:	ff ff 7f
	if (__builtin_expect(__n > this->_M_max_size(), false))
  40c4c8:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40c4cc:	0f 92 c0             	setb   %al
  40c4cf:	0f b6 c0             	movzbl %al,%eax
  40c4d2:	48 85 c0             	test   %rax,%rax
  40c4d5:	0f 95 c0             	setne  %al
  40c4d8:	84 c0                	test   %al,%al
  40c4da:	74 05                	je     40c4e1 <_ZNSt15__new_allocatorIcE8allocateEmPKv+0x3f>
	    std::__throw_bad_alloc();
  40c4dc:	e8 af 7b ff ff       	call   404090 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  40c4e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c4e5:	48 89 c7             	mov    %rax,%rdi
  40c4e8:	e8 23 7d ff ff       	call   404210 <_Znwm@plt>
  40c4ed:	90                   	nop
      }
  40c4ee:	c9                   	leave
  40c4ef:	c3                   	ret

000000000040c4f0 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_>:
	basic_format_arg(_Tp& __v) noexcept
  40c4f0:	55                   	push   %rbp
  40c4f1:	48 89 e5             	mov    %rsp,%rbp
  40c4f4:	53                   	push   %rbx
  40c4f5:	48 83 ec 38          	sub    $0x38,%rsp
  40c4f9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40c4fd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	{
  40c501:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c505:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Arg_value() : _M_none() { }
  40c509:	90                   	nop
	    _M_set(_Td{__v.data(), __v.size()});
  40c50a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c50e:	48 89 c7             	mov    %rax,%rdi
  40c511:	e8 4c d6 ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  40c516:	48 89 c3             	mov    %rax,%rbx
  40c519:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c51d:	48 89 c7             	mov    %rax,%rdi
  40c520:	e8 fb 86 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c525:	48 89 c2             	mov    %rax,%rdx
  40c528:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40c52c:	48 89 de             	mov    %rbx,%rsi
  40c52f:	48 89 c7             	mov    %rax,%rdi
  40c532:	e8 c3 a3 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40c537:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40c53b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c53f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c543:	48 89 ce             	mov    %rcx,%rsi
  40c546:	48 89 c7             	mov    %rax,%rdi
  40c549:	e8 2a 00 00 00       	call   40c578 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setISt17basic_string_viewIcSt11char_traitsIcEEEEvT_>
	}
  40c54e:	90                   	nop
  40c54f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c553:	c9                   	leave
  40c554:	c3                   	ret
  40c555:	90                   	nop

000000000040c556 <_ZNSt5arrayIDiLm1EEixEm>:
      operator[](size_type __n) noexcept
  40c556:	55                   	push   %rbp
  40c557:	48 89 e5             	mov    %rsp,%rbp
  40c55a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c55e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  40c562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c566:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40c56d:	00
  40c56e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c572:	48 01 d0             	add    %rdx,%rax
      }
  40c575:	5d                   	pop    %rbp
  40c576:	c3                   	ret
  40c577:	90                   	nop

000000000040c578 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setISt17basic_string_viewIcSt11char_traitsIcEEEEvT_>:
	_M_set(_Tp __v) noexcept
  40c578:	55                   	push   %rbp
  40c579:	48 89 e5             	mov    %rsp,%rbp
  40c57c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40c580:	48 89 f0             	mov    %rsi,%rax
  40c583:	48 89 d1             	mov    %rdx,%rcx
  40c586:	48 89 c0             	mov    %rax,%rax
  40c589:	ba 00 00 00 00       	mov    $0x0,%edx
  40c58e:	48 89 ca             	mov    %rcx,%rdx
  40c591:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c595:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  _M_type = _S_to_enum<_Tp>();
  40c599:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c59d:	c6 40 10 0b          	movb   $0xb,0x10(%rax)
	  _M_val._M_set(__v);
  40c5a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c5a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40c5a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c5ad:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c5b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c5b5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40c5b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c5bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	    return __u._M_sv;
  40c5c1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
	    _S_get<_Tp>(*this) = __v;
  40c5c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c5c9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c5cd:	48 89 01             	mov    %rax,(%rcx)
  40c5d0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	}
  40c5d4:	90                   	nop
	}
  40c5d5:	90                   	nop
  40c5d6:	5d                   	pop    %rbp
  40c5d7:	c3                   	ret

000000000040c5d8 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc>:
      _M_on_chars(iterator __last) override
  40c5d8:	55                   	push   %rbp
  40c5d9:	48 89 e5             	mov    %rsp,%rbp
  40c5dc:	53                   	push   %rbx
  40c5dd:	48 83 ec 28          	sub    $0x28,%rsp
  40c5e1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40c5e5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	basic_string_view<_CharT> __str(this->begin(), __last);
  40c5e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c5ed:	48 89 c7             	mov    %rax,%rdi
  40c5f0:	e8 8f 97 ff ff       	call   405d84 <_ZNKSt8__format8_ScannerIcE5beginEv>
  40c5f5:	48 89 c1             	mov    %rax,%rcx
  40c5f8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c5fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40c600:	48 89 ce             	mov    %rcx,%rsi
  40c603:	48 89 c7             	mov    %rax,%rdi
  40c606:	e8 d9 97 ff ff       	call   405de4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
	_M_fc.advance_to(__format::__write(_M_fc.out(), __str));
  40c60b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c60f:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40c613:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c617:	48 8b 40 30          	mov    0x30(%rax),%rax
  40c61b:	48 89 c7             	mov    %rax,%rdi
  40c61e:	e8 cf e3 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40c623:	48 89 c1             	mov    %rax,%rcx
  40c626:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c62a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c62e:	48 89 d6             	mov    %rdx,%rsi
  40c631:	48 89 c2             	mov    %rax,%rdx
  40c634:	48 89 cf             	mov    %rcx,%rdi
  40c637:	e8 d2 10 00 00       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  40c63c:	48 89 c6             	mov    %rax,%rsi
  40c63f:	48 89 df             	mov    %rbx,%rdi
  40c642:	e8 31 11 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
      }
  40c647:	90                   	nop
  40c648:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c64c:	c9                   	leave
  40c64d:	c3                   	ret

000000000040c64e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt9monostateEEDaS5_>:
	std::visit_format_arg([this](auto& __arg) {
  40c64e:	55                   	push   %rbp
  40c64f:	48 89 e5             	mov    %rsp,%rbp
  40c652:	48 83 ec 10          	sub    $0x10,%rsp
  40c656:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c65a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    __format::__invalid_arg_id_in_format_string();
  40c65e:	e8 43 8a ff ff       	call   4050a6 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
  40c663:	90                   	nop

000000000040c664 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIbEEDaS5_>:
	std::visit_format_arg([this](auto& __arg) {
  40c664:	55                   	push   %rbp
  40c665:	48 89 e5             	mov    %rsp,%rbp
  40c668:	53                   	push   %rbx
  40c669:	48 83 ec 38          	sub    $0x38,%rsp
  40c66d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40c671:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40c675:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40c67c:	00
  40c67d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40c684:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c68b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c68f:	48 8b 00             	mov    (%rax),%rax
  40c692:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40c696:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c69a:	48 8b 00             	mov    (%rax),%rax
  40c69d:	48 83 c0 08          	add    $0x8,%rax
  40c6a1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40c6a5:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c6a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c6ad:	48 89 d6             	mov    %rdx,%rsi
  40c6b0:	48 89 c7             	mov    %rax,%rdi
  40c6b3:	e8 22 19 00 00       	call   40dfda <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE>
  40c6b8:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c6b9:	48 89 c6             	mov    %rax,%rsi
  40c6bc:	48 89 df             	mov    %rbx,%rdi
  40c6bf:	e8 86 97 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40c6c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c6c8:	48 8b 00             	mov    (%rax),%rax
  40c6cb:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40c6cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c6d3:	48 8b 00             	mov    (%rax),%rax
  40c6d6:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40c6da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c6de:	0f b6 00             	movzbl (%rax),%eax
  40c6e1:	0f b6 c8             	movzbl %al,%ecx
  40c6e4:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c6e8:	89 ce                	mov    %ecx,%esi
  40c6ea:	48 89 c7             	mov    %rax,%rdi
  40c6ed:	e8 9e 11 00 00       	call   40d890 <_ZNKSt9formatterIbcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>
  40c6f2:	48 89 c6             	mov    %rax,%rsi
  40c6f5:	48 89 df             	mov    %rbx,%rdi
  40c6f8:	e8 7b 10 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40c6fd:	90                   	nop
  40c6fe:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c702:	c9                   	leave
  40c703:	c3                   	ret

000000000040c704 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIcEEDaS5_>:
  40c704:	55                   	push   %rbp
  40c705:	48 89 e5             	mov    %rsp,%rbp
  40c708:	53                   	push   %rbx
  40c709:	48 83 ec 28          	sub    $0x28,%rsp
  40c70d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40c711:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	      _Formatter __f;
  40c715:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  40c71c:	00
  40c71d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40c724:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c72b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c72f:	48 8b 00             	mov    (%rax),%rax
  40c732:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40c736:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c73a:	48 8b 00             	mov    (%rax),%rax
  40c73d:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40c741:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40c745:	48 89 d6             	mov    %rdx,%rsi
  40c748:	48 89 c7             	mov    %rax,%rdi
  40c74b:	e8 6e 11 00 00       	call   40d8be <_ZNSt9formatterIccE5parseERSt26basic_format_parse_contextIcE>
  40c750:	48 89 c6             	mov    %rax,%rsi
  40c753:	48 89 df             	mov    %rbx,%rdi
  40c756:	e8 ef 96 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40c75b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c75f:	48 8b 00             	mov    (%rax),%rax
  40c762:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40c766:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c76a:	48 8b 00             	mov    (%rax),%rax
  40c76d:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40c771:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c775:	0f b6 00             	movzbl (%rax),%eax
  40c778:	0f be c8             	movsbl %al,%ecx
  40c77b:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40c77f:	89 ce                	mov    %ecx,%esi
  40c781:	48 89 c7             	mov    %rax,%rdi
  40c784:	e8 5b 11 00 00       	call   40d8e4 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40c789:	48 89 c6             	mov    %rax,%rsi
  40c78c:	48 89 df             	mov    %rbx,%rdi
  40c78f:	e8 e4 0f 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40c794:	90                   	nop
  40c795:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c799:	c9                   	leave
  40c79a:	c3                   	ret
  40c79b:	90                   	nop

000000000040c79c <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIiEEDaS5_>:
  40c79c:	55                   	push   %rbp
  40c79d:	48 89 e5             	mov    %rsp,%rbp
  40c7a0:	53                   	push   %rbx
  40c7a1:	48 83 ec 38          	sub    $0x38,%rsp
  40c7a5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40c7a9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40c7ad:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40c7b4:	00
  40c7b5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40c7bc:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c7c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c7c7:	48 8b 00             	mov    (%rax),%rax
  40c7ca:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40c7ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c7d2:	48 8b 00             	mov    (%rax),%rax
  40c7d5:	48 83 c0 08          	add    $0x8,%rax
  40c7d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40c7dd:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c7e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c7e5:	48 89 d6             	mov    %rdx,%rsi
  40c7e8:	48 89 c7             	mov    %rax,%rdi
  40c7eb:	e8 e2 1e 00 00       	call   40e6d2 <_ZNSt8__format15__formatter_intIcE8_M_parseIiEEPKcRSt26basic_format_parse_contextIcE>
  40c7f0:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c7f1:	48 89 c6             	mov    %rax,%rsi
  40c7f4:	48 89 df             	mov    %rbx,%rdi
  40c7f7:	e8 4e 96 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40c7fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c800:	48 8b 00             	mov    (%rax),%rax
  40c803:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40c807:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c80b:	48 8b 00             	mov    (%rax),%rax
  40c80e:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40c812:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c816:	8b 08                	mov    (%rax),%ecx
  40c818:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c81c:	89 ce                	mov    %ecx,%esi
  40c81e:	48 89 c7             	mov    %rax,%rdi
  40c821:	e8 42 11 00 00       	call   40d968 <_ZNKSt9formatterIicE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEiRS7_>
  40c826:	48 89 c6             	mov    %rax,%rsi
  40c829:	48 89 df             	mov    %rbx,%rdi
  40c82c:	e8 47 0f 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40c831:	90                   	nop
  40c832:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c836:	c9                   	leave
  40c837:	c3                   	ret

000000000040c838 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIjEEDaS5_>:
  40c838:	55                   	push   %rbp
  40c839:	48 89 e5             	mov    %rsp,%rbp
  40c83c:	53                   	push   %rbx
  40c83d:	48 83 ec 38          	sub    $0x38,%rsp
  40c841:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40c845:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40c849:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40c850:	00
  40c851:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40c858:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c85f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c863:	48 8b 00             	mov    (%rax),%rax
  40c866:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40c86a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c86e:	48 8b 00             	mov    (%rax),%rax
  40c871:	48 83 c0 08          	add    $0x8,%rax
  40c875:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40c879:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c87d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c881:	48 89 d6             	mov    %rdx,%rsi
  40c884:	48 89 c7             	mov    %rax,%rdi
  40c887:	e8 40 22 00 00       	call   40eacc <_ZNSt8__format15__formatter_intIcE8_M_parseIjEEPKcRSt26basic_format_parse_contextIcE>
  40c88c:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c88d:	48 89 c6             	mov    %rax,%rsi
  40c890:	48 89 df             	mov    %rbx,%rdi
  40c893:	e8 b2 95 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40c898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c89c:	48 8b 00             	mov    (%rax),%rax
  40c89f:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40c8a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c8a7:	48 8b 00             	mov    (%rax),%rax
  40c8aa:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40c8ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c8b2:	8b 08                	mov    (%rax),%ecx
  40c8b4:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c8b8:	89 ce                	mov    %ecx,%esi
  40c8ba:	48 89 c7             	mov    %rax,%rdi
  40c8bd:	e8 d0 10 00 00       	call   40d992 <_ZNKSt9formatterIjcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEjRS7_>
  40c8c2:	48 89 c6             	mov    %rax,%rsi
  40c8c5:	48 89 df             	mov    %rbx,%rdi
  40c8c8:	e8 ab 0e 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40c8cd:	90                   	nop
  40c8ce:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c8d2:	c9                   	leave
  40c8d3:	c3                   	ret

000000000040c8d4 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIxEEDaS5_>:
  40c8d4:	55                   	push   %rbp
  40c8d5:	48 89 e5             	mov    %rsp,%rbp
  40c8d8:	53                   	push   %rbx
  40c8d9:	48 83 ec 38          	sub    $0x38,%rsp
  40c8dd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40c8e1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40c8e5:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40c8ec:	00
  40c8ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40c8f4:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c8fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c8ff:	48 8b 00             	mov    (%rax),%rax
  40c902:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40c906:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c90a:	48 8b 00             	mov    (%rax),%rax
  40c90d:	48 83 c0 08          	add    $0x8,%rax
  40c911:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40c915:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c919:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c91d:	48 89 d6             	mov    %rdx,%rsi
  40c920:	48 89 c7             	mov    %rax,%rdi
  40c923:	e8 88 25 00 00       	call   40eeb0 <_ZNSt8__format15__formatter_intIcE8_M_parseIxEEPKcRSt26basic_format_parse_contextIcE>
  40c928:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c929:	48 89 c6             	mov    %rax,%rsi
  40c92c:	48 89 df             	mov    %rbx,%rdi
  40c92f:	e8 16 95 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40c934:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c938:	48 8b 00             	mov    (%rax),%rax
  40c93b:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40c93f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c943:	48 8b 00             	mov    (%rax),%rax
  40c946:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40c94a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c94e:	48 8b 08             	mov    (%rax),%rcx
  40c951:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c955:	48 89 ce             	mov    %rcx,%rsi
  40c958:	48 89 c7             	mov    %rax,%rdi
  40c95b:	e8 5c 10 00 00       	call   40d9bc <_ZNKSt9formatterIxcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorExRS7_>
  40c960:	48 89 c6             	mov    %rax,%rsi
  40c963:	48 89 df             	mov    %rbx,%rdi
  40c966:	e8 0d 0e 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40c96b:	90                   	nop
  40c96c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c970:	c9                   	leave
  40c971:	c3                   	ret

000000000040c972 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIyEEDaS5_>:
  40c972:	55                   	push   %rbp
  40c973:	48 89 e5             	mov    %rsp,%rbp
  40c976:	53                   	push   %rbx
  40c977:	48 83 ec 38          	sub    $0x38,%rsp
  40c97b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40c97f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40c983:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40c98a:	00
  40c98b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40c992:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c999:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c99d:	48 8b 00             	mov    (%rax),%rax
  40c9a0:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40c9a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c9a8:	48 8b 00             	mov    (%rax),%rax
  40c9ab:	48 83 c0 08          	add    $0x8,%rax
  40c9af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40c9b3:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c9b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c9bb:	48 89 d6             	mov    %rdx,%rsi
  40c9be:	48 89 c7             	mov    %rax,%rdi
  40c9c1:	e8 f8 28 00 00       	call   40f2be <_ZNSt8__format15__formatter_intIcE8_M_parseIyEEPKcRSt26basic_format_parse_contextIcE>
  40c9c6:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40c9c7:	48 89 c6             	mov    %rax,%rsi
  40c9ca:	48 89 df             	mov    %rbx,%rdi
  40c9cd:	e8 78 94 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40c9d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c9d6:	48 8b 00             	mov    (%rax),%rax
  40c9d9:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40c9dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c9e1:	48 8b 00             	mov    (%rax),%rax
  40c9e4:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40c9e8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c9ec:	48 8b 08             	mov    (%rax),%rcx
  40c9ef:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40c9f3:	48 89 ce             	mov    %rcx,%rsi
  40c9f6:	48 89 c7             	mov    %rax,%rdi
  40c9f9:	e8 ec 0f 00 00       	call   40d9ea <_ZNKSt9formatterIycE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEyRS7_>
  40c9fe:	48 89 c6             	mov    %rax,%rsi
  40ca01:	48 89 df             	mov    %rbx,%rdi
  40ca04:	e8 6f 0d 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40ca09:	90                   	nop
  40ca0a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ca0e:	c9                   	leave
  40ca0f:	c3                   	ret

000000000040ca10 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIfEEDaS5_>:
  40ca10:	55                   	push   %rbp
  40ca11:	48 89 e5             	mov    %rsp,%rbp
  40ca14:	53                   	push   %rbx
  40ca15:	48 83 ec 38          	sub    $0x38,%rsp
  40ca19:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40ca1d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40ca21:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40ca28:	00
  40ca29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40ca30:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40ca37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ca3b:	48 8b 00             	mov    (%rax),%rax
  40ca3e:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40ca42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ca46:	48 8b 00             	mov    (%rax),%rax
  40ca49:	48 83 c0 08          	add    $0x8,%rax
  40ca4d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40ca51:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40ca55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ca59:	48 89 d6             	mov    %rdx,%rsi
  40ca5c:	48 89 c7             	mov    %rax,%rdi
  40ca5f:	e8 ca 2c 00 00       	call   40f72e <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40ca64:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40ca65:	48 89 c6             	mov    %rax,%rsi
  40ca68:	48 89 df             	mov    %rbx,%rdi
  40ca6b:	e8 da 93 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40ca70:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ca74:	48 8b 00             	mov    (%rax),%rax
  40ca77:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40ca7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ca7f:	48 8b 00             	mov    (%rax),%rax
  40ca82:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40ca86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ca8a:	8b 10                	mov    (%rax),%edx
  40ca8c:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40ca90:	48 89 ce             	mov    %rcx,%rsi
  40ca93:	66 0f 6e c2          	movd   %edx,%xmm0
  40ca97:	48 89 c7             	mov    %rax,%rdi
  40ca9a:	e8 79 0f 00 00       	call   40da18 <_ZNKSt9formatterIfcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEfRS7_>
  40ca9f:	48 89 c6             	mov    %rax,%rsi
  40caa2:	48 89 df             	mov    %rbx,%rdi
  40caa5:	e8 ce 0c 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40caaa:	90                   	nop
  40caab:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40caaf:	c9                   	leave
  40cab0:	c3                   	ret
  40cab1:	90                   	nop

000000000040cab2 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIdEEDaS5_>:
  40cab2:	55                   	push   %rbp
  40cab3:	48 89 e5             	mov    %rsp,%rbp
  40cab6:	53                   	push   %rbx
  40cab7:	48 83 ec 38          	sub    $0x38,%rsp
  40cabb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40cabf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40cac3:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40caca:	00
  40cacb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40cad2:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cad9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cadd:	48 8b 00             	mov    (%rax),%rax
  40cae0:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40cae4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cae8:	48 8b 00             	mov    (%rax),%rax
  40caeb:	48 83 c0 08          	add    $0x8,%rax
  40caef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40caf3:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40caf7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cafb:	48 89 d6             	mov    %rdx,%rsi
  40cafe:	48 89 c7             	mov    %rax,%rdi
  40cb01:	e8 28 2c 00 00       	call   40f72e <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40cb06:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cb07:	48 89 c6             	mov    %rax,%rsi
  40cb0a:	48 89 df             	mov    %rbx,%rdi
  40cb0d:	e8 38 93 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40cb12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cb16:	48 8b 00             	mov    (%rax),%rax
  40cb19:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cb1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cb21:	48 8b 00             	mov    (%rax),%rax
  40cb24:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40cb28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cb2c:	48 8b 10             	mov    (%rax),%rdx
  40cb2f:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cb33:	48 89 ce             	mov    %rcx,%rsi
  40cb36:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  40cb3b:	48 89 c7             	mov    %rax,%rdi
  40cb3e:	e8 07 0f 00 00       	call   40da4a <_ZNKSt9formatterIdcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEdRS7_>
  40cb43:	48 89 c6             	mov    %rax,%rsi
  40cb46:	48 89 df             	mov    %rbx,%rdi
  40cb49:	e8 2a 0c 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40cb4e:	90                   	nop
  40cb4f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40cb53:	c9                   	leave
  40cb54:	c3                   	ret
  40cb55:	90                   	nop

000000000040cb56 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIeEEDaS5_>:
  40cb56:	55                   	push   %rbp
  40cb57:	48 89 e5             	mov    %rsp,%rbp
  40cb5a:	53                   	push   %rbx
  40cb5b:	48 83 ec 38          	sub    $0x38,%rsp
  40cb5f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40cb63:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40cb67:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40cb6e:	00
  40cb6f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40cb76:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cb7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cb81:	48 8b 00             	mov    (%rax),%rax
  40cb84:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40cb88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cb8c:	48 8b 00             	mov    (%rax),%rax
  40cb8f:	48 83 c0 08          	add    $0x8,%rax
  40cb93:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40cb97:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cb9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cb9f:	48 89 d6             	mov    %rdx,%rsi
  40cba2:	48 89 c7             	mov    %rax,%rdi
  40cba5:	e8 84 2b 00 00       	call   40f72e <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40cbaa:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cbab:	48 89 c6             	mov    %rax,%rsi
  40cbae:	48 89 df             	mov    %rbx,%rdi
  40cbb1:	e8 94 92 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40cbb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cbba:	48 8b 00             	mov    (%rax),%rax
  40cbbd:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cbc1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cbc5:	48 8b 00             	mov    (%rax),%rax
  40cbc8:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40cbcc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cbd0:	db 28                	fldt   (%rax)
  40cbd2:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cbd6:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  40cbdb:	db 3c 24             	fstpt  (%rsp)
  40cbde:	48 89 d6             	mov    %rdx,%rsi
  40cbe1:	48 89 c7             	mov    %rax,%rdi
  40cbe4:	e8 95 0e 00 00       	call   40da7e <_ZNKSt9formatterIecE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEeRS7_>
  40cbe9:	48 83 c4 10          	add    $0x10,%rsp
  40cbed:	48 89 c6             	mov    %rax,%rsi
  40cbf0:	48 89 df             	mov    %rbx,%rdi
  40cbf3:	e8 80 0b 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40cbf8:	90                   	nop
  40cbf9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40cbfd:	c9                   	leave
  40cbfe:	c3                   	ret
  40cbff:	90                   	nop

000000000040cc00 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKcEEDaS5_>:
  40cc00:	55                   	push   %rbp
  40cc01:	48 89 e5             	mov    %rsp,%rbp
  40cc04:	53                   	push   %rbx
  40cc05:	48 83 ec 38          	sub    $0x38,%rsp
  40cc09:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40cc0d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40cc11:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40cc18:	00
  40cc19:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40cc20:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cc27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cc2b:	48 8b 00             	mov    (%rax),%rax
  40cc2e:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40cc32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cc36:	48 8b 00             	mov    (%rax),%rax
  40cc39:	48 83 c0 08          	add    $0x8,%rax
  40cc3d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40cc41:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cc45:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cc49:	48 89 d6             	mov    %rdx,%rsi
  40cc4c:	48 89 c7             	mov    %rax,%rdi
  40cc4f:	e8 ee 92 ff ff       	call   405f42 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>
  40cc54:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cc55:	48 89 c6             	mov    %rax,%rsi
  40cc58:	48 89 df             	mov    %rbx,%rdi
  40cc5b:	e8 ea 91 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40cc60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cc64:	48 8b 00             	mov    (%rax),%rax
  40cc67:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cc6b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cc6f:	48 8b 00             	mov    (%rax),%rax
  40cc72:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40cc76:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cc7a:	48 8b 08             	mov    (%rax),%rcx
  40cc7d:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cc81:	48 89 ce             	mov    %rcx,%rsi
  40cc84:	48 89 c7             	mov    %rax,%rdi
  40cc87:	e8 22 0e 00 00       	call   40daae <_ZNKSt9formatterIPKccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>
  40cc8c:	48 89 c6             	mov    %rax,%rsi
  40cc8f:	48 89 df             	mov    %rbx,%rdi
  40cc92:	e8 e1 0a 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40cc97:	90                   	nop
  40cc98:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40cc9c:	c9                   	leave
  40cc9d:	c3                   	ret

000000000040cc9e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt17basic_string_viewIcSt11char_traitsIcEEEEDaS5_>:
  40cc9e:	55                   	push   %rbp
  40cc9f:	48 89 e5             	mov    %rsp,%rbp
  40cca2:	53                   	push   %rbx
  40cca3:	48 83 ec 38          	sub    $0x38,%rsp
  40cca7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40ccab:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40ccaf:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40ccb6:	00
  40ccb7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40ccbe:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40ccc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ccc9:	48 8b 00             	mov    (%rax),%rax
  40cccc:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40ccd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ccd4:	48 8b 00             	mov    (%rax),%rax
  40ccd7:	48 83 c0 08          	add    $0x8,%rax
  40ccdb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40ccdf:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cce3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cce7:	48 89 d6             	mov    %rdx,%rsi
  40ccea:	48 89 c7             	mov    %rax,%rdi
  40cced:	e8 50 92 ff ff       	call   405f42 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>
  40ccf2:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40ccf3:	48 89 c6             	mov    %rax,%rsi
  40ccf6:	48 89 df             	mov    %rbx,%rdi
  40ccf9:	e8 4c 91 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40ccfe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cd02:	48 8b 00             	mov    (%rax),%rax
  40cd05:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cd09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cd0d:	48 8b 00             	mov    (%rax),%rax
  40cd10:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40cd14:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cd18:	48 8b 30             	mov    (%rax),%rsi
  40cd1b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40cd1f:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cd23:	48 89 c7             	mov    %rax,%rdi
  40cd26:	e8 cf 0d 00 00       	call   40dafa <_ZNKSt9formatterISt17basic_string_viewIcSt11char_traitsIcEEcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES3_RSB_>
  40cd2b:	48 89 c6             	mov    %rax,%rsi
  40cd2e:	48 89 df             	mov    %rbx,%rdi
  40cd31:	e8 42 0a 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40cd36:	90                   	nop
  40cd37:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40cd3b:	c9                   	leave
  40cd3c:	c3                   	ret
  40cd3d:	90                   	nop

000000000040cd3e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKvEEDaS5_>:
  40cd3e:	55                   	push   %rbp
  40cd3f:	48 89 e5             	mov    %rsp,%rbp
  40cd42:	53                   	push   %rbx
  40cd43:	48 83 ec 28          	sub    $0x28,%rsp
  40cd47:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40cd4b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	      _Formatter __f;
  40cd4f:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  40cd56:	00
  40cd57:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40cd5e:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cd65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cd69:	48 8b 00             	mov    (%rax),%rax
  40cd6c:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40cd70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cd74:	48 8b 00             	mov    (%rax),%rax
  40cd77:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40cd7b:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40cd7f:	48 89 d6             	mov    %rdx,%rsi
  40cd82:	48 89 c7             	mov    %rax,%rdi
  40cd85:	e8 30 0e 00 00       	call   40dbba <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE>
  40cd8a:	48 89 c6             	mov    %rax,%rsi
  40cd8d:	48 89 df             	mov    %rbx,%rdi
  40cd90:	e8 b5 90 ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40cd95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cd99:	48 8b 00             	mov    (%rax),%rax
  40cd9c:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cda0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cda4:	48 8b 00             	mov    (%rax),%rax
  40cda7:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40cdab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40cdaf:	48 8b 08             	mov    (%rax),%rcx
  40cdb2:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40cdb6:	48 89 ce             	mov    %rcx,%rsi
  40cdb9:	48 89 c7             	mov    %rax,%rdi
  40cdbc:	e8 31 0f 00 00       	call   40dcf2 <_ZNKSt9formatterIPKvcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>
  40cdc1:	48 89 c6             	mov    %rax,%rsi
  40cdc4:	48 89 df             	mov    %rbx,%rdi
  40cdc7:	e8 ac 09 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40cdcc:	90                   	nop
  40cdcd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40cdd1:	c9                   	leave
  40cdd2:	c3                   	ret
  40cdd3:	90                   	nop

000000000040cdd4 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clINSt16basic_format_argISt20basic_format_contextIS2_cEE6handleEEEDaS5_>:
  40cdd4:	55                   	push   %rbp
  40cdd5:	48 89 e5             	mov    %rsp,%rbp
  40cdd8:	48 83 ec 30          	sub    $0x30,%rsp
  40cddc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40cde0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	    __arg.format(this->_M_pc, this->_M_fc);
  40cde4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cde8:	48 8b 00             	mov    (%rax),%rax
  40cdeb:	48 8b 40 30          	mov    0x30(%rax),%rax
  40cdef:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cdf3:	48 8b 12             	mov    (%rdx),%rdx
  40cdf6:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  40cdfa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cdfe:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40ce02:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  40ce06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  auto __f = reinterpret_cast<_Func>(this->_M_func);
  40ce0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ce0e:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ce12:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __f(__pc, __fc, this->_M_ptr);
  40ce16:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  40ce1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ce1e:	48 8b 10             	mov    (%rax),%rdx
  40ce21:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ce25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ce29:	48 89 ce             	mov    %rcx,%rsi
  40ce2c:	48 89 c7             	mov    %rax,%rdi
  40ce2f:	41 ff d0             	call   *%r8
	}
  40ce32:	90                   	nop
	std::visit_format_arg([this](auto& __arg) {
  40ce33:	90                   	nop
  40ce34:	c9                   	leave
  40ce35:	c3                   	ret

000000000040ce36 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clInEEDaS5_>:
  40ce36:	55                   	push   %rbp
  40ce37:	48 89 e5             	mov    %rsp,%rbp
  40ce3a:	53                   	push   %rbx
  40ce3b:	48 83 ec 38          	sub    $0x38,%rsp
  40ce3f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40ce43:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40ce47:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40ce4e:	00
  40ce4f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40ce56:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40ce5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ce61:	48 8b 00             	mov    (%rax),%rax
  40ce64:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40ce68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ce6c:	48 8b 00             	mov    (%rax),%rax
  40ce6f:	48 83 c0 08          	add    $0x8,%rax
  40ce73:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40ce77:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40ce7b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ce7f:	48 89 d6             	mov    %rdx,%rsi
  40ce82:	48 89 c7             	mov    %rax,%rdi
  40ce85:	e8 f8 54 00 00       	call   412382 <_ZNSt8__format15__formatter_intIcE8_M_parseInEEPKcRSt26basic_format_parse_contextIcE>
  40ce8a:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40ce8b:	48 89 c6             	mov    %rax,%rsi
  40ce8e:	48 89 df             	mov    %rbx,%rdi
  40ce91:	e8 b4 8f ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40ce96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ce9a:	48 8b 00             	mov    (%rax),%rax
  40ce9d:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cea1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cea5:	48 8b 00             	mov    (%rax),%rax
  40cea8:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40ceac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ceb0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40ceb4:	48 8b 00             	mov    (%rax),%rax
  40ceb7:	48 89 c6             	mov    %rax,%rsi
  40ceba:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cebe:	48 89 c7             	mov    %rax,%rdi
  40cec1:	e8 ec 0e 00 00       	call   40ddb2 <_ZNKSt9formatterIncE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEnRS7_>
  40cec6:	48 89 c6             	mov    %rax,%rsi
  40cec9:	48 89 df             	mov    %rbx,%rdi
  40cecc:	e8 a7 08 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40ced1:	90                   	nop
  40ced2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ced6:	c9                   	leave
  40ced7:	c3                   	ret

000000000040ced8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIoEEDaS5_>:
  40ced8:	55                   	push   %rbp
  40ced9:	48 89 e5             	mov    %rsp,%rbp
  40cedc:	53                   	push   %rbx
  40cedd:	48 83 ec 38          	sub    $0x38,%rsp
  40cee1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40cee5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40cee9:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40cef0:	00
  40cef1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40cef8:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40ceff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cf03:	48 8b 00             	mov    (%rax),%rax
  40cf06:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40cf0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cf0e:	48 8b 00             	mov    (%rax),%rax
  40cf11:	48 83 c0 08          	add    $0x8,%rax
  40cf15:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40cf19:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cf1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cf21:	48 89 d6             	mov    %rdx,%rsi
  40cf24:	48 89 c7             	mov    %rax,%rdi
  40cf27:	e8 d2 58 00 00       	call   4127fe <_ZNSt8__format15__formatter_intIcE8_M_parseIoEEPKcRSt26basic_format_parse_contextIcE>
  40cf2c:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cf2d:	48 89 c6             	mov    %rax,%rsi
  40cf30:	48 89 df             	mov    %rbx,%rdi
  40cf33:	e8 12 8f ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40cf38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cf3c:	48 8b 00             	mov    (%rax),%rax
  40cf3f:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cf43:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cf47:	48 8b 00             	mov    (%rax),%rax
  40cf4a:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40cf4e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cf52:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40cf56:	48 8b 00             	mov    (%rax),%rax
  40cf59:	48 89 c6             	mov    %rax,%rsi
  40cf5c:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cf60:	48 89 c7             	mov    %rax,%rdi
  40cf63:	e8 8e 0e 00 00       	call   40ddf6 <_ZNKSt9formatterIocE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEoRS7_>
  40cf68:	48 89 c6             	mov    %rax,%rsi
  40cf6b:	48 89 df             	mov    %rbx,%rdi
  40cf6e:	e8 05 08 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40cf73:	90                   	nop
  40cf74:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40cf78:	c9                   	leave
  40cf79:	c3                   	ret

000000000040cf7a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIDF128_EEDaS5_>:
  40cf7a:	55                   	push   %rbp
  40cf7b:	48 89 e5             	mov    %rsp,%rbp
  40cf7e:	53                   	push   %rbx
  40cf7f:	48 83 ec 38          	sub    $0x38,%rsp
  40cf83:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40cf87:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40cf8b:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40cf92:	00
  40cf93:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40cf9a:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cfa1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cfa5:	48 8b 00             	mov    (%rax),%rax
  40cfa8:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40cfac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cfb0:	48 8b 00             	mov    (%rax),%rax
  40cfb3:	48 83 c0 08          	add    $0x8,%rax
  40cfb7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40cfbb:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cfbf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cfc3:	48 89 d6             	mov    %rdx,%rsi
  40cfc6:	48 89 c7             	mov    %rax,%rdi
  40cfc9:	e8 60 27 00 00       	call   40f72e <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40cfce:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40cfcf:	48 89 c6             	mov    %rax,%rsi
  40cfd2:	48 89 df             	mov    %rbx,%rdi
  40cfd5:	e8 70 8e ff ff       	call   405e4a <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40cfda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cfde:	48 8b 00             	mov    (%rax),%rax
  40cfe1:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40cfe5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40cfe9:	48 8b 00             	mov    (%rax),%rax
  40cfec:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40cff0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40cff4:	66 0f 6f 00          	movdqa (%rax),%xmm0
  40cff8:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40cffc:	48 89 d6             	mov    %rdx,%rsi
  40cfff:	48 89 c7             	mov    %rax,%rdi
  40d002:	e8 33 0e 00 00       	call   40de3a <_ZNKSt9formatterIDF128_cE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEDF128_RS7_>
  40d007:	48 89 c6             	mov    %rax,%rsi
  40d00a:	48 89 df             	mov    %rbx,%rdi
  40d00d:	e8 66 07 00 00       	call   40d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d012:	90                   	nop
  40d013:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d017:	c9                   	leave
  40d018:	c3                   	ret
  40d019:	90                   	nop

000000000040d01a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  40d01a:	55                   	push   %rbp
  40d01b:	48 89 e5             	mov    %rsp,%rbp
  40d01e:	48 83 ec 30          	sub    $0x30,%rsp
  40d022:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d026:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40d02a:	89 d0                	mov    %edx,%eax
  40d02c:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  40d02f:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  40d033:	89 c0                	mov    %eax,%eax
  40d035:	48 8b 04 c5 68 d0 41 	mov    0x41d068(,%rax,8),%rax
  40d03c:	00
  40d03d:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  40d03f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d043:	48 89 c7             	mov    %rax,%rdi
  40d046:	e8 36 08 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d04b:	48 89 c2             	mov    %rax,%rdx
  40d04e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d052:	48 89 c6             	mov    %rax,%rsi
  40d055:	48 89 d7             	mov    %rdx,%rdi
  40d058:	e8 f1 f5 ff ff       	call   40c64e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt9monostateEEDaS5_>
  40d05d:	e9 2b 02 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  40d062:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d066:	48 89 c7             	mov    %rax,%rdi
  40d069:	e8 13 08 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d06e:	48 89 c2             	mov    %rax,%rdx
  40d071:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d075:	48 89 c6             	mov    %rax,%rsi
  40d078:	48 89 d7             	mov    %rdx,%rdi
  40d07b:	e8 e4 f5 ff ff       	call   40c664 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIbEEDaS5_>
  40d080:	e9 08 02 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  40d085:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d089:	48 89 c7             	mov    %rax,%rdi
  40d08c:	e8 f0 07 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d091:	48 89 c2             	mov    %rax,%rdx
  40d094:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d098:	48 89 c6             	mov    %rax,%rsi
  40d09b:	48 89 d7             	mov    %rdx,%rdi
  40d09e:	e8 61 f6 ff ff       	call   40c704 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIcEEDaS5_>
  40d0a3:	e9 e5 01 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  40d0a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d0ac:	48 89 c7             	mov    %rax,%rdi
  40d0af:	e8 cd 07 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d0b4:	48 89 c2             	mov    %rax,%rdx
  40d0b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d0bb:	48 89 c6             	mov    %rax,%rsi
  40d0be:	48 89 d7             	mov    %rdx,%rdi
  40d0c1:	e8 d6 f6 ff ff       	call   40c79c <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIiEEDaS5_>
  40d0c6:	e9 c2 01 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  40d0cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d0cf:	48 89 c7             	mov    %rax,%rdi
  40d0d2:	e8 aa 07 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d0d7:	48 89 c2             	mov    %rax,%rdx
  40d0da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d0de:	48 89 c6             	mov    %rax,%rsi
  40d0e1:	48 89 d7             	mov    %rdx,%rdi
  40d0e4:	e8 4f f7 ff ff       	call   40c838 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIjEEDaS5_>
  40d0e9:	e9 9f 01 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  40d0ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d0f2:	48 89 c7             	mov    %rax,%rdi
  40d0f5:	e8 87 07 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d0fa:	48 89 c2             	mov    %rax,%rdx
  40d0fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d101:	48 89 c6             	mov    %rax,%rsi
  40d104:	48 89 d7             	mov    %rdx,%rdi
  40d107:	e8 c8 f7 ff ff       	call   40c8d4 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIxEEDaS5_>
  40d10c:	e9 7c 01 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  40d111:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d115:	48 89 c7             	mov    %rax,%rdi
  40d118:	e8 64 07 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d11d:	48 89 c2             	mov    %rax,%rdx
  40d120:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d124:	48 89 c6             	mov    %rax,%rsi
  40d127:	48 89 d7             	mov    %rdx,%rdi
  40d12a:	e8 43 f8 ff ff       	call   40c972 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIyEEDaS5_>
  40d12f:	e9 59 01 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  40d134:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d138:	48 89 c7             	mov    %rax,%rdi
  40d13b:	e8 41 07 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d140:	48 89 c2             	mov    %rax,%rdx
  40d143:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d147:	48 89 c6             	mov    %rax,%rsi
  40d14a:	48 89 d7             	mov    %rdx,%rdi
  40d14d:	e8 be f8 ff ff       	call   40ca10 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIfEEDaS5_>
  40d152:	e9 36 01 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  40d157:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d15b:	48 89 c7             	mov    %rax,%rdi
  40d15e:	e8 1e 07 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d163:	48 89 c2             	mov    %rax,%rdx
  40d166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d16a:	48 89 c6             	mov    %rax,%rsi
  40d16d:	48 89 d7             	mov    %rdx,%rdi
  40d170:	e8 3d f9 ff ff       	call   40cab2 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIdEEDaS5_>
  40d175:	e9 13 01 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  40d17a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d17e:	48 89 c7             	mov    %rax,%rdi
  40d181:	e8 fb 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d186:	48 89 c2             	mov    %rax,%rdx
  40d189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d18d:	48 89 c6             	mov    %rax,%rsi
  40d190:	48 89 d7             	mov    %rdx,%rdi
  40d193:	e8 be f9 ff ff       	call   40cb56 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIeEEDaS5_>
  40d198:	e9 f0 00 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  40d19d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d1a1:	48 89 c7             	mov    %rax,%rdi
  40d1a4:	e8 d8 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d1a9:	48 89 c2             	mov    %rax,%rdx
  40d1ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d1b0:	48 89 c6             	mov    %rax,%rsi
  40d1b3:	48 89 d7             	mov    %rdx,%rdi
  40d1b6:	e8 45 fa ff ff       	call   40cc00 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKcEEDaS5_>
  40d1bb:	e9 cd 00 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  40d1c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d1c4:	48 89 c7             	mov    %rax,%rdi
  40d1c7:	e8 b5 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d1cc:	48 89 c2             	mov    %rax,%rdx
  40d1cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d1d3:	48 89 c6             	mov    %rax,%rsi
  40d1d6:	48 89 d7             	mov    %rdx,%rdi
  40d1d9:	e8 c0 fa ff ff       	call   40cc9e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt17basic_string_viewIcSt11char_traitsIcEEEEDaS5_>
  40d1de:	e9 aa 00 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  40d1e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d1e7:	48 89 c7             	mov    %rax,%rdi
  40d1ea:	e8 92 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d1ef:	48 89 c2             	mov    %rax,%rdx
  40d1f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d1f6:	48 89 c6             	mov    %rax,%rsi
  40d1f9:	48 89 d7             	mov    %rdx,%rdi
  40d1fc:	e8 3d fb ff ff       	call   40cd3e <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKvEEDaS5_>
  40d201:	e9 87 00 00 00       	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  40d206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d20a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  40d20e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d212:	48 89 c7             	mov    %rax,%rdi
  40d215:	e8 67 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d21a:	48 89 c2             	mov    %rax,%rdx
  40d21d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d221:	48 89 c6             	mov    %rax,%rsi
  40d224:	48 89 d7             	mov    %rdx,%rdi
  40d227:	e8 a8 fb ff ff       	call   40cdd4 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clINSt16basic_format_argISt20basic_format_contextIS2_cEE6handleEEEDaS5_>
  40d22c:	eb 5f                	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  40d22e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d232:	48 89 c7             	mov    %rax,%rdi
  40d235:	e8 47 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d23a:	48 89 c2             	mov    %rax,%rdx
  40d23d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d241:	48 89 c6             	mov    %rax,%rsi
  40d244:	48 89 d7             	mov    %rdx,%rdi
  40d247:	e8 ea fb ff ff       	call   40ce36 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clInEEDaS5_>
  40d24c:	eb 3f                	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  40d24e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d252:	48 89 c7             	mov    %rax,%rdi
  40d255:	e8 27 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d25a:	48 89 c2             	mov    %rax,%rdx
  40d25d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d261:	48 89 c6             	mov    %rax,%rsi
  40d264:	48 89 d7             	mov    %rdx,%rdi
  40d267:	e8 6c fc ff ff       	call   40ced8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIoEEDaS5_>
  40d26c:	eb 1f                	jmp    40d28d <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  40d26e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d272:	48 89 c7             	mov    %rax,%rdi
  40d275:	e8 07 06 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d27a:	48 89 c2             	mov    %rax,%rdx
  40d27d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d281:	48 89 c6             	mov    %rax,%rsi
  40d284:	48 89 d7             	mov    %rdx,%rdi
  40d287:	e8 ee fc ff ff       	call   40cf7a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIDF128_EEDaS5_>
  40d28c:	90                   	nop
	}
  40d28d:	c9                   	leave
  40d28e:	c3                   	ret

000000000040d28f <_ZSt16visit_format_argIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_St20basic_format_contextIS3_cEEDcOS5_St16basic_format_argIT0_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  40d28f:	55                   	push   %rbp
  40d290:	48 89 e5             	mov    %rsp,%rbp
  40d293:	53                   	push   %rbx
  40d294:	48 83 ec 18          	sub    $0x18,%rsp
  40d298:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  40d29c:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  40d2a0:	0f b6 d8             	movzbl %al,%ebx
  40d2a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d2a7:	48 89 c7             	mov    %rax,%rdi
  40d2aa:	e8 d2 05 00 00       	call   40d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40d2af:	89 da                	mov    %ebx,%edx
  40d2b1:	48 89 c6             	mov    %rax,%rsi
  40d2b4:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  40d2b8:	e8 5d fd ff ff       	call   40d01a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE>
  40d2bd:	90                   	nop
    }
  40d2be:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d2c2:	c9                   	leave
  40d2c3:	c3                   	ret

000000000040d2c4 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm>:
      _M_format_arg(size_t __id) override
  40d2c4:	55                   	push   %rbp
  40d2c5:	48 89 e5             	mov    %rsp,%rbp
  40d2c8:	48 83 ec 40          	sub    $0x40,%rsp
  40d2cc:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d2d0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	}, _M_fc.arg(__id));
  40d2d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d2d8:	48 8b 48 30          	mov    0x30(%rax),%rcx
	std::visit_format_arg([this](auto& __arg) {
  40d2dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d2e0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40d2e4:	48 89 ce             	mov    %rcx,%rsi
  40d2e7:	48 89 c7             	mov    %rax,%rdi
  40d2ea:	e8 b3 04 00 00       	call   40d7a2 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  40d2ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d2f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d2f7:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  40d2fb:	48 83 ec 20          	sub    $0x20,%rsp
  40d2ff:	48 89 e1             	mov    %rsp,%rcx
  40d302:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d306:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d30a:	48 89 01             	mov    %rax,(%rcx)
  40d30d:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40d311:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d315:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d319:	48 89 41 10          	mov    %rax,0x10(%rcx)
  40d31d:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  40d321:	48 89 f7             	mov    %rsi,%rdi
  40d324:	e8 66 ff ff ff       	call   40d28f <_ZSt16visit_format_argIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_St20basic_format_contextIS3_cEEDcOS5_St16basic_format_argIT0_E>
  40d329:	48 83 c4 20          	add    $0x20,%rsp
      }
  40d32d:	90                   	nop
  40d32e:	c9                   	leave
  40d32f:	c3                   	ret

000000000040d330 <_ZNKSt6ranges8__access6_BeginclIRSt4spanIcLm18446744073709551615EEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40d330:	55                   	push   %rbp
  40d331:	48 89 e5             	mov    %rsp,%rbp
  40d334:	48 83 ec 10          	sub    $0x10,%rsp
  40d338:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d33c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  40d340:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d344:	48 89 c7             	mov    %rax,%rdi
  40d347:	e8 c8 d6 ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
	}
  40d34c:	c9                   	leave
  40d34d:	c3                   	ret

000000000040d34e <_ZNKSt6ranges8__access4_EndclIRSt4spanIcLm18446744073709551615EEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40d34e:	55                   	push   %rbp
  40d34f:	48 89 e5             	mov    %rsp,%rbp
  40d352:	48 83 ec 10          	sub    $0x10,%rsp
  40d356:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d35a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  40d35e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d362:	48 89 c7             	mov    %rax,%rdi
  40d365:	e8 fe 0a 00 00       	call   40de68 <_ZNKSt4spanIcLm18446744073709551615EE3endEv>
	}
  40d36a:	c9                   	leave
  40d36b:	c3                   	ret

000000000040d36c <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv>:
      _M_overflow() override
  40d36c:	55                   	push   %rbp
  40d36d:	48 89 e5             	mov    %rsp,%rbp
  40d370:	53                   	push   %rbx
  40d371:	48 83 ec 78          	sub    $0x78,%rsp
  40d375:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
	auto __s = this->_M_used();
  40d379:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d37d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40d381:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d385:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d389:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d38d:	48 83 c0 08          	add    $0x8,%rax
  40d391:	48 89 c7             	mov    %rax,%rdi
  40d394:	e8 7b d6 ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40d399:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40d39d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d3a1:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40d3a5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d3a9:	48 89 c6             	mov    %rax,%rsi
  40d3ac:	48 89 d7             	mov    %rdx,%rdi
  40d3af:	e8 85 d6 ff ff       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40d3b4:	48 89 c6             	mov    %rax,%rsi
  40d3b7:	48 89 df             	mov    %rbx,%rdi
  40d3ba:	e8 b9 d6 ff ff       	call   40aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40d3bf:	90                   	nop
	auto __s = this->_M_used();
  40d3c0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40d3c4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	if (_M_max < 0) // No maximum.
  40d3c8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d3cc:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40d3d3:	48 85 c0             	test   %rax,%rax
  40d3d6:	79 42                	jns    40d41a <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0xae>
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
  40d3d8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d3dc:	48 05 20 01 00 00    	add    $0x120,%rax
  40d3e2:	48 89 c7             	mov    %rax,%rdi
  40d3e5:	e8 81 b9 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40d3ea:	48 8b 10             	mov    (%rax),%rdx
  40d3ed:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40d3f1:	48 89 c6             	mov    %rax,%rsi
  40d3f4:	bf 30 a5 41 00       	mov    $0x41a530,%edi
  40d3f9:	e8 ae 0a 00 00       	call   40deac <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>
  40d3fe:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40d402:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40d406:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d40a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d40e:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
  40d415:	e9 d0 00 00 00       	jmp    40d4ea <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x17e>
	else if (_M_count < static_cast<size_t>(_M_max))
  40d41a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d41e:	48 8b 90 30 01 00 00 	mov    0x130(%rax),%rdx
  40d425:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d429:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40d430:	48 39 c2             	cmp    %rax,%rdx
  40d433:	0f 83 b1 00 00 00    	jae    40d4ea <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x17e>
	    auto __max = _M_max - _M_count;
  40d439:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d43d:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40d444:	48 89 c2             	mov    %rax,%rdx
  40d447:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d44b:	48 8b 80 30 01 00 00 	mov    0x130(%rax),%rax
  40d452:	48 29 c2             	sub    %rax,%rdx
  40d455:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    span<_CharT> __first;
  40d459:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  40d460:	00
  40d461:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  40d468:	00
	    if (__max < __s.size())
  40d469:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40d46d:	48 89 c7             	mov    %rax,%rdi
  40d470:	e8 4f 7f ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d475:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40d479:	0f 92 c0             	setb   %al
  40d47c:	84 c0                	test   %al,%al
  40d47e:	74 1d                	je     40d49d <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x131>
	      __first = __s.first(static_cast<size_t>(__max));
  40d480:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d484:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40d488:	48 89 d6             	mov    %rdx,%rsi
  40d48b:	48 89 c7             	mov    %rax,%rdi
  40d48e:	e8 e5 d5 ff ff       	call   40aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40d493:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40d497:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40d49b:	eb 10                	jmp    40d4ad <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x141>
	      __first = __s;
  40d49d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40d4a1:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40d4a5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40d4a9:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
  40d4ad:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d4b1:	48 05 20 01 00 00    	add    $0x120,%rax
  40d4b7:	48 89 c7             	mov    %rax,%rdi
  40d4ba:	e8 ac b8 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40d4bf:	48 8b 10             	mov    (%rax),%rdx
  40d4c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40d4c6:	48 89 c6             	mov    %rax,%rsi
  40d4c9:	bf 30 a5 41 00       	mov    $0x41a530,%edi
  40d4ce:	e8 d9 09 00 00       	call   40deac <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>
  40d4d3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d4d7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40d4db:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d4df:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d4e3:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	this->_M_rewind();
  40d4ea:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d4ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      { _M_next = _M_span.begin(); }
  40d4f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d4f6:	48 83 c0 08          	add    $0x8,%rax
  40d4fa:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40d4fe:	48 89 c7             	mov    %rax,%rdi
  40d501:	e8 0e d5 ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40d506:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40d50a:	90                   	nop
	_M_count += __s.size();
  40d50b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40d50f:	48 89 c7             	mov    %rax,%rdi
  40d512:	e8 ad 7e ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d517:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40d51b:	48 8b 92 30 01 00 00 	mov    0x130(%rdx),%rdx
  40d522:	48 01 c2             	add    %rax,%rdx
  40d525:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d529:	48 89 90 30 01 00 00 	mov    %rdx,0x130(%rax)
      }
  40d530:	90                   	nop
  40d531:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d535:	c9                   	leave
  40d536:	c3                   	ret
  40d537:	90                   	nop

000000000040d538 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm>:
      _M_reserve(size_t __n) override
  40d538:	55                   	push   %rbp
  40d539:	48 89 e5             	mov    %rsp,%rbp
  40d53c:	53                   	push   %rbx
  40d53d:	48 83 ec 78          	sub    $0x78,%rsp
  40d541:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40d545:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	    if (this->_M_used().size()) [[unlikely]]
  40d549:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d54d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40d551:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d555:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d559:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d55d:	48 83 c0 08          	add    $0x8,%rax
  40d561:	48 89 c7             	mov    %rax,%rdi
  40d564:	e8 ab d4 ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40d569:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d56d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d571:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40d575:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  40d579:	48 89 c6             	mov    %rax,%rsi
  40d57c:	48 89 d7             	mov    %rdx,%rdi
  40d57f:	e8 b5 d4 ff ff       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40d584:	48 89 c6             	mov    %rax,%rsi
  40d587:	48 89 df             	mov    %rbx,%rdi
  40d58a:	e8 e9 d4 ff ff       	call   40aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40d58f:	90                   	nop
	    if (this->_M_used().size()) [[unlikely]]
  40d590:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40d594:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40d598:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40d59c:	48 89 c7             	mov    %rax,%rdi
  40d59f:	e8 20 7e ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d5a4:	48 85 c0             	test   %rax,%rax
  40d5a7:	0f 95 c0             	setne  %al
  40d5aa:	84 c0                	test   %al,%al
  40d5ac:	74 0c                	je     40d5ba <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm+0x82>
	      _Seq_sink::_M_overflow();
  40d5ae:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d5b2:	48 89 c7             	mov    %rax,%rdi
  40d5b5:	e8 cc c4 ff ff       	call   409a86 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	    const auto __sz = _M_seq.size();
  40d5ba:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d5be:	48 05 20 01 00 00    	add    $0x120,%rax
  40d5c4:	48 89 c7             	mov    %rax,%rdi
  40d5c7:	e8 54 76 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40d5cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	      _M_seq.__resize_and_overwrite(__sz + __n,
  40d5d0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d5d4:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  40d5db:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40d5df:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40d5e3:	48 01 c8             	add    %rcx,%rax
  40d5e6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40d5ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  template<typename _Operation>
    [[__gnu__::__always_inline__]]
    constexpr void
    basic_string<_CharT, _Traits, _Alloc>::
    __resize_and_overwrite(const size_type __n, _Operation __op)
    { resize_and_overwrite<_Operation&>(__n, __op); }
  40d5ee:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
  40d5f2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40d5f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d5fa:	48 89 ce             	mov    %rcx,%rsi
  40d5fd:	48 89 c7             	mov    %rax,%rdi
  40d600:	e8 69 64 00 00       	call   413a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_>
  40d605:	90                   	nop
	    this->_M_reset(_M_seq, __sz);
  40d606:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
  40d60a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40d60e:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  40d615:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40d619:	48 89 d6             	mov    %rdx,%rsi
  40d61c:	48 89 c7             	mov    %rax,%rdi
  40d61f:	e8 58 c5 ff ff       	call   409b7c <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>
  40d624:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40d628:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d62c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d630:	48 89 d6             	mov    %rdx,%rsi
  40d633:	48 89 c2             	mov    %rax,%rdx
  40d636:	48 89 df             	mov    %rbx,%rdi
  40d639:	e8 da 08 00 00       	call   40df18 <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>
	    return { this };
  40d63e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
      }
  40d642:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d646:	c9                   	leave
  40d647:	c3                   	ret

000000000040d648 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm>:
      _M_bump(size_t __n) override
  40d648:	55                   	push   %rbp
  40d649:	48 89 e5             	mov    %rsp,%rbp
  40d64c:	53                   	push   %rbx
  40d64d:	48 83 ec 48          	sub    $0x48,%rsp
  40d651:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40d655:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	    auto __s = this->_M_used();
  40d659:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d65d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40d661:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d665:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d669:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d66d:	48 83 c0 08          	add    $0x8,%rax
  40d671:	48 89 c7             	mov    %rax,%rdi
  40d674:	e8 9b d3 ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40d679:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d67d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d681:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40d685:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40d689:	48 89 c6             	mov    %rax,%rsi
  40d68c:	48 89 d7             	mov    %rdx,%rdi
  40d68f:	e8 a5 d3 ff ff       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40d694:	48 89 c6             	mov    %rax,%rsi
  40d697:	48 89 df             	mov    %rbx,%rdi
  40d69a:	e8 d9 d3 ff ff       	call   40aa78 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40d69f:	90                   	nop
	    auto __s = this->_M_used();
  40d6a0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d6a4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	    _M_seq.resize(__s.size() + __n);
  40d6a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d6ac:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  40d6b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40d6b7:	48 89 c7             	mov    %rax,%rdi
  40d6ba:	e8 05 7d ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d6bf:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40d6c3:	48 01 d0             	add    %rdx,%rax
  40d6c6:	48 89 c6             	mov    %rax,%rsi
  40d6c9:	48 89 df             	mov    %rbx,%rdi
  40d6cc:	e8 bd 08 00 00       	call   40df8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm>
	    this->_M_reset(this->_M_buf);
  40d6d1:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  40d6d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d6d9:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40d6dd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d6e1:	48 89 d6             	mov    %rdx,%rsi
  40d6e4:	48 89 c7             	mov    %rax,%rdi
  40d6e7:	e8 d6 cf ff ff       	call   40a6c2 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  40d6ec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d6f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d6f4:	b9 00 00 00 00       	mov    $0x0,%ecx
  40d6f9:	48 89 d6             	mov    %rdx,%rsi
  40d6fc:	48 89 c2             	mov    %rax,%rdx
  40d6ff:	48 89 df             	mov    %rbx,%rdi
  40d702:	e8 11 08 00 00       	call   40df18 <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>
      }
  40d707:	90                   	nop
  40d708:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d70c:	c9                   	leave
  40d70d:	c3                   	ret

000000000040d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>:
    __write(_Out __out, basic_string_view<_CharT> __str)
  40d70e:	55                   	push   %rbp
  40d70f:	48 89 e5             	mov    %rsp,%rbp
  40d712:	48 83 ec 30          	sub    $0x30,%rsp
  40d716:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d71a:	48 89 f0             	mov    %rsi,%rax
  40d71d:	48 89 d1             	mov    %rdx,%rcx
  40d720:	48 89 c0             	mov    %rax,%rax
  40d723:	ba 00 00 00 00       	mov    $0x0,%edx
  40d728:	48 89 ca             	mov    %rcx,%rdx
  40d72b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40d72f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  if (__str.size())
  40d733:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d737:	48 89 c7             	mov    %rax,%rdi
  40d73a:	e8 bb 81 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40d73f:	48 85 c0             	test   %rax,%rax
  40d742:	0f 95 c0             	setne  %al
  40d745:	84 c0                	test   %al,%al
  40d747:	74 28                	je     40d771 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE+0x63>
  40d749:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d74d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d751:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d755:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	_M_sink->_M_write(__s);
  40d759:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d75d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40d761:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40d765:	48 89 ce             	mov    %rcx,%rsi
  40d768:	48 89 c7             	mov    %rax,%rdi
  40d76b:	e8 3c 68 00 00       	call   413fac <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE>
	return *this;
  40d770:	90                   	nop
      return __out;
  40d771:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  40d775:	c9                   	leave
  40d776:	c3                   	ret
  40d777:	90                   	nop

000000000040d778 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>:
      void advance_to(iterator __it) { _M_out = std::move(__it); }
  40d778:	55                   	push   %rbp
  40d779:	48 89 e5             	mov    %rsp,%rbp
  40d77c:	48 83 ec 10          	sub    $0x10,%rsp
  40d780:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d784:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d788:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40d78c:	48 89 c7             	mov    %rax,%rdi
  40d78f:	e8 d7 b5 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40d794:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40d798:	48 8b 00             	mov    (%rax),%rax
  40d79b:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40d79f:	90                   	nop
  40d7a0:	c9                   	leave
  40d7a1:	c3                   	ret

000000000040d7a2 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>:
      arg(size_t __id) const noexcept
  40d7a2:	55                   	push   %rbp
  40d7a3:	48 89 e5             	mov    %rsp,%rbp
  40d7a6:	48 83 ec 40          	sub    $0x40,%rsp
  40d7aa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d7ae:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d7b2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      { return _M_args.get(__id); }
  40d7b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d7ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d7be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d7c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40d7c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d7ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Arg_value() : _M_none() { }
  40d7ce:	90                   	nop
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40d7cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d7d3:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  40d7d7:	90                   	nop
	if (__i < _M_packed_size)
  40d7d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d7dc:	0f b6 00             	movzbl (%rax),%eax
  40d7df:	83 e0 0f             	and    $0xf,%eax
  40d7e2:	0f b6 c0             	movzbl %al,%eax
  40d7e5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40d7e9:	73 41                	jae    40d82c <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0x8a>
	    __arg._M_type = _M_type(__i);
  40d7eb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d7ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d7f3:	48 89 d6             	mov    %rdx,%rsi
  40d7f6:	48 89 c7             	mov    %rax,%rdi
  40d7f9:	e8 68 dd ff ff       	call   40b566 <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>
  40d7fe:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d802:	88 42 10             	mov    %al,0x10(%rdx)
	    __arg._M_val = _M_values[__i];
  40d805:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d809:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d80d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d811:	48 c1 e2 04          	shl    $0x4,%rdx
  40d815:	48 01 d0             	add    %rdx,%rax
  40d818:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40d81c:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40d820:	48 8b 00             	mov    (%rax),%rax
  40d823:	48 89 01             	mov    %rax,(%rcx)
  40d826:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	return __arg;
  40d82a:	eb 4d                	jmp    40d879 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
  40d82c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d830:	0f b6 00             	movzbl (%rax),%eax
  40d833:	83 e0 0f             	and    $0xf,%eax
  40d836:	84 c0                	test   %al,%al
  40d838:	75 3f                	jne    40d879 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
  40d83a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d83e:	48 8b 00             	mov    (%rax),%rax
  40d841:	48 c1 e8 04          	shr    $0x4,%rax
  40d845:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40d849:	73 2e                	jae    40d879 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
	  __arg = _M_args[__i];
  40d84b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d84f:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d853:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d857:	48 c1 e2 05          	shl    $0x5,%rdx
  40d85b:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
  40d85f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40d863:	48 8b 06             	mov    (%rsi),%rax
  40d866:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  40d86a:	48 89 01             	mov    %rax,(%rcx)
  40d86d:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40d871:	0f b6 46 10          	movzbl 0x10(%rsi),%eax
  40d875:	88 41 10             	mov    %al,0x10(%rcx)
	return __arg;
  40d878:	90                   	nop
  40d879:	90                   	nop
      { return _M_args.get(__id); }
  40d87a:	90                   	nop
  40d87b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d87f:	c9                   	leave
  40d880:	c3                   	ret

000000000040d881 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40d881:	55                   	push   %rbp
  40d882:	48 89 e5             	mov    %rsp,%rbp
  40d885:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40d889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d88d:	5d                   	pop    %rbp
  40d88e:	c3                   	ret
  40d88f:	90                   	nop

000000000040d890 <_ZNKSt9formatterIbcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40d890:	55                   	push   %rbp
  40d891:	48 89 e5             	mov    %rsp,%rbp
  40d894:	48 83 ec 20          	sub    $0x20,%rsp
  40d898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d89c:	89 f0                	mov    %esi,%eax
  40d89e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40d8a2:	88 45 f4             	mov    %al,-0xc(%rbp)
	{ return _M_f.format(__u, __fc); }
  40d8a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d8a9:	0f b6 4d f4          	movzbl -0xc(%rbp),%ecx
  40d8ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d8b1:	89 ce                	mov    %ecx,%esi
  40d8b3:	48 89 c7             	mov    %rax,%rdi
  40d8b6:	e8 95 07 00 00       	call   40e050 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>
  40d8bb:	c9                   	leave
  40d8bc:	c3                   	ret
  40d8bd:	90                   	nop

000000000040d8be <_ZNSt9formatterIccE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  40d8be:	55                   	push   %rbp
  40d8bf:	48 89 e5             	mov    %rsp,%rbp
  40d8c2:	48 83 ec 10          	sub    $0x10,%rsp
  40d8c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d8ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_f.template _M_parse<_CharT>(__pc);
  40d8ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d8d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d8d6:	48 89 d6             	mov    %rdx,%rsi
  40d8d9:	48 89 c7             	mov    %rax,%rdi
  40d8dc:	e8 47 09 00 00       	call   40e228 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE>
      }
  40d8e1:	c9                   	leave
  40d8e2:	c3                   	ret
  40d8e3:	90                   	nop

000000000040d8e4 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>:
	format(_CharT __u, basic_format_context<_Out, _CharT>& __fc) const
  40d8e4:	55                   	push   %rbp
  40d8e5:	48 89 e5             	mov    %rsp,%rbp
  40d8e8:	48 83 ec 20          	sub    $0x20,%rsp
  40d8ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d8f0:	89 f0                	mov    %esi,%eax
  40d8f2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40d8f6:	88 45 f4             	mov    %al,-0xc(%rbp)
	  if (_M_f._M_spec._M_type == __format::_Pres_none
  40d8f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d8fd:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40d901:	83 e0 78             	and    $0x78,%eax
  40d904:	84 c0                	test   %al,%al
  40d906:	74 0f                	je     40d917 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x33>
	      || _M_f._M_spec._M_type == __format::_Pres_c)
  40d908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d90c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40d910:	83 e0 78             	and    $0x78,%eax
  40d913:	3c 38                	cmp    $0x38,%al
  40d915:	75 18                	jne    40d92f <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x4b>
	    return _M_f._M_format_character(__u, __fc);
  40d917:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d91b:	0f be 4d f4          	movsbl -0xc(%rbp),%ecx
  40d91f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d923:	89 ce                	mov    %ecx,%esi
  40d925:	48 89 c7             	mov    %rax,%rdi
  40d928:	e8 7f 09 00 00       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40d92d:	eb 37                	jmp    40d966 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x82>
	  else if (_M_f._M_spec._M_type == __format::_Pres_esc)
  40d92f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d933:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40d937:	83 e0 78             	and    $0x78,%eax
  40d93a:	3c 78                	cmp    $0x78,%al
  40d93c:	75 0e                	jne    40d94c <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x68>
	      return __fc.out();
  40d93e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d942:	48 89 c7             	mov    %rax,%rdi
  40d945:	e8 a8 d0 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40d94a:	eb 1a                	jmp    40d966 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x82>
	    return _M_f.format(static_cast<make_unsigned_t<_CharT>>(__u), __fc);
  40d94c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d950:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  40d954:	0f b6 ca             	movzbl %dl,%ecx
  40d957:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d95b:	89 ce                	mov    %ecx,%esi
  40d95d:	48 89 c7             	mov    %rax,%rdi
  40d960:	e8 a7 09 00 00       	call   40e30c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40d965:	90                   	nop
	}
  40d966:	c9                   	leave
  40d967:	c3                   	ret

000000000040d968 <_ZNKSt9formatterIicE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEiRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40d968:	55                   	push   %rbp
  40d969:	48 89 e5             	mov    %rsp,%rbp
  40d96c:	48 83 ec 20          	sub    $0x20,%rsp
  40d970:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d974:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40d977:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40d97b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d97f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d983:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  40d986:	89 ce                	mov    %ecx,%esi
  40d988:	48 89 c7             	mov    %rax,%rdi
  40d98b:	e8 6c 0d 00 00       	call   40e6fc <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40d990:	c9                   	leave
  40d991:	c3                   	ret

000000000040d992 <_ZNKSt9formatterIjcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEjRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40d992:	55                   	push   %rbp
  40d993:	48 89 e5             	mov    %rsp,%rbp
  40d996:	48 83 ec 20          	sub    $0x20,%rsp
  40d99a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d99e:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40d9a1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40d9a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d9a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d9ad:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  40d9b0:	89 ce                	mov    %ecx,%esi
  40d9b2:	48 89 c7             	mov    %rax,%rdi
  40d9b5:	e8 3c 11 00 00       	call   40eaf6 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40d9ba:	c9                   	leave
  40d9bb:	c3                   	ret

000000000040d9bc <_ZNKSt9formatterIxcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorExRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40d9bc:	55                   	push   %rbp
  40d9bd:	48 89 e5             	mov    %rsp,%rbp
  40d9c0:	48 83 ec 20          	sub    $0x20,%rsp
  40d9c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d9c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d9cc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40d9d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d9d4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d9d8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40d9dc:	48 89 ce             	mov    %rcx,%rsi
  40d9df:	48 89 c7             	mov    %rax,%rdi
  40d9e2:	e8 f3 14 00 00       	call   40eeda <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40d9e7:	c9                   	leave
  40d9e8:	c3                   	ret
  40d9e9:	90                   	nop

000000000040d9ea <_ZNKSt9formatterIycE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEyRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40d9ea:	55                   	push   %rbp
  40d9eb:	48 89 e5             	mov    %rsp,%rbp
  40d9ee:	48 83 ec 20          	sub    $0x20,%rsp
  40d9f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d9f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d9fa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40d9fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40da02:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40da06:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40da0a:	48 89 ce             	mov    %rcx,%rsi
  40da0d:	48 89 c7             	mov    %rax,%rdi
  40da10:	e8 d3 18 00 00       	call   40f2e8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40da15:	c9                   	leave
  40da16:	c3                   	ret
  40da17:	90                   	nop

000000000040da18 <_ZNKSt9formatterIfcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEfRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40da18:	55                   	push   %rbp
  40da19:	48 89 e5             	mov    %rsp,%rbp
  40da1c:	48 83 ec 20          	sub    $0x20,%rsp
  40da20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40da24:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  40da29:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40da2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40da31:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40da35:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40da38:	48 89 ce             	mov    %rcx,%rsi
  40da3b:	66 0f 6e c2          	movd   %edx,%xmm0
  40da3f:	48 89 c7             	mov    %rax,%rdi
  40da42:	e8 37 21 00 00       	call   40fb7e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40da47:	c9                   	leave
  40da48:	c3                   	ret
  40da49:	90                   	nop

000000000040da4a <_ZNKSt9formatterIdcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEdRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40da4a:	55                   	push   %rbp
  40da4b:	48 89 e5             	mov    %rsp,%rbp
  40da4e:	48 83 ec 20          	sub    $0x20,%rsp
  40da52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40da56:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  40da5b:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40da5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40da63:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40da67:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40da6b:	48 89 ce             	mov    %rcx,%rsi
  40da6e:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  40da73:	48 89 c7             	mov    %rax,%rdi
  40da76:	e8 2b 2e 00 00       	call   4108a6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40da7b:	c9                   	leave
  40da7c:	c3                   	ret
  40da7d:	90                   	nop

000000000040da7e <_ZNKSt9formatterIecE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEeRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40da7e:	55                   	push   %rbp
  40da7f:	48 89 e5             	mov    %rsp,%rbp
  40da82:	48 83 ec 10          	sub    $0x10,%rsp
  40da86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40da8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40da8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40da92:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40da96:	ff 75 18             	push   0x18(%rbp)
  40da99:	ff 75 10             	push   0x10(%rbp)
  40da9c:	48 89 d6             	mov    %rdx,%rsi
  40da9f:	48 89 c7             	mov    %rax,%rdi
  40daa2:	e8 45 3b 00 00       	call   4115ec <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40daa7:	48 83 c4 10          	add    $0x10,%rsp
  40daab:	c9                   	leave
  40daac:	c3                   	ret
  40daad:	90                   	nop

000000000040daae <_ZNKSt9formatterIPKccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>:
	format(const _CharT* __u,
  40daae:	55                   	push   %rbp
  40daaf:	48 89 e5             	mov    %rsp,%rbp
  40dab2:	53                   	push   %rbx
  40dab3:	48 83 ec 38          	sub    $0x38,%rsp
  40dab7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40dabb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40dabf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	{ return _M_f.format(__u, __fc); }
  40dac3:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40dac7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40dacb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40dacf:	48 89 d6             	mov    %rdx,%rsi
  40dad2:	48 89 c7             	mov    %rax,%rdi
  40dad5:	e8 8a 7c ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40dada:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40dade:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40dae2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40dae6:	48 89 d6             	mov    %rdx,%rsi
  40dae9:	48 89 c2             	mov    %rax,%rdx
  40daec:	48 89 df             	mov    %rbx,%rdi
  40daef:	e8 bc 46 00 00       	call   4121b0 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>
  40daf4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40daf8:	c9                   	leave
  40daf9:	c3                   	ret

000000000040dafa <_ZNKSt9formatterISt17basic_string_viewIcSt11char_traitsIcEEcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES3_RSB_>:
	format(basic_string_view<char, _Traits> __u,
  40dafa:	55                   	push   %rbp
  40dafb:	48 89 e5             	mov    %rsp,%rbp
  40dafe:	48 83 ec 20          	sub    $0x20,%rsp
  40db02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40db06:	48 89 f0             	mov    %rsi,%rax
  40db09:	48 89 d6             	mov    %rdx,%rsi
  40db0c:	48 89 c0             	mov    %rax,%rax
  40db0f:	ba 00 00 00 00       	mov    $0x0,%edx
  40db14:	48 89 f2             	mov    %rsi,%rdx
  40db17:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40db1b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40db1f:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40db23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db27:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40db2b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40db2f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40db33:	48 89 c7             	mov    %rax,%rdi
  40db36:	e8 75 46 00 00       	call   4121b0 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>
  40db3b:	c9                   	leave
  40db3c:	c3                   	ret
  40db3d:	90                   	nop

000000000040db3e <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  40db3e:	55                   	push   %rbp
  40db3f:	48 89 e5             	mov    %rsp,%rbp
  40db42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  40db46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db4a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40db4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db52:	48 8b 00             	mov    (%rax),%rax
  40db55:	48 8b 0a             	mov    (%rdx),%rcx
  40db58:	48 89 08             	mov    %rcx,(%rax)
  40db5b:	8b 52 08             	mov    0x8(%rdx),%edx
  40db5e:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  40db61:	90                   	nop
  40db62:	5d                   	pop    %rbp
  40db63:	c3                   	ret

000000000040db64 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  40db64:	55                   	push   %rbp
  40db65:	48 89 e5             	mov    %rsp,%rbp
  40db68:	48 83 ec 10          	sub    $0x10,%rsp
  40db6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  40db70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db74:	48 8b 00             	mov    (%rax),%rax
  40db77:	48 8b 10             	mov    (%rax),%rdx
  40db7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db7e:	48 8b 40 08          	mov    0x8(%rax),%rax
  40db82:	48 8b 00             	mov    (%rax),%rax
  40db85:	48 39 c2             	cmp    %rax,%rdx
  40db88:	74 11                	je     40db9b <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  40db8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db8e:	48 8b 00             	mov    (%rax),%rax
  40db91:	48 8b 00             	mov    (%rax),%rax
  40db94:	0f b6 00             	movzbl (%rax),%eax
  40db97:	3c 7d                	cmp    $0x7d,%al
  40db99:	75 17                	jne    40dbb2 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  40db9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40db9f:	48 8b 40 10          	mov    0x10(%rax),%rax
  40dba3:	48 89 c7             	mov    %rax,%rdi
  40dba6:	e8 93 ff ff ff       	call   40db3e <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  40dbab:	b8 01 00 00 00       	mov    $0x1,%eax
  40dbb0:	eb 05                	jmp    40dbb7 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  40dbb2:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  40dbb7:	c9                   	leave
  40dbb8:	c3                   	ret
  40dbb9:	90                   	nop

000000000040dbba <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  40dbba:	55                   	push   %rbp
  40dbbb:	48 89 e5             	mov    %rsp,%rbp
  40dbbe:	48 83 ec 60          	sub    $0x60,%rsp
  40dbc2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40dbc6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	__format::_Spec<_CharT> __spec{};
  40dbca:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  40dbd1:	00
  40dbd2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40dbd9:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	const auto __last = __pc.end();
  40dbe0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40dbe4:	48 89 c7             	mov    %rax,%rdi
  40dbe7:	e8 e6 81 ff ff       	call   405dd2 <_ZNKSt26basic_format_parse_contextIcE3endEv>
  40dbec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  40dbf0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40dbf4:	48 89 c7             	mov    %rax,%rdi
  40dbf7:	e8 a6 81 ff ff       	call   405da2 <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  40dbfc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  40dc00:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40dc04:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40dc08:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40dc0c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  40dc10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40dc14:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40dc18:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40dc1c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40dc20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40dc24:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  40dc28:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40dc2c:	48 89 c7             	mov    %rax,%rdi
  40dc2f:	e8 30 ff ff ff       	call   40db64 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40dc34:	84 c0                	test   %al,%al
  40dc36:	74 09                	je     40dc41 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  40dc38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dc3c:	e9 8c 00 00 00       	jmp    40dccd <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  40dc41:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dc45:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40dc49:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40dc4d:	48 89 ce             	mov    %rcx,%rsi
  40dc50:	48 89 c7             	mov    %rax,%rdi
  40dc53:	e8 da a0 ff ff       	call   407d32 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  40dc58:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40dc5c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40dc60:	48 89 c7             	mov    %rax,%rdi
  40dc63:	e8 fc fe ff ff       	call   40db64 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40dc68:	84 c0                	test   %al,%al
  40dc6a:	74 06                	je     40dc72 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xb8>
	  return __first;
  40dc6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dc70:	eb 5b                	jmp    40dccd <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__first = __spec._M_parse_width(__first, __last, __pc);
  40dc72:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dc76:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40dc7a:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40dc7e:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40dc82:	48 89 c7             	mov    %rax,%rdi
  40dc85:	e8 3a a2 ff ff       	call   407ec4 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  40dc8a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__first != __last)
  40dc8e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40dc92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40dc96:	48 39 c2             	cmp    %rax,%rdx
  40dc99:	74 17                	je     40dcb2 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xf8>
	    if (*__first == 'p')
  40dc9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dc9f:	0f b6 00             	movzbl (%rax),%eax
  40dca2:	3c 70                	cmp    $0x70,%al
  40dca4:	75 0c                	jne    40dcb2 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xf8>
	      ++__first;
  40dca6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dcaa:	48 83 c0 01          	add    $0x1,%rax
  40dcae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40dcb2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40dcb6:	48 89 c7             	mov    %rax,%rdi
  40dcb9:	e8 a6 fe ff ff       	call   40db64 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40dcbe:	84 c0                	test   %al,%al
  40dcc0:	74 06                	je     40dcc8 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x10e>
	  return __first;
  40dcc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dcc6:	eb 05                	jmp    40dccd <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__format::__failed_to_parse_format_spec();
  40dcc8:	e8 e7 73 ff ff       	call   4050b4 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  40dccd:	c9                   	leave
  40dcce:	c3                   	ret
  40dccf:	90                   	nop

000000000040dcd0 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1Ev>:
      basic_string_view() noexcept
  40dcd0:	55                   	push   %rbp
  40dcd1:	48 89 e5             	mov    %rsp,%rbp
  40dcd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_len{0}, _M_str{nullptr}
  40dcd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dcdc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40dce3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dce7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40dcee:	00
      { }
  40dcef:	90                   	nop
  40dcf0:	5d                   	pop    %rbp
  40dcf1:	c3                   	ret

000000000040dcf2 <_ZNKSt9formatterIPKvcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>:
	format(const void* __v, basic_format_context<_Out, _CharT>& __fc) const
  40dcf2:	55                   	push   %rbp
  40dcf3:	48 89 e5             	mov    %rsp,%rbp
  40dcf6:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40dcfa:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40dcfe:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40dd02:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	  auto __u = reinterpret_cast<__UINTPTR_TYPE__>(__v);
  40dd06:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40dd0a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40dd0e:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40dd12:	48 83 c6 12          	add    $0x12,%rsi
	  auto [__ptr, __ec] = std::to_chars(__buf + 2, std::end(__buf),
  40dd16:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40dd1a:	48 83 c0 02          	add    $0x2,%rax
  40dd1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40dd22:	b9 10 00 00 00       	mov    $0x10,%ecx
  40dd27:	48 89 c7             	mov    %rax,%rdi
  40dd2a:	e8 5b 68 ff ff       	call   40458a <_ZSt8to_charsPcS_mi>
  40dd2f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40dd33:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	  int __n = __ptr - __buf;
  40dd37:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40dd3b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40dd3f:	48 29 c2             	sub    %rax,%rdx
  40dd42:	89 55 f4             	mov    %edx,-0xc(%rbp)
	  __buf[0] = '0';
  40dd45:	c6 45 c0 30          	movb   $0x30,-0x40(%rbp)
	  __buf[1] = 'x';
  40dd49:	c6 45 c1 78          	movb   $0x78,-0x3f(%rbp)
	  basic_string_view<_CharT> __str;
  40dd4d:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40dd54:	00
  40dd55:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  40dd5c:	00
	    __str = string_view(__buf, __n);
  40dd5d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40dd60:	48 63 d0             	movslq %eax,%rdx
  40dd63:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  40dd67:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40dd6b:	48 89 ce             	mov    %rcx,%rsi
  40dd6e:	48 89 c7             	mov    %rax,%rdi
  40dd71:	e8 84 8b ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40dd76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dd7a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dd7e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40dd82:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
  40dd86:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40dd8a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40dd8d:	48 63 d0             	movslq %eax,%rdx
  40dd90:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  40dd94:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40dd98:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40dd9c:	41 b9 02 00 00 00    	mov    $0x2,%r9d
  40dda2:	49 89 f8             	mov    %rdi,%r8
  40dda5:	48 89 f7             	mov    %rsi,%rdi
  40dda8:	48 89 c6             	mov    %rax,%rsi
  40ddab:	e8 f0 44 00 00       	call   4122a0 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
	}
  40ddb0:	c9                   	leave
  40ddb1:	c3                   	ret

000000000040ddb2 <_ZNKSt9formatterIncE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEnRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ddb2:	55                   	push   %rbp
  40ddb3:	48 89 e5             	mov    %rsp,%rbp
  40ddb6:	48 83 ec 20          	sub    $0x20,%rsp
  40ddba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ddbe:	48 89 f0             	mov    %rsi,%rax
  40ddc1:	48 89 d6             	mov    %rdx,%rsi
  40ddc4:	48 89 c0             	mov    %rax,%rax
  40ddc7:	ba 00 00 00 00       	mov    $0x0,%edx
  40ddcc:	48 89 f2             	mov    %rsi,%rdx
  40ddcf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ddd3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ddd7:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40dddb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dddf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40dde3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40dde7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ddeb:	48 89 c7             	mov    %rax,%rdi
  40ddee:	e8 b9 45 00 00       	call   4123ac <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ddf3:	c9                   	leave
  40ddf4:	c3                   	ret
  40ddf5:	90                   	nop

000000000040ddf6 <_ZNKSt9formatterIocE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEoRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ddf6:	55                   	push   %rbp
  40ddf7:	48 89 e5             	mov    %rsp,%rbp
  40ddfa:	48 83 ec 20          	sub    $0x20,%rsp
  40ddfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40de02:	48 89 f0             	mov    %rsi,%rax
  40de05:	48 89 d6             	mov    %rdx,%rsi
  40de08:	48 89 c0             	mov    %rax,%rax
  40de0b:	ba 00 00 00 00       	mov    $0x0,%edx
  40de10:	48 89 f2             	mov    %rsi,%rdx
  40de13:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40de17:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40de1b:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40de1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40de23:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40de27:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40de2b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40de2f:	48 89 c7             	mov    %rax,%rdi
  40de32:	e8 f1 49 00 00       	call   412828 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40de37:	c9                   	leave
  40de38:	c3                   	ret
  40de39:	90                   	nop

000000000040de3a <_ZNKSt9formatterIDF128_cE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEDF128_RS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40de3a:	55                   	push   %rbp
  40de3b:	48 89 e5             	mov    %rsp,%rbp
  40de3e:	48 83 ec 20          	sub    $0x20,%rsp
  40de42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40de46:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
  40de4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40de4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40de52:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40de56:	66 0f 6f 45 e0       	movdqa -0x20(%rbp),%xmm0
  40de5b:	48 89 d6             	mov    %rdx,%rsi
  40de5e:	48 89 c7             	mov    %rax,%rdi
  40de61:	e8 12 4f 00 00       	call   412d78 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40de66:	c9                   	leave
  40de67:	c3                   	ret

000000000040de68 <_ZNKSt4spanIcLm18446744073709551615EE3endEv>:
      end() const noexcept
  40de68:	55                   	push   %rbp
  40de69:	48 89 e5             	mov    %rsp,%rbp
  40de6c:	53                   	push   %rbx
  40de6d:	48 83 ec 28          	sub    $0x28,%rsp
  40de71:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return iterator(this->_M_ptr + this->size()); }
  40de75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40de79:	48 8b 18             	mov    (%rax),%rbx
  40de7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40de80:	48 89 c7             	mov    %rax,%rdi
  40de83:	e8 3c 75 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40de88:	48 01 d8             	add    %rbx,%rax
  40de8b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40de8f:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  40de93:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40de97:	48 89 d6             	mov    %rdx,%rsi
  40de9a:	48 89 c7             	mov    %rax,%rdi
  40de9d:	e8 02 d7 ff ff       	call   40b5a4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  40dea2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dea6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40deaa:	c9                   	leave
  40deab:	c3                   	ret

000000000040deac <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>:
      }

    template<input_range _Range, weakly_incrementable _Out>
      requires indirectly_copyable<iterator_t<_Range>, _Out>
      constexpr copy_result<borrowed_iterator_t<_Range>, _Out>
      operator()(_Range&& __r, _Out __result) const
  40deac:	55                   	push   %rbp
  40dead:	48 89 e5             	mov    %rsp,%rbp
  40deb0:	41 54                	push   %r12
  40deb2:	53                   	push   %rbx
  40deb3:	48 83 ec 20          	sub    $0x20,%rsp
  40deb7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40debb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40debf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
		       std::move(__result));
  40dec3:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40dec7:	48 89 c7             	mov    %rax,%rdi
  40deca:	e8 9c ae ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40decf:	48 89 c3             	mov    %rax,%rbx
	return (*this)(ranges::begin(__r), ranges::end(__r),
  40ded2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ded6:	48 89 c6             	mov    %rax,%rsi
  40ded9:	bf 05 a0 41 00       	mov    $0x41a005,%edi
  40dede:	e8 6b f4 ff ff       	call   40d34e <_ZNKSt6ranges8__access4_EndclIRSt4spanIcLm18446744073709551615EEEEDaOT_>
  40dee3:	49 89 c4             	mov    %rax,%r12
  40dee6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40deea:	48 89 c6             	mov    %rax,%rsi
  40deed:	bf 04 a0 41 00       	mov    $0x41a004,%edi
  40def2:	e8 39 f4 ff ff       	call   40d330 <_ZNKSt6ranges8__access6_BeginclIRSt4spanIcLm18446744073709551615EEEEDaOT_>
  40def7:	48 89 c6             	mov    %rax,%rsi
  40defa:	48 8b 13             	mov    (%rbx),%rdx
  40defd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40df01:	48 89 d1             	mov    %rdx,%rcx
  40df04:	4c 89 e2             	mov    %r12,%rdx
  40df07:	48 89 c7             	mov    %rax,%rdi
  40df0a:	e8 bb 5a 00 00       	call   4139ca <_ZNKSt6ranges9__copy_fnclIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES7_NSt8__format10_Sink_iterIcEEEENS_13in_out_resultIT_T1_EESC_T0_SD_>
      }
  40df0f:	48 83 c4 20          	add    $0x20,%rsp
  40df13:	5b                   	pop    %rbx
  40df14:	41 5c                	pop    %r12
  40df16:	5d                   	pop    %rbp
  40df17:	c3                   	ret

000000000040df18 <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>:
      _M_reset(span<_CharT> __s, size_t __pos = 0) noexcept
  40df18:	55                   	push   %rbp
  40df19:	48 89 e5             	mov    %rsp,%rbp
  40df1c:	41 54                	push   %r12
  40df1e:	53                   	push   %rbx
  40df1f:	48 83 ec 30          	sub    $0x30,%rsp
  40df23:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40df27:	48 89 f0             	mov    %rsi,%rax
  40df2a:	48 89 d6             	mov    %rdx,%rsi
  40df2d:	48 89 c0             	mov    %rax,%rax
  40df30:	ba 00 00 00 00       	mov    $0x0,%edx
  40df35:	48 89 f2             	mov    %rsi,%rdx
  40df38:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40df3c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40df40:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	_M_span = __s;
  40df44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40df48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40df4c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40df50:	48 89 41 08          	mov    %rax,0x8(%rcx)
  40df54:	48 89 51 10          	mov    %rdx,0x10(%rcx)
	_M_next = __s.begin() + __pos;
  40df58:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  40df5c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40df60:	48 89 c7             	mov    %rax,%rdi
  40df63:	e8 ac ca ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40df68:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40df6c:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  40df70:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40df74:	48 89 de             	mov    %rbx,%rsi
  40df77:	48 89 c7             	mov    %rax,%rdi
  40df7a:	e8 e3 5b 00 00       	call   413b62 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEplEl>
  40df7f:	49 89 44 24 18       	mov    %rax,0x18(%r12)
      }
  40df84:	90                   	nop
  40df85:	48 83 c4 30          	add    $0x30,%rsp
  40df89:	5b                   	pop    %rbx
  40df8a:	41 5c                	pop    %r12
  40df8c:	5d                   	pop    %rbp
  40df8d:	c3                   	ret

000000000040df8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm>:
      resize(size_type __n)
  40df8e:	55                   	push   %rbp
  40df8f:	48 89 e5             	mov    %rsp,%rbp
  40df92:	48 83 ec 10          	sub    $0x10,%rsp
  40df96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40df9a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { this->resize(__n, _CharT()); }
  40df9e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40dfa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dfa6:	ba 00 00 00 00       	mov    $0x0,%edx
  40dfab:	48 89 ce             	mov    %rcx,%rsi
  40dfae:	48 89 c7             	mov    %rax,%rdi
  40dfb1:	e8 e8 5b 00 00       	call   413b9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc>
  40dfb6:	90                   	nop
  40dfb7:	c9                   	leave
  40dfb8:	c3                   	ret
  40dfb9:	90                   	nop

000000000040dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
  40dfba:	55                   	push   %rbp
  40dfbb:	48 89 e5             	mov    %rsp,%rbp
  40dfbe:	48 83 ec 10          	sub    $0x10,%rsp
  40dfc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->size() == 0; }
  40dfc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dfca:	48 89 c7             	mov    %rax,%rdi
  40dfcd:	e8 4e 6c ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40dfd2:	48 85 c0             	test   %rax,%rax
  40dfd5:	0f 94 c0             	sete   %al
  40dfd8:	c9                   	leave
  40dfd9:	c3                   	ret

000000000040dfda <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40dfda:	55                   	push   %rbp
  40dfdb:	48 89 e5             	mov    %rsp,%rbp
  40dfde:	48 83 ec 20          	sub    $0x20,%rsp
  40dfe2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40dfe6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      auto __end = _M_do_parse(__pc, _AsBool);
  40dfea:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40dfee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40dff2:	ba 00 00 00 00       	mov    $0x0,%edx
  40dff7:	48 89 ce             	mov    %rcx,%rsi
  40dffa:	48 89 c7             	mov    %rax,%rdi
  40dffd:	e8 1c 62 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
  40e002:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      if (_M_spec._M_type == _Pres_s)
  40e006:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e00a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e00e:	83 e0 78             	and    $0x78,%eax
  40e011:	84 c0                	test   %al,%al
  40e013:	75 34                	jne    40e049 <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x6f>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
  40e015:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e019:	0f b6 00             	movzbl (%rax),%eax
  40e01c:	83 e0 0c             	and    $0xc,%eax
  40e01f:	84 c0                	test   %al,%al
  40e021:	75 1c                	jne    40e03f <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x65>
  40e023:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e027:	0f b6 00             	movzbl (%rax),%eax
  40e02a:	83 e0 10             	and    $0x10,%eax
  40e02d:	84 c0                	test   %al,%al
  40e02f:	75 0e                	jne    40e03f <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x65>
  40e031:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e035:	0f b6 00             	movzbl (%rax),%eax
  40e038:	83 e0 40             	and    $0x40,%eax
  40e03b:	84 c0                	test   %al,%al
  40e03d:	74 0a                	je     40e049 <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x6f>
		  __throw_format_error("format error: format-spec contains "
  40e03f:	bf 28 a3 41 00       	mov    $0x41a328,%edi
  40e044:	e8 e0 6f ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	      return __end;
  40e049:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  40e04d:	c9                   	leave
  40e04e:	c3                   	ret
  40e04f:	90                   	nop

000000000040e050 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>:
	format(bool __i, basic_format_context<_Out, _CharT>& __fc) const
  40e050:	55                   	push   %rbp
  40e051:	48 89 e5             	mov    %rsp,%rbp
  40e054:	53                   	push   %rbx
  40e055:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  40e05c:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40e060:	89 f0                	mov    %esi,%eax
  40e062:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40e069:	88 45 84             	mov    %al,-0x7c(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40e06c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e070:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e074:	83 e0 78             	and    $0x78,%eax
  40e077:	3c 38                	cmp    $0x38,%al
  40e079:	75 21                	jne    40e09c <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x4c>
	    return _M_format_character(static_cast<unsigned char>(__i), __fc);
  40e07b:	0f b6 4d 84          	movzbl -0x7c(%rbp),%ecx
  40e07f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40e086:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e08a:	89 ce                	mov    %ecx,%esi
  40e08c:	48 89 c7             	mov    %rax,%rdi
  40e08f:	e8 18 02 00 00       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40e094:	48 89 c3             	mov    %rax,%rbx
  40e097:	e9 55 01 00 00       	jmp    40e1f1 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1a1>
	  if (_M_spec._M_type != _Pres_s)
  40e09c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e0a0:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e0a4:	83 e0 78             	and    $0x78,%eax
  40e0a7:	84 c0                	test   %al,%al
  40e0a9:	74 21                	je     40e0cc <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x7c>
	    return format(static_cast<unsigned char>(__i), __fc);
  40e0ab:	0f b6 4d 84          	movzbl -0x7c(%rbp),%ecx
  40e0af:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40e0b6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e0ba:	89 ce                	mov    %ecx,%esi
  40e0bc:	48 89 c7             	mov    %rax,%rdi
  40e0bf:	e8 48 02 00 00       	call   40e30c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40e0c4:	48 89 c3             	mov    %rax,%rbx
  40e0c7:	e9 25 01 00 00       	jmp    40e1f1 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1a1>
	  basic_string<_CharT> __s;
  40e0cc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e0d0:	48 89 c7             	mov    %rax,%rdi
  40e0d3:	e8 0e 69 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  if (_M_spec._M_localized) [[unlikely]]
  40e0d8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e0dc:	0f b6 00             	movzbl (%rax),%eax
  40e0df:	83 e0 20             	and    $0x20,%eax
  40e0e2:	84 c0                	test   %al,%al
  40e0e4:	0f 84 91 00 00 00    	je     40e17b <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x12b>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
  40e0ea:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40e0ee:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40e0f5:	48 89 d6             	mov    %rdx,%rsi
  40e0f8:	48 89 c7             	mov    %rax,%rdi
  40e0fb:	e8 2e 64 00 00       	call   41452e <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  40e100:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40e104:	48 89 c7             	mov    %rax,%rdi
  40e107:	e8 a4 5f ff ff       	call   4040b0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  40e10c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40e110:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40e114:	48 89 c7             	mov    %rax,%rdi
  40e117:	e8 b4 61 ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
	      __s = __i ? __np.truename() : __np.falsename();
  40e11c:	80 7d 84 00          	cmpb   $0x0,-0x7c(%rbp)
  40e120:	74 15                	je     40e137 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0xe7>
  40e122:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40e126:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40e12a:	48 89 d6             	mov    %rdx,%rsi
  40e12d:	48 89 c7             	mov    %rax,%rdi
  40e130:	e8 bb 60 ff ff       	call   4041f0 <_ZNKSt7__cxx118numpunctIcE8truenameEv@plt>
  40e135:	eb 13                	jmp    40e14a <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0xfa>
  40e137:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40e13b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40e13f:	48 89 d6             	mov    %rdx,%rsi
  40e142:	48 89 c7             	mov    %rax,%rdi
  40e145:	e8 66 60 ff ff       	call   4041b0 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@plt>
  40e14a:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40e14e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e152:	48 89 d6             	mov    %rdx,%rsi
  40e155:	48 89 c7             	mov    %rax,%rdi
  40e158:	e8 17 64 00 00       	call   414574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  40e15d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40e161:	48 89 c7             	mov    %rax,%rdi
  40e164:	e8 19 88 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      __est_width = __s.size(); // TODO Unicode-aware estimate
  40e169:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e16d:	48 89 c7             	mov    %rax,%rdi
  40e170:	e8 ab 6a ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40e175:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40e179:	eb 31                	jmp    40e1ac <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x15c>
		__s = __i ? "true" : "false";
  40e17b:	80 7d 84 00          	cmpb   $0x0,-0x7c(%rbp)
  40e17f:	74 07                	je     40e188 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x138>
  40e181:	ba 21 a2 41 00       	mov    $0x41a221,%edx
  40e186:	eb 05                	jmp    40e18d <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x13d>
  40e188:	ba 1b a2 41 00       	mov    $0x41a21b,%edx
  40e18d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e191:	48 89 d6             	mov    %rdx,%rsi
  40e194:	48 89 c7             	mov    %rax,%rdi
  40e197:	e8 86 66 00 00       	call   414822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	      __est_width = __s.size();
  40e19c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e1a0:	48 89 c7             	mov    %rax,%rdi
  40e1a3:	e8 78 6a ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40e1a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						  _M_spec);
  40e1ac:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
	  return __format::__write_padded_as_spec(__s, __est_width, __fc,
  40e1b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e1b4:	48 89 c7             	mov    %rax,%rdi
  40e1b7:	e8 74 92 ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  40e1bc:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  40e1c3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40e1c7:	48 89 c7             	mov    %rax,%rdi
  40e1ca:	48 89 d0             	mov    %rdx,%rax
  40e1cd:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  40e1d3:	49 89 d8             	mov    %rbx,%r8
  40e1d6:	48 89 f2             	mov    %rsi,%rdx
  40e1d9:	48 89 c6             	mov    %rax,%rsi
  40e1dc:	e8 bf 40 00 00       	call   4122a0 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
  40e1e1:	48 89 c3             	mov    %rax,%rbx
						  _M_spec);
  40e1e4:	90                   	nop
	}
  40e1e5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e1e9:	48 89 c7             	mov    %rax,%rdi
  40e1ec:	e8 91 87 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40e1f1:	48 89 d8             	mov    %rbx,%rax
  40e1f4:	eb 2b                	jmp    40e221 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1d1>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
  40e1f6:	48 89 c3             	mov    %rax,%rbx
  40e1f9:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40e1fd:	48 89 c7             	mov    %rax,%rdi
  40e200:	e8 cb 60 ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
  40e205:	eb 03                	jmp    40e20a <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1ba>
	}
  40e207:	48 89 c3             	mov    %rax,%rbx
  40e20a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e20e:	48 89 c7             	mov    %rax,%rdi
  40e211:	e8 6c 87 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40e216:	48 89 d8             	mov    %rbx,%rax
  40e219:	48 89 c7             	mov    %rax,%rdi
  40e21c:	e8 4f 61 ff ff       	call   404370 <_Unwind_Resume@plt>
  40e221:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e225:	c9                   	leave
  40e226:	c3                   	ret
  40e227:	90                   	nop

000000000040e228 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40e228:	55                   	push   %rbp
  40e229:	48 89 e5             	mov    %rsp,%rbp
  40e22c:	48 83 ec 20          	sub    $0x20,%rsp
  40e230:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40e234:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      auto __end = _M_do_parse(__pc, _AsChar);
  40e238:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40e23c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e240:	ba 07 00 00 00       	mov    $0x7,%edx
  40e245:	48 89 ce             	mov    %rcx,%rsi
  40e248:	48 89 c7             	mov    %rax,%rdi
  40e24b:	e8 ce 5f 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
  40e250:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
  40e254:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e258:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e25c:	83 e0 78             	and    $0x78,%eax
  40e25f:	3c 38                	cmp    $0x38,%al
  40e261:	74 0f                	je     40e272 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x4a>
  40e263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e267:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e26b:	83 e0 78             	and    $0x78,%eax
  40e26e:	3c 78                	cmp    $0x78,%al
  40e270:	75 34                	jne    40e2a6 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x7e>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
  40e272:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e276:	0f b6 00             	movzbl (%rax),%eax
  40e279:	83 e0 0c             	and    $0xc,%eax
  40e27c:	84 c0                	test   %al,%al
  40e27e:	75 1c                	jne    40e29c <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x74>
  40e280:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e284:	0f b6 00             	movzbl (%rax),%eax
  40e287:	83 e0 10             	and    $0x10,%eax
  40e28a:	84 c0                	test   %al,%al
  40e28c:	75 0e                	jne    40e29c <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x74>
  40e28e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e292:	0f b6 00             	movzbl (%rax),%eax
  40e295:	83 e0 40             	and    $0x40,%eax
  40e298:	84 c0                	test   %al,%al
  40e29a:	74 0a                	je     40e2a6 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x7e>
		  __throw_format_error("format error: format-spec contains "
  40e29c:	bf 78 a3 41 00       	mov    $0x41a378,%edi
  40e2a1:	e8 83 6d ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	      return __end;
  40e2a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  40e2aa:	c9                   	leave
  40e2ab:	c3                   	ret

000000000040e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>:
	_M_format_character(_CharT __c,
  40e2ac:	55                   	push   %rbp
  40e2ad:	48 89 e5             	mov    %rsp,%rbp
  40e2b0:	53                   	push   %rbx
  40e2b1:	48 83 ec 38          	sub    $0x38,%rsp
  40e2b5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40e2b9:	89 f0                	mov    %esi,%eax
  40e2bb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40e2bf:	88 45 d4             	mov    %al,-0x2c(%rbp)
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
  40e2c2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40e2c6:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  40e2ca:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40e2ce:	ba 01 00 00 00       	mov    $0x1,%edx
  40e2d3:	48 89 ce             	mov    %rcx,%rsi
  40e2d6:	48 89 c7             	mov    %rax,%rdi
  40e2d9:	e8 1c 86 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40e2de:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40e2e2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40e2e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e2ea:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  40e2f0:	49 89 d8             	mov    %rbx,%r8
  40e2f3:	48 89 d1             	mov    %rdx,%rcx
  40e2f6:	ba 01 00 00 00       	mov    $0x1,%edx
  40e2fb:	48 89 f7             	mov    %rsi,%rdi
  40e2fe:	48 89 c6             	mov    %rax,%rsi
  40e301:	e8 9a 3f 00 00       	call   4122a0 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
	}
  40e306:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e30a:	c9                   	leave
  40e30b:	c3                   	ret

000000000040e30c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40e30c:	55                   	push   %rbp
  40e30d:	48 89 e5             	mov    %rsp,%rbp
  40e310:	53                   	push   %rbx
  40e311:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  40e318:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  40e31f:	89 f0                	mov    %esi,%eax
  40e321:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  40e328:	88 85 44 ff ff ff    	mov    %al,-0xbc(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40e32e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e335:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e339:	83 e0 78             	and    $0x78,%eax
  40e33c:	3c 38                	cmp    $0x38,%al
  40e33e:	75 2e                	jne    40e36e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  40e340:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40e347:	89 c7                	mov    %eax,%edi
  40e349:	e8 f9 64 00 00       	call   414847 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_>
  40e34e:	0f be c8             	movsbl %al,%ecx
  40e351:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  40e358:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e35f:	89 ce                	mov    %ecx,%esi
  40e361:	48 89 c7             	mov    %rax,%rdi
  40e364:	e8 43 ff ff ff       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40e369:	e9 5e 03 00 00       	jmp    40e6cc <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c0>
	  to_chars_result __res{};
  40e36e:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  40e375:	00 00 00 00
  40e379:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
  40e380:	00 00 00 00
	  string_view __base_prefix;
  40e384:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  40e38b:	00 00 00 00
  40e38f:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  40e396:	00 00 00 00
	    __u = __i;
  40e39a:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40e3a1:	88 45 df             	mov    %al,-0x21(%rbp)
	  char* __start = __buf + 3;
  40e3a4:	48 8d 85 75 ff ff ff 	lea    -0x8b(%rbp),%rax
  40e3ab:	48 83 c0 03          	add    $0x3,%rax
  40e3af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40e3b3:	48 8d 85 75 ff ff ff 	lea    -0x8b(%rbp),%rax
  40e3ba:	48 83 c0 0b          	add    $0xb,%rax
  40e3be:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40e3c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e3c6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40e3ca:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e3d1:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e3d5:	c0 e8 03             	shr    $0x3,%al
  40e3d8:	83 e0 0f             	and    $0xf,%eax
  40e3db:	0f b6 c0             	movzbl %al,%eax
  40e3de:	83 f8 06             	cmp    $0x6,%eax
  40e3e1:	0f 8f e3 01 00 00    	jg     40e5ca <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40e3e7:	83 f8 05             	cmp    $0x5,%eax
  40e3ea:	0f 8d 27 01 00 00    	jge    40e517 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x20b>
  40e3f0:	83 f8 04             	cmp    $0x4,%eax
  40e3f3:	0f 84 c2 00 00 00    	je     40e4bb <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1af>
  40e3f9:	83 f8 04             	cmp    $0x4,%eax
  40e3fc:	0f 8f c8 01 00 00    	jg     40e5ca <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40e402:	83 f8 01             	cmp    $0x1,%eax
  40e405:	7f 0d                	jg     40e414 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
  40e407:	85 c0                	test   %eax,%eax
  40e409:	0f 89 80 00 00 00    	jns    40e48f <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x183>
  40e40f:	e9 b6 01 00 00       	jmp    40e5ca <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40e414:	83 e8 02             	sub    $0x2,%eax
  40e417:	83 f8 01             	cmp    $0x1,%eax
  40e41a:	0f 87 aa 01 00 00    	ja     40e5ca <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40e420:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e427:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e42b:	83 e0 78             	and    $0x78,%eax
  40e42e:	3c 10                	cmp    $0x10,%al
  40e430:	75 07                	jne    40e439 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12d>
  40e432:	ba c2 a3 41 00       	mov    $0x41a3c2,%edx
  40e437:	eb 05                	jmp    40e43e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x132>
  40e439:	ba c5 a3 41 00       	mov    $0x41a3c5,%edx
  40e43e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40e442:	48 89 d6             	mov    %rdx,%rsi
  40e445:	48 89 c7             	mov    %rax,%rdi
  40e448:	e8 17 73 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40e44d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40e451:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40e455:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40e45c:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40e463:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40e467:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e46b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e46f:	b9 02 00 00 00       	mov    $0x2,%ecx
  40e474:	48 89 c7             	mov    %rax,%rdi
  40e477:	e8 f2 63 00 00       	call   41486e <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40e47c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40e483:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40e48a:	e9 3c 01 00 00       	jmp    40e5cb <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      __res = to_chars(__start, __end, __u, 10);
  40e48f:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40e493:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e497:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e49b:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40e4a0:	48 89 c7             	mov    %rax,%rdi
  40e4a3:	e8 c6 63 00 00       	call   41486e <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40e4a8:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40e4af:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40e4b6:	e9 10 01 00 00       	jmp    40e5cb <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      if (__i != 0)
  40e4bb:	80 bd 44 ff ff ff 00 	cmpb   $0x0,-0xbc(%rbp)
  40e4c2:	74 27                	je     40e4eb <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1df>
		__base_prefix = "0";
  40e4c4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e4c8:	be c8 a3 41 00       	mov    $0x41a3c8,%esi
  40e4cd:	48 89 c7             	mov    %rax,%rdi
  40e4d0:	e8 8f 72 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40e4d5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40e4d9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40e4dd:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40e4e4:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40e4eb:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40e4ef:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e4f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e4f7:	b9 08 00 00 00       	mov    $0x8,%ecx
  40e4fc:	48 89 c7             	mov    %rax,%rdi
  40e4ff:	e8 6a 63 00 00       	call   41486e <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40e504:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40e50b:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40e512:	e9 b4 00 00 00       	jmp    40e5cb <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40e517:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e51e:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e522:	83 e0 78             	and    $0x78,%eax
  40e525:	3c 28                	cmp    $0x28,%al
  40e527:	75 07                	jne    40e530 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x224>
  40e529:	ba ca a3 41 00       	mov    $0x41a3ca,%edx
  40e52e:	eb 05                	jmp    40e535 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x229>
  40e530:	ba cd a3 41 00       	mov    $0x41a3cd,%edx
  40e535:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e539:	48 89 d6             	mov    %rdx,%rsi
  40e53c:	48 89 c7             	mov    %rax,%rdi
  40e53f:	e8 20 72 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40e544:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40e548:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40e54c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40e553:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40e55a:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40e55e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e562:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e566:	b9 10 00 00 00       	mov    $0x10,%ecx
  40e56b:	48 89 c7             	mov    %rax,%rdi
  40e56e:	e8 fb 62 00 00       	call   41486e <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40e573:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40e57a:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40e581:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e588:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e58c:	83 e0 78             	and    $0x78,%eax
  40e58f:	3c 30                	cmp    $0x30,%al
  40e591:	75 37                	jne    40e5ca <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40e593:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e597:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40e59b:	eb 1e                	jmp    40e5bb <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2af>
		  *__p = __builtin_toupper(*__p);
  40e59d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e5a1:	0f b6 00             	movzbl (%rax),%eax
  40e5a4:	0f be c0             	movsbl %al,%eax
  40e5a7:	89 c7                	mov    %eax,%edi
  40e5a9:	e8 d2 5d ff ff       	call   404380 <toupper@plt>
  40e5ae:	89 c2                	mov    %eax,%edx
  40e5b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e5b4:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40e5b6:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40e5bb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e5c2:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40e5c6:	75 d5                	jne    40e59d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x291>
	      break;
  40e5c8:	eb 00                	jmp    40e5ca <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40e5ca:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40e5cb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e5d2:	0f b6 00             	movzbl (%rax),%eax
  40e5d5:	83 e0 10             	and    $0x10,%eax
  40e5d8:	84 c0                	test   %al,%al
  40e5da:	74 1b                	je     40e5f7 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2eb>
  40e5dc:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40e5e3:	48 89 c7             	mov    %rax,%rdi
  40e5e6:	e8 0f 73 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40e5eb:	48 85 c0             	test   %rax,%rax
  40e5ee:	74 07                	je     40e5f7 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2eb>
  40e5f0:	b8 01 00 00 00       	mov    $0x1,%eax
  40e5f5:	eb 05                	jmp    40e5fc <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f0>
  40e5f7:	b8 00 00 00 00       	mov    $0x0,%eax
  40e5fc:	84 c0                	test   %al,%al
  40e5fe:	74 4c                	je     40e64c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x340>
	      __start -= __base_prefix.size();
  40e600:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40e607:	48 89 c7             	mov    %rax,%rdi
  40e60a:	e8 eb 72 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40e60f:	48 f7 d8             	neg    %rax
  40e612:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40e616:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40e61d:	48 89 c7             	mov    %rax,%rdi
  40e620:	e8 d5 72 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40e625:	48 89 c3             	mov    %rax,%rbx
  40e628:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40e62f:	48 89 c7             	mov    %rax,%rdi
  40e632:	e8 b1 82 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40e637:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e63b:	48 89 d1             	mov    %rdx,%rcx
  40e63e:	48 89 da             	mov    %rbx,%rdx
  40e641:	48 89 c6             	mov    %rax,%rsi
  40e644:	48 89 cf             	mov    %rcx,%rdi
  40e647:	e8 84 5b ff ff       	call   4041d0 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40e64c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e650:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40e654:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e65b:	0f b6 00             	movzbl (%rax),%eax
  40e65e:	c0 e8 02             	shr    $0x2,%al
  40e661:	83 e0 03             	and    $0x3,%eax
  40e664:	0f b6 c8             	movzbl %al,%ecx
  40e667:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40e66e:	89 ce                	mov    %ecx,%esi
  40e670:	89 c7                	mov    %eax,%edi
  40e672:	e8 28 62 00 00       	call   41489f <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_>
  40e677:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  40e67b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e67f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40e683:	48 89 c3             	mov    %rax,%rbx
  40e686:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40e68d:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40e691:	48 89 c2             	mov    %rax,%rdx
  40e694:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40e698:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40e69c:	48 89 ce             	mov    %rcx,%rsi
  40e69f:	48 89 c7             	mov    %rax,%rdi
  40e6a2:	e8 53 82 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40e6a7:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40e6ae:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40e6b2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40e6b6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40e6bd:	49 89 c8             	mov    %rcx,%r8
  40e6c0:	48 89 d9             	mov    %rbx,%rcx
  40e6c3:	48 89 c7             	mov    %rax,%rdi
  40e6c6:	e8 0d 62 00 00       	call   4148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40e6cb:	90                   	nop
	}
  40e6cc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e6d0:	c9                   	leave
  40e6d1:	c3                   	ret

000000000040e6d2 <_ZNSt8__format15__formatter_intIcE8_M_parseIiEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40e6d2:	55                   	push   %rbp
  40e6d3:	48 89 e5             	mov    %rsp,%rbp
  40e6d6:	48 83 ec 10          	sub    $0x10,%rsp
  40e6da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e6de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40e6e2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40e6e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e6ea:	ba 01 00 00 00       	mov    $0x1,%edx
  40e6ef:	48 89 ce             	mov    %rcx,%rsi
  40e6f2:	48 89 c7             	mov    %rax,%rdi
  40e6f5:	e8 24 5b 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  40e6fa:	c9                   	leave
  40e6fb:	c3                   	ret

000000000040e6fc <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40e6fc:	55                   	push   %rbp
  40e6fd:	48 89 e5             	mov    %rsp,%rbp
  40e700:	53                   	push   %rbx
  40e701:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  40e708:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  40e70f:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  40e715:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40e71c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e723:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e727:	83 e0 78             	and    $0x78,%eax
  40e72a:	3c 38                	cmp    $0x38,%al
  40e72c:	75 2d                	jne    40e75b <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f>
	    return _M_format_character(_S_to_character(__i), __fc);
  40e72e:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40e734:	89 c7                	mov    %eax,%edi
  40e736:	e8 0e 66 00 00       	call   414d49 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_>
  40e73b:	0f be c8             	movsbl %al,%ecx
  40e73e:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40e745:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e74c:	89 ce                	mov    %ecx,%esi
  40e74e:	48 89 c7             	mov    %rax,%rdi
  40e751:	e8 56 fb ff ff       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40e756:	e9 6a 03 00 00       	jmp    40eac5 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c9>
	  to_chars_result __res{};
  40e75b:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40e762:	00 00 00 00
  40e766:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  40e76d:	00 00 00 00
	  string_view __base_prefix;
  40e771:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40e778:	00 00 00 00
  40e77c:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40e783:	00 00 00 00
	  if (__i < 0)
  40e787:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40e78e:	79 0d                	jns    40e79d <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa1>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  40e790:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40e796:	f7 d8                	neg    %eax
  40e798:	89 45 ec             	mov    %eax,-0x14(%rbp)
  40e79b:	eb 09                	jmp    40e7a6 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaa>
	    __u = __i;
  40e79d:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40e7a3:	89 45 ec             	mov    %eax,-0x14(%rbp)
	  char* __start = __buf + 3;
  40e7a6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40e7ad:	48 83 c0 03          	add    $0x3,%rax
  40e7b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40e7b5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40e7bc:	48 83 c0 23          	add    $0x23,%rax
  40e7c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40e7c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e7c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40e7cc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e7d3:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e7d7:	c0 e8 03             	shr    $0x3,%al
  40e7da:	83 e0 0f             	and    $0xf,%eax
  40e7dd:	0f b6 c0             	movzbl %al,%eax
  40e7e0:	83 f8 06             	cmp    $0x6,%eax
  40e7e3:	0f 8f db 01 00 00    	jg     40e9c4 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40e7e9:	83 f8 05             	cmp    $0x5,%eax
  40e7ec:	0f 8d 20 01 00 00    	jge    40e912 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x216>
  40e7f2:	83 f8 04             	cmp    $0x4,%eax
  40e7f5:	0f 84 bc 00 00 00    	je     40e8b7 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1bb>
  40e7fb:	83 f8 04             	cmp    $0x4,%eax
  40e7fe:	0f 8f c0 01 00 00    	jg     40e9c4 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40e804:	83 f8 01             	cmp    $0x1,%eax
  40e807:	7f 09                	jg     40e812 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x116>
  40e809:	85 c0                	test   %eax,%eax
  40e80b:	79 7f                	jns    40e88c <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x190>
  40e80d:	e9 b2 01 00 00       	jmp    40e9c4 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40e812:	83 e8 02             	sub    $0x2,%eax
  40e815:	83 f8 01             	cmp    $0x1,%eax
  40e818:	0f 87 a6 01 00 00    	ja     40e9c4 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40e81e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e825:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e829:	83 e0 78             	and    $0x78,%eax
  40e82c:	3c 10                	cmp    $0x10,%al
  40e82e:	75 07                	jne    40e837 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x13b>
  40e830:	ba c2 a3 41 00       	mov    $0x41a3c2,%edx
  40e835:	eb 05                	jmp    40e83c <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x140>
  40e837:	ba c5 a3 41 00       	mov    $0x41a3c5,%edx
  40e83c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40e840:	48 89 d6             	mov    %rdx,%rsi
  40e843:	48 89 c7             	mov    %rax,%rdi
  40e846:	e8 19 6f ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40e84b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40e84f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40e853:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40e85a:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40e861:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40e864:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e868:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e86c:	b9 02 00 00 00       	mov    $0x2,%ecx
  40e871:	48 89 c7             	mov    %rax,%rdi
  40e874:	e8 f8 64 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40e879:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40e880:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40e887:	e9 39 01 00 00       	jmp    40e9c5 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      __res = to_chars(__start, __end, __u, 10);
  40e88c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40e88f:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e893:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e897:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40e89c:	48 89 c7             	mov    %rax,%rdi
  40e89f:	e8 cd 64 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40e8a4:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40e8ab:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40e8b2:	e9 0e 01 00 00       	jmp    40e9c5 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      if (__i != 0)
  40e8b7:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40e8be:	74 27                	je     40e8e7 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1eb>
		__base_prefix = "0";
  40e8c0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e8c4:	be c8 a3 41 00       	mov    $0x41a3c8,%esi
  40e8c9:	48 89 c7             	mov    %rax,%rdi
  40e8cc:	e8 93 6e ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40e8d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40e8d5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40e8d9:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40e8e0:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40e8e7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40e8ea:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e8ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e8f2:	b9 08 00 00 00       	mov    $0x8,%ecx
  40e8f7:	48 89 c7             	mov    %rax,%rdi
  40e8fa:	e8 72 64 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40e8ff:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40e906:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40e90d:	e9 b3 00 00 00       	jmp    40e9c5 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40e912:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e919:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e91d:	83 e0 78             	and    $0x78,%eax
  40e920:	3c 28                	cmp    $0x28,%al
  40e922:	75 07                	jne    40e92b <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x22f>
  40e924:	ba ca a3 41 00       	mov    $0x41a3ca,%edx
  40e929:	eb 05                	jmp    40e930 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x234>
  40e92b:	ba cd a3 41 00       	mov    $0x41a3cd,%edx
  40e930:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e934:	48 89 d6             	mov    %rdx,%rsi
  40e937:	48 89 c7             	mov    %rax,%rdi
  40e93a:	e8 25 6e ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40e93f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40e943:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40e947:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40e94e:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40e955:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40e958:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40e95c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e960:	b9 10 00 00 00       	mov    $0x10,%ecx
  40e965:	48 89 c7             	mov    %rax,%rdi
  40e968:	e8 04 64 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40e96d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40e974:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40e97b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e982:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40e986:	83 e0 78             	and    $0x78,%eax
  40e989:	3c 30                	cmp    $0x30,%al
  40e98b:	75 37                	jne    40e9c4 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40e98d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e991:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40e995:	eb 1e                	jmp    40e9b5 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b9>
		  *__p = __builtin_toupper(*__p);
  40e997:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e99b:	0f b6 00             	movzbl (%rax),%eax
  40e99e:	0f be c0             	movsbl %al,%eax
  40e9a1:	89 c7                	mov    %eax,%edi
  40e9a3:	e8 d8 59 ff ff       	call   404380 <toupper@plt>
  40e9a8:	89 c2                	mov    %eax,%edx
  40e9aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e9ae:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40e9b0:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  40e9b5:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40e9bc:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40e9c0:	75 d5                	jne    40e997 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x29b>
	      break;
  40e9c2:	eb 00                	jmp    40e9c4 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40e9c4:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40e9c5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40e9cc:	0f b6 00             	movzbl (%rax),%eax
  40e9cf:	83 e0 10             	and    $0x10,%eax
  40e9d2:	84 c0                	test   %al,%al
  40e9d4:	74 1b                	je     40e9f1 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f5>
  40e9d6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40e9dd:	48 89 c7             	mov    %rax,%rdi
  40e9e0:	e8 15 6f ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40e9e5:	48 85 c0             	test   %rax,%rax
  40e9e8:	74 07                	je     40e9f1 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f5>
  40e9ea:	b8 01 00 00 00       	mov    $0x1,%eax
  40e9ef:	eb 05                	jmp    40e9f6 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2fa>
  40e9f1:	b8 00 00 00 00       	mov    $0x0,%eax
  40e9f6:	84 c0                	test   %al,%al
  40e9f8:	74 4c                	je     40ea46 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x34a>
	      __start -= __base_prefix.size();
  40e9fa:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ea01:	48 89 c7             	mov    %rax,%rdi
  40ea04:	e8 f1 6e ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40ea09:	48 f7 d8             	neg    %rax
  40ea0c:	48 01 45 e0          	add    %rax,-0x20(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40ea10:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ea17:	48 89 c7             	mov    %rax,%rdi
  40ea1a:	e8 db 6e ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40ea1f:	48 89 c3             	mov    %rax,%rbx
  40ea22:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ea29:	48 89 c7             	mov    %rax,%rdi
  40ea2c:	e8 b7 7e ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40ea31:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ea35:	48 89 d1             	mov    %rdx,%rcx
  40ea38:	48 89 da             	mov    %rbx,%rdx
  40ea3b:	48 89 c6             	mov    %rax,%rsi
  40ea3e:	48 89 cf             	mov    %rcx,%rdi
  40ea41:	e8 8a 57 ff ff       	call   4041d0 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40ea46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ea4a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40ea4e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ea55:	0f b6 00             	movzbl (%rax),%eax
  40ea58:	c0 e8 02             	shr    $0x2,%al
  40ea5b:	83 e0 03             	and    $0x3,%eax
  40ea5e:	0f b6 c8             	movzbl %al,%ecx
  40ea61:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40ea67:	89 ce                	mov    %ecx,%esi
  40ea69:	89 c7                	mov    %eax,%edi
  40ea6b:	e8 d4 51 00 00       	call   413c44 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_>
  40ea70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			       __start_digits - __start, __fc);
  40ea74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ea78:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40ea7c:	48 89 c3             	mov    %rax,%rbx
  40ea7f:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40ea86:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  40ea8a:	48 89 c2             	mov    %rax,%rdx
  40ea8d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40ea91:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ea95:	48 89 ce             	mov    %rcx,%rsi
  40ea98:	48 89 c7             	mov    %rax,%rdi
  40ea9b:	e8 5a 7e ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40eaa0:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40eaa7:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40eaab:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40eaaf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40eab6:	49 89 c8             	mov    %rcx,%r8
  40eab9:	48 89 d9             	mov    %rbx,%rcx
  40eabc:	48 89 c7             	mov    %rax,%rdi
  40eabf:	e8 14 5e 00 00       	call   4148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40eac4:	90                   	nop
	}
  40eac5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40eac9:	c9                   	leave
  40eaca:	c3                   	ret
  40eacb:	90                   	nop

000000000040eacc <_ZNSt8__format15__formatter_intIcE8_M_parseIjEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40eacc:	55                   	push   %rbp
  40eacd:	48 89 e5             	mov    %rsp,%rbp
  40ead0:	48 83 ec 10          	sub    $0x10,%rsp
  40ead4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ead8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40eadc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40eae0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eae4:	ba 01 00 00 00       	mov    $0x1,%edx
  40eae9:	48 89 ce             	mov    %rcx,%rsi
  40eaec:	48 89 c7             	mov    %rax,%rdi
  40eaef:	e8 2a 57 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  40eaf4:	c9                   	leave
  40eaf5:	c3                   	ret

000000000040eaf6 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40eaf6:	55                   	push   %rbp
  40eaf7:	48 89 e5             	mov    %rsp,%rbp
  40eafa:	53                   	push   %rbx
  40eafb:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  40eb02:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  40eb09:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  40eb0f:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40eb16:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40eb1d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40eb21:	83 e0 78             	and    $0x78,%eax
  40eb24:	3c 38                	cmp    $0x38,%al
  40eb26:	75 2d                	jne    40eb55 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f>
	    return _M_format_character(_S_to_character(__i), __fc);
  40eb28:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40eb2e:	89 c7                	mov    %eax,%edi
  40eb30:	e8 6a 62 00 00       	call   414d9f <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_>
  40eb35:	0f be c8             	movsbl %al,%ecx
  40eb38:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40eb3f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40eb46:	89 ce                	mov    %ecx,%esi
  40eb48:	48 89 c7             	mov    %rax,%rdi
  40eb4b:	e8 5c f7 ff ff       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40eb50:	e9 54 03 00 00       	jmp    40eea9 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3b3>
	  to_chars_result __res{};
  40eb55:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40eb5c:	00 00 00 00
  40eb60:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  40eb67:	00 00 00 00
	  string_view __base_prefix;
  40eb6b:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40eb72:	00 00 00 00
  40eb76:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40eb7d:	00 00 00 00
	    __u = __i;
  40eb81:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40eb87:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  char* __start = __buf + 3;
  40eb8a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40eb91:	48 83 c0 03          	add    $0x3,%rax
  40eb95:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40eb99:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40eba0:	48 83 c0 23          	add    $0x23,%rax
  40eba4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40eba8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ebac:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40ebb0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ebb7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ebbb:	c0 e8 03             	shr    $0x3,%al
  40ebbe:	83 e0 0f             	and    $0xf,%eax
  40ebc1:	0f b6 c0             	movzbl %al,%eax
  40ebc4:	83 f8 06             	cmp    $0x6,%eax
  40ebc7:	0f 8f db 01 00 00    	jg     40eda8 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40ebcd:	83 f8 05             	cmp    $0x5,%eax
  40ebd0:	0f 8d 20 01 00 00    	jge    40ecf6 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x200>
  40ebd6:	83 f8 04             	cmp    $0x4,%eax
  40ebd9:	0f 84 bc 00 00 00    	je     40ec9b <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1a5>
  40ebdf:	83 f8 04             	cmp    $0x4,%eax
  40ebe2:	0f 8f c0 01 00 00    	jg     40eda8 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40ebe8:	83 f8 01             	cmp    $0x1,%eax
  40ebeb:	7f 09                	jg     40ebf6 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x100>
  40ebed:	85 c0                	test   %eax,%eax
  40ebef:	79 7f                	jns    40ec70 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
  40ebf1:	e9 b2 01 00 00       	jmp    40eda8 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40ebf6:	83 e8 02             	sub    $0x2,%eax
  40ebf9:	83 f8 01             	cmp    $0x1,%eax
  40ebfc:	0f 87 a6 01 00 00    	ja     40eda8 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40ec02:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ec09:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ec0d:	83 e0 78             	and    $0x78,%eax
  40ec10:	3c 10                	cmp    $0x10,%al
  40ec12:	75 07                	jne    40ec1b <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x125>
  40ec14:	ba c2 a3 41 00       	mov    $0x41a3c2,%edx
  40ec19:	eb 05                	jmp    40ec20 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12a>
  40ec1b:	ba c5 a3 41 00       	mov    $0x41a3c5,%edx
  40ec20:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40ec24:	48 89 d6             	mov    %rdx,%rsi
  40ec27:	48 89 c7             	mov    %rax,%rdi
  40ec2a:	e8 35 6b ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40ec2f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40ec33:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40ec37:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40ec3e:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40ec45:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40ec48:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ec4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ec50:	b9 02 00 00 00       	mov    $0x2,%ecx
  40ec55:	48 89 c7             	mov    %rax,%rdi
  40ec58:	e8 14 61 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40ec5d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40ec64:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40ec6b:	e9 39 01 00 00       	jmp    40eda9 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      __res = to_chars(__start, __end, __u, 10);
  40ec70:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40ec73:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ec77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ec7b:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40ec80:	48 89 c7             	mov    %rax,%rdi
  40ec83:	e8 e9 60 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40ec88:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40ec8f:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40ec96:	e9 0e 01 00 00       	jmp    40eda9 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      if (__i != 0)
  40ec9b:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40eca2:	74 27                	je     40eccb <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1d5>
		__base_prefix = "0";
  40eca4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40eca8:	be c8 a3 41 00       	mov    $0x41a3c8,%esi
  40ecad:	48 89 c7             	mov    %rax,%rdi
  40ecb0:	e8 af 6a ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40ecb5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40ecb9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40ecbd:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40ecc4:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40eccb:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40ecce:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ecd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ecd6:	b9 08 00 00 00       	mov    $0x8,%ecx
  40ecdb:	48 89 c7             	mov    %rax,%rdi
  40ecde:	e8 8e 60 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40ece3:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40ecea:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40ecf1:	e9 b3 00 00 00       	jmp    40eda9 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40ecf6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ecfd:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ed01:	83 e0 78             	and    $0x78,%eax
  40ed04:	3c 28                	cmp    $0x28,%al
  40ed06:	75 07                	jne    40ed0f <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x219>
  40ed08:	ba ca a3 41 00       	mov    $0x41a3ca,%edx
  40ed0d:	eb 05                	jmp    40ed14 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x21e>
  40ed0f:	ba cd a3 41 00       	mov    $0x41a3cd,%edx
  40ed14:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40ed18:	48 89 d6             	mov    %rdx,%rsi
  40ed1b:	48 89 c7             	mov    %rax,%rdi
  40ed1e:	e8 41 6a ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40ed23:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ed27:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40ed2b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40ed32:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40ed39:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40ed3c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40ed40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ed44:	b9 10 00 00 00       	mov    $0x10,%ecx
  40ed49:	48 89 c7             	mov    %rax,%rdi
  40ed4c:	e8 20 60 00 00       	call   414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40ed51:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40ed58:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40ed5f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ed66:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ed6a:	83 e0 78             	and    $0x78,%eax
  40ed6d:	3c 30                	cmp    $0x30,%al
  40ed6f:	75 37                	jne    40eda8 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40ed71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ed75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ed79:	eb 1e                	jmp    40ed99 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2a3>
		  *__p = __builtin_toupper(*__p);
  40ed7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ed7f:	0f b6 00             	movzbl (%rax),%eax
  40ed82:	0f be c0             	movsbl %al,%eax
  40ed85:	89 c7                	mov    %eax,%edi
  40ed87:	e8 f4 55 ff ff       	call   404380 <toupper@plt>
  40ed8c:	89 c2                	mov    %eax,%edx
  40ed8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ed92:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40ed94:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40ed99:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40eda0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40eda4:	75 d5                	jne    40ed7b <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x285>
	      break;
  40eda6:	eb 00                	jmp    40eda8 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40eda8:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40eda9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40edb0:	0f b6 00             	movzbl (%rax),%eax
  40edb3:	83 e0 10             	and    $0x10,%eax
  40edb6:	84 c0                	test   %al,%al
  40edb8:	74 1b                	je     40edd5 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2df>
  40edba:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40edc1:	48 89 c7             	mov    %rax,%rdi
  40edc4:	e8 31 6b ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40edc9:	48 85 c0             	test   %rax,%rax
  40edcc:	74 07                	je     40edd5 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2df>
  40edce:	b8 01 00 00 00       	mov    $0x1,%eax
  40edd3:	eb 05                	jmp    40edda <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2e4>
  40edd5:	b8 00 00 00 00       	mov    $0x0,%eax
  40edda:	84 c0                	test   %al,%al
  40eddc:	74 4c                	je     40ee2a <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x334>
	      __start -= __base_prefix.size();
  40edde:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ede5:	48 89 c7             	mov    %rax,%rdi
  40ede8:	e8 0d 6b ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40eded:	48 f7 d8             	neg    %rax
  40edf0:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40edf4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40edfb:	48 89 c7             	mov    %rax,%rdi
  40edfe:	e8 f7 6a ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40ee03:	48 89 c3             	mov    %rax,%rbx
  40ee06:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ee0d:	48 89 c7             	mov    %rax,%rdi
  40ee10:	e8 d3 7a ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40ee15:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ee19:	48 89 d1             	mov    %rdx,%rcx
  40ee1c:	48 89 da             	mov    %rbx,%rdx
  40ee1f:	48 89 c6             	mov    %rax,%rsi
  40ee22:	48 89 cf             	mov    %rcx,%rdi
  40ee25:	e8 a6 53 ff ff       	call   4041d0 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40ee2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ee2e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40ee32:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ee39:	0f b6 00             	movzbl (%rax),%eax
  40ee3c:	c0 e8 02             	shr    $0x2,%al
  40ee3f:	83 e0 03             	and    $0x3,%eax
  40ee42:	0f b6 c8             	movzbl %al,%ecx
  40ee45:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40ee4b:	89 ce                	mov    %ecx,%esi
  40ee4d:	89 c7                	mov    %eax,%edi
  40ee4f:	e8 b9 4d 00 00       	call   413c0d <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_>
  40ee54:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  40ee58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ee5c:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40ee60:	48 89 c3             	mov    %rax,%rbx
  40ee63:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40ee6a:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40ee6e:	48 89 c2             	mov    %rax,%rdx
  40ee71:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ee75:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ee79:	48 89 ce             	mov    %rcx,%rsi
  40ee7c:	48 89 c7             	mov    %rax,%rdi
  40ee7f:	e8 76 7a ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40ee84:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40ee8b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40ee8f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ee93:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ee9a:	49 89 c8             	mov    %rcx,%r8
  40ee9d:	48 89 d9             	mov    %rbx,%rcx
  40eea0:	48 89 c7             	mov    %rax,%rdi
  40eea3:	e8 30 5a 00 00       	call   4148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40eea8:	90                   	nop
	}
  40eea9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40eead:	c9                   	leave
  40eeae:	c3                   	ret
  40eeaf:	90                   	nop

000000000040eeb0 <_ZNSt8__format15__formatter_intIcE8_M_parseIxEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40eeb0:	55                   	push   %rbp
  40eeb1:	48 89 e5             	mov    %rsp,%rbp
  40eeb4:	48 83 ec 10          	sub    $0x10,%rsp
  40eeb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eebc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40eec0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40eec4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eec8:	ba 01 00 00 00       	mov    $0x1,%edx
  40eecd:	48 89 ce             	mov    %rcx,%rsi
  40eed0:	48 89 c7             	mov    %rax,%rdi
  40eed3:	e8 46 53 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  40eed8:	c9                   	leave
  40eed9:	c3                   	ret

000000000040eeda <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40eeda:	55                   	push   %rbp
  40eedb:	48 89 e5             	mov    %rsp,%rbp
  40eede:	53                   	push   %rbx
  40eedf:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  40eee6:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  40eeed:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  40eef4:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40eefb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40ef02:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ef06:	83 e0 78             	and    $0x78,%eax
  40ef09:	3c 38                	cmp    $0x38,%al
  40ef0b:	75 2f                	jne    40ef3c <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  40ef0d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40ef14:	48 89 c7             	mov    %rax,%rdi
  40ef17:	e8 a5 5e 00 00       	call   414dc1 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_>
  40ef1c:	0f be c8             	movsbl %al,%ecx
  40ef1f:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40ef26:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40ef2d:	89 ce                	mov    %ecx,%esi
  40ef2f:	48 89 c7             	mov    %rax,%rdi
  40ef32:	e8 75 f3 ff ff       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40ef37:	e9 7b 03 00 00       	jmp    40f2b7 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3dd>
	  to_chars_result __res{};
  40ef3c:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  40ef43:	00 00 00 00
  40ef47:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
  40ef4e:	00 00 00 00
	  string_view __base_prefix;
  40ef52:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  40ef59:	00 00 00 00
  40ef5d:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
  40ef64:	00 00 00 00
	  if (__i < 0)
  40ef68:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  40ef6f:	00
  40ef70:	79 10                	jns    40ef82 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa8>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  40ef72:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40ef79:	48 f7 d8             	neg    %rax
  40ef7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40ef80:	eb 0b                	jmp    40ef8d <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb3>
	    __u = __i;
  40ef82:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40ef89:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __start = __buf + 3;
  40ef8d:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ef94:	48 83 c0 03          	add    $0x3,%rax
  40ef98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40ef9c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40efa3:	48 83 c0 43          	add    $0x43,%rax
  40efa7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40efab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40efaf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40efb3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40efba:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40efbe:	c0 e8 03             	shr    $0x3,%al
  40efc1:	83 e0 0f             	and    $0xf,%eax
  40efc4:	0f b6 c0             	movzbl %al,%eax
  40efc7:	83 f8 06             	cmp    $0x6,%eax
  40efca:	0f 8f e4 01 00 00    	jg     40f1b4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  40efd0:	83 f8 05             	cmp    $0x5,%eax
  40efd3:	0f 8d 28 01 00 00    	jge    40f101 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x227>
  40efd9:	83 f8 04             	cmp    $0x4,%eax
  40efdc:	0f 84 c2 00 00 00    	je     40f0a4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1ca>
  40efe2:	83 f8 04             	cmp    $0x4,%eax
  40efe5:	0f 8f c9 01 00 00    	jg     40f1b4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  40efeb:	83 f8 01             	cmp    $0x1,%eax
  40efee:	7f 0d                	jg     40effd <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x123>
  40eff0:	85 c0                	test   %eax,%eax
  40eff2:	0f 89 80 00 00 00    	jns    40f078 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x19e>
  40eff8:	e9 b7 01 00 00       	jmp    40f1b4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  40effd:	83 e8 02             	sub    $0x2,%eax
  40f000:	83 f8 01             	cmp    $0x1,%eax
  40f003:	0f 87 ab 01 00 00    	ja     40f1b4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40f009:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f010:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f014:	83 e0 78             	and    $0x78,%eax
  40f017:	3c 10                	cmp    $0x10,%al
  40f019:	75 07                	jne    40f022 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x148>
  40f01b:	ba c2 a3 41 00       	mov    $0x41a3c2,%edx
  40f020:	eb 05                	jmp    40f027 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x14d>
  40f022:	ba c5 a3 41 00       	mov    $0x41a3c5,%edx
  40f027:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40f02b:	48 89 d6             	mov    %rdx,%rsi
  40f02e:	48 89 c7             	mov    %rax,%rdi
  40f031:	e8 2e 67 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f036:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40f03a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40f03e:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40f045:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40f04c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f050:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f054:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f058:	b9 02 00 00 00       	mov    $0x2,%ecx
  40f05d:	48 89 c7             	mov    %rax,%rdi
  40f060:	e8 88 5d 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f065:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f06c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  40f073:	e9 3d 01 00 00       	jmp    40f1b5 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      __res = to_chars(__start, __end, __u, 10);
  40f078:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f07c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f080:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f084:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40f089:	48 89 c7             	mov    %rax,%rdi
  40f08c:	e8 5c 5d 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f091:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f098:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  40f09f:	e9 11 01 00 00       	jmp    40f1b5 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      if (__i != 0)
  40f0a4:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  40f0ab:	00
  40f0ac:	74 27                	je     40f0d5 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1fb>
		__base_prefix = "0";
  40f0ae:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f0b2:	be c8 a3 41 00       	mov    $0x41a3c8,%esi
  40f0b7:	48 89 c7             	mov    %rax,%rdi
  40f0ba:	e8 a5 66 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f0bf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40f0c3:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40f0c7:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40f0ce:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40f0d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f0d9:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f0dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f0e1:	b9 08 00 00 00       	mov    $0x8,%ecx
  40f0e6:	48 89 c7             	mov    %rax,%rdi
  40f0e9:	e8 ff 5c 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f0ee:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f0f5:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  40f0fc:	e9 b4 00 00 00       	jmp    40f1b5 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40f101:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f108:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f10c:	83 e0 78             	and    $0x78,%eax
  40f10f:	3c 28                	cmp    $0x28,%al
  40f111:	75 07                	jne    40f11a <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x240>
  40f113:	ba ca a3 41 00       	mov    $0x41a3ca,%edx
  40f118:	eb 05                	jmp    40f11f <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x245>
  40f11a:	ba cd a3 41 00       	mov    $0x41a3cd,%edx
  40f11f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40f123:	48 89 d6             	mov    %rdx,%rsi
  40f126:	48 89 c7             	mov    %rax,%rdi
  40f129:	e8 36 66 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f12e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40f132:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40f136:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40f13d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40f144:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f148:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f14c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f150:	b9 10 00 00 00       	mov    $0x10,%ecx
  40f155:	48 89 c7             	mov    %rax,%rdi
  40f158:	e8 90 5c 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f15d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f164:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40f16b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f172:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f176:	83 e0 78             	and    $0x78,%eax
  40f179:	3c 30                	cmp    $0x30,%al
  40f17b:	75 37                	jne    40f1b4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f17d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f181:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40f185:	eb 1e                	jmp    40f1a5 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2cb>
		  *__p = __builtin_toupper(*__p);
  40f187:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40f18b:	0f b6 00             	movzbl (%rax),%eax
  40f18e:	0f be c0             	movsbl %al,%eax
  40f191:	89 c7                	mov    %eax,%edi
  40f193:	e8 e8 51 ff ff       	call   404380 <toupper@plt>
  40f198:	89 c2                	mov    %eax,%edx
  40f19a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40f19e:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f1a0:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  40f1a5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40f1ac:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40f1b0:	75 d5                	jne    40f187 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ad>
	      break;
  40f1b2:	eb 00                	jmp    40f1b4 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  40f1b4:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40f1b5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f1bc:	0f b6 00             	movzbl (%rax),%eax
  40f1bf:	83 e0 10             	and    $0x10,%eax
  40f1c2:	84 c0                	test   %al,%al
  40f1c4:	74 1b                	je     40f1e1 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x307>
  40f1c6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f1cd:	48 89 c7             	mov    %rax,%rdi
  40f1d0:	e8 25 67 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f1d5:	48 85 c0             	test   %rax,%rax
  40f1d8:	74 07                	je     40f1e1 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x307>
  40f1da:	b8 01 00 00 00       	mov    $0x1,%eax
  40f1df:	eb 05                	jmp    40f1e6 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x30c>
  40f1e1:	b8 00 00 00 00       	mov    $0x0,%eax
  40f1e6:	84 c0                	test   %al,%al
  40f1e8:	74 4c                	je     40f236 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x35c>
	      __start -= __base_prefix.size();
  40f1ea:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f1f1:	48 89 c7             	mov    %rax,%rdi
  40f1f4:	e8 01 67 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f1f9:	48 f7 d8             	neg    %rax
  40f1fc:	48 01 45 e0          	add    %rax,-0x20(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40f200:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f207:	48 89 c7             	mov    %rax,%rdi
  40f20a:	e8 eb 66 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f20f:	48 89 c3             	mov    %rax,%rbx
  40f212:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f219:	48 89 c7             	mov    %rax,%rdi
  40f21c:	e8 c7 76 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40f221:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40f225:	48 89 d1             	mov    %rdx,%rcx
  40f228:	48 89 da             	mov    %rbx,%rdx
  40f22b:	48 89 c6             	mov    %rax,%rsi
  40f22e:	48 89 cf             	mov    %rcx,%rdi
  40f231:	e8 9a 4f ff ff       	call   4041d0 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40f236:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f23a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40f23e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f245:	0f b6 00             	movzbl (%rax),%eax
  40f248:	c0 e8 02             	shr    $0x2,%al
  40f24b:	83 e0 03             	and    $0x3,%eax
  40f24e:	0f b6 c8             	movzbl %al,%ecx
  40f251:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40f258:	89 ce                	mov    %ecx,%esi
  40f25a:	48 89 c7             	mov    %rax,%rdi
  40f25d:	e8 28 4a 00 00       	call   413c8a <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_>
  40f262:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			       __start_digits - __start, __fc);
  40f266:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40f26a:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40f26e:	48 89 c3             	mov    %rax,%rbx
  40f271:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40f278:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  40f27c:	48 89 c2             	mov    %rax,%rdx
  40f27f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f283:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f287:	48 89 ce             	mov    %rcx,%rsi
  40f28a:	48 89 c7             	mov    %rax,%rdi
  40f28d:	e8 68 76 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40f292:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  40f299:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40f29d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40f2a1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f2a8:	49 89 c8             	mov    %rcx,%r8
  40f2ab:	48 89 d9             	mov    %rbx,%rcx
  40f2ae:	48 89 c7             	mov    %rax,%rdi
  40f2b1:	e8 22 56 00 00       	call   4148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40f2b6:	90                   	nop
	}
  40f2b7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f2bb:	c9                   	leave
  40f2bc:	c3                   	ret
  40f2bd:	90                   	nop

000000000040f2be <_ZNSt8__format15__formatter_intIcE8_M_parseIyEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40f2be:	55                   	push   %rbp
  40f2bf:	48 89 e5             	mov    %rsp,%rbp
  40f2c2:	48 83 ec 10          	sub    $0x10,%rsp
  40f2c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40f2ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40f2ce:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40f2d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f2d6:	ba 01 00 00 00       	mov    $0x1,%edx
  40f2db:	48 89 ce             	mov    %rcx,%rsi
  40f2de:	48 89 c7             	mov    %rax,%rdi
  40f2e1:	e8 38 4f 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  40f2e6:	c9                   	leave
  40f2e7:	c3                   	ret

000000000040f2e8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40f2e8:	55                   	push   %rbp
  40f2e9:	48 89 e5             	mov    %rsp,%rbp
  40f2ec:	53                   	push   %rbx
  40f2ed:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  40f2f4:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  40f2fb:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  40f302:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40f309:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f310:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f314:	83 e0 78             	and    $0x78,%eax
  40f317:	3c 38                	cmp    $0x38,%al
  40f319:	75 2f                	jne    40f34a <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  40f31b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40f322:	48 89 c7             	mov    %rax,%rdi
  40f325:	e8 f3 5a 00 00       	call   414e1d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_>
  40f32a:	0f be c8             	movsbl %al,%ecx
  40f32d:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  40f334:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f33b:	89 ce                	mov    %ecx,%esi
  40f33d:	48 89 c7             	mov    %rax,%rdi
  40f340:	e8 67 ef ff ff       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40f345:	e9 61 03 00 00       	jmp    40f6ab <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
	  to_chars_result __res{};
  40f34a:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  40f351:	00 00 00 00
  40f355:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
  40f35c:	00 00 00 00
	  string_view __base_prefix;
  40f360:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  40f367:	00 00 00 00
  40f36b:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
  40f372:	00 00 00 00
	    __u = __i;
  40f376:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40f37d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  char* __start = __buf + 3;
  40f381:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40f388:	48 83 c0 03          	add    $0x3,%rax
  40f38c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40f390:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40f397:	48 83 c0 43          	add    $0x43,%rax
  40f39b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40f39f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f3a3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40f3a7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f3ae:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f3b2:	c0 e8 03             	shr    $0x3,%al
  40f3b5:	83 e0 0f             	and    $0xf,%eax
  40f3b8:	0f b6 c0             	movzbl %al,%eax
  40f3bb:	83 f8 06             	cmp    $0x6,%eax
  40f3be:	0f 8f e4 01 00 00    	jg     40f5a8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  40f3c4:	83 f8 05             	cmp    $0x5,%eax
  40f3c7:	0f 8d 28 01 00 00    	jge    40f4f5 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x20d>
  40f3cd:	83 f8 04             	cmp    $0x4,%eax
  40f3d0:	0f 84 c2 00 00 00    	je     40f498 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1b0>
  40f3d6:	83 f8 04             	cmp    $0x4,%eax
  40f3d9:	0f 8f c9 01 00 00    	jg     40f5a8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  40f3df:	83 f8 01             	cmp    $0x1,%eax
  40f3e2:	7f 0d                	jg     40f3f1 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x109>
  40f3e4:	85 c0                	test   %eax,%eax
  40f3e6:	0f 89 80 00 00 00    	jns    40f46c <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x184>
  40f3ec:	e9 b7 01 00 00       	jmp    40f5a8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  40f3f1:	83 e8 02             	sub    $0x2,%eax
  40f3f4:	83 f8 01             	cmp    $0x1,%eax
  40f3f7:	0f 87 ab 01 00 00    	ja     40f5a8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40f3fd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f404:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f408:	83 e0 78             	and    $0x78,%eax
  40f40b:	3c 10                	cmp    $0x10,%al
  40f40d:	75 07                	jne    40f416 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12e>
  40f40f:	ba c2 a3 41 00       	mov    $0x41a3c2,%edx
  40f414:	eb 05                	jmp    40f41b <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x133>
  40f416:	ba c5 a3 41 00       	mov    $0x41a3c5,%edx
  40f41b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40f41f:	48 89 d6             	mov    %rdx,%rsi
  40f422:	48 89 c7             	mov    %rax,%rdi
  40f425:	e8 3a 63 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f42a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40f42e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40f432:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40f439:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40f440:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40f444:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f448:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f44c:	b9 02 00 00 00       	mov    $0x2,%ecx
  40f451:	48 89 c7             	mov    %rax,%rdi
  40f454:	e8 94 59 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f459:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f460:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  40f467:	e9 3d 01 00 00       	jmp    40f5a9 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      __res = to_chars(__start, __end, __u, 10);
  40f46c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40f470:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f474:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f478:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40f47d:	48 89 c7             	mov    %rax,%rdi
  40f480:	e8 68 59 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f485:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f48c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  40f493:	e9 11 01 00 00       	jmp    40f5a9 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      if (__i != 0)
  40f498:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  40f49f:	00
  40f4a0:	74 27                	je     40f4c9 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1e1>
		__base_prefix = "0";
  40f4a2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f4a6:	be c8 a3 41 00       	mov    $0x41a3c8,%esi
  40f4ab:	48 89 c7             	mov    %rax,%rdi
  40f4ae:	e8 b1 62 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f4b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40f4b7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40f4bb:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40f4c2:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40f4c9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40f4cd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f4d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f4d5:	b9 08 00 00 00       	mov    $0x8,%ecx
  40f4da:	48 89 c7             	mov    %rax,%rdi
  40f4dd:	e8 0b 59 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f4e2:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f4e9:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  40f4f0:	e9 b4 00 00 00       	jmp    40f5a9 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40f4f5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f4fc:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f500:	83 e0 78             	and    $0x78,%eax
  40f503:	3c 28                	cmp    $0x28,%al
  40f505:	75 07                	jne    40f50e <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
  40f507:	ba ca a3 41 00       	mov    $0x41a3ca,%edx
  40f50c:	eb 05                	jmp    40f513 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x22b>
  40f50e:	ba cd a3 41 00       	mov    $0x41a3cd,%edx
  40f513:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40f517:	48 89 d6             	mov    %rdx,%rsi
  40f51a:	48 89 c7             	mov    %rax,%rdi
  40f51d:	e8 42 62 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f522:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40f526:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40f52a:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  40f531:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40f538:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40f53c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f540:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f544:	b9 10 00 00 00       	mov    $0x10,%ecx
  40f549:	48 89 c7             	mov    %rax,%rdi
  40f54c:	e8 9c 58 00 00       	call   414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  40f551:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  40f558:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40f55f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f566:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f56a:	83 e0 78             	and    $0x78,%eax
  40f56d:	3c 30                	cmp    $0x30,%al
  40f56f:	75 37                	jne    40f5a8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f575:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40f579:	eb 1e                	jmp    40f599 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b1>
		  *__p = __builtin_toupper(*__p);
  40f57b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f57f:	0f b6 00             	movzbl (%rax),%eax
  40f582:	0f be c0             	movsbl %al,%eax
  40f585:	89 c7                	mov    %eax,%edi
  40f587:	e8 f4 4d ff ff       	call   404380 <toupper@plt>
  40f58c:	89 c2                	mov    %eax,%edx
  40f58e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f592:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f594:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40f599:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40f5a0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40f5a4:	75 d5                	jne    40f57b <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x293>
	      break;
  40f5a6:	eb 00                	jmp    40f5a8 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  40f5a8:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40f5a9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f5b0:	0f b6 00             	movzbl (%rax),%eax
  40f5b3:	83 e0 10             	and    $0x10,%eax
  40f5b6:	84 c0                	test   %al,%al
  40f5b8:	74 1b                	je     40f5d5 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ed>
  40f5ba:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f5c1:	48 89 c7             	mov    %rax,%rdi
  40f5c4:	e8 31 63 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f5c9:	48 85 c0             	test   %rax,%rax
  40f5cc:	74 07                	je     40f5d5 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ed>
  40f5ce:	b8 01 00 00 00       	mov    $0x1,%eax
  40f5d3:	eb 05                	jmp    40f5da <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f2>
  40f5d5:	b8 00 00 00 00       	mov    $0x0,%eax
  40f5da:	84 c0                	test   %al,%al
  40f5dc:	74 4c                	je     40f62a <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __start -= __base_prefix.size();
  40f5de:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f5e5:	48 89 c7             	mov    %rax,%rdi
  40f5e8:	e8 0d 63 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f5ed:	48 f7 d8             	neg    %rax
  40f5f0:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40f5f4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f5fb:	48 89 c7             	mov    %rax,%rdi
  40f5fe:	e8 f7 62 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f603:	48 89 c3             	mov    %rax,%rbx
  40f606:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  40f60d:	48 89 c7             	mov    %rax,%rdi
  40f610:	e8 d3 72 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40f615:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f619:	48 89 d1             	mov    %rdx,%rcx
  40f61c:	48 89 da             	mov    %rbx,%rdx
  40f61f:	48 89 c6             	mov    %rax,%rsi
  40f622:	48 89 cf             	mov    %rcx,%rdi
  40f625:	e8 a6 4b ff ff       	call   4041d0 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40f62a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f62e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40f632:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f639:	0f b6 00             	movzbl (%rax),%eax
  40f63c:	c0 e8 02             	shr    $0x2,%al
  40f63f:	83 e0 03             	and    $0x3,%eax
  40f642:	0f b6 c8             	movzbl %al,%ecx
  40f645:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40f64c:	89 ce                	mov    %ecx,%esi
  40f64e:	48 89 c7             	mov    %rax,%rdi
  40f651:	e8 7c 46 00 00       	call   413cd2 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_>
  40f656:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  40f65a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40f65e:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40f662:	48 89 c3             	mov    %rax,%rbx
  40f665:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40f66c:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40f670:	48 89 c2             	mov    %rax,%rdx
  40f673:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40f677:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f67b:	48 89 ce             	mov    %rcx,%rsi
  40f67e:	48 89 c7             	mov    %rax,%rdi
  40f681:	e8 74 72 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40f686:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  40f68d:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40f691:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40f695:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40f69c:	49 89 c8             	mov    %rcx,%r8
  40f69f:	48 89 d9             	mov    %rbx,%rcx
  40f6a2:	48 89 c7             	mov    %rax,%rdi
  40f6a5:	e8 2e 52 00 00       	call   4148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40f6aa:	90                   	nop
	}
  40f6ab:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f6af:	c9                   	leave
  40f6b0:	c3                   	ret
  40f6b1:	90                   	nop

000000000040f6b2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  40f6b2:	55                   	push   %rbp
  40f6b3:	48 89 e5             	mov    %rsp,%rbp
  40f6b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  40f6ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f6be:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40f6c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f6c6:	48 8b 00             	mov    (%rax),%rax
  40f6c9:	48 8b 0a             	mov    (%rdx),%rcx
  40f6cc:	48 89 08             	mov    %rcx,(%rax)
  40f6cf:	8b 52 08             	mov    0x8(%rdx),%edx
  40f6d2:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  40f6d5:	90                   	nop
  40f6d6:	5d                   	pop    %rbp
  40f6d7:	c3                   	ret

000000000040f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  40f6d8:	55                   	push   %rbp
  40f6d9:	48 89 e5             	mov    %rsp,%rbp
  40f6dc:	48 83 ec 10          	sub    $0x10,%rsp
  40f6e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  40f6e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f6e8:	48 8b 00             	mov    (%rax),%rax
  40f6eb:	48 8b 10             	mov    (%rax),%rdx
  40f6ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f6f2:	48 8b 40 08          	mov    0x8(%rax),%rax
  40f6f6:	48 8b 00             	mov    (%rax),%rax
  40f6f9:	48 39 c2             	cmp    %rax,%rdx
  40f6fc:	74 11                	je     40f70f <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  40f6fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f702:	48 8b 00             	mov    (%rax),%rax
  40f705:	48 8b 00             	mov    (%rax),%rax
  40f708:	0f b6 00             	movzbl (%rax),%eax
  40f70b:	3c 7d                	cmp    $0x7d,%al
  40f70d:	75 17                	jne    40f726 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  40f70f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f713:	48 8b 40 10          	mov    0x10(%rax),%rax
  40f717:	48 89 c7             	mov    %rax,%rdi
  40f71a:	e8 93 ff ff ff       	call   40f6b2 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  40f71f:	b8 01 00 00 00       	mov    $0x1,%eax
  40f724:	eb 05                	jmp    40f72b <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  40f726:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  40f72b:	c9                   	leave
  40f72c:	c3                   	ret
  40f72d:	90                   	nop

000000000040f72e <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  40f72e:	55                   	push   %rbp
  40f72f:	48 89 e5             	mov    %rsp,%rbp
  40f732:	48 83 ec 60          	sub    $0x60,%rsp
  40f736:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40f73a:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	_Spec<_CharT> __spec{};
  40f73e:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  40f745:	00
  40f746:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40f74d:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	const auto __last = __pc.end();
  40f754:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40f758:	48 89 c7             	mov    %rax,%rdi
  40f75b:	e8 72 66 ff ff       	call   405dd2 <_ZNKSt26basic_format_parse_contextIcE3endEv>
  40f760:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  40f764:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40f768:	48 89 c7             	mov    %rax,%rdi
  40f76b:	e8 32 66 ff ff       	call   405da2 <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  40f770:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  40f774:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40f778:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40f77c:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f780:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  40f784:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40f788:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40f78c:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40f790:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40f794:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40f798:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  40f79c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f7a0:	48 89 c7             	mov    %rax,%rdi
  40f7a3:	e8 30 ff ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f7a8:	84 c0                	test   %al,%al
  40f7aa:	74 09                	je     40f7b5 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  40f7ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f7b0:	e9 96 02 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  40f7b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f7b9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f7bd:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f7c1:	48 89 ce             	mov    %rcx,%rsi
  40f7c4:	48 89 c7             	mov    %rax,%rdi
  40f7c7:	e8 66 85 ff ff       	call   407d32 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  40f7cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40f7d0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f7d4:	48 89 c7             	mov    %rax,%rdi
  40f7d7:	e8 fc fe ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f7dc:	84 c0                	test   %al,%al
  40f7de:	74 09                	je     40f7e9 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0xbb>
	  return __first;
  40f7e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f7e4:	e9 62 02 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_sign(__first, __last);
  40f7e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f7ed:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f7f1:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f7f5:	48 89 ce             	mov    %rcx,%rsi
  40f7f8:	48 89 c7             	mov    %rax,%rdi
  40f7fb:	e8 42 56 00 00       	call   414e42 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>
  40f800:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40f804:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f808:	48 89 c7             	mov    %rax,%rdi
  40f80b:	e8 c8 fe ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f810:	84 c0                	test   %al,%al
  40f812:	74 09                	je     40f81d <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0xef>
	  return __first;
  40f814:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f818:	e9 2e 02 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_alternate_form(__first, __last);
  40f81d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f821:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f825:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f829:	48 89 ce             	mov    %rcx,%rsi
  40f82c:	48 89 c7             	mov    %rax,%rdi
  40f82f:	e8 6a 56 00 00       	call   414e9e <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>
  40f834:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40f838:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f83c:	48 89 c7             	mov    %rax,%rdi
  40f83f:	e8 94 fe ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f844:	84 c0                	test   %al,%al
  40f846:	74 09                	je     40f851 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x123>
	  return __first;
  40f848:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f84c:	e9 fa 01 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_zero_fill(__first, __last);
  40f851:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f855:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f859:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f85d:	48 89 ce             	mov    %rcx,%rsi
  40f860:	48 89 c7             	mov    %rax,%rdi
  40f863:	e8 68 56 00 00       	call   414ed0 <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>
  40f868:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40f86c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f870:	48 89 c7             	mov    %rax,%rdi
  40f873:	e8 60 fe ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f878:	84 c0                	test   %al,%al
  40f87a:	74 09                	je     40f885 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x157>
	  return __first;
  40f87c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f880:	e9 c6 01 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	if (__first[0] != '.')
  40f885:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f889:	0f b6 00             	movzbl (%rax),%eax
  40f88c:	3c 2e                	cmp    $0x2e,%al
  40f88e:	74 35                	je     40f8c5 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x197>
	    __first = __spec._M_parse_width(__first, __last, __pc);
  40f890:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f894:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40f898:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40f89c:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f8a0:	48 89 c7             	mov    %rax,%rdi
  40f8a3:	e8 1c 86 ff ff       	call   407ec4 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  40f8a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    if (__finished())
  40f8ac:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f8b0:	48 89 c7             	mov    %rax,%rdi
  40f8b3:	e8 20 fe ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f8b8:	84 c0                	test   %al,%al
  40f8ba:	74 09                	je     40f8c5 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x197>
	      return __first;
  40f8bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f8c0:	e9 86 01 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_precision(__first, __last, __pc);
  40f8c5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f8c9:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40f8cd:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40f8d1:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f8d5:	48 89 c7             	mov    %rax,%rdi
  40f8d8:	e8 85 86 ff ff       	call   407f62 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>
  40f8dd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40f8e1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f8e5:	48 89 c7             	mov    %rax,%rdi
  40f8e8:	e8 eb fd ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f8ed:	84 c0                	test   %al,%al
  40f8ef:	74 09                	je     40f8fa <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x1cc>
	  return __first;
  40f8f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f8f5:	e9 51 01 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_locale(__first, __last);
  40f8fa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f8fe:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f902:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40f906:	48 89 ce             	mov    %rcx,%rsi
  40f909:	48 89 c7             	mov    %rax,%rdi
  40f90c:	e8 f1 55 00 00       	call   414f02 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>
  40f911:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40f915:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f919:	48 89 c7             	mov    %rax,%rdi
  40f91c:	e8 b7 fd ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40f921:	84 c0                	test   %al,%al
  40f923:	74 09                	je     40f92e <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x200>
	  return __first;
  40f925:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f929:	e9 1d 01 00 00       	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	switch (*__first)
  40f92e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f932:	0f b6 00             	movzbl (%rax),%eax
  40f935:	0f be c0             	movsbl %al,%eax
  40f938:	83 e8 41             	sub    $0x41,%eax
  40f93b:	83 f8 26             	cmp    $0x26,%eax
  40f93e:	0f 87 ec 00 00 00    	ja     40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
  40f944:	89 c0                	mov    %eax,%eax
  40f946:	48 8b 04 c5 10 d1 41 	mov    0x41d110(,%rax,8),%rax
  40f94d:	00
  40f94e:	ff e0                	jmp    *%rax
	    __spec._M_type = _Pres_a;
  40f950:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40f954:	83 e0 87             	and    $0xffffff87,%eax
  40f957:	83 c8 08             	or     $0x8,%eax
  40f95a:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40f95d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f961:	48 83 c0 01          	add    $0x1,%rax
  40f965:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40f969:	e9 c2 00 00 00       	jmp    40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_A;
  40f96e:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40f972:	83 e0 87             	and    $0xffffff87,%eax
  40f975:	83 c8 10             	or     $0x10,%eax
  40f978:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40f97b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f97f:	48 83 c0 01          	add    $0x1,%rax
  40f983:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40f987:	e9 a4 00 00 00       	jmp    40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_e;
  40f98c:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40f990:	83 e0 87             	and    $0xffffff87,%eax
  40f993:	83 c8 18             	or     $0x18,%eax
  40f996:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40f999:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f99d:	48 83 c0 01          	add    $0x1,%rax
  40f9a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40f9a5:	e9 86 00 00 00       	jmp    40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_E;
  40f9aa:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40f9ae:	83 e0 87             	and    $0xffffff87,%eax
  40f9b1:	83 c8 20             	or     $0x20,%eax
  40f9b4:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40f9b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f9bb:	48 83 c0 01          	add    $0x1,%rax
  40f9bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40f9c3:	eb 6b                	jmp    40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_f;
  40f9c5:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40f9c9:	83 e0 87             	and    $0xffffff87,%eax
  40f9cc:	83 c8 28             	or     $0x28,%eax
  40f9cf:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40f9d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f9d6:	48 83 c0 01          	add    $0x1,%rax
  40f9da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40f9de:	eb 50                	jmp    40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_F;
  40f9e0:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40f9e4:	83 e0 87             	and    $0xffffff87,%eax
  40f9e7:	83 c8 30             	or     $0x30,%eax
  40f9ea:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40f9ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f9f1:	48 83 c0 01          	add    $0x1,%rax
  40f9f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40f9f9:	eb 35                	jmp    40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_g;
  40f9fb:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40f9ff:	83 e0 87             	and    $0xffffff87,%eax
  40fa02:	83 c8 38             	or     $0x38,%eax
  40fa05:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40fa08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fa0c:	48 83 c0 01          	add    $0x1,%rax
  40fa10:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40fa14:	eb 1a                	jmp    40fa30 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_G;
  40fa16:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  40fa1a:	83 e0 87             	and    $0xffffff87,%eax
  40fa1d:	83 c8 40             	or     $0x40,%eax
  40fa20:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  40fa23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fa27:	48 83 c0 01          	add    $0x1,%rax
  40fa2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  40fa2f:	90                   	nop
	if (__finished())
  40fa30:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40fa34:	48 89 c7             	mov    %rax,%rdi
  40fa37:	e8 9c fc ff ff       	call   40f6d8 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40fa3c:	84 c0                	test   %al,%al
  40fa3e:	74 06                	je     40fa46 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x318>
	  return __first;
  40fa40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fa44:	eb 05                	jmp    40fa4b <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__format::__failed_to_parse_format_spec();
  40fa46:	e8 69 56 ff ff       	call   4050b4 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  40fa4b:	c9                   	leave
  40fa4c:	c3                   	ret
  40fa4d:	90                   	nop

000000000040fa4e <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  40fa4e:	55                   	push   %rbp
  40fa4f:	48 89 e5             	mov    %rsp,%rbp
  40fa52:	48 83 ec 20          	sub    $0x20,%rsp
  40fa56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40fa5a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40fa5e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  40fa62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fa66:	48 8b 00             	mov    (%rax),%rax
  40fa69:	0f b6 00             	movzbl (%rax),%eax
  40fa6c:	84 c0                	test   %al,%al
  40fa6e:	74 37                	je     40faa7 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x59>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  40fa70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fa74:	48 8b 40 18          	mov    0x18(%rax),%rax
  40fa78:	48 8b 00             	mov    (%rax),%rax
  40fa7b:	89 c1                	mov    %eax,%ecx
  40fa7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fa81:	48 8b 40 10          	mov    0x10(%rax),%rax
  40fa85:	8b 10                	mov    (%rax),%edx
  40fa87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fa8b:	48 8b 40 08          	mov    0x8(%rax),%rax
  40fa8f:	8b 38                	mov    (%rax),%edi
  40fa91:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40fa95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40fa99:	66 0f 6e c7          	movd   %edi,%xmm0
  40fa9d:	48 89 c7             	mov    %rax,%rdi
  40faa0:	e8 cb 47 ff ff       	call   404270 <_ZSt8to_charsPcS_fSt12chars_formati@plt>
  40faa5:	eb 5d                	jmp    40fb04 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb6>
	    else if (__fmt != chars_format{})
  40faa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40faab:	48 8b 40 10          	mov    0x10(%rax),%rax
  40faaf:	8b 00                	mov    (%rax),%eax
  40fab1:	85 c0                	test   %eax,%eax
  40fab3:	74 2d                	je     40fae2 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x94>
	      return __format::to_chars(__b, __e, __v, __fmt);
  40fab5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fab9:	48 8b 40 10          	mov    0x10(%rax),%rax
  40fabd:	8b 10                	mov    (%rax),%edx
  40fabf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fac3:	48 8b 40 08          	mov    0x8(%rax),%rax
  40fac7:	8b 30                	mov    (%rax),%esi
  40fac9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40facd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40fad1:	66 0f 6e c6          	movd   %esi,%xmm0
  40fad5:	48 89 ce             	mov    %rcx,%rsi
  40fad8:	48 89 c7             	mov    %rax,%rdi
  40fadb:	e8 40 47 ff ff       	call   404220 <_ZSt8to_charsPcS_fSt12chars_format@plt>
  40fae0:	eb 22                	jmp    40fb04 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb6>
	      return __format::to_chars(__b, __e, __v);
  40fae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fae6:	48 8b 40 08          	mov    0x8(%rax),%rax
  40faea:	8b 08                	mov    (%rax),%ecx
  40faec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40faf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40faf4:	66 0f 6e c1          	movd   %ecx,%xmm0
  40faf8:	48 89 d6             	mov    %rdx,%rsi
  40fafb:	48 89 c7             	mov    %rax,%rdi
  40fafe:	e8 2d 45 ff ff       	call   404030 <_ZSt8to_charsPcS_f@plt>
  40fb03:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  40fb04:	c9                   	leave
  40fb05:	c3                   	ret

000000000040fb06 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  40fb06:	55                   	push   %rbp
  40fb07:	48 89 e5             	mov    %rsp,%rbp
  40fb0a:	53                   	push   %rbx
  40fb0b:	48 83 ec 28          	sub    $0x28,%rsp
  40fb0f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40fb13:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40fb17:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  40fb1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fb1f:	48 8b 00             	mov    (%rax),%rax
  40fb22:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40fb26:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  40fb2a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40fb2e:	48 01 ca             	add    %rcx,%rdx
  40fb31:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40fb35:	48 83 c1 01          	add    $0x1,%rcx
  40fb39:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40fb3d:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  40fb41:	48 89 ce             	mov    %rcx,%rsi
  40fb44:	48 89 c7             	mov    %rax,%rdi
  40fb47:	e8 02 ff ff ff       	call   40fa4e <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  40fb4c:	48 89 03             	mov    %rax,(%rbx)
  40fb4f:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  40fb53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fb57:	48 8b 40 08          	mov    0x8(%rax),%rax
  40fb5b:	8b 40 08             	mov    0x8(%rax),%eax
  40fb5e:	85 c0                	test   %eax,%eax
  40fb60:	75 11                	jne    40fb73 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  40fb62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fb66:	48 8b 40 08          	mov    0x8(%rax),%rax
  40fb6a:	48 8b 00             	mov    (%rax),%rax
  40fb6d:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  40fb71:	eb 05                	jmp    40fb78 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  40fb73:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  40fb78:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40fb7c:	c9                   	leave
  40fb7d:	c3                   	ret

000000000040fb7e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  40fb7e:	55                   	push   %rbp
  40fb7f:	48 89 e5             	mov    %rsp,%rbp
  40fb82:	53                   	push   %rbx
  40fb83:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  40fb8a:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  40fb91:	f3 0f 11 85 94 fd ff 	movss  %xmm0,-0x26c(%rbp)
  40fb98:	ff
  40fb99:	48 89 b5 88 fd ff ff 	mov    %rsi,-0x278(%rbp)
	  std::string __dynbuf;
  40fba0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  40fba7:	48 89 c7             	mov    %rax,%rdi
  40fbaa:	e8 37 4e ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  40fbaf:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  40fbb6:	00 00 00 00
  40fbba:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  40fbc1:	00 00 00 00
	  size_t __prec = 6;
  40fbc5:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  40fbcc:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  40fbd0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40fbd7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fbdb:	83 e0 06             	and    $0x6,%eax
  40fbde:	84 c0                	test   %al,%al
  40fbe0:	0f 95 c0             	setne  %al
  40fbe3:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  40fbe9:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  40fbf0:	84 c0                	test   %al,%al
  40fbf2:	74 20                	je     40fc14 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x96>
	    __prec = _M_spec._M_get_precision(__fc);
  40fbf4:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40fbfb:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  40fc02:	48 89 d6             	mov    %rdx,%rsi
  40fc05:	48 89 c7             	mov    %rax,%rdi
  40fc08:	e8 27 53 00 00       	call   414f34 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  40fc0d:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  40fc14:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  40fc1b:	48 83 c0 01          	add    $0x1,%rax
  40fc1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  40fc23:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  40fc2a:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  40fc2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  40fc32:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  40fc39:	00 00 00
	  bool __upper = false;
  40fc3c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  40fc40:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  40fc44:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  40fc48:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40fc4f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fc53:	c0 e8 03             	shr    $0x3,%al
  40fc56:	83 e0 0f             	and    $0xf,%eax
  40fc59:	0f b6 c0             	movzbl %al,%eax
  40fc5c:	89 c0                	mov    %eax,%eax
  40fc5e:	48 8b 04 c5 48 d2 41 	mov    0x41d248(,%rax,8),%rax
  40fc65:	00
  40fc66:	ff e0                	jmp    *%rax
	      __upper = true;
  40fc68:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  40fc6c:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  40fc70:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40fc77:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fc7b:	83 e0 78             	and    $0x78,%eax
  40fc7e:	3c 10                	cmp    $0x10,%al
  40fc80:	74 04                	je     40fc86 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
		__expc = 'p';
  40fc82:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  40fc86:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  40fc8d:	00 00 00
	      break;
  40fc90:	eb 67                	jmp    40fcf9 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  40fc92:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  40fc96:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  40fc9a:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  40fca1:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  40fca8:	00 00 00
	      break;
  40fcab:	eb 4c                	jmp    40fcf9 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  40fcad:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  40fcb1:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  40fcb8:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  40fcbf:	00 00 00
	      break;
  40fcc2:	eb 35                	jmp    40fcf9 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  40fcc4:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  40fcc8:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  40fccc:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  40fcd0:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  40fcd7:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  40fcde:	00 00 00
	      break;
  40fce1:	eb 16                	jmp    40fcf9 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      if (__use_prec)
  40fce3:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  40fcea:	84 c0                	test   %al,%al
  40fcec:	74 0a                	je     40fcf8 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
		__fmt = chars_format::general;
  40fcee:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  40fcf5:	00 00 00
	      break;
  40fcf8:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  40fcf9:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  40fd00:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  40fd07:	48 8d 85 94 fd ff ff 	lea    -0x26c(%rbp),%rax
  40fd0e:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  40fd15:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  40fd1c:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  40fd23:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  40fd2a:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  40fd31:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40fd35:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40fd39:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  40fd40:	48 89 ce             	mov    %rcx,%rsi
  40fd43:	48 89 c7             	mov    %rax,%rdi
  40fd46:	e8 03 fd ff ff       	call   40fa4e <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  40fd4b:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  40fd52:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  40fd59:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  40fd5f:	83 f8 4b             	cmp    $0x4b,%eax
  40fd62:	0f 94 c0             	sete   %al
  40fd65:	0f b6 c0             	movzbl %al,%eax
  40fd68:	48 85 c0             	test   %rax,%rax
  40fd6b:	0f 84 63 01 00 00    	je     40fed4 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x356>
	      size_t __guess = 8 + __prec;
  40fd71:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  40fd78:	48 83 c0 08          	add    $0x8,%rax
  40fd7c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  40fd80:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  40fd86:	83 f8 02             	cmp    $0x2,%eax
  40fd89:	75 58                	jne    40fde3 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x265>
		      int __exp{};
  40fd8b:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  40fd92:	00 00 00
			__builtin_frexpf(__v, &__exp);
  40fd95:	8b 85 94 fd ff ff    	mov    -0x26c(%rbp),%eax
  40fd9b:	48 8d 95 d4 fd ff ff 	lea    -0x22c(%rbp),%rdx
  40fda2:	48 89 d7             	mov    %rdx,%rdi
  40fda5:	66 0f 6e c0          	movd   %eax,%xmm0
  40fda9:	e8 92 42 ff ff       	call   404040 <frexpf@plt>
		      if (__exp > 0)
  40fdae:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  40fdb4:	85 c0                	test   %eax,%eax
  40fdb6:	7e 2b                	jle    40fde3 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x265>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  40fdb8:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  40fdbe:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  40fdc4:	89 d0                	mov    %edx,%eax
  40fdc6:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  40fdcd:	48 c1 e8 20          	shr    $0x20,%rax
  40fdd1:	29 c2                	sub    %eax,%edx
  40fdd3:	d1 ea                	shr    %edx
  40fdd5:	01 d0                	add    %edx,%eax
  40fdd7:	c1 e8 0d             	shr    $0xd,%eax
  40fdda:	83 c0 01             	add    $0x1,%eax
  40fddd:	89 c0                	mov    %eax,%eax
  40fddf:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  40fde3:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  40fdea:	00
  40fdeb:	77 08                	ja     40fdf5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x277>
		__guess = sizeof(__buf) * 2;
  40fded:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  40fdf4:	00
	      __dynbuf.reserve(__guess);
  40fdf5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40fdf9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  40fe00:	48 89 d6             	mov    %rdx,%rsi
  40fe03:	48 89 c7             	mov    %rax,%rdi
  40fe06:	e8 c5 a5 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  40fe0b:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  40fe12:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  40fe19:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  40fe20:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  40fe27:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  40fe2e:	48 89 c7             	mov    %rax,%rdi
  40fe31:	e8 6c a5 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40fe36:	48 01 c0             	add    %rax,%rax
  40fe39:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  40fe40:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  40fe47:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  40fe4e:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40fe55:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  40fe5c:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  40fe63:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  40fe6a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  40fe71:	48 89 ce             	mov    %rcx,%rsi
  40fe74:	48 89 c7             	mov    %rax,%rdi
  40fe77:	e8 8a 6e 00 00       	call   416d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  40fe7c:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  40fe7d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  40fe84:	48 89 c7             	mov    %rax,%rdi
  40fe87:	e8 d6 9c ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  40fe8c:	48 83 c0 01          	add    $0x1,%rax
  40fe90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  40fe94:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  40fe9b:	48 89 c7             	mov    %rax,%rdi
  40fe9e:	e8 bf 9c ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  40fea3:	48 89 c3             	mov    %rax,%rbx
  40fea6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  40fead:	48 89 c7             	mov    %rax,%rdi
  40feb0:	e8 6b 4d ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40feb5:	48 01 d8             	add    %rbx,%rax
  40feb8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  40febc:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  40fec2:	83 f8 4b             	cmp    $0x4b,%eax
  40fec5:	0f 94 c0             	sete   %al
  40fec8:	0f b6 c0             	movzbl %al,%eax
  40fecb:	48 85 c0             	test   %rax,%rax
  40fece:	0f 85 37 ff ff ff    	jne    40fe0b <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x28d>
	  if (__upper)
  40fed4:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  40fed8:	74 35                	je     40ff0f <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x391>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  40feda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fede:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40fee2:	eb 1e                	jmp    40ff02 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x384>
		*__p = std::toupper(*__p);
  40fee4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40fee8:	0f b6 00             	movzbl (%rax),%eax
  40feeb:	0f be c0             	movsbl %al,%eax
  40feee:	89 c7                	mov    %eax,%edi
  40fef0:	e8 8b 44 ff ff       	call   404380 <toupper@plt>
  40fef5:	89 c2                	mov    %eax,%edx
  40fef7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40fefb:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  40fefd:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  40ff02:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40ff09:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40ff0d:	75 d5                	jne    40fee4 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x366>
	  bool __have_sign = true;
  40ff0f:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  40ff13:	8b 85 94 fd ff ff    	mov    -0x26c(%rbp),%eax
  40ff19:	25 00 00 00 80       	and    $0x80000000,%eax
  40ff1e:	85 c0                	test   %eax,%eax
  40ff20:	75 42                	jne    40ff64 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
	      if (_M_spec._M_sign == _Sign_plus)
  40ff22:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40ff29:	0f b6 00             	movzbl (%rax),%eax
  40ff2c:	83 e0 0c             	and    $0xc,%eax
  40ff2f:	3c 04                	cmp    $0x4,%al
  40ff31:	75 0e                	jne    40ff41 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
		*--__start = '+';
  40ff33:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  40ff38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ff3c:	c6 00 2b             	movb   $0x2b,(%rax)
  40ff3f:	eb 23                	jmp    40ff64 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
	      else if (_M_spec._M_sign == _Sign_space)
  40ff41:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40ff48:	0f b6 00             	movzbl (%rax),%eax
  40ff4b:	83 e0 0c             	and    $0xc,%eax
  40ff4e:	3c 0c                	cmp    $0xc,%al
  40ff50:	75 0e                	jne    40ff60 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e2>
		*--__start = ' ';
  40ff52:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  40ff57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ff5b:	c6 00 20             	movb   $0x20,(%rax)
  40ff5e:	eb 04                	jmp    40ff64 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
		__have_sign = false;
  40ff60:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  40ff64:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40ff6b:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40ff6f:	48 89 c2             	mov    %rax,%rdx
  40ff72:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ff76:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40ff7d:	48 89 ce             	mov    %rcx,%rsi
  40ff80:	48 89 c7             	mov    %rax,%rdi
  40ff83:	e8 72 69 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  40ff88:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40ff8f:	0f b6 00             	movzbl (%rax),%eax
  40ff92:	83 e0 10             	and    $0x10,%eax
  40ff95:	84 c0                	test   %al,%al
  40ff97:	0f 84 29 04 00 00    	je     4103c6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
  40ff9d:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  40ffa4:	ff
  40ffa5:	f3 0f 10 0d 13 a5 00 	movss  0xa513(%rip),%xmm1        # 41a4c0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  40ffac:	00
  40ffad:	0f 54 c8             	andps  %xmm0,%xmm1
  40ffb0:	f3 0f 10 05 18 a5 00 	movss  0xa518(%rip),%xmm0        # 41a4d0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  40ffb7:	00
  40ffb8:	0f 2e c1             	ucomiss %xmm1,%xmm0
  40ffbb:	0f 92 c0             	setb   %al
  40ffbe:	83 f0 01             	xor    $0x1,%eax
  40ffc1:	0f b6 c0             	movzbl %al,%eax
  40ffc4:	85 c0                	test   %eax,%eax
  40ffc6:	0f 84 fa 03 00 00    	je     4103c6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
	      string_view __s = __narrow_str;
  40ffcc:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  40ffd3:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  40ffda:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  40ffe1:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  40ffe8:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  40ffef:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  40fff0:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  40fff7:	ba 00 00 00 00       	mov    $0x0,%edx
  40fffc:	be 2e 00 00 00       	mov    $0x2e,%esi
  410001:	48 89 c7             	mov    %rax,%rdi
  410004:	e8 bf 78 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  410009:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  41000d:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  410012:	0f 84 a5 00 00 00    	je     4100bd <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x53f>
		  __p = __s.find(__expc, __d + 1);
  410018:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41001c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  410020:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  410024:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41002b:	89 ce                	mov    %ecx,%esi
  41002d:	48 89 c7             	mov    %rax,%rdi
  410030:	e8 93 78 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  410035:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  410039:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  41003e:	75 13                	jne    410053 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4d5>
		    __p = __s.size();
  410040:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410047:	48 89 c7             	mov    %rax,%rdi
  41004a:	e8 ab 58 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41004f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  410053:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  410057:	0f 84 af 00 00 00    	je     41010c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
		      if (__s[__have_sign] != '0')
  41005d:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  410061:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410068:	48 89 d6             	mov    %rdx,%rsi
  41006b:	48 89 c7             	mov    %rax,%rdi
  41006e:	e8 99 58 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  410073:	0f b6 00             	movzbl (%rax),%eax
  410076:	3c 30                	cmp    $0x30,%al
  410078:	0f 95 c0             	setne  %al
  41007b:	84 c0                	test   %al,%al
  41007d:	74 15                	je     410094 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x516>
			__sigfigs = __p - __have_sign - 1;
  41007f:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  410083:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410087:	48 29 c2             	sub    %rax,%rdx
  41008a:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  41008e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  410092:	eb 78                	jmp    41010c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  410094:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410098:	48 8d 50 01          	lea    0x1(%rax),%rdx
  41009c:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4100a3:	be 30 00 00 00       	mov    $0x30,%esi
  4100a8:	48 89 c7             	mov    %rax,%rdi
  4100ab:	e8 5a 3c 00 00       	call   413d0a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  4100b0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4100b4:	48 29 c2             	sub    %rax,%rdx
  4100b7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4100bb:	eb 4f                	jmp    41010c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
		  __p = __s.find(__expc); // Find the exponent, if present.
  4100bd:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4100c1:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4100c8:	ba 00 00 00 00       	mov    $0x0,%edx
  4100cd:	89 ce                	mov    %ecx,%esi
  4100cf:	48 89 c7             	mov    %rax,%rdi
  4100d2:	e8 f1 77 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4100d7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  4100db:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  4100e0:	75 13                	jne    4100f5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x577>
		    __p = __s.size();
  4100e2:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4100e9:	48 89 c7             	mov    %rax,%rdi
  4100ec:	e8 09 58 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4100f1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  4100f5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4100f9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  4100fd:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  410101:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  410105:	48 29 c2             	sub    %rax,%rdx
  410108:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  41010c:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  410110:	74 1b                	je     41012d <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5af>
  410112:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  410119:	48 85 c0             	test   %rax,%rax
  41011c:	74 0f                	je     41012d <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5af>
		  __z = __prec - __sigfigs;
  41011e:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  410125:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  410129:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  41012d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410131:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  410135:	0f 94 c0             	sete   %al
  410138:	0f b6 d0             	movzbl %al,%edx
  41013b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41013f:	48 01 d0             	add    %rdx,%rax
  410142:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  410146:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  41014b:	0f 84 75 02 00 00    	je     4103c6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  410151:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410158:	48 89 c7             	mov    %rax,%rdi
  41015b:	e8 5a de ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  410160:	84 c0                	test   %al,%al
  410162:	74 1e                	je     410182 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x604>
  410164:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  41016b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41016f:	48 29 c2             	sub    %rax,%rdx
  410172:	48 89 d0             	mov    %rdx,%rax
  410175:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  410179:	72 07                	jb     410182 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x604>
  41017b:	b8 01 00 00 00       	mov    $0x1,%eax
  410180:	eb 05                	jmp    410187 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x609>
  410182:	b8 00 00 00 00       	mov    $0x0,%eax
  410187:	84 c0                	test   %al,%al
  410189:	0f 84 d7 00 00 00    	je     410266 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6e8>
					__s.size() - __p);
  41018f:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410196:	48 89 c7             	mov    %rax,%rdi
  410199:	e8 5c 57 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  41019e:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  4101a2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4101a6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4101aa:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  4101ae:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  4101b2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4101b6:	48 01 d1             	add    %rdx,%rcx
  4101b9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4101bd:	48 01 d1             	add    %rdx,%rcx
  4101c0:	48 89 c2             	mov    %rax,%rdx
  4101c3:	48 89 cf             	mov    %rcx,%rdi
  4101c6:	e8 65 41 ff ff       	call   404330 <memmove@plt>
		      if (__d == __p)
  4101cb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4101cf:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4101d3:	75 16                	jne    4101eb <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x66d>
			__start[__p++] = '.';
  4101d5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4101d9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4101dd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4101e1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4101e5:	48 01 c8             	add    %rcx,%rax
  4101e8:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  4101eb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4101ef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4101f3:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4101f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4101fb:	48 89 c2             	mov    %rax,%rdx
  4101fe:	be 30 00 00 00       	mov    $0x30,%esi
  410203:	48 89 cf             	mov    %rcx,%rdi
  410206:	e8 f5 3e ff ff       	call   404100 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  41020b:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410212:	48 89 c7             	mov    %rax,%rdi
  410215:	e8 ce 66 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  41021a:	48 89 c3             	mov    %rax,%rbx
  41021d:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410224:	48 89 c7             	mov    %rax,%rdi
  410227:	e8 ce 56 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41022c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  410230:	48 01 c2             	add    %rax,%rdx
  410233:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  41023a:	48 89 de             	mov    %rbx,%rsi
  41023d:	48 89 c7             	mov    %rax,%rdi
  410240:	e8 b5 66 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  410245:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  41024c:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  410253:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  41025a:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  410261:	e9 60 01 00 00       	jmp    4103c6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
		      __dynbuf.reserve(__s.size() + __extras);
  410266:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41026d:	48 89 c7             	mov    %rax,%rdi
  410270:	e8 85 56 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410275:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  410279:	48 01 c2             	add    %rax,%rdx
  41027c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410283:	48 89 d6             	mov    %rdx,%rsi
  410286:	48 89 c7             	mov    %rax,%rdi
  410289:	e8 42 a1 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  41028e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410295:	48 89 c7             	mov    %rax,%rdi
  410298:	e8 1d dd ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41029d:	84 c0                	test   %al,%al
  41029f:	0f 84 c5 00 00 00    	je     41036a <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7ec>
			  __dynbuf = __s.substr(0, __p);
  4102a5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4102a9:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4102b0:	be 00 00 00 00       	mov    $0x0,%esi
  4102b5:	48 89 c7             	mov    %rax,%rdi
  4102b8:	e8 67 a8 ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  4102bd:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4102c4:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4102cb:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  4102d2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4102d9:	48 89 d6             	mov    %rdx,%rsi
  4102dc:	48 89 c7             	mov    %rax,%rdi
  4102df:	e8 84 3a 00 00       	call   413d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  4102e4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4102e8:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4102ec:	75 14                	jne    410302 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x784>
			    __dynbuf += '.';
  4102ee:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4102f5:	be 2e 00 00 00       	mov    $0x2e,%esi
  4102fa:	48 89 c7             	mov    %rax,%rdi
  4102fd:	e8 8c 3a 00 00       	call   413d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  410302:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  410307:	74 1b                	je     410324 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7a6>
			    __dynbuf.append(__z, '0');
  410309:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  41030d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410314:	ba 30 00 00 00       	mov    $0x30,%edx
  410319:	48 89 ce             	mov    %rcx,%rsi
  41031c:	48 89 c7             	mov    %rax,%rdi
  41031f:	e8 94 3a 00 00       	call   413db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  410324:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  410328:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41032f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  410336:	48 89 ce             	mov    %rcx,%rsi
  410339:	48 89 c7             	mov    %rax,%rdi
  41033c:	e8 e3 a7 ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  410341:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410348:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  41034f:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  410356:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41035d:	48 89 d6             	mov    %rdx,%rsi
  410360:	48 89 c7             	mov    %rax,%rdi
  410363:	e8 9a 3a 00 00       	call   413e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  410368:	eb 3f                	jmp    4103a9 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x82b>
			  __dynbuf.insert(__p, __extras, '0');
  41036a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41036e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  410372:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410379:	b9 30 00 00 00       	mov    $0x30,%ecx
  41037e:	48 89 c7             	mov    %rax,%rdi
  410381:	e8 d6 3a 00 00       	call   413e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  410386:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41038a:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41038e:	75 19                	jne    4103a9 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x82b>
			    __dynbuf[__p] = '.';
  410390:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410394:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41039b:	48 89 d6             	mov    %rdx,%rsi
  41039e:	48 89 c7             	mov    %rax,%rdi
  4103a1:	e8 10 3b 00 00       	call   413eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  4103a6:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  4103a9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4103b0:	48 89 c7             	mov    %rax,%rdi
  4103b3:	e8 78 70 ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4103b8:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4103bf:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  4103c6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4103cd:	48 89 c7             	mov    %rax,%rdi
  4103d0:	e8 11 46 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  4103d5:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  4103dc:	00 00 00 00
  4103e0:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  4103e7:	00 00 00 00
	    __str = __narrow_str;
  4103eb:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4103f2:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4103f9:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  410400:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  410407:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41040e:	0f b6 00             	movzbl (%rax),%eax
  410411:	83 e0 20             	and    $0x20,%eax
  410414:	84 c0                	test   %al,%al
  410416:	0f 84 ea 00 00 00    	je     410506 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
  41041c:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  410423:	ff
  410424:	f3 0f 10 0d 94 a0 00 	movss  0xa094(%rip),%xmm1        # 41a4c0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  41042b:	00
  41042c:	0f 54 c8             	andps  %xmm0,%xmm1
  41042f:	f3 0f 10 05 99 a0 00 	movss  0xa099(%rip),%xmm0        # 41a4d0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  410436:	00
  410437:	0f 2e c1             	ucomiss %xmm1,%xmm0
  41043a:	0f 92 c0             	setb   %al
  41043d:	83 f0 01             	xor    $0x1,%eax
  410440:	0f b6 c0             	movzbl %al,%eax
  410443:	85 c0                	test   %eax,%eax
  410445:	0f 84 bb 00 00 00    	je     410506 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41044b:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  410452:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  410459:	48 89 d6             	mov    %rdx,%rsi
  41045c:	48 89 c7             	mov    %rax,%rdi
  41045f:	e8 ca 40 00 00       	call   41452e <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  410464:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  410468:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  41046f:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  410476:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  41047d:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  410484:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  41048b:	4d 89 c1             	mov    %r8,%r9
  41048e:	41 89 c8             	mov    %ecx,%r8d
  410491:	48 89 d1             	mov    %rdx,%rcx
  410494:	48 89 c2             	mov    %rax,%rdx
  410497:	e8 52 4c 00 00       	call   4150ee <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  41049c:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4104a3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4104aa:	48 89 d6             	mov    %rdx,%rsi
  4104ad:	48 89 c7             	mov    %rax,%rdi
  4104b0:	e8 bf 40 00 00       	call   414574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  4104b5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4104bc:	48 89 c7             	mov    %rax,%rdi
  4104bf:	e8 be 64 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4104c4:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4104cb:	48 89 c7             	mov    %rax,%rdi
  4104ce:	e8 fd 3d ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  4104d3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4104da:	48 89 c7             	mov    %rax,%rdi
  4104dd:	e8 d8 da ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4104e2:	83 f0 01             	xor    $0x1,%eax
  4104e5:	84 c0                	test   %al,%al
  4104e7:	74 1d                	je     410506 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
		__str = __wstr;
  4104e9:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4104f0:	48 89 c7             	mov    %rax,%rdi
  4104f3:	e8 38 6f ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4104f8:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  4104ff:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  410506:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41050d:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  410514:	48 89 d6             	mov    %rdx,%rsi
  410517:	48 89 c7             	mov    %rax,%rdi
  41051a:	e8 6b 4e 00 00       	call   41538a <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41051f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  410523:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41052a:	48 89 c7             	mov    %rax,%rdi
  41052d:	e8 c8 53 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410532:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  410536:	0f 93 c0             	setae  %al
  410539:	84 c0                	test   %al,%al
  41053b:	74 36                	je     410573 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9f5>
	    return __format::__write(__fc.out(), __str);
  41053d:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  410544:	48 89 c7             	mov    %rax,%rdi
  410547:	e8 a6 a4 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  41054c:	48 89 c1             	mov    %rax,%rcx
  41054f:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  410556:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  41055d:	48 89 d6             	mov    %rdx,%rsi
  410560:	48 89 c2             	mov    %rax,%rdx
  410563:	48 89 cf             	mov    %rcx,%rdi
  410566:	e8 a3 d1 ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41056b:	48 89 c3             	mov    %rax,%rbx
  41056e:	e9 8f 01 00 00       	jmp    410702 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb84>
	  char32_t __fill_char = _M_spec._M_fill;
  410573:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41057a:	8b 40 08             	mov    0x8(%rax),%eax
  41057d:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  410580:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410587:	0f b6 00             	movzbl (%rax),%eax
  41058a:	83 e0 03             	and    $0x3,%eax
  41058d:	0f b6 c0             	movzbl %al,%eax
  410590:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  410593:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41059a:	48 89 c7             	mov    %rax,%rdi
  41059d:	e8 58 53 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4105a2:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4105a6:	48 29 c2             	sub    %rax,%rdx
  4105a9:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  4105ad:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  4105b4:	48 89 c7             	mov    %rax,%rdi
  4105b7:	e8 36 a4 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4105bc:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  4105c3:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  4105c7:	0f 85 f8 00 00 00    	jne    4106c5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
	      __align = _Align_right;
  4105cd:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  4105d4:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4105db:	0f b6 00             	movzbl (%rax),%eax
  4105de:	83 e0 40             	and    $0x40,%eax
  4105e1:	84 c0                	test   %al,%al
  4105e3:	0f 84 d5 00 00 00    	je     4106be <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb40>
  4105e9:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  4105f0:	ff
  4105f1:	f3 0f 10 0d c7 9e 00 	movss  0x9ec7(%rip),%xmm1        # 41a4c0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  4105f8:	00
  4105f9:	0f 54 c8             	andps  %xmm0,%xmm1
  4105fc:	f3 0f 10 05 cc 9e 00 	movss  0x9ecc(%rip),%xmm0        # 41a4d0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  410603:	00
  410604:	0f 2e c1             	ucomiss %xmm1,%xmm0
  410607:	0f 92 c0             	setb   %al
  41060a:	83 f0 01             	xor    $0x1,%eax
  41060d:	0f b6 c0             	movzbl %al,%eax
  410610:	85 c0                	test   %eax,%eax
  410612:	0f 84 a6 00 00 00    	je     4106be <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb40>
		  __fill_char = _CharT('0');
  410618:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  41061f:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  410626:	be 00 00 00 00       	mov    $0x0,%esi
  41062b:	48 89 c7             	mov    %rax,%rdi
  41062e:	e8 d9 52 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  410633:	0f b6 00             	movzbl (%rax),%eax
  410636:	0f be c0             	movsbl %al,%eax
  410639:	89 c7                	mov    %eax,%edi
  41063b:	e8 a4 4a ff ff       	call   4050e4 <_ZNSt8__format11__is_xdigitEc>
  410640:	83 f0 01             	xor    $0x1,%eax
  410643:	84 c0                	test   %al,%al
  410645:	74 7e                	je     4106c5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
		      *__out++ = __str[0];
  410647:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41064e:	be 00 00 00 00       	mov    $0x0,%esi
  410653:	48 89 c7             	mov    %rax,%rdi
  410656:	e8 b1 52 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41065b:	0f b6 00             	movzbl (%rax),%eax
  41065e:	0f be c0             	movsbl %al,%eax
  410661:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  410668:	00 00 00
      operator++(int) { return *this; }
  41066b:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  410672:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  410679:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  410680:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  410687:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  41068d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  410694:	48 8b 00             	mov    (%rax),%rax
  410697:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  41069e:	89 d6                	mov    %edx,%esi
  4106a0:	48 89 c7             	mov    %rax,%rdi
  4106a3:	e8 52 67 00 00       	call   416dfa <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  4106a8:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4106af:	be 01 00 00 00       	mov    $0x1,%esi
  4106b4:	48 89 c7             	mov    %rax,%rdi
  4106b7:	e8 4e 4d 00 00       	call   41540a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4106bc:	eb 07                	jmp    4106c5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
		__fill_char = _CharT(' ');
  4106be:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  4106c5:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  4106cc:	48 89 c7             	mov    %rax,%rdi
  4106cf:	e8 97 86 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4106d4:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  4106d8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  4106dc:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  4106df:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  4106e6:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4106ed:	48 8b 00             	mov    (%rax),%rax
  4106f0:	45 89 c1             	mov    %r8d,%r9d
  4106f3:	49 89 f8             	mov    %rdi,%r8
  4106f6:	48 89 c7             	mov    %rax,%rdi
  4106f9:	e8 c9 4f 00 00       	call   4156c7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  4106fe:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  410701:	90                   	nop
	}
  410702:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  410709:	48 89 c7             	mov    %rax,%rdi
  41070c:	e8 71 62 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  410711:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410718:	48 89 c7             	mov    %rax,%rdi
  41071b:	e8 62 62 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  410720:	48 89 d8             	mov    %rbx,%rax
  410723:	eb 45                	jmp    41076a <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbec>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  410725:	48 89 c3             	mov    %rax,%rbx
  410728:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41072f:	48 89 c7             	mov    %rax,%rdi
  410732:	e8 99 3b ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
  410737:	eb 03                	jmp    41073c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbbe>
	}
  410739:	48 89 c3             	mov    %rax,%rbx
  41073c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  410743:	48 89 c7             	mov    %rax,%rdi
  410746:	e8 37 62 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41074b:	eb 03                	jmp    410750 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbd2>
  41074d:	48 89 c3             	mov    %rax,%rbx
  410750:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410757:	48 89 c7             	mov    %rax,%rdi
  41075a:	e8 23 62 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41075f:	48 89 d8             	mov    %rbx,%rax
  410762:	48 89 c7             	mov    %rax,%rdi
  410765:	e8 06 3c ff ff       	call   404370 <_Unwind_Resume@plt>
  41076a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41076e:	c9                   	leave
  41076f:	c3                   	ret

0000000000410770 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  410770:	55                   	push   %rbp
  410771:	48 89 e5             	mov    %rsp,%rbp
  410774:	48 83 ec 20          	sub    $0x20,%rsp
  410778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41077c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  410780:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  410784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410788:	48 8b 00             	mov    (%rax),%rax
  41078b:	0f b6 00             	movzbl (%rax),%eax
  41078e:	84 c0                	test   %al,%al
  410790:	74 39                	je     4107cb <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x5b>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  410792:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410796:	48 8b 40 18          	mov    0x18(%rax),%rax
  41079a:	48 8b 00             	mov    (%rax),%rax
  41079d:	89 c1                	mov    %eax,%ecx
  41079f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4107a3:	48 8b 40 10          	mov    0x10(%rax),%rax
  4107a7:	8b 10                	mov    (%rax),%edx
  4107a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4107ad:	48 8b 40 08          	mov    0x8(%rax),%rax
  4107b1:	48 8b 38             	mov    (%rax),%rdi
  4107b4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4107b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4107bc:	66 48 0f 6e c7       	movq   %rdi,%xmm0
  4107c1:	48 89 c7             	mov    %rax,%rdi
  4107c4:	e8 77 39 ff ff       	call   404140 <_ZSt8to_charsPcS_dSt12chars_formati@plt>
  4107c9:	eb 61                	jmp    41082c <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xbc>
	    else if (__fmt != chars_format{})
  4107cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4107cf:	48 8b 40 10          	mov    0x10(%rax),%rax
  4107d3:	8b 00                	mov    (%rax),%eax
  4107d5:	85 c0                	test   %eax,%eax
  4107d7:	74 2f                	je     410808 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x98>
	      return __format::to_chars(__b, __e, __v, __fmt);
  4107d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4107dd:	48 8b 40 10          	mov    0x10(%rax),%rax
  4107e1:	8b 10                	mov    (%rax),%edx
  4107e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4107e7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4107eb:	48 8b 30             	mov    (%rax),%rsi
  4107ee:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4107f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4107f6:	66 48 0f 6e c6       	movq   %rsi,%xmm0
  4107fb:	48 89 ce             	mov    %rcx,%rsi
  4107fe:	48 89 c7             	mov    %rax,%rdi
  410801:	e8 2a 39 ff ff       	call   404130 <_ZSt8to_charsPcS_dSt12chars_format@plt>
  410806:	eb 24                	jmp    41082c <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xbc>
	      return __format::to_chars(__b, __e, __v);
  410808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41080c:	48 8b 40 08          	mov    0x8(%rax),%rax
  410810:	48 8b 08             	mov    (%rax),%rcx
  410813:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410817:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41081b:	66 48 0f 6e c1       	movq   %rcx,%xmm0
  410820:	48 89 d6             	mov    %rdx,%rsi
  410823:	48 89 c7             	mov    %rax,%rdi
  410826:	e8 45 38 ff ff       	call   404070 <_ZSt8to_charsPcS_d@plt>
  41082b:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  41082c:	c9                   	leave
  41082d:	c3                   	ret

000000000041082e <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  41082e:	55                   	push   %rbp
  41082f:	48 89 e5             	mov    %rsp,%rbp
  410832:	53                   	push   %rbx
  410833:	48 83 ec 28          	sub    $0x28,%rsp
  410837:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  41083b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  41083f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  410843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410847:	48 8b 00             	mov    (%rax),%rax
  41084a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41084e:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  410852:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  410856:	48 01 ca             	add    %rcx,%rdx
  410859:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  41085d:	48 83 c1 01          	add    $0x1,%rcx
  410861:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  410865:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  410869:	48 89 ce             	mov    %rcx,%rsi
  41086c:	48 89 c7             	mov    %rax,%rdi
  41086f:	e8 fc fe ff ff       	call   410770 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  410874:	48 89 03             	mov    %rax,(%rbx)
  410877:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  41087b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41087f:	48 8b 40 08          	mov    0x8(%rax),%rax
  410883:	8b 40 08             	mov    0x8(%rax),%eax
  410886:	85 c0                	test   %eax,%eax
  410888:	75 11                	jne    41089b <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  41088a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41088e:	48 8b 40 08          	mov    0x8(%rax),%rax
  410892:	48 8b 00             	mov    (%rax),%rax
  410895:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  410899:	eb 05                	jmp    4108a0 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  41089b:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  4108a0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4108a4:	c9                   	leave
  4108a5:	c3                   	ret

00000000004108a6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  4108a6:	55                   	push   %rbp
  4108a7:	48 89 e5             	mov    %rsp,%rbp
  4108aa:	53                   	push   %rbx
  4108ab:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  4108b2:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  4108b9:	f2 0f 11 85 90 fd ff 	movsd  %xmm0,-0x270(%rbp)
  4108c0:	ff
  4108c1:	48 89 b5 88 fd ff ff 	mov    %rsi,-0x278(%rbp)
	  std::string __dynbuf;
  4108c8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4108cf:	48 89 c7             	mov    %rax,%rdi
  4108d2:	e8 0f 41 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  4108d7:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  4108de:	00 00 00 00
  4108e2:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  4108e9:	00 00 00 00
	  size_t __prec = 6;
  4108ed:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  4108f4:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  4108f8:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4108ff:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410903:	83 e0 06             	and    $0x6,%eax
  410906:	84 c0                	test   %al,%al
  410908:	0f 95 c0             	setne  %al
  41090b:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  410911:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  410918:	84 c0                	test   %al,%al
  41091a:	74 20                	je     41093c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x96>
	    __prec = _M_spec._M_get_precision(__fc);
  41091c:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410923:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  41092a:	48 89 d6             	mov    %rdx,%rsi
  41092d:	48 89 c7             	mov    %rax,%rdi
  410930:	e8 ff 45 00 00       	call   414f34 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  410935:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  41093c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  410943:	48 83 c0 01          	add    $0x1,%rax
  410947:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  41094b:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  410952:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  410956:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  41095a:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  410961:	00 00 00
	  bool __upper = false;
  410964:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  410968:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  41096c:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  410970:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410977:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41097b:	c0 e8 03             	shr    $0x3,%al
  41097e:	83 e0 0f             	and    $0xf,%eax
  410981:	0f b6 c0             	movzbl %al,%eax
  410984:	89 c0                	mov    %eax,%eax
  410986:	48 8b 04 c5 90 d2 41 	mov    0x41d290(,%rax,8),%rax
  41098d:	00
  41098e:	ff e0                	jmp    *%rax
	      __upper = true;
  410990:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  410994:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  410998:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41099f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4109a3:	83 e0 78             	and    $0x78,%eax
  4109a6:	3c 10                	cmp    $0x10,%al
  4109a8:	74 04                	je     4109ae <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
		__expc = 'p';
  4109aa:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  4109ae:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  4109b5:	00 00 00
	      break;
  4109b8:	eb 67                	jmp    410a21 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  4109ba:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  4109be:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  4109c2:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  4109c9:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  4109d0:	00 00 00
	      break;
  4109d3:	eb 4c                	jmp    410a21 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  4109d5:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  4109d9:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  4109e0:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  4109e7:	00 00 00
	      break;
  4109ea:	eb 35                	jmp    410a21 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  4109ec:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  4109f0:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  4109f4:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  4109f8:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  4109ff:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  410a06:	00 00 00
	      break;
  410a09:	eb 16                	jmp    410a21 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      if (__use_prec)
  410a0b:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  410a12:	84 c0                	test   %al,%al
  410a14:	74 0a                	je     410a20 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
		__fmt = chars_format::general;
  410a16:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  410a1d:	00 00 00
	      break;
  410a20:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  410a21:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  410a28:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  410a2f:	48 8d 85 90 fd ff ff 	lea    -0x270(%rbp),%rax
  410a36:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  410a3d:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  410a44:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  410a4b:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  410a52:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  410a59:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  410a5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410a61:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  410a68:	48 89 ce             	mov    %rcx,%rsi
  410a6b:	48 89 c7             	mov    %rax,%rdi
  410a6e:	e8 fd fc ff ff       	call   410770 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  410a73:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  410a7a:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  410a81:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  410a87:	83 f8 4b             	cmp    $0x4b,%eax
  410a8a:	0f 94 c0             	sete   %al
  410a8d:	0f b6 c0             	movzbl %al,%eax
  410a90:	48 85 c0             	test   %rax,%rax
  410a93:	0f 84 65 01 00 00    	je     410bfe <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x358>
	      size_t __guess = 8 + __prec;
  410a99:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  410aa0:	48 83 c0 08          	add    $0x8,%rax
  410aa4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  410aa8:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  410aae:	83 f8 02             	cmp    $0x2,%eax
  410ab1:	75 5a                	jne    410b0d <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x267>
		      int __exp{};
  410ab3:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  410aba:	00 00 00
			__builtin_frexp(__v, &__exp);
  410abd:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  410ac4:	48 8d 95 d4 fd ff ff 	lea    -0x22c(%rbp),%rdx
  410acb:	48 89 d7             	mov    %rdx,%rdi
  410ace:	66 48 0f 6e c0       	movq   %rax,%xmm0
  410ad3:	e8 b8 38 ff ff       	call   404390 <frexp@plt>
		      if (__exp > 0)
  410ad8:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  410ade:	85 c0                	test   %eax,%eax
  410ae0:	7e 2b                	jle    410b0d <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x267>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  410ae2:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  410ae8:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  410aee:	89 d0                	mov    %edx,%eax
  410af0:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  410af7:	48 c1 e8 20          	shr    $0x20,%rax
  410afb:	29 c2                	sub    %eax,%edx
  410afd:	d1 ea                	shr    %edx
  410aff:	01 d0                	add    %edx,%eax
  410b01:	c1 e8 0d             	shr    $0xd,%eax
  410b04:	83 c0 01             	add    $0x1,%eax
  410b07:	89 c0                	mov    %eax,%eax
  410b09:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  410b0d:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  410b14:	00
  410b15:	77 08                	ja     410b1f <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x279>
		__guess = sizeof(__buf) * 2;
  410b17:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  410b1e:	00
	      __dynbuf.reserve(__guess);
  410b1f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  410b23:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410b2a:	48 89 d6             	mov    %rdx,%rsi
  410b2d:	48 89 c7             	mov    %rax,%rdi
  410b30:	e8 9b 98 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  410b35:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  410b3c:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  410b43:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  410b4a:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  410b51:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410b58:	48 89 c7             	mov    %rax,%rdi
  410b5b:	e8 42 98 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  410b60:	48 01 c0             	add    %rax,%rax
  410b63:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  410b6a:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  410b71:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  410b78:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  410b7f:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  410b86:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  410b8d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  410b94:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410b9b:	48 89 ce             	mov    %rcx,%rsi
  410b9e:	48 89 c7             	mov    %rax,%rdi
  410ba1:	e8 ae 64 00 00       	call   417054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  410ba6:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  410ba7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410bae:	48 89 c7             	mov    %rax,%rdi
  410bb1:	e8 ac 8f ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  410bb6:	48 83 c0 01          	add    $0x1,%rax
  410bba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  410bbe:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410bc5:	48 89 c7             	mov    %rax,%rdi
  410bc8:	e8 95 8f ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  410bcd:	48 89 c3             	mov    %rax,%rbx
  410bd0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410bd7:	48 89 c7             	mov    %rax,%rdi
  410bda:	e8 41 40 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  410bdf:	48 01 d8             	add    %rbx,%rax
  410be2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  410be6:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  410bec:	83 f8 4b             	cmp    $0x4b,%eax
  410bef:	0f 94 c0             	sete   %al
  410bf2:	0f b6 c0             	movzbl %al,%eax
  410bf5:	48 85 c0             	test   %rax,%rax
  410bf8:	0f 85 37 ff ff ff    	jne    410b35 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x28f>
	  if (__upper)
  410bfe:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  410c02:	74 35                	je     410c39 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x393>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  410c04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410c08:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  410c0c:	eb 1e                	jmp    410c2c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x386>
		*__p = std::toupper(*__p);
  410c0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410c12:	0f b6 00             	movzbl (%rax),%eax
  410c15:	0f be c0             	movsbl %al,%eax
  410c18:	89 c7                	mov    %eax,%edi
  410c1a:	e8 61 37 ff ff       	call   404380 <toupper@plt>
  410c1f:	89 c2                	mov    %eax,%edx
  410c21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410c25:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  410c27:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  410c2c:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  410c33:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  410c37:	75 d5                	jne    410c0e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x368>
	  bool __have_sign = true;
  410c39:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  410c3d:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  410c44:	ff
  410c45:	66 0f 50 c0          	movmskpd %xmm0,%eax
  410c49:	83 e0 01             	and    $0x1,%eax
  410c4c:	85 c0                	test   %eax,%eax
  410c4e:	75 42                	jne    410c92 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
	      if (_M_spec._M_sign == _Sign_plus)
  410c50:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410c57:	0f b6 00             	movzbl (%rax),%eax
  410c5a:	83 e0 0c             	and    $0xc,%eax
  410c5d:	3c 04                	cmp    $0x4,%al
  410c5f:	75 0e                	jne    410c6f <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c9>
		*--__start = '+';
  410c61:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  410c66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410c6a:	c6 00 2b             	movb   $0x2b,(%rax)
  410c6d:	eb 23                	jmp    410c92 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
	      else if (_M_spec._M_sign == _Sign_space)
  410c6f:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410c76:	0f b6 00             	movzbl (%rax),%eax
  410c79:	83 e0 0c             	and    $0xc,%eax
  410c7c:	3c 0c                	cmp    $0xc,%al
  410c7e:	75 0e                	jne    410c8e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e8>
		*--__start = ' ';
  410c80:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  410c85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410c89:	c6 00 20             	movb   $0x20,(%rax)
  410c8c:	eb 04                	jmp    410c92 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
		__have_sign = false;
  410c8e:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  410c92:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  410c99:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  410c9d:	48 89 c2             	mov    %rax,%rdx
  410ca0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410ca4:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  410cab:	48 89 ce             	mov    %rcx,%rsi
  410cae:	48 89 c7             	mov    %rax,%rdi
  410cb1:	e8 44 5c ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  410cb6:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410cbd:	0f b6 00             	movzbl (%rax),%eax
  410cc0:	83 e0 10             	and    $0x10,%eax
  410cc3:	84 c0                	test   %al,%al
  410cc5:	0f 84 2b 04 00 00    	je     4110f6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
  410ccb:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  410cd2:	ff
  410cd3:	f3 0f 7e 0d 05 98 00 	movq   0x9805(%rip),%xmm1        # 41a4e0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  410cda:	00
  410cdb:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  410cdf:	f2 0f 10 05 09 98 00 	movsd  0x9809(%rip),%xmm0        # 41a4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  410ce6:	00
  410ce7:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  410ceb:	0f 92 c0             	setb   %al
  410cee:	83 f0 01             	xor    $0x1,%eax
  410cf1:	0f b6 c0             	movzbl %al,%eax
  410cf4:	85 c0                	test   %eax,%eax
  410cf6:	0f 84 fa 03 00 00    	je     4110f6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
	      string_view __s = __narrow_str;
  410cfc:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  410d03:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  410d0a:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  410d11:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  410d18:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  410d1f:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  410d20:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410d27:	ba 00 00 00 00       	mov    $0x0,%edx
  410d2c:	be 2e 00 00 00       	mov    $0x2e,%esi
  410d31:	48 89 c7             	mov    %rax,%rdi
  410d34:	e8 8f 6b ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  410d39:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  410d3d:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  410d42:	0f 84 a5 00 00 00    	je     410ded <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x547>
		  __p = __s.find(__expc, __d + 1);
  410d48:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410d4c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  410d50:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  410d54:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410d5b:	89 ce                	mov    %ecx,%esi
  410d5d:	48 89 c7             	mov    %rax,%rdi
  410d60:	e8 63 6b ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  410d65:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  410d69:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  410d6e:	75 13                	jne    410d83 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4dd>
		    __p = __s.size();
  410d70:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410d77:	48 89 c7             	mov    %rax,%rdi
  410d7a:	e8 7b 4b ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410d7f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  410d83:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  410d87:	0f 84 af 00 00 00    	je     410e3c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
		      if (__s[__have_sign] != '0')
  410d8d:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  410d91:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410d98:	48 89 d6             	mov    %rdx,%rsi
  410d9b:	48 89 c7             	mov    %rax,%rdi
  410d9e:	e8 69 4b ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  410da3:	0f b6 00             	movzbl (%rax),%eax
  410da6:	3c 30                	cmp    $0x30,%al
  410da8:	0f 95 c0             	setne  %al
  410dab:	84 c0                	test   %al,%al
  410dad:	74 15                	je     410dc4 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x51e>
			__sigfigs = __p - __have_sign - 1;
  410daf:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  410db3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410db7:	48 29 c2             	sub    %rax,%rdx
  410dba:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  410dbe:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  410dc2:	eb 78                	jmp    410e3c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  410dc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410dc8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  410dcc:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410dd3:	be 30 00 00 00       	mov    $0x30,%esi
  410dd8:	48 89 c7             	mov    %rax,%rdi
  410ddb:	e8 2a 2f 00 00       	call   413d0a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  410de0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410de4:	48 29 c2             	sub    %rax,%rdx
  410de7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  410deb:	eb 4f                	jmp    410e3c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
		  __p = __s.find(__expc); // Find the exponent, if present.
  410ded:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  410df1:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410df8:	ba 00 00 00 00       	mov    $0x0,%edx
  410dfd:	89 ce                	mov    %ecx,%esi
  410dff:	48 89 c7             	mov    %rax,%rdi
  410e02:	e8 c1 6a ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  410e07:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  410e0b:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  410e10:	75 13                	jne    410e25 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57f>
		    __p = __s.size();
  410e12:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410e19:	48 89 c7             	mov    %rax,%rdi
  410e1c:	e8 d9 4a ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410e21:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  410e25:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  410e29:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  410e2d:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  410e31:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  410e35:	48 29 c2             	sub    %rax,%rdx
  410e38:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  410e3c:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  410e40:	74 1b                	je     410e5d <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5b7>
  410e42:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  410e49:	48 85 c0             	test   %rax,%rax
  410e4c:	74 0f                	je     410e5d <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5b7>
		  __z = __prec - __sigfigs;
  410e4e:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  410e55:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  410e59:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  410e5d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410e61:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  410e65:	0f 94 c0             	sete   %al
  410e68:	0f b6 d0             	movzbl %al,%edx
  410e6b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  410e6f:	48 01 d0             	add    %rdx,%rax
  410e72:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  410e76:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  410e7b:	0f 84 75 02 00 00    	je     4110f6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  410e81:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410e88:	48 89 c7             	mov    %rax,%rdi
  410e8b:	e8 2a d1 ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  410e90:	84 c0                	test   %al,%al
  410e92:	74 1e                	je     410eb2 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x60c>
  410e94:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  410e9b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  410e9f:	48 29 c2             	sub    %rax,%rdx
  410ea2:	48 89 d0             	mov    %rdx,%rax
  410ea5:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  410ea9:	72 07                	jb     410eb2 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x60c>
  410eab:	b8 01 00 00 00       	mov    $0x1,%eax
  410eb0:	eb 05                	jmp    410eb7 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x611>
  410eb2:	b8 00 00 00 00       	mov    $0x0,%eax
  410eb7:	84 c0                	test   %al,%al
  410eb9:	0f 84 d7 00 00 00    	je     410f96 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6f0>
					__s.size() - __p);
  410ebf:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410ec6:	48 89 c7             	mov    %rax,%rdi
  410ec9:	e8 2c 4a ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  410ece:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  410ed2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410ed6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410eda:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  410ede:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  410ee2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  410ee6:	48 01 d1             	add    %rdx,%rcx
  410ee9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410eed:	48 01 d1             	add    %rdx,%rcx
  410ef0:	48 89 c2             	mov    %rax,%rdx
  410ef3:	48 89 cf             	mov    %rcx,%rdi
  410ef6:	e8 35 34 ff ff       	call   404330 <memmove@plt>
		      if (__d == __p)
  410efb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410eff:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  410f03:	75 16                	jne    410f1b <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x675>
			__start[__p++] = '.';
  410f05:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410f09:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  410f0d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  410f11:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  410f15:	48 01 c8             	add    %rcx,%rax
  410f18:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  410f1b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410f1f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  410f23:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  410f27:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  410f2b:	48 89 c2             	mov    %rax,%rdx
  410f2e:	be 30 00 00 00       	mov    $0x30,%esi
  410f33:	48 89 cf             	mov    %rcx,%rdi
  410f36:	e8 c5 31 ff ff       	call   404100 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  410f3b:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410f42:	48 89 c7             	mov    %rax,%rdi
  410f45:	e8 9e 59 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  410f4a:	48 89 c3             	mov    %rax,%rbx
  410f4d:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410f54:	48 89 c7             	mov    %rax,%rdi
  410f57:	e8 9e 49 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410f5c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  410f60:	48 01 c2             	add    %rax,%rdx
  410f63:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  410f6a:	48 89 de             	mov    %rbx,%rsi
  410f6d:	48 89 c7             	mov    %rax,%rdi
  410f70:	e8 85 59 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  410f75:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  410f7c:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  410f83:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  410f8a:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  410f91:	e9 60 01 00 00       	jmp    4110f6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
		      __dynbuf.reserve(__s.size() + __extras);
  410f96:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410f9d:	48 89 c7             	mov    %rax,%rdi
  410fa0:	e8 55 49 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410fa5:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  410fa9:	48 01 c2             	add    %rax,%rdx
  410fac:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410fb3:	48 89 d6             	mov    %rdx,%rsi
  410fb6:	48 89 c7             	mov    %rax,%rdi
  410fb9:	e8 12 94 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  410fbe:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410fc5:	48 89 c7             	mov    %rax,%rdi
  410fc8:	e8 ed cf ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  410fcd:	84 c0                	test   %al,%al
  410fcf:	0f 84 c5 00 00 00    	je     41109a <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7f4>
			  __dynbuf = __s.substr(0, __p);
  410fd5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410fd9:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  410fe0:	be 00 00 00 00       	mov    $0x0,%esi
  410fe5:	48 89 c7             	mov    %rax,%rdi
  410fe8:	e8 37 9b ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  410fed:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  410ff4:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  410ffb:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  411002:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411009:	48 89 d6             	mov    %rdx,%rsi
  41100c:	48 89 c7             	mov    %rax,%rdi
  41100f:	e8 54 2d 00 00       	call   413d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  411014:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411018:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41101c:	75 14                	jne    411032 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x78c>
			    __dynbuf += '.';
  41101e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411025:	be 2e 00 00 00       	mov    $0x2e,%esi
  41102a:	48 89 c7             	mov    %rax,%rdi
  41102d:	e8 5c 2d 00 00       	call   413d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  411032:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  411037:	74 1b                	je     411054 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7ae>
			    __dynbuf.append(__z, '0');
  411039:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  41103d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411044:	ba 30 00 00 00       	mov    $0x30,%edx
  411049:	48 89 ce             	mov    %rcx,%rsi
  41104c:	48 89 c7             	mov    %rax,%rdi
  41104f:	e8 64 2d 00 00       	call   413db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  411054:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  411058:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41105f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  411066:	48 89 ce             	mov    %rcx,%rsi
  411069:	48 89 c7             	mov    %rax,%rdi
  41106c:	e8 b3 9a ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  411071:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  411078:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  41107f:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  411086:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41108d:	48 89 d6             	mov    %rdx,%rsi
  411090:	48 89 c7             	mov    %rax,%rdi
  411093:	e8 6a 2d 00 00       	call   413e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  411098:	eb 3f                	jmp    4110d9 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x833>
			  __dynbuf.insert(__p, __extras, '0');
  41109a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41109e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  4110a2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4110a9:	b9 30 00 00 00       	mov    $0x30,%ecx
  4110ae:	48 89 c7             	mov    %rax,%rdi
  4110b1:	e8 a6 2d 00 00       	call   413e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  4110b6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4110ba:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4110be:	75 19                	jne    4110d9 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x833>
			    __dynbuf[__p] = '.';
  4110c0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4110c4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4110cb:	48 89 d6             	mov    %rdx,%rsi
  4110ce:	48 89 c7             	mov    %rax,%rdi
  4110d1:	e8 e0 2d 00 00       	call   413eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  4110d6:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  4110d9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4110e0:	48 89 c7             	mov    %rax,%rdi
  4110e3:	e8 48 63 ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4110e8:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4110ef:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  4110f6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4110fd:	48 89 c7             	mov    %rax,%rdi
  411100:	e8 e1 38 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  411105:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  41110c:	00 00 00 00
  411110:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  411117:	00 00 00 00
	    __str = __narrow_str;
  41111b:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  411122:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  411129:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  411130:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  411137:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41113e:	0f b6 00             	movzbl (%rax),%eax
  411141:	83 e0 20             	and    $0x20,%eax
  411144:	84 c0                	test   %al,%al
  411146:	0f 84 ec 00 00 00    	je     411238 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
  41114c:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  411153:	ff
  411154:	f3 0f 7e 0d 84 93 00 	movq   0x9384(%rip),%xmm1        # 41a4e0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  41115b:	00
  41115c:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  411160:	f2 0f 10 05 88 93 00 	movsd  0x9388(%rip),%xmm0        # 41a4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  411167:	00
  411168:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  41116c:	0f 92 c0             	setb   %al
  41116f:	83 f0 01             	xor    $0x1,%eax
  411172:	0f b6 c0             	movzbl %al,%eax
  411175:	85 c0                	test   %eax,%eax
  411177:	0f 84 bb 00 00 00    	je     411238 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41117d:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  411184:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  41118b:	48 89 d6             	mov    %rdx,%rsi
  41118e:	48 89 c7             	mov    %rax,%rdi
  411191:	e8 98 33 00 00       	call   41452e <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  411196:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  41119a:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  4111a1:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  4111a8:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  4111af:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4111b6:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  4111bd:	4d 89 c1             	mov    %r8,%r9
  4111c0:	41 89 c8             	mov    %ecx,%r8d
  4111c3:	48 89 d1             	mov    %rdx,%rcx
  4111c6:	48 89 c2             	mov    %rax,%rdx
  4111c9:	e8 20 3f 00 00       	call   4150ee <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  4111ce:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4111d5:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4111dc:	48 89 d6             	mov    %rdx,%rsi
  4111df:	48 89 c7             	mov    %rax,%rdi
  4111e2:	e8 8d 33 00 00       	call   414574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  4111e7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4111ee:	48 89 c7             	mov    %rax,%rdi
  4111f1:	e8 8c 57 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4111f6:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4111fd:	48 89 c7             	mov    %rax,%rdi
  411200:	e8 cb 30 ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  411205:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41120c:	48 89 c7             	mov    %rax,%rdi
  41120f:	e8 a6 cd ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411214:	83 f0 01             	xor    $0x1,%eax
  411217:	84 c0                	test   %al,%al
  411219:	74 1d                	je     411238 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
		__str = __wstr;
  41121b:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411222:	48 89 c7             	mov    %rax,%rdi
  411225:	e8 06 62 ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  41122a:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  411231:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  411238:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41123f:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  411246:	48 89 d6             	mov    %rdx,%rsi
  411249:	48 89 c7             	mov    %rax,%rdi
  41124c:	e8 39 41 00 00       	call   41538a <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  411251:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  411255:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41125c:	48 89 c7             	mov    %rax,%rdi
  41125f:	e8 96 46 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411264:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  411268:	0f 93 c0             	setae  %al
  41126b:	84 c0                	test   %al,%al
  41126d:	74 36                	je     4112a5 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ff>
	    return __format::__write(__fc.out(), __str);
  41126f:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  411276:	48 89 c7             	mov    %rax,%rdi
  411279:	e8 74 97 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  41127e:	48 89 c1             	mov    %rax,%rcx
  411281:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  411288:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  41128f:	48 89 d6             	mov    %rdx,%rsi
  411292:	48 89 c2             	mov    %rax,%rdx
  411295:	48 89 cf             	mov    %rcx,%rdi
  411298:	e8 71 c4 ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41129d:	48 89 c3             	mov    %rax,%rbx
  4112a0:	e9 91 01 00 00       	jmp    411436 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb90>
	  char32_t __fill_char = _M_spec._M_fill;
  4112a5:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4112ac:	8b 40 08             	mov    0x8(%rax),%eax
  4112af:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  4112b2:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4112b9:	0f b6 00             	movzbl (%rax),%eax
  4112bc:	83 e0 03             	and    $0x3,%eax
  4112bf:	0f b6 c0             	movzbl %al,%eax
  4112c2:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  4112c5:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4112cc:	48 89 c7             	mov    %rax,%rdi
  4112cf:	e8 26 46 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4112d4:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4112d8:	48 29 c2             	sub    %rax,%rdx
  4112db:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  4112df:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  4112e6:	48 89 c7             	mov    %rax,%rdi
  4112e9:	e8 04 97 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4112ee:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  4112f5:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  4112f9:	0f 85 fa 00 00 00    	jne    4113f9 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
	      __align = _Align_right;
  4112ff:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  411306:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41130d:	0f b6 00             	movzbl (%rax),%eax
  411310:	83 e0 40             	and    $0x40,%eax
  411313:	84 c0                	test   %al,%al
  411315:	0f 84 d7 00 00 00    	je     4113f2 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb4c>
  41131b:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  411322:	ff
  411323:	f3 0f 7e 0d b5 91 00 	movq   0x91b5(%rip),%xmm1        # 41a4e0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  41132a:	00
  41132b:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  41132f:	f2 0f 10 05 b9 91 00 	movsd  0x91b9(%rip),%xmm0        # 41a4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  411336:	00
  411337:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  41133b:	0f 92 c0             	setb   %al
  41133e:	83 f0 01             	xor    $0x1,%eax
  411341:	0f b6 c0             	movzbl %al,%eax
  411344:	85 c0                	test   %eax,%eax
  411346:	0f 84 a6 00 00 00    	je     4113f2 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb4c>
		  __fill_char = _CharT('0');
  41134c:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  411353:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  41135a:	be 00 00 00 00       	mov    $0x0,%esi
  41135f:	48 89 c7             	mov    %rax,%rdi
  411362:	e8 a5 45 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  411367:	0f b6 00             	movzbl (%rax),%eax
  41136a:	0f be c0             	movsbl %al,%eax
  41136d:	89 c7                	mov    %eax,%edi
  41136f:	e8 70 3d ff ff       	call   4050e4 <_ZNSt8__format11__is_xdigitEc>
  411374:	83 f0 01             	xor    $0x1,%eax
  411377:	84 c0                	test   %al,%al
  411379:	74 7e                	je     4113f9 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
		      *__out++ = __str[0];
  41137b:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411382:	be 00 00 00 00       	mov    $0x0,%esi
  411387:	48 89 c7             	mov    %rax,%rdi
  41138a:	e8 7d 45 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41138f:	0f b6 00             	movzbl (%rax),%eax
  411392:	0f be c0             	movsbl %al,%eax
  411395:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  41139c:	00 00 00
      operator++(int) { return *this; }
  41139f:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  4113a6:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4113ad:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4113b4:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4113bb:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4113c1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4113c8:	48 8b 00             	mov    (%rax),%rax
  4113cb:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4113d2:	89 d6                	mov    %edx,%esi
  4113d4:	48 89 c7             	mov    %rax,%rdi
  4113d7:	e8 1e 5a 00 00       	call   416dfa <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  4113dc:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4113e3:	be 01 00 00 00       	mov    $0x1,%esi
  4113e8:	48 89 c7             	mov    %rax,%rdi
  4113eb:	e8 1a 40 00 00       	call   41540a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4113f0:	eb 07                	jmp    4113f9 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
		__fill_char = _CharT(' ');
  4113f2:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  4113f9:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  411400:	48 89 c7             	mov    %rax,%rdi
  411403:	e8 63 79 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  411408:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  41140c:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  411410:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  411413:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  41141a:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  411421:	48 8b 00             	mov    (%rax),%rax
  411424:	45 89 c1             	mov    %r8d,%r9d
  411427:	49 89 f8             	mov    %rdi,%r8
  41142a:	48 89 c7             	mov    %rax,%rdi
  41142d:	e8 95 42 00 00       	call   4156c7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  411432:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  411435:	90                   	nop
	}
  411436:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41143d:	48 89 c7             	mov    %rax,%rdi
  411440:	e8 3d 55 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411445:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41144c:	48 89 c7             	mov    %rax,%rdi
  41144f:	e8 2e 55 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411454:	48 89 d8             	mov    %rbx,%rax
  411457:	eb 45                	jmp    41149e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbf8>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  411459:	48 89 c3             	mov    %rax,%rbx
  41145c:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  411463:	48 89 c7             	mov    %rax,%rdi
  411466:	e8 65 2e ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
  41146b:	eb 03                	jmp    411470 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbca>
	}
  41146d:	48 89 c3             	mov    %rax,%rbx
  411470:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411477:	48 89 c7             	mov    %rax,%rdi
  41147a:	e8 03 55 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41147f:	eb 03                	jmp    411484 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbde>
  411481:	48 89 c3             	mov    %rax,%rbx
  411484:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41148b:	48 89 c7             	mov    %rax,%rdi
  41148e:	e8 ef 54 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411493:	48 89 d8             	mov    %rbx,%rax
  411496:	48 89 c7             	mov    %rax,%rdi
  411499:	e8 d2 2e ff ff       	call   404370 <_Unwind_Resume@plt>
  41149e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4114a2:	c9                   	leave
  4114a3:	c3                   	ret

00000000004114a4 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  4114a4:	55                   	push   %rbp
  4114a5:	48 89 e5             	mov    %rsp,%rbp
  4114a8:	48 83 ec 20          	sub    $0x20,%rsp
  4114ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4114b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4114b4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  4114b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4114bc:	48 8b 00             	mov    (%rax),%rax
  4114bf:	0f b6 00             	movzbl (%rax),%eax
  4114c2:	84 c0                	test   %al,%al
  4114c4:	74 3f                	je     411505 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x61>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  4114c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4114ca:	48 8b 40 18          	mov    0x18(%rax),%rax
  4114ce:	48 8b 00             	mov    (%rax),%rax
  4114d1:	89 c1                	mov    %eax,%ecx
  4114d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4114d7:	48 8b 40 10          	mov    0x10(%rax),%rax
  4114db:	8b 10                	mov    (%rax),%edx
  4114dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4114e1:	48 8b 40 08          	mov    0x8(%rax),%rax
  4114e5:	db 28                	fldt   (%rax)
  4114e7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4114eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4114ef:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  4114f4:	db 3c 24             	fstpt  (%rsp)
  4114f7:	48 89 c7             	mov    %rax,%rdi
  4114fa:	e8 41 2d ff ff       	call   404240 <_ZSt8to_charsPcS_eSt12chars_formati@plt>
  4114ff:	48 83 c4 10          	add    $0x10,%rsp
  411503:	eb 6d                	jmp    411572 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xce>
	    else if (__fmt != chars_format{})
  411505:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411509:	48 8b 40 10          	mov    0x10(%rax),%rax
  41150d:	8b 00                	mov    (%rax),%eax
  41150f:	85 c0                	test   %eax,%eax
  411511:	74 35                	je     411548 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xa4>
	      return __format::to_chars(__b, __e, __v, __fmt);
  411513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411517:	48 8b 40 10          	mov    0x10(%rax),%rax
  41151b:	8b 10                	mov    (%rax),%edx
  41151d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411521:	48 8b 40 08          	mov    0x8(%rax),%rax
  411525:	db 28                	fldt   (%rax)
  411527:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41152b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41152f:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  411534:	db 3c 24             	fstpt  (%rsp)
  411537:	48 89 ce             	mov    %rcx,%rsi
  41153a:	48 89 c7             	mov    %rax,%rdi
  41153d:	e8 0e 2b ff ff       	call   404050 <_ZSt8to_charsPcS_eSt12chars_format@plt>
  411542:	48 83 c4 10          	add    $0x10,%rsp
  411546:	eb 2a                	jmp    411572 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xce>
	      return __format::to_chars(__b, __e, __v);
  411548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41154c:	48 8b 40 08          	mov    0x8(%rax),%rax
  411550:	db 28                	fldt   (%rax)
  411552:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  411556:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41155a:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  41155f:	db 3c 24             	fstpt  (%rsp)
  411562:	48 89 d6             	mov    %rdx,%rsi
  411565:	48 89 c7             	mov    %rax,%rdi
  411568:	e8 b3 2b ff ff       	call   404120 <_ZSt8to_charsPcS_e@plt>
  41156d:	48 83 c4 10          	add    $0x10,%rsp
  411571:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  411572:	c9                   	leave
  411573:	c3                   	ret

0000000000411574 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  411574:	55                   	push   %rbp
  411575:	48 89 e5             	mov    %rsp,%rbp
  411578:	53                   	push   %rbx
  411579:	48 83 ec 28          	sub    $0x28,%rsp
  41157d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  411581:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  411585:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  411589:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41158d:	48 8b 00             	mov    (%rax),%rax
  411590:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  411594:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  411598:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41159c:	48 01 ca             	add    %rcx,%rdx
  41159f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4115a3:	48 83 c1 01          	add    $0x1,%rcx
  4115a7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4115ab:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  4115af:	48 89 ce             	mov    %rcx,%rsi
  4115b2:	48 89 c7             	mov    %rax,%rdi
  4115b5:	e8 ea fe ff ff       	call   4114a4 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  4115ba:	48 89 03             	mov    %rax,(%rbx)
  4115bd:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  4115c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4115c5:	48 8b 40 08          	mov    0x8(%rax),%rax
  4115c9:	8b 40 08             	mov    0x8(%rax),%eax
  4115cc:	85 c0                	test   %eax,%eax
  4115ce:	75 11                	jne    4115e1 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  4115d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4115d4:	48 8b 40 08          	mov    0x8(%rax),%rax
  4115d8:	48 8b 00             	mov    (%rax),%rax
  4115db:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  4115df:	eb 05                	jmp    4115e6 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  4115e1:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  4115e6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4115ea:	c9                   	leave
  4115eb:	c3                   	ret

00000000004115ec <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  4115ec:	55                   	push   %rbp
  4115ed:	48 89 e5             	mov    %rsp,%rbp
  4115f0:	53                   	push   %rbx
  4115f1:	48 81 ec 68 02 00 00 	sub    $0x268,%rsp
  4115f8:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  4115ff:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
	  std::string __dynbuf;
  411606:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41160d:	48 89 c7             	mov    %rax,%rdi
  411610:	e8 d1 33 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  411615:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  41161c:	00 00 00 00
  411620:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  411627:	00 00 00 00
	  size_t __prec = 6;
  41162b:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  411632:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  411636:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41163d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  411641:	83 e0 06             	and    $0x6,%eax
  411644:	84 c0                	test   %al,%al
  411646:	0f 95 c0             	setne  %al
  411649:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  41164f:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  411656:	84 c0                	test   %al,%al
  411658:	74 20                	je     41167a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e>
	    __prec = _M_spec._M_get_precision(__fc);
  41165a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411661:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  411668:	48 89 d6             	mov    %rdx,%rsi
  41166b:	48 89 c7             	mov    %rax,%rdi
  41166e:	e8 c1 38 00 00       	call   414f34 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  411673:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  41167a:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  411681:	48 83 c0 01          	add    $0x1,%rax
  411685:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  411689:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  411690:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  411694:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  411698:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  41169f:	00 00 00
	  bool __upper = false;
  4116a2:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  4116a6:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  4116aa:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  4116ae:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4116b5:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4116b9:	c0 e8 03             	shr    $0x3,%al
  4116bc:	83 e0 0f             	and    $0xf,%eax
  4116bf:	0f b6 c0             	movzbl %al,%eax
  4116c2:	89 c0                	mov    %eax,%eax
  4116c4:	48 8b 04 c5 d8 d2 41 	mov    0x41d2d8(,%rax,8),%rax
  4116cb:	00
  4116cc:	ff e0                	jmp    *%rax
	      __upper = true;
  4116ce:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  4116d2:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  4116d6:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4116dd:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4116e1:	83 e0 78             	and    $0x78,%eax
  4116e4:	3c 10                	cmp    $0x10,%al
  4116e6:	74 04                	je     4116ec <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x100>
		__expc = 'p';
  4116e8:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  4116ec:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  4116f3:	00 00 00
	      break;
  4116f6:	eb 67                	jmp    41175f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  4116f8:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  4116fc:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  411700:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  411707:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  41170e:	00 00 00
	      break;
  411711:	eb 4c                	jmp    41175f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  411713:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  411717:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  41171e:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  411725:	00 00 00
	      break;
  411728:	eb 35                	jmp    41175f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  41172a:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  41172e:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  411732:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  411736:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  41173d:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  411744:	00 00 00
	      break;
  411747:	eb 16                	jmp    41175f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      if (__use_prec)
  411749:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  411750:	84 c0                	test   %al,%al
  411752:	74 0a                	je     41175e <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x172>
		__fmt = chars_format::general;
  411754:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  41175b:	00 00 00
	      break;
  41175e:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  41175f:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  411766:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  41176d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  411771:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  411778:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  41177f:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  411786:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  41178d:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  411794:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411798:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41179c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  4117a3:	48 89 ce             	mov    %rcx,%rsi
  4117a6:	48 89 c7             	mov    %rax,%rdi
  4117a9:	e8 f6 fc ff ff       	call   4114a4 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  4117ae:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  4117b5:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  4117bc:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  4117c2:	83 f8 4b             	cmp    $0x4b,%eax
  4117c5:	0f 94 c0             	sete   %al
  4117c8:	0f b6 c0             	movzbl %al,%eax
  4117cb:	48 85 c0             	test   %rax,%rax
  4117ce:	0f 84 6a 01 00 00    	je     41193e <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x352>
	      size_t __guess = 8 + __prec;
  4117d4:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  4117db:	48 83 c0 08          	add    $0x8,%rax
  4117df:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  4117e3:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  4117e9:	83 f8 02             	cmp    $0x2,%eax
  4117ec:	75 5f                	jne    41184d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x261>
		      int __exp{};
  4117ee:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  4117f5:	00 00 00
			__builtin_frexpl(__v, &__exp);
  4117f8:	db 6d 10             	fldt   0x10(%rbp)
  4117fb:	48 8d 85 d4 fd ff ff 	lea    -0x22c(%rbp),%rax
  411802:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  411807:	db 3c 24             	fstpt  (%rsp)
  41180a:	48 89 c7             	mov    %rax,%rdi
  41180d:	e8 ee 2a ff ff       	call   404300 <frexpl@plt>
  411812:	dd d8                	fstp   %st(0)
  411814:	48 83 c4 10          	add    $0x10,%rsp
		      if (__exp > 0)
  411818:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  41181e:	85 c0                	test   %eax,%eax
  411820:	7e 2b                	jle    41184d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x261>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  411822:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  411828:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  41182e:	89 d0                	mov    %edx,%eax
  411830:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  411837:	48 c1 e8 20          	shr    $0x20,%rax
  41183b:	29 c2                	sub    %eax,%edx
  41183d:	d1 ea                	shr    %edx
  41183f:	01 d0                	add    %edx,%eax
  411841:	c1 e8 0d             	shr    $0xd,%eax
  411844:	83 c0 01             	add    $0x1,%eax
  411847:	89 c0                	mov    %eax,%eax
  411849:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  41184d:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  411854:	00
  411855:	77 08                	ja     41185f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x273>
		__guess = sizeof(__buf) * 2;
  411857:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  41185e:	00
	      __dynbuf.reserve(__guess);
  41185f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  411863:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41186a:	48 89 d6             	mov    %rdx,%rsi
  41186d:	48 89 c7             	mov    %rax,%rdi
  411870:	e8 5b 8b ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  411875:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  41187c:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  411883:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  41188a:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  411891:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411898:	48 89 c7             	mov    %rax,%rdi
  41189b:	e8 02 8b ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  4118a0:	48 01 c0             	add    %rax,%rax
  4118a3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4118aa:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  4118b1:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  4118b8:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  4118bf:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  4118c6:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  4118cd:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  4118d4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4118db:	48 89 ce             	mov    %rcx,%rsi
  4118de:	48 89 c7             	mov    %rax,%rdi
  4118e1:	e8 8c 58 00 00       	call   417172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  4118e6:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  4118e7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4118ee:	48 89 c7             	mov    %rax,%rdi
  4118f1:	e8 6c 82 ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  4118f6:	48 83 c0 01          	add    $0x1,%rax
  4118fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  4118fe:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411905:	48 89 c7             	mov    %rax,%rdi
  411908:	e8 55 82 ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  41190d:	48 89 c3             	mov    %rax,%rbx
  411910:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411917:	48 89 c7             	mov    %rax,%rdi
  41191a:	e8 01 33 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41191f:	48 01 d8             	add    %rbx,%rax
  411922:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  411926:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  41192c:	83 f8 4b             	cmp    $0x4b,%eax
  41192f:	0f 94 c0             	sete   %al
  411932:	0f b6 c0             	movzbl %al,%eax
  411935:	48 85 c0             	test   %rax,%rax
  411938:	0f 85 37 ff ff ff    	jne    411875 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x289>
	  if (__upper)
  41193e:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  411942:	74 35                	je     411979 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x38d>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411944:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411948:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  41194c:	eb 1e                	jmp    41196c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x380>
		*__p = std::toupper(*__p);
  41194e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411952:	0f b6 00             	movzbl (%rax),%eax
  411955:	0f be c0             	movsbl %al,%eax
  411958:	89 c7                	mov    %eax,%edi
  41195a:	e8 21 2a ff ff       	call   404380 <toupper@plt>
  41195f:	89 c2                	mov    %eax,%edx
  411961:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411965:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411967:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  41196c:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411973:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  411977:	75 d5                	jne    41194e <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x362>
	  bool __have_sign = true;
  411979:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  41197d:	db 6d 10             	fldt   0x10(%rbp)
  411980:	d9 e5                	fxam
  411982:	df e0                	fnstsw %ax
  411984:	dd d8                	fstp   %st(0)
  411986:	25 00 02 00 00       	and    $0x200,%eax
  41198b:	85 c0                	test   %eax,%eax
  41198d:	75 42                	jne    4119d1 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
	      if (_M_spec._M_sign == _Sign_plus)
  41198f:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411996:	0f b6 00             	movzbl (%rax),%eax
  411999:	83 e0 0c             	and    $0xc,%eax
  41199c:	3c 04                	cmp    $0x4,%al
  41199e:	75 0e                	jne    4119ae <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c2>
		*--__start = '+';
  4119a0:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  4119a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4119a9:	c6 00 2b             	movb   $0x2b,(%rax)
  4119ac:	eb 23                	jmp    4119d1 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
	      else if (_M_spec._M_sign == _Sign_space)
  4119ae:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4119b5:	0f b6 00             	movzbl (%rax),%eax
  4119b8:	83 e0 0c             	and    $0xc,%eax
  4119bb:	3c 0c                	cmp    $0xc,%al
  4119bd:	75 0e                	jne    4119cd <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e1>
		*--__start = ' ';
  4119bf:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  4119c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4119c8:	c6 00 20             	movb   $0x20,(%rax)
  4119cb:	eb 04                	jmp    4119d1 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
		__have_sign = false;
  4119cd:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  4119d1:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  4119d8:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  4119dc:	48 89 c2             	mov    %rax,%rdx
  4119df:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4119e3:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4119ea:	48 89 ce             	mov    %rcx,%rsi
  4119ed:	48 89 c7             	mov    %rax,%rdi
  4119f0:	e8 05 4f ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  4119f5:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4119fc:	0f b6 00             	movzbl (%rax),%eax
  4119ff:	83 e0 10             	and    $0x10,%eax
  411a02:	84 c0                	test   %al,%al
  411a04:	0f 84 1a 04 00 00    	je     411e24 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
  411a0a:	db 6d 10             	fldt   0x10(%rbp)
  411a0d:	d9 e1                	fabs
  411a0f:	db 2d eb 8a 00 00    	fldt   0x8aeb(%rip)        # 41a500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  411a15:	df e9                	fucomip %st(1),%st
  411a17:	dd d8                	fstp   %st(0)
  411a19:	0f 92 c0             	setb   %al
  411a1c:	83 f0 01             	xor    $0x1,%eax
  411a1f:	0f b6 c0             	movzbl %al,%eax
  411a22:	85 c0                	test   %eax,%eax
  411a24:	0f 84 fa 03 00 00    	je     411e24 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
	      string_view __s = __narrow_str;
  411a2a:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  411a31:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  411a38:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  411a3f:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  411a46:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  411a4d:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  411a4e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411a55:	ba 00 00 00 00       	mov    $0x0,%edx
  411a5a:	be 2e 00 00 00       	mov    $0x2e,%esi
  411a5f:	48 89 c7             	mov    %rax,%rdi
  411a62:	e8 61 5e ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411a67:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  411a6b:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  411a70:	0f 84 a5 00 00 00    	je     411b1b <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x52f>
		  __p = __s.find(__expc, __d + 1);
  411a76:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411a7a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411a7e:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411a82:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411a89:	89 ce                	mov    %ecx,%esi
  411a8b:	48 89 c7             	mov    %rax,%rdi
  411a8e:	e8 35 5e ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411a93:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411a97:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411a9c:	75 13                	jne    411ab1 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4c5>
		    __p = __s.size();
  411a9e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411aa5:	48 89 c7             	mov    %rax,%rdi
  411aa8:	e8 4d 3e ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411aad:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  411ab1:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411ab5:	0f 84 af 00 00 00    	je     411b6a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
		      if (__s[__have_sign] != '0')
  411abb:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  411abf:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411ac6:	48 89 d6             	mov    %rdx,%rsi
  411ac9:	48 89 c7             	mov    %rax,%rdi
  411acc:	e8 3b 3e ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  411ad1:	0f b6 00             	movzbl (%rax),%eax
  411ad4:	3c 30                	cmp    $0x30,%al
  411ad6:	0f 95 c0             	setne  %al
  411ad9:	84 c0                	test   %al,%al
  411adb:	74 15                	je     411af2 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x506>
			__sigfigs = __p - __have_sign - 1;
  411add:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  411ae1:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411ae5:	48 29 c2             	sub    %rax,%rdx
  411ae8:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  411aec:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  411af0:	eb 78                	jmp    411b6a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  411af2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411af6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411afa:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411b01:	be 30 00 00 00       	mov    $0x30,%esi
  411b06:	48 89 c7             	mov    %rax,%rdi
  411b09:	e8 fc 21 00 00       	call   413d0a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  411b0e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411b12:	48 29 c2             	sub    %rax,%rdx
  411b15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  411b19:	eb 4f                	jmp    411b6a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
		  __p = __s.find(__expc); // Find the exponent, if present.
  411b1b:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411b1f:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411b26:	ba 00 00 00 00       	mov    $0x0,%edx
  411b2b:	89 ce                	mov    %ecx,%esi
  411b2d:	48 89 c7             	mov    %rax,%rdi
  411b30:	e8 93 5d ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411b35:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411b39:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411b3e:	75 13                	jne    411b53 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x567>
		    __p = __s.size();
  411b40:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411b47:	48 89 c7             	mov    %rax,%rdi
  411b4a:	e8 ab 3d ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411b4f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  411b53:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411b57:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  411b5b:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  411b5f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  411b63:	48 29 c2             	sub    %rax,%rdx
  411b66:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  411b6a:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411b6e:	74 1b                	je     411b8b <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59f>
  411b70:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411b77:	48 85 c0             	test   %rax,%rax
  411b7a:	74 0f                	je     411b8b <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59f>
		  __z = __prec - __sigfigs;
  411b7c:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411b83:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  411b87:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  411b8b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411b8f:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411b93:	0f 94 c0             	sete   %al
  411b96:	0f b6 d0             	movzbl %al,%edx
  411b99:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411b9d:	48 01 d0             	add    %rdx,%rax
  411ba0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  411ba4:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  411ba9:	0f 84 75 02 00 00    	je     411e24 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  411baf:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411bb6:	48 89 c7             	mov    %rax,%rdi
  411bb9:	e8 fc c3 ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411bbe:	84 c0                	test   %al,%al
  411bc0:	74 1e                	je     411be0 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f4>
  411bc2:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411bc9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411bcd:	48 29 c2             	sub    %rax,%rdx
  411bd0:	48 89 d0             	mov    %rdx,%rax
  411bd3:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  411bd7:	72 07                	jb     411be0 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f4>
  411bd9:	b8 01 00 00 00       	mov    $0x1,%eax
  411bde:	eb 05                	jmp    411be5 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f9>
  411be0:	b8 00 00 00 00       	mov    $0x0,%eax
  411be5:	84 c0                	test   %al,%al
  411be7:	0f 84 d7 00 00 00    	je     411cc4 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6d8>
					__s.size() - __p);
  411bed:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411bf4:	48 89 c7             	mov    %rax,%rdi
  411bf7:	e8 fe 3c ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  411bfc:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  411c00:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411c04:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411c08:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  411c0c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  411c10:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411c14:	48 01 d1             	add    %rdx,%rcx
  411c17:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  411c1b:	48 01 d1             	add    %rdx,%rcx
  411c1e:	48 89 c2             	mov    %rax,%rdx
  411c21:	48 89 cf             	mov    %rcx,%rdi
  411c24:	e8 07 27 ff ff       	call   404330 <memmove@plt>
		      if (__d == __p)
  411c29:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411c2d:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411c31:	75 16                	jne    411c49 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x65d>
			__start[__p++] = '.';
  411c33:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411c37:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411c3b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411c3f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  411c43:	48 01 c8             	add    %rcx,%rax
  411c46:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  411c49:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  411c4d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411c51:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  411c55:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411c59:	48 89 c2             	mov    %rax,%rdx
  411c5c:	be 30 00 00 00       	mov    $0x30,%esi
  411c61:	48 89 cf             	mov    %rcx,%rdi
  411c64:	e8 97 24 ff ff       	call   404100 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  411c69:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411c70:	48 89 c7             	mov    %rax,%rdi
  411c73:	e8 70 4c ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  411c78:	48 89 c3             	mov    %rax,%rbx
  411c7b:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411c82:	48 89 c7             	mov    %rax,%rdi
  411c85:	e8 70 3c ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411c8a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411c8e:	48 01 c2             	add    %rax,%rdx
  411c91:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  411c98:	48 89 de             	mov    %rbx,%rsi
  411c9b:	48 89 c7             	mov    %rax,%rdi
  411c9e:	e8 57 4c ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  411ca3:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  411caa:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  411cb1:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  411cb8:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  411cbf:	e9 60 01 00 00       	jmp    411e24 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
		      __dynbuf.reserve(__s.size() + __extras);
  411cc4:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411ccb:	48 89 c7             	mov    %rax,%rdi
  411cce:	e8 27 3c ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411cd3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411cd7:	48 01 c2             	add    %rax,%rdx
  411cda:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411ce1:	48 89 d6             	mov    %rdx,%rsi
  411ce4:	48 89 c7             	mov    %rax,%rdi
  411ce7:	e8 e4 86 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  411cec:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411cf3:	48 89 c7             	mov    %rax,%rdi
  411cf6:	e8 bf c2 ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411cfb:	84 c0                	test   %al,%al
  411cfd:	0f 84 c5 00 00 00    	je     411dc8 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7dc>
			  __dynbuf = __s.substr(0, __p);
  411d03:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411d07:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411d0e:	be 00 00 00 00       	mov    $0x0,%esi
  411d13:	48 89 c7             	mov    %rax,%rdi
  411d16:	e8 09 8e ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  411d1b:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  411d22:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  411d29:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  411d30:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411d37:	48 89 d6             	mov    %rdx,%rsi
  411d3a:	48 89 c7             	mov    %rax,%rdi
  411d3d:	e8 26 20 00 00       	call   413d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  411d42:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411d46:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411d4a:	75 14                	jne    411d60 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x774>
			    __dynbuf += '.';
  411d4c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411d53:	be 2e 00 00 00       	mov    $0x2e,%esi
  411d58:	48 89 c7             	mov    %rax,%rdi
  411d5b:	e8 2e 20 00 00       	call   413d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  411d60:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  411d65:	74 1b                	je     411d82 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x796>
			    __dynbuf.append(__z, '0');
  411d67:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  411d6b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411d72:	ba 30 00 00 00       	mov    $0x30,%edx
  411d77:	48 89 ce             	mov    %rcx,%rsi
  411d7a:	48 89 c7             	mov    %rax,%rdi
  411d7d:	e8 36 20 00 00       	call   413db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  411d82:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  411d86:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411d8d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  411d94:	48 89 ce             	mov    %rcx,%rsi
  411d97:	48 89 c7             	mov    %rax,%rdi
  411d9a:	e8 85 8d ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  411d9f:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  411da6:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  411dad:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  411db4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411dbb:	48 89 d6             	mov    %rdx,%rsi
  411dbe:	48 89 c7             	mov    %rax,%rdi
  411dc1:	e8 3c 20 00 00       	call   413e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  411dc6:	eb 3f                	jmp    411e07 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x81b>
			  __dynbuf.insert(__p, __extras, '0');
  411dc8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411dcc:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  411dd0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411dd7:	b9 30 00 00 00       	mov    $0x30,%ecx
  411ddc:	48 89 c7             	mov    %rax,%rdi
  411ddf:	e8 78 20 00 00       	call   413e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  411de4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411de8:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411dec:	75 19                	jne    411e07 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x81b>
			    __dynbuf[__p] = '.';
  411dee:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411df2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411df9:	48 89 d6             	mov    %rdx,%rsi
  411dfc:	48 89 c7             	mov    %rax,%rdi
  411dff:	e8 b2 20 00 00       	call   413eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  411e04:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  411e07:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411e0e:	48 89 c7             	mov    %rax,%rdi
  411e11:	e8 1a 56 ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  411e16:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  411e1d:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  411e24:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411e2b:	48 89 c7             	mov    %rax,%rdi
  411e2e:	e8 b3 2b ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  411e33:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  411e3a:	00 00 00 00
  411e3e:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  411e45:	00 00 00 00
	    __str = __narrow_str;
  411e49:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  411e50:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  411e57:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  411e5e:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  411e65:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411e6c:	0f b6 00             	movzbl (%rax),%eax
  411e6f:	83 e0 20             	and    $0x20,%eax
  411e72:	84 c0                	test   %al,%al
  411e74:	0f 84 db 00 00 00    	je     411f55 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
  411e7a:	db 6d 10             	fldt   0x10(%rbp)
  411e7d:	d9 e1                	fabs
  411e7f:	db 2d 7b 86 00 00    	fldt   0x867b(%rip)        # 41a500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  411e85:	df e9                	fucomip %st(1),%st
  411e87:	dd d8                	fstp   %st(0)
  411e89:	0f 92 c0             	setb   %al
  411e8c:	83 f0 01             	xor    $0x1,%eax
  411e8f:	0f b6 c0             	movzbl %al,%eax
  411e92:	85 c0                	test   %eax,%eax
  411e94:	0f 84 bb 00 00 00    	je     411f55 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  411e9a:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  411ea1:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  411ea8:	48 89 d6             	mov    %rdx,%rsi
  411eab:	48 89 c7             	mov    %rax,%rdi
  411eae:	e8 7b 26 00 00       	call   41452e <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  411eb3:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411eb7:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  411ebe:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  411ec5:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  411ecc:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  411ed3:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  411eda:	4d 89 c1             	mov    %r8,%r9
  411edd:	41 89 c8             	mov    %ecx,%r8d
  411ee0:	48 89 d1             	mov    %rdx,%rcx
  411ee3:	48 89 c2             	mov    %rax,%rdx
  411ee6:	e8 03 32 00 00       	call   4150ee <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  411eeb:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  411ef2:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411ef9:	48 89 d6             	mov    %rdx,%rsi
  411efc:	48 89 c7             	mov    %rax,%rdi
  411eff:	e8 70 26 00 00       	call   414574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  411f04:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  411f0b:	48 89 c7             	mov    %rax,%rdi
  411f0e:	e8 6f 4a ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411f13:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  411f1a:	48 89 c7             	mov    %rax,%rdi
  411f1d:	e8 ae 23 ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  411f22:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411f29:	48 89 c7             	mov    %rax,%rdi
  411f2c:	e8 89 c0 ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411f31:	83 f0 01             	xor    $0x1,%eax
  411f34:	84 c0                	test   %al,%al
  411f36:	74 1d                	je     411f55 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
		__str = __wstr;
  411f38:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411f3f:	48 89 c7             	mov    %rax,%rdi
  411f42:	e8 e9 54 ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  411f47:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  411f4e:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  411f55:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411f5c:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  411f63:	48 89 d6             	mov    %rdx,%rsi
  411f66:	48 89 c7             	mov    %rax,%rdi
  411f69:	e8 1c 34 00 00       	call   41538a <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  411f6e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  411f72:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411f79:	48 89 c7             	mov    %rax,%rdi
  411f7c:	e8 79 39 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411f81:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  411f85:	0f 93 c0             	setae  %al
  411f88:	84 c0                	test   %al,%al
  411f8a:	74 36                	je     411fc2 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9d6>
	    return __format::__write(__fc.out(), __str);
  411f8c:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  411f93:	48 89 c7             	mov    %rax,%rdi
  411f96:	e8 57 8a ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  411f9b:	48 89 c1             	mov    %rax,%rcx
  411f9e:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  411fa5:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  411fac:	48 89 d6             	mov    %rdx,%rsi
  411faf:	48 89 c2             	mov    %rax,%rdx
  411fb2:	48 89 cf             	mov    %rcx,%rdi
  411fb5:	e8 54 b7 ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  411fba:	48 89 c3             	mov    %rax,%rbx
  411fbd:	e9 80 01 00 00       	jmp    412142 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb56>
	  char32_t __fill_char = _M_spec._M_fill;
  411fc2:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411fc9:	8b 40 08             	mov    0x8(%rax),%eax
  411fcc:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  411fcf:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411fd6:	0f b6 00             	movzbl (%rax),%eax
  411fd9:	83 e0 03             	and    $0x3,%eax
  411fdc:	0f b6 c0             	movzbl %al,%eax
  411fdf:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  411fe2:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411fe9:	48 89 c7             	mov    %rax,%rdi
  411fec:	e8 09 39 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411ff1:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  411ff5:	48 29 c2             	sub    %rax,%rdx
  411ff8:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  411ffc:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  412003:	48 89 c7             	mov    %rax,%rdi
  412006:	e8 e7 89 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  41200b:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  412012:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  412016:	0f 85 e9 00 00 00    	jne    412105 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
	      __align = _Align_right;
  41201c:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  412023:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41202a:	0f b6 00             	movzbl (%rax),%eax
  41202d:	83 e0 40             	and    $0x40,%eax
  412030:	84 c0                	test   %al,%al
  412032:	0f 84 c6 00 00 00    	je     4120fe <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb12>
  412038:	db 6d 10             	fldt   0x10(%rbp)
  41203b:	d9 e1                	fabs
  41203d:	db 2d bd 84 00 00    	fldt   0x84bd(%rip)        # 41a500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  412043:	df e9                	fucomip %st(1),%st
  412045:	dd d8                	fstp   %st(0)
  412047:	0f 92 c0             	setb   %al
  41204a:	83 f0 01             	xor    $0x1,%eax
  41204d:	0f b6 c0             	movzbl %al,%eax
  412050:	85 c0                	test   %eax,%eax
  412052:	0f 84 a6 00 00 00    	je     4120fe <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb12>
		  __fill_char = _CharT('0');
  412058:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  41205f:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  412066:	be 00 00 00 00       	mov    $0x0,%esi
  41206b:	48 89 c7             	mov    %rax,%rdi
  41206e:	e8 99 38 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  412073:	0f b6 00             	movzbl (%rax),%eax
  412076:	0f be c0             	movsbl %al,%eax
  412079:	89 c7                	mov    %eax,%edi
  41207b:	e8 64 30 ff ff       	call   4050e4 <_ZNSt8__format11__is_xdigitEc>
  412080:	83 f0 01             	xor    $0x1,%eax
  412083:	84 c0                	test   %al,%al
  412085:	74 7e                	je     412105 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
		      *__out++ = __str[0];
  412087:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41208e:	be 00 00 00 00       	mov    $0x0,%esi
  412093:	48 89 c7             	mov    %rax,%rdi
  412096:	e8 71 38 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41209b:	0f b6 00             	movzbl (%rax),%eax
  41209e:	0f be c0             	movsbl %al,%eax
  4120a1:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  4120a8:	00 00 00
      operator++(int) { return *this; }
  4120ab:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  4120b2:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4120b9:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4120c0:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4120c7:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4120cd:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4120d4:	48 8b 00             	mov    (%rax),%rax
  4120d7:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4120de:	89 d6                	mov    %edx,%esi
  4120e0:	48 89 c7             	mov    %rax,%rdi
  4120e3:	e8 12 4d 00 00       	call   416dfa <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  4120e8:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4120ef:	be 01 00 00 00       	mov    $0x1,%esi
  4120f4:	48 89 c7             	mov    %rax,%rdi
  4120f7:	e8 0e 33 00 00       	call   41540a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4120fc:	eb 07                	jmp    412105 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
		__fill_char = _CharT(' ');
  4120fe:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  412105:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  41210c:	48 89 c7             	mov    %rax,%rdi
  41210f:	e8 57 6c ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  412114:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  412118:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  41211c:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  41211f:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  412126:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  41212d:	48 8b 00             	mov    (%rax),%rax
  412130:	45 89 c1             	mov    %r8d,%r9d
  412133:	49 89 f8             	mov    %rdi,%r8
  412136:	48 89 c7             	mov    %rax,%rdi
  412139:	e8 89 35 00 00       	call   4156c7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  41213e:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  412141:	90                   	nop
	}
  412142:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412149:	48 89 c7             	mov    %rax,%rdi
  41214c:	e8 31 48 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  412151:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412158:	48 89 c7             	mov    %rax,%rdi
  41215b:	e8 22 48 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  412160:	48 89 d8             	mov    %rbx,%rax
  412163:	eb 45                	jmp    4121aa <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbbe>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  412165:	48 89 c3             	mov    %rax,%rbx
  412168:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41216f:	48 89 c7             	mov    %rax,%rdi
  412172:	e8 59 21 ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
  412177:	eb 03                	jmp    41217c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb90>
	}
  412179:	48 89 c3             	mov    %rax,%rbx
  41217c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412183:	48 89 c7             	mov    %rax,%rdi
  412186:	e8 f7 47 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41218b:	eb 03                	jmp    412190 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba4>
  41218d:	48 89 c3             	mov    %rax,%rbx
  412190:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412197:	48 89 c7             	mov    %rax,%rdi
  41219a:	e8 e3 47 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41219f:	48 89 d8             	mov    %rbx,%rax
  4121a2:	48 89 c7             	mov    %rax,%rdi
  4121a5:	e8 c6 21 ff ff       	call   404370 <_Unwind_Resume@plt>
  4121aa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4121ae:	c9                   	leave
  4121af:	c3                   	ret

00000000004121b0 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>:
	format(basic_string_view<_CharT> __s,
  4121b0:	55                   	push   %rbp
  4121b1:	48 89 e5             	mov    %rsp,%rbp
  4121b4:	48 83 ec 30          	sub    $0x30,%rsp
  4121b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4121bc:	48 89 f0             	mov    %rsi,%rax
  4121bf:	48 89 d6             	mov    %rdx,%rsi
  4121c2:	48 89 c0             	mov    %rax,%rax
  4121c5:	ba 00 00 00 00       	mov    $0x0,%edx
  4121ca:	48 89 f2             	mov    %rsi,%rdx
  4121cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4121d1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4121d5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	  if (_M_spec._M_width_kind == _WP_none
  4121d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4121dd:	0f b7 00             	movzwl (%rax),%eax
  4121e0:	66 25 80 01          	and    $0x180,%ax
  4121e4:	66 85 c0             	test   %ax,%ax
  4121e7:	75 36                	jne    41221f <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0x6f>
		&& _M_spec._M_prec_kind == _WP_none)
  4121e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4121ed:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4121f1:	83 e0 06             	and    $0x6,%eax
  4121f4:	84 c0                	test   %al,%al
  4121f6:	75 27                	jne    41221f <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0x6f>
	    return __format::__write(__fc.out(), __s);
  4121f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4121fc:	48 89 c7             	mov    %rax,%rdi
  4121ff:	e8 ee 87 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  412204:	48 89 c1             	mov    %rax,%rcx
  412207:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41220b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41220f:	48 89 d6             	mov    %rdx,%rsi
  412212:	48 89 c2             	mov    %rax,%rdx
  412215:	48 89 cf             	mov    %rcx,%rdi
  412218:	e8 f1 b4 ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41221d:	eb 7f                	jmp    41229e <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xee>
	      if (_M_spec._M_prec_kind != _WP_none)
  41221f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412223:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412227:	83 e0 06             	and    $0x6,%eax
  41222a:	84 c0                	test   %al,%al
  41222c:	74 30                	je     41225e <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xae>
		  size_t __prec = _M_spec._M_get_precision(__fc);
  41222e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412232:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  412236:	48 89 d6             	mov    %rdx,%rsi
  412239:	48 89 c7             	mov    %rax,%rdi
  41223c:	e8 f3 2c 00 00       	call   414f34 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  412241:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		  __estimated_width = __unicode::__truncate(__s, __prec);
  412245:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  412249:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  41224d:	48 89 d6             	mov    %rdx,%rsi
  412250:	48 89 c7             	mov    %rax,%rdi
  412253:	e8 fa 39 00 00       	call   415c52 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm>
  412258:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41225c:	eb 17                	jmp    412275 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xc5>
		__estimated_width = __unicode::__field_width(__s);
  41225e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  412262:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  412266:	48 89 d7             	mov    %rdx,%rdi
  412269:	48 89 c6             	mov    %rax,%rsi
  41226c:	e8 6d 3b 00 00       	call   415dde <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE>
  412271:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
						  __fc, _M_spec);
  412275:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
	  return __format::__write_padded_as_spec(__s, __estimated_width,
  412279:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  41227d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  412281:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  412285:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  412289:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  41228f:	49 89 f8             	mov    %rdi,%r8
  412292:	48 89 f7             	mov    %rsi,%rdi
  412295:	48 89 c6             	mov    %rax,%rsi
  412298:	e8 03 00 00 00       	call   4122a0 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
						  __fc, _M_spec);
  41229d:	90                   	nop
	}
  41229e:	c9                   	leave
  41229f:	c3                   	ret

00000000004122a0 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>:
    __write_padded_as_spec(basic_string_view<type_identity_t<_CharT>> __str,
  4122a0:	55                   	push   %rbp
  4122a1:	48 89 e5             	mov    %rsp,%rbp
  4122a4:	53                   	push   %rbx
  4122a5:	48 83 ec 48          	sub    $0x48,%rsp
  4122a9:	48 89 f8             	mov    %rdi,%rax
  4122ac:	49 89 f2             	mov    %rsi,%r10
  4122af:	48 89 c6             	mov    %rax,%rsi
  4122b2:	bf 00 00 00 00       	mov    $0x0,%edi
  4122b7:	4c 89 d7             	mov    %r10,%rdi
  4122ba:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4122be:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4122c2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4122c6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4122ca:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  4122ce:	44 89 4d b4          	mov    %r9d,-0x4c(%rbp)
      size_t __width = __spec._M_get_width(__fc);
  4122d2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4122d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4122da:	48 89 d6             	mov    %rdx,%rsi
  4122dd:	48 89 c7             	mov    %rax,%rdi
  4122e0:	e8 a5 30 00 00       	call   41538a <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  4122e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__width <= __estimated_width)
  4122e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4122ed:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  4122f1:	72 27                	jb     41231a <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0x7a>
	return __format::__write(__fc.out(), __str);
  4122f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4122f7:	48 89 c7             	mov    %rax,%rdi
  4122fa:	e8 f3 86 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4122ff:	48 89 c1             	mov    %rax,%rcx
  412302:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  412306:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41230a:	48 89 d6             	mov    %rdx,%rsi
  41230d:	48 89 c2             	mov    %rax,%rdx
  412310:	48 89 cf             	mov    %rcx,%rdi
  412313:	e8 f6 b3 ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  412318:	eb 61                	jmp    41237b <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0xdb>
      const size_t __nfill = __width - __estimated_width;
  41231a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41231e:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  412322:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__spec._M_align)
  412326:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41232a:	0f b6 00             	movzbl (%rax),%eax
  41232d:	83 e0 03             	and    $0x3,%eax
  412330:	84 c0                	test   %al,%al
  412332:	74 10                	je     412344 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0xa4>
	__align = __spec._M_align;
  412334:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  412338:	0f b6 00             	movzbl (%rax),%eax
  41233b:	83 e0 03             	and    $0x3,%eax
  41233e:	0f b6 c0             	movzbl %al,%eax
  412341:	89 45 b4             	mov    %eax,-0x4c(%rbp)
				      __spec._M_fill);
  412344:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  412348:	8b 58 08             	mov    0x8(%rax),%ebx
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
  41234b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41234f:	48 89 c7             	mov    %rax,%rdi
  412352:	e8 9b 86 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  412357:	48 89 c7             	mov    %rax,%rdi
  41235a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41235e:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
  412361:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  412365:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  412369:	41 89 d9             	mov    %ebx,%r9d
  41236c:	49 89 f0             	mov    %rsi,%r8
  41236f:	48 89 d6             	mov    %rdx,%rsi
  412372:	48 89 c2             	mov    %rax,%rdx
  412375:	e8 4d 33 00 00       	call   4156c7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
				      __spec._M_fill);
  41237a:	90                   	nop
    }
  41237b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41237f:	c9                   	leave
  412380:	c3                   	ret
  412381:	90                   	nop

0000000000412382 <_ZNSt8__format15__formatter_intIcE8_M_parseInEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  412382:	55                   	push   %rbp
  412383:	48 89 e5             	mov    %rsp,%rbp
  412386:	48 83 ec 10          	sub    $0x10,%rsp
  41238a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41238e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  412392:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  412396:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41239a:	ba 01 00 00 00       	mov    $0x1,%edx
  41239f:	48 89 ce             	mov    %rcx,%rsi
  4123a2:	48 89 c7             	mov    %rax,%rdi
  4123a5:	e8 74 1e 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  4123aa:	c9                   	leave
  4123ab:	c3                   	ret

00000000004123ac <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  4123ac:	55                   	push   %rbp
  4123ad:	48 89 e5             	mov    %rsp,%rbp
  4123b0:	53                   	push   %rbx
  4123b1:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  4123b8:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  4123bf:	48 89 f0             	mov    %rsi,%rax
  4123c2:	48 89 d6             	mov    %rdx,%rsi
  4123c5:	48 89 c0             	mov    %rax,%rax
  4123c8:	ba 00 00 00 00       	mov    $0x0,%edx
  4123cd:	48 89 f2             	mov    %rsi,%rdx
  4123d0:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  4123d7:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  4123de:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  4123e5:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4123ec:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4123f0:	83 e0 78             	and    $0x78,%eax
  4123f3:	3c 38                	cmp    $0x38,%al
  4123f5:	75 39                	jne    412430 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x84>
	    return _M_format_character(_S_to_character(__i), __fc);
  4123f7:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  4123fe:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  412405:	48 89 d7             	mov    %rdx,%rdi
  412408:	48 89 c6             	mov    %rax,%rsi
  41240b:	e8 ac 3a 00 00       	call   415ebc <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_>
  412410:	0f be c8             	movsbl %al,%ecx
  412413:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  41241a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412421:	89 ce                	mov    %ecx,%esi
  412423:	48 89 c7             	mov    %rax,%rdi
  412426:	e8 81 be ff ff       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  41242b:	e9 c8 03 00 00       	jmp    4127f8 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x44c>
	  to_chars_result __res{};
  412430:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
  412437:	00 00 00 00
  41243b:	48 c7 85 e8 fe ff ff 	movq   $0x0,-0x118(%rbp)
  412442:	00 00 00 00
	  string_view __base_prefix;
  412446:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  41244d:	00 00 00 00
  412451:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  412458:	00 00 00 00
	  if (__i < 0)
  41245c:	48 83 bd b8 fe ff ff 	cmpq   $0x0,-0x148(%rbp)
  412463:	00
  412464:	79 22                	jns    412488 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xdc>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  412466:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  41246d:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  412474:	48 f7 d8             	neg    %rax
  412477:	48 83 d2 00          	adc    $0x0,%rdx
  41247b:	48 f7 da             	neg    %rdx
  41247e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  412482:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  412486:	eb 16                	jmp    41249e <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xf2>
	    __u = __i;
  412488:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  41248f:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  412496:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  41249a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  char* __start = __buf + 3;
  41249e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4124a5:	48 83 c0 03          	add    $0x3,%rax
  4124a9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  4124ad:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4124b4:	48 05 83 00 00 00    	add    $0x83,%rax
  4124ba:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  char* const __start_digits = __start;
  4124be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4124c2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  switch (_M_spec._M_type)
  4124c6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4124cd:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4124d1:	c0 e8 03             	shr    $0x3,%al
  4124d4:	83 e0 0f             	and    $0xf,%eax
  4124d7:	0f b6 c0             	movzbl %al,%eax
  4124da:	83 f8 06             	cmp    $0x6,%eax
  4124dd:	0f 8f 0a 02 00 00    	jg     4126ed <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  4124e3:	83 f8 05             	cmp    $0x5,%eax
  4124e6:	0f 8d 46 01 00 00    	jge    412632 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x286>
  4124ec:	83 f8 04             	cmp    $0x4,%eax
  4124ef:	0f 84 d2 00 00 00    	je     4125c7 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x21b>
  4124f5:	83 f8 04             	cmp    $0x4,%eax
  4124f8:	0f 8f ef 01 00 00    	jg     4126ed <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  4124fe:	83 f8 01             	cmp    $0x1,%eax
  412501:	7f 0d                	jg     412510 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x164>
  412503:	85 c0                	test   %eax,%eax
  412505:	0f 89 88 00 00 00    	jns    412593 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1e7>
  41250b:	e9 dd 01 00 00       	jmp    4126ed <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  412510:	83 e8 02             	sub    $0x2,%eax
  412513:	83 f8 01             	cmp    $0x1,%eax
  412516:	0f 87 d1 01 00 00    	ja     4126ed <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  41251c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412523:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412527:	83 e0 78             	and    $0x78,%eax
  41252a:	3c 10                	cmp    $0x10,%al
  41252c:	75 07                	jne    412535 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x189>
  41252e:	ba c2 a3 41 00       	mov    $0x41a3c2,%edx
  412533:	eb 05                	jmp    41253a <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x18e>
  412535:	ba c5 a3 41 00       	mov    $0x41a3c5,%edx
  41253a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  41253e:	48 89 d6             	mov    %rdx,%rsi
  412541:	48 89 c7             	mov    %rax,%rdi
  412544:	e8 1b 32 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  412549:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  41254d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  412551:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  412558:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  41255f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  412563:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412567:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  41256b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  41256f:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  412575:	48 89 d1             	mov    %rdx,%rcx
  412578:	48 89 c2             	mov    %rax,%rdx
  41257b:	e8 83 39 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  412580:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  412587:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  41258e:	e9 5b 01 00 00       	jmp    4126ee <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __res = to_chars(__start, __end, __u, 10);
  412593:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  412597:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41259b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  41259f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4125a3:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  4125a9:	48 89 d1             	mov    %rdx,%rcx
  4125ac:	48 89 c2             	mov    %rax,%rdx
  4125af:	e8 4f 39 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  4125b4:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4125bb:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  4125c2:	e9 27 01 00 00       	jmp    4126ee <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      if (__i != 0)
  4125c7:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4125ce:	48 0b 85 b8 fe ff ff 	or     -0x148(%rbp),%rax
  4125d5:	74 27                	je     4125fe <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x252>
		__base_prefix = "0";
  4125d7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4125db:	be c8 a3 41 00       	mov    $0x41a3c8,%esi
  4125e0:	48 89 c7             	mov    %rax,%rdi
  4125e3:	e8 7c 31 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  4125e8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4125ec:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4125f0:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  4125f7:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  4125fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  412602:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412606:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  41260a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  41260e:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  412614:	48 89 d1             	mov    %rdx,%rcx
  412617:	48 89 c2             	mov    %rax,%rdx
  41261a:	e8 e4 38 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  41261f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  412626:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  41262d:	e9 bc 00 00 00       	jmp    4126ee <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  412632:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412639:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41263d:	83 e0 78             	and    $0x78,%eax
  412640:	3c 28                	cmp    $0x28,%al
  412642:	75 07                	jne    41264b <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x29f>
  412644:	ba ca a3 41 00       	mov    $0x41a3ca,%edx
  412649:	eb 05                	jmp    412650 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2a4>
  41264b:	ba cd a3 41 00       	mov    $0x41a3cd,%edx
  412650:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  412654:	48 89 d6             	mov    %rdx,%rsi
  412657:	48 89 c7             	mov    %rax,%rdi
  41265a:	e8 05 31 ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  41265f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412663:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412667:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  41266e:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  412675:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  412679:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41267d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  412681:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  412685:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  41268b:	48 89 d1             	mov    %rdx,%rcx
  41268e:	48 89 c2             	mov    %rax,%rdx
  412691:	e8 6d 38 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  412696:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  41269d:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  4126a4:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4126ab:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4126af:	83 e0 78             	and    $0x78,%eax
  4126b2:	3c 30                	cmp    $0x30,%al
  4126b4:	75 37                	jne    4126ed <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4126b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4126ba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4126be:	eb 1e                	jmp    4126de <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x332>
		  *__p = __builtin_toupper(*__p);
  4126c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4126c4:	0f b6 00             	movzbl (%rax),%eax
  4126c7:	0f be c0             	movsbl %al,%eax
  4126ca:	89 c7                	mov    %eax,%edi
  4126cc:	e8 af 1c ff ff       	call   404380 <toupper@plt>
  4126d1:	89 c2                	mov    %eax,%edx
  4126d3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4126d7:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4126d9:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
  4126de:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4126e5:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  4126e9:	75 d5                	jne    4126c0 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x314>
	      break;
  4126eb:	eb 00                	jmp    4126ed <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  4126ed:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  4126ee:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4126f5:	0f b6 00             	movzbl (%rax),%eax
  4126f8:	83 e0 10             	and    $0x10,%eax
  4126fb:	84 c0                	test   %al,%al
  4126fd:	74 1b                	je     41271a <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x36e>
  4126ff:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  412706:	48 89 c7             	mov    %rax,%rdi
  412709:	e8 ec 31 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41270e:	48 85 c0             	test   %rax,%rax
  412711:	74 07                	je     41271a <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x36e>
  412713:	b8 01 00 00 00       	mov    $0x1,%eax
  412718:	eb 05                	jmp    41271f <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x373>
  41271a:	b8 00 00 00 00       	mov    $0x0,%eax
  41271f:	84 c0                	test   %al,%al
  412721:	74 4c                	je     41276f <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
	      __start -= __base_prefix.size();
  412723:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  41272a:	48 89 c7             	mov    %rax,%rdi
  41272d:	e8 c8 31 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412732:	48 f7 d8             	neg    %rax
  412735:	48 01 45 d8          	add    %rax,-0x28(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  412739:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  412740:	48 89 c7             	mov    %rax,%rdi
  412743:	e8 b2 31 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412748:	48 89 c3             	mov    %rax,%rbx
  41274b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  412752:	48 89 c7             	mov    %rax,%rdi
  412755:	e8 8e 41 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  41275a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41275e:	48 89 d1             	mov    %rdx,%rcx
  412761:	48 89 da             	mov    %rbx,%rdx
  412764:	48 89 c6             	mov    %rax,%rsi
  412767:	48 89 cf             	mov    %rcx,%rdi
  41276a:	e8 61 1a ff ff       	call   4041d0 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  41276f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  412773:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
  412777:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41277e:	0f b6 00             	movzbl (%rax),%eax
  412781:	c0 e8 02             	shr    $0x2,%al
  412784:	83 e0 03             	and    $0x3,%eax
  412787:	0f b6 d0             	movzbl %al,%edx
  41278a:	48 8b b5 b0 fe ff ff 	mov    -0x150(%rbp),%rsi
  412791:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  412798:	48 89 f7             	mov    %rsi,%rdi
  41279b:	48 89 c6             	mov    %rax,%rsi
  41279e:	e8 5f 17 00 00       	call   413f02 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_>
  4127a3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			       __start_digits - __start, __fc);
  4127a7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4127ab:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  4127af:	48 89 c3             	mov    %rax,%rbx
  4127b2:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4127b9:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4127bd:	48 89 c2             	mov    %rax,%rdx
  4127c0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4127c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4127c8:	48 89 ce             	mov    %rcx,%rsi
  4127cb:	48 89 c7             	mov    %rax,%rdi
  4127ce:	e8 27 41 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  4127d3:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  4127da:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  4127de:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4127e2:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4127e9:	49 89 c8             	mov    %rcx,%r8
  4127ec:	48 89 d9             	mov    %rbx,%rcx
  4127ef:	48 89 c7             	mov    %rax,%rdi
  4127f2:	e8 e1 20 00 00       	call   4148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  4127f7:	90                   	nop
	}
  4127f8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4127fc:	c9                   	leave
  4127fd:	c3                   	ret

00000000004127fe <_ZNSt8__format15__formatter_intIcE8_M_parseIoEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  4127fe:	55                   	push   %rbp
  4127ff:	48 89 e5             	mov    %rsp,%rbp
  412802:	48 83 ec 10          	sub    $0x10,%rsp
  412806:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41280a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  41280e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  412812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412816:	ba 01 00 00 00       	mov    $0x1,%edx
  41281b:	48 89 ce             	mov    %rcx,%rsi
  41281e:	48 89 c7             	mov    %rax,%rdi
  412821:	e8 f8 19 00 00       	call   41421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  412826:	c9                   	leave
  412827:	c3                   	ret

0000000000412828 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  412828:	55                   	push   %rbp
  412829:	48 89 e5             	mov    %rsp,%rbp
  41282c:	53                   	push   %rbx
  41282d:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  412834:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  41283b:	48 89 f0             	mov    %rsi,%rax
  41283e:	48 89 d6             	mov    %rdx,%rsi
  412841:	48 89 c0             	mov    %rax,%rax
  412844:	ba 00 00 00 00       	mov    $0x0,%edx
  412849:	48 89 f2             	mov    %rsi,%rdx
  41284c:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  412853:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  41285a:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  412861:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412868:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41286c:	83 e0 78             	and    $0x78,%eax
  41286f:	3c 38                	cmp    $0x38,%al
  412871:	75 39                	jne    4128ac <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x84>
	    return _M_format_character(_S_to_character(__i), __fc);
  412873:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  41287a:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  412881:	48 89 d7             	mov    %rdx,%rdi
  412884:	48 89 c6             	mov    %rax,%rsi
  412887:	e8 b6 36 00 00       	call   415f42 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_>
  41288c:	0f be c8             	movsbl %al,%ecx
  41288f:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  412896:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41289d:	89 ce                	mov    %ecx,%esi
  41289f:	48 89 c7             	mov    %rax,%rdi
  4128a2:	e8 05 ba ff ff       	call   40e2ac <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  4128a7:	e9 9c 03 00 00       	jmp    412c48 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x420>
	  to_chars_result __res{};
  4128ac:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
  4128b3:	00 00 00 00
  4128b7:	48 c7 85 e8 fe ff ff 	movq   $0x0,-0x118(%rbp)
  4128be:	00 00 00 00
	  string_view __base_prefix;
  4128c2:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  4128c9:	00 00 00 00
  4128cd:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  4128d4:	00 00 00 00
	    __u = __i;
  4128d8:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4128df:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  4128e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4128ea:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  char* __start = __buf + 3;
  4128ee:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4128f5:	48 83 c0 03          	add    $0x3,%rax
  4128f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  4128fd:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  412904:	48 05 83 00 00 00    	add    $0x83,%rax
  41290a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  char* const __start_digits = __start;
  41290e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412912:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  switch (_M_spec._M_type)
  412916:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41291d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412921:	c0 e8 03             	shr    $0x3,%al
  412924:	83 e0 0f             	and    $0xf,%eax
  412927:	0f b6 c0             	movzbl %al,%eax
  41292a:	83 f8 06             	cmp    $0x6,%eax
  41292d:	0f 8f 0a 02 00 00    	jg     412b3d <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  412933:	83 f8 05             	cmp    $0x5,%eax
  412936:	0f 8d 46 01 00 00    	jge    412a82 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x25a>
  41293c:	83 f8 04             	cmp    $0x4,%eax
  41293f:	0f 84 d2 00 00 00    	je     412a17 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1ef>
  412945:	83 f8 04             	cmp    $0x4,%eax
  412948:	0f 8f ef 01 00 00    	jg     412b3d <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  41294e:	83 f8 01             	cmp    $0x1,%eax
  412951:	7f 0d                	jg     412960 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x138>
  412953:	85 c0                	test   %eax,%eax
  412955:	0f 89 88 00 00 00    	jns    4129e3 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1bb>
  41295b:	e9 dd 01 00 00       	jmp    412b3d <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  412960:	83 e8 02             	sub    $0x2,%eax
  412963:	83 f8 01             	cmp    $0x1,%eax
  412966:	0f 87 d1 01 00 00    	ja     412b3d <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  41296c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412973:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412977:	83 e0 78             	and    $0x78,%eax
  41297a:	3c 10                	cmp    $0x10,%al
  41297c:	75 07                	jne    412985 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x15d>
  41297e:	ba c2 a3 41 00       	mov    $0x41a3c2,%edx
  412983:	eb 05                	jmp    41298a <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x162>
  412985:	ba c5 a3 41 00       	mov    $0x41a3c5,%edx
  41298a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  41298e:	48 89 d6             	mov    %rdx,%rsi
  412991:	48 89 c7             	mov    %rax,%rdi
  412994:	e8 cb 2d ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  412999:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  41299d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4129a1:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  4129a8:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  4129af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4129b3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4129b7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4129bb:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4129bf:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4129c5:	48 89 d1             	mov    %rdx,%rcx
  4129c8:	48 89 c2             	mov    %rax,%rdx
  4129cb:	e8 33 35 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  4129d0:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4129d7:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  4129de:	e9 5b 01 00 00       	jmp    412b3e <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      __res = to_chars(__start, __end, __u, 10);
  4129e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4129e7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4129eb:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4129ef:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4129f3:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  4129f9:	48 89 d1             	mov    %rdx,%rcx
  4129fc:	48 89 c2             	mov    %rax,%rdx
  4129ff:	e8 ff 34 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  412a04:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  412a0b:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  412a12:	e9 27 01 00 00       	jmp    412b3e <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      if (__i != 0)
  412a17:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  412a1e:	48 0b 85 b8 fe ff ff 	or     -0x148(%rbp),%rax
  412a25:	74 27                	je     412a4e <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
		__base_prefix = "0";
  412a27:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  412a2b:	be c8 a3 41 00       	mov    $0x41a3c8,%esi
  412a30:	48 89 c7             	mov    %rax,%rdi
  412a33:	e8 2c 2d ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  412a38:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  412a3c:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  412a40:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  412a47:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  412a4e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  412a52:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  412a56:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  412a5a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  412a5e:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  412a64:	48 89 d1             	mov    %rdx,%rcx
  412a67:	48 89 c2             	mov    %rax,%rdx
  412a6a:	e8 94 34 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  412a6f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  412a76:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  412a7d:	e9 bc 00 00 00       	jmp    412b3e <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  412a82:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412a89:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412a8d:	83 e0 78             	and    $0x78,%eax
  412a90:	3c 28                	cmp    $0x28,%al
  412a92:	75 07                	jne    412a9b <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x273>
  412a94:	ba ca a3 41 00       	mov    $0x41a3ca,%edx
  412a99:	eb 05                	jmp    412aa0 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x278>
  412a9b:	ba cd a3 41 00       	mov    $0x41a3cd,%edx
  412aa0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  412aa4:	48 89 d6             	mov    %rdx,%rsi
  412aa7:	48 89 c7             	mov    %rax,%rdi
  412aaa:	e8 b5 2c ff ff       	call   405764 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  412aaf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412ab3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412ab7:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  412abe:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  412ac5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  412ac9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  412acd:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  412ad1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  412ad5:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  412adb:	48 89 d1             	mov    %rdx,%rcx
  412ade:	48 89 c2             	mov    %rax,%rdx
  412ae1:	e8 1d 34 00 00       	call   415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  412ae6:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  412aed:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  412af4:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412afb:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412aff:	83 e0 78             	and    $0x78,%eax
  412b02:	3c 30                	cmp    $0x30,%al
  412b04:	75 37                	jne    412b3d <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  412b06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412b0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  412b0e:	eb 1e                	jmp    412b2e <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x306>
		  *__p = __builtin_toupper(*__p);
  412b10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  412b14:	0f b6 00             	movzbl (%rax),%eax
  412b17:	0f be c0             	movsbl %al,%eax
  412b1a:	89 c7                	mov    %eax,%edi
  412b1c:	e8 5f 18 ff ff       	call   404380 <toupper@plt>
  412b21:	89 c2                	mov    %eax,%edx
  412b23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  412b27:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  412b29:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  412b2e:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  412b35:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  412b39:	75 d5                	jne    412b10 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2e8>
	      break;
  412b3b:	eb 00                	jmp    412b3d <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  412b3d:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  412b3e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412b45:	0f b6 00             	movzbl (%rax),%eax
  412b48:	83 e0 10             	and    $0x10,%eax
  412b4b:	84 c0                	test   %al,%al
  412b4d:	74 1b                	je     412b6a <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
  412b4f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  412b56:	48 89 c7             	mov    %rax,%rdi
  412b59:	e8 9c 2d ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412b5e:	48 85 c0             	test   %rax,%rax
  412b61:	74 07                	je     412b6a <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
  412b63:	b8 01 00 00 00       	mov    $0x1,%eax
  412b68:	eb 05                	jmp    412b6f <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x347>
  412b6a:	b8 00 00 00 00       	mov    $0x0,%eax
  412b6f:	84 c0                	test   %al,%al
  412b71:	74 4c                	je     412bbf <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x397>
	      __start -= __base_prefix.size();
  412b73:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  412b7a:	48 89 c7             	mov    %rax,%rdi
  412b7d:	e8 78 2d ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412b82:	48 f7 d8             	neg    %rax
  412b85:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  412b89:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  412b90:	48 89 c7             	mov    %rax,%rdi
  412b93:	e8 62 2d ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412b98:	48 89 c3             	mov    %rax,%rbx
  412b9b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  412ba2:	48 89 c7             	mov    %rax,%rdi
  412ba5:	e8 3e 3d ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  412baa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412bae:	48 89 d1             	mov    %rdx,%rcx
  412bb1:	48 89 da             	mov    %rbx,%rdx
  412bb4:	48 89 c6             	mov    %rax,%rsi
  412bb7:	48 89 cf             	mov    %rcx,%rdi
  412bba:	e8 11 16 ff ff       	call   4041d0 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  412bbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412bc3:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
  412bc7:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412bce:	0f b6 00             	movzbl (%rax),%eax
  412bd1:	c0 e8 02             	shr    $0x2,%al
  412bd4:	83 e0 03             	and    $0x3,%eax
  412bd7:	0f b6 d0             	movzbl %al,%edx
  412bda:	48 8b b5 b0 fe ff ff 	mov    -0x150(%rbp),%rsi
  412be1:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  412be8:	48 89 f7             	mov    %rsi,%rdi
  412beb:	48 89 c6             	mov    %rax,%rsi
  412bee:	e8 6c 13 00 00       	call   413f5f <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_>
  412bf3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  412bf7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  412bfb:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  412bff:	48 89 c3             	mov    %rax,%rbx
  412c02:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  412c09:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  412c0d:	48 89 c2             	mov    %rax,%rdx
  412c10:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412c14:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  412c18:	48 89 ce             	mov    %rcx,%rsi
  412c1b:	48 89 c7             	mov    %rax,%rdi
  412c1e:	e8 d7 3c ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  412c23:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  412c2a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  412c2e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  412c32:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  412c39:	49 89 c8             	mov    %rcx,%r8
  412c3c:	48 89 d9             	mov    %rbx,%rcx
  412c3f:	48 89 c7             	mov    %rax,%rdi
  412c42:	e8 91 1c 00 00       	call   4148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  412c47:	90                   	nop
	}
  412c48:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  412c4c:	c9                   	leave
  412c4d:	c3                   	ret

0000000000412c4e <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  412c4e:	55                   	push   %rbp
  412c4f:	48 89 e5             	mov    %rsp,%rbp
  412c52:	48 83 ec 20          	sub    $0x20,%rsp
  412c56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  412c5a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  412c5e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  412c62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412c66:	48 8b 00             	mov    (%rax),%rax
  412c69:	0f b6 00             	movzbl (%rax),%eax
  412c6c:	84 c0                	test   %al,%al
  412c6e:	74 35                	je     412ca5 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x57>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  412c70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412c74:	48 8b 40 18          	mov    0x18(%rax),%rax
  412c78:	48 8b 00             	mov    (%rax),%rax
  412c7b:	89 c1                	mov    %eax,%ecx
  412c7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412c81:	48 8b 40 10          	mov    0x10(%rax),%rax
  412c85:	8b 10                	mov    (%rax),%edx
  412c87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412c8b:	48 8b 40 08          	mov    0x8(%rax),%rax
  412c8f:	66 0f 6f 00          	movdqa (%rax),%xmm0
  412c93:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  412c97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412c9b:	48 89 c7             	mov    %rax,%rdi
  412c9e:	e8 3d 15 ff ff       	call   4041e0 <_ZSt8to_charsPcS_DF128_St12chars_formati@plt>
  412ca3:	eb 59                	jmp    412cfe <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb0>
	    else if (__fmt != chars_format{})
  412ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412ca9:	48 8b 40 10          	mov    0x10(%rax),%rax
  412cad:	8b 00                	mov    (%rax),%eax
  412caf:	85 c0                	test   %eax,%eax
  412cb1:	74 2b                	je     412cde <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x90>
	      return __format::to_chars(__b, __e, __v, __fmt);
  412cb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412cb7:	48 8b 40 10          	mov    0x10(%rax),%rax
  412cbb:	8b 10                	mov    (%rax),%edx
  412cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412cc1:	48 8b 40 08          	mov    0x8(%rax),%rax
  412cc5:	66 0f 6f 00          	movdqa (%rax),%xmm0
  412cc9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412ccd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412cd1:	48 89 ce             	mov    %rcx,%rsi
  412cd4:	48 89 c7             	mov    %rax,%rdi
  412cd7:	e8 c4 14 ff ff       	call   4041a0 <_ZSt8to_charsPcS_DF128_St12chars_format@plt>
  412cdc:	eb 20                	jmp    412cfe <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb0>
	      return __format::to_chars(__b, __e, __v);
  412cde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412ce2:	48 8b 40 08          	mov    0x8(%rax),%rax
  412ce6:	66 0f 6f 00          	movdqa (%rax),%xmm0
  412cea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412cee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412cf2:	48 89 d6             	mov    %rdx,%rsi
  412cf5:	48 89 c7             	mov    %rax,%rdi
  412cf8:	e8 53 16 ff ff       	call   404350 <_ZSt8to_charsPcS_DF128_@plt>
  412cfd:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  412cfe:	c9                   	leave
  412cff:	c3                   	ret

0000000000412d00 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  412d00:	55                   	push   %rbp
  412d01:	48 89 e5             	mov    %rsp,%rbp
  412d04:	53                   	push   %rbx
  412d05:	48 83 ec 28          	sub    $0x28,%rsp
  412d09:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  412d0d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  412d11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  412d15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412d19:	48 8b 00             	mov    (%rax),%rax
  412d1c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  412d20:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  412d24:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  412d28:	48 01 ca             	add    %rcx,%rdx
  412d2b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  412d2f:	48 83 c1 01          	add    $0x1,%rcx
  412d33:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  412d37:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  412d3b:	48 89 ce             	mov    %rcx,%rsi
  412d3e:	48 89 c7             	mov    %rax,%rdi
  412d41:	e8 08 ff ff ff       	call   412c4e <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  412d46:	48 89 03             	mov    %rax,(%rbx)
  412d49:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  412d4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412d51:	48 8b 40 08          	mov    0x8(%rax),%rax
  412d55:	8b 40 08             	mov    0x8(%rax),%eax
  412d58:	85 c0                	test   %eax,%eax
  412d5a:	75 11                	jne    412d6d <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  412d5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412d60:	48 8b 40 08          	mov    0x8(%rax),%rax
  412d64:	48 8b 00             	mov    (%rax),%rax
  412d67:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  412d6b:	eb 05                	jmp    412d72 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  412d6d:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  412d72:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  412d76:	c9                   	leave
  412d77:	c3                   	ret

0000000000412d78 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  412d78:	55                   	push   %rbp
  412d79:	48 89 e5             	mov    %rsp,%rbp
  412d7c:	53                   	push   %rbx
  412d7d:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
  412d84:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  412d8b:	0f 29 85 80 fd ff ff 	movaps %xmm0,-0x280(%rbp)
  412d92:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
	  std::string __dynbuf;
  412d99:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412da0:	48 89 c7             	mov    %rax,%rdi
  412da3:	e8 3e 1c ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  412da8:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  412daf:	00 00 00 00
  412db3:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  412dba:	00 00 00 00
	  size_t __prec = 6;
  412dbe:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  412dc5:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  412dc9:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412dd0:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412dd4:	83 e0 06             	and    $0x6,%eax
  412dd7:	84 c0                	test   %al,%al
  412dd9:	0f 95 c0             	setne  %al
  412ddc:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  412de2:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  412de9:	84 c0                	test   %al,%al
  412deb:	74 20                	je     412e0d <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x95>
	    __prec = _M_spec._M_get_precision(__fc);
  412ded:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412df4:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  412dfb:	48 89 d6             	mov    %rdx,%rsi
  412dfe:	48 89 c7             	mov    %rax,%rdi
  412e01:	e8 2e 21 00 00       	call   414f34 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  412e06:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  412e0d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  412e14:	48 83 c0 01          	add    $0x1,%rax
  412e18:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  412e1c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  412e23:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  412e27:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  412e2b:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  412e32:	00 00 00
	  bool __upper = false;
  412e35:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  412e39:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  412e3d:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  412e41:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412e48:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412e4c:	c0 e8 03             	shr    $0x3,%al
  412e4f:	83 e0 0f             	and    $0xf,%eax
  412e52:	0f b6 c0             	movzbl %al,%eax
  412e55:	89 c0                	mov    %eax,%eax
  412e57:	48 8b 04 c5 20 d3 41 	mov    0x41d320(,%rax,8),%rax
  412e5e:	00
  412e5f:	ff e0                	jmp    *%rax
	      __upper = true;
  412e61:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  412e65:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  412e69:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412e70:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412e74:	83 e0 78             	and    $0x78,%eax
  412e77:	3c 10                	cmp    $0x10,%al
  412e79:	74 04                	je     412e7f <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x107>
		__expc = 'p';
  412e7b:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  412e7f:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  412e86:	00 00 00
	      break;
  412e89:	eb 67                	jmp    412ef2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  412e8b:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  412e8f:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  412e93:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  412e9a:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  412ea1:	00 00 00
	      break;
  412ea4:	eb 4c                	jmp    412ef2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  412ea6:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  412eaa:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  412eb1:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  412eb8:	00 00 00
	      break;
  412ebb:	eb 35                	jmp    412ef2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  412ebd:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  412ec1:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  412ec5:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  412ec9:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  412ed0:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  412ed7:	00 00 00
	      break;
  412eda:	eb 16                	jmp    412ef2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      if (__use_prec)
  412edc:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  412ee3:	84 c0                	test   %al,%al
  412ee5:	74 0a                	je     412ef1 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x179>
		__fmt = chars_format::general;
  412ee7:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  412eee:	00 00 00
	      break;
  412ef1:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  412ef2:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  412ef9:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  412f00:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  412f07:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  412f0e:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  412f15:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  412f1c:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  412f23:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  412f2a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  412f2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412f32:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  412f39:	48 89 ce             	mov    %rcx,%rsi
  412f3c:	48 89 c7             	mov    %rax,%rdi
  412f3f:	e8 0a fd ff ff       	call   412c4e <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  412f44:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  412f4b:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  412f52:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  412f58:	83 f8 4b             	cmp    $0x4b,%eax
  412f5b:	0f 94 c0             	sete   %al
  412f5e:	0f b6 c0             	movzbl %al,%eax
  412f61:	48 85 c0             	test   %rax,%rax
  412f64:	0f 84 13 01 00 00    	je     41307d <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x305>
	      size_t __guess = 8 + __prec;
  412f6a:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  412f71:	48 83 c0 08          	add    $0x8,%rax
  412f75:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  412f79:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  412f7f:	83 f8 02             	cmp    $0x2,%eax
  412f82:	75 08                	jne    412f8c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x214>
		    __guess += numeric_limits<_Fp>::max_exponent10;
  412f84:	48 81 45 d0 44 13 00 	addq   $0x1344,-0x30(%rbp)
  412f8b:	00
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  412f8c:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  412f93:	00
  412f94:	77 08                	ja     412f9e <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
		__guess = sizeof(__buf) * 2;
  412f96:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  412f9d:	00
	      __dynbuf.reserve(__guess);
  412f9e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  412fa2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412fa9:	48 89 d6             	mov    %rdx,%rsi
  412fac:	48 89 c7             	mov    %rax,%rdi
  412faf:	e8 1c 74 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  412fb4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  412fbb:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  412fc2:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  412fc9:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  412fd0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412fd7:	48 89 c7             	mov    %rax,%rdi
  412fda:	e8 c3 73 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  412fdf:	48 01 c0             	add    %rax,%rax
  412fe2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  412fe9:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  412ff0:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  412ff7:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  412ffe:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  413005:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  41300c:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  413013:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41301a:	48 89 ce             	mov    %rcx,%rsi
  41301d:	48 89 c7             	mov    %rax,%rdi
  413020:	e8 cf 45 00 00       	call   4175f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  413025:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  413026:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41302d:	48 89 c7             	mov    %rax,%rdi
  413030:	e8 2d 6b ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  413035:	48 83 c0 01          	add    $0x1,%rax
  413039:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  41303d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413044:	48 89 c7             	mov    %rax,%rdi
  413047:	e8 16 6b ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  41304c:	48 89 c3             	mov    %rax,%rbx
  41304f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413056:	48 89 c7             	mov    %rax,%rdi
  413059:	e8 c2 1b ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41305e:	48 01 d8             	add    %rbx,%rax
  413061:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  413065:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  41306b:	83 f8 4b             	cmp    $0x4b,%eax
  41306e:	0f 94 c0             	sete   %al
  413071:	0f b6 c0             	movzbl %al,%eax
  413074:	48 85 c0             	test   %rax,%rax
  413077:	0f 85 37 ff ff ff    	jne    412fb4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x23c>
	  if (__upper)
  41307d:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  413081:	74 35                	je     4130b8 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x340>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  413083:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413087:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  41308b:	eb 1e                	jmp    4130ab <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x333>
		*__p = std::toupper(*__p);
  41308d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  413091:	0f b6 00             	movzbl (%rax),%eax
  413094:	0f be c0             	movsbl %al,%eax
  413097:	89 c7                	mov    %eax,%edi
  413099:	e8 e2 12 ff ff       	call   404380 <toupper@plt>
  41309e:	89 c2                	mov    %eax,%edx
  4130a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4130a4:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  4130a6:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  4130ab:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  4130b2:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  4130b6:	75 d5                	jne    41308d <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
	  bool __have_sign = true;
  4130b8:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  4130bc:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  4130c3:	ff
  4130c4:	0f 50 c0             	movmskps %xmm0,%eax
  4130c7:	83 e0 08             	and    $0x8,%eax
  4130ca:	85 c0                	test   %eax,%eax
  4130cc:	75 42                	jne    413110 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
	      if (_M_spec._M_sign == _Sign_plus)
  4130ce:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4130d5:	0f b6 00             	movzbl (%rax),%eax
  4130d8:	83 e0 0c             	and    $0xc,%eax
  4130db:	3c 04                	cmp    $0x4,%al
  4130dd:	75 0e                	jne    4130ed <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x375>
		*--__start = '+';
  4130df:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  4130e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4130e8:	c6 00 2b             	movb   $0x2b,(%rax)
  4130eb:	eb 23                	jmp    413110 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
	      else if (_M_spec._M_sign == _Sign_space)
  4130ed:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4130f4:	0f b6 00             	movzbl (%rax),%eax
  4130f7:	83 e0 0c             	and    $0xc,%eax
  4130fa:	3c 0c                	cmp    $0xc,%al
  4130fc:	75 0e                	jne    41310c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x394>
		*--__start = ' ';
  4130fe:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  413103:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413107:	c6 00 20             	movb   $0x20,(%rax)
  41310a:	eb 04                	jmp    413110 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
		__have_sign = false;
  41310c:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  413110:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  413117:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  41311b:	48 89 c2             	mov    %rax,%rdx
  41311e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  413122:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  413129:	48 89 ce             	mov    %rcx,%rsi
  41312c:	48 89 c7             	mov    %rax,%rdi
  41312f:	e8 c6 37 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  413134:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41313b:	0f b6 00             	movzbl (%rax),%eax
  41313e:	83 e0 10             	and    $0x10,%eax
  413141:	84 c0                	test   %al,%al
  413143:	0f 84 63 04 00 00    	je     4135ac <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
  413149:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  413150:	ff
  413151:	66 0f 6f 0d b7 73 00 	movdqa 0x73b7(%rip),%xmm1        # 41a510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  413158:	00
  413159:	66 0f db c1          	pand   %xmm1,%xmm0
  41315d:	bb 01 00 00 00       	mov    $0x1,%ebx
  413162:	66 0f 6f 0d b6 73 00 	movdqa 0x73b6(%rip),%xmm1        # 41a520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  413169:	00
  41316a:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  413171:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  413178:	ff
  413179:	e8 62 11 ff ff       	call   4042e0 <__unordtf2@plt>
  41317e:	48 85 c0             	test   %rax,%rax
  413181:	75 1f                	jne    4131a2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x42a>
  413183:	66 0f 6f 0d 95 73 00 	movdqa 0x7395(%rip),%xmm1        # 41a520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  41318a:	00
  41318b:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  413192:	ff
  413193:	e8 48 0f ff ff       	call   4040e0 <__gttf2@plt>
  413198:	48 85 c0             	test   %rax,%rax
  41319b:	7f 05                	jg     4131a2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x42a>
  41319d:	bb 00 00 00 00       	mov    $0x0,%ebx
  4131a2:	89 d8                	mov    %ebx,%eax
  4131a4:	83 f0 01             	xor    $0x1,%eax
  4131a7:	0f b6 c0             	movzbl %al,%eax
  4131aa:	85 c0                	test   %eax,%eax
  4131ac:	0f 84 fa 03 00 00    	je     4135ac <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
	      string_view __s = __narrow_str;
  4131b2:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4131b9:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4131c0:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  4131c7:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  4131ce:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  4131d5:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  4131d6:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4131dd:	ba 00 00 00 00       	mov    $0x0,%edx
  4131e2:	be 2e 00 00 00       	mov    $0x2e,%esi
  4131e7:	48 89 c7             	mov    %rax,%rdi
  4131ea:	e8 d9 46 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4131ef:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  4131f3:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  4131f8:	0f 84 a5 00 00 00    	je     4132a3 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x52b>
		  __p = __s.find(__expc, __d + 1);
  4131fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  413202:	48 8d 50 01          	lea    0x1(%rax),%rdx
  413206:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  41320a:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  413211:	89 ce                	mov    %ecx,%esi
  413213:	48 89 c7             	mov    %rax,%rdi
  413216:	e8 ad 46 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  41321b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  41321f:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  413224:	75 13                	jne    413239 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4c1>
		    __p = __s.size();
  413226:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41322d:	48 89 c7             	mov    %rax,%rdi
  413230:	e8 c5 26 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413235:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  413239:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  41323d:	0f 84 af 00 00 00    	je     4132f2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
		      if (__s[__have_sign] != '0')
  413243:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  413247:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41324e:	48 89 d6             	mov    %rdx,%rsi
  413251:	48 89 c7             	mov    %rax,%rdi
  413254:	e8 b3 26 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  413259:	0f b6 00             	movzbl (%rax),%eax
  41325c:	3c 30                	cmp    $0x30,%al
  41325e:	0f 95 c0             	setne  %al
  413261:	84 c0                	test   %al,%al
  413263:	74 15                	je     41327a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x502>
			__sigfigs = __p - __have_sign - 1;
  413265:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  413269:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41326d:	48 29 c2             	sub    %rax,%rdx
  413270:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  413274:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  413278:	eb 78                	jmp    4132f2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  41327a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41327e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  413282:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  413289:	be 30 00 00 00       	mov    $0x30,%esi
  41328e:	48 89 c7             	mov    %rax,%rdi
  413291:	e8 74 0a 00 00       	call   413d0a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  413296:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41329a:	48 29 c2             	sub    %rax,%rdx
  41329d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4132a1:	eb 4f                	jmp    4132f2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
		  __p = __s.find(__expc); // Find the exponent, if present.
  4132a3:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4132a7:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4132ae:	ba 00 00 00 00       	mov    $0x0,%edx
  4132b3:	89 ce                	mov    %ecx,%esi
  4132b5:	48 89 c7             	mov    %rax,%rdi
  4132b8:	e8 0b 46 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4132bd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  4132c1:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  4132c6:	75 13                	jne    4132db <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x563>
		    __p = __s.size();
  4132c8:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4132cf:	48 89 c7             	mov    %rax,%rdi
  4132d2:	e8 23 26 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4132d7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  4132db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4132df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  4132e3:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  4132e7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4132eb:	48 29 c2             	sub    %rax,%rdx
  4132ee:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  4132f2:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  4132f6:	74 1b                	je     413313 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59b>
  4132f8:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  4132ff:	48 85 c0             	test   %rax,%rax
  413302:	74 0f                	je     413313 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59b>
		  __z = __prec - __sigfigs;
  413304:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  41330b:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  41330f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  413313:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  413317:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41331b:	0f 94 c0             	sete   %al
  41331e:	0f b6 d0             	movzbl %al,%edx
  413321:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  413325:	48 01 d0             	add    %rdx,%rax
  413328:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  41332c:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  413331:	0f 84 75 02 00 00    	je     4135ac <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  413337:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41333e:	48 89 c7             	mov    %rax,%rdi
  413341:	e8 74 ac ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  413346:	84 c0                	test   %al,%al
  413348:	74 1e                	je     413368 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f0>
  41334a:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  413351:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  413355:	48 29 c2             	sub    %rax,%rdx
  413358:	48 89 d0             	mov    %rdx,%rax
  41335b:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  41335f:	72 07                	jb     413368 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f0>
  413361:	b8 01 00 00 00       	mov    $0x1,%eax
  413366:	eb 05                	jmp    41336d <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f5>
  413368:	b8 00 00 00 00       	mov    $0x0,%eax
  41336d:	84 c0                	test   %al,%al
  41336f:	0f 84 d7 00 00 00    	je     41344c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6d4>
					__s.size() - __p);
  413375:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41337c:	48 89 c7             	mov    %rax,%rdi
  41337f:	e8 76 25 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  413384:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  413388:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41338c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  413390:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  413394:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  413398:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41339c:	48 01 d1             	add    %rdx,%rcx
  41339f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4133a3:	48 01 d1             	add    %rdx,%rcx
  4133a6:	48 89 c2             	mov    %rax,%rdx
  4133a9:	48 89 cf             	mov    %rcx,%rdi
  4133ac:	e8 7f 0f ff ff       	call   404330 <memmove@plt>
		      if (__d == __p)
  4133b1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4133b5:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4133b9:	75 16                	jne    4133d1 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x659>
			__start[__p++] = '.';
  4133bb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4133bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4133c3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4133c7:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4133cb:	48 01 c8             	add    %rcx,%rax
  4133ce:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  4133d1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4133d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4133d9:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4133dd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4133e1:	48 89 c2             	mov    %rax,%rdx
  4133e4:	be 30 00 00 00       	mov    $0x30,%esi
  4133e9:	48 89 cf             	mov    %rcx,%rdi
  4133ec:	e8 0f 0d ff ff       	call   404100 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  4133f1:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4133f8:	48 89 c7             	mov    %rax,%rdi
  4133fb:	e8 e8 34 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  413400:	48 89 c3             	mov    %rax,%rbx
  413403:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41340a:	48 89 c7             	mov    %rax,%rdi
  41340d:	e8 e8 24 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413412:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  413416:	48 01 c2             	add    %rax,%rdx
  413419:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  413420:	48 89 de             	mov    %rbx,%rsi
  413423:	48 89 c7             	mov    %rax,%rdi
  413426:	e8 cf 34 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  41342b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  413432:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  413439:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  413440:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  413447:	e9 60 01 00 00       	jmp    4135ac <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
		      __dynbuf.reserve(__s.size() + __extras);
  41344c:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  413453:	48 89 c7             	mov    %rax,%rdi
  413456:	e8 9f 24 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41345b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41345f:	48 01 c2             	add    %rax,%rdx
  413462:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413469:	48 89 d6             	mov    %rdx,%rsi
  41346c:	48 89 c7             	mov    %rax,%rdi
  41346f:	e8 5c 6f ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  413474:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41347b:	48 89 c7             	mov    %rax,%rdi
  41347e:	e8 37 ab ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  413483:	84 c0                	test   %al,%al
  413485:	0f 84 c5 00 00 00    	je     413550 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7d8>
			  __dynbuf = __s.substr(0, __p);
  41348b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41348f:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  413496:	be 00 00 00 00       	mov    $0x0,%esi
  41349b:	48 89 c7             	mov    %rax,%rdi
  41349e:	e8 81 76 ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  4134a3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4134aa:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4134b1:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  4134b8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4134bf:	48 89 d6             	mov    %rdx,%rsi
  4134c2:	48 89 c7             	mov    %rax,%rdi
  4134c5:	e8 9e 08 00 00       	call   413d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  4134ca:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4134ce:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4134d2:	75 14                	jne    4134e8 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x770>
			    __dynbuf += '.';
  4134d4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4134db:	be 2e 00 00 00       	mov    $0x2e,%esi
  4134e0:	48 89 c7             	mov    %rax,%rdi
  4134e3:	e8 a6 08 00 00       	call   413d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  4134e8:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  4134ed:	74 1b                	je     41350a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x792>
			    __dynbuf.append(__z, '0');
  4134ef:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4134f3:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4134fa:	ba 30 00 00 00       	mov    $0x30,%edx
  4134ff:	48 89 ce             	mov    %rcx,%rsi
  413502:	48 89 c7             	mov    %rax,%rdi
  413505:	e8 ae 08 00 00       	call   413db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  41350a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  41350e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  413515:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41351c:	48 89 ce             	mov    %rcx,%rsi
  41351f:	48 89 c7             	mov    %rax,%rdi
  413522:	e8 fd 75 ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  413527:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  41352e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  413535:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  41353c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413543:	48 89 d6             	mov    %rdx,%rsi
  413546:	48 89 c7             	mov    %rax,%rdi
  413549:	e8 b4 08 00 00       	call   413e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  41354e:	eb 3f                	jmp    41358f <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x817>
			  __dynbuf.insert(__p, __extras, '0');
  413550:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  413554:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  413558:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41355f:	b9 30 00 00 00       	mov    $0x30,%ecx
  413564:	48 89 c7             	mov    %rax,%rdi
  413567:	e8 f0 08 00 00       	call   413e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  41356c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  413570:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  413574:	75 19                	jne    41358f <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x817>
			    __dynbuf[__p] = '.';
  413576:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41357a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413581:	48 89 d6             	mov    %rdx,%rsi
  413584:	48 89 c7             	mov    %rax,%rdi
  413587:	e8 2a 09 00 00       	call   413eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  41358c:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  41358f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413596:	48 89 c7             	mov    %rax,%rdi
  413599:	e8 92 3e ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  41359e:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4135a5:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  4135ac:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4135b3:	48 89 c7             	mov    %rax,%rdi
  4135b6:	e8 2b 14 ff ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  4135bb:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  4135c2:	00 00 00 00
  4135c6:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  4135cd:	00 00 00 00
	    __str = __narrow_str;
  4135d1:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4135d8:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4135df:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  4135e6:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  4135ed:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4135f4:	0f b6 00             	movzbl (%rax),%eax
  4135f7:	83 e0 20             	and    $0x20,%eax
  4135fa:	84 c0                	test   %al,%al
  4135fc:	0f 84 24 01 00 00    	je     413726 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
  413602:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  413609:	ff
  41360a:	66 0f 6f 0d fe 6e 00 	movdqa 0x6efe(%rip),%xmm1        # 41a510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  413611:	00
  413612:	66 0f db c1          	pand   %xmm1,%xmm0
  413616:	bb 01 00 00 00       	mov    $0x1,%ebx
  41361b:	66 0f 6f 0d fd 6e 00 	movdqa 0x6efd(%rip),%xmm1        # 41a520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  413622:	00
  413623:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  41362a:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  413631:	ff
  413632:	e8 a9 0c ff ff       	call   4042e0 <__unordtf2@plt>
  413637:	48 85 c0             	test   %rax,%rax
  41363a:	75 1f                	jne    41365b <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e3>
  41363c:	66 0f 6f 0d dc 6e 00 	movdqa 0x6edc(%rip),%xmm1        # 41a520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  413643:	00
  413644:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  41364b:	ff
  41364c:	e8 8f 0a ff ff       	call   4040e0 <__gttf2@plt>
  413651:	48 85 c0             	test   %rax,%rax
  413654:	7f 05                	jg     41365b <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e3>
  413656:	bb 00 00 00 00       	mov    $0x0,%ebx
  41365b:	89 d8                	mov    %ebx,%eax
  41365d:	83 f0 01             	xor    $0x1,%eax
  413660:	0f b6 c0             	movzbl %al,%eax
  413663:	85 c0                	test   %eax,%eax
  413665:	0f 84 bb 00 00 00    	je     413726 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41366b:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  413672:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  413679:	48 89 d6             	mov    %rdx,%rsi
  41367c:	48 89 c7             	mov    %rax,%rdi
  41367f:	e8 aa 0e 00 00       	call   41452e <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  413684:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  413688:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  41368f:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  413696:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  41369d:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4136a4:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  4136ab:	4d 89 c1             	mov    %r8,%r9
  4136ae:	41 89 c8             	mov    %ecx,%r8d
  4136b1:	48 89 d1             	mov    %rdx,%rcx
  4136b4:	48 89 c2             	mov    %rax,%rdx
  4136b7:	e8 32 1a 00 00       	call   4150ee <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  4136bc:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4136c3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4136ca:	48 89 d6             	mov    %rdx,%rsi
  4136cd:	48 89 c7             	mov    %rax,%rdi
  4136d0:	e8 9f 0e 00 00       	call   414574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  4136d5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4136dc:	48 89 c7             	mov    %rax,%rdi
  4136df:	e8 9e 32 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4136e4:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4136eb:	48 89 c7             	mov    %rax,%rdi
  4136ee:	e8 dd 0b ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  4136f3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4136fa:	48 89 c7             	mov    %rax,%rdi
  4136fd:	e8 b8 a8 ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  413702:	83 f0 01             	xor    $0x1,%eax
  413705:	84 c0                	test   %al,%al
  413707:	74 1d                	je     413726 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
		__str = __wstr;
  413709:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  413710:	48 89 c7             	mov    %rax,%rdi
  413713:	e8 18 3d ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  413718:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  41371f:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  413726:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41372d:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  413734:	48 89 d6             	mov    %rdx,%rsi
  413737:	48 89 c7             	mov    %rax,%rdi
  41373a:	e8 4b 1c 00 00       	call   41538a <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41373f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  413743:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41374a:	48 89 c7             	mov    %rax,%rdi
  41374d:	e8 a8 21 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413752:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  413756:	0f 93 c0             	setae  %al
  413759:	84 c0                	test   %al,%al
  41375b:	74 36                	je     413793 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa1b>
	    return __format::__write(__fc.out(), __str);
  41375d:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  413764:	48 89 c7             	mov    %rax,%rdi
  413767:	e8 86 72 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  41376c:	48 89 c1             	mov    %rax,%rcx
  41376f:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  413776:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  41377d:	48 89 d6             	mov    %rdx,%rsi
  413780:	48 89 c2             	mov    %rax,%rdx
  413783:	48 89 cf             	mov    %rcx,%rdi
  413786:	e8 83 9f ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41378b:	48 89 c3             	mov    %rax,%rbx
  41378e:	e9 c9 01 00 00       	jmp    41395c <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbe4>
	  char32_t __fill_char = _M_spec._M_fill;
  413793:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41379a:	8b 40 08             	mov    0x8(%rax),%eax
  41379d:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  4137a0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4137a7:	0f b6 00             	movzbl (%rax),%eax
  4137aa:	83 e0 03             	and    $0x3,%eax
  4137ad:	0f b6 c0             	movzbl %al,%eax
  4137b0:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  4137b3:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4137ba:	48 89 c7             	mov    %rax,%rdi
  4137bd:	e8 38 21 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4137c2:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4137c6:	48 29 c2             	sub    %rax,%rdx
  4137c9:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  4137cd:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4137d4:	48 89 c7             	mov    %rax,%rdi
  4137d7:	e8 16 72 ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4137dc:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  4137e3:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  4137e7:	0f 85 32 01 00 00    	jne    41391f <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
	      __align = _Align_right;
  4137ed:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  4137f4:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4137fb:	0f b6 00             	movzbl (%rax),%eax
  4137fe:	83 e0 40             	and    $0x40,%eax
  413801:	84 c0                	test   %al,%al
  413803:	0f 84 0f 01 00 00    	je     413918 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba0>
  413809:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  413810:	ff
  413811:	66 0f 6f 0d f7 6c 00 	movdqa 0x6cf7(%rip),%xmm1        # 41a510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  413818:	00
  413819:	66 0f db c1          	pand   %xmm1,%xmm0
  41381d:	bb 01 00 00 00       	mov    $0x1,%ebx
  413822:	66 0f 6f 0d f6 6c 00 	movdqa 0x6cf6(%rip),%xmm1        # 41a520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  413829:	00
  41382a:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  413831:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  413838:	ff
  413839:	e8 a2 0a ff ff       	call   4042e0 <__unordtf2@plt>
  41383e:	48 85 c0             	test   %rax,%rax
  413841:	75 1f                	jne    413862 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaea>
  413843:	66 0f 6f 0d d5 6c 00 	movdqa 0x6cd5(%rip),%xmm1        # 41a520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  41384a:	00
  41384b:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  413852:	ff
  413853:	e8 88 08 ff ff       	call   4040e0 <__gttf2@plt>
  413858:	48 85 c0             	test   %rax,%rax
  41385b:	7f 05                	jg     413862 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaea>
  41385d:	bb 00 00 00 00       	mov    $0x0,%ebx
  413862:	89 d8                	mov    %ebx,%eax
  413864:	83 f0 01             	xor    $0x1,%eax
  413867:	0f b6 c0             	movzbl %al,%eax
  41386a:	85 c0                	test   %eax,%eax
  41386c:	0f 84 a6 00 00 00    	je     413918 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba0>
		  __fill_char = _CharT('0');
  413872:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  413879:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  413880:	be 00 00 00 00       	mov    $0x0,%esi
  413885:	48 89 c7             	mov    %rax,%rdi
  413888:	e8 7f 20 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41388d:	0f b6 00             	movzbl (%rax),%eax
  413890:	0f be c0             	movsbl %al,%eax
  413893:	89 c7                	mov    %eax,%edi
  413895:	e8 4a 18 ff ff       	call   4050e4 <_ZNSt8__format11__is_xdigitEc>
  41389a:	83 f0 01             	xor    $0x1,%eax
  41389d:	84 c0                	test   %al,%al
  41389f:	74 7e                	je     41391f <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
		      *__out++ = __str[0];
  4138a1:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4138a8:	be 00 00 00 00       	mov    $0x0,%esi
  4138ad:	48 89 c7             	mov    %rax,%rdi
  4138b0:	e8 57 20 ff ff       	call   40590c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  4138b5:	0f b6 00             	movzbl (%rax),%eax
  4138b8:	0f be c0             	movsbl %al,%eax
  4138bb:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  4138c2:	00 00 00
      operator++(int) { return *this; }
  4138c5:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  4138cc:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4138d3:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4138da:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4138e1:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4138e7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4138ee:	48 8b 00             	mov    (%rax),%rax
  4138f1:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4138f8:	89 d6                	mov    %edx,%esi
  4138fa:	48 89 c7             	mov    %rax,%rdi
  4138fd:	e8 f8 34 00 00       	call   416dfa <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  413902:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  413909:	be 01 00 00 00       	mov    $0x1,%esi
  41390e:	48 89 c7             	mov    %rax,%rdi
  413911:	e8 f4 1a 00 00       	call   41540a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  413916:	eb 07                	jmp    41391f <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
		__fill_char = _CharT(' ');
  413918:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  41391f:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  413926:	48 89 c7             	mov    %rax,%rdi
  413929:	e8 3d 54 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41392e:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  413932:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  413936:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  413939:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  413940:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  413947:	48 8b 00             	mov    (%rax),%rax
  41394a:	45 89 c1             	mov    %r8d,%r9d
  41394d:	49 89 f8             	mov    %rdi,%r8
  413950:	48 89 c7             	mov    %rax,%rdi
  413953:	e8 6f 1d 00 00       	call   4156c7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  413958:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  41395b:	90                   	nop
	}
  41395c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  413963:	48 89 c7             	mov    %rax,%rdi
  413966:	e8 17 30 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41396b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413972:	48 89 c7             	mov    %rax,%rdi
  413975:	e8 08 30 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41397a:	48 89 d8             	mov    %rbx,%rax
  41397d:	eb 45                	jmp    4139c4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc4c>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41397f:	48 89 c3             	mov    %rax,%rbx
  413982:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  413989:	48 89 c7             	mov    %rax,%rdi
  41398c:	e8 3f 09 ff ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
  413991:	eb 03                	jmp    413996 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc1e>
	}
  413993:	48 89 c3             	mov    %rax,%rbx
  413996:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41399d:	48 89 c7             	mov    %rax,%rdi
  4139a0:	e8 dd 2f ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4139a5:	eb 03                	jmp    4139aa <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc32>
  4139a7:	48 89 c3             	mov    %rax,%rbx
  4139aa:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4139b1:	48 89 c7             	mov    %rax,%rdi
  4139b4:	e8 c9 2f ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4139b9:	48 89 d8             	mov    %rbx,%rax
  4139bc:	48 89 c7             	mov    %rax,%rdi
  4139bf:	e8 ac 09 ff ff       	call   404370 <_Unwind_Resume@plt>
  4139c4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4139c8:	c9                   	leave
  4139c9:	c3                   	ret

00000000004139ca <_ZNKSt6ranges9__copy_fnclIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES7_NSt8__format10_Sink_iterIcEEEENS_13in_out_resultIT_T1_EESC_T0_SD_>:
      operator()(_Iter __first, _Sent __last, _Out __result) const
  4139ca:	55                   	push   %rbp
  4139cb:	48 89 e5             	mov    %rsp,%rbp
  4139ce:	41 54                	push   %r12
  4139d0:	53                   	push   %rbx
  4139d1:	48 83 ec 20          	sub    $0x20,%rsp
  4139d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4139d9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4139dd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4139e1:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
					     std::move(__result));
  4139e5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4139e9:	48 89 c7             	mov    %rax,%rdi
  4139ec:	e8 7a 53 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4139f1:	49 89 c4             	mov    %rax,%r12
					     std::move(__last),
  4139f4:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4139f8:	48 89 c7             	mov    %rax,%rdi
  4139fb:	e8 89 25 00 00       	call   415f89 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>
  413a00:	48 89 c3             	mov    %rax,%rbx
	return ranges::__copy_or_move<false>(std::move(__first),
  413a03:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  413a07:	48 89 c7             	mov    %rax,%rdi
  413a0a:	e8 7a 25 00 00       	call   415f89 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>
  413a0f:	49 8b 14 24          	mov    (%r12),%rdx
  413a13:	48 8b 0b             	mov    (%rbx),%rcx
  413a16:	48 8b 00             	mov    (%rax),%rax
  413a19:	48 89 ce             	mov    %rcx,%rsi
  413a1c:	48 89 c7             	mov    %rax,%rdi
  413a1f:	e8 73 25 00 00       	call   415f97 <_ZNSt6ranges14__copy_or_moveILb0EN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES6_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESG_EESE_T1_SF_>
      }
  413a24:	48 83 c4 20          	add    $0x20,%rsp
  413a28:	5b                   	pop    %rbx
  413a29:	41 5c                	pop    %r12
  413a2b:	5d                   	pop    %rbp
  413a2c:	c3                   	ret
  413a2d:	90                   	nop

0000000000413a2e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_EN11_TerminatorD1Ev>:
#if __cpp_lib_is_constant_evaluated
      if (std::__is_constant_evaluated() && __n > size())
	traits_type::assign(__p + size(), __n - size(), _CharT());
#endif
      struct _Terminator {
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  413a2e:	55                   	push   %rbp
  413a2f:	48 89 e5             	mov    %rsp,%rbp
  413a32:	48 83 ec 10          	sub    $0x10,%rsp
  413a36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413a3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413a3e:	48 8b 00             	mov    (%rax),%rax
  413a41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  413a45:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  413a49:	48 89 d6             	mov    %rdx,%rsi
  413a4c:	48 89 c7             	mov    %rax,%rdi
  413a4f:	e8 e2 2e ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  413a54:	90                   	nop
  413a55:	c9                   	leave
  413a56:	c3                   	ret
  413a57:	90                   	nop

0000000000413a58 <_ZZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmENKUlT_T0_E_clIPcmEEDaS8_S9_>:
					    [](auto, auto __n2) {
  413a58:	55                   	push   %rbp
  413a59:	48 89 e5             	mov    %rsp,%rbp
  413a5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413a60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  413a64:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
					      return __n2;
  413a68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
					    [](auto, auto __n2) {
  413a6c:	5d                   	pop    %rbp
  413a6d:	c3                   	ret

0000000000413a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_>:
    basic_string<_CharT, _Traits, _Alloc>::
  413a6e:	55                   	push   %rbp
  413a6f:	48 89 e5             	mov    %rsp,%rbp
  413a72:	53                   	push   %rbx
  413a73:	48 83 ec 48          	sub    $0x48,%rsp
  413a77:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  413a7b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  413a7f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  413a83:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  413a87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  413a8b:	48 89 d6             	mov    %rdx,%rsi
  413a8e:	48 89 c7             	mov    %rax,%rdi
  413a91:	e8 3a 69 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  413a96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  413a9a:	48 89 c7             	mov    %rax,%rdi
  413a9d:	e8 82 2e ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  413aa2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  413aa6:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  413aab:	84 c0                	test   %al,%al
  413aad:	74 19                	je     413ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5a>
  413aaf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  413ab3:	48 89 c7             	mov    %rax,%rdi
  413ab6:	e8 65 11 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  413abb:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  413abf:	73 07                	jae    413ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5a>
  413ac1:	b8 01 00 00 00       	mov    $0x1,%eax
  413ac6:	eb 05                	jmp    413acd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5f>
  413ac8:	b8 00 00 00 00       	mov    $0x0,%eax
  413acd:	84 c0                	test   %al,%al
  413acf:	74 39                	je     413b0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  413ad1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  413ad5:	48 89 c7             	mov    %rax,%rdi
  413ad8:	e8 43 11 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  413add:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  413ae1:	48 89 d3             	mov    %rdx,%rbx
  413ae4:	48 29 c3             	sub    %rax,%rbx
  413ae7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  413aeb:	48 89 c7             	mov    %rax,%rdi
  413aee:	e8 2d 11 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  413af3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413af7:	48 01 d0             	add    %rdx,%rax
  413afa:	ba 00 00 00 00       	mov    $0x0,%edx
  413aff:	48 89 de             	mov    %rbx,%rsi
  413b02:	48 89 c7             	mov    %rax,%rdi
  413b05:	e8 6e 0d ff ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
	basic_string* _M_this;
	size_type _M_r;
      };
      _Terminator __term{this, 0};
  413b0a:	66 0f ef c0          	pxor   %xmm0,%xmm0
  413b0e:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  413b12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  413b16:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  413b1a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413b1e:	48 89 c7             	mov    %rax,%rdi
  413b21:	e8 07 25 00 00       	call   41602d <_ZSt4moveIRZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmEUlT_T0_E_EONSt16remove_referenceIS9_E4typeEOS9_>
  413b26:	48 89 c1             	mov    %rax,%rcx
  413b29:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  413b2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413b31:	48 89 c6             	mov    %rax,%rsi
  413b34:	48 89 cf             	mov    %rcx,%rdi
  413b37:	e8 1c ff ff ff       	call   413a58 <_ZZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmENKUlT_T0_E_clIPcmEEDaS8_S9_>
  413b3c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#else
      static_assert(__gnu_cxx::__is_integer_nonstrict<decltype(__r)>::__value,
		    "resize_and_overwrite operation must return an integer");
#endif
      _GLIBCXX_DEBUG_ASSERT(__r >= 0 && __r <= __n);
      __term._M_r = size_type(__r);
  413b40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413b44:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  413b48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413b4c:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
	__builtin_unreachable();
    }
  413b50:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  413b54:	48 89 c7             	mov    %rax,%rdi
  413b57:	e8 d2 fe ff ff       	call   413a2e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_EN11_TerminatorD1Ev>
  413b5c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413b60:	c9                   	leave
  413b61:	c3                   	ret

0000000000413b62 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEplEl>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
  413b62:	55                   	push   %rbp
  413b63:	48 89 e5             	mov    %rsp,%rbp
  413b66:	48 83 ec 20          	sub    $0x20,%rsp
  413b6a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  413b6e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current + __n); }
  413b72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413b76:	48 8b 10             	mov    (%rax),%rdx
  413b79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413b7d:	48 01 d0             	add    %rdx,%rax
  413b80:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  413b84:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  413b88:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  413b8c:	48 89 d6             	mov    %rdx,%rsi
  413b8f:	48 89 c7             	mov    %rax,%rdi
  413b92:	e8 0d 7a ff ff       	call   40b5a4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  413b97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413b9b:	c9                   	leave
  413b9c:	c3                   	ret
  413b9d:	90                   	nop

0000000000413b9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc>:
    basic_string<_CharT, _Traits, _Alloc>::
  413b9e:	55                   	push   %rbp
  413b9f:	48 89 e5             	mov    %rsp,%rbp
  413ba2:	48 83 ec 30          	sub    $0x30,%rsp
  413ba6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  413baa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  413bae:	89 d0                	mov    %edx,%eax
  413bb0:	88 45 dc             	mov    %al,-0x24(%rbp)
      const size_type __size = this->size();
  413bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413bb7:	48 89 c7             	mov    %rax,%rdi
  413bba:	e8 61 10 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  413bbf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__size < __n)
  413bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413bc7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  413bcb:	73 20                	jae    413bed <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x4f>
	this->append(__n - __size, __c);
  413bcd:	0f be 55 dc          	movsbl -0x24(%rbp),%edx
  413bd1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413bd5:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  413bd9:	48 89 c1             	mov    %rax,%rcx
  413bdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413be0:	48 89 ce             	mov    %rcx,%rsi
  413be3:	48 89 c7             	mov    %rax,%rdi
  413be6:	e8 cd 01 00 00       	call   413db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
    }
  413beb:	eb 1d                	jmp    413c0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x6c>
      else if (__n < __size)
  413bed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413bf1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  413bf5:	73 13                	jae    413c0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x6c>
	this->_M_set_length(__n);
  413bf7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  413bfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413bff:	48 89 d6             	mov    %rdx,%rsi
  413c02:	48 89 c7             	mov    %rax,%rdi
  413c05:	e8 2c 2d ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
    }
  413c0a:	90                   	nop
  413c0b:	c9                   	leave
  413c0c:	c3                   	ret

0000000000413c0d <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  413c0d:	55                   	push   %rbp
  413c0e:	48 89 e5             	mov    %rsp,%rbp
  413c11:	89 7d fc             	mov    %edi,-0x4(%rbp)
  413c14:	89 75 f8             	mov    %esi,-0x8(%rbp)
  413c17:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
      else if (__sign == _Sign_plus)
  413c1b:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  413c1f:	75 09                	jne    413c2a <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x1d>
	*__dest = '+';
  413c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413c25:	c6 00 2b             	movb   $0x2b,(%rax)
  413c28:	eb 14                	jmp    413c3e <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x31>
      else if (__sign == _Sign_space)
  413c2a:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  413c2e:	75 09                	jne    413c39 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x2c>
	*__dest = ' ';
  413c30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413c34:	c6 00 20             	movb   $0x20,(%rax)
  413c37:	eb 05                	jmp    413c3e <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x31>
	++__dest;
  413c39:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  413c3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  413c42:	5d                   	pop    %rbp
  413c43:	c3                   	ret

0000000000413c44 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  413c44:	55                   	push   %rbp
  413c45:	48 89 e5             	mov    %rsp,%rbp
  413c48:	89 7d fc             	mov    %edi,-0x4(%rbp)
  413c4b:	89 75 f8             	mov    %esi,-0x8(%rbp)
  413c4e:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
      if (__i < 0)
  413c52:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  413c56:	79 09                	jns    413c61 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x1d>
	*__dest = '-';
  413c58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413c5c:	c6 00 2d             	movb   $0x2d,(%rax)
  413c5f:	eb 23                	jmp    413c84 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
      else if (__sign == _Sign_plus)
  413c61:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  413c65:	75 09                	jne    413c70 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x2c>
	*__dest = '+';
  413c67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413c6b:	c6 00 2b             	movb   $0x2b,(%rax)
  413c6e:	eb 14                	jmp    413c84 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
      else if (__sign == _Sign_space)
  413c70:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  413c74:	75 09                	jne    413c7f <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x3b>
	*__dest = ' ';
  413c76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413c7a:	c6 00 20             	movb   $0x20,(%rax)
  413c7d:	eb 05                	jmp    413c84 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
	++__dest;
  413c7f:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  413c84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  413c88:	5d                   	pop    %rbp
  413c89:	c3                   	ret

0000000000413c8a <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  413c8a:	55                   	push   %rbp
  413c8b:	48 89 e5             	mov    %rsp,%rbp
  413c8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413c92:	89 75 f4             	mov    %esi,-0xc(%rbp)
  413c95:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__i < 0)
  413c99:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  413c9e:	79 09                	jns    413ca9 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x1f>
	*__dest = '-';
  413ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413ca4:	c6 00 2d             	movb   $0x2d,(%rax)
  413ca7:	eb 23                	jmp    413ccc <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
      else if (__sign == _Sign_plus)
  413ca9:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  413cad:	75 09                	jne    413cb8 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x2e>
	*__dest = '+';
  413caf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413cb3:	c6 00 2b             	movb   $0x2b,(%rax)
  413cb6:	eb 14                	jmp    413ccc <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
      else if (__sign == _Sign_space)
  413cb8:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  413cbc:	75 09                	jne    413cc7 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x3d>
	*__dest = ' ';
  413cbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413cc2:	c6 00 20             	movb   $0x20,(%rax)
  413cc5:	eb 05                	jmp    413ccc <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
	++__dest;
  413cc7:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
      return __dest;
  413ccc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  413cd0:	5d                   	pop    %rbp
  413cd1:	c3                   	ret

0000000000413cd2 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  413cd2:	55                   	push   %rbp
  413cd3:	48 89 e5             	mov    %rsp,%rbp
  413cd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413cda:	89 75 f4             	mov    %esi,-0xc(%rbp)
  413cdd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      else if (__sign == _Sign_plus)
  413ce1:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  413ce5:	75 09                	jne    413cf0 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x1e>
	*__dest = '+';
  413ce7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413ceb:	c6 00 2b             	movb   $0x2b,(%rax)
  413cee:	eb 14                	jmp    413d04 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x32>
      else if (__sign == _Sign_space)
  413cf0:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  413cf4:	75 09                	jne    413cff <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x2d>
	*__dest = ' ';
  413cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413cfa:	c6 00 20             	movb   $0x20,(%rax)
  413cfd:	eb 05                	jmp    413d04 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x32>
	++__dest;
  413cff:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
      return __dest;
  413d04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  413d08:	5d                   	pop    %rbp
  413d09:	c3                   	ret

0000000000413d0a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
  413d0a:	55                   	push   %rbp
  413d0b:	48 89 e5             	mov    %rsp,%rbp
  413d0e:	48 83 ec 20          	sub    $0x20,%rsp
  413d12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413d16:	89 f0                	mov    %esi,%eax
  413d18:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  413d1c:	88 45 f4             	mov    %al,-0xc(%rbp)
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->_M_len; ++__pos)
  413d1f:	eb 30                	jmp    413d51 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x47>
	if (!traits_type::eq(this->_M_str[__pos], __c))
  413d21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413d25:	48 8b 50 08          	mov    0x8(%rax),%rdx
  413d29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413d2d:	48 01 c2             	add    %rax,%rdx
  413d30:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  413d34:	48 89 c6             	mov    %rax,%rsi
  413d37:	48 89 d7             	mov    %rdx,%rdi
  413d3a:	e8 e0 08 ff ff       	call   40461f <_ZNSt11char_traitsIcE2eqERKcS2_>
  413d3f:	83 f0 01             	xor    $0x1,%eax
  413d42:	84 c0                	test   %al,%al
  413d44:	74 06                	je     413d4c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x42>
	  return __pos;
  413d46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413d4a:	eb 19                	jmp    413d65 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x5b>
      for (; __pos < this->_M_len; ++__pos)
  413d4c:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  413d51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413d55:	48 8b 00             	mov    (%rax),%rax
  413d58:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  413d5c:	72 c3                	jb     413d21 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x17>
      return npos;
  413d5e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    }
  413d65:	c9                   	leave
  413d66:	c3                   	ret
  413d67:	90                   	nop

0000000000413d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
       operator=(const _Tp& __svt)
  413d68:	55                   	push   %rbp
  413d69:	48 89 e5             	mov    %rsp,%rbp
  413d6c:	48 83 ec 10          	sub    $0x10,%rsp
  413d70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413d74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
       { return this->assign(__svt); }
  413d78:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  413d7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413d80:	48 89 d6             	mov    %rdx,%rsi
  413d83:	48 89 c7             	mov    %rax,%rdi
  413d86:	e8 27 23 00 00       	call   4160b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  413d8b:	c9                   	leave
  413d8c:	c3                   	ret
  413d8d:	90                   	nop

0000000000413d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
      operator+=(_CharT __c)
  413d8e:	55                   	push   %rbp
  413d8f:	48 89 e5             	mov    %rsp,%rbp
  413d92:	48 83 ec 10          	sub    $0x10,%rsp
  413d96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413d9a:	89 f0                	mov    %esi,%eax
  413d9c:	88 45 f4             	mov    %al,-0xc(%rbp)
	this->push_back(__c);
  413d9f:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  413da3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413da7:	89 d6                	mov    %edx,%esi
  413da9:	48 89 c7             	mov    %rax,%rdi
  413dac:	e8 5b 23 00 00       	call   41610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	return *this;
  413db1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  413db5:	c9                   	leave
  413db6:	c3                   	ret
  413db7:	90                   	nop

0000000000413db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>:
      append(size_type __n, _CharT __c)
  413db8:	55                   	push   %rbp
  413db9:	48 89 e5             	mov    %rsp,%rbp
  413dbc:	53                   	push   %rbx
  413dbd:	48 83 ec 28          	sub    $0x28,%rsp
  413dc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  413dc5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  413dc9:	89 d0                	mov    %edx,%eax
  413dcb:	88 45 dc             	mov    %al,-0x24(%rbp)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
  413dce:	0f be 5d dc          	movsbl -0x24(%rbp),%ebx
  413dd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413dd6:	48 89 c7             	mov    %rax,%rdi
  413dd9:	e8 42 0e ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  413dde:	48 89 c6             	mov    %rax,%rsi
  413de1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  413de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413de9:	41 89 d8             	mov    %ebx,%r8d
  413dec:	48 89 d1             	mov    %rdx,%rcx
  413def:	ba 00 00 00 00       	mov    $0x0,%edx
  413df4:	48 89 c7             	mov    %rax,%rdi
  413df7:	e8 b0 23 00 00       	call   4161ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>
  413dfc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413e00:	c9                   	leave
  413e01:	c3                   	ret

0000000000413e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
        append(const _Tp& __svt)
  413e02:	55                   	push   %rbp
  413e03:	48 89 e5             	mov    %rsp,%rbp
  413e06:	53                   	push   %rbx
  413e07:	48 83 ec 28          	sub    $0x28,%rsp
  413e0b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  413e0f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
          __sv_type __sv = __svt;
  413e13:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  413e17:	48 8b 50 08          	mov    0x8(%rax),%rdx
  413e1b:	48 8b 00             	mov    (%rax),%rax
  413e1e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  413e22:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
          return this->append(__sv.data(), __sv.size());
  413e26:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  413e2a:	48 89 c7             	mov    %rax,%rdi
  413e2d:	e8 c8 1a ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413e32:	48 89 c3             	mov    %rax,%rbx
  413e35:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  413e39:	48 89 c7             	mov    %rax,%rdi
  413e3c:	e8 a7 2a ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  413e41:	48 89 c1             	mov    %rax,%rcx
  413e44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413e48:	48 89 da             	mov    %rbx,%rdx
  413e4b:	48 89 ce             	mov    %rcx,%rsi
  413e4e:	48 89 c7             	mov    %rax,%rdi
  413e51:	e8 86 6c ff ff       	call   40aadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>
        }
  413e56:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413e5a:	c9                   	leave
  413e5b:	c3                   	ret

0000000000413e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>:
      insert(size_type __pos, size_type __n, _CharT __c)
  413e5c:	55                   	push   %rbp
  413e5d:	48 89 e5             	mov    %rsp,%rbp
  413e60:	53                   	push   %rbx
  413e61:	48 83 ec 28          	sub    $0x28,%rsp
  413e65:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  413e69:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  413e6d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  413e71:	89 c8                	mov    %ecx,%eax
  413e73:	88 45 d4             	mov    %al,-0x2c(%rbp)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
  413e76:	0f be 5d d4          	movsbl -0x2c(%rbp),%ebx
  413e7a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  413e7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413e82:	ba d0 a3 41 00       	mov    $0x41a3d0,%edx
  413e87:	48 89 ce             	mov    %rcx,%rsi
  413e8a:	48 89 c7             	mov    %rax,%rdi
  413e8d:	e8 b8 75 ff ff       	call   40b44a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>
  413e92:	48 89 c6             	mov    %rax,%rsi
  413e95:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413e99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413e9d:	41 89 d8             	mov    %ebx,%r8d
  413ea0:	48 89 d1             	mov    %rdx,%rcx
  413ea3:	ba 00 00 00 00       	mov    $0x0,%edx
  413ea8:	48 89 c7             	mov    %rax,%rdi
  413eab:	e8 fc 22 00 00       	call   4161ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>
			      size_type(0), __n, __c); }
  413eb0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413eb4:	c9                   	leave
  413eb5:	c3                   	ret

0000000000413eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>:
      operator[](size_type __pos)
  413eb6:	55                   	push   %rbp
  413eb7:	48 89 e5             	mov    %rsp,%rbp
  413eba:	48 83 ec 10          	sub    $0x10,%rsp
  413ebe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413ec2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  413ec6:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__pos <= size());
  413ecb:	84 c0                	test   %al,%al
  413ecd:	74 1e                	je     413eed <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm+0x37>
  413ecf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413ed3:	48 89 c7             	mov    %rax,%rdi
  413ed6:	e8 45 0d ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  413edb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  413edf:	0f 92 c0             	setb   %al
  413ee2:	0f b6 c0             	movzbl %al,%eax
  413ee5:	48 85 c0             	test   %rax,%rax
  413ee8:	0f 95 c0             	setne  %al
  413eeb:	84 c0                	test   %al,%al
	return _M_data()[__pos];
  413eed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413ef1:	48 89 c7             	mov    %rax,%rdi
  413ef4:	e8 2b 2a ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  413ef9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  413efd:	48 01 d0             	add    %rdx,%rax
      }
  413f00:	c9                   	leave
  413f01:	c3                   	ret

0000000000413f02 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  413f02:	55                   	push   %rbp
  413f03:	48 89 e5             	mov    %rsp,%rbp
  413f06:	48 89 f8             	mov    %rdi,%rax
  413f09:	49 89 f0             	mov    %rsi,%r8
  413f0c:	48 89 c6             	mov    %rax,%rsi
  413f0f:	bf 00 00 00 00       	mov    $0x0,%edi
  413f14:	4c 89 c7             	mov    %r8,%rdi
  413f17:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  413f1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413f1f:	89 55 ec             	mov    %edx,-0x14(%rbp)
  413f22:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      if (__i < 0)
  413f26:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  413f2b:	79 09                	jns    413f36 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x34>
	*__dest = '-';
  413f2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413f31:	c6 00 2d             	movb   $0x2d,(%rax)
  413f34:	eb 23                	jmp    413f59 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
      else if (__sign == _Sign_plus)
  413f36:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
  413f3a:	75 09                	jne    413f45 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x43>
	*__dest = '+';
  413f3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413f40:	c6 00 2b             	movb   $0x2b,(%rax)
  413f43:	eb 14                	jmp    413f59 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
      else if (__sign == _Sign_space)
  413f45:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  413f49:	75 09                	jne    413f54 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x52>
	*__dest = ' ';
  413f4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413f4f:	c6 00 20             	movb   $0x20,(%rax)
  413f52:	eb 05                	jmp    413f59 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
	++__dest;
  413f54:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
      return __dest;
  413f59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  413f5d:	5d                   	pop    %rbp
  413f5e:	c3                   	ret

0000000000413f5f <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  413f5f:	55                   	push   %rbp
  413f60:	48 89 e5             	mov    %rsp,%rbp
  413f63:	48 89 f8             	mov    %rdi,%rax
  413f66:	49 89 f0             	mov    %rsi,%r8
  413f69:	48 89 c6             	mov    %rax,%rsi
  413f6c:	bf 00 00 00 00       	mov    $0x0,%edi
  413f71:	4c 89 c7             	mov    %r8,%rdi
  413f74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  413f78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413f7c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  413f7f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      else if (__sign == _Sign_plus)
  413f83:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
  413f87:	75 09                	jne    413f92 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x33>
	*__dest = '+';
  413f89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413f8d:	c6 00 2b             	movb   $0x2b,(%rax)
  413f90:	eb 14                	jmp    413fa6 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x47>
      else if (__sign == _Sign_space)
  413f92:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  413f96:	75 09                	jne    413fa1 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x42>
	*__dest = ' ';
  413f98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413f9c:	c6 00 20             	movb   $0x20,(%rax)
  413f9f:	eb 05                	jmp    413fa6 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x47>
	++__dest;
  413fa1:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
      return __dest;
  413fa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  413faa:	5d                   	pop    %rbp
  413fab:	c3                   	ret

0000000000413fac <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE>:
      _M_write(basic_string_view<_CharT> __s)
  413fac:	55                   	push   %rbp
  413fad:	48 89 e5             	mov    %rsp,%rbp
  413fb0:	53                   	push   %rbx
  413fb1:	48 83 ec 58          	sub    $0x58,%rsp
  413fb5:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  413fb9:	48 89 f0             	mov    %rsi,%rax
  413fbc:	48 89 d1             	mov    %rdx,%rcx
  413fbf:	48 89 c0             	mov    %rax,%rax
  413fc2:	ba 00 00 00 00       	mov    $0x0,%edx
  413fc7:	48 89 ca             	mov    %rcx,%rdx
  413fca:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  413fce:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  413fd2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413fd6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  413fda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413fde:	48 8d 58 08          	lea    0x8(%rax),%rbx
  413fe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413fe6:	48 83 c0 08          	add    $0x8,%rax
  413fea:	48 89 c7             	mov    %rax,%rdi
  413fed:	e8 22 6a ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  413ff2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  413ff6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413ffa:	48 8d 50 18          	lea    0x18(%rax),%rdx
  413ffe:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  414002:	48 89 c6             	mov    %rax,%rsi
  414005:	48 89 d7             	mov    %rdx,%rdi
  414008:	e8 2c 6a ff ff       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  41400d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  414014:	48 89 c6             	mov    %rax,%rsi
  414017:	48 89 df             	mov    %rbx,%rdi
  41401a:	e8 3f 81 ff ff       	call   40c15e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  41401f:	90                   	nop
	span __to = _M_unused();
  414020:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  414024:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	while (__to.size() <= __s.size())
  414028:	e9 db 00 00 00       	jmp    414108 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x15c>
	    __s.copy(__to.data(), __to.size());
  41402d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  414031:	48 89 c7             	mov    %rax,%rdi
  414034:	e8 8b 13 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  414039:	48 89 c3             	mov    %rax,%rbx
  41403c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  414040:	48 89 c7             	mov    %rax,%rdi
  414043:	e8 6a 13 ff ff       	call   4053b2 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  414048:	48 89 c6             	mov    %rax,%rsi
  41404b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41404f:	b9 00 00 00 00       	mov    $0x0,%ecx
  414054:	48 89 da             	mov    %rbx,%rdx
  414057:	48 89 c7             	mov    %rax,%rdi
  41405a:	e8 41 24 00 00       	call   4164a0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
	    _M_next += __to.size();
  41405f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  414063:	48 89 c7             	mov    %rax,%rdi
  414066:	e8 59 13 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  41406b:	48 89 c2             	mov    %rax,%rdx
  41406e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  414072:	48 83 c0 18          	add    $0x18,%rax
  414076:	48 89 d6             	mov    %rdx,%rsi
  414079:	48 89 c7             	mov    %rax,%rdi
  41407c:	e8 c5 81 ff ff       	call   40c246 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
	    __s.remove_prefix(__to.size());
  414081:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  414085:	48 89 c7             	mov    %rax,%rdi
  414088:	e8 37 13 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  41408d:	48 89 c2             	mov    %rax,%rdx
  414090:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  414094:	48 89 d6             	mov    %rdx,%rsi
  414097:	48 89 c7             	mov    %rax,%rdi
  41409a:	e8 6b 13 00 00       	call   41540a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
	    _M_overflow();
  41409f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4140a3:	48 8b 00             	mov    (%rax),%rax
  4140a6:	48 8b 10             	mov    (%rax),%rdx
  4140a9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4140ad:	48 89 c7             	mov    %rax,%rdi
  4140b0:	ff d2                	call   *%rdx
  4140b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4140b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  4140ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4140be:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4140c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4140c6:	48 83 c0 08          	add    $0x8,%rax
  4140ca:	48 89 c7             	mov    %rax,%rdi
  4140cd:	e8 42 69 ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4140d2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4140d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4140da:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4140de:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4140e2:	48 89 c6             	mov    %rax,%rsi
  4140e5:	48 89 d7             	mov    %rdx,%rdi
  4140e8:	e8 4c 69 ff ff       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  4140ed:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  4140f4:	48 89 c6             	mov    %rax,%rsi
  4140f7:	48 89 df             	mov    %rbx,%rdi
  4140fa:	e8 5f 80 ff ff       	call   40c15e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  4140ff:	90                   	nop
	    __to = _M_unused();
  414100:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  414104:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	while (__to.size() <= __s.size())
  414108:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41410c:	48 89 c7             	mov    %rax,%rdi
  41410f:	e8 b0 12 ff ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  414114:	48 89 c3             	mov    %rax,%rbx
  414117:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41411b:	48 89 c7             	mov    %rax,%rdi
  41411e:	e8 d7 17 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414123:	48 39 d8             	cmp    %rbx,%rax
  414126:	0f 93 c0             	setae  %al
  414129:	84 c0                	test   %al,%al
  41412b:	0f 85 fc fe ff ff    	jne    41402d <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x81>
	if (__s.size())
  414131:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  414135:	48 89 c7             	mov    %rax,%rdi
  414138:	e8 bd 17 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41413d:	48 85 c0             	test   %rax,%rax
  414140:	0f 95 c0             	setne  %al
  414143:	84 c0                	test   %al,%al
  414145:	74 54                	je     41419b <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x1ef>
	    __s.copy(__to.data(), __s.size());
  414147:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41414b:	48 89 c7             	mov    %rax,%rdi
  41414e:	e8 a7 17 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414153:	48 89 c3             	mov    %rax,%rbx
  414156:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41415a:	48 89 c7             	mov    %rax,%rdi
  41415d:	e8 50 12 ff ff       	call   4053b2 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  414162:	48 89 c6             	mov    %rax,%rsi
  414165:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  414169:	b9 00 00 00 00       	mov    $0x0,%ecx
  41416e:	48 89 da             	mov    %rbx,%rdx
  414171:	48 89 c7             	mov    %rax,%rdi
  414174:	e8 27 23 00 00       	call   4164a0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
	    _M_next += __s.size();
  414179:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41417d:	48 89 c7             	mov    %rax,%rdi
  414180:	e8 75 17 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414185:	48 89 c2             	mov    %rax,%rdx
  414188:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41418c:	48 83 c0 18          	add    $0x18,%rax
  414190:	48 89 d6             	mov    %rdx,%rsi
  414193:	48 89 c7             	mov    %rax,%rdi
  414196:	e8 ab 80 ff ff       	call   40c246 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
      }
  41419b:	90                   	nop
  41419c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4141a0:	c9                   	leave
  4141a1:	c3                   	ret

00000000004141a2 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  4141a2:	55                   	push   %rbp
  4141a3:	48 89 e5             	mov    %rsp,%rbp
  4141a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  4141aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4141ae:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4141b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4141b6:	48 8b 00             	mov    (%rax),%rax
  4141b9:	48 8b 0a             	mov    (%rdx),%rcx
  4141bc:	48 89 08             	mov    %rcx,(%rax)
  4141bf:	8b 52 08             	mov    0x8(%rdx),%edx
  4141c2:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  4141c5:	90                   	nop
  4141c6:	5d                   	pop    %rbp
  4141c7:	c3                   	ret

00000000004141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>:
	auto __finished = [&] {
  4141c8:	55                   	push   %rbp
  4141c9:	48 89 e5             	mov    %rsp,%rbp
  4141cc:	48 83 ec 10          	sub    $0x10,%rsp
  4141d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  4141d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4141d8:	48 8b 00             	mov    (%rax),%rax
  4141db:	48 8b 10             	mov    (%rax),%rdx
  4141de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4141e2:	48 8b 40 08          	mov    0x8(%rax),%rax
  4141e6:	48 8b 00             	mov    (%rax),%rax
  4141e9:	48 39 c2             	cmp    %rax,%rdx
  4141ec:	74 11                	je     4141ff <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x37>
  4141ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4141f2:	48 8b 00             	mov    (%rax),%rax
  4141f5:	48 8b 00             	mov    (%rax),%rax
  4141f8:	0f b6 00             	movzbl (%rax),%eax
  4141fb:	3c 7d                	cmp    $0x7d,%al
  4141fd:	75 17                	jne    414216 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x4e>
	      __finalize();
  4141ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414203:	48 8b 40 10          	mov    0x10(%rax),%rax
  414207:	48 89 c7             	mov    %rax,%rdi
  41420a:	e8 93 ff ff ff       	call   4141a2 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE_clEv>
	      return true;
  41420f:	b8 01 00 00 00       	mov    $0x1,%eax
  414214:	eb 05                	jmp    41421b <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x53>
	  return false;
  414216:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  41421b:	c9                   	leave
  41421c:	c3                   	ret
  41421d:	90                   	nop

000000000041421e <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>:
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
  41421e:	55                   	push   %rbp
  41421f:	48 89 e5             	mov    %rsp,%rbp
  414222:	48 83 ec 70          	sub    $0x70,%rsp
  414226:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  41422a:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  41422e:	89 55 9c             	mov    %edx,-0x64(%rbp)
	_Spec<_CharT> __spec{};
  414231:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  414238:	00
  414239:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  414240:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	__spec._M_type = __type;
  414247:	8b 45 9c             	mov    -0x64(%rbp),%eax
  41424a:	83 e0 0f             	and    $0xf,%eax
  41424d:	83 e0 0f             	and    $0xf,%eax
  414250:	8d 14 c5 00 00 00 00 	lea    0x0(,%rax,8),%edx
  414257:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  41425b:	83 e0 87             	and    $0xffffff87,%eax
  41425e:	09 d0                	or     %edx,%eax
  414260:	88 45 f5             	mov    %al,-0xb(%rbp)
	const auto __last = __pc.end();
  414263:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414267:	48 89 c7             	mov    %rax,%rdi
  41426a:	e8 63 1b ff ff       	call   405dd2 <_ZNKSt26basic_format_parse_contextIcE3endEv>
  41426f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  414273:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414277:	48 89 c7             	mov    %rax,%rdi
  41427a:	e8 23 1b ff ff       	call   405da2 <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  41427f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  414283:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414287:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  41428b:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  41428f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  414293:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  414297:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  41429b:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  41429f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4142a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4142a7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  4142ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4142af:	48 89 c7             	mov    %rax,%rdi
  4142b2:	e8 11 ff ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  4142b7:	84 c0                	test   %al,%al
  4142b9:	74 09                	je     4142c4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0xa6>
	  return __first;
  4142bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4142bf:	e9 68 02 00 00       	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  4142c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4142c8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4142cc:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4142d0:	48 89 ce             	mov    %rcx,%rsi
  4142d3:	48 89 c7             	mov    %rax,%rdi
  4142d6:	e8 57 3a ff ff       	call   407d32 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  4142db:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4142df:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4142e3:	48 89 c7             	mov    %rax,%rdi
  4142e6:	e8 dd fe ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  4142eb:	84 c0                	test   %al,%al
  4142ed:	74 09                	je     4142f8 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0xda>
	  return __first;
  4142ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4142f3:	e9 34 02 00 00       	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_sign(__first, __last);
  4142f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4142fc:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  414300:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  414304:	48 89 ce             	mov    %rcx,%rsi
  414307:	48 89 c7             	mov    %rax,%rdi
  41430a:	e8 33 0b 00 00       	call   414e42 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>
  41430f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  414313:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  414317:	48 89 c7             	mov    %rax,%rdi
  41431a:	e8 a9 fe ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  41431f:	84 c0                	test   %al,%al
  414321:	74 09                	je     41432c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x10e>
	  return __first;
  414323:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414327:	e9 00 02 00 00       	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_alternate_form(__first, __last);
  41432c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  414330:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  414334:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  414338:	48 89 ce             	mov    %rcx,%rsi
  41433b:	48 89 c7             	mov    %rax,%rdi
  41433e:	e8 5b 0b 00 00       	call   414e9e <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>
  414343:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  414347:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41434b:	48 89 c7             	mov    %rax,%rdi
  41434e:	e8 75 fe ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  414353:	84 c0                	test   %al,%al
  414355:	74 09                	je     414360 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x142>
	  return __first;
  414357:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41435b:	e9 cc 01 00 00       	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_zero_fill(__first, __last);
  414360:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  414364:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  414368:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  41436c:	48 89 ce             	mov    %rcx,%rsi
  41436f:	48 89 c7             	mov    %rax,%rdi
  414372:	e8 59 0b 00 00       	call   414ed0 <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>
  414377:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  41437b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41437f:	48 89 c7             	mov    %rax,%rdi
  414382:	e8 41 fe ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  414387:	84 c0                	test   %al,%al
  414389:	74 09                	je     414394 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x176>
	  return __first;
  41438b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41438f:	e9 98 01 00 00       	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_width(__first, __last, __pc);
  414394:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  414398:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41439c:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4143a0:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4143a4:	48 89 c7             	mov    %rax,%rdi
  4143a7:	e8 18 3b ff ff       	call   407ec4 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  4143ac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4143b0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4143b4:	48 89 c7             	mov    %rax,%rdi
  4143b7:	e8 0c fe ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  4143bc:	84 c0                	test   %al,%al
  4143be:	74 09                	je     4143c9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x1ab>
	  return __first;
  4143c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4143c4:	e9 63 01 00 00       	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_locale(__first, __last);
  4143c9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4143cd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4143d1:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4143d5:	48 89 ce             	mov    %rcx,%rsi
  4143d8:	48 89 c7             	mov    %rax,%rdi
  4143db:	e8 22 0b 00 00       	call   414f02 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>
  4143e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4143e4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4143e8:	48 89 c7             	mov    %rax,%rdi
  4143eb:	e8 d8 fd ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  4143f0:	84 c0                	test   %al,%al
  4143f2:	74 09                	je     4143fd <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x1df>
	  return __first;
  4143f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4143f8:	e9 2f 01 00 00       	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	switch (*__first)
  4143fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414401:	0f b6 00             	movzbl (%rax),%eax
  414404:	0f be c0             	movsbl %al,%eax
  414407:	83 e8 42             	sub    $0x42,%eax
  41440a:	83 f8 36             	cmp    $0x36,%eax
  41440d:	0f 87 fe 00 00 00    	ja     414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
  414413:	89 c0                	mov    %eax,%eax
  414415:	48 8b 04 c5 68 d3 41 	mov    0x41d368(,%rax,8),%rax
  41441c:	00
  41441d:	ff e0                	jmp    *%rax
	    __spec._M_type = _Pres_b;
  41441f:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  414423:	83 e0 87             	and    $0xffffff87,%eax
  414426:	83 c8 10             	or     $0x10,%eax
  414429:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  41442c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414430:	48 83 c0 01          	add    $0x1,%rax
  414434:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  414438:	e9 d4 00 00 00       	jmp    414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_B;
  41443d:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  414441:	83 e0 87             	and    $0xffffff87,%eax
  414444:	83 c8 18             	or     $0x18,%eax
  414447:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  41444a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41444e:	48 83 c0 01          	add    $0x1,%rax
  414452:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  414456:	e9 b6 00 00 00       	jmp    414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    if (__type != _AsBool)
  41445b:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  41445f:	0f 84 a8 00 00 00    	je     41450d <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2ef>
		__spec._M_type = _Pres_c;
  414465:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  414469:	83 e0 87             	and    $0xffffff87,%eax
  41446c:	83 c8 38             	or     $0x38,%eax
  41446f:	88 45 f5             	mov    %al,-0xb(%rbp)
		++__first;
  414472:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414476:	48 83 c0 01          	add    $0x1,%rax
  41447a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  41447e:	e9 8a 00 00 00       	jmp    41450d <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2ef>
	    __spec._M_type = _Pres_d;
  414483:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  414487:	83 e0 87             	and    $0xffffff87,%eax
  41448a:	83 c8 08             	or     $0x8,%eax
  41448d:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  414490:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414494:	48 83 c0 01          	add    $0x1,%rax
  414498:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  41449c:	eb 73                	jmp    414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_o;
  41449e:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4144a2:	83 e0 87             	and    $0xffffff87,%eax
  4144a5:	83 c8 20             	or     $0x20,%eax
  4144a8:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  4144ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4144af:	48 83 c0 01          	add    $0x1,%rax
  4144b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  4144b7:	eb 58                	jmp    414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_x;
  4144b9:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4144bd:	83 e0 87             	and    $0xffffff87,%eax
  4144c0:	83 c8 28             	or     $0x28,%eax
  4144c3:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  4144c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4144ca:	48 83 c0 01          	add    $0x1,%rax
  4144ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  4144d2:	eb 3d                	jmp    414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_X;
  4144d4:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4144d8:	83 e0 87             	and    $0xffffff87,%eax
  4144db:	83 c8 30             	or     $0x30,%eax
  4144de:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  4144e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4144e5:	48 83 c0 01          	add    $0x1,%rax
  4144e9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  4144ed:	eb 22                	jmp    414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    if (__type == _AsBool)
  4144ef:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  4144f3:	75 1b                	jne    414510 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f2>
		__spec._M_type = _Pres_s; // same value (and meaning) as "none"
  4144f5:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  4144f9:	83 e0 87             	and    $0xffffff87,%eax
  4144fc:	88 45 f5             	mov    %al,-0xb(%rbp)
		++__first;
  4144ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414503:	48 83 c0 01          	add    $0x1,%rax
  414507:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  41450b:	eb 03                	jmp    414510 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f2>
	    break;
  41450d:	90                   	nop
  41450e:	eb 01                	jmp    414511 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    break;
  414510:	90                   	nop
	if (__finished())
  414511:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  414515:	48 89 c7             	mov    %rax,%rdi
  414518:	e8 ab fc ff ff       	call   4141c8 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  41451d:	84 c0                	test   %al,%al
  41451f:	74 06                	je     414527 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x309>
	  return __first;
  414521:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414525:	eb 05                	jmp    41452c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__format::__failed_to_parse_format_spec();
  414527:	e8 88 0b ff ff       	call   4050b4 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  41452c:	c9                   	leave
  41452d:	c3                   	ret

000000000041452e <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>:
      std::locale locale() { return _M_loc.value(); }
  41452e:	55                   	push   %rbp
  41452f:	48 89 e5             	mov    %rsp,%rbp
  414532:	48 83 ec 10          	sub    $0x10,%rsp
  414536:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41453a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41453e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414542:	48 83 c0 18          	add    $0x18,%rax
  414546:	48 89 c7             	mov    %rax,%rdi
  414549:	e8 0e 0c ff ff       	call   40515c <_ZNSt8__format16_Optional_locale5valueEv>
  41454e:	48 89 c2             	mov    %rax,%rdx
  414551:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414555:	48 89 d6             	mov    %rdx,%rsi
  414558:	48 89 c7             	mov    %rax,%rdi
  41455b:	e8 00 fc fe ff       	call   404160 <_ZNSt6localeC1ERKS_@plt>
  414560:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414564:	c9                   	leave
  414565:	c3                   	ret

0000000000414566 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  414566:	55                   	push   %rbp
  414567:	48 89 e5             	mov    %rsp,%rbp
  41456a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  41456e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414572:	5d                   	pop    %rbp
  414573:	c3                   	ret

0000000000414574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
      operator=(basic_string&& __str)
  414574:	55                   	push   %rbp
  414575:	48 89 e5             	mov    %rsp,%rbp
  414578:	41 54                	push   %r12
  41457a:	53                   	push   %rbx
  41457b:	48 83 ec 50          	sub    $0x50,%rsp
  41457f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  414583:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	const bool __equal_allocs = _Alloc_traits::_S_always_equal()
  414587:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
  41458b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41458f:	48 89 c7             	mov    %rax,%rdi
  414592:	e8 c7 26 ff ff       	call   406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  414597:	83 f0 01             	xor    $0x1,%eax
  41459a:	84 c0                	test   %al,%al
  41459c:	74 07                	je     4145a5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x31>
    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }
  41459e:	b8 01 00 00 00       	mov    $0x1,%eax
  4145a3:	84 c0                	test   %al,%al
	    && !__equal_allocs)
  4145a5:	b8 00 00 00 00       	mov    $0x0,%eax
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
  4145aa:	84 c0                	test   %al,%al
  4145ac:	74 46                	je     4145f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x80>
	    _M_destroy(_M_allocated_capacity);
  4145ae:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4145b2:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4145b6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4145ba:	48 89 d6             	mov    %rdx,%rsi
  4145bd:	48 89 c7             	mov    %rax,%rdi
  4145c0:	e8 49 5d ff ff       	call   40a30e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
	    _M_data(_M_local_data());
  4145c5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4145c9:	48 89 c7             	mov    %rax,%rdi
  4145cc:	e8 47 03 ff ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4145d1:	48 89 c2             	mov    %rax,%rdx
  4145d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4145d8:	48 89 d6             	mov    %rdx,%rsi
  4145db:	48 89 c7             	mov    %rax,%rdi
  4145de:	e8 1b 45 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_set_length(0);
  4145e3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4145e7:	be 00 00 00 00       	mov    $0x0,%esi
  4145ec:	48 89 c7             	mov    %rax,%rdi
  4145ef:	e8 42 23 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
  4145f4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4145f8:	48 89 c7             	mov    %rax,%rdi
  4145fb:	e8 50 26 ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  414600:	48 89 c3             	mov    %rax,%rbx
  414603:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414607:	48 89 c7             	mov    %rax,%rdi
  41460a:	e8 41 26 ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41460f:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
  414613:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      using __traits = allocator_traits<_Alloc>;
      using __pocma
	= typename __traits::propagate_on_container_move_assignment::type;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
  414617:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  41461b:	48 89 c7             	mov    %rax,%rdi
  41461e:	e8 a1 03 ff ff       	call   4049c4 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
#else
      __do_alloc_on_move(__one, __two, __pocma());
#endif
    }
  414623:	90                   	nop
	if (__str._M_is_local())
  414624:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414628:	48 89 c7             	mov    %rax,%rdi
  41462b:	e8 2e 26 ff ff       	call   406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  414630:	84 c0                	test   %al,%al
  414632:	0f 84 95 00 00 00    	je     4146cd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x159>
	    if (__builtin_expect(std::__addressof(__str) != this, true))
  414638:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41463c:	48 89 c7             	mov    %rax,%rdi
  41463f:	e8 22 ff ff ff       	call   414566 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
  414644:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  414648:	0f 95 c0             	setne  %al
  41464b:	0f b6 c0             	movzbl %al,%eax
  41464e:	48 85 c0             	test   %rax,%rax
  414651:	0f 95 c0             	setne  %al
  414654:	84 c0                	test   %al,%al
  414656:	0f 84 ad 01 00 00    	je     414809 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
		if (__str.size())
  41465c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414660:	48 89 c7             	mov    %rax,%rdi
  414663:	e8 b8 05 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414668:	48 85 c0             	test   %rax,%rax
  41466b:	0f 95 c0             	setne  %al
  41466e:	84 c0                	test   %al,%al
  414670:	74 38                	je     4146aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x136>
		  this->_S_copy(_M_data(), __str._M_data(), __str.size());
  414672:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414676:	48 89 c7             	mov    %rax,%rdi
  414679:	e8 a2 05 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41467e:	49 89 c4             	mov    %rax,%r12
  414681:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414685:	48 89 c7             	mov    %rax,%rdi
  414688:	e8 97 22 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41468d:	48 89 c3             	mov    %rax,%rbx
  414690:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414694:	48 89 c7             	mov    %rax,%rdi
  414697:	e8 88 22 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41469c:	4c 89 e2             	mov    %r12,%rdx
  41469f:	48 89 de             	mov    %rbx,%rsi
  4146a2:	48 89 c7             	mov    %rax,%rdi
  4146a5:	e8 ca 65 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
		_M_set_length(__str.size());
  4146aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4146ae:	48 89 c7             	mov    %rax,%rdi
  4146b1:	e8 6a 05 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4146b6:	48 89 c2             	mov    %rax,%rdx
  4146b9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4146bd:	48 89 d6             	mov    %rdx,%rsi
  4146c0:	48 89 c7             	mov    %rax,%rdi
  4146c3:	e8 6e 22 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  4146c8:	e9 3c 01 00 00       	jmp    414809 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
	else if (_Alloc_traits::_S_propagate_on_move_assign() || __equal_allocs)
  4146cd:	b8 01 00 00 00       	mov    $0x1,%eax
  4146d2:	84 c0                	test   %al,%al
  4146d4:	0f 84 1c 01 00 00    	je     4147f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x282>
	    pointer __data = nullptr;
  4146da:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4146e1:	00
	    if (!_M_is_local())
  4146e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4146e6:	48 89 c7             	mov    %rax,%rdi
  4146e9:	e8 70 25 ff ff       	call   406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  4146ee:	83 f0 01             	xor    $0x1,%eax
  4146f1:	84 c0                	test   %al,%al
  4146f3:	74 1c                	je     414711 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x19d>
		    __data = _M_data();
  4146f5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4146f9:	48 89 c7             	mov    %rax,%rdi
  4146fc:	e8 23 22 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  414701:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    __capacity = _M_allocated_capacity;
  414705:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414709:	48 8b 40 10          	mov    0x10(%rax),%rax
  41470d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    _M_data(__str._M_data());
  414711:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414715:	48 89 c7             	mov    %rax,%rdi
  414718:	e8 07 22 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41471d:	48 89 c2             	mov    %rax,%rdx
  414720:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414724:	48 89 d6             	mov    %rdx,%rsi
  414727:	48 89 c7             	mov    %rax,%rdi
  41472a:	e8 cf 43 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_length(__str.length());
  41472f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414733:	48 89 c7             	mov    %rax,%rdi
  414736:	e8 73 25 ff ff       	call   406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  41473b:	48 89 c2             	mov    %rax,%rdx
  41473e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414742:	48 89 d6             	mov    %rdx,%rsi
  414745:	48 89 c7             	mov    %rax,%rdi
  414748:	e8 3d 43 ff ff       	call   408a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	    _M_capacity(__str._M_allocated_capacity);
  41474d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414751:	48 8b 50 10          	mov    0x10(%rax),%rdx
  414755:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414759:	48 89 d6             	mov    %rdx,%rsi
  41475c:	48 89 c7             	mov    %rax,%rdi
  41475f:	e8 b4 43 ff ff       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	    if (__data)
  414764:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  414769:	74 28                	je     414793 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x21f>
		__str._M_data(__data);
  41476b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41476f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414773:	48 89 d6             	mov    %rdx,%rsi
  414776:	48 89 c7             	mov    %rax,%rdi
  414779:	e8 80 43 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		__str._M_capacity(__capacity);
  41477e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  414782:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414786:	48 89 d6             	mov    %rdx,%rsi
  414789:	48 89 c7             	mov    %rax,%rdi
  41478c:	e8 87 43 ff ff       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  414791:	eb 76                	jmp    414809 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
  414793:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414797:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41479b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41479f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	if (std::is_constant_evaluated())
  4147a3:	e8 93 fd fe ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  4147a8:	84 c0                	test   %al,%al
  4147aa:	74 28                	je     4147d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x260>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4147ac:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  4147b3:	00
  4147b4:	eb 17                	jmp    4147cd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x259>
	    _M_local_buf[__i] = _CharT();
  4147b6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4147ba:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4147be:	48 01 d0             	add    %rdx,%rax
  4147c1:	48 83 c0 10          	add    $0x10,%rax
  4147c5:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4147c8:	48 83 45 b0 01       	addq   $0x1,-0x50(%rbp)
  4147cd:	48 83 7d b0 0f       	cmpq   $0xf,-0x50(%rbp)
  4147d2:	76 e2                	jbe    4147b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x242>
      }
  4147d4:	90                   	nop
	return _M_local_data();
  4147d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4147d9:	48 89 c7             	mov    %rax,%rdi
  4147dc:	e8 37 01 ff ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4147e1:	48 89 c2             	mov    %rax,%rdx
  4147e4:	90                   	nop
	      __str._M_data(__str._M_use_local_data());
  4147e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4147e9:	48 89 d6             	mov    %rdx,%rsi
  4147ec:	48 89 c7             	mov    %rax,%rdi
  4147ef:	e8 0a 43 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
  4147f4:	eb 13                	jmp    414809 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
	  assign(__str);
  4147f6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4147fa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4147fe:	48 89 d6             	mov    %rdx,%rsi
  414801:	48 89 c7             	mov    %rax,%rdi
  414804:	e8 2d 1d 00 00       	call   416536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>
	__str.clear();
  414809:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41480d:	48 89 c7             	mov    %rax,%rdi
  414810:	e8 7d 1f 00 00       	call   416792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return *this;
  414815:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
      }
  414819:	48 83 c4 50          	add    $0x50,%rsp
  41481d:	5b                   	pop    %rbx
  41481e:	41 5c                	pop    %r12
  414820:	5d                   	pop    %rbp
  414821:	c3                   	ret

0000000000414822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
      operator=(const _CharT* __s)
  414822:	55                   	push   %rbp
  414823:	48 89 e5             	mov    %rsp,%rbp
  414826:	48 83 ec 10          	sub    $0x10,%rsp
  41482a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41482e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->assign(__s); }
  414832:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  414836:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41483a:	48 89 d6             	mov    %rdx,%rsi
  41483d:	48 89 c7             	mov    %rax,%rdi
  414840:	e8 6d 1f 00 00       	call   4167b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
  414845:	c9                   	leave
  414846:	c3                   	ret

0000000000414847 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_>:
	_S_to_character(_Int __i)
  414847:	55                   	push   %rbp
  414848:	48 89 e5             	mov    %rsp,%rbp
  41484b:	48 83 ec 10          	sub    $0x10,%rsp
  41484f:	89 f8                	mov    %edi,%eax
  414851:	88 45 fc             	mov    %al,-0x4(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  414854:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  414858:	84 c0                	test   %al,%al
  41485a:	78 06                	js     414862 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_+0x1b>
	    return static_cast<_CharT>(__i);
  41485c:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  414860:	eb 0a                	jmp    41486c <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_+0x25>
	  __throw_format_error("format error: integer not representable as "
  414862:	bf e8 a3 41 00       	mov    $0x41a3e8,%edi
  414867:	e8 bd 07 ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	}
  41486c:	c9                   	leave
  41486d:	c3                   	ret

000000000041486e <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  41486e:	55                   	push   %rbp
  41486f:	48 89 e5             	mov    %rsp,%rbp
  414872:	48 83 ec 20          	sub    $0x20,%rsp
  414876:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41487a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41487e:	89 d0                	mov    %edx,%eax
  414880:	89 4d e8             	mov    %ecx,-0x18(%rbp)
  414883:	88 45 ec             	mov    %al,-0x14(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  414886:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
  41488a:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  41488d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  414891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414895:	48 89 c7             	mov    %rax,%rdi
  414898:	e8 f8 17 ff ff       	call   406095 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i>
  41489d:	c9                   	leave
  41489e:	c3                   	ret

000000000041489f <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  41489f:	55                   	push   %rbp
  4148a0:	48 89 e5             	mov    %rsp,%rbp
  4148a3:	89 f8                	mov    %edi,%eax
  4148a5:	89 75 f8             	mov    %esi,-0x8(%rbp)
  4148a8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  4148ac:	88 45 fc             	mov    %al,-0x4(%rbp)
      else if (__sign == _Sign_plus)
  4148af:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  4148b3:	75 09                	jne    4148be <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x1f>
	*__dest = '+';
  4148b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4148b9:	c6 00 2b             	movb   $0x2b,(%rax)
  4148bc:	eb 14                	jmp    4148d2 <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x33>
      else if (__sign == _Sign_space)
  4148be:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  4148c2:	75 09                	jne    4148cd <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x2e>
	*__dest = ' ';
  4148c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4148c8:	c6 00 20             	movb   $0x20,(%rax)
  4148cb:	eb 05                	jmp    4148d2 <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x33>
	++__dest;
  4148cd:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  4148d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  4148d6:	5d                   	pop    %rbp
  4148d7:	c3                   	ret

00000000004148d8 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>:
	_M_format_int(string_view __narrow_str, size_t __prefix_len,
  4148d8:	55                   	push   %rbp
  4148d9:	48 89 e5             	mov    %rsp,%rbp
  4148dc:	41 55                	push   %r13
  4148de:	41 54                	push   %r12
  4148e0:	53                   	push   %rbx
  4148e1:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  4148e8:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  4148ef:	48 89 f0             	mov    %rsi,%rax
  4148f2:	48 89 d6             	mov    %rdx,%rsi
  4148f5:	48 89 c0             	mov    %rax,%rax
  4148f8:	ba 00 00 00 00       	mov    $0x0,%edx
  4148fd:	48 89 f2             	mov    %rsi,%rdx
  414900:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  414907:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  41490e:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
  414915:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  41491c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  414923:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  41492a:	48 89 d6             	mov    %rdx,%rsi
  41492d:	48 89 c7             	mov    %rax,%rdi
  414930:	e8 55 0a 00 00       	call   41538a <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  414935:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  basic_string_view<_CharT> __str;
  414939:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  414940:	00 00 00 00
  414944:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  41494b:	00 00 00 00
	    __str = __narrow_str;
  41494f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  414956:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  41495d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  414964:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	  if (_M_spec._M_localized)
  41496b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  414972:	0f b6 00             	movzbl (%rax),%eax
  414975:	83 e0 20             	and    $0x20,%eax
  414978:	84 c0                	test   %al,%al
  41497a:	0f 84 00 02 00 00    	je     414b80 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x2a8>
	      const auto& __l = __fc.locale();
  414980:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  414987:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  41498e:	48 89 d6             	mov    %rdx,%rsi
  414991:	48 89 c7             	mov    %rax,%rdi
  414994:	e8 95 fb ff ff       	call   41452e <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  414999:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4149a0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	      if (__l.name() != "C")
  4149a4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  4149ab:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4149af:	48 89 d6             	mov    %rdx,%rsi
  4149b2:	48 89 c7             	mov    %rax,%rdi
  4149b5:	e8 66 f9 fe ff       	call   404320 <_ZNKSt6locale4nameB5cxx11Ev@plt>
  4149ba:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  4149c1:	be 1d a4 41 00       	mov    $0x41a41d,%esi
  4149c6:	48 89 c7             	mov    %rax,%rdi
  4149c9:	e8 6d 16 00 00       	call   41603b <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
  4149ce:	83 f0 01             	xor    $0x1,%eax
  4149d1:	89 c3                	mov    %eax,%ebx
  4149d3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  4149da:	48 89 c7             	mov    %rax,%rdi
  4149dd:	e8 a0 1f ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4149e2:	84 db                	test   %bl,%bl
  4149e4:	0f 84 87 01 00 00    	je     414b71 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x299>
		  auto& __np = use_facet<numpunct<_CharT>>(__l);
  4149ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4149ee:	48 89 c7             	mov    %rax,%rdi
  4149f1:	e8 ba f6 fe ff       	call   4040b0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  4149f6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		  string __grp = __np.grouping();
  4149fa:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  414a01:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  414a05:	48 89 d6             	mov    %rdx,%rsi
  414a08:	48 89 c7             	mov    %rax,%rdi
  414a0b:	e8 80 f8 fe ff       	call   404290 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>
		  if (!__grp.empty())
  414a10:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  414a17:	48 89 c7             	mov    %rax,%rdi
  414a1a:	e8 9b 95 ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  414a1f:	83 f0 01             	xor    $0x1,%eax
  414a22:	84 c0                	test   %al,%al
  414a24:	0f 84 38 01 00 00    	je     414b62 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x28a>
		      size_t __n = __str.size() - __prefix_len;
  414a2a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  414a31:	48 89 c7             	mov    %rax,%rdi
  414a34:	e8 c1 0e ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414a39:	48 2b 85 10 ff ff ff 	sub    -0xf0(%rbp),%rax
  414a40:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		      auto __p = (_CharT*)__builtin_alloca(2 * __n
  414a44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  414a48:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  414a4c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  414a53:	48 01 d0             	add    %rdx,%rax
  414a56:	48 8d 50 08          	lea    0x8(%rax),%rdx
  414a5a:	b8 10 00 00 00       	mov    $0x10,%eax
  414a5f:	48 83 e8 01          	sub    $0x1,%rax
  414a63:	48 01 d0             	add    %rdx,%rax
  414a66:	bb 10 00 00 00       	mov    $0x10,%ebx
  414a6b:	ba 00 00 00 00       	mov    $0x0,%edx
  414a70:	48 f7 f3             	div    %rbx
  414a73:	48 6b c0 10          	imul   $0x10,%rax,%rax
  414a77:	48 29 c4             	sub    %rax,%rsp
  414a7a:	48 89 e0             	mov    %rsp,%rax
  414a7d:	48 83 c0 0f          	add    $0xf,%rax
  414a81:	48 c1 e8 04          	shr    $0x4,%rax
  414a85:	48 c1 e0 04          	shl    $0x4,%rax
  414a89:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		      auto __s = __str.data();
  414a8d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  414a94:	48 89 c7             	mov    %rax,%rdi
  414a97:	e8 4c 1e ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  414a9c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		      char_traits<_CharT>::copy(__p, __s, __prefix_len);
  414aa0:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  414aa7:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  414aab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  414aaf:	48 89 ce             	mov    %rcx,%rsi
  414ab2:	48 89 c7             	mov    %rax,%rdi
  414ab5:	e8 5b fd fe ff       	call   404815 <_ZNSt11char_traitsIcE4copyEPcPKcm>
		      __s += __prefix_len;
  414aba:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  414ac1:	48 01 45 a8          	add    %rax,-0x58(%rbp)
		      auto __end = std::__add_grouping(__p + __prefix_len,
  414ac5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  414ac9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  414acd:	4c 8d 2c 02          	lea    (%rdx,%rax,1),%r13
  414ad1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  414ad8:	48 89 c7             	mov    %rax,%rdi
  414adb:	e8 40 01 ff ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414ae0:	49 89 c4             	mov    %rax,%r12
						       __grp.data(),
  414ae3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  414aea:	48 89 c7             	mov    %rax,%rdi
  414aed:	e8 70 50 ff ff       	call   409b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  414af2:	48 89 c3             	mov    %rax,%rbx
						       __np.thousands_sep(),
  414af5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  414af9:	48 89 c7             	mov    %rax,%rdi
  414afc:	e8 4f f6 fe ff       	call   404150 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>
		      auto __end = std::__add_grouping(__p + __prefix_len,
  414b01:	0f be c0             	movsbl %al,%eax
  414b04:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  414b08:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  414b0f:	48 8d 3c 11          	lea    (%rcx,%rdx,1),%rdi
  414b13:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  414b17:	4d 89 e9             	mov    %r13,%r9
  414b1a:	49 89 d0             	mov    %rdx,%r8
  414b1d:	4c 89 e1             	mov    %r12,%rcx
  414b20:	48 89 da             	mov    %rbx,%rdx
  414b23:	89 c6                	mov    %eax,%esi
  414b25:	e8 db 1c 00 00       	call   416805 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>
  414b2a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		      __str = {__p, size_t(__end - __p)};
  414b2e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414b32:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  414b36:	48 89 c2             	mov    %rax,%rdx
  414b39:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  414b3d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  414b41:	48 89 ce             	mov    %rcx,%rsi
  414b44:	48 89 c7             	mov    %rax,%rdi
  414b47:	e8 ae 1d ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  414b4c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  414b50:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  414b54:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  414b5b:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
		}
  414b62:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  414b69:	48 89 c7             	mov    %rax,%rdi
  414b6c:	e8 11 1e ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    }
  414b71:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  414b78:	48 89 c7             	mov    %rax,%rdi
  414b7b:	e8 50 f7 fe ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
	  if (__width <= __str.size())
  414b80:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  414b87:	48 89 c7             	mov    %rax,%rdi
  414b8a:	e8 6b 0d ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414b8f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  414b93:	0f 93 c0             	setae  %al
  414b96:	84 c0                	test   %al,%al
  414b98:	74 33                	je     414bcd <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x2f5>
	    return __format::__write(__fc.out(), __str);
  414b9a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  414ba1:	48 89 c7             	mov    %rax,%rdi
  414ba4:	e8 49 5e ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  414ba9:	48 89 c1             	mov    %rax,%rcx
  414bac:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  414bb3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  414bba:	48 89 d6             	mov    %rdx,%rsi
  414bbd:	48 89 c2             	mov    %rax,%rdx
  414bc0:	48 89 cf             	mov    %rcx,%rdi
  414bc3:	e8 46 8b ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  414bc8:	e9 71 01 00 00       	jmp    414d3e <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x466>
	  char32_t __fill_char = _M_spec._M_fill;
  414bcd:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  414bd4:	8b 40 08             	mov    0x8(%rax),%eax
  414bd7:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  _Align __align = _M_spec._M_align;
  414bda:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  414be1:	0f b6 00             	movzbl (%rax),%eax
  414be4:	83 e0 03             	and    $0x3,%eax
  414be7:	0f b6 c0             	movzbl %al,%eax
  414bea:	89 45 d8             	mov    %eax,-0x28(%rbp)
	  size_t __nfill = __width - __str.size();
  414bed:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  414bf4:	48 89 c7             	mov    %rax,%rdi
  414bf7:	e8 fe 0c ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414bfc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  414c00:	48 29 c2             	sub    %rax,%rdx
  414c03:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  auto __out = __fc.out();
  414c07:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  414c0e:	48 89 c7             	mov    %rax,%rdi
  414c11:	e8 dc 5d ff ff       	call   40a9f2 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  414c16:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	  if (__align == _Align_default)
  414c1d:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  414c21:	0f 85 96 00 00 00    	jne    414cbd <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
	      __align = _Align_right;
  414c27:	c7 45 d8 02 00 00 00 	movl   $0x2,-0x28(%rbp)
	      if (_M_spec._M_zero_fill)
  414c2e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  414c35:	0f b6 00             	movzbl (%rax),%eax
  414c38:	83 e0 40             	and    $0x40,%eax
  414c3b:	84 c0                	test   %al,%al
  414c3d:	74 77                	je     414cb6 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3de>
		  __fill_char = _CharT('0');
  414c3f:	c7 45 dc 30 00 00 00 	movl   $0x30,-0x24(%rbp)
		  if (__prefix_len != 0)
  414c46:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
  414c4d:	00
  414c4e:	74 6d                	je     414cbd <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
		      __out = __format::__write(std::move(__out),
  414c50:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  414c57:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  414c5e:	be 00 00 00 00       	mov    $0x0,%esi
  414c63:	48 89 c7             	mov    %rax,%rdi
  414c66:	e8 b9 5e ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  414c6b:	49 89 c4             	mov    %rax,%r12
  414c6e:	49 89 d5             	mov    %rdx,%r13
  414c71:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
  414c78:	48 89 c7             	mov    %rax,%rdi
  414c7b:	e8 eb 40 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  414c80:	4c 89 e1             	mov    %r12,%rcx
  414c83:	4c 89 ea             	mov    %r13,%rdx
  414c86:	48 8b 00             	mov    (%rax),%rax
  414c89:	48 89 ce             	mov    %rcx,%rsi
  414c8c:	48 89 c7             	mov    %rax,%rdi
  414c8f:	e8 7a 8a ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  414c94:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
		      __str.remove_prefix(__prefix_len);
  414c9b:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  414ca2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  414ca9:	48 89 d6             	mov    %rdx,%rsi
  414cac:	48 89 c7             	mov    %rax,%rdi
  414caf:	e8 56 07 00 00       	call   41540a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
  414cb4:	eb 07                	jmp    414cbd <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
		__fill_char = _CharT(' ');
  414cb6:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  414cbd:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
  414cc4:	48 89 c7             	mov    %rax,%rdi
  414cc7:	e8 9f 40 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  414ccc:	44 8b 45 dc          	mov    -0x24(%rbp),%r8d
  414cd0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  414cd4:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  414cd7:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  414cde:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  414ce5:	48 8b 00             	mov    (%rax),%rax
  414ce8:	45 89 c1             	mov    %r8d,%r9d
  414ceb:	49 89 f8             	mov    %rdi,%r8
  414cee:	48 89 c7             	mov    %rax,%rdi
  414cf1:	e8 d1 09 00 00       	call   4156c7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
					  __align, __nfill, __fill_char);
  414cf6:	90                   	nop
  414cf7:	eb 45                	jmp    414d3e <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x466>
	      if (__l.name() != "C")
  414cf9:	48 89 c3             	mov    %rax,%rbx
  414cfc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  414d03:	48 89 c7             	mov    %rax,%rdi
  414d06:	e8 77 1c ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414d0b:	eb 17                	jmp    414d24 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x44c>
		}
  414d0d:	48 89 c3             	mov    %rax,%rbx
  414d10:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  414d17:	48 89 c7             	mov    %rax,%rdi
  414d1a:	e8 63 1c ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414d1f:	eb 03                	jmp    414d24 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x44c>
	    }
  414d21:	48 89 c3             	mov    %rax,%rbx
  414d24:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  414d2b:	48 89 c7             	mov    %rax,%rdi
  414d2e:	e8 9d f5 fe ff       	call   4042d0 <_ZNSt6localeD1Ev@plt>
  414d33:	48 89 d8             	mov    %rbx,%rax
  414d36:	48 89 c7             	mov    %rax,%rdi
  414d39:	e8 32 f6 fe ff       	call   404370 <_Unwind_Resume@plt>
	}
  414d3e:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  414d42:	5b                   	pop    %rbx
  414d43:	41 5c                	pop    %r12
  414d45:	41 5d                	pop    %r13
  414d47:	5d                   	pop    %rbp
  414d48:	c3                   	ret

0000000000414d49 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_>:
	_S_to_character(_Int __i)
  414d49:	55                   	push   %rbp
  414d4a:	48 89 e5             	mov    %rsp,%rbp
  414d4d:	48 83 ec 10          	sub    $0x10,%rsp
  414d51:	89 7d fc             	mov    %edi,-0x4(%rbp)
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
  414d54:	83 7d fc 80          	cmpl   $0xffffff80,-0x4(%rbp)
  414d58:	7c 0b                	jl     414d65 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x1c>
  414d5a:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
  414d5e:	7f 05                	jg     414d65 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x1c>
		return static_cast<_CharT>(__i);
  414d60:	8b 45 fc             	mov    -0x4(%rbp),%eax
  414d63:	eb 0a                	jmp    414d6f <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x26>
	  __throw_format_error("format error: integer not representable as "
  414d65:	bf e8 a3 41 00       	mov    $0x41a3e8,%edi
  414d6a:	e8 ba 02 ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	}
  414d6f:	c9                   	leave
  414d70:	c3                   	ret

0000000000414d71 <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  414d71:	55                   	push   %rbp
  414d72:	48 89 e5             	mov    %rsp,%rbp
  414d75:	48 83 ec 20          	sub    $0x20,%rsp
  414d79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414d7d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414d81:	89 55 ec             	mov    %edx,-0x14(%rbp)
  414d84:	89 4d e8             	mov    %ecx,-0x18(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  414d87:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  414d8a:	8b 55 ec             	mov    -0x14(%rbp),%edx
  414d8d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  414d91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414d95:	48 89 c7             	mov    %rax,%rdi
  414d98:	e8 75 14 ff ff       	call   406212 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i>
  414d9d:	c9                   	leave
  414d9e:	c3                   	ret

0000000000414d9f <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_>:
	_S_to_character(_Int __i)
  414d9f:	55                   	push   %rbp
  414da0:	48 89 e5             	mov    %rsp,%rbp
  414da3:	48 83 ec 10          	sub    $0x10,%rsp
  414da7:	89 7d fc             	mov    %edi,-0x4(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  414daa:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
  414dae:	77 05                	ja     414db5 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_+0x16>
	    return static_cast<_CharT>(__i);
  414db0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  414db3:	eb 0a                	jmp    414dbf <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_+0x20>
	  __throw_format_error("format error: integer not representable as "
  414db5:	bf e8 a3 41 00       	mov    $0x41a3e8,%edi
  414dba:	e8 6a 02 ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	}
  414dbf:	c9                   	leave
  414dc0:	c3                   	ret

0000000000414dc1 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_>:
	_S_to_character(_Int __i)
  414dc1:	55                   	push   %rbp
  414dc2:	48 89 e5             	mov    %rsp,%rbp
  414dc5:	48 83 ec 10          	sub    $0x10,%rsp
  414dc9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
  414dcd:	48 83 7d f8 80       	cmpq   $0xffffffffffffff80,-0x8(%rbp)
  414dd2:	7c 0d                	jl     414de1 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x20>
  414dd4:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
  414dd9:	7f 06                	jg     414de1 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x20>
		return static_cast<_CharT>(__i);
  414ddb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414ddf:	eb 0a                	jmp    414deb <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x2a>
	  __throw_format_error("format error: integer not representable as "
  414de1:	bf e8 a3 41 00       	mov    $0x41a3e8,%edi
  414de6:	e8 3e 02 ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	}
  414deb:	c9                   	leave
  414dec:	c3                   	ret

0000000000414ded <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  414ded:	55                   	push   %rbp
  414dee:	48 89 e5             	mov    %rsp,%rbp
  414df1:	48 83 ec 20          	sub    $0x20,%rsp
  414df5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414df9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414dfd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  414e01:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  414e04:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  414e07:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  414e0b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  414e0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414e13:	48 89 c7             	mov    %rax,%rdi
  414e16:	e8 f4 16 ff ff       	call   40650f <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i>
  414e1b:	c9                   	leave
  414e1c:	c3                   	ret

0000000000414e1d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_>:
	_S_to_character(_Int __i)
  414e1d:	55                   	push   %rbp
  414e1e:	48 89 e5             	mov    %rsp,%rbp
  414e21:	48 83 ec 10          	sub    $0x10,%rsp
  414e25:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  414e29:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
  414e2e:	77 06                	ja     414e36 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_+0x19>
	    return static_cast<_CharT>(__i);
  414e30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414e34:	eb 0a                	jmp    414e40 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_+0x23>
	  __throw_format_error("format error: integer not representable as "
  414e36:	bf e8 a3 41 00       	mov    $0x41a3e8,%edi
  414e3b:	e8 e9 01 ff ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	}
  414e40:	c9                   	leave
  414e41:	c3                   	ret

0000000000414e42 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>:
      _M_parse_sign(iterator __first, iterator) noexcept
  414e42:	55                   	push   %rbp
  414e43:	48 89 e5             	mov    %rsp,%rbp
  414e46:	48 83 ec 30          	sub    $0x30,%rsp
  414e4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414e4e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414e52:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (_Sign __sign = _S_sign(*__first))
  414e56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414e5a:	0f b6 00             	movzbl (%rax),%eax
  414e5d:	0f be c0             	movsbl %al,%eax
  414e60:	89 c7                	mov    %eax,%edi
  414e62:	e8 49 1b 00 00       	call   4169b0 <_ZNSt8__format5_SpecIcE7_S_signEc>
  414e67:	89 45 fc             	mov    %eax,-0x4(%rbp)
  414e6a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  414e6e:	74 28                	je     414e98 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_+0x56>
	    _M_sign = __sign;
  414e70:	8b 45 fc             	mov    -0x4(%rbp),%eax
  414e73:	83 e0 03             	and    $0x3,%eax
  414e76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  414e7a:	83 e0 03             	and    $0x3,%eax
  414e7d:	8d 0c 85 00 00 00 00 	lea    0x0(,%rax,4),%ecx
  414e84:	0f b6 02             	movzbl (%rdx),%eax
  414e87:	83 e0 f3             	and    $0xfffffff3,%eax
  414e8a:	09 c8                	or     %ecx,%eax
  414e8c:	88 02                	mov    %al,(%rdx)
	    return __first + 1;
  414e8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414e92:	48 83 c0 01          	add    $0x1,%rax
  414e96:	eb 04                	jmp    414e9c <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_+0x5a>
	return __first;
  414e98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      }
  414e9c:	c9                   	leave
  414e9d:	c3                   	ret

0000000000414e9e <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>:
      _M_parse_alternate_form(iterator __first, iterator) noexcept
  414e9e:	55                   	push   %rbp
  414e9f:	48 89 e5             	mov    %rsp,%rbp
  414ea2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414ea6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414eaa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == '#')
  414eae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414eb2:	0f b6 00             	movzbl (%rax),%eax
  414eb5:	3c 23                	cmp    $0x23,%al
  414eb7:	75 11                	jne    414eca <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_+0x2c>
	    _M_alt = true;
  414eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414ebd:	0f b6 10             	movzbl (%rax),%edx
  414ec0:	83 ca 10             	or     $0x10,%edx
  414ec3:	88 10                	mov    %dl,(%rax)
	    ++__first;
  414ec5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  414eca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  414ece:	5d                   	pop    %rbp
  414ecf:	c3                   	ret

0000000000414ed0 <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>:
      _M_parse_zero_fill(iterator __first, iterator /* __last */) noexcept
  414ed0:	55                   	push   %rbp
  414ed1:	48 89 e5             	mov    %rsp,%rbp
  414ed4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414ed8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414edc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == '0')
  414ee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414ee4:	0f b6 00             	movzbl (%rax),%eax
  414ee7:	3c 30                	cmp    $0x30,%al
  414ee9:	75 11                	jne    414efc <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_+0x2c>
	    _M_zero_fill = true;
  414eeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414eef:	0f b6 10             	movzbl (%rax),%edx
  414ef2:	83 ca 40             	or     $0x40,%edx
  414ef5:	88 10                	mov    %dl,(%rax)
	    ++__first;
  414ef7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  414efc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  414f00:	5d                   	pop    %rbp
  414f01:	c3                   	ret

0000000000414f02 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>:
      _M_parse_locale(iterator __first, iterator /* __last */) noexcept
  414f02:	55                   	push   %rbp
  414f03:	48 89 e5             	mov    %rsp,%rbp
  414f06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414f0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414f0e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == 'L')
  414f12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414f16:	0f b6 00             	movzbl (%rax),%eax
  414f19:	3c 4c                	cmp    $0x4c,%al
  414f1b:	75 11                	jne    414f2e <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_+0x2c>
	    _M_localized = true;
  414f1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414f21:	0f b6 10             	movzbl (%rax),%edx
  414f24:	83 ca 20             	or     $0x20,%edx
  414f27:	88 10                	mov    %dl,(%rax)
	    ++__first;
  414f29:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  414f2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  414f32:	5d                   	pop    %rbp
  414f33:	c3                   	ret

0000000000414f34 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>:
	_M_get_precision(_Context& __ctx) const
  414f34:	55                   	push   %rbp
  414f35:	48 89 e5             	mov    %rsp,%rbp
  414f38:	48 83 ec 40          	sub    $0x40,%rsp
  414f3c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  414f40:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	  size_t __prec = -1;
  414f44:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
  414f4b:	ff
	  if (_M_prec_kind == _WP_value)
  414f4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414f50:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  414f54:	83 e0 06             	and    $0x6,%eax
  414f57:	3c 02                	cmp    $0x2,%al
  414f59:	75 11                	jne    414f6c <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x38>
	    __prec = _M_prec;
  414f5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414f5f:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  414f63:	0f b7 c0             	movzwl %ax,%eax
  414f66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  414f6a:	eb 3d                	jmp    414fa9 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x75>
	  else if (_M_prec_kind == _WP_from_arg)
  414f6c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414f70:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  414f74:	83 e0 06             	and    $0x6,%eax
  414f77:	3c 04                	cmp    $0x4,%al
  414f79:	75 2e                	jne    414fa9 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x75>
	    __prec = __format::__int_from_arg(__ctx.arg(_M_prec));
  414f7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414f7f:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  414f83:	0f b7 d0             	movzwl %ax,%edx
  414f86:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  414f8a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  414f8e:	48 89 ce             	mov    %rcx,%rsi
  414f91:	48 89 c7             	mov    %rax,%rdi
  414f94:	e8 09 88 ff ff       	call   40d7a2 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  414f99:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  414f9d:	48 89 c7             	mov    %rax,%rdi
  414fa0:	e8 f2 1c 00 00       	call   416c97 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>
  414fa5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return __prec;
  414fa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  414fad:	c9                   	leave
  414fae:	c3                   	ret
  414faf:	90                   	nop

0000000000414fb0 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m>:
	auto __overwrite = [&](_CharT* __p, size_t) {
  414fb0:	55                   	push   %rbp
  414fb1:	48 89 e5             	mov    %rsp,%rbp
  414fb4:	41 56                	push   %r14
  414fb6:	41 55                	push   %r13
  414fb8:	41 54                	push   %r12
  414fba:	53                   	push   %rbx
  414fbb:	48 83 ec 30          	sub    $0x30,%rsp
  414fbf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  414fc3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  414fc7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
					   __str.data(), __str.data() + __e);
  414fcb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414fcf:	48 8b 40 10          	mov    0x10(%rax),%rax
  414fd3:	48 89 c7             	mov    %rax,%rdi
  414fd6:	e8 0d 19 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  414fdb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  414fdf:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  414fe3:	48 8b 12             	mov    (%rdx),%rdx
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
  414fe6:	4c 8d 34 10          	lea    (%rax,%rdx,1),%r14
  414fea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414fee:	48 8b 40 10          	mov    0x10(%rax),%rax
  414ff2:	48 89 c7             	mov    %rax,%rdi
  414ff5:	e8 ee 18 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  414ffa:	49 89 c5             	mov    %rax,%r13
  414ffd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415001:	48 8b 40 08          	mov    0x8(%rax),%rax
  415005:	48 89 c7             	mov    %rax,%rdi
  415008:	e8 13 fc fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41500d:	49 89 c4             	mov    %rax,%r12
  415010:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415014:	48 8b 40 08          	mov    0x8(%rax),%rax
  415018:	48 89 c7             	mov    %rax,%rdi
  41501b:	e8 14 3b ff ff       	call   408b34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  415020:	48 89 c3             	mov    %rax,%rbx
  415023:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415027:	48 8b 00             	mov    (%rax),%rax
  41502a:	48 89 c7             	mov    %rax,%rdi
  41502d:	e8 1e f1 fe ff       	call   404150 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>
  415032:	0f be f0             	movsbl %al,%esi
  415035:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415039:	4d 89 f1             	mov    %r14,%r9
  41503c:	4d 89 e8             	mov    %r13,%r8
  41503f:	4c 89 e1             	mov    %r12,%rcx
  415042:	48 89 da             	mov    %rbx,%rdx
  415045:	48 89 c7             	mov    %rax,%rdi
  415048:	e8 b8 17 00 00       	call   416805 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>
  41504d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  if (__r)
  415051:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415055:	48 8b 40 20          	mov    0x20(%rax),%rax
  415059:	48 8b 00             	mov    (%rax),%rax
  41505c:	48 85 c0             	test   %rax,%rax
  41505f:	74 77                	je     4150d8 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0x128>
	      if (__d != __str.npos)
  415061:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415065:	48 8b 40 28          	mov    0x28(%rax),%rax
  415069:	48 8b 00             	mov    (%rax),%rax
  41506c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  415070:	74 28                	je     41509a <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0xea>
		  *__end = __point;
  415072:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415076:	48 8b 40 30          	mov    0x30(%rax),%rax
  41507a:	0f b6 10             	movzbl (%rax),%edx
  41507d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415081:	88 10                	mov    %dl,(%rax)
		  ++__end;
  415083:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
		  ++__e;
  415088:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41508c:	48 8b 40 18          	mov    0x18(%rax),%rax
  415090:	48 8b 10             	mov    (%rax),%rdx
  415093:	48 83 c2 01          	add    $0x1,%rdx
  415097:	48 89 10             	mov    %rdx,(%rax)
	      if (__r > 1)
  41509a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41509e:	48 8b 40 20          	mov    0x20(%rax),%rax
  4150a2:	48 8b 00             	mov    (%rax),%rax
  4150a5:	48 83 f8 01          	cmp    $0x1,%rax
  4150a9:	76 2d                	jbe    4150d8 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0x128>
		__end += __str.copy(__end, __str.npos, __e);
  4150ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4150af:	48 8b 40 10          	mov    0x10(%rax),%rax
  4150b3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4150b7:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  4150bb:	48 8b 12             	mov    (%rdx),%rdx
  4150be:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4150c2:	48 89 d1             	mov    %rdx,%rcx
  4150c5:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  4150cc:	48 89 c7             	mov    %rax,%rdi
  4150cf:	e8 cc 13 00 00       	call   4164a0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
  4150d4:	48 01 45 d8          	add    %rax,-0x28(%rbp)
	  return (__end - __p);
  4150d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4150dc:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
	auto __overwrite = [&](_CharT* __p, size_t) {
  4150e0:	48 83 c4 30          	add    $0x30,%rsp
  4150e4:	5b                   	pop    %rbx
  4150e5:	41 5c                	pop    %r12
  4150e7:	41 5d                	pop    %r13
  4150e9:	41 5e                	pop    %r14
  4150eb:	5d                   	pop    %rbp
  4150ec:	c3                   	ret
  4150ed:	90                   	nop

00000000004150ee <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>:
      _M_localize(basic_string_view<_CharT> __str, char __expc,
  4150ee:	55                   	push   %rbp
  4150ef:	48 89 e5             	mov    %rsp,%rbp
  4150f2:	53                   	push   %rbx
  4150f3:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  4150fa:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  415101:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  415108:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  41510f:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  415116:	44 89 c0             	mov    %r8d,%eax
  415119:	4c 89 8d e0 fe ff ff 	mov    %r9,-0x120(%rbp)
  415120:	88 85 ec fe ff ff    	mov    %al,-0x114(%rbp)
	basic_string<_CharT> __lstr;
  415126:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41512d:	48 89 c7             	mov    %rax,%rdi
  415130:	e8 b1 f8 fe ff       	call   4049e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	if (__loc == locale::classic())
  415135:	e8 66 f1 fe ff       	call   4042a0 <_ZNSt6locale7classicEv@plt>
  41513a:	48 89 c2             	mov    %rax,%rdx
  41513d:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  415144:	48 89 d6             	mov    %rdx,%rsi
  415147:	48 89 c7             	mov    %rax,%rdi
  41514a:	e8 11 ef fe ff       	call   404060 <_ZNKSt6localeeqERKS_@plt>
  41514f:	84 c0                	test   %al,%al
  415151:	0f 85 24 02 00 00    	jne    41537b <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x28d>
	const auto& __np = use_facet<numpunct<_CharT>>(__loc);
  415157:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  41515e:	48 89 c7             	mov    %rax,%rdi
  415161:	e8 4a ef fe ff       	call   4040b0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  415166:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	const _CharT __point = __np.decimal_point();
  41516a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41516e:	48 89 c7             	mov    %rax,%rdi
  415171:	e8 9a ef fe ff       	call   404110 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@plt>
  415176:	88 45 c7             	mov    %al,-0x39(%rbp)
	const string __grp = __np.grouping();
  415179:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41517d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415181:	48 89 d6             	mov    %rdx,%rsi
  415184:	48 89 c7             	mov    %rax,%rdi
  415187:	e8 04 f1 fe ff       	call   404290 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>
	    __dot = '.';
  41518c:	c6 45 e7 2e          	movb   $0x2e,-0x19(%rbp)
	    __exp = __expc;
  415190:	0f b6 85 ec fe ff ff 	movzbl -0x114(%rbp),%eax
  415197:	88 45 e6             	mov    %al,-0x1a(%rbp)
	if (__grp.empty() && __point == __dot)
  41519a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41519e:	48 89 c7             	mov    %rax,%rdi
  4151a1:	e8 14 8e ff ff       	call   40dfba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4151a6:	84 c0                	test   %al,%al
  4151a8:	74 10                	je     4151ba <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xcc>
  4151aa:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  4151ae:	38 45 e7             	cmp    %al,-0x19(%rbp)
  4151b1:	75 07                	jne    4151ba <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xcc>
  4151b3:	b8 01 00 00 00       	mov    $0x1,%eax
  4151b8:	eb 05                	jmp    4151bf <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xd1>
  4151ba:	b8 00 00 00 00       	mov    $0x0,%eax
  4151bf:	84 c0                	test   %al,%al
  4151c1:	0f 85 77 01 00 00    	jne    41533e <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x250>
	size_t __d = __str.find(__dot);
  4151c7:	0f be 4d e7          	movsbl -0x19(%rbp),%ecx
  4151cb:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4151d2:	ba 00 00 00 00       	mov    $0x0,%edx
  4151d7:	89 ce                	mov    %ecx,%esi
  4151d9:	48 89 c7             	mov    %rax,%rdi
  4151dc:	e8 e7 26 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4151e1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	size_t __e = min(__d, __str.find(__exp));
  4151e5:	0f be 4d e6          	movsbl -0x1a(%rbp),%ecx
  4151e9:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4151f0:	ba 00 00 00 00       	mov    $0x0,%edx
  4151f5:	89 ce                	mov    %ecx,%esi
  4151f7:	48 89 c7             	mov    %rax,%rdi
  4151fa:	e8 c9 26 ff ff       	call   4078c8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4151ff:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  415203:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  415207:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  41520b:	48 89 d6             	mov    %rdx,%rsi
  41520e:	48 89 c7             	mov    %rax,%rdi
  415211:	e8 b8 49 ff ff       	call   409bce <_ZSt3minImERKT_S2_S2_>
  415216:	48 8b 00             	mov    (%rax),%rax
  415219:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	if (__e == __str.npos)
  41521d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415221:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  415225:	75 13                	jne    41523a <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x14c>
	  __e = __str.size();
  415227:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  41522e:	48 89 c7             	mov    %rax,%rdi
  415231:	e8 c4 06 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415236:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	const size_t __r = __str.size() - __e;
  41523a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415241:	48 89 c7             	mov    %rax,%rdi
  415244:	e8 b1 06 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415249:	48 89 c2             	mov    %rax,%rdx
  41524c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415250:	48 29 c2             	sub    %rax,%rdx
  415253:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	auto __overwrite = [&](_CharT* __p, size_t) {
  415257:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41525b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  415262:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415266:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  41526d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415274:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  41527b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  41527f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  415286:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  41528a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  415291:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  415295:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  41529c:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
  4152a0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	__lstr.__resize_and_overwrite(__e * 2 + __r, __overwrite);
  4152a4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4152a8:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  4152ac:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4152b0:	48 01 c2             	add    %rax,%rdx
  4152b3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4152ba:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4152be:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  4152c2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  4152c9:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  4152d0:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4152d7:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4152de:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4152e5:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  4152ec:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4152f3:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  4152fa:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  415301:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  415308:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  41530f:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  415316:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  41531a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    { resize_and_overwrite<_Operation&>(__n, __op); }
  415321:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  415328:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  41532c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415330:	48 89 ce             	mov    %rcx,%rsi
  415333:	48 89 c7             	mov    %rax,%rdi
  415336:	e8 61 30 00 00       	call   41839c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_>
  41533b:	90                   	nop
	return __lstr;
  41533c:	eb 01                	jmp    41533f <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x251>
	  return __lstr; // Locale uses '.' and no grouping.
  41533e:	90                   	nop
      }
  41533f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415343:	48 89 c7             	mov    %rax,%rdi
  415346:	e8 37 16 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41534b:	eb 2f                	jmp    41537c <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x28e>
  41534d:	48 89 c3             	mov    %rax,%rbx
  415350:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415354:	48 89 c7             	mov    %rax,%rdi
  415357:	e8 26 16 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41535c:	eb 03                	jmp    415361 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x273>
  41535e:	48 89 c3             	mov    %rax,%rbx
  415361:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415368:	48 89 c7             	mov    %rax,%rdi
  41536b:	e8 12 16 ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415370:	48 89 d8             	mov    %rbx,%rax
  415373:	48 89 c7             	mov    %rax,%rdi
  415376:	e8 f5 ef fe ff       	call   404370 <_Unwind_Resume@plt>
	  return __lstr; // Nothing to do.
  41537b:	90                   	nop
      }
  41537c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415383:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  415387:	c9                   	leave
  415388:	c3                   	ret
  415389:	90                   	nop

000000000041538a <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>:
	_M_get_width(_Context& __ctx) const
  41538a:	55                   	push   %rbp
  41538b:	48 89 e5             	mov    %rsp,%rbp
  41538e:	48 83 ec 40          	sub    $0x40,%rsp
  415392:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  415396:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	  size_t __width = 0;
  41539a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4153a1:	00
	  if (_M_width_kind == _WP_value)
  4153a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4153a6:	0f b7 00             	movzwl (%rax),%eax
  4153a9:	66 25 80 01          	and    $0x180,%ax
  4153ad:	66 3d 80 00          	cmp    $0x80,%ax
  4153b1:	75 11                	jne    4153c4 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x3a>
	    __width = _M_width;
  4153b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4153b7:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  4153bb:	0f b7 c0             	movzwl %ax,%eax
  4153be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4153c2:	eb 3f                	jmp    415403 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x79>
	  else if (_M_width_kind == _WP_from_arg)
  4153c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4153c8:	0f b7 00             	movzwl (%rax),%eax
  4153cb:	66 25 80 01          	and    $0x180,%ax
  4153cf:	66 3d 00 01          	cmp    $0x100,%ax
  4153d3:	75 2e                	jne    415403 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x79>
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
  4153d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4153d9:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  4153dd:	0f b7 d0             	movzwl %ax,%edx
  4153e0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4153e4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4153e8:	48 89 ce             	mov    %rcx,%rsi
  4153eb:	48 89 c7             	mov    %rax,%rdi
  4153ee:	e8 af 83 ff ff       	call   40d7a2 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  4153f3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4153f7:	48 89 c7             	mov    %rax,%rdi
  4153fa:	e8 98 18 00 00       	call   416c97 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>
  4153ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return __width;
  415403:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  415407:	c9                   	leave
  415408:	c3                   	ret
  415409:	90                   	nop

000000000041540a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>:
      remove_prefix(size_type __n) noexcept
  41540a:	55                   	push   %rbp
  41540b:	48 89 e5             	mov    %rsp,%rbp
  41540e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415412:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415416:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(this->_M_len >= __n);
  41541b:	84 c0                	test   %al,%al
  41541d:	74 14                	je     415433 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm+0x29>
  41541f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415423:	48 8b 00             	mov    (%rax),%rax
  415426:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  41542a:	0f 92 c0             	setb   %al
  41542d:	0f b6 c0             	movzbl %al,%eax
  415430:	48 85 c0             	test   %rax,%rax
	this->_M_str += __n;
  415433:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415437:	48 8b 50 08          	mov    0x8(%rax),%rdx
  41543b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41543f:	48 01 c2             	add    %rax,%rdx
  415442:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415446:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_len -= __n;
  41544a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41544e:	48 8b 00             	mov    (%rax),%rax
  415451:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  415455:	48 89 c2             	mov    %rax,%rdx
  415458:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41545c:	48 89 10             	mov    %rdx,(%rax)
      }
  41545f:	90                   	nop
  415460:	5d                   	pop    %rbp
  415461:	c3                   	ret

0000000000415462 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>:
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  415462:	55                   	push   %rbp
  415463:	48 89 e5             	mov    %rsp,%rbp
  415466:	41 55                	push   %r13
  415468:	41 54                	push   %r12
  41546a:	53                   	push   %rbx
  41546b:	48 83 ec 28          	sub    $0x28,%rsp
  41546f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  415473:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  415477:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__n == 0)
  41547b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  415480:	0f 84 b2 00 00 00    	je     415538 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd6>
	while (__n > __padding.size())
  415486:	eb 45                	jmp    4154cd <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0x6b>
	    __o = __format::__write(std::move(__o), __padding);
  415488:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41548c:	48 8b 18             	mov    (%rax),%rbx
  41548f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415493:	48 89 c7             	mov    %rax,%rdi
  415496:	e8 d0 38 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41549b:	48 8b 0b             	mov    (%rbx),%rcx
  41549e:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  4154a2:	48 8b 00             	mov    (%rax),%rax
  4154a5:	48 89 ce             	mov    %rcx,%rsi
  4154a8:	48 89 c7             	mov    %rax,%rdi
  4154ab:	e8 5e 82 ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4154b0:	48 89 c2             	mov    %rax,%rdx
  4154b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4154b7:	48 89 10             	mov    %rdx,(%rax)
	    __n -= __padding.size();
  4154ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4154be:	48 8b 00             	mov    (%rax),%rax
  4154c1:	48 89 c7             	mov    %rax,%rdi
  4154c4:	e8 31 04 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4154c9:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
	while (__n > __padding.size())
  4154cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4154d1:	48 8b 00             	mov    (%rax),%rax
  4154d4:	48 89 c7             	mov    %rax,%rdi
  4154d7:	e8 1e 04 ff ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4154dc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  4154e0:	0f 92 c0             	setb   %al
  4154e3:	84 c0                	test   %al,%al
  4154e5:	75 a1                	jne    415488 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0x26>
	if (__n != 0)
  4154e7:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  4154ec:	74 4b                	je     415539 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd7>
	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
  4154ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4154f2:	48 8b 00             	mov    (%rax),%rax
  4154f5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4154f9:	be 00 00 00 00       	mov    $0x0,%esi
  4154fe:	48 89 c7             	mov    %rax,%rdi
  415501:	e8 1e 56 ff ff       	call   40ab24 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  415506:	49 89 c4             	mov    %rax,%r12
  415509:	49 89 d5             	mov    %rdx,%r13
  41550c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415510:	48 89 c7             	mov    %rax,%rdi
  415513:	e8 53 38 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  415518:	4c 89 e1             	mov    %r12,%rcx
  41551b:	4c 89 ea             	mov    %r13,%rdx
  41551e:	48 8b 00             	mov    (%rax),%rax
  415521:	48 89 ce             	mov    %rcx,%rsi
  415524:	48 89 c7             	mov    %rax,%rdi
  415527:	e8 e2 81 ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41552c:	48 89 c2             	mov    %rax,%rdx
  41552f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415533:	48 89 10             	mov    %rdx,(%rax)
  415536:	eb 01                	jmp    415539 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd7>
	  return;
  415538:	90                   	nop
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  415539:	48 83 c4 28          	add    $0x28,%rsp
  41553d:	5b                   	pop    %rbx
  41553e:	41 5c                	pop    %r12
  415540:	41 5d                	pop    %r13
  415542:	5d                   	pop    %rbp
  415543:	c3                   	ret

0000000000415544 <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  415544:	55                   	push   %rbp
  415545:	48 89 e5             	mov    %rsp,%rbp
  415548:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41554c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __t + 0;
  415550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  415554:	5d                   	pop    %rbp
  415555:	c3                   	ret

0000000000415556 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  415556:	55                   	push   %rbp
  415557:	48 89 e5             	mov    %rsp,%rbp
  41555a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41555e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __t + extent_v<remove_reference_t<_Tp>>;
  415562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415566:	48 83 c0 04          	add    $0x4,%rax
	}
  41556a:	5d                   	pop    %rbp
  41556b:	c3                   	ret

000000000041556c <_ZNSt9__unicode9_Utf_viewIcRA1_KDiEC1ES3_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  41556c:	55                   	push   %rbp
  41556d:	48 89 e5             	mov    %rsp,%rbp
  415570:	48 83 ec 10          	sub    $0x10,%rsp
  415574:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415578:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41557c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415580:	48 89 c7             	mov    %rax,%rdi
  415583:	e8 0a 00 00 00       	call   415592 <_ZSt7forwardIRA1_KDiEOT_RNSt16remove_referenceIS3_E4typeE>
  415588:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41558c:	48 89 02             	mov    %rax,(%rdx)
  41558f:	90                   	nop
  415590:	c9                   	leave
  415591:	c3                   	ret

0000000000415592 <_ZSt7forwardIRA1_KDiEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  415592:	55                   	push   %rbp
  415593:	48 89 e5             	mov    %rsp,%rbp
  415596:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  41559a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41559e:	5d                   	pop    %rbp
  41559f:	c3                   	ret

00000000004155a0 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE8_M_beginIPS1_S6_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  4155a0:	55                   	push   %rbp
  4155a1:	48 89 e5             	mov    %rsp,%rbp
  4155a4:	48 83 ec 20          	sub    $0x20,%rsp
  4155a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4155ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4155b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4155b4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  4155b8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4155bc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4155c0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4155c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4155c8:	48 89 c7             	mov    %rax,%rdi
  4155cb:	e8 f4 18 00 00       	call   416ec4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  4155d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4155d4:	c9                   	leave
  4155d5:	c3                   	ret

00000000004155d6 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv>:
      constexpr auto begin()
  4155d6:	55                   	push   %rbp
  4155d7:	48 89 e5             	mov    %rsp,%rbp
  4155da:	53                   	push   %rbx
  4155db:	48 83 ec 18          	sub    $0x18,%rsp
  4155df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4155e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  4155e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4155eb:	48 8b 00             	mov    (%rax),%rax
  4155ee:	48 89 c6             	mov    %rax,%rsi
  4155f1:	bf 05 a0 41 00       	mov    $0x41a005,%edi
  4155f6:	e8 5b ff ff ff       	call   415556 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>
  4155fb:	48 89 c3             	mov    %rax,%rbx
  4155fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415602:	48 8b 00             	mov    (%rax),%rax
  415605:	48 89 c6             	mov    %rax,%rsi
  415608:	bf 04 a0 41 00       	mov    $0x41a004,%edi
  41560d:	e8 32 ff ff ff       	call   415544 <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>
  415612:	48 89 c2             	mov    %rax,%rdx
  415615:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415619:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41561d:	48 89 d9             	mov    %rbx,%rcx
  415620:	48 89 c7             	mov    %rax,%rdi
  415623:	e8 78 ff ff ff       	call   4155a0 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE8_M_beginIPS1_S6_EEDaT_T0_>
  415628:	90                   	nop
  415629:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41562d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  415631:	c9                   	leave
  415632:	c3                   	ret
  415633:	90                   	nop

0000000000415634 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE6_M_endIPS1_S6_EEDaT_T0_>:
	_M_end(_Iter __first, _Sent __last)
  415634:	55                   	push   %rbp
  415635:	48 89 e5             	mov    %rsp,%rbp
  415638:	48 83 ec 20          	sub    $0x20,%rsp
  41563c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415640:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415644:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  415648:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __last, __last);
  41564c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  415650:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  415654:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  415658:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41565c:	48 89 c7             	mov    %rax,%rdi
  41565f:	e8 60 18 00 00       	call   416ec4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  415664:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415668:	c9                   	leave
  415669:	c3                   	ret

000000000041566a <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE3endEv>:
      constexpr auto end()
  41566a:	55                   	push   %rbp
  41566b:	48 89 e5             	mov    %rsp,%rbp
  41566e:	53                   	push   %rbx
  41566f:	48 83 ec 18          	sub    $0x18,%rsp
  415673:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  415677:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_end(ranges::begin(_M_base), ranges::end(_M_base)); }
  41567b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41567f:	48 8b 00             	mov    (%rax),%rax
  415682:	48 89 c6             	mov    %rax,%rsi
  415685:	bf 05 a0 41 00       	mov    $0x41a005,%edi
  41568a:	e8 c7 fe ff ff       	call   415556 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>
  41568f:	48 89 c3             	mov    %rax,%rbx
  415692:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415696:	48 8b 00             	mov    (%rax),%rax
  415699:	48 89 c6             	mov    %rax,%rsi
  41569c:	bf 04 a0 41 00       	mov    $0x41a004,%edi
  4156a1:	e8 9e fe ff ff       	call   415544 <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>
  4156a6:	48 89 c2             	mov    %rax,%rdx
  4156a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4156ad:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4156b1:	48 89 d9             	mov    %rbx,%rcx
  4156b4:	48 89 c7             	mov    %rax,%rdi
  4156b7:	e8 78 ff ff ff       	call   415634 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE6_M_endIPS1_S6_EEDaT_T0_>
  4156bc:	90                   	nop
  4156bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4156c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4156c5:	c9                   	leave
  4156c6:	c3                   	ret

00000000004156c7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>:
    __write_padded(_Out __out, basic_string_view<_CharT> __str,
  4156c7:	55                   	push   %rbp
  4156c8:	48 89 e5             	mov    %rsp,%rbp
  4156cb:	53                   	push   %rbx
  4156cc:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  4156d3:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  4156da:	48 89 f0             	mov    %rsi,%rax
  4156dd:	48 89 d6             	mov    %rdx,%rsi
  4156e0:	48 89 c0             	mov    %rax,%rax
  4156e3:	ba 00 00 00 00       	mov    $0x0,%edx
  4156e8:	48 89 f2             	mov    %rsi,%rdx
  4156eb:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  4156f2:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
  4156f9:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%rbp)
  4156ff:	4c 89 85 c8 fe ff ff 	mov    %r8,-0x138(%rbp)
  415706:	44 89 8d e0 fe ff ff 	mov    %r9d,-0x120(%rbp)
      const size_t __buflen = 0x20;
  41570d:	48 c7 45 d0 20 00 00 	movq   $0x20,-0x30(%rbp)
  415714:	00
      __padding_chars[0] = _CharT();
  415715:	c6 85 40 ff ff ff 00 	movb   $0x0,-0xc0(%rbp)
      basic_string_view<_CharT> __padding{__padding_chars, __buflen};
  41571c:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
  415723:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  41572a:	ba 20 00 00 00       	mov    $0x20,%edx
  41572f:	48 89 ce             	mov    %rcx,%rsi
  415732:	48 89 c7             	mov    %rax,%rdi
  415735:	e8 c0 11 ff ff       	call   4068fa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  41573a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  415741:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
      if (__align == _Align_centre)
  415748:	83 bd e4 fe ff ff 03 	cmpl   $0x3,-0x11c(%rbp)
  41574f:	75 30                	jne    415781 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xba>
	  __l = __nfill / 2;
  415751:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  415758:	48 d1 e8             	shr    %rax
  41575b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __r = __l + (__nfill & 1);
  41575f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  415766:	83 e0 01             	and    $0x1,%eax
  415769:	48 89 c2             	mov    %rax,%rdx
  41576c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415770:	48 01 d0             	add    %rdx,%rax
  415773:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __max = __r;
  415777:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41577b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  41577f:	eb 41                	jmp    4157c2 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xfb>
      else if (__align == _Align_right)
  415781:	83 bd e4 fe ff ff 02 	cmpl   $0x2,-0x11c(%rbp)
  415788:	75 1d                	jne    4157a7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xe0>
	  __l = __nfill;
  41578a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  415791:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __r = 0;
  415795:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  41579c:	00
	  __max = __l;
  41579d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4157a1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4157a5:	eb 1b                	jmp    4157c2 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xfb>
	  __l = 0;
  4157a7:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  4157ae:	00
	  __r = __nfill;
  4157af:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4157b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __max = __r;
  4157ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4157be:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (!__is_single_code_unit<_CharT>(__fill_char)) [[unlikely]]
  4157c2:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  4157c8:	89 c7                	mov    %eax,%edi
  4157ca:	e8 d2 16 00 00       	call   416ea1 <_ZNSt9__unicode21__is_single_code_unitIcEEbDi>
  4157cf:	83 f0 01             	xor    $0x1,%eax
  4157d2:	84 c0                	test   %al,%al
  4157d4:	0f 84 dc 01 00 00    	je     4159b6 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x2ef>
	    const char32_t __arr[1]{ __fill_char };
  4157da:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  4157e0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
	    _Utf_view<_CharT, const char32_t(&)[1]> __v(__arr);
  4157e6:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  4157ed:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  4157f4:	48 89 d6             	mov    %rdx,%rsi
  4157f7:	48 89 c7             	mov    %rax,%rdi
  4157fa:	e8 6d fd ff ff       	call   41556c <_ZNSt9__unicode9_Utf_viewIcRA1_KDiEC1ES3_>
  4157ff:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
  415806:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  41580a:	90                   	nop
      allocator() _GLIBCXX_NOTHROW { }
  41580b:	90                   	nop
	    basic_string<_CharT> __padstr(__v.begin(), __v.end());
  41580c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  415813:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  41581a:	48 89 d6             	mov    %rdx,%rsi
  41581d:	48 89 c7             	mov    %rax,%rdi
  415820:	e8 45 fe ff ff       	call   41566a <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE3endEv>
  415825:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415829:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  415830:	48 89 d6             	mov    %rdx,%rsi
  415833:	48 89 c7             	mov    %rax,%rdi
  415836:	e8 9b fd ff ff       	call   4155d6 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv>
  41583b:	48 8d b5 6f ff ff ff 	lea    -0x91(%rbp),%rsi
  415842:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  415849:	48 83 ec 28          	sub    $0x28,%rsp
  41584d:	48 89 e0             	mov    %rsp,%rax
  415850:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  415857:	48 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%rbx
  41585e:	48 89 08             	mov    %rcx,(%rax)
  415861:	48 89 58 08          	mov    %rbx,0x8(%rax)
  415865:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  415869:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
  41586d:	48 89 48 10          	mov    %rcx,0x10(%rax)
  415871:	48 89 58 18          	mov    %rbx,0x18(%rax)
  415875:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  415879:	48 89 48 20          	mov    %rcx,0x20(%rax)
  41587d:	48 83 ec 28          	sub    $0x28,%rsp
  415881:	48 89 e0             	mov    %rsp,%rax
  415884:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  415888:	48 8b 5d a8          	mov    -0x58(%rbp),%rbx
  41588c:	48 89 08             	mov    %rcx,(%rax)
  41588f:	48 89 58 08          	mov    %rbx,0x8(%rax)
  415893:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  415897:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  41589b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41589f:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4158a3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4158a7:	48 89 48 20          	mov    %rcx,0x20(%rax)
  4158ab:	48 89 d7             	mov    %rdx,%rdi
  4158ae:	e8 a5 16 00 00       	call   416f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_>
  4158b3:	48 83 c4 50          	add    $0x50,%rsp
      ~allocator() _GLIBCXX_NOTHROW { }
  4158b7:	90                   	nop
	    __padding = __padstr;
  4158b8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4158bf:	48 89 c7             	mov    %rax,%rdi
  4158c2:	e8 69 1b ff ff       	call   407430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4158c7:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4158ce:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	    while (__l-- > 0)
  4158d5:	eb 32                	jmp    415909 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x242>
	      __out = __format::__write(std::move(__out), __padding);
  4158d7:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  4158de:	48 89 c7             	mov    %rax,%rdi
  4158e1:	e8 85 34 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4158e6:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  4158ed:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  4158f4:	48 8b 00             	mov    (%rax),%rax
  4158f7:	48 89 ce             	mov    %rcx,%rsi
  4158fa:	48 89 c7             	mov    %rax,%rdi
  4158fd:	e8 0c 7e ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  415902:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__l-- > 0)
  415909:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41590d:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  415911:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  415915:	48 85 c0             	test   %rax,%rax
  415918:	0f 95 c0             	setne  %al
  41591b:	84 c0                	test   %al,%al
  41591d:	75 b8                	jne    4158d7 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x210>
	    __out = __format::__write(std::move(__out), __str);
  41591f:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  415926:	48 89 c7             	mov    %rax,%rdi
  415929:	e8 3d 34 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41592e:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  415935:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  41593c:	48 8b 00             	mov    (%rax),%rax
  41593f:	48 89 ce             	mov    %rcx,%rsi
  415942:	48 89 c7             	mov    %rax,%rdi
  415945:	e8 c4 7d ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41594a:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__r-- > 0)
  415951:	eb 32                	jmp    415985 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x2be>
	      __out = __format::__write(std::move(__out), __padding);
  415953:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  41595a:	48 89 c7             	mov    %rax,%rdi
  41595d:	e8 09 34 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  415962:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  415969:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  415970:	48 8b 00             	mov    (%rax),%rax
  415973:	48 89 ce             	mov    %rcx,%rsi
  415976:	48 89 c7             	mov    %rax,%rdi
  415979:	e8 90 7d ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41597e:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__r-- > 0)
  415985:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415989:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  41598d:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  415991:	48 85 c0             	test   %rax,%rax
  415994:	0f 95 c0             	setne  %al
  415997:	84 c0                	test   %al,%al
  415999:	75 b8                	jne    415953 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x28c>
	    return __out;
  41599b:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
	  }
  4159a2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4159a9:	48 89 c7             	mov    %rax,%rdi
  4159ac:	e8 d1 0f ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4159b1:	e9 c1 00 00 00       	jmp    415a77 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x3b0>
      if (__max < __buflen)
  4159b6:	48 83 7d d8 1f       	cmpq   $0x1f,-0x28(%rbp)
  4159bb:	77 20                	ja     4159dd <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x316>
	__padding.remove_suffix(__buflen - __max);
  4159bd:	b8 20 00 00 00       	mov    $0x20,%eax
  4159c2:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4159c6:	48 89 c2             	mov    %rax,%rdx
  4159c9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4159d0:	48 89 d6             	mov    %rdx,%rsi
  4159d3:	48 89 c7             	mov    %rax,%rdi
  4159d6:	e8 3b 5b ff ff       	call   40b516 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm>
  4159db:	eb 08                	jmp    4159e5 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x31e>
	__max = __buflen;
  4159dd:	48 c7 45 d8 20 00 00 	movq   $0x20,-0x28(%rbp)
  4159e4:	00
      char_traits<_CharT>::assign(__padding_chars, __max, __fill_char);
  4159e5:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  4159eb:	0f be d0             	movsbl %al,%edx
  4159ee:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4159f2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4159f9:	48 89 ce             	mov    %rcx,%rsi
  4159fc:	48 89 c7             	mov    %rax,%rdi
  4159ff:	e8 74 ee fe ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
      __pad(__l, __out);
  415a04:	48 8d 95 e8 fe ff ff 	lea    -0x118(%rbp),%rdx
  415a0b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  415a0f:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  415a16:	48 89 ce             	mov    %rcx,%rsi
  415a19:	48 89 c7             	mov    %rax,%rdi
  415a1c:	e8 41 fa ff ff       	call   415462 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>
      __out = __format::__write(std::move(__out), __str);
  415a21:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  415a28:	48 89 c7             	mov    %rax,%rdi
  415a2b:	e8 3b 33 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  415a30:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  415a37:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  415a3e:	48 8b 00             	mov    (%rax),%rax
  415a41:	48 89 ce             	mov    %rcx,%rsi
  415a44:	48 89 c7             	mov    %rax,%rdi
  415a47:	e8 c2 7c ff ff       	call   40d70e <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  415a4c:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
      __pad(__r, __out);
  415a53:	48 8d 95 e8 fe ff ff 	lea    -0x118(%rbp),%rdx
  415a5a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  415a5e:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  415a65:	48 89 ce             	mov    %rcx,%rsi
  415a68:	48 89 c7             	mov    %rax,%rdi
  415a6b:	e8 f2 f9 ff ff       	call   415462 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>
      return __out;
  415a70:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
    }
  415a77:	48 89 d8             	mov    %rbx,%rax
  415a7a:	eb 26                	jmp    415aa2 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x3db>
  415a7c:	90                   	nop
  415a7d:	48 89 c7             	mov    %rax,%rdi
  415a80:	e8 eb e8 fe ff       	call   404370 <_Unwind_Resume@plt>
	  }
  415a85:	48 89 c3             	mov    %rax,%rbx
  415a88:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415a8f:	48 89 c7             	mov    %rax,%rdi
  415a92:	e8 eb 0e ff ff       	call   406982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415a97:	48 89 d8             	mov    %rbx,%rax
  415a9a:	48 89 c7             	mov    %rax,%rdi
  415a9d:	e8 ce e8 fe ff       	call   404370 <_Unwind_Resume@plt>
    }
  415aa2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  415aa6:	c9                   	leave
  415aa7:	c3                   	ret

0000000000415aa8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>:
      empty() const noexcept
  415aa8:	55                   	push   %rbp
  415aa9:	48 89 e5             	mov    %rsp,%rbp
  415aac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len == 0; }
  415ab0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415ab4:	48 8b 00             	mov    (%rax),%rax
  415ab7:	48 85 c0             	test   %rax,%rax
  415aba:	0f 94 c0             	sete   %al
  415abd:	5d                   	pop    %rbp
  415abe:	c3                   	ret
  415abf:	90                   	nop

0000000000415ac0 <_ZNKSt6ranges8__access6_BeginclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  415ac0:	55                   	push   %rbp
  415ac1:	48 89 e5             	mov    %rsp,%rbp
  415ac4:	48 83 ec 10          	sub    $0x10,%rsp
  415ac8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415acc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  415ad0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415ad4:	48 89 c7             	mov    %rax,%rdi
  415ad7:	e8 f0 fd fe ff       	call   4058cc <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
	}
  415adc:	c9                   	leave
  415add:	c3                   	ret

0000000000415ade <_ZNKSt6ranges8__access4_EndclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  415ade:	55                   	push   %rbp
  415adf:	48 89 e5             	mov    %rsp,%rbp
  415ae2:	48 83 ec 10          	sub    $0x10,%rsp
  415ae6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415aea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  415aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415af2:	48 89 c7             	mov    %rax,%rdi
  415af5:	e8 e4 fd fe ff       	call   4058de <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>
	}
  415afa:	c9                   	leave
  415afb:	c3                   	ret

0000000000415afc <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE8_M_beginIPKcS8_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  415afc:	55                   	push   %rbp
  415afd:	48 89 e5             	mov    %rsp,%rbp
  415b00:	48 83 ec 20          	sub    $0x20,%rsp
  415b04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415b08:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415b0c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  415b10:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  415b14:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  415b18:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415b1c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  415b20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415b24:	48 89 c7             	mov    %rax,%rdi
  415b27:	e8 9e 44 ff ff       	call   409fca <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  415b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415b30:	c9                   	leave
  415b31:	c3                   	ret

0000000000415b32 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>:
      constexpr auto begin()
  415b32:	55                   	push   %rbp
  415b33:	48 89 e5             	mov    %rsp,%rbp
  415b36:	53                   	push   %rbx
  415b37:	48 83 ec 18          	sub    $0x18,%rsp
  415b3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  415b3f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  415b43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415b47:	48 89 c6             	mov    %rax,%rsi
  415b4a:	bf 05 a0 41 00       	mov    $0x41a005,%edi
  415b4f:	e8 8a ff ff ff       	call   415ade <_ZNKSt6ranges8__access4_EndclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>
  415b54:	48 89 c3             	mov    %rax,%rbx
  415b57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415b5b:	48 89 c6             	mov    %rax,%rsi
  415b5e:	bf 04 a0 41 00       	mov    $0x41a004,%edi
  415b63:	e8 58 ff ff ff       	call   415ac0 <_ZNKSt6ranges8__access6_BeginclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>
  415b68:	48 89 c2             	mov    %rax,%rdx
  415b6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415b6f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  415b73:	48 89 d9             	mov    %rbx,%rcx
  415b76:	48 89 c7             	mov    %rax,%rdi
  415b79:	e8 7e ff ff ff       	call   415afc <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE8_M_beginIPKcS8_EEDaT_T0_>
  415b7e:	90                   	nop
  415b7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415b83:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  415b87:	c9                   	leave
  415b88:	c3                   	ret
  415b89:	90                   	nop

0000000000415b8a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>:
      constexpr
      _Grapheme_cluster_view(_View __v)
      : _M_begin(_Utf32_view<_View>(std::move(__v)).begin())
      { }

      constexpr auto begin() const { return _M_begin; }
  415b8a:	55                   	push   %rbp
  415b8b:	48 89 e5             	mov    %rsp,%rbp
  415b8e:	53                   	push   %rbx
  415b8f:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  415b93:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  415b97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415b9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415b9f:	48 8b 0a             	mov    (%rdx),%rcx
  415ba2:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
  415ba6:	48 89 08             	mov    %rcx,(%rax)
  415ba9:	48 89 58 08          	mov    %rbx,0x8(%rax)
  415bad:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  415bb1:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
  415bb5:	48 89 48 10          	mov    %rcx,0x10(%rax)
  415bb9:	48 89 58 18          	mov    %rbx,0x18(%rax)
  415bbd:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  415bc1:	48 8b 5a 28          	mov    0x28(%rdx),%rbx
  415bc5:	48 89 48 20          	mov    %rcx,0x20(%rax)
  415bc9:	48 89 58 28          	mov    %rbx,0x28(%rax)
  415bcd:	48 8b 52 30          	mov    0x30(%rdx),%rdx
  415bd1:	48 89 50 30          	mov    %rdx,0x30(%rax)
  415bd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415bd9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  415bdd:	c9                   	leave
  415bde:	c3                   	ret
  415bdf:	90                   	nop

0000000000415be0 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator3endEv>:

	// Iterator to the start of the current cluster.
	constexpr auto base() const { return _M_base.base(); }

	// The end of the underlying view (not the end of the current cluster!)
	constexpr auto end() const { return _M_base.end(); }
  415be0:	55                   	push   %rbp
  415be1:	48 89 e5             	mov    %rsp,%rbp
  415be4:	48 83 ec 10          	sub    $0x10,%rsp
  415be8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415bec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415bf0:	48 83 c0 10          	add    $0x10,%rax
  415bf4:	48 89 c7             	mov    %rax,%rdi
  415bf7:	e8 5e 17 00 00       	call   41735a <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  415bfc:	c9                   	leave
  415bfd:	c3                   	ret

0000000000415bfe <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>:
      constexpr auto end() const { return _M_begin.end(); }
  415bfe:	55                   	push   %rbp
  415bff:	48 89 e5             	mov    %rsp,%rbp
  415c02:	48 83 ec 10          	sub    $0x10,%rsp
  415c06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415c0e:	48 89 c7             	mov    %rax,%rdi
  415c11:	e8 ca ff ff ff       	call   415be0 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator3endEv>
  415c16:	c9                   	leave
  415c17:	c3                   	ret

0000000000415c18 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>:

	// Field width of the first code point in the cluster.
	constexpr int
	width() const noexcept
  415c18:	55                   	push   %rbp
  415c19:	48 89 e5             	mov    %rsp,%rbp
  415c1c:	48 83 ec 10          	sub    $0x10,%rsp
  415c20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __field_width(_M_c); }
  415c24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415c28:	8b 00                	mov    (%rax),%eax
  415c2a:	89 c7                	mov    %eax,%edi
  415c2c:	e8 74 f0 fe ff       	call   404ca5 <_ZNSt9__unicode9__v15_1_013__field_widthEDi>
  415c31:	c9                   	leave
  415c32:	c3                   	ret
  415c33:	90                   	nop

0000000000415c34 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator4baseEv>:
	constexpr auto base() const { return _M_base.base(); }
  415c34:	55                   	push   %rbp
  415c35:	48 89 e5             	mov    %rsp,%rbp
  415c38:	48 83 ec 10          	sub    $0x10,%rsp
  415c3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415c40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415c44:	48 83 c0 10          	add    $0x10,%rax
  415c48:	48 89 c7             	mov    %rax,%rdi
  415c4b:	e8 92 44 ff ff       	call   40a0e2 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>
  415c50:	c9                   	leave
  415c51:	c3                   	ret

0000000000415c52 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm>:

  // Truncate a string to at most `__max` field width units, and return the
  // resulting field width.
  template<typename _CharT>
    constexpr size_t
    __truncate(basic_string_view<_CharT>& __s, size_t __max)
  415c52:	55                   	push   %rbp
  415c53:	48 89 e5             	mov    %rsp,%rbp
  415c56:	53                   	push   %rbx
  415c57:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  415c5e:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  415c65:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
    {
      if (__s.empty()) [[unlikely]]
  415c6c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  415c73:	48 89 c7             	mov    %rax,%rdi
  415c76:	e8 2d fe ff ff       	call   415aa8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>
  415c7b:	84 c0                	test   %al,%al
  415c7d:	74 0a                	je     415c89 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x37>
	return 0;
  415c7f:	b8 00 00 00 00       	mov    $0x0,%eax
  415c84:	e9 4f 01 00 00       	jmp    415dd8 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>

      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
  415c89:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  415c90:	48 8b 08             	mov    (%rax),%rcx
  415c93:	48 8b 50 08          	mov    0x8(%rax),%rdx
  415c97:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  415c9b:	48 89 ce             	mov    %rcx,%rsi
  415c9e:	48 89 c7             	mov    %rax,%rdi
  415ca1:	e8 0e 16 00 00       	call   4172b4 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>
      auto __it = __gc.begin();
  415ca6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415cad:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  415cb1:	48 89 d6             	mov    %rdx,%rsi
  415cb4:	48 89 c7             	mov    %rax,%rdi
  415cb7:	e8 ce fe ff ff       	call   415b8a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
      const auto __end = __gc.end();
  415cbc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  415cc0:	48 89 c7             	mov    %rax,%rdi
  415cc3:	e8 36 ff ff ff       	call   415bfe <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>
  415cc8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
      size_t __n = __it.width();
  415ccf:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415cd6:	48 89 c7             	mov    %rax,%rdi
  415cd9:	e8 3a ff ff ff       	call   415c18 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  415cde:	48 98                	cltq
  415ce0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__n > __max)
  415ce4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415ce8:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
  415cef:	0f 83 b0 00 00 00    	jae    415da5 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x153>
	{
	  __s = {};
  415cf5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415cf9:	48 89 c7             	mov    %rax,%rdi
  415cfc:	e8 cf 7f ff ff       	call   40dcd0 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1Ev>
  415d01:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  415d08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415d0c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  415d10:	48 89 01             	mov    %rax,(%rcx)
  415d13:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	  return 0;
  415d17:	b8 00 00 00 00       	mov    $0x0,%eax
  415d1c:	e9 b7 00 00 00       	jmp    415dd8 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>
	}
      while (++__it != __end)
	{
	  size_t __n2 = __n + __it.width();
  415d21:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415d28:	48 89 c7             	mov    %rax,%rdi
  415d2b:	e8 e8 fe ff ff       	call   415c18 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  415d30:	48 63 d0             	movslq %eax,%rdx
  415d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415d37:	48 01 d0             	add    %rdx,%rax
  415d3a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__n2 > __max)
  415d3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415d42:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
  415d49:	73 52                	jae    415d9d <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x14b>
	    {
	      __s = basic_string_view<_CharT>(__s.begin(), __it.base());
  415d4b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415d52:	48 89 c7             	mov    %rax,%rdi
  415d55:	e8 da fe ff ff       	call   415c34 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator4baseEv>
  415d5a:	48 89 c3             	mov    %rax,%rbx
  415d5d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  415d64:	48 89 c7             	mov    %rax,%rdi
  415d67:	e8 60 fb fe ff       	call   4058cc <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
  415d6c:	48 89 c1             	mov    %rax,%rcx
  415d6f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  415d73:	48 89 da             	mov    %rbx,%rdx
  415d76:	48 89 ce             	mov    %rcx,%rsi
  415d79:	48 89 c7             	mov    %rax,%rdi
  415d7c:	e8 63 00 ff ff       	call   405de4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
  415d81:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  415d88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  415d8c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  415d90:	48 89 01             	mov    %rax,(%rcx)
  415d93:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	      return __n;
  415d97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415d9b:	eb 3b                	jmp    415dd8 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>
	    }
	  __n = __n2;
  415d9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415da1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      while (++__it != __end)
  415da5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415dac:	48 89 c7             	mov    %rax,%rdi
  415daf:	e8 b8 15 00 00       	call   41736c <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>
  415db4:	48 89 c2             	mov    %rax,%rdx
  415db7:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  415dbe:	48 89 c6             	mov    %rax,%rsi
  415dc1:	48 89 d7             	mov    %rdx,%rdi
  415dc4:	e8 a1 17 00 00       	call   41756a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>
  415dc9:	83 f0 01             	xor    $0x1,%eax
  415dcc:	84 c0                	test   %al,%al
  415dce:	0f 85 4d ff ff ff    	jne    415d21 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0xcf>
	}
      return __n;
  415dd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  415dd8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  415ddc:	c9                   	leave
  415ddd:	c3                   	ret

0000000000415dde <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE>:
    __field_width(basic_string_view<_CharT> __s)
  415dde:	55                   	push   %rbp
  415ddf:	48 89 e5             	mov    %rsp,%rbp
  415de2:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  415de9:	48 89 f8             	mov    %rdi,%rax
  415dec:	48 89 f1             	mov    %rsi,%rcx
  415def:	48 89 c0             	mov    %rax,%rax
  415df2:	ba 00 00 00 00       	mov    $0x0,%edx
  415df7:	48 89 ca             	mov    %rcx,%rdx
  415dfa:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  415e01:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
      if (__s.empty()) [[unlikely]]
  415e08:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  415e0f:	48 89 c7             	mov    %rax,%rdi
  415e12:	e8 91 fc ff ff       	call   415aa8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>
  415e17:	84 c0                	test   %al,%al
  415e19:	74 0a                	je     415e25 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0x47>
	return 0;
  415e1b:	b8 00 00 00 00       	mov    $0x0,%eax
  415e20:	e9 95 00 00 00       	jmp    415eba <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0xdc>
      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
  415e25:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  415e2c:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  415e33:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415e37:	48 89 ce             	mov    %rcx,%rsi
  415e3a:	48 89 c7             	mov    %rax,%rdi
  415e3d:	e8 72 14 00 00       	call   4172b4 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>
      auto __it = __gc.begin();
  415e42:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  415e46:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  415e4a:	48 89 d6             	mov    %rdx,%rsi
  415e4d:	48 89 c7             	mov    %rax,%rdi
  415e50:	e8 35 fd ff ff       	call   415b8a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
      const auto __end = __gc.end();
  415e55:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415e59:	48 89 c7             	mov    %rax,%rdi
  415e5c:	e8 9d fd ff ff       	call   415bfe <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>
  415e61:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      size_t __n = __it.width();
  415e68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  415e6c:	48 89 c7             	mov    %rax,%rdi
  415e6f:	e8 a4 fd ff ff       	call   415c18 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  415e74:	48 98                	cltq
  415e76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (++__it != __end)
  415e7a:	eb 12                	jmp    415e8e <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0xb0>
	__n += __it.width();
  415e7c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  415e80:	48 89 c7             	mov    %rax,%rdi
  415e83:	e8 90 fd ff ff       	call   415c18 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  415e88:	48 98                	cltq
  415e8a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
      while (++__it != __end)
  415e8e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  415e92:	48 89 c7             	mov    %rax,%rdi
  415e95:	e8 d2 14 00 00       	call   41736c <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>
  415e9a:	48 89 c2             	mov    %rax,%rdx
  415e9d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  415ea4:	48 89 c6             	mov    %rax,%rsi
  415ea7:	48 89 d7             	mov    %rdx,%rdi
  415eaa:	e8 bb 16 00 00       	call   41756a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>
  415eaf:	83 f0 01             	xor    $0x1,%eax
  415eb2:	84 c0                	test   %al,%al
  415eb4:	75 c6                	jne    415e7c <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0x9e>
      return __n;
  415eb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  415eba:	c9                   	leave
  415ebb:	c3                   	ret

0000000000415ebc <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_>:
	_S_to_character(_Int __i)
  415ebc:	55                   	push   %rbp
  415ebd:	48 89 e5             	mov    %rsp,%rbp
  415ec0:	48 83 ec 10          	sub    $0x10,%rsp
  415ec4:	48 89 f8             	mov    %rdi,%rax
  415ec7:	48 89 f1             	mov    %rsi,%rcx
  415eca:	48 89 c0             	mov    %rax,%rax
  415ecd:	ba 00 00 00 00       	mov    $0x0,%edx
  415ed2:	48 89 ca             	mov    %rcx,%rdx
  415ed5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  415ed9:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  415edd:	ba 7f 00 00 00       	mov    $0x7f,%edx
  415ee2:	b8 00 00 00 00       	mov    $0x0,%eax
  415ee7:	48 3b 55 f0          	cmp    -0x10(%rbp),%rdx
  415eeb:	48 1b 45 f8          	sbb    -0x8(%rbp),%rax
  415eef:	7c 06                	jl     415ef7 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_+0x3b>
	    return static_cast<_CharT>(__i);
  415ef1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415ef5:	eb 0a                	jmp    415f01 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_+0x45>
	  __throw_format_error("format error: integer not representable as "
  415ef7:	bf e8 a3 41 00       	mov    $0x41a3e8,%edi
  415efc:	e8 28 f1 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	}
  415f01:	c9                   	leave
  415f02:	c3                   	ret

0000000000415f03 <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  415f03:	55                   	push   %rbp
  415f04:	48 89 e5             	mov    %rsp,%rbp
  415f07:	48 83 ec 30          	sub    $0x30,%rsp
  415f0b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415f0f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415f13:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  415f17:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  415f1b:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  415f1f:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  415f22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415f26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415f2a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  415f2e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  415f32:	41 89 c8             	mov    %ecx,%r8d
  415f35:	48 89 d1             	mov    %rdx,%rcx
  415f38:	48 89 c2             	mov    %rax,%rdx
  415f3b:	e8 ac 03 00 00       	call   4162ec <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i>
  415f40:	c9                   	leave
  415f41:	c3                   	ret

0000000000415f42 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_>:
	_S_to_character(_Int __i)
  415f42:	55                   	push   %rbp
  415f43:	48 89 e5             	mov    %rsp,%rbp
  415f46:	48 83 ec 10          	sub    $0x10,%rsp
  415f4a:	48 89 f8             	mov    %rdi,%rax
  415f4d:	48 89 f1             	mov    %rsi,%rcx
  415f50:	48 89 c0             	mov    %rax,%rax
  415f53:	ba 00 00 00 00       	mov    $0x0,%edx
  415f58:	48 89 ca             	mov    %rcx,%rdx
  415f5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  415f5f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  415f63:	ba 7f 00 00 00       	mov    $0x7f,%edx
  415f68:	b8 00 00 00 00       	mov    $0x0,%eax
  415f6d:	48 3b 55 f0          	cmp    -0x10(%rbp),%rdx
  415f71:	48 1b 45 f8          	sbb    -0x8(%rbp),%rax
  415f75:	72 06                	jb     415f7d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_+0x3b>
	    return static_cast<_CharT>(__i);
  415f77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415f7b:	eb 0a                	jmp    415f87 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_+0x45>
	  __throw_format_error("format error: integer not representable as "
  415f7d:	bf e8 a3 41 00       	mov    $0x41a3e8,%edi
  415f82:	e8 a2 f0 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>
	}
  415f87:	c9                   	leave
  415f88:	c3                   	ret

0000000000415f89 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
  415f89:	55                   	push   %rbp
  415f8a:	48 89 e5             	mov    %rsp,%rbp
  415f8d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  415f91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415f95:	5d                   	pop    %rbp
  415f96:	c3                   	ret

0000000000415f97 <_ZNSt6ranges14__copy_or_moveILb0EN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES6_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESG_EESE_T1_SF_>:
    __copy_or_move(_Iter __first, _Sent __last, _Out __result)
  415f97:	55                   	push   %rbp
  415f98:	48 89 e5             	mov    %rsp,%rbp
  415f9b:	41 54                	push   %r12
  415f9d:	53                   	push   %rbx
  415f9e:	48 83 ec 40          	sub    $0x40,%rsp
  415fa2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  415fa6:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  415faa:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
					      std::move(__result));
  415fae:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  415fb2:	48 89 c7             	mov    %rax,%rdi
  415fb5:	e8 b1 2d ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  415fba:	49 89 c4             	mov    %rax,%r12
	    = ranges::__copy_or_move<_IsMove>(__first.base(), __last.base(),
  415fbd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415fc1:	48 89 c7             	mov    %rax,%rdi
  415fc4:	e8 35 56 ff ff       	call   40b5fe <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  415fc9:	48 8b 18             	mov    (%rax),%rbx
  415fcc:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  415fd0:	48 89 c7             	mov    %rax,%rdi
  415fd3:	e8 26 56 ff ff       	call   40b5fe <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  415fd8:	48 8b 00             	mov    (%rax),%rax
  415fdb:	49 8b 14 24          	mov    (%r12),%rdx
  415fdf:	48 89 de             	mov    %rbx,%rsi
  415fe2:	48 89 c7             	mov    %rax,%rdi
  415fe5:	e8 0c 17 00 00       	call   4176f6 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_>
  415fea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  415fee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  return {decltype(__first){__in}, std::move(__out)};
  415ff2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  415ff6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  415ffa:	48 89 d6             	mov    %rdx,%rsi
  415ffd:	48 89 c7             	mov    %rax,%rdi
  416000:	e8 9f 55 ff ff       	call   40b5a4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  416005:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  416009:	48 83 c0 08          	add    $0x8,%rax
  41600d:	48 89 c7             	mov    %rax,%rdi
  416010:	e8 56 2d ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416015:	48 8b 00             	mov    (%rax),%rax
  416018:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  41601c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416020:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  416024:	48 83 c4 40          	add    $0x40,%rsp
  416028:	5b                   	pop    %rbx
  416029:	41 5c                	pop    %r12
  41602b:	5d                   	pop    %rbp
  41602c:	c3                   	ret

000000000041602d <_ZSt4moveIRZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmEUlT_T0_E_EONSt16remove_referenceIS9_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
  41602d:	55                   	push   %rbp
  41602e:	48 89 e5             	mov    %rsp,%rbp
  416031:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  416035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416039:	5d                   	pop    %rbp
  41603a:	c3                   	ret

000000000041603b <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
  41603b:	55                   	push   %rbp
  41603c:	48 89 e5             	mov    %rsp,%rbp
  41603f:	53                   	push   %rbx
  416040:	48 83 ec 18          	sub    $0x18,%rsp
  416044:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  416048:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const _CharT* __rhs)
    {
      return __lhs.size() == _Traits::length(__rhs)
  41604c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416050:	48 89 c7             	mov    %rax,%rdi
  416053:	e8 c8 eb fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416058:	48 89 c3             	mov    %rax,%rbx
  41605b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41605f:	48 89 c7             	mov    %rax,%rdi
  416062:	e8 bc e6 fe ff       	call   404723 <_ZNSt11char_traitsIcE6lengthEPKc>
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
  416067:	48 39 c3             	cmp    %rax,%rbx
  41606a:	75 3b                	jne    4160a7 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x6c>
  41606c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416070:	48 89 c7             	mov    %rax,%rdi
  416073:	e8 a8 eb fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416078:	48 89 c3             	mov    %rax,%rbx
  41607b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41607f:	48 89 c7             	mov    %rax,%rdi
  416082:	e8 ad 2a ff ff       	call   408b34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  416087:	48 89 c1             	mov    %rax,%rcx
  41608a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41608e:	48 89 da             	mov    %rbx,%rdx
  416091:	48 89 c6             	mov    %rax,%rsi
  416094:	48 89 cf             	mov    %rcx,%rdi
  416097:	e8 c7 e5 fe ff       	call   404663 <_ZNSt11char_traitsIcE7compareEPKcS2_m>
  41609c:	85 c0                	test   %eax,%eax
  41609e:	75 07                	jne    4160a7 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x6c>
  4160a0:	b8 01 00 00 00       	mov    $0x1,%eax
  4160a5:	eb 05                	jmp    4160ac <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x71>
  4160a7:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  4160ac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4160b0:	c9                   	leave
  4160b1:	c3                   	ret

00000000004160b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
	assign(const _Tp& __svt)
  4160b2:	55                   	push   %rbp
  4160b3:	48 89 e5             	mov    %rsp,%rbp
  4160b6:	53                   	push   %rbx
  4160b7:	48 83 ec 28          	sub    $0x28,%rsp
  4160bb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4160bf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  __sv_type __sv = __svt;
  4160c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4160c7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4160cb:	48 8b 00             	mov    (%rax),%rax
  4160ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4160d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  return this->assign(__sv.data(), __sv.size());
  4160d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4160da:	48 89 c7             	mov    %rax,%rdi
  4160dd:	e8 18 f8 fe ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4160e2:	48 89 c3             	mov    %rax,%rbx
  4160e5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4160e9:	48 89 c7             	mov    %rax,%rdi
  4160ec:	e8 f7 07 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  4160f1:	48 89 c1             	mov    %rax,%rcx
  4160f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4160f8:	48 89 da             	mov    %rbx,%rdx
  4160fb:	48 89 ce             	mov    %rcx,%rsi
  4160fe:	48 89 c7             	mov    %rax,%rdi
  416101:	e8 10 18 00 00       	call   417916 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm>
	}
  416106:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41610a:	c9                   	leave
  41610b:	c3                   	ret

000000000041610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
      push_back(_CharT __c)
  41610c:	55                   	push   %rbp
  41610d:	48 89 e5             	mov    %rsp,%rbp
  416110:	53                   	push   %rbx
  416111:	48 83 ec 28          	sub    $0x28,%rsp
  416115:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  416119:	89 f0                	mov    %esi,%eax
  41611b:	88 45 d4             	mov    %al,-0x2c(%rbp)
	const size_type __size = this->size();
  41611e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416122:	48 89 c7             	mov    %rax,%rdi
  416125:	e8 f6 ea fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41612a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__size + 1 > this->capacity())
  41612e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416132:	48 8d 58 01          	lea    0x1(%rax),%rbx
  416136:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41613a:	48 89 c7             	mov    %rax,%rdi
  41613d:	e8 60 42 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  416142:	48 39 d8             	cmp    %rbx,%rax
  416145:	0f 92 c0             	setb   %al
  416148:	84 c0                	test   %al,%al
  41614a:	74 20                	je     41616c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x60>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
  41614c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  416150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416154:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  41615a:	b9 00 00 00 00       	mov    $0x0,%ecx
  41615f:	ba 00 00 00 00       	mov    $0x0,%edx
  416164:	48 89 c7             	mov    %rax,%rdi
  416167:	e8 ae 5e ff ff       	call   40c01a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
	traits_type::assign(this->_M_data()[__size], __c);
  41616c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416170:	48 89 c7             	mov    %rax,%rdi
  416173:	e8 ac 07 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416178:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41617c:	48 01 c2             	add    %rax,%rdx
  41617f:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
  416183:	48 89 c6             	mov    %rax,%rsi
  416186:	48 89 d7             	mov    %rdx,%rdi
  416189:	e8 53 e4 fe ff       	call   4045e1 <_ZNSt11char_traitsIcE6assignERcRKc>
	this->_M_set_length(__size + 1);
  41618e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416192:	48 8d 50 01          	lea    0x1(%rax),%rdx
  416196:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41619a:	48 89 d6             	mov    %rdx,%rsi
  41619d:	48 89 c7             	mov    %rax,%rdi
  4161a0:	e8 91 07 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  4161a5:	90                   	nop
  4161a6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4161aa:	c9                   	leave
  4161ab:	c3                   	ret

00000000004161ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>:
    basic_string<_CharT, _Traits, _Alloc>::
  4161ac:	55                   	push   %rbp
  4161ad:	48 89 e5             	mov    %rsp,%rbp
  4161b0:	53                   	push   %rbx
  4161b1:	48 83 ec 58          	sub    $0x58,%rsp
  4161b5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4161b9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4161bd:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4161c1:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  4161c5:	44 89 c0             	mov    %r8d,%eax
  4161c8:	88 45 ac             	mov    %al,-0x54(%rbp)
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
  4161cb:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  4161cf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4161d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4161d7:	b9 1f a4 41 00       	mov    $0x41a41f,%ecx
  4161dc:	48 89 c7             	mov    %rax,%rdi
  4161df:	e8 28 54 ff ff       	call   40b60c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
      const size_type __old_size = this->size();
  4161e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4161e8:	48 89 c7             	mov    %rax,%rdi
  4161eb:	e8 30 ea fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4161f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      const size_type __new_size = __old_size + __n2 - __n1;
  4161f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4161f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4161fc:	48 01 d0             	add    %rdx,%rax
  4161ff:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  416203:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__new_size <= this->capacity())
  416207:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41620b:	48 89 c7             	mov    %rax,%rdi
  41620e:	e8 8f 41 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  416213:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  416217:	0f 93 c0             	setae  %al
  41621a:	84 c0                	test   %al,%al
  41621c:	74 61                	je     41627f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xd3>
	  pointer __p = this->_M_data() + __pos1;
  41621e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416222:	48 89 c7             	mov    %rax,%rdi
  416225:	e8 fa 06 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41622a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41622e:	48 01 d0             	add    %rdx,%rax
  416231:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  const size_type __how_much = __old_size - __pos1 - __n1;
  416235:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416239:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  41623d:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  416241:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  if (__how_much && __n1 != __n2)
  416245:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  41624a:	74 53                	je     41629f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
  41624c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416250:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  416254:	74 49                	je     41629f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
  416256:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41625a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41625e:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  416262:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416266:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41626a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  41626e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416272:	48 89 c2             	mov    %rax,%rdx
  416275:	48 89 cf             	mov    %rcx,%rdi
  416278:	e8 52 5d ff ff       	call   40bfcf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
  41627d:	eb 20                	jmp    41629f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
	this->_M_mutate(__pos1, __n1, 0, __n2);
  41627f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  416283:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  416287:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  41628b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41628f:	49 89 c8             	mov    %rcx,%r8
  416292:	b9 00 00 00 00       	mov    $0x0,%ecx
  416297:	48 89 c7             	mov    %rax,%rdi
  41629a:	e8 7b 5d ff ff       	call   40c01a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
      if (__n2)
  41629f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  4162a4:	74 29                	je     4162cf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0x123>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
  4162a6:	0f be 5d ac          	movsbl -0x54(%rbp),%ebx
  4162aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4162ae:	48 89 c7             	mov    %rax,%rdi
  4162b1:	e8 6e 06 ff ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4162b6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4162ba:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  4162be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4162c2:	89 da                	mov    %ebx,%edx
  4162c4:	48 89 c6             	mov    %rax,%rsi
  4162c7:	48 89 cf             	mov    %rcx,%rdi
  4162ca:	e8 8e 16 00 00       	call   41795d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc>
      this->_M_set_length(__new_size);
  4162cf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4162d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4162d7:	48 89 d6             	mov    %rdx,%rsi
  4162da:	48 89 c7             	mov    %rax,%rdi
  4162dd:	e8 54 06 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  4162e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    }
  4162e6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4162ea:	c9                   	leave
  4162eb:	c3                   	ret

00000000004162ec <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  4162ec:	55                   	push   %rbp
  4162ed:	48 89 e5             	mov    %rsp,%rbp
  4162f0:	48 83 ec 40          	sub    $0x40,%rsp
  4162f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4162f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4162fc:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  416300:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  416304:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
  416308:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  41630d:	84 c0                	test   %al,%al
  41630f:	74 30                	je     416341 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x55>
  416311:	83 7d cc 01          	cmpl   $0x1,-0x34(%rbp)
  416315:	0f 9e c0             	setle  %al
  416318:	0f b6 c0             	movzbl %al,%eax
  41631b:	48 85 c0             	test   %rax,%rax
  41631e:	75 0f                	jne    41632f <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x43>
  416320:	83 7d cc 24          	cmpl   $0x24,-0x34(%rbp)
  416324:	0f 9f c0             	setg   %al
  416327:	0f b6 c0             	movzbl %al,%eax
  41632a:	48 85 c0             	test   %rax,%rax
  41632d:	74 07                	je     416336 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x4a>
  41632f:	b8 01 00 00 00       	mov    $0x1,%eax
  416334:	eb 05                	jmp    41633b <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x4f>
  416336:	b8 00 00 00 00       	mov    $0x0,%eax
  41633b:	0f b6 c0             	movzbl %al,%eax
  41633e:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  416341:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416345:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416349:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  41634d:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  416351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416355:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  416359:	75 20                	jne    41637b <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x8f>
	return { __last, errc::value_too_large };
  41635b:	4c 8b 55 e0          	mov    -0x20(%rbp),%r10
  41635f:	4c 89 da             	mov    %r11,%rdx
  416362:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  416369:	ff ff ff
  41636c:	48 21 d0             	and    %rdx,%rax
  41636f:	48 83 c8 4b          	or     $0x4b,%rax
  416373:	49 89 c3             	mov    %rax,%r11
  416376:	e9 1c 01 00 00       	jmp    416497 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
      if (__value == 0)
  41637b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  41637f:	48 0b 45 d8          	or     -0x28(%rbp),%rax
  416383:	75 2a                	jne    4163af <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0xc3>
	  *__first = '0';
  416385:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416389:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  41638c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416390:	48 83 c0 01          	add    $0x1,%rax
  416394:	49 89 c2             	mov    %rax,%r10
  416397:	4c 89 da             	mov    %r11,%rdx
  41639a:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  4163a1:	ff ff ff
  4163a4:	48 21 d0             	and    %rdx,%rax
  4163a7:	49 89 c3             	mov    %rax,%r11
  4163aa:	e9 e8 00 00 00       	jmp    416497 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
      switch (__base)
  4163af:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  4163b3:	74 2b                	je     4163e0 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0xf4>
  4163b5:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  4163b9:	0f 8f b0 00 00 00    	jg     41646f <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
  4163bf:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
  4163c3:	74 41                	je     416406 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x11a>
  4163c5:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
  4163c9:	0f 8f a0 00 00 00    	jg     41646f <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
  4163cf:	83 7d cc 02          	cmpl   $0x2,-0x34(%rbp)
  4163d3:	74 77                	je     41644c <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x160>
  4163d5:	83 7d cc 08          	cmpl   $0x8,-0x34(%rbp)
  4163d9:	74 4e                	je     416429 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x13d>
  4163db:	e9 8f 00 00 00       	jmp    41646f <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  4163e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4163e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4163e8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4163ec:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4163f0:	48 89 d1             	mov    %rdx,%rcx
  4163f3:	48 89 c2             	mov    %rax,%rdx
  4163f6:	e8 e6 15 00 00       	call   4179e1 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_>
  4163fb:	49 89 c2             	mov    %rax,%r10
  4163fe:	49 89 d3             	mov    %rdx,%r11
  416401:	e9 91 00 00 00       	jmp    416497 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  416406:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41640a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41640e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416412:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416416:	48 89 d1             	mov    %rdx,%rcx
  416419:	48 89 c2             	mov    %rax,%rdx
  41641c:	e8 b1 18 00 00       	call   417cd2 <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_>
  416421:	49 89 c2             	mov    %rax,%r10
  416424:	49 89 d3             	mov    %rdx,%r11
  416427:	eb 6e                	jmp    416497 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  416429:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41642d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416431:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416435:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416439:	48 89 d1             	mov    %rdx,%rcx
  41643c:	48 89 c2             	mov    %rax,%rdx
  41643f:	e8 2f 19 00 00       	call   417d73 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_>
  416444:	49 89 c2             	mov    %rax,%r10
  416447:	49 89 d3             	mov    %rdx,%r11
  41644a:	eb 4b                	jmp    416497 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  41644c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416450:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416454:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  416458:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  41645c:	48 89 d1             	mov    %rdx,%rcx
  41645f:	48 89 c2             	mov    %rax,%rdx
  416462:	e8 db 1a 00 00       	call   417f42 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_>
  416467:	49 89 c2             	mov    %rax,%r10
  41646a:	49 89 d3             	mov    %rdx,%r11
  41646d:	eb 28                	jmp    416497 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  41646f:	8b 4d cc             	mov    -0x34(%rbp),%ecx
  416472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416476:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41647a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41647e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  416482:	41 89 c8             	mov    %ecx,%r8d
  416485:	48 89 d1             	mov    %rdx,%rcx
  416488:	48 89 c2             	mov    %rax,%rdx
  41648b:	e8 85 1b 00 00       	call   418015 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i>
  416490:	49 89 c2             	mov    %rax,%r10
  416493:	49 89 d3             	mov    %rdx,%r11
  416496:	90                   	nop
    }
  416497:	4c 89 d0             	mov    %r10,%rax
  41649a:	4c 89 da             	mov    %r11,%rdx
  41649d:	c9                   	leave
  41649e:	c3                   	ret
  41649f:	90                   	nop

00000000004164a0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>:
      copy(_CharT* __str, size_type __n, size_type __pos = 0) const
  4164a0:	55                   	push   %rbp
  4164a1:	48 89 e5             	mov    %rsp,%rbp
  4164a4:	48 83 ec 30          	sub    $0x30,%rsp
  4164a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4164ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4164b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4164b4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	__pos = std::__sv_check(size(), __pos, "basic_string_view::copy");
  4164b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4164bc:	48 89 c7             	mov    %rax,%rdi
  4164bf:	e8 36 f4 fe ff       	call   4058fa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4164c4:	48 89 c1             	mov    %rax,%rcx
  4164c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4164cb:	ba 3c a4 41 00       	mov    $0x41a43c,%edx
  4164d0:	48 89 c6             	mov    %rax,%rsi
  4164d3:	48 89 cf             	mov    %rcx,%rdi
  4164d6:	e8 fa e3 fe ff       	call   4048d5 <_ZSt10__sv_checkmmPKc>
  4164db:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
  4164df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4164e3:	48 8b 00             	mov    (%rax),%rax
  4164e6:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  4164ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4164ee:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  4164f2:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4164f6:	48 89 d6             	mov    %rdx,%rsi
  4164f9:	48 89 c7             	mov    %rax,%rdi
  4164fc:	e8 cd 36 ff ff       	call   409bce <_ZSt3minImERKT_S2_S2_>
  416501:	48 8b 00             	mov    (%rax),%rax
  416504:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	traits_type::copy(__str, data() + __pos, __rlen);
  416508:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41650c:	48 89 c7             	mov    %rax,%rdi
  41650f:	e8 d4 03 ff ff       	call   4068e8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  416514:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  416518:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  41651c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416520:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416524:	48 89 ce             	mov    %rcx,%rsi
  416527:	48 89 c7             	mov    %rax,%rdi
  41652a:	e8 e6 e2 fe ff       	call   404815 <_ZNSt11char_traitsIcE4copyEPcPKcm>
	return __rlen;
  41652f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  416533:	c9                   	leave
  416534:	c3                   	ret
  416535:	90                   	nop

0000000000416536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>:
      assign(const basic_string& __str)
  416536:	55                   	push   %rbp
  416537:	48 89 e5             	mov    %rsp,%rbp
  41653a:	53                   	push   %rbx
  41653b:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  416542:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  416549:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    { return _Base_type::propagate_on_container_copy_assignment::value; }
  416550:	b8 00 00 00 00       	mov    $0x0,%eax
	if (_Alloc_traits::_S_propagate_on_copy_assign())
  416555:	84 c0                	test   %al,%al
  416557:	0f 84 03 02 00 00    	je     416760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x22a>
    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }
  41655d:	b8 01 00 00 00       	mov    $0x1,%eax
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  416562:	83 f0 01             	xor    $0x1,%eax
		&& _M_get_allocator() != __str._M_get_allocator())
  416565:	84 c0                	test   %al,%al
  416567:	74 52                	je     4165bb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  416569:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  416570:	48 89 c7             	mov    %rax,%rdi
  416573:	e8 e6 06 ff ff       	call   406c5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  416578:	83 f0 01             	xor    $0x1,%eax
  41657b:	84 c0                	test   %al,%al
  41657d:	74 3c                	je     4165bb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
		&& _M_get_allocator() != __str._M_get_allocator())
  41657f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  416586:	48 89 c7             	mov    %rax,%rdi
  416589:	e8 28 46 ff ff       	call   40abb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41658e:	48 89 c3             	mov    %rax,%rbx
  416591:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  416598:	48 89 c7             	mov    %rax,%rdi
  41659b:	e8 b0 06 ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4165a0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4165a4:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
#endif // C++20

      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
      bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }
  4165a8:	b8 01 00 00 00       	mov    $0x1,%eax
  4165ad:	83 f0 01             	xor    $0x1,%eax
  4165b0:	84 c0                	test   %al,%al
  4165b2:	74 07                	je     4165bb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
  4165b4:	b8 01 00 00 00       	mov    $0x1,%eax
  4165b9:	eb 05                	jmp    4165c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x8a>
  4165bb:	b8 00 00 00 00       	mov    $0x0,%eax
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  4165c0:	84 c0                	test   %al,%al
  4165c2:	0f 84 6e 01 00 00    	je     416736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x200>
		if (__str.size() <= _S_local_capacity)
  4165c8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4165cf:	48 89 c7             	mov    %rax,%rdi
  4165d2:	e8 49 e6 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4165d7:	48 83 f8 0f          	cmp    $0xf,%rax
  4165db:	0f 96 c0             	setbe  %al
  4165de:	84 c0                	test   %al,%al
  4165e0:	0f 84 9d 00 00 00    	je     416683 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x14d>
		    _M_destroy(_M_allocated_capacity);
  4165e6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4165ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4165f1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4165f8:	48 89 d6             	mov    %rdx,%rsi
  4165fb:	48 89 c7             	mov    %rax,%rdi
  4165fe:	e8 0b 3d ff ff       	call   40a30e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
  416603:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41660a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  41660e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416612:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (std::is_constant_evaluated())
  416616:	e8 20 df fe ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  41661b:	84 c0                	test   %al,%al
  41661d:	74 28                	je     416647 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x111>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  41661f:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  416626:	00
  416627:	eb 17                	jmp    416640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x10a>
	    _M_local_buf[__i] = _CharT();
  416629:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41662d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416631:	48 01 d0             	add    %rdx,%rax
  416634:	48 83 c0 10          	add    $0x10,%rax
  416638:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  41663b:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
  416640:	48 83 7d b8 0f       	cmpq   $0xf,-0x48(%rbp)
  416645:	76 e2                	jbe    416629 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0xf3>
      }
  416647:	90                   	nop
	return _M_local_data();
  416648:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41664c:	48 89 c7             	mov    %rax,%rdi
  41664f:	e8 c4 e2 fe ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  416654:	48 89 c2             	mov    %rax,%rdx
  416657:	90                   	nop
		    _M_data(_M_use_local_data());
  416658:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41665f:	48 89 d6             	mov    %rdx,%rsi
  416662:	48 89 c7             	mov    %rax,%rdi
  416665:	e8 94 24 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_set_length(0);
  41666a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  416671:	be 00 00 00 00       	mov    $0x0,%esi
  416676:	48 89 c7             	mov    %rax,%rdi
  416679:	e8 b8 02 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  41667e:	e9 b3 00 00 00       	jmp    416736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x200>
		    const auto __len = __str.size();
  416683:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  41668a:	48 89 c7             	mov    %rax,%rdi
  41668d:	e8 8e e5 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416692:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    auto __alloc = __str._M_get_allocator();
  416696:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  41669d:	48 89 c7             	mov    %rax,%rdi
  4166a0:	e8 11 45 ff ff       	call   40abb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4166a5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4166a9:	48 8d 45 8f          	lea    -0x71(%rbp),%rax
  4166ad:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  4166b1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4166b5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  4166b9:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  4166ba:	90                   	nop
		    auto __ptr = _S_allocate(__alloc, __len + 1);
  4166bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4166bf:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4166c3:	48 8d 45 8f          	lea    -0x71(%rbp),%rax
  4166c7:	48 89 d6             	mov    %rdx,%rsi
  4166ca:	48 89 c7             	mov    %rax,%rdi
  4166cd:	e8 1e 45 ff ff       	call   40abf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
  4166d2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    _M_destroy(_M_allocated_capacity);
  4166d6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4166dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4166e1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4166e8:	48 89 d6             	mov    %rdx,%rsi
  4166eb:	48 89 c7             	mov    %rax,%rdi
  4166ee:	e8 1b 3c ff ff       	call   40a30e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
		    _M_data(__ptr);
  4166f3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4166f7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4166fe:	48 89 d6             	mov    %rdx,%rsi
  416701:	48 89 c7             	mov    %rax,%rdi
  416704:	e8 f5 23 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_capacity(__len);
  416709:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41670d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  416714:	48 89 d6             	mov    %rdx,%rsi
  416717:	48 89 c7             	mov    %rax,%rdi
  41671a:	e8 f9 23 ff ff       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
		    _M_set_length(__len);
  41671f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416723:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41672a:	48 89 d6             	mov    %rdx,%rsi
  41672d:	48 89 c7             	mov    %rax,%rdi
  416730:	e8 01 02 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      ~allocator() _GLIBCXX_NOTHROW { }
  416735:	90                   	nop
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
  416736:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  41673d:	48 89 c7             	mov    %rax,%rdi
  416740:	e8 71 44 ff ff       	call   40abb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  416745:	48 89 c3             	mov    %rax,%rbx
  416748:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41674f:	48 89 c7             	mov    %rax,%rdi
  416752:	e8 f9 04 ff ff       	call   406c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  416757:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  41675b:	48 89 5d 90          	mov    %rbx,-0x70(%rbp)
    }
  41675f:	90                   	nop
	this->_M_assign(__str);
  416760:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  416767:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41676e:	48 89 d6             	mov    %rdx,%rsi
  416771:	48 89 c7             	mov    %rax,%rdi
  416774:	e8 87 1a 00 00       	call   418200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	return *this;
  416779:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  416780:	eb 09                	jmp    41678b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x255>
  416782:	90                   	nop
  416783:	48 89 c7             	mov    %rax,%rdi
  416786:	e8 e5 db fe ff       	call   404370 <_Unwind_Resume@plt>
      }
  41678b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41678f:	c9                   	leave
  416790:	c3                   	ret
  416791:	90                   	nop

0000000000416792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
  416792:	55                   	push   %rbp
  416793:	48 89 e5             	mov    %rsp,%rbp
  416796:	48 83 ec 10          	sub    $0x10,%rsp
  41679a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_set_length(0); }
  41679e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4167a2:	be 00 00 00 00       	mov    $0x0,%esi
  4167a7:	48 89 c7             	mov    %rax,%rdi
  4167aa:	e8 87 01 ff ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  4167af:	90                   	nop
  4167b0:	c9                   	leave
  4167b1:	c3                   	ret

00000000004167b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
      assign(const _CharT* __s)
  4167b2:	55                   	push   %rbp
  4167b3:	48 89 e5             	mov    %rsp,%rbp
  4167b6:	53                   	push   %rbx
  4167b7:	48 83 ec 18          	sub    $0x18,%rsp
  4167bb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4167bf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	return _M_replace(size_type(0), this->size(), __s,
  4167c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4167c7:	48 89 c7             	mov    %rax,%rdi
  4167ca:	e8 54 df fe ff       	call   404723 <_ZNSt11char_traitsIcE6lengthEPKc>
  4167cf:	48 89 c3             	mov    %rax,%rbx
  4167d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4167d6:	48 89 c7             	mov    %rax,%rdi
  4167d9:	e8 42 e4 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4167de:	48 89 c6             	mov    %rax,%rsi
  4167e1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4167e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4167e9:	49 89 d8             	mov    %rbx,%r8
  4167ec:	48 89 d1             	mov    %rdx,%rcx
  4167ef:	48 89 f2             	mov    %rsi,%rdx
  4167f2:	be 00 00 00 00       	mov    $0x0,%esi
  4167f7:	48 89 c7             	mov    %rax,%rdi
  4167fa:	e8 c3 49 ff ff       	call   40b1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
  4167ff:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416803:	c9                   	leave
  416804:	c3                   	ret

0000000000416805 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>:
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
  416805:	55                   	push   %rbp
  416806:	48 89 e5             	mov    %rsp,%rbp
  416809:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  41680d:	89 f0                	mov    %esi,%eax
  41680f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  416813:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  416817:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  41681b:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
  41681f:	88 45 d4             	mov    %al,-0x2c(%rbp)
		   const char* __gbeg, size_t __gsize,
		   const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
  416822:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  416829:	00
      size_t __ctr = 0;
  41682a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  416831:	00

      while (__last - __first > __gbeg[__idx]
  416832:	eb 33                	jmp    416867 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x62>
	     && static_cast<signed char>(__gbeg[__idx]) > 0
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
	{
	  __last -= __gbeg[__idx];
  416834:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  416838:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41683c:	48 01 d0             	add    %rdx,%rax
  41683f:	0f b6 00             	movzbl (%rax),%eax
  416842:	48 0f be c0          	movsbq %al,%rax
  416846:	48 f7 d8             	neg    %rax
  416849:	48 01 45 b0          	add    %rax,-0x50(%rbp)
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
  41684d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  416851:	48 83 e8 01          	sub    $0x1,%rax
  416855:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  416859:	73 07                	jae    416862 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x5d>
  41685b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  416860:	eb 05                	jmp    416867 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x62>
  416862:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      while (__last - __first > __gbeg[__idx]
  416867:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41686b:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  41686f:	48 89 c2             	mov    %rax,%rdx
  416872:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  416876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41687a:	48 01 c8             	add    %rcx,%rax
  41687d:	0f b6 00             	movzbl (%rax),%eax
  416880:	48 0f be c0          	movsbq %al,%rax
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
  416884:	48 39 c2             	cmp    %rax,%rdx
  416887:	7e 43                	jle    4168cc <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	     && static_cast<signed char>(__gbeg[__idx]) > 0
  416889:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41688d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416891:	48 01 d0             	add    %rdx,%rax
  416894:	0f b6 00             	movzbl (%rax),%eax
  416897:	84 c0                	test   %al,%al
  416899:	7e 31                	jle    4168cc <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
  41689b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41689f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4168a3:	48 01 d0             	add    %rdx,%rax
  4168a6:	0f b6 00             	movzbl (%rax),%eax
  4168a9:	3c 7f                	cmp    $0x7f,%al
  4168ab:	75 87                	jne    416834 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x2f>
	}

      while (__first != __last)
  4168ad:	eb 1d                	jmp    4168cc <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	*__s++ = *__first++;
  4168af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4168b3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4168b7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4168bb:	0f b6 10             	movzbl (%rax),%edx
  4168be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4168c2:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4168c6:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  4168ca:	88 10                	mov    %dl,(%rax)
      while (__first != __last)
  4168cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4168d0:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  4168d4:	75 d9                	jne    4168af <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xaa>

      while (__ctr--)
  4168d6:	eb 52                	jmp    41692a <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x125>
	{
	  *__s++ = __sep;
  4168d8:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  4168dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4168e0:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4168e4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  4168e8:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  4168ea:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4168ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4168f2:	48 01 d0             	add    %rdx,%rax
  4168f5:	0f b6 00             	movzbl (%rax),%eax
  4168f8:	88 45 ef             	mov    %al,-0x11(%rbp)
  4168fb:	eb 27                	jmp    416924 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x11f>
	    *__s++ = *__first++;
  4168fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416901:	48 8d 50 01          	lea    0x1(%rax),%rdx
  416905:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  416909:	0f b6 10             	movzbl (%rax),%edx
  41690c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416910:	48 8d 48 01          	lea    0x1(%rax),%rcx
  416914:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  416918:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  41691a:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  41691e:	83 e8 01             	sub    $0x1,%eax
  416921:	88 45 ef             	mov    %al,-0x11(%rbp)
  416924:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  416928:	7f d3                	jg     4168fd <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xf8>
      while (__ctr--)
  41692a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41692e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  416932:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  416936:	48 85 c0             	test   %rax,%rax
  416939:	0f 95 c0             	setne  %al
  41693c:	84 c0                	test   %al,%al
  41693e:	75 98                	jne    4168d8 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xd3>
	}

      while (__idx--)
  416940:	eb 52                	jmp    416994 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x18f>
	{
	  *__s++ = __sep;
  416942:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  416946:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41694a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  41694e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  416952:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  416954:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  416958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41695c:	48 01 d0             	add    %rdx,%rax
  41695f:	0f b6 00             	movzbl (%rax),%eax
  416962:	88 45 ee             	mov    %al,-0x12(%rbp)
  416965:	eb 27                	jmp    41698e <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x189>
	    *__s++ = *__first++;
  416967:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41696b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  41696f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  416973:	0f b6 10             	movzbl (%rax),%edx
  416976:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41697a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  41697e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  416982:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  416984:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  416988:	83 e8 01             	sub    $0x1,%eax
  41698b:	88 45 ee             	mov    %al,-0x12(%rbp)
  41698e:	80 7d ee 00          	cmpb   $0x0,-0x12(%rbp)
  416992:	7f d3                	jg     416967 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x162>
      while (__idx--)
  416994:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416998:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  41699c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  4169a0:	48 85 c0             	test   %rax,%rax
  4169a3:	0f 95 c0             	setne  %al
  4169a6:	84 c0                	test   %al,%al
  4169a8:	75 98                	jne    416942 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x13d>
	}

      return __s;
  4169aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
  4169ae:	5d                   	pop    %rbp
  4169af:	c3                   	ret

00000000004169b0 <_ZNSt8__format5_SpecIcE7_S_signEc>:
      _S_sign(_CharT __c) noexcept
  4169b0:	55                   	push   %rbp
  4169b1:	48 89 e5             	mov    %rsp,%rbp
  4169b4:	89 f8                	mov    %edi,%eax
  4169b6:	88 45 fc             	mov    %al,-0x4(%rbp)
	switch (__c)
  4169b9:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  4169bd:	83 f8 2d             	cmp    $0x2d,%eax
  4169c0:	74 16                	je     4169d8 <_ZNSt8__format5_SpecIcE7_S_signEc+0x28>
  4169c2:	83 f8 2d             	cmp    $0x2d,%eax
  4169c5:	7f 1f                	jg     4169e6 <_ZNSt8__format5_SpecIcE7_S_signEc+0x36>
  4169c7:	83 f8 20             	cmp    $0x20,%eax
  4169ca:	74 13                	je     4169df <_ZNSt8__format5_SpecIcE7_S_signEc+0x2f>
  4169cc:	83 f8 2b             	cmp    $0x2b,%eax
  4169cf:	75 15                	jne    4169e6 <_ZNSt8__format5_SpecIcE7_S_signEc+0x36>
	  case '+': return _Sign_plus;
  4169d1:	b8 01 00 00 00       	mov    $0x1,%eax
  4169d6:	eb 13                	jmp    4169eb <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  case '-': return _Sign_minus;
  4169d8:	b8 02 00 00 00       	mov    $0x2,%eax
  4169dd:	eb 0c                	jmp    4169eb <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  case ' ': return _Sign_space;
  4169df:	b8 03 00 00 00       	mov    $0x3,%eax
  4169e4:	eb 05                	jmp    4169eb <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  default:  return _Sign_default;
  4169e6:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  4169eb:	5d                   	pop    %rbp
  4169ec:	c3                   	ret
  4169ed:	90                   	nop

00000000004169ee <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  4169ee:	55                   	push   %rbp
  4169ef:	48 89 e5             	mov    %rsp,%rbp
  4169f2:	48 83 ec 30          	sub    $0x30,%rsp
  4169f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4169fa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4169fe:	89 d0                	mov    %edx,%eax
  416a00:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  416a03:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  416a07:	89 c0                	mov    %eax,%eax
  416a09:	48 8b 04 c5 20 d5 41 	mov    0x41d520(,%rax,8),%rax
  416a10:	00
  416a11:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  416a13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416a17:	48 89 c7             	mov    %rax,%rdi
  416a1a:	e8 74 0d 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416a1f:	48 89 c2             	mov    %rax,%rdx
  416a22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416a26:	48 89 c6             	mov    %rax,%rsi
  416a29:	48 89 d7             	mov    %rdx,%rdi
  416a2c:	e8 71 0d 00 00       	call   4177a2 <_ZNKSt8__format17_WidthPrecVisitorclISt9monostateEEmRT_>
  416a31:	e9 2b 02 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  416a36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416a3a:	48 89 c7             	mov    %rax,%rdi
  416a3d:	e8 51 0d 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416a42:	48 89 c2             	mov    %rax,%rdx
  416a45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416a49:	48 89 c6             	mov    %rax,%rsi
  416a4c:	48 89 d7             	mov    %rdx,%rdi
  416a4f:	e8 64 0d 00 00       	call   4177b8 <_ZNKSt8__format17_WidthPrecVisitorclIbEEmRT_>
  416a54:	e9 08 02 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  416a59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416a5d:	48 89 c7             	mov    %rax,%rdi
  416a60:	e8 2e 0d 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416a65:	48 89 c2             	mov    %rax,%rdx
  416a68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416a6c:	48 89 c6             	mov    %rax,%rsi
  416a6f:	48 89 d7             	mov    %rdx,%rdi
  416a72:	e8 85 18 00 00       	call   4182fc <_ZNKSt8__format17_WidthPrecVisitorclIcEEmRT_>
  416a77:	e9 e5 01 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  416a7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416a80:	48 89 c7             	mov    %rax,%rdi
  416a83:	e8 0b 0d 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416a88:	48 89 c2             	mov    %rax,%rdx
  416a8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416a8f:	48 89 c6             	mov    %rax,%rsi
  416a92:	48 89 d7             	mov    %rdx,%rdi
  416a95:	e8 38 0d 00 00       	call   4177d2 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_>
  416a9a:	e9 c2 01 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  416a9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416aa3:	48 89 c7             	mov    %rax,%rdi
  416aa6:	e8 e8 0c 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416aab:	48 89 c2             	mov    %rax,%rdx
  416aae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416ab2:	48 89 c6             	mov    %rax,%rsi
  416ab5:	48 89 d7             	mov    %rdx,%rdi
  416ab8:	e8 45 0d 00 00       	call   417802 <_ZNKSt8__format17_WidthPrecVisitorclIjEEmRT_>
  416abd:	e9 9f 01 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  416ac2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416ac6:	48 89 c7             	mov    %rax,%rdi
  416ac9:	e8 c5 0c 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416ace:	48 89 c2             	mov    %rax,%rdx
  416ad1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416ad5:	48 89 c6             	mov    %rax,%rsi
  416ad8:	48 89 d7             	mov    %rdx,%rdi
  416adb:	e8 38 0d 00 00       	call   417818 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_>
  416ae0:	e9 7c 01 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  416ae5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416ae9:	48 89 c7             	mov    %rax,%rdi
  416aec:	e8 a2 0c 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416af1:	48 89 c2             	mov    %rax,%rdx
  416af4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416af8:	48 89 c6             	mov    %rax,%rsi
  416afb:	48 89 d7             	mov    %rdx,%rdi
  416afe:	e8 47 0d 00 00       	call   41784a <_ZNKSt8__format17_WidthPrecVisitorclIyEEmRT_>
  416b03:	e9 59 01 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  416b08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416b0c:	48 89 c7             	mov    %rax,%rdi
  416b0f:	e8 7f 0c 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416b14:	48 89 c2             	mov    %rax,%rdx
  416b17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416b1b:	48 89 c6             	mov    %rax,%rsi
  416b1e:	48 89 d7             	mov    %rdx,%rdi
  416b21:	e8 3a 0d 00 00       	call   417860 <_ZNKSt8__format17_WidthPrecVisitorclIfEEmRT_>
  416b26:	e9 36 01 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  416b2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416b2f:	48 89 c7             	mov    %rax,%rdi
  416b32:	e8 5c 0c 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416b37:	48 89 c2             	mov    %rax,%rdx
  416b3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416b3e:	48 89 c6             	mov    %rax,%rsi
  416b41:	48 89 d7             	mov    %rdx,%rdi
  416b44:	e8 31 0d 00 00       	call   41787a <_ZNKSt8__format17_WidthPrecVisitorclIdEEmRT_>
  416b49:	e9 13 01 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  416b4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416b52:	48 89 c7             	mov    %rax,%rdi
  416b55:	e8 39 0c 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416b5a:	48 89 c2             	mov    %rax,%rdx
  416b5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416b61:	48 89 c6             	mov    %rax,%rsi
  416b64:	48 89 d7             	mov    %rdx,%rdi
  416b67:	e8 28 0d 00 00       	call   417894 <_ZNKSt8__format17_WidthPrecVisitorclIeEEmRT_>
  416b6c:	e9 f0 00 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  416b71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416b75:	48 89 c7             	mov    %rax,%rdi
  416b78:	e8 16 0c 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416b7d:	48 89 c2             	mov    %rax,%rdx
  416b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416b84:	48 89 c6             	mov    %rax,%rsi
  416b87:	48 89 d7             	mov    %rdx,%rdi
  416b8a:	e8 87 17 00 00       	call   418316 <_ZNKSt8__format17_WidthPrecVisitorclIPKcEEmRT_>
  416b8f:	e9 cd 00 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  416b94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416b98:	48 89 c7             	mov    %rax,%rdi
  416b9b:	e8 f3 0b 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416ba0:	48 89 c2             	mov    %rax,%rdx
  416ba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416ba7:	48 89 c6             	mov    %rax,%rsi
  416baa:	48 89 d7             	mov    %rdx,%rdi
  416bad:	e8 7e 17 00 00       	call   418330 <_ZNKSt8__format17_WidthPrecVisitorclISt17basic_string_viewIcSt11char_traitsIcEEEEmRT_>
  416bb2:	e9 aa 00 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  416bb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416bbb:	48 89 c7             	mov    %rax,%rdi
  416bbe:	e8 d0 0b 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416bc3:	48 89 c2             	mov    %rax,%rdx
  416bc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416bca:	48 89 c6             	mov    %rax,%rsi
  416bcd:	48 89 d7             	mov    %rdx,%rdi
  416bd0:	e8 d9 0c 00 00       	call   4178ae <_ZNKSt8__format17_WidthPrecVisitorclIPKvEEmRT_>
  416bd5:	e9 87 00 00 00       	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  416bda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416bde:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  416be2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416be6:	48 89 c7             	mov    %rax,%rdi
  416be9:	e8 a5 0b 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416bee:	48 89 c2             	mov    %rax,%rdx
  416bf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416bf5:	48 89 c6             	mov    %rax,%rsi
  416bf8:	48 89 d7             	mov    %rdx,%rdi
  416bfb:	e8 4a 17 00 00       	call   41834a <_ZNKSt8__format17_WidthPrecVisitorclINSt16basic_format_argISt20basic_format_contextINS_10_Sink_iterIcEEcEE6handleEEEmRT_>
  416c00:	eb 5f                	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  416c02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416c06:	48 89 c7             	mov    %rax,%rdi
  416c09:	e8 85 0b 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416c0e:	48 89 c2             	mov    %rax,%rdx
  416c11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416c15:	48 89 c6             	mov    %rax,%rsi
  416c18:	48 89 d7             	mov    %rdx,%rdi
  416c1b:	e8 a8 0c 00 00       	call   4178c8 <_ZNKSt8__format17_WidthPrecVisitorclInEEmRT_>
  416c20:	eb 3f                	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  416c22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416c26:	48 89 c7             	mov    %rax,%rdi
  416c29:	e8 65 0b 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416c2e:	48 89 c2             	mov    %rax,%rdx
  416c31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416c35:	48 89 c6             	mov    %rax,%rsi
  416c38:	48 89 d7             	mov    %rdx,%rdi
  416c3b:	e8 a2 0c 00 00       	call   4178e2 <_ZNKSt8__format17_WidthPrecVisitorclIoEEmRT_>
  416c40:	eb 1f                	jmp    416c61 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  416c42:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416c46:	48 89 c7             	mov    %rax,%rdi
  416c49:	e8 45 0b 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416c4e:	48 89 c2             	mov    %rax,%rdx
  416c51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416c55:	48 89 c6             	mov    %rax,%rsi
  416c58:	48 89 d7             	mov    %rdx,%rdi
  416c5b:	e8 9c 0c 00 00       	call   4178fc <_ZNKSt8__format17_WidthPrecVisitorclIDF128_EEmRT_>
  416c60:	90                   	nop
	}
  416c61:	c9                   	leave
  416c62:	c3                   	ret

0000000000416c63 <_ZSt16visit_format_argINSt8__format17_WidthPrecVisitorESt20basic_format_contextINS0_10_Sink_iterIcEEcEEDcOT_St16basic_format_argIT0_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  416c63:	55                   	push   %rbp
  416c64:	48 89 e5             	mov    %rsp,%rbp
  416c67:	53                   	push   %rbx
  416c68:	48 83 ec 18          	sub    $0x18,%rsp
  416c6c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  416c70:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  416c74:	0f b6 d8             	movzbl %al,%ebx
  416c77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416c7b:	48 89 c7             	mov    %rax,%rdi
  416c7e:	e8 10 0b 00 00       	call   417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  416c83:	89 da                	mov    %ebx,%edx
  416c85:	48 89 c6             	mov    %rax,%rsi
  416c88:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  416c8c:	e8 5d fd ff ff       	call   4169ee <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE>
    }
  416c91:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416c95:	c9                   	leave
  416c96:	c3                   	ret

0000000000416c97 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>:
    __int_from_arg(const basic_format_arg<_Context>& __arg)
  416c97:	55                   	push   %rbp
  416c98:	48 89 e5             	mov    %rsp,%rbp
  416c9b:	48 83 ec 20          	sub    $0x20,%rsp
  416c9f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return std::visit_format_arg(_WidthPrecVisitor(), __arg); }
  416ca3:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
  416ca7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  416cab:	48 83 ec 20          	sub    $0x20,%rsp
  416caf:	48 89 e6             	mov    %rsp,%rsi
  416cb2:	48 8b 01             	mov    (%rcx),%rax
  416cb5:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  416cb9:	48 89 06             	mov    %rax,(%rsi)
  416cbc:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  416cc0:	48 8b 41 10          	mov    0x10(%rcx),%rax
  416cc4:	48 8b 51 18          	mov    0x18(%rcx),%rdx
  416cc8:	48 89 46 10          	mov    %rax,0x10(%rsi)
  416ccc:	48 89 56 18          	mov    %rdx,0x18(%rsi)
  416cd0:	e8 8e ff ff ff       	call   416c63 <_ZSt16visit_format_argINSt8__format17_WidthPrecVisitorESt20basic_format_contextINS0_10_Sink_iterIcEEcEEDcOT_St16basic_format_argIT0_E>
  416cd5:	48 83 c4 20          	add    $0x20,%rsp
  416cd9:	c9                   	leave
  416cda:	c3                   	ret
  416cdb:	90                   	nop

0000000000416cdc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  416cdc:	55                   	push   %rbp
  416cdd:	48 89 e5             	mov    %rsp,%rbp
  416ce0:	48 83 ec 10          	sub    $0x10,%rsp
  416ce4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416cec:	48 8b 00             	mov    (%rax),%rax
  416cef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416cf3:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  416cf7:	48 89 d6             	mov    %rdx,%rsi
  416cfa:	48 89 c7             	mov    %rax,%rdi
  416cfd:	e8 34 fc fe ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  416d02:	90                   	nop
  416d03:	c9                   	leave
  416d04:	c3                   	ret
  416d05:	90                   	nop

0000000000416d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  416d06:	55                   	push   %rbp
  416d07:	48 89 e5             	mov    %rsp,%rbp
  416d0a:	53                   	push   %rbx
  416d0b:	48 83 ec 48          	sub    $0x48,%rsp
  416d0f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  416d13:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  416d17:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  416d1b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  416d1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d23:	48 89 d6             	mov    %rdx,%rsi
  416d26:	48 89 c7             	mov    %rax,%rdi
  416d29:	e8 a2 36 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  416d2e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d32:	48 89 c7             	mov    %rax,%rdi
  416d35:	e8 ea fb fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416d3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  416d3e:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  416d43:	84 c0                	test   %al,%al
  416d45:	74 19                	je     416d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  416d47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d4b:	48 89 c7             	mov    %rax,%rdi
  416d4e:	e8 cd de fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416d53:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  416d57:	73 07                	jae    416d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  416d59:	b8 01 00 00 00       	mov    $0x1,%eax
  416d5e:	eb 05                	jmp    416d65 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  416d60:	b8 00 00 00 00       	mov    $0x0,%eax
  416d65:	84 c0                	test   %al,%al
  416d67:	74 39                	je     416da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  416d69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d6d:	48 89 c7             	mov    %rax,%rdi
  416d70:	e8 ab de fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416d75:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  416d79:	48 89 d3             	mov    %rdx,%rbx
  416d7c:	48 29 c3             	sub    %rax,%rbx
  416d7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416d83:	48 89 c7             	mov    %rax,%rdi
  416d86:	e8 95 de fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416d8b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416d8f:	48 01 d0             	add    %rdx,%rax
  416d92:	ba 00 00 00 00       	mov    $0x0,%edx
  416d97:	48 89 de             	mov    %rbx,%rsi
  416d9a:	48 89 c7             	mov    %rax,%rdi
  416d9d:	e8 d6 da fe ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  416da2:	66 0f ef c0          	pxor   %xmm0,%xmm0
  416da6:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  416daa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416dae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  416db2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416db6:	48 89 c7             	mov    %rax,%rdi
  416db9:	e8 a6 15 00 00       	call   418364 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIfNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  416dbe:	48 89 c1             	mov    %rax,%rcx
  416dc1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  416dc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416dc9:	48 89 c6             	mov    %rax,%rsi
  416dcc:	48 89 cf             	mov    %rcx,%rdi
  416dcf:	e8 32 8d ff ff       	call   40fb06 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  416dd4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  416dd8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416ddc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  416de0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416de4:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  416de8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  416dec:	48 89 c7             	mov    %rax,%rdi
  416def:	e8 e8 fe ff ff       	call   416cdc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  416df4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416df8:	c9                   	leave
  416df9:	c3                   	ret

0000000000416dfa <_ZNSt8__format5_SinkIcE8_M_writeEc>:
      _M_write(_CharT __c)
  416dfa:	55                   	push   %rbp
  416dfb:	48 89 e5             	mov    %rsp,%rbp
  416dfe:	53                   	push   %rbx
  416dff:	48 83 ec 38          	sub    $0x38,%rsp
  416e03:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  416e07:	89 f0                	mov    %esi,%eax
  416e09:	88 45 c4             	mov    %al,-0x3c(%rbp)
	*_M_next++ = __c;
  416e0c:	0f b6 5d c4          	movzbl -0x3c(%rbp),%ebx
  416e10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e14:	48 83 c0 18          	add    $0x18,%rax
  416e18:	be 00 00 00 00       	mov    $0x0,%esi
  416e1d:	48 89 c7             	mov    %rax,%rdi
  416e20:	e8 87 16 00 00       	call   4184ac <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEppEi>
  416e25:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  416e29:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  416e2d:	48 89 c7             	mov    %rax,%rdi
  416e30:	e8 b5 16 00 00       	call   4184ea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEdeEv>
  416e35:	88 18                	mov    %bl,(%rax)
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
  416e37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e3b:	48 83 c0 08          	add    $0x8,%rax
  416e3f:	48 89 c7             	mov    %rax,%rdi
  416e42:	e8 cd 3b ff ff       	call   40aa14 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  416e47:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  416e4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e4f:	48 8d 50 18          	lea    0x18(%rax),%rdx
  416e53:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  416e57:	48 89 c6             	mov    %rax,%rsi
  416e5a:	48 89 d7             	mov    %rdx,%rdi
  416e5d:	e8 d7 3b ff ff       	call   40aa39 <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  416e62:	48 89 c3             	mov    %rax,%rbx
  416e65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e69:	48 83 c0 08          	add    $0x8,%rax
  416e6d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ssize(const _Container& __cont)
    noexcept(noexcept(__cont.size()))
    -> common_type_t<ptrdiff_t, make_signed_t<decltype(__cont.size())>>
    {
      using type = make_signed_t<decltype(__cont.size())>;
      return static_cast<common_type_t<ptrdiff_t, type>>(__cont.size());
  416e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416e75:	48 89 c7             	mov    %rax,%rdi
  416e78:	e8 47 e5 fe ff       	call   4053c4 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  416e7d:	48 39 c3             	cmp    %rax,%rbx
  416e80:	0f 94 c0             	sete   %al
  416e83:	84 c0                	test   %al,%al
  416e85:	74 13                	je     416e9a <_ZNSt8__format5_SinkIcE8_M_writeEc+0xa0>
	  _M_overflow();
  416e87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e8b:	48 8b 00             	mov    (%rax),%rax
  416e8e:	48 8b 10             	mov    (%rax),%rdx
  416e91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e95:	48 89 c7             	mov    %rax,%rdi
  416e98:	ff d2                	call   *%rdx
      }
  416e9a:	90                   	nop
  416e9b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416e9f:	c9                   	leave
  416ea0:	c3                   	ret

0000000000416ea1 <_ZNSt9__unicode21__is_single_code_unitIcEEbDi>:
    __is_single_code_unit(char32_t __c)
  416ea1:	55                   	push   %rbp
  416ea2:	48 89 e5             	mov    %rsp,%rbp
  416ea5:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return __c < 0x7F; // ASCII character
  416ea8:	83 7d fc 7e          	cmpl   $0x7e,-0x4(%rbp)
  416eac:	0f 96 c0             	setbe  %al
    }
  416eaf:	5d                   	pop    %rbp
  416eb0:	c3                   	ret
  416eb1:	90                   	nop

0000000000416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() { return _M_first_and_curr._M_curr; }
  416eb2:	55                   	push   %rbp
  416eb3:	48 89 e5             	mov    %rsp,%rbp
  416eb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416eba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416ebe:	48 83 c0 10          	add    $0x10,%rax
  416ec2:	5d                   	pop    %rbp
  416ec3:	c3                   	ret

0000000000416ec4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>:
      _Utf_iterator(_Iter __first, _Iter __it, _Sent __last)
  416ec4:	55                   	push   %rbp
  416ec5:	48 89 e5             	mov    %rsp,%rbp
  416ec8:	48 83 ec 20          	sub    $0x20,%rsp
  416ecc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416ed0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  416ed4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  416ed8:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_first_and_curr{__first, __it}, _M_last(__last)
  416edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416ee0:	48 8d 48 08          	lea    0x8(%rax),%rcx
  416ee4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416ee8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416eec:	48 89 c6             	mov    %rax,%rsi
  416eef:	48 89 cf             	mov    %rcx,%rdi
  416ef2:	e8 05 16 00 00       	call   4184fc <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>
  416ef7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416efb:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  416eff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416f03:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  416f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416f0b:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
  416f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416f13:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  416f17:	48 89 50 20          	mov    %rdx,0x20(%rax)
	if (_M_curr() != _M_last)
  416f1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416f1f:	48 89 c7             	mov    %rax,%rdi
  416f22:	e8 8b ff ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  416f27:	48 8b 10             	mov    (%rax),%rdx
  416f2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416f2e:	48 8b 40 20          	mov    0x20(%rax),%rax
  416f32:	48 39 c2             	cmp    %rax,%rdx
  416f35:	0f 95 c0             	setne  %al
  416f38:	84 c0                	test   %al,%al
  416f3a:	74 0e                	je     416f4a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_+0x86>
	  _M_read();
  416f3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416f40:	48 89 c7             	mov    %rax,%rdi
  416f43:	e8 de 15 00 00       	call   418526 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>
      }
  416f48:	eb 0a                	jmp    416f54 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_+0x90>
	  _M_buf = {};
  416f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416f4e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      }
  416f54:	90                   	nop
  416f55:	c9                   	leave
  416f56:	c3                   	ret
  416f57:	90                   	nop

0000000000416f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
  416f58:	55                   	push   %rbp
  416f59:	48 89 e5             	mov    %rsp,%rbp
  416f5c:	53                   	push   %rbx
  416f5d:	48 83 ec 18          	sub    $0x18,%rsp
  416f61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  416f65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
  416f69:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  416f6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416f71:	48 89 c7             	mov    %rax,%rdi
  416f74:	e8 9f d9 fe ff       	call   404918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  416f79:	48 89 c1             	mov    %rax,%rcx
  416f7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416f80:	48 89 c2             	mov    %rax,%rdx
  416f83:	48 89 ce             	mov    %rcx,%rsi
  416f86:	48 89 df             	mov    %rbx,%rdi
  416f89:	e8 fa e6 fe ff       	call   405688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
  416f8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416f92:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  416f99:	00
  416f9a:	90                   	nop
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
  416f9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416f9f:	48 83 ec 28          	sub    $0x28,%rsp
  416fa3:	48 89 e0             	mov    %rsp,%rax
  416fa6:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  416faa:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  416fae:	48 89 08             	mov    %rcx,(%rax)
  416fb1:	48 89 58 08          	mov    %rbx,0x8(%rax)
  416fb5:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  416fb9:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  416fbd:	48 89 48 10          	mov    %rcx,0x10(%rax)
  416fc1:	48 89 58 18          	mov    %rbx,0x18(%rax)
  416fc5:	48 8b 4d 58          	mov    0x58(%rbp),%rcx
  416fc9:	48 89 48 20          	mov    %rcx,0x20(%rax)
  416fcd:	48 83 ec 28          	sub    $0x28,%rsp
  416fd1:	48 89 e0             	mov    %rsp,%rax
  416fd4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  416fd8:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  416fdc:	48 89 08             	mov    %rcx,(%rax)
  416fdf:	48 89 58 08          	mov    %rbx,0x8(%rax)
  416fe3:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  416fe7:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  416feb:	48 89 48 10          	mov    %rcx,0x10(%rax)
  416fef:	48 89 58 18          	mov    %rbx,0x18(%rax)
  416ff3:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  416ff7:	48 89 48 20          	mov    %rcx,0x20(%rax)
  416ffb:	48 89 d7             	mov    %rdx,%rdi
  416ffe:	e8 83 15 00 00       	call   418586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag>
  417003:	48 83 c4 50          	add    $0x50,%rsp
	}
  417007:	eb 1a                	jmp    417023 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_+0xcb>
  417009:	48 89 c3             	mov    %rax,%rbx
  41700c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417010:	48 89 c7             	mov    %rax,%rdi
  417013:	e8 ba d9 fe ff       	call   4049d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  417018:	48 89 d8             	mov    %rbx,%rax
  41701b:	48 89 c7             	mov    %rax,%rdi
  41701e:	e8 4d d3 fe ff       	call   404370 <_Unwind_Resume@plt>
  417023:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417027:	c9                   	leave
  417028:	c3                   	ret
  417029:	90                   	nop

000000000041702a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  41702a:	55                   	push   %rbp
  41702b:	48 89 e5             	mov    %rsp,%rbp
  41702e:	48 83 ec 10          	sub    $0x10,%rsp
  417032:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41703a:	48 8b 00             	mov    (%rax),%rax
  41703d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417041:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417045:	48 89 d6             	mov    %rdx,%rsi
  417048:	48 89 c7             	mov    %rax,%rdi
  41704b:	e8 e6 f8 fe ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417050:	90                   	nop
  417051:	c9                   	leave
  417052:	c3                   	ret
  417053:	90                   	nop

0000000000417054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417054:	55                   	push   %rbp
  417055:	48 89 e5             	mov    %rsp,%rbp
  417058:	53                   	push   %rbx
  417059:	48 83 ec 48          	sub    $0x48,%rsp
  41705d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417061:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417065:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417069:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41706d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417071:	48 89 d6             	mov    %rdx,%rsi
  417074:	48 89 c7             	mov    %rax,%rdi
  417077:	e8 54 33 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  41707c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417080:	48 89 c7             	mov    %rax,%rdi
  417083:	e8 9c f8 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  417088:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  41708c:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  417091:	84 c0                	test   %al,%al
  417093:	74 19                	je     4170ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417095:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417099:	48 89 c7             	mov    %rax,%rdi
  41709c:	e8 7f db fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4170a1:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  4170a5:	73 07                	jae    4170ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  4170a7:	b8 01 00 00 00       	mov    $0x1,%eax
  4170ac:	eb 05                	jmp    4170b3 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  4170ae:	b8 00 00 00 00       	mov    $0x0,%eax
  4170b3:	84 c0                	test   %al,%al
  4170b5:	74 39                	je     4170f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  4170b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4170bb:	48 89 c7             	mov    %rax,%rdi
  4170be:	e8 5d db fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4170c3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4170c7:	48 89 d3             	mov    %rdx,%rbx
  4170ca:	48 29 c3             	sub    %rax,%rbx
  4170cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4170d1:	48 89 c7             	mov    %rax,%rdi
  4170d4:	e8 47 db fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4170d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4170dd:	48 01 d0             	add    %rdx,%rax
  4170e0:	ba 00 00 00 00       	mov    $0x0,%edx
  4170e5:	48 89 de             	mov    %rbx,%rsi
  4170e8:	48 89 c7             	mov    %rax,%rdi
  4170eb:	e8 88 d7 fe ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  4170f0:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4170f4:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  4170f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4170fc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  417100:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417104:	48 89 c7             	mov    %rax,%rdi
  417107:	e8 1d 17 00 00       	call   418829 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIdNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  41710c:	48 89 c1             	mov    %rax,%rcx
  41710f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417117:	48 89 c6             	mov    %rax,%rsi
  41711a:	48 89 cf             	mov    %rcx,%rdi
  41711d:	e8 0c 97 ff ff       	call   41082e <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417122:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417126:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41712a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  41712e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417132:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417136:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  41713a:	48 89 c7             	mov    %rax,%rdi
  41713d:	e8 e8 fe ff ff       	call   41702a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417142:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417146:	c9                   	leave
  417147:	c3                   	ret

0000000000417148 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  417148:	55                   	push   %rbp
  417149:	48 89 e5             	mov    %rsp,%rbp
  41714c:	48 83 ec 10          	sub    $0x10,%rsp
  417150:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417158:	48 8b 00             	mov    (%rax),%rax
  41715b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41715f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417163:	48 89 d6             	mov    %rdx,%rsi
  417166:	48 89 c7             	mov    %rax,%rdi
  417169:	e8 c8 f7 fe ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  41716e:	90                   	nop
  41716f:	c9                   	leave
  417170:	c3                   	ret
  417171:	90                   	nop

0000000000417172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417172:	55                   	push   %rbp
  417173:	48 89 e5             	mov    %rsp,%rbp
  417176:	53                   	push   %rbx
  417177:	48 83 ec 48          	sub    $0x48,%rsp
  41717b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  41717f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417183:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417187:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41718b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41718f:	48 89 d6             	mov    %rdx,%rsi
  417192:	48 89 c7             	mov    %rax,%rdi
  417195:	e8 36 32 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  41719a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41719e:	48 89 c7             	mov    %rax,%rdi
  4171a1:	e8 7e f7 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4171a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4171aa:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  4171af:	84 c0                	test   %al,%al
  4171b1:	74 19                	je     4171cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  4171b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4171b7:	48 89 c7             	mov    %rax,%rdi
  4171ba:	e8 61 da fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4171bf:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  4171c3:	73 07                	jae    4171cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  4171c5:	b8 01 00 00 00       	mov    $0x1,%eax
  4171ca:	eb 05                	jmp    4171d1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  4171cc:	b8 00 00 00 00       	mov    $0x0,%eax
  4171d1:	84 c0                	test   %al,%al
  4171d3:	74 39                	je     41720e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  4171d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4171d9:	48 89 c7             	mov    %rax,%rdi
  4171dc:	e8 3f da fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4171e1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4171e5:	48 89 d3             	mov    %rdx,%rbx
  4171e8:	48 29 c3             	sub    %rax,%rbx
  4171eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4171ef:	48 89 c7             	mov    %rax,%rdi
  4171f2:	e8 29 da fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4171f7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4171fb:	48 01 d0             	add    %rdx,%rax
  4171fe:	ba 00 00 00 00       	mov    $0x0,%edx
  417203:	48 89 de             	mov    %rbx,%rsi
  417206:	48 89 c7             	mov    %rax,%rdi
  417209:	e8 6a d6 fe ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  41720e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  417212:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  417216:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41721a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  41721e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417222:	48 89 c7             	mov    %rax,%rdi
  417225:	e8 0d 16 00 00       	call   418837 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIeNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  41722a:	48 89 c1             	mov    %rax,%rcx
  41722d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417231:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417235:	48 89 c6             	mov    %rax,%rsi
  417238:	48 89 cf             	mov    %rcx,%rdi
  41723b:	e8 34 a3 ff ff       	call   411574 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417240:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417244:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417248:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  41724c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417250:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417254:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  417258:	48 89 c7             	mov    %rax,%rdi
  41725b:	e8 e8 fe ff ff       	call   417148 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417260:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417264:	c9                   	leave
  417265:	c3                   	ret

0000000000417266 <_ZSt4moveIRSt17basic_string_viewIcSt11char_traitsIcEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
  417266:	55                   	push   %rbp
  417267:	48 89 e5             	mov    %rsp,%rbp
  41726a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41726e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417272:	5d                   	pop    %rbp
  417273:	c3                   	ret

0000000000417274 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEEC1EOS4_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  417274:	55                   	push   %rbp
  417275:	48 89 e5             	mov    %rsp,%rbp
  417278:	48 83 ec 10          	sub    $0x10,%rsp
  41727c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417280:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  417284:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417288:	48 89 c7             	mov    %rax,%rdi
  41728b:	e8 15 00 00 00       	call   4172a5 <_ZSt7forwardISt17basic_string_viewIcSt11char_traitsIcEEEOT_RNSt16remove_referenceIS4_E4typeE>
  417290:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  417294:	48 8b 50 08          	mov    0x8(%rax),%rdx
  417298:	48 8b 00             	mov    (%rax),%rax
  41729b:	48 89 01             	mov    %rax,(%rcx)
  41729e:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  4172a2:	90                   	nop
  4172a3:	c9                   	leave
  4172a4:	c3                   	ret

00000000004172a5 <_ZSt7forwardISt17basic_string_viewIcSt11char_traitsIcEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4172a5:	55                   	push   %rbp
  4172a6:	48 89 e5             	mov    %rsp,%rbp
  4172a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4172ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4172b1:	5d                   	pop    %rbp
  4172b2:	c3                   	ret
  4172b3:	90                   	nop

00000000004172b4 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>:
      _Grapheme_cluster_view(_View __v)
  4172b4:	55                   	push   %rbp
  4172b5:	48 89 e5             	mov    %rsp,%rbp
  4172b8:	41 54                	push   %r12
  4172ba:	53                   	push   %rbx
  4172bb:	48 83 ec 60          	sub    $0x60,%rsp
  4172bf:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4172c3:	48 89 f0             	mov    %rsi,%rax
  4172c6:	48 89 d1             	mov    %rdx,%rcx
  4172c9:	48 89 c0             	mov    %rax,%rax
  4172cc:	ba 00 00 00 00       	mov    $0x0,%edx
  4172d1:	48 89 ca             	mov    %rcx,%rdx
  4172d4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4172d8:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
      : _M_begin(_Utf32_view<_View>(std::move(__v)).begin())
  4172dc:	4c 8b 65 a8          	mov    -0x58(%rbp),%r12
  4172e0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4172e4:	48 89 c7             	mov    %rax,%rdi
  4172e7:	e8 7a ff ff ff       	call   417266 <_ZSt4moveIRSt17basic_string_viewIcSt11char_traitsIcEEEONSt16remove_referenceIT_E4typeEOS6_>
  4172ec:	48 89 c2             	mov    %rax,%rdx
  4172ef:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4172f3:	48 89 d6             	mov    %rdx,%rsi
  4172f6:	48 89 c7             	mov    %rax,%rdi
  4172f9:	e8 76 ff ff ff       	call   417274 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEEC1EOS4_>
  4172fe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  417302:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  417306:	48 89 d6             	mov    %rdx,%rsi
  417309:	48 89 c7             	mov    %rax,%rdi
  41730c:	e8 21 e8 ff ff       	call   415b32 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
  417311:	48 83 ec 08          	sub    $0x8,%rsp
  417315:	48 83 ec 28          	sub    $0x28,%rsp
  417319:	48 89 e0             	mov    %rsp,%rax
  41731c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  417320:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  417324:	48 89 08             	mov    %rcx,(%rax)
  417327:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41732b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  41732f:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  417333:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417337:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41733b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41733f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  417343:	4c 89 e7             	mov    %r12,%rdi
  417346:	e8 1f 15 00 00       	call   41886a <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE>
  41734b:	48 83 c4 30          	add    $0x30,%rsp
      { }
  41734f:	90                   	nop
  417350:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  417354:	5b                   	pop    %rbx
  417355:	41 5c                	pop    %r12
  417357:	5d                   	pop    %rbp
  417358:	c3                   	ret
  417359:	90                   	nop

000000000041735a <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>:
      end() const { return _M_last; }
  41735a:	55                   	push   %rbp
  41735b:	48 89 e5             	mov    %rsp,%rbp
  41735e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417366:	48 8b 40 20          	mov    0x20(%rax),%rax
  41736a:	5d                   	pop    %rbp
  41736b:	c3                   	ret

000000000041736c <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>:
	operator++()
  41736c:	55                   	push   %rbp
  41736d:	48 89 e5             	mov    %rsp,%rbp
  417370:	53                   	push   %rbx
  417371:	48 83 ec 58          	sub    $0x58,%rsp
  417375:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
	  const auto __end = _M_base.end();
  417379:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41737d:	48 83 c0 10          	add    $0x10,%rax
  417381:	48 89 c7             	mov    %rax,%rdi
  417384:	e8 d1 ff ff ff       	call   41735a <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  417389:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (_M_base != __end)
  41738d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  417391:	48 83 ec 08          	sub    $0x8,%rsp
  417395:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417399:	48 83 ec 28          	sub    $0x28,%rsp
  41739d:	48 89 e2             	mov    %rsp,%rdx
  4173a0:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4173a4:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4173a8:	48 89 0a             	mov    %rcx,(%rdx)
  4173ab:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  4173af:	48 8b 48 20          	mov    0x20(%rax),%rcx
  4173b3:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4173b7:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  4173bb:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  4173bf:	48 8b 40 30          	mov    0x30(%rax),%rax
  4173c3:	48 89 42 20          	mov    %rax,0x20(%rdx)
  4173c7:	48 89 f7             	mov    %rsi,%rdi
  4173ca:	e8 5b 15 00 00       	call   41892a <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  4173cf:	48 83 c4 30          	add    $0x30,%rsp
  4173d3:	83 f0 01             	xor    $0x1,%eax
  4173d6:	84 c0                	test   %al,%al
  4173d8:	0f 84 82 01 00 00    	je     417560 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x1f4>
	      auto __p_prev = _M_prop;
  4173de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4173e2:	8b 40 04             	mov    0x4(%rax),%eax
  4173e5:	89 45 ec             	mov    %eax,-0x14(%rbp)
	      auto __it = _M_base;
  4173e8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4173ec:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4173f0:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4173f4:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  4173f8:	48 89 5d b8          	mov    %rbx,-0x48(%rbp)
  4173fc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  417400:	48 8b 58 28          	mov    0x28(%rax),%rbx
  417404:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  417408:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  41740c:	48 8b 40 30          	mov    0x30(%rax),%rax
  417410:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      while (++__it != __end)
  417414:	e9 c3 00 00 00       	jmp    4174dc <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x170>
		  char32_t __c = *__it;
  417419:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41741d:	48 89 c7             	mov    %rax,%rdi
  417420:	e8 93 2c ff ff       	call   40a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  417425:	89 45 dc             	mov    %eax,-0x24(%rbp)
		  auto __p = __grapheme_cluster_break_property(*__it);
  417428:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41742c:	48 89 c7             	mov    %rax,%rdi
  41742f:	e8 84 2c ff ff       	call   40a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  417434:	89 c7                	mov    %eax,%edi
  417436:	e8 d2 d8 fe ff       	call   404d0d <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>
  41743b:	89 45 d8             	mov    %eax,-0x28(%rbp)
		  _M_update_xpicto_seq_state(__c, __p);
  41743e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417442:	8b 55 d8             	mov    -0x28(%rbp),%edx
  417445:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  417448:	89 ce                	mov    %ecx,%esi
  41744a:	48 89 c7             	mov    %rax,%rdi
  41744d:	e8 32 da fe ff       	call   404e84 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE>
		  _M_update_ri_count(__p);
  417452:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417456:	8b 55 d8             	mov    -0x28(%rbp),%edx
  417459:	89 d6                	mov    %edx,%esi
  41745b:	48 89 c7             	mov    %rax,%rdi
  41745e:	e8 cd da fe ff       	call   404f30 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE>
		  _M_update_incb_state(__c, __p);
  417463:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417467:	8b 55 d8             	mov    -0x28(%rbp),%edx
  41746a:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  41746d:	89 ce                	mov    %ecx,%esi
  41746f:	48 89 c7             	mov    %rax,%rdi
  417472:	e8 e9 da fe ff       	call   404f60 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE>
		  if (_M_is_break(__p_prev, __p, __it))
  417477:	8b 55 d8             	mov    -0x28(%rbp),%edx
  41747a:	8b 75 ec             	mov    -0x14(%rbp),%esi
  41747d:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  417481:	48 83 ec 08          	sub    $0x8,%rsp
  417485:	48 83 ec 28          	sub    $0x28,%rsp
  417489:	48 89 e0             	mov    %rsp,%rax
  41748c:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  417490:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  417494:	48 89 08             	mov    %rcx,(%rax)
  417497:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41749b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  41749f:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  4174a3:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4174a7:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4174ab:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4174af:	48 89 48 20          	mov    %rcx,0x20(%rax)
  4174b3:	e8 94 14 00 00       	call   41894c <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE>
  4174b8:	48 83 c4 30          	add    $0x30,%rsp
  4174bc:	84 c0                	test   %al,%al
  4174be:	74 16                	je     4174d6 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x16a>
		      _M_reset(__c, __p);
  4174c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4174c4:	8b 55 d8             	mov    -0x28(%rbp),%edx
  4174c7:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  4174ca:	89 ce                	mov    %ecx,%esi
  4174cc:	48 89 c7             	mov    %rax,%rdi
  4174cf:	e8 74 d9 fe ff       	call   404e48 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base8_M_resetEDiNS0_13_Gcb_propertyE>
		      break;
  4174d4:	eb 5e                	jmp    417534 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x1c8>
		  __p_prev = __p;
  4174d6:	8b 45 d8             	mov    -0x28(%rbp),%eax
  4174d9:	89 45 ec             	mov    %eax,-0x14(%rbp)
	      while (++__it != __end)
  4174dc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4174e0:	48 89 c7             	mov    %rax,%rdi
  4174e3:	e8 3a 3b ff ff       	call   40b022 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
  4174e8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4174ec:	48 83 ec 08          	sub    $0x8,%rsp
  4174f0:	48 83 ec 28          	sub    $0x28,%rsp
  4174f4:	48 89 e2             	mov    %rsp,%rdx
  4174f7:	48 8b 08             	mov    (%rax),%rcx
  4174fa:	48 8b 58 08          	mov    0x8(%rax),%rbx
  4174fe:	48 89 0a             	mov    %rcx,(%rdx)
  417501:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  417505:	48 8b 48 10          	mov    0x10(%rax),%rcx
  417509:	48 8b 58 18          	mov    0x18(%rax),%rbx
  41750d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  417511:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  417515:	48 8b 40 20          	mov    0x20(%rax),%rax
  417519:	48 89 42 20          	mov    %rax,0x20(%rdx)
  41751d:	48 89 f7             	mov    %rsi,%rdi
  417520:	e8 05 14 00 00       	call   41892a <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  417525:	48 83 c4 30          	add    $0x30,%rsp
  417529:	83 f0 01             	xor    $0x1,%eax
  41752c:	84 c0                	test   %al,%al
  41752e:	0f 85 e5 fe ff ff    	jne    417419 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0xad>
	      _M_base = __it;
  417534:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417538:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  41753c:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  417540:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417544:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417548:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  41754c:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  417550:	48 89 48 20          	mov    %rcx,0x20(%rax)
  417554:	48 89 58 28          	mov    %rbx,0x28(%rax)
  417558:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41755c:	48 89 50 30          	mov    %rdx,0x30(%rax)
	  return *this;
  417560:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
	}
  417564:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417568:	c9                   	leave
  417569:	c3                   	ret

000000000041756a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>:
	operator==(const ranges::sentinel_t<_View>& __i) const
  41756a:	55                   	push   %rbp
  41756b:	48 89 e5             	mov    %rsp,%rbp
  41756e:	53                   	push   %rbx
  41756f:	48 83 ec 18          	sub    $0x18,%rsp
  417573:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417577:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{ return _M_base == __i; }
  41757b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41757f:	48 8b 30             	mov    (%rax),%rsi
  417582:	48 83 ec 08          	sub    $0x8,%rsp
  417586:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41758a:	48 83 ec 28          	sub    $0x28,%rsp
  41758e:	48 89 e2             	mov    %rsp,%rdx
  417591:	48 8b 48 10          	mov    0x10(%rax),%rcx
  417595:	48 8b 58 18          	mov    0x18(%rax),%rbx
  417599:	48 89 0a             	mov    %rcx,(%rdx)
  41759c:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  4175a0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  4175a4:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4175a8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  4175ac:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  4175b0:	48 8b 40 30          	mov    0x30(%rax),%rax
  4175b4:	48 89 42 20          	mov    %rax,0x20(%rdx)
  4175b8:	48 89 f7             	mov    %rsi,%rdi
  4175bb:	e8 6a 13 00 00       	call   41892a <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  4175c0:	48 83 c4 30          	add    $0x30,%rsp
  4175c4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4175c8:	c9                   	leave
  4175c9:	c3                   	ret

00000000004175ca <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  4175ca:	55                   	push   %rbp
  4175cb:	48 89 e5             	mov    %rsp,%rbp
  4175ce:	48 83 ec 10          	sub    $0x10,%rsp
  4175d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4175d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4175da:	48 8b 00             	mov    (%rax),%rax
  4175dd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4175e1:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  4175e5:	48 89 d6             	mov    %rdx,%rsi
  4175e8:	48 89 c7             	mov    %rax,%rdi
  4175eb:	e8 46 f3 fe ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  4175f0:	90                   	nop
  4175f1:	c9                   	leave
  4175f2:	c3                   	ret
  4175f3:	90                   	nop

00000000004175f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  4175f4:	55                   	push   %rbp
  4175f5:	48 89 e5             	mov    %rsp,%rbp
  4175f8:	53                   	push   %rbx
  4175f9:	48 83 ec 48          	sub    $0x48,%rsp
  4175fd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417601:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417605:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417609:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41760d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417611:	48 89 d6             	mov    %rdx,%rsi
  417614:	48 89 c7             	mov    %rax,%rdi
  417617:	e8 b4 2d ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  41761c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417620:	48 89 c7             	mov    %rax,%rdi
  417623:	e8 fc f2 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  417628:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  41762c:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  417631:	84 c0                	test   %al,%al
  417633:	74 19                	je     41764e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417635:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417639:	48 89 c7             	mov    %rax,%rdi
  41763c:	e8 df d5 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417641:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  417645:	73 07                	jae    41764e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417647:	b8 01 00 00 00       	mov    $0x1,%eax
  41764c:	eb 05                	jmp    417653 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  41764e:	b8 00 00 00 00       	mov    $0x0,%eax
  417653:	84 c0                	test   %al,%al
  417655:	74 39                	je     417690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  417657:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41765b:	48 89 c7             	mov    %rax,%rdi
  41765e:	e8 bd d5 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417663:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417667:	48 89 d3             	mov    %rdx,%rbx
  41766a:	48 29 c3             	sub    %rax,%rbx
  41766d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417671:	48 89 c7             	mov    %rax,%rdi
  417674:	e8 a7 d5 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417679:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41767d:	48 01 d0             	add    %rdx,%rax
  417680:	ba 00 00 00 00       	mov    $0x0,%edx
  417685:	48 89 de             	mov    %rbx,%rsi
  417688:	48 89 c7             	mov    %rax,%rdi
  41768b:	e8 e8 d1 fe ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  417690:	66 0f ef c0          	pxor   %xmm0,%xmm0
  417694:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  417698:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41769c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  4176a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4176a4:	48 89 c7             	mov    %rax,%rdi
  4176a7:	e8 ac 15 00 00       	call   418c58 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  4176ac:	48 89 c1             	mov    %rax,%rcx
  4176af:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4176b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4176b7:	48 89 c6             	mov    %rax,%rsi
  4176ba:	48 89 cf             	mov    %rcx,%rdi
  4176bd:	e8 3e b6 ff ff       	call   412d00 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  4176c2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  4176c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4176ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  4176ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4176d2:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  4176d6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4176da:	48 89 c7             	mov    %rax,%rdi
  4176dd:	e8 e8 fe ff ff       	call   4175ca <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  4176e2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4176e6:	c9                   	leave
  4176e7:	c3                   	ret

00000000004176e8 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
  4176e8:	55                   	push   %rbp
  4176e9:	48 89 e5             	mov    %rsp,%rbp
  4176ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4176f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4176f4:	5d                   	pop    %rbp
  4176f5:	c3                   	ret

00000000004176f6 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_>:
    __copy_or_move(_Iter __first, _Sent __last, _Out __result)
  4176f6:	55                   	push   %rbp
  4176f7:	48 89 e5             	mov    %rsp,%rbp
  4176fa:	41 55                	push   %r13
  4176fc:	41 54                	push   %r12
  4176fe:	48 83 ec 40          	sub    $0x40,%rsp
  417702:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417706:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  41770a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	  for (auto __n = __last - __first; __n > 0; --__n)
  41770e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417712:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417716:	48 29 c2             	sub    %rax,%rdx
  417719:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  41771d:	eb 3c                	jmp    41775b <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_+0x65>
		*__result = *__first;
  41771f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417723:	0f b6 00             	movzbl (%rax),%eax
  417726:	0f be c0             	movsbl %al,%eax
      operator*() { return *this; }
  417729:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  41772d:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  417731:	88 45 df             	mov    %al,-0x21(%rbp)
	_M_sink->_M_write(__c);
  417734:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417738:	48 8b 00             	mov    (%rax),%rax
  41773b:	0f be 55 df          	movsbl -0x21(%rbp),%edx
  41773f:	89 d6                	mov    %edx,%esi
  417741:	48 89 c7             	mov    %rax,%rdi
  417744:	e8 b1 f6 ff ff       	call   416dfa <_ZNSt8__format5_SinkIcE8_M_writeEc>
	      ++__first;
  417749:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41774d:	48 83 c0 01          	add    $0x1,%rax
  417751:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      operator++() { return *this; }
  417755:	90                   	nop
	  for (auto __n = __last - __first; __n > 0; --__n)
  417756:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  41775b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  417760:	7f bd                	jg     41771f <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_+0x29>
	  return {std::move(__first), std::move(__result)};
  417762:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  417766:	48 89 c7             	mov    %rax,%rdi
  417769:	e8 7a ff ff ff       	call   4176e8 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
  41776e:	48 8b 00             	mov    (%rax),%rax
  417771:	49 89 c4             	mov    %rax,%r12
  417774:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  417778:	48 89 c7             	mov    %rax,%rdi
  41777b:	e8 eb 15 ff ff       	call   408d6b <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  417780:	4c 8b 28             	mov    (%rax),%r13
  417783:	4c 89 e0             	mov    %r12,%rax
  417786:	4c 89 ea             	mov    %r13,%rdx
    }
  417789:	48 83 c4 40          	add    $0x40,%rsp
  41778d:	41 5c                	pop    %r12
  41778f:	41 5d                	pop    %r13
  417791:	5d                   	pop    %rbp
  417792:	c3                   	ret

0000000000417793 <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  417793:	55                   	push   %rbp
  417794:	48 89 e5             	mov    %rsp,%rbp
  417797:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  41779b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41779f:	5d                   	pop    %rbp
  4177a0:	c3                   	ret
  4177a1:	90                   	nop

00000000004177a2 <_ZNKSt8__format17_WidthPrecVisitorclISt9monostateEEmRT_>:
      operator()(_Tp& __arg) const
  4177a2:	55                   	push   %rbp
  4177a3:	48 89 e5             	mov    %rsp,%rbp
  4177a6:	48 83 ec 10          	sub    $0x10,%rsp
  4177aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4177ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  __format::__invalid_arg_id_in_format_string();
  4177b2:	e8 ef d8 fe ff       	call   4050a6 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
  4177b7:	90                   	nop

00000000004177b8 <_ZNKSt8__format17_WidthPrecVisitorclIbEEmRT_>:
      operator()(_Tp& __arg) const
  4177b8:	55                   	push   %rbp
  4177b9:	48 89 e5             	mov    %rsp,%rbp
  4177bc:	48 83 ec 10          	sub    $0x10,%rsp
  4177c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4177c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4177c8:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  4177cd:	e8 57 d8 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004177d2 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_>:
      operator()(_Tp& __arg) const
  4177d2:	55                   	push   %rbp
  4177d3:	48 89 e5             	mov    %rsp,%rbp
  4177d6:	48 83 ec 10          	sub    $0x10,%rsp
  4177da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4177de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      if (__arg >= 0)
  4177e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4177e6:	8b 00                	mov    (%rax),%eax
  4177e8:	85 c0                	test   %eax,%eax
  4177ea:	78 0a                	js     4177f6 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_+0x24>
		return __arg;
  4177ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4177f0:	8b 00                	mov    (%rax),%eax
  4177f2:	48 98                	cltq
  4177f4:	eb 0a                	jmp    417800 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_+0x2e>
	__throw_format_error("format error: argument used for width or "
  4177f6:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  4177fb:	e8 29 d8 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>
      }
  417800:	c9                   	leave
  417801:	c3                   	ret

0000000000417802 <_ZNKSt8__format17_WidthPrecVisitorclIjEEmRT_>:
      operator()(_Tp& __arg) const
  417802:	55                   	push   %rbp
  417803:	48 89 e5             	mov    %rsp,%rbp
  417806:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41780a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __arg;
  41780e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417812:	8b 00                	mov    (%rax),%eax
  417814:	89 c0                	mov    %eax,%eax
      }
  417816:	5d                   	pop    %rbp
  417817:	c3                   	ret

0000000000417818 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_>:
      operator()(_Tp& __arg) const
  417818:	55                   	push   %rbp
  417819:	48 89 e5             	mov    %rsp,%rbp
  41781c:	48 83 ec 10          	sub    $0x10,%rsp
  417820:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417824:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      if (__arg >= 0)
  417828:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41782c:	48 8b 00             	mov    (%rax),%rax
  41782f:	48 85 c0             	test   %rax,%rax
  417832:	78 09                	js     41783d <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_+0x25>
		return __arg;
  417834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417838:	48 8b 00             	mov    (%rax),%rax
  41783b:	eb 0a                	jmp    417847 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_+0x2f>
	__throw_format_error("format error: argument used for width or "
  41783d:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  417842:	e8 e2 d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>
      }
  417847:	c9                   	leave
  417848:	c3                   	ret
  417849:	90                   	nop

000000000041784a <_ZNKSt8__format17_WidthPrecVisitorclIyEEmRT_>:
      operator()(_Tp& __arg) const
  41784a:	55                   	push   %rbp
  41784b:	48 89 e5             	mov    %rsp,%rbp
  41784e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417852:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __arg;
  417856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41785a:	48 8b 00             	mov    (%rax),%rax
      }
  41785d:	5d                   	pop    %rbp
  41785e:	c3                   	ret
  41785f:	90                   	nop

0000000000417860 <_ZNKSt8__format17_WidthPrecVisitorclIfEEmRT_>:
      operator()(_Tp& __arg) const
  417860:	55                   	push   %rbp
  417861:	48 89 e5             	mov    %rsp,%rbp
  417864:	48 83 ec 10          	sub    $0x10,%rsp
  417868:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41786c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  417870:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  417875:	e8 af d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

000000000041787a <_ZNKSt8__format17_WidthPrecVisitorclIdEEmRT_>:
      operator()(_Tp& __arg) const
  41787a:	55                   	push   %rbp
  41787b:	48 89 e5             	mov    %rsp,%rbp
  41787e:	48 83 ec 10          	sub    $0x10,%rsp
  417882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417886:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41788a:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  41788f:	e8 95 d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

0000000000417894 <_ZNKSt8__format17_WidthPrecVisitorclIeEEmRT_>:
      operator()(_Tp& __arg) const
  417894:	55                   	push   %rbp
  417895:	48 89 e5             	mov    %rsp,%rbp
  417898:	48 83 ec 10          	sub    $0x10,%rsp
  41789c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4178a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4178a4:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  4178a9:	e8 7b d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004178ae <_ZNKSt8__format17_WidthPrecVisitorclIPKvEEmRT_>:
      operator()(_Tp& __arg) const
  4178ae:	55                   	push   %rbp
  4178af:	48 89 e5             	mov    %rsp,%rbp
  4178b2:	48 83 ec 10          	sub    $0x10,%rsp
  4178b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4178ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4178be:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  4178c3:	e8 61 d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004178c8 <_ZNKSt8__format17_WidthPrecVisitorclInEEmRT_>:
      operator()(_Tp& __arg) const
  4178c8:	55                   	push   %rbp
  4178c9:	48 89 e5             	mov    %rsp,%rbp
  4178cc:	48 83 ec 10          	sub    $0x10,%rsp
  4178d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4178d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4178d8:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  4178dd:	e8 47 d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004178e2 <_ZNKSt8__format17_WidthPrecVisitorclIoEEmRT_>:
      operator()(_Tp& __arg) const
  4178e2:	55                   	push   %rbp
  4178e3:	48 89 e5             	mov    %rsp,%rbp
  4178e6:	48 83 ec 10          	sub    $0x10,%rsp
  4178ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4178ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4178f2:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  4178f7:	e8 2d d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

00000000004178fc <_ZNKSt8__format17_WidthPrecVisitorclIDF128_EEmRT_>:
      operator()(_Tp& __arg) const
  4178fc:	55                   	push   %rbp
  4178fd:	48 89 e5             	mov    %rsp,%rbp
  417900:	48 83 ec 10          	sub    $0x10,%rsp
  417904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417908:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41790c:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  417911:	e8 13 d7 fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

0000000000417916 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm>:
      assign(const _CharT* __s, size_type __n)
  417916:	55                   	push   %rbp
  417917:	48 89 e5             	mov    %rsp,%rbp
  41791a:	48 83 ec 20          	sub    $0x20,%rsp
  41791e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417922:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  417926:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	return _M_replace(size_type(0), this->size(), __s, __n);
  41792a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41792e:	48 89 c7             	mov    %rax,%rdi
  417931:	e8 ea d2 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417936:	48 89 c6             	mov    %rax,%rsi
  417939:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41793d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  417941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417945:	49 89 c8             	mov    %rcx,%r8
  417948:	48 89 d1             	mov    %rdx,%rcx
  41794b:	48 89 f2             	mov    %rsi,%rdx
  41794e:	be 00 00 00 00       	mov    $0x0,%esi
  417953:	48 89 c7             	mov    %rax,%rdi
  417956:	e8 67 38 ff ff       	call   40b1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
  41795b:	c9                   	leave
  41795c:	c3                   	ret

000000000041795d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc>:
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
  41795d:	55                   	push   %rbp
  41795e:	48 89 e5             	mov    %rsp,%rbp
  417961:	48 83 ec 20          	sub    $0x20,%rsp
  417965:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417969:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41796d:	89 d0                	mov    %edx,%eax
  41796f:	88 45 ec             	mov    %al,-0x14(%rbp)
	if (__n == 1)
  417972:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  417977:	75 15                	jne    41798e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc+0x31>
	  traits_type::assign(*__d, __c);
  417979:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  41797d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417981:	48 89 d6             	mov    %rdx,%rsi
  417984:	48 89 c7             	mov    %rax,%rdi
  417987:	e8 55 cc fe ff       	call   4045e1 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  41798c:	eb 1a                	jmp    4179a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc+0x4b>
	  traits_type::assign(__d, __n, __c);
  41798e:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  417992:	0f be d0             	movsbl %al,%edx
  417995:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  417999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41799d:	48 89 ce             	mov    %rcx,%rsi
  4179a0:	48 89 c7             	mov    %rax,%rdi
  4179a3:	e8 d0 ce fe ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
      }
  4179a8:	90                   	nop
  4179a9:	c9                   	leave
  4179aa:	c3                   	ret

00000000004179ab <_ZNSt8__detail16__to_chars_len_2IoEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  4179ab:	55                   	push   %rbp
  4179ac:	48 89 e5             	mov    %rsp,%rbp
  4179af:	48 83 ec 10          	sub    $0x10,%rsp
  4179b3:	48 89 f8             	mov    %rdi,%rax
  4179b6:	48 89 f1             	mov    %rsi,%rcx
  4179b9:	48 89 c0             	mov    %rax,%rax
  4179bc:	ba 00 00 00 00       	mov    $0x0,%edx
  4179c1:	48 89 ca             	mov    %rcx,%rdx
  4179c4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4179c8:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    { return std::__bit_width(__value); }
  4179cc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4179d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4179d4:	48 89 d7             	mov    %rdx,%rdi
  4179d7:	48 89 c6             	mov    %rax,%rsi
  4179da:	e8 87 12 00 00       	call   418c66 <_ZSt11__bit_widthIoEiT_>
  4179df:	c9                   	leave
  4179e0:	c3                   	ret

00000000004179e1 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  4179e1:	55                   	push   %rbp
  4179e2:	48 89 e5             	mov    %rsp,%rbp
  4179e5:	48 83 ec 70          	sub    $0x70,%rsp
  4179e9:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4179ed:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4179f1:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  4179f5:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  4179f9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4179fd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  417a01:	48 89 d7             	mov    %rdx,%rdi
  417a04:	48 89 c6             	mov    %rax,%rsi
  417a07:	e8 9f ff ff ff       	call   4179ab <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  417a0c:	83 c0 03             	add    $0x3,%eax
  417a0f:	c1 e8 02             	shr    $0x2,%eax
  417a12:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  417a15:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417a19:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  417a1d:	48 89 c2             	mov    %rax,%rdx
  417a20:	8b 45 f8             	mov    -0x8(%rbp),%eax
  417a23:	48 39 c2             	cmp    %rax,%rdx
  417a26:	0f 9c c0             	setl   %al
  417a29:	0f b6 c0             	movzbl %al,%eax
  417a2c:	48 85 c0             	test   %rax,%rax
  417a2f:	74 1c                	je     417a4d <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x6c>
	  __res.ptr = __last;
  417a31:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417a35:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  __res.ec = errc::value_too_large;
  417a39:	c7 45 c8 4b 00 00 00 	movl   $0x4b,-0x38(%rbp)
	  return __res;
  417a40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  417a44:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417a48:	e9 85 01 00 00       	jmp    417bd2 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1f1>
      constexpr char __digits[] = {
  417a4d:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  417a54:	35 36 37
  417a57:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  417a5e:	64 65 66
  417a61:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  417a65:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      unsigned __pos = __len - 1;
  417a69:	8b 45 f8             	mov    -0x8(%rbp),%eax
  417a6c:	83 e8 01             	sub    $0x1,%eax
  417a6f:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  417a72:	e9 9f 00 00 00       	jmp    417b16 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x135>
	  auto __num = __val & 0xF;
  417a77:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417a7b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  417a7f:	83 e0 0f             	and    $0xf,%eax
  417a82:	ba 00 00 00 00       	mov    $0x0,%edx
  417a87:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  417a8b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 4;
  417a8f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417a93:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  417a97:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  417a9c:	48 c1 ea 04          	shr    $0x4,%rdx
  417aa0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  417aa4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[__pos] = __digits[__num];
  417aa8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  417aab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417aaf:	48 01 c2             	add    %rax,%rdx
  417ab2:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  417ab6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417aba:	48 01 c8             	add    %rcx,%rax
  417abd:	0f b6 00             	movzbl (%rax),%eax
  417ac0:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  417ac2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417ac6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  417aca:	83 e0 0f             	and    $0xf,%eax
  417acd:	ba 00 00 00 00       	mov    $0x0,%edx
  417ad2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  417ad6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 4;
  417ada:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417ade:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  417ae2:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  417ae7:	48 c1 ea 04          	shr    $0x4,%rdx
  417aeb:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  417aef:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[__pos - 1] = __digits[__num];
  417af3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  417af6:	83 e8 01             	sub    $0x1,%eax
  417af9:	89 c2                	mov    %eax,%edx
  417afb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417aff:	48 01 c2             	add    %rax,%rdx
  417b02:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  417b06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417b0a:	48 01 c8             	add    %rcx,%rax
  417b0d:	0f b6 00             	movzbl (%rax),%eax
  417b10:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  417b12:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  417b16:	ba ff 00 00 00       	mov    $0xff,%edx
  417b1b:	b8 00 00 00 00       	mov    $0x0,%eax
  417b20:	48 3b 55 90          	cmp    -0x70(%rbp),%rdx
  417b24:	48 1b 45 98          	sbb    -0x68(%rbp),%rax
  417b28:	0f 82 49 ff ff ff    	jb     417a77 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x96>
      if (__val >= 0x10)
  417b2e:	ba 0f 00 00 00       	mov    $0xf,%edx
  417b33:	b8 00 00 00 00       	mov    $0x0,%eax
  417b38:	48 3b 55 90          	cmp    -0x70(%rbp),%rdx
  417b3c:	48 1b 45 98          	sbb    -0x68(%rbp),%rax
  417b40:	73 5f                	jae    417ba1 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1c0>
	  const auto __num = __val & 0xF;
  417b42:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417b46:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  417b4a:	83 e0 0f             	and    $0xf,%eax
  417b4d:	ba 00 00 00 00       	mov    $0x0,%edx
  417b52:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  417b56:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __val >>= 4;
  417b5a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417b5e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  417b62:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  417b67:	48 c1 ea 04          	shr    $0x4,%rdx
  417b6b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  417b6f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[1] = __digits[__num];
  417b73:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417b77:	48 8d 50 01          	lea    0x1(%rax),%rdx
  417b7b:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  417b7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417b83:	48 01 c8             	add    %rcx,%rax
  417b86:	0f b6 00             	movzbl (%rax),%eax
  417b89:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  417b8b:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  417b8f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417b93:	48 01 d0             	add    %rdx,%rax
  417b96:	0f b6 10             	movzbl (%rax),%edx
  417b99:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417b9d:	88 10                	mov    %dl,(%rax)
  417b9f:	eb 14                	jmp    417bb5 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1d4>
	__first[0] = __digits[__val];
  417ba1:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  417ba5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  417ba9:	48 01 d0             	add    %rdx,%rax
  417bac:	0f b6 10             	movzbl (%rax),%edx
  417baf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417bb3:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  417bb5:	8b 55 f8             	mov    -0x8(%rbp),%edx
  417bb8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417bbc:	48 01 d0             	add    %rdx,%rax
  417bbf:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __res.ec = {};
  417bc3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
      return __res;
  417bca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  417bce:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    }
  417bd2:	c9                   	leave
  417bd3:	c3                   	ret

0000000000417bd4 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  417bd4:	55                   	push   %rbp
  417bd5:	48 89 e5             	mov    %rsp,%rbp
  417bd8:	53                   	push   %rbx
  417bd9:	48 83 ec 48          	sub    $0x48,%rsp
  417bdd:	48 89 f8             	mov    %rdi,%rax
  417be0:	48 89 c1             	mov    %rax,%rcx
  417be3:	bb 00 00 00 00       	mov    $0x0,%ebx
  417be8:	48 89 f3             	mov    %rsi,%rbx
  417beb:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  417bef:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  417bf3:	89 55 bc             	mov    %edx,-0x44(%rbp)
      unsigned __n = 1;
  417bf6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
      const unsigned __b2 = __base  * __base;
  417bfd:	8b 45 bc             	mov    -0x44(%rbp),%eax
  417c00:	0f af c0             	imul   %eax,%eax
  417c03:	89 45 e8             	mov    %eax,-0x18(%rbp)
      const unsigned __b3 = __b2 * __base;
  417c06:	8b 45 bc             	mov    -0x44(%rbp),%eax
  417c09:	8b 55 e8             	mov    -0x18(%rbp),%edx
  417c0c:	0f af c2             	imul   %edx,%eax
  417c0f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
      const unsigned long __b4 = __b3 * __base;
  417c12:	8b 45 bc             	mov    -0x44(%rbp),%eax
  417c15:	0f af 45 e4          	imul   -0x1c(%rbp),%eax
  417c19:	89 c0                	mov    %eax,%eax
  417c1b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  if (__value < (unsigned)__base) return __n;
  417c1f:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  417c22:	89 c8                	mov    %ecx,%eax
  417c24:	48 89 c0             	mov    %rax,%rax
  417c27:	ba 00 00 00 00       	mov    $0x0,%edx
  417c2c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  417c30:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  417c34:	48 19 d1             	sbb    %rdx,%rcx
  417c37:	73 08                	jae    417c41 <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x6d>
  417c39:	8b 45 ec             	mov    -0x14(%rbp),%eax
  417c3c:	e9 8b 00 00 00       	jmp    417ccc <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b2) return __n + 1;
  417c41:	8b 45 e8             	mov    -0x18(%rbp),%eax
  417c44:	48 89 c0             	mov    %rax,%rax
  417c47:	ba 00 00 00 00       	mov    $0x0,%edx
  417c4c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  417c50:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  417c54:	48 19 d1             	sbb    %rdx,%rcx
  417c57:	73 08                	jae    417c61 <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x8d>
  417c59:	8b 45 ec             	mov    -0x14(%rbp),%eax
  417c5c:	83 c0 01             	add    $0x1,%eax
  417c5f:	eb 6b                	jmp    417ccc <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b3) return __n + 2;
  417c61:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  417c64:	48 89 c0             	mov    %rax,%rax
  417c67:	ba 00 00 00 00       	mov    $0x0,%edx
  417c6c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  417c70:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  417c74:	48 19 d1             	sbb    %rdx,%rcx
  417c77:	73 08                	jae    417c81 <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xad>
  417c79:	8b 45 ec             	mov    -0x14(%rbp),%eax
  417c7c:	83 c0 02             	add    $0x2,%eax
  417c7f:	eb 4b                	jmp    417ccc <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b4) return __n + 3;
  417c81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417c85:	ba 00 00 00 00       	mov    $0x0,%edx
  417c8a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  417c8e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  417c92:	48 19 d1             	sbb    %rdx,%rcx
  417c95:	73 08                	jae    417c9f <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xcb>
  417c97:	8b 45 ec             	mov    -0x14(%rbp),%eax
  417c9a:	83 c0 03             	add    $0x3,%eax
  417c9d:	eb 2d                	jmp    417ccc <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  __value /= __b4;
  417c9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417ca3:	ba 00 00 00 00       	mov    $0x0,%edx
  417ca8:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  417cac:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  417cb0:	48 89 d1             	mov    %rdx,%rcx
  417cb3:	48 89 c2             	mov    %rax,%rdx
  417cb6:	e8 c5 c3 fe ff       	call   404080 <__udivti3@plt>
  417cbb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  417cbf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  __n += 4;
  417cc3:	83 45 ec 04          	addl   $0x4,-0x14(%rbp)
	  if (__value < (unsigned)__base) return __n;
  417cc7:	e9 53 ff ff ff       	jmp    417c1f <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x4b>
    }
  417ccc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417cd0:	c9                   	leave
  417cd1:	c3                   	ret

0000000000417cd2 <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  417cd2:	55                   	push   %rbp
  417cd3:	48 89 e5             	mov    %rsp,%rbp
  417cd6:	48 83 ec 40          	sub    $0x40,%rsp
  417cda:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  417cde:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  417ce2:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  417ce6:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  417cea:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  417cee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417cf2:	ba 0a 00 00 00       	mov    $0xa,%edx
  417cf7:	48 89 cf             	mov    %rcx,%rdi
  417cfa:	48 89 c6             	mov    %rax,%rsi
  417cfd:	e8 d2 fe ff ff       	call   417bd4 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>
  417d02:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  417d05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417d09:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  417d0d:	48 89 c2             	mov    %rax,%rdx
  417d10:	8b 45 fc             	mov    -0x4(%rbp),%eax
  417d13:	48 39 c2             	cmp    %rax,%rdx
  417d16:	0f 9c c0             	setl   %al
  417d19:	0f b6 c0             	movzbl %al,%eax
  417d1c:	48 85 c0             	test   %rax,%rax
  417d1f:	74 19                	je     417d3a <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_+0x68>
	  __res.ptr = __last;
  417d21:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417d25:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  417d29:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  417d30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417d34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417d38:	eb 37                	jmp    417d71 <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_+0x9f>
      __detail::__to_chars_10_impl(__first, __len, __val);
  417d3a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  417d3e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417d42:	8b 75 fc             	mov    -0x4(%rbp),%esi
  417d45:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  417d49:	48 89 d1             	mov    %rdx,%rcx
  417d4c:	48 89 c2             	mov    %rax,%rdx
  417d4f:	e8 58 0f 00 00       	call   418cac <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_>
      __res.ptr = __first + __len;
  417d54:	8b 55 fc             	mov    -0x4(%rbp),%edx
  417d57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417d5b:	48 01 d0             	add    %rdx,%rax
  417d5e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  417d62:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  417d69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417d6d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  417d71:	c9                   	leave
  417d72:	c3                   	ret

0000000000417d73 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  417d73:	55                   	push   %rbp
  417d74:	48 89 e5             	mov    %rsp,%rbp
  417d77:	48 83 ec 60          	sub    $0x60,%rsp
  417d7b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  417d7f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  417d83:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  417d87:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
      unsigned __len = 0;
  417d8b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  417d92:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  417d96:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417d9a:	48 89 d7             	mov    %rdx,%rdi
  417d9d:	48 89 c6             	mov    %rax,%rsi
  417da0:	e8 06 fc ff ff       	call   4179ab <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  417da5:	83 c0 02             	add    $0x2,%eax
  417da8:	89 c2                	mov    %eax,%edx
  417daa:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  417daf:	48 0f af c2          	imul   %rdx,%rax
  417db3:	48 c1 e8 20          	shr    $0x20,%rax
  417db7:	d1 e8                	shr    %eax
  417db9:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  417dbc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  417dc0:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  417dc4:	48 89 c2             	mov    %rax,%rdx
  417dc7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  417dca:	48 39 c2             	cmp    %rax,%rdx
  417dcd:	0f 9c c0             	setl   %al
  417dd0:	0f b6 c0             	movzbl %al,%eax
  417dd3:	48 85 c0             	test   %rax,%rax
  417dd6:	74 1c                	je     417df4 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x81>
	  __res.ptr = __last;
  417dd8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  417ddc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  __res.ec = errc::value_too_large;
  417de0:	c7 45 c8 4b 00 00 00 	movl   $0x4b,-0x38(%rbp)
	  return __res;
  417de7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  417deb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417def:	e9 4c 01 00 00       	jmp    417f40 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1cd>
      unsigned __pos = __len - 1;
  417df4:	8b 45 f8             	mov    -0x8(%rbp),%eax
  417df7:	83 e8 01             	sub    $0x1,%eax
  417dfa:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  417dfd:	e9 93 00 00 00       	jmp    417e95 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x122>
	  auto __num = __val & 7;
  417e02:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417e06:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  417e0a:	83 e0 07             	and    $0x7,%eax
  417e0d:	ba 00 00 00 00       	mov    $0x0,%edx
  417e12:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  417e16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 3;
  417e1a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417e1e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  417e22:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  417e27:	48 c1 ea 03          	shr    $0x3,%rdx
  417e2b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  417e2f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[__pos] = '0' + __num;
  417e33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417e37:	8d 48 30             	lea    0x30(%rax),%ecx
  417e3a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  417e3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417e41:	48 01 d0             	add    %rdx,%rax
  417e44:	89 ca                	mov    %ecx,%edx
  417e46:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  417e48:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417e4c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  417e50:	83 e0 07             	and    $0x7,%eax
  417e53:	ba 00 00 00 00       	mov    $0x0,%edx
  417e58:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  417e5c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 3;
  417e60:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417e64:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  417e68:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  417e6d:	48 c1 ea 03          	shr    $0x3,%rdx
  417e71:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  417e75:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[__pos - 1] = '0' + __num;
  417e79:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417e7d:	8d 50 30             	lea    0x30(%rax),%edx
  417e80:	8b 45 fc             	mov    -0x4(%rbp),%eax
  417e83:	83 e8 01             	sub    $0x1,%eax
  417e86:	89 c1                	mov    %eax,%ecx
  417e88:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417e8c:	48 01 c8             	add    %rcx,%rax
  417e8f:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  417e91:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  417e95:	ba 3f 00 00 00       	mov    $0x3f,%edx
  417e9a:	b8 00 00 00 00       	mov    $0x0,%eax
  417e9f:	48 3b 55 a0          	cmp    -0x60(%rbp),%rdx
  417ea3:	48 1b 45 a8          	sbb    -0x58(%rbp),%rax
  417ea7:	0f 82 55 ff ff ff    	jb     417e02 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x8f>
      if (__val >= 010)
  417ead:	ba 07 00 00 00       	mov    $0x7,%edx
  417eb2:	b8 00 00 00 00       	mov    $0x0,%eax
  417eb7:	48 3b 55 a0          	cmp    -0x60(%rbp),%rdx
  417ebb:	48 1b 45 a8          	sbb    -0x58(%rbp),%rax
  417ebf:	73 53                	jae    417f14 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1a1>
	  auto const __num = __val & 7;
  417ec1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417ec5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  417ec9:	83 e0 07             	and    $0x7,%eax
  417ecc:	ba 00 00 00 00       	mov    $0x0,%edx
  417ed1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  417ed5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __val >>= 3;
  417ed9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417edd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  417ee1:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  417ee6:	48 c1 ea 03          	shr    $0x3,%rdx
  417eea:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  417eee:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[1] = '0' + __num;
  417ef2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417ef6:	8d 50 30             	lea    0x30(%rax),%edx
  417ef9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417efd:	48 83 c0 01          	add    $0x1,%rax
  417f01:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  417f03:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417f07:	83 c0 30             	add    $0x30,%eax
  417f0a:	89 c2                	mov    %eax,%edx
  417f0c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417f10:	88 10                	mov    %dl,(%rax)
  417f12:	eb 0f                	jmp    417f23 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1b0>
	__first[0] = '0' + __val;
  417f14:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  417f18:	83 c0 30             	add    $0x30,%eax
  417f1b:	89 c2                	mov    %eax,%edx
  417f1d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417f21:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  417f23:	8b 55 f8             	mov    -0x8(%rbp),%edx
  417f26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417f2a:	48 01 d0             	add    %rdx,%rax
  417f2d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __res.ec = {};
  417f31:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
      return __res;
  417f38:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  417f3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    }
  417f40:	c9                   	leave
  417f41:	c3                   	ret

0000000000417f42 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  417f42:	55                   	push   %rbp
  417f43:	48 89 e5             	mov    %rsp,%rbp
  417f46:	48 83 ec 40          	sub    $0x40,%rsp
  417f4a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  417f4e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  417f52:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  417f56:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  417f5a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417f5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417f62:	48 89 d7             	mov    %rdx,%rdi
  417f65:	48 89 c6             	mov    %rax,%rsi
  417f68:	e8 3e fa ff ff       	call   4179ab <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  417f6d:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  417f70:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417f74:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  417f78:	48 89 c2             	mov    %rax,%rdx
  417f7b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  417f7e:	48 39 c2             	cmp    %rax,%rdx
  417f81:	0f 9c c0             	setl   %al
  417f84:	0f b6 c0             	movzbl %al,%eax
  417f87:	48 85 c0             	test   %rax,%rax
  417f8a:	74 19                	je     417fa5 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0x63>
	  __res.ptr = __last;
  417f8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417f90:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  417f94:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  417f9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417f9f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417fa3:	eb 6e                	jmp    418013 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0xd1>
      unsigned __pos = __len - 1;
  417fa5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  417fa8:	83 e8 01             	sub    $0x1,%eax
  417fab:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  417fae:	eb 39                	jmp    417fe9 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0xa7>
	  __first[__pos--] = '0' + (__val & 1);
  417fb0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  417fb4:	83 e0 01             	and    $0x1,%eax
  417fb7:	83 c0 30             	add    $0x30,%eax
  417fba:	89 c6                	mov    %eax,%esi
  417fbc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  417fc0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  417fc3:	8d 50 ff             	lea    -0x1(%rax),%edx
  417fc6:	89 55 fc             	mov    %edx,-0x4(%rbp)
  417fc9:	89 c0                	mov    %eax,%eax
  417fcb:	48 01 c8             	add    %rcx,%rax
  417fce:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  417fd1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  417fd5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417fd9:	48 0f ac d0 01       	shrd   $0x1,%rdx,%rax
  417fde:	48 d1 ea             	shr    %rdx
  417fe1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  417fe5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      while (__pos)
  417fe9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  417fed:	75 c1                	jne    417fb0 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0x6e>
      __first[0] = '1';
  417fef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417ff3:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  417ff6:	8b 55 f8             	mov    -0x8(%rbp),%edx
  417ff9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417ffd:	48 01 d0             	add    %rdx,%rax
  418000:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  418004:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  41800b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41800f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  418013:	c9                   	leave
  418014:	c3                   	ret

0000000000418015 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  418015:	55                   	push   %rbp
  418016:	48 89 e5             	mov    %rsp,%rbp
  418019:	53                   	push   %rbx
  41801a:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  418021:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  418028:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  41802f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  418036:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  41803d:	44 89 85 5c ff ff ff 	mov    %r8d,-0xa4(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  418044:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
  41804a:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  418051:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  418058:	48 89 cf             	mov    %rcx,%rdi
  41805b:	48 89 c6             	mov    %rax,%rsi
  41805e:	e8 71 fb ff ff       	call   417bd4 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>
  418063:	89 45 e8             	mov    %eax,-0x18(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418066:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  41806d:	48 2b 85 78 ff ff ff 	sub    -0x88(%rbp),%rax
  418074:	48 89 c2             	mov    %rax,%rdx
  418077:	8b 45 e8             	mov    -0x18(%rbp),%eax
  41807a:	48 39 c2             	cmp    %rax,%rdx
  41807d:	0f 9c c0             	setl   %al
  418080:	0f b6 c0             	movzbl %al,%eax
  418083:	48 85 c0             	test   %rax,%rax
  418086:	74 1f                	je     4180a7 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x92>
	  __res.ptr = __last;
  418088:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  41808f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	  __res.ec = errc::value_too_large;
  418093:	c7 45 b8 4b 00 00 00 	movl   $0x4b,-0x48(%rbp)
	  return __res;
  41809a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41809e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4180a2:	e9 45 01 00 00       	jmp    4181ec <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x1d7>
      unsigned __pos = __len - 1;
  4180a7:	8b 45 e8             	mov    -0x18(%rbp),%eax
  4180aa:	83 e8 01             	sub    $0x1,%eax
  4180ad:	89 45 ec             	mov    %eax,-0x14(%rbp)
      constexpr char __digits[] = {
  4180b0:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  4180b7:	35 36 37
  4180ba:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  4180c1:	64 65 66
  4180c4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4180c8:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4180cc:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  4180d3:	6c 6d 6e
  4180d6:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  4180dd:	74 75 76
  4180e0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4180e4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  4180e8:	c7 45 a0 77 78 79 7a 	movl   $0x7a797877,-0x60(%rbp)
      while (__val >= (unsigned)__base)
  4180ef:	e9 97 00 00 00       	jmp    41818b <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x176>
	  auto const __quo = __val / __base;
  4180f4:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  4180fa:	48 98                	cltq
  4180fc:	48 99                	cqto
  4180fe:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
  418105:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  41810c:	48 89 d1             	mov    %rdx,%rcx
  41810f:	48 89 c2             	mov    %rax,%rdx
  418112:	e8 69 bf fe ff       	call   404080 <__udivti3@plt>
  418117:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  41811b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto const __rem = __val % __base;
  41811f:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  418125:	48 98                	cltq
  418127:	48 99                	cqto
  418129:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  418130:	48 8b 9d 68 ff ff ff 	mov    -0x98(%rbp),%rbx
  418137:	48 89 cf             	mov    %rcx,%rdi
  41813a:	48 89 de             	mov    %rbx,%rsi
  41813d:	48 89 d1             	mov    %rdx,%rcx
  418140:	48 89 c2             	mov    %rax,%rdx
  418143:	e8 c8 c1 fe ff       	call   404310 <__umodti3@plt>
  418148:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41814c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  __first[__pos--] = __digits[__rem];
  418150:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  418154:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418158:	48 01 d0             	add    %rdx,%rax
  41815b:	0f b6 10             	movzbl (%rax),%edx
  41815e:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  418165:	8b 45 ec             	mov    -0x14(%rbp),%eax
  418168:	8d 48 ff             	lea    -0x1(%rax),%ecx
  41816b:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  41816e:	89 c0                	mov    %eax,%eax
  418170:	48 01 f0             	add    %rsi,%rax
  418173:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  418175:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418179:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41817d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  418184:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
      while (__val >= (unsigned)__base)
  41818b:	8b 8d 5c ff ff ff    	mov    -0xa4(%rbp),%ecx
  418191:	89 c8                	mov    %ecx,%eax
  418193:	48 89 c0             	mov    %rax,%rax
  418196:	ba 00 00 00 00       	mov    $0x0,%edx
  41819b:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  4181a2:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  4181a9:	48 19 d1             	sbb    %rdx,%rcx
  4181ac:	0f 83 42 ff ff ff    	jae    4180f4 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0xdf>
      *__first = __digits[__val];
  4181b2:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  4181b6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4181bd:	48 01 d0             	add    %rdx,%rax
  4181c0:	0f b6 10             	movzbl (%rax),%edx
  4181c3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4181ca:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  4181cc:	8b 55 e8             	mov    -0x18(%rbp),%edx
  4181cf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4181d6:	48 01 d0             	add    %rdx,%rax
  4181d9:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      __res.ec = {};
  4181dd:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
      return __res;
  4181e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4181e8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    }
  4181ec:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4181f0:	c9                   	leave
  4181f1:	c3                   	ret

00000000004181f2 <_ZSt11__addressofIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4181f2:	55                   	push   %rbp
  4181f3:	48 89 e5             	mov    %rsp,%rbp
  4181f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  4181fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4181fe:	5d                   	pop    %rbp
  4181ff:	c3                   	ret

0000000000418200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
    basic_string<_CharT, _Traits, _Alloc>::
  418200:	55                   	push   %rbp
  418201:	48 89 e5             	mov    %rsp,%rbp
  418204:	53                   	push   %rbx
  418205:	48 83 ec 38          	sub    $0x38,%rsp
  418209:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  41820d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (this != std::__addressof(__str))
  418211:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418215:	48 89 c7             	mov    %rax,%rdi
  418218:	e8 d5 ff ff ff       	call   4181f2 <_ZSt11__addressofIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS7_>
  41821d:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  418221:	0f 95 c0             	setne  %al
  418224:	84 c0                	test   %al,%al
  418226:	0f 84 c9 00 00 00    	je     4182f5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xf5>
	  const size_type __rsize = __str.length();
  41822c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418230:	48 89 c7             	mov    %rax,%rdi
  418233:	e8 76 ea fe ff       	call   406cae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  418238:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  const size_type __capacity = capacity();
  41823c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418240:	48 89 c7             	mov    %rax,%rdi
  418243:	e8 5a 21 ff ff       	call   40a3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  418248:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__rsize > __capacity)
  41824c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418250:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  418254:	73 55                	jae    4182ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xab>
	      size_type __new_capacity = __rsize;
  418256:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41825a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      pointer __tmp = _M_create(__new_capacity, __capacity);
  41825e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  418262:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  418266:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41826a:	48 89 ce             	mov    %rcx,%rsi
  41826d:	48 89 c7             	mov    %rax,%rdi
  418270:	e8 85 19 ff ff       	call   409bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  418275:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      _M_dispose();
  418279:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41827d:	48 89 c7             	mov    %rax,%rdi
  418280:	e8 21 08 ff ff       	call   408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	      _M_data(__tmp);
  418285:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  418289:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41828d:	48 89 d6             	mov    %rdx,%rsi
  418290:	48 89 c7             	mov    %rax,%rdi
  418293:	e8 66 08 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	      _M_capacity(__new_capacity);
  418298:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41829c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4182a0:	48 89 d6             	mov    %rdx,%rsi
  4182a3:	48 89 c7             	mov    %rax,%rdi
  4182a6:	e8 6d 08 ff ff       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	  if (__rsize)
  4182ab:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4182b0:	74 30                	je     4182e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xe2>
	    this->_S_copy(_M_data(), __str._M_data(), __rsize);
  4182b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4182b6:	48 89 c7             	mov    %rax,%rdi
  4182b9:	e8 66 e6 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4182be:	48 89 c3             	mov    %rax,%rbx
  4182c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4182c5:	48 89 c7             	mov    %rax,%rdi
  4182c8:	e8 57 e6 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4182cd:	48 89 c1             	mov    %rax,%rcx
  4182d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4182d4:	48 89 c2             	mov    %rax,%rdx
  4182d7:	48 89 de             	mov    %rbx,%rsi
  4182da:	48 89 cf             	mov    %rcx,%rdi
  4182dd:	e8 92 29 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	  _M_set_length(__rsize);
  4182e2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4182e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4182ea:	48 89 d6             	mov    %rdx,%rsi
  4182ed:	48 89 c7             	mov    %rax,%rdi
  4182f0:	e8 41 e6 fe ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
    }
  4182f5:	90                   	nop
  4182f6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4182fa:	c9                   	leave
  4182fb:	c3                   	ret

00000000004182fc <_ZNKSt8__format17_WidthPrecVisitorclIcEEmRT_>:
      operator()(_Tp& __arg) const
  4182fc:	55                   	push   %rbp
  4182fd:	48 89 e5             	mov    %rsp,%rbp
  418300:	48 83 ec 10          	sub    $0x10,%rsp
  418304:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418308:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41830c:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  418311:	e8 13 cd fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

0000000000418316 <_ZNKSt8__format17_WidthPrecVisitorclIPKcEEmRT_>:
      operator()(_Tp& __arg) const
  418316:	55                   	push   %rbp
  418317:	48 89 e5             	mov    %rsp,%rbp
  41831a:	48 83 ec 10          	sub    $0x10,%rsp
  41831e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418322:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418326:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  41832b:	e8 f9 cc fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

0000000000418330 <_ZNKSt8__format17_WidthPrecVisitorclISt17basic_string_viewIcSt11char_traitsIcEEEEmRT_>:
      operator()(_Tp& __arg) const
  418330:	55                   	push   %rbp
  418331:	48 89 e5             	mov    %rsp,%rbp
  418334:	48 83 ec 10          	sub    $0x10,%rsp
  418338:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41833c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418340:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  418345:	e8 df cc fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

000000000041834a <_ZNKSt8__format17_WidthPrecVisitorclINSt16basic_format_argISt20basic_format_contextINS_10_Sink_iterIcEEcEE6handleEEEmRT_>:
      operator()(_Tp& __arg) const
  41834a:	55                   	push   %rbp
  41834b:	48 89 e5             	mov    %rsp,%rbp
  41834e:	48 83 ec 10          	sub    $0x10,%rsp
  418352:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418356:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41835a:	bf 58 a4 41 00       	mov    $0x41a458,%edi
  41835f:	e8 c5 cc fe ff       	call   405029 <_ZSt20__throw_format_errorPKc>

0000000000418364 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIfNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  418364:	55                   	push   %rbp
  418365:	48 89 e5             	mov    %rsp,%rbp
  418368:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41836c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418370:	5d                   	pop    %rbp
  418371:	c3                   	ret

0000000000418372 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  418372:	55                   	push   %rbp
  418373:	48 89 e5             	mov    %rsp,%rbp
  418376:	48 83 ec 10          	sub    $0x10,%rsp
  41837a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41837e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418382:	48 8b 00             	mov    (%rax),%rax
  418385:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  418389:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  41838d:	48 89 d6             	mov    %rdx,%rsi
  418390:	48 89 c7             	mov    %rax,%rdi
  418393:	e8 9e e5 fe ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  418398:	90                   	nop
  418399:	c9                   	leave
  41839a:	c3                   	ret
  41839b:	90                   	nop

000000000041839c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_>:
    basic_string<_CharT, _Traits, _Alloc>::
  41839c:	55                   	push   %rbp
  41839d:	48 89 e5             	mov    %rsp,%rbp
  4183a0:	53                   	push   %rbx
  4183a1:	48 83 ec 48          	sub    $0x48,%rsp
  4183a5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4183a9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4183ad:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  4183b1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4183b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4183b9:	48 89 d6             	mov    %rdx,%rsi
  4183bc:	48 89 c7             	mov    %rax,%rdi
  4183bf:	e8 0c 20 ff ff       	call   40a3d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  4183c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4183c8:	48 89 c7             	mov    %rax,%rdi
  4183cb:	e8 54 e5 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4183d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4183d4:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  4183d9:	84 c0                	test   %al,%al
  4183db:	74 19                	je     4183f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5a>
  4183dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4183e1:	48 89 c7             	mov    %rax,%rdi
  4183e4:	e8 37 c8 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4183e9:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  4183ed:	73 07                	jae    4183f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5a>
  4183ef:	b8 01 00 00 00       	mov    $0x1,%eax
  4183f4:	eb 05                	jmp    4183fb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5f>
  4183f6:	b8 00 00 00 00       	mov    $0x0,%eax
  4183fb:	84 c0                	test   %al,%al
  4183fd:	74 39                	je     418438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  4183ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418403:	48 89 c7             	mov    %rax,%rdi
  418406:	e8 15 c8 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41840b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41840f:	48 89 d3             	mov    %rdx,%rbx
  418412:	48 29 c3             	sub    %rax,%rbx
  418415:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418419:	48 89 c7             	mov    %rax,%rdi
  41841c:	e8 ff c7 fe ff       	call   404c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  418421:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418425:	48 01 d0             	add    %rdx,%rax
  418428:	ba 00 00 00 00       	mov    $0x0,%edx
  41842d:	48 89 de             	mov    %rbx,%rsi
  418430:	48 89 c7             	mov    %rax,%rdi
  418433:	e8 40 c4 fe ff       	call   404878 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  418438:	66 0f ef c0          	pxor   %xmm0,%xmm0
  41843c:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  418440:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418444:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  418448:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41844c:	48 89 c7             	mov    %rax,%rdi
  41844f:	e8 a0 0b 00 00       	call   418ff4 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeEUlPcmE_EONSt16remove_referenceIT_E4typeEOSE_>
  418454:	48 89 c1             	mov    %rax,%rcx
  418457:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41845b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41845f:	48 89 c6             	mov    %rax,%rsi
  418462:	48 89 cf             	mov    %rcx,%rdi
  418465:	e8 46 cb ff ff       	call   414fb0 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m>
  41846a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  41846e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418472:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  418476:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41847a:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  41847e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  418482:	48 89 c7             	mov    %rax,%rdi
  418485:	e8 e8 fe ff ff       	call   418372 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>
  41848a:	eb 1a                	jmp    4184a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x10a>
  41848c:	48 89 c3             	mov    %rax,%rbx
  41848f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  418493:	48 89 c7             	mov    %rax,%rdi
  418496:	e8 d7 fe ff ff       	call   418372 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>
  41849b:	48 89 d8             	mov    %rbx,%rax
  41849e:	48 89 c7             	mov    %rax,%rdi
  4184a1:	e8 ca be fe ff       	call   404370 <_Unwind_Resume@plt>
  4184a6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4184aa:	c9                   	leave
  4184ab:	c3                   	ret

00000000004184ac <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
  4184ac:	55                   	push   %rbp
  4184ad:	48 89 e5             	mov    %rsp,%rbp
  4184b0:	48 83 ec 20          	sub    $0x20,%rsp
  4184b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4184b8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
      { return __normal_iterator(_M_current++); }
  4184bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4184bf:	48 8b 00             	mov    (%rax),%rax
  4184c2:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4184c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4184ca:	48 89 0a             	mov    %rcx,(%rdx)
  4184cd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4184d1:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  4184d5:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4184d9:	48 89 d6             	mov    %rdx,%rsi
  4184dc:	48 89 c7             	mov    %rax,%rdi
  4184df:	e8 c0 30 ff ff       	call   40b5a4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  4184e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4184e8:	c9                   	leave
  4184e9:	c3                   	ret

00000000004184ea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
  4184ea:	55                   	push   %rbp
  4184eb:	48 89 e5             	mov    %rsp,%rbp
  4184ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  4184f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4184f6:	48 8b 00             	mov    (%rax),%rax
  4184f9:	5d                   	pop    %rbp
  4184fa:	c3                   	ret
  4184fb:	90                   	nop

00000000004184fc <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>:
	  _First_and_curr(_It __first, _It __curr)
  4184fc:	55                   	push   %rbp
  4184fd:	48 89 e5             	mov    %rsp,%rbp
  418500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418504:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  418508:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  : _M_first(__first), _M_curr(__curr) { }
  41850c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418510:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  418514:	48 89 10             	mov    %rdx,(%rax)
  418517:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41851b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41851f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  418523:	90                   	nop
  418524:	5d                   	pop    %rbp
  418525:	c3                   	ret

0000000000418526 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>:
      _M_read()
  418526:	55                   	push   %rbp
  418527:	48 89 e5             	mov    %rsp,%rbp
  41852a:	48 83 ec 10          	sub    $0x10,%rsp
  41852e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	    _M_read_utf32();
  418532:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418536:	48 89 c7             	mov    %rax,%rdi
  418539:	e8 c4 0a 00 00       	call   419002 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev>
      }
  41853e:	90                   	nop
  41853f:	c9                   	leave
  418540:	c3                   	ret
  418541:	90                   	nop

0000000000418542 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardC1EPS4_>:
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
  418542:	55                   	push   %rbp
  418543:	48 89 e5             	mov    %rsp,%rbp
  418546:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41854a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41854e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418552:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  418556:	48 89 10             	mov    %rdx,(%rax)
  418559:	90                   	nop
  41855a:	5d                   	pop    %rbp
  41855b:	c3                   	ret

000000000041855c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>:
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
  41855c:	55                   	push   %rbp
  41855d:	48 89 e5             	mov    %rsp,%rbp
  418560:	48 83 ec 10          	sub    $0x10,%rsp
  418564:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418568:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41856c:	48 8b 00             	mov    (%rax),%rax
  41856f:	48 85 c0             	test   %rax,%rax
  418572:	74 0f                	je     418583 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev+0x27>
  418574:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418578:	48 8b 00             	mov    (%rax),%rax
  41857b:	48 89 c7             	mov    %rax,%rdi
  41857e:	e8 23 05 ff ff       	call   408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  418583:	90                   	nop
  418584:	c9                   	leave
  418585:	c3                   	ret

0000000000418586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
  418586:	55                   	push   %rbp
  418587:	48 89 e5             	mov    %rsp,%rbp
  41858a:	53                   	push   %rbx
  41858b:	48 83 ec 58          	sub    $0x58,%rsp
  41858f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
	size_type __len = 0;
  418593:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  41859a:	00
	size_type __capacity = size_type(_S_local_capacity);
  41859b:	48 c7 45 c0 0f 00 00 	movq   $0xf,-0x40(%rbp)
  4185a2:	00
  4185a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4185a7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (std::is_constant_evaluated())
  4185ab:	e8 8b bf fe ff       	call   40453b <_ZSt21is_constant_evaluatedv>
  4185b0:	84 c0                	test   %al,%al
  4185b2:	74 28                	je     4185dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x56>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4185b4:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  4185bb:	00
  4185bc:	eb 17                	jmp    4185d5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x4f>
	    _M_local_buf[__i] = _CharT();
  4185be:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4185c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4185c6:	48 01 d0             	add    %rdx,%rax
  4185c9:	48 83 c0 10          	add    $0x10,%rax
  4185cd:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4185d0:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
  4185d5:	48 83 7d d0 0f       	cmpq   $0xf,-0x30(%rbp)
  4185da:	76 e2                	jbe    4185be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x38>
      }
  4185dc:	90                   	nop
	while (__beg != __end && __len < __capacity)
  4185dd:	eb 28                	jmp    418607 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x81>
	    _M_local_buf[__len++] = *__beg;
  4185df:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4185e3:	e8 e8 0a 00 00       	call   4190d0 <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>
  4185e8:	89 c2                	mov    %eax,%edx
  4185ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4185ee:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4185f2:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  4185f6:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  4185fa:	88 54 01 10          	mov    %dl,0x10(%rcx,%rax,1)
	    ++__beg;
  4185fe:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  418602:	e8 f5 0a 00 00       	call   4190fc <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>
	while (__beg != __end && __len < __capacity)
  418607:	48 83 ec 28          	sub    $0x28,%rsp
  41860b:	48 89 e0             	mov    %rsp,%rax
  41860e:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  418612:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  418616:	48 89 08             	mov    %rcx,(%rax)
  418619:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41861d:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  418621:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  418625:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418629:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41862d:	48 8b 55 58          	mov    0x58(%rbp),%rdx
  418631:	48 89 50 20          	mov    %rdx,0x20(%rax)
  418635:	48 83 ec 28          	sub    $0x28,%rsp
  418639:	48 89 e0             	mov    %rsp,%rax
  41863c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  418640:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  418644:	48 89 08             	mov    %rcx,(%rax)
  418647:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41864b:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  41864f:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  418653:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418657:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41865b:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  41865f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  418663:	e8 20 0a 00 00       	call   419088 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>
  418668:	48 83 c4 50          	add    $0x50,%rsp
  41866c:	83 f0 01             	xor    $0x1,%eax
  41866f:	84 c0                	test   %al,%al
  418671:	74 11                	je     418684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0xfe>
  418673:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418677:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  41867b:	73 07                	jae    418684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0xfe>
  41867d:	b8 01 00 00 00       	mov    $0x1,%eax
  418682:	eb 05                	jmp    418689 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x103>
  418684:	b8 00 00 00 00       	mov    $0x0,%eax
  418689:	84 c0                	test   %al,%al
  41868b:	0f 85 4e ff ff ff    	jne    4185df <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x59>
	} __guard(this);
  418691:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418695:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  418699:	48 89 d6             	mov    %rdx,%rsi
  41869c:	48 89 c7             	mov    %rax,%rdi
  41869f:	e8 9e fe ff ff       	call   418542 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardC1EPS4_>
	while (__beg != __end)
  4186a4:	e9 c7 00 00 00       	jmp    418770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x1ea>
	    if (__len == __capacity)
  4186a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4186ad:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4186b1:	75 7b                	jne    41872e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x1a8>
		__capacity = __len + 1;
  4186b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4186b7:	48 83 c0 01          	add    $0x1,%rax
  4186bb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		pointer __another = _M_create(__capacity, __len);
  4186bf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4186c3:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  4186c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4186cb:	48 89 ce             	mov    %rcx,%rsi
  4186ce:	48 89 c7             	mov    %rax,%rdi
  4186d1:	e8 24 15 ff ff       	call   409bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  4186d6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		this->_S_copy(__another, _M_data(), __len);
  4186da:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4186de:	48 89 c7             	mov    %rax,%rdi
  4186e1:	e8 3e e2 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4186e6:	48 89 c1             	mov    %rax,%rcx
  4186e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4186ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4186f1:	48 89 ce             	mov    %rcx,%rsi
  4186f4:	48 89 c7             	mov    %rax,%rdi
  4186f7:	e8 78 25 ff ff       	call   40ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
		_M_dispose();
  4186fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418700:	48 89 c7             	mov    %rax,%rdi
  418703:	e8 9e 03 ff ff       	call   408aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
		_M_data(__another);
  418708:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41870c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418710:	48 89 d6             	mov    %rdx,%rsi
  418713:	48 89 c7             	mov    %rax,%rdi
  418716:	e8 e3 03 ff ff       	call   408afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		_M_capacity(__capacity);
  41871b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41871f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418723:	48 89 d6             	mov    %rdx,%rsi
  418726:	48 89 c7             	mov    %rax,%rdi
  418729:	e8 ea 03 ff ff       	call   408b18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	    traits_type::assign(_M_data()[__len++], *__beg);
  41872e:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  418732:	e8 99 09 00 00       	call   4190d0 <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>
  418737:	88 45 cf             	mov    %al,-0x31(%rbp)
  41873a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41873e:	48 89 c7             	mov    %rax,%rdi
  418741:	e8 de e1 fe ff       	call   406924 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418746:	48 89 c2             	mov    %rax,%rdx
  418749:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41874d:	48 8d 48 01          	lea    0x1(%rax),%rcx
  418751:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  418755:	48 01 c2             	add    %rax,%rdx
  418758:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
  41875c:	48 89 c6             	mov    %rax,%rsi
  41875f:	48 89 d7             	mov    %rdx,%rdi
  418762:	e8 7a be fe ff       	call   4045e1 <_ZNSt11char_traitsIcE6assignERcRKc>
	    ++__beg;
  418767:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  41876b:	e8 8c 09 00 00       	call   4190fc <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>
	while (__beg != __end)
  418770:	48 83 ec 28          	sub    $0x28,%rsp
  418774:	48 89 e0             	mov    %rsp,%rax
  418777:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  41877b:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  41877f:	48 89 08             	mov    %rcx,(%rax)
  418782:	48 89 58 08          	mov    %rbx,0x8(%rax)
  418786:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  41878a:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  41878e:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418792:	48 89 58 18          	mov    %rbx,0x18(%rax)
  418796:	48 8b 55 58          	mov    0x58(%rbp),%rdx
  41879a:	48 89 50 20          	mov    %rdx,0x20(%rax)
  41879e:	48 83 ec 28          	sub    $0x28,%rsp
  4187a2:	48 89 e0             	mov    %rsp,%rax
  4187a5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4187a9:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4187ad:	48 89 08             	mov    %rcx,(%rax)
  4187b0:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4187b4:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  4187b8:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  4187bc:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4187c0:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4187c4:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  4187c8:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4187cc:	e8 b7 08 00 00       	call   419088 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>
  4187d1:	48 83 c4 50          	add    $0x50,%rsp
  4187d5:	83 f0 01             	xor    $0x1,%eax
  4187d8:	84 c0                	test   %al,%al
  4187da:	0f 85 c9 fe ff ff    	jne    4186a9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x123>
	__guard._M_guarded = 0;
  4187e0:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  4187e7:	00
	_M_set_length(__len);
  4187e8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4187ec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4187f0:	48 89 d6             	mov    %rdx,%rsi
  4187f3:	48 89 c7             	mov    %rax,%rdi
  4187f6:	e8 3b e1 fe ff       	call   406936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  4187fb:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  4187ff:	48 89 c7             	mov    %rax,%rdi
  418802:	e8 55 fd ff ff       	call   41855c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>
  418807:	eb 1a                	jmp    418823 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x29d>
  418809:	48 89 c3             	mov    %rax,%rbx
  41880c:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  418810:	48 89 c7             	mov    %rax,%rdi
  418813:	e8 44 fd ff ff       	call   41855c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>
  418818:	48 89 d8             	mov    %rbx,%rax
  41881b:	48 89 c7             	mov    %rax,%rdi
  41881e:	e8 4d bb fe ff       	call   404370 <_Unwind_Resume@plt>
  418823:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418827:	c9                   	leave
  418828:	c3                   	ret

0000000000418829 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIdNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  418829:	55                   	push   %rbp
  41882a:	48 89 e5             	mov    %rsp,%rbp
  41882d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  418831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418835:	5d                   	pop    %rbp
  418836:	c3                   	ret

0000000000418837 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIeNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  418837:	55                   	push   %rbp
  418838:	48 89 e5             	mov    %rsp,%rbp
  41883b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41883f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418843:	5d                   	pop    %rbp
  418844:	c3                   	ret
  418845:	90                   	nop

0000000000418846 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_baseC1Ev>:
  struct _Grapheme_cluster_iterator_base
  418846:	55                   	push   %rbp
  418847:	48 89 e5             	mov    %rsp,%rbp
  41884a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41884e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418852:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  418856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41885a:	c6 40 09 00          	movb   $0x0,0x9(%rax)
  41885e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418862:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
  418866:	90                   	nop
  418867:	5d                   	pop    %rbp
  418868:	c3                   	ret
  418869:	90                   	nop

000000000041886a <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE>:
	_Iterator(_U32_iterator __i)
  41886a:	55                   	push   %rbp
  41886b:	48 89 e5             	mov    %rsp,%rbp
  41886e:	53                   	push   %rbx
  41886f:	48 83 ec 18          	sub    $0x18,%rsp
  418873:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	: _M_base(__i)
  418877:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41887b:	48 89 c7             	mov    %rax,%rdi
  41887e:	e8 c3 ff ff ff       	call   418846 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_baseC1Ev>
  418883:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418887:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  41888b:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  41888f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418893:	48 89 58 18          	mov    %rbx,0x18(%rax)
  418897:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  41889b:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  41889f:	48 89 48 20          	mov    %rcx,0x20(%rax)
  4188a3:	48 89 58 28          	mov    %rbx,0x28(%rax)
  4188a7:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  4188ab:	48 89 50 30          	mov    %rdx,0x30(%rax)
	  if (__i != __i.end())
  4188af:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4188b3:	e8 a2 ea ff ff       	call   41735a <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  4188b8:	48 89 c6             	mov    %rax,%rsi
  4188bb:	48 83 ec 08          	sub    $0x8,%rsp
  4188bf:	48 83 ec 28          	sub    $0x28,%rsp
  4188c3:	48 89 e0             	mov    %rsp,%rax
  4188c6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4188ca:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4188ce:	48 89 08             	mov    %rcx,(%rax)
  4188d1:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4188d5:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  4188d9:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  4188dd:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4188e1:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4188e5:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  4188e9:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4188ed:	48 89 f7             	mov    %rsi,%rdi
  4188f0:	e8 35 00 00 00       	call   41892a <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  4188f5:	48 83 c4 30          	add    $0x30,%rsp
  4188f9:	83 f0 01             	xor    $0x1,%eax
  4188fc:	84 c0                	test   %al,%al
  4188fe:	74 23                	je     418923 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE+0xb9>
	      _M_c = *__i;
  418900:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  418904:	e8 af 17 ff ff       	call   40a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  418909:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41890d:	89 02                	mov    %eax,(%rdx)
	      _M_prop = __grapheme_cluster_break_property(_M_c);
  41890f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418913:	8b 00                	mov    (%rax),%eax
  418915:	89 c7                	mov    %eax,%edi
  418917:	e8 f1 c3 fe ff       	call   404d0d <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>
  41891c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418920:	89 42 04             	mov    %eax,0x4(%rdx)
	}
  418923:	90                   	nop
  418924:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418928:	c9                   	leave
  418929:	c3                   	ret

000000000041892a <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>:
      operator==(_Utf_iterator __lhs, _Sent __rhs)
  41892a:	55                   	push   %rbp
  41892b:	48 89 e5             	mov    %rsp,%rbp
  41892e:	48 83 ec 10          	sub    $0x10,%rsp
  418932:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  return __lhs._M_curr() == __rhs;
  418936:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  41893a:	e8 79 16 ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  41893f:	48 8b 00             	mov    (%rax),%rax
  418942:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  418946:	0f 94 c0             	sete   %al
      }
  418949:	c9                   	leave
  41894a:	c3                   	ret
  41894b:	90                   	nop

000000000041894c <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE>:
	_M_is_break(_Gcb_property __p1, _Gcb_property __p2,
  41894c:	55                   	push   %rbp
  41894d:	48 89 e5             	mov    %rsp,%rbp
  418950:	53                   	push   %rbx
  418951:	48 83 ec 48          	sub    $0x48,%rsp
  418955:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  418959:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  41895c:	89 55 b0             	mov    %edx,-0x50(%rbp)
	  if (__p1 == _Gcb_Control || __p1 == _Gcb_LF)
  41895f:	83 7d b4 01          	cmpl   $0x1,-0x4c(%rbp)
  418963:	74 06                	je     41896b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1f>
  418965:	83 7d b4 02          	cmpl   $0x2,-0x4c(%rbp)
  418969:	75 0a                	jne    418975 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x29>
	    return true; // Break after Control or LF.
  41896b:	b8 01 00 00 00       	mov    $0x1,%eax
  418970:	e9 dd 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_CR)
  418975:	83 7d b4 03          	cmpl   $0x3,-0x4c(%rbp)
  418979:	75 0c                	jne    418987 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x3b>
	    return __p2 != _Gcb_LF; // Do not break between a CR and LF.
  41897b:	83 7d b0 02          	cmpl   $0x2,-0x50(%rbp)
  41897f:	0f 95 c0             	setne  %al
  418982:	e9 cb 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_Control || __p2 == _Gcb_CR || __p2 == _Gcb_LF)
  418987:	83 7d b0 01          	cmpl   $0x1,-0x50(%rbp)
  41898b:	74 0c                	je     418999 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x4d>
  41898d:	83 7d b0 03          	cmpl   $0x3,-0x50(%rbp)
  418991:	74 06                	je     418999 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x4d>
  418993:	83 7d b0 02          	cmpl   $0x2,-0x50(%rbp)
  418997:	75 0a                	jne    4189a3 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x57>
	    return true; // Break before Control, CR or LF.
  418999:	b8 01 00 00 00       	mov    $0x1,%eax
  41899e:	e9 af 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_L)
  4189a3:	83 7d b4 07          	cmpl   $0x7,-0x4c(%rbp)
  4189a7:	75 2d                	jne    4189d6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x8a>
	    switch (__p2)
  4189a9:	83 7d b0 08          	cmpl   $0x8,-0x50(%rbp)
  4189ad:	7f 08                	jg     4189b7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x6b>
  4189af:	83 7d b0 07          	cmpl   $0x7,-0x50(%rbp)
  4189b3:	7d 0d                	jge    4189c2 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x76>
  4189b5:	eb 15                	jmp    4189cc <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x80>
  4189b7:	8b 45 b0             	mov    -0x50(%rbp),%eax
  4189ba:	83 e8 0b             	sub    $0xb,%eax
  4189bd:	83 f8 01             	cmp    $0x1,%eax
  4189c0:	77 0a                	ja     4189cc <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x80>
		return false; // Do not break Hangul syllable sequences.
  4189c2:	b8 00 00 00 00       	mov    $0x0,%eax
  4189c7:	e9 86 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
		return true;
  4189cc:	b8 01 00 00 00       	mov    $0x1,%eax
  4189d1:	e9 7c 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_LV || __p1 == _Gcb_V)
  4189d6:	83 7d b4 0b          	cmpl   $0xb,-0x4c(%rbp)
  4189da:	74 06                	je     4189e2 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x96>
  4189dc:	83 7d b4 08          	cmpl   $0x8,-0x4c(%rbp)
  4189e0:	75 1f                	jne    418a01 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xb5>
  4189e2:	8b 45 b0             	mov    -0x50(%rbp),%eax
  4189e5:	83 e8 08             	sub    $0x8,%eax
	    switch (__p2)
  4189e8:	83 f8 01             	cmp    $0x1,%eax
  4189eb:	77 0a                	ja     4189f7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xab>
		return false; // Do not break Hangul syllable sequences.
  4189ed:	b8 00 00 00 00       	mov    $0x0,%eax
  4189f2:	e9 5b 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
		return true;
  4189f7:	b8 01 00 00 00       	mov    $0x1,%eax
  4189fc:	e9 51 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_LVT || __p1 == _Gcb_T)
  418a01:	83 7d b4 0c          	cmpl   $0xc,-0x4c(%rbp)
  418a05:	74 06                	je     418a0d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xc1>
  418a07:	83 7d b4 09          	cmpl   $0x9,-0x4c(%rbp)
  418a0b:	75 0c                	jne    418a19 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xcd>
	    return __p2 != _Gcb_T; // Do not break Hangul syllable sequences.
  418a0d:	83 7d b0 09          	cmpl   $0x9,-0x50(%rbp)
  418a11:	0f 95 c0             	setne  %al
  418a14:	e9 39 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_Extend || __p2 == _Gcb_ZWJ)
  418a19:	83 7d b0 04          	cmpl   $0x4,-0x50(%rbp)
  418a1d:	74 06                	je     418a25 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xd9>
  418a1f:	83 7d b0 0a          	cmpl   $0xa,-0x50(%rbp)
  418a23:	75 0a                	jne    418a2f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xe3>
	    return false; // Do not break before extending characters or ZWJ.
  418a25:	b8 00 00 00 00       	mov    $0x0,%eax
  418a2a:	e9 23 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_SpacingMark)
  418a2f:	83 7d b0 06          	cmpl   $0x6,-0x50(%rbp)
  418a33:	75 0a                	jne    418a3f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xf3>
	    return false; // Do not break before SpacingMarks,
  418a35:	b8 00 00 00 00       	mov    $0x0,%eax
  418a3a:	e9 13 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_Prepend)
  418a3f:	83 7d b4 05          	cmpl   $0x5,-0x4c(%rbp)
  418a43:	75 0a                	jne    418a4f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x103>
	    return false; // or after Prepend characters.
  418a45:	b8 00 00 00 00       	mov    $0x0,%eax
  418a4a:	e9 03 02 00 00       	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (_M_incb_linker_seen
  418a4f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418a53:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
		&& __incb_property(*__curr) == _InCB::_Consonant)
  418a57:	84 c0                	test   %al,%al
  418a59:	74 2e                	je     418a89 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
		&& __incb_property(_M_c) == _InCB::_Consonant
  418a5b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418a5f:	8b 00                	mov    (%rax),%eax
  418a61:	89 c7                	mov    %eax,%edi
  418a63:	e8 26 c3 fe ff       	call   404d8e <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  418a68:	83 f8 01             	cmp    $0x1,%eax
  418a6b:	75 1c                	jne    418a89 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
		&& __incb_property(*__curr) == _InCB::_Consonant)
  418a6d:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  418a71:	e8 42 16 ff ff       	call   40a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  418a76:	89 c7                	mov    %eax,%edi
  418a78:	e8 11 c3 fe ff       	call   404d8e <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  418a7d:	83 f8 01             	cmp    $0x1,%eax
  418a80:	75 07                	jne    418a89 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
  418a82:	b8 01 00 00 00       	mov    $0x1,%eax
  418a87:	eb 05                	jmp    418a8e <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x142>
  418a89:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (_M_incb_linker_seen
  418a8e:	84 c0                	test   %al,%al
  418a90:	0f 84 7b 01 00 00    	je     418c11 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2c5>
	      bool __have_linker = false;
  418a96:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
	      auto __it = _M_base;
  418a9a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418a9e:	48 8b 48 10          	mov    0x10(%rax),%rcx
  418aa2:	48 8b 58 18          	mov    0x18(%rax),%rbx
  418aa6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  418aaa:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  418aae:	48 8b 48 20          	mov    0x20(%rax),%rcx
  418ab2:	48 8b 58 28          	mov    0x28(%rax),%rbx
  418ab6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  418aba:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  418abe:	48 8b 40 30          	mov    0x30(%rax),%rax
  418ac2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (++__it != __curr)
  418ac6:	eb 45                	jmp    418b0d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		  if (__is_incb_linker(*__it))
  418ac8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  418acc:	48 89 c7             	mov    %rax,%rdi
  418acf:	e8 e4 15 ff ff       	call   40a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  418ad4:	89 c7                	mov    %eax,%edi
  418ad6:	e8 81 c2 fe ff       	call   404d5c <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>
  418adb:	84 c0                	test   %al,%al
  418add:	74 06                	je     418ae5 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x199>
		    __have_linker = true;
  418adf:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  418ae3:	eb 28                	jmp    418b0d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		      auto __incb = __incb_property(*__it);
  418ae5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  418ae9:	48 89 c7             	mov    %rax,%rdi
  418aec:	e8 c7 15 ff ff       	call   40a0b8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  418af1:	89 c7                	mov    %eax,%edi
  418af3:	e8 96 c2 fe ff       	call   404d8e <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  418af8:	89 45 e8             	mov    %eax,-0x18(%rbp)
		      if (__incb == _InCB::_Consonant)
  418afb:	83 7d e8 01          	cmpl   $0x1,-0x18(%rbp)
  418aff:	75 06                	jne    418b07 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1bb>
			__have_linker = false;
  418b01:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  418b05:	eb 06                	jmp    418b0d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		      else if (__incb != _InCB::_Extend)
  418b07:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  418b0b:	75 7d                	jne    418b8a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x23e>
	      while (++__it != __curr)
  418b0d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  418b11:	48 89 c7             	mov    %rax,%rdi
  418b14:	e8 09 25 ff ff       	call   40b022 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
  418b19:	48 83 ec 28          	sub    $0x28,%rsp
  418b1d:	48 89 e2             	mov    %rsp,%rdx
  418b20:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  418b24:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  418b28:	48 89 0a             	mov    %rcx,(%rdx)
  418b2b:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  418b2f:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  418b33:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  418b37:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  418b3b:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  418b3f:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  418b43:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
  418b47:	48 83 ec 28          	sub    $0x28,%rsp
  418b4b:	48 89 e2             	mov    %rsp,%rdx
  418b4e:	48 8b 08             	mov    (%rax),%rcx
  418b51:	48 8b 58 08          	mov    0x8(%rax),%rbx
  418b55:	48 89 0a             	mov    %rcx,(%rdx)
  418b58:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  418b5c:	48 8b 48 10          	mov    0x10(%rax),%rcx
  418b60:	48 8b 58 18          	mov    0x18(%rax),%rbx
  418b64:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  418b68:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  418b6c:	48 8b 40 20          	mov    0x20(%rax),%rax
  418b70:	48 89 42 20          	mov    %rax,0x20(%rdx)
  418b74:	e8 8e 06 00 00       	call   419207 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>
  418b79:	48 83 c4 50          	add    $0x50,%rsp
  418b7d:	83 f0 01             	xor    $0x1,%eax
  418b80:	84 c0                	test   %al,%al
  418b82:	0f 85 40 ff ff ff    	jne    418ac8 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x17c>
  418b88:	eb 01                	jmp    418b8b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x23f>
			break;
  418b8a:	90                   	nop
	      if (__it == __curr && __have_linker)
  418b8b:	48 83 ec 28          	sub    $0x28,%rsp
  418b8f:	48 89 e0             	mov    %rsp,%rax
  418b92:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  418b96:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  418b9a:	48 89 08             	mov    %rcx,(%rax)
  418b9d:	48 89 58 08          	mov    %rbx,0x8(%rax)
  418ba1:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  418ba5:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  418ba9:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418bad:	48 89 58 18          	mov    %rbx,0x18(%rax)
  418bb1:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  418bb5:	48 89 50 20          	mov    %rdx,0x20(%rax)
  418bb9:	48 83 ec 28          	sub    $0x28,%rsp
  418bbd:	48 89 e0             	mov    %rsp,%rax
  418bc0:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  418bc4:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  418bc8:	48 89 08             	mov    %rcx,(%rax)
  418bcb:	48 89 58 08          	mov    %rbx,0x8(%rax)
  418bcf:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  418bd3:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  418bd7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418bdb:	48 89 58 18          	mov    %rbx,0x18(%rax)
  418bdf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  418be3:	48 89 50 20          	mov    %rdx,0x20(%rax)
  418be7:	e8 1b 06 00 00       	call   419207 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>
  418bec:	48 83 c4 50          	add    $0x50,%rsp
  418bf0:	84 c0                	test   %al,%al
  418bf2:	74 0d                	je     418c01 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2b5>
  418bf4:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  418bf8:	74 07                	je     418c01 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2b5>
  418bfa:	b8 01 00 00 00       	mov    $0x1,%eax
  418bff:	eb 05                	jmp    418c06 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2ba>
  418c01:	b8 00 00 00 00       	mov    $0x0,%eax
  418c06:	84 c0                	test   %al,%al
  418c08:	74 07                	je     418c11 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2c5>
		return false;
  418c0a:	b8 00 00 00 00       	mov    $0x0,%eax
  418c0f:	eb 41                	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_ZWJ && _M_xpicto_seq_state == _XPicto::_Matched)
  418c11:	83 7d b4 0a          	cmpl   $0xa,-0x4c(%rbp)
  418c15:	75 13                	jne    418c2a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2de>
  418c17:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418c1b:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  418c1f:	3c 02                	cmp    $0x2,%al
  418c21:	75 07                	jne    418c2a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2de>
	    return false;
  418c23:	b8 00 00 00 00       	mov    $0x0,%eax
  418c28:	eb 28                	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_property::_Gcb_Regional_Indicator && __p1 == __p2)
  418c2a:	83 7d b4 0d          	cmpl   $0xd,-0x4c(%rbp)
  418c2e:	75 1d                	jne    418c4d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x301>
  418c30:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  418c33:	3b 45 b0             	cmp    -0x50(%rbp),%eax
  418c36:	75 15                	jne    418c4d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x301>
	    return (_M_RI_count & 1) == 0;
  418c38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418c3c:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  418c40:	0f b6 c0             	movzbl %al,%eax
  418c43:	83 e0 01             	and    $0x1,%eax
  418c46:	85 c0                	test   %eax,%eax
  418c48:	0f 94 c0             	sete   %al
  418c4b:	eb 05                	jmp    418c52 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  return true; // Otherwise, break everywhere.
  418c4d:	b8 01 00 00 00       	mov    $0x1,%eax
	}
  418c52:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418c56:	c9                   	leave
  418c57:	c3                   	ret

0000000000418c58 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  418c58:	55                   	push   %rbp
  418c59:	48 89 e5             	mov    %rsp,%rbp
  418c5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  418c60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418c64:	5d                   	pop    %rbp
  418c65:	c3                   	ret

0000000000418c66 <_ZSt11__bit_widthIoEiT_>:
    __bit_width(_Tp __x) noexcept
  418c66:	55                   	push   %rbp
  418c67:	48 89 e5             	mov    %rsp,%rbp
  418c6a:	48 83 ec 20          	sub    $0x20,%rsp
  418c6e:	48 89 f8             	mov    %rdi,%rax
  418c71:	48 89 f1             	mov    %rsi,%rcx
  418c74:	48 89 c0             	mov    %rax,%rax
  418c77:	ba 00 00 00 00       	mov    $0x0,%edx
  418c7c:	48 89 ca             	mov    %rcx,%rdx
  418c7f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  418c83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  418c87:	c7 45 fc 80 00 00 00 	movl   $0x80,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  418c8e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  418c92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418c96:	48 89 d7             	mov    %rdx,%rdi
  418c99:	48 89 c6             	mov    %rax,%rsi
  418c9c:	e8 ad 05 00 00       	call   41924e <_ZSt13__countl_zeroIoEiT_>
  418ca1:	ba 80 00 00 00       	mov    $0x80,%edx
  418ca6:	29 c2                	sub    %eax,%edx
  418ca8:	89 d0                	mov    %edx,%eax
    }
  418caa:	c9                   	leave
  418cab:	c3                   	ret

0000000000418cac <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  418cac:	55                   	push   %rbp
  418cad:	48 89 e5             	mov    %rsp,%rbp
  418cb0:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  418cb7:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  418cbe:	89 b5 f4 fe ff ff    	mov    %esi,-0x10c(%rbp)
  418cc4:	48 89 95 e0 fe ff ff 	mov    %rdx,-0x120(%rbp)
  418ccb:	48 89 8d e8 fe ff ff 	mov    %rcx,-0x118(%rbp)
      constexpr char __digits[201] =
  418cd2:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  418cd9:	32 30 33
  418cdc:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  418ce3:	36 30 37
  418ce6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  418ced:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  418cf4:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  418cfb:	30 31 31
  418cfe:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  418d05:	34 31 35
  418d08:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  418d0f:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  418d16:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  418d1d:	38 31 39
  418d20:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  418d27:	32 32 33
  418d2a:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  418d31:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  418d38:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  418d3f:	36 32 37
  418d42:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  418d49:	30 33 31
  418d4c:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  418d53:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  418d5a:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  418d61:	34 33 35
  418d64:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  418d6b:	38 33 39
  418d6e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  418d75:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  418d7c:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  418d83:	32 34 33
  418d86:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  418d8d:	36 34 37
  418d90:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  418d97:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  418d9e:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  418da5:	30 35 31
  418da8:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  418daf:	34 35 35
  418db2:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  418db9:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  418dc0:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  418dc7:	38 35 39
  418dca:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  418dd1:	32 36 33
  418dd4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  418ddb:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  418de2:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  418de9:	36 36 37
  418dec:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  418df3:	30 37 31
  418df6:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  418dfa:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  418dfe:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  418e05:	34 37 35
  418e08:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  418e0f:	38 37 39
  418e12:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  418e16:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  418e1a:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  418e21:	32 38 33
  418e24:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  418e2b:	36 38 37
  418e2e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  418e32:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  418e36:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  418e3d:	30 39 31
  418e40:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  418e47:	34 39 35
  418e4a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  418e4e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  418e52:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  418e59:	39 35 39
  418e5c:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  418e63:	39 39 00
  418e66:	48 89 45 b9          	mov    %rax,-0x47(%rbp)
  418e6a:	48 89 55 c1          	mov    %rdx,-0x3f(%rbp)
      unsigned __pos = __len - 1;
  418e6e:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  418e74:	83 e8 01             	sub    $0x1,%eax
  418e77:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  418e7a:	e9 c3 00 00 00       	jmp    418f42 <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x296>
	  auto const __num = (__val % 100) * 2;
  418e7f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  418e86:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  418e8d:	48 89 c6             	mov    %rax,%rsi
  418e90:	48 89 d0             	mov    %rdx,%rax
  418e93:	ba 64 00 00 00       	mov    $0x64,%edx
  418e98:	b9 00 00 00 00       	mov    $0x0,%ecx
  418e9d:	48 89 f7             	mov    %rsi,%rdi
  418ea0:	48 89 c6             	mov    %rax,%rsi
  418ea3:	e8 68 b4 fe ff       	call   404310 <__umodti3@plt>
  418ea8:	48 01 c0             	add    %rax,%rax
  418eab:	48 11 d2             	adc    %rdx,%rdx
  418eae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418eb2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val /= 100;
  418eb6:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  418ebd:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  418ec4:	48 89 c6             	mov    %rax,%rsi
  418ec7:	48 89 d0             	mov    %rdx,%rax
  418eca:	ba 64 00 00 00       	mov    $0x64,%edx
  418ecf:	b9 00 00 00 00       	mov    $0x0,%ecx
  418ed4:	48 89 f7             	mov    %rsi,%rdi
  418ed7:	48 89 c6             	mov    %rax,%rsi
  418eda:	e8 a1 b1 fe ff       	call   404080 <__udivti3@plt>
  418edf:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  418ee6:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	  __first[__pos] = __digits[__num + 1];
  418eed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418ef1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  418ef5:	48 83 c0 01          	add    $0x1,%rax
  418ef9:	48 83 d2 00          	adc    $0x0,%rdx
  418efd:	8b 75 fc             	mov    -0x4(%rbp),%esi
  418f00:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  418f07:	48 01 f1             	add    %rsi,%rcx
  418f0a:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
  418f11:	48 01 f0             	add    %rsi,%rax
  418f14:	0f b6 00             	movzbl (%rax),%eax
  418f17:	88 01                	mov    %al,(%rcx)
	  __first[__pos - 1] = __digits[__num];
  418f19:	8b 45 fc             	mov    -0x4(%rbp),%eax
  418f1c:	83 e8 01             	sub    $0x1,%eax
  418f1f:	89 c2                	mov    %eax,%edx
  418f21:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  418f28:	48 01 c2             	add    %rax,%rdx
  418f2b:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
  418f32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418f36:	48 01 c8             	add    %rcx,%rax
  418f39:	0f b6 00             	movzbl (%rax),%eax
  418f3c:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  418f3e:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  418f42:	ba 63 00 00 00       	mov    $0x63,%edx
  418f47:	b8 00 00 00 00       	mov    $0x0,%eax
  418f4c:	48 3b 95 e0 fe ff ff 	cmp    -0x120(%rbp),%rdx
  418f53:	48 1b 85 e8 fe ff ff 	sbb    -0x118(%rbp),%rax
  418f5a:	0f 82 1f ff ff ff    	jb     418e7f <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x1d3>
      if (__val >= 10)
  418f60:	ba 09 00 00 00       	mov    $0x9,%edx
  418f65:	b8 00 00 00 00       	mov    $0x0,%eax
  418f6a:	48 3b 95 e0 fe ff ff 	cmp    -0x120(%rbp),%rdx
  418f71:	48 1b 85 e8 fe ff ff 	sbb    -0x118(%rbp),%rax
  418f78:	73 62                	jae    418fdc <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x330>
	  auto const __num = __val * 2;
  418f7a:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  418f81:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  418f88:	48 01 c0             	add    %rax,%rax
  418f8b:	48 11 d2             	adc    %rdx,%rdx
  418f8e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  418f92:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __first[1] = __digits[__num + 1];
  418f96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418f9a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418f9e:	48 83 c0 01          	add    $0x1,%rax
  418fa2:	48 83 d2 00          	adc    $0x0,%rdx
  418fa6:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  418fad:	48 83 c1 01          	add    $0x1,%rcx
  418fb1:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
  418fb8:	48 01 f0             	add    %rsi,%rax
  418fbb:	0f b6 00             	movzbl (%rax),%eax
  418fbe:	88 01                	mov    %al,(%rcx)
	  __first[0] = __digits[__num];
  418fc0:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
  418fc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418fcb:	48 01 d0             	add    %rdx,%rax
  418fce:	0f b6 10             	movzbl (%rax),%edx
  418fd1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  418fd8:	88 10                	mov    %dl,(%rax)
    }
  418fda:	eb 15                	jmp    418ff1 <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x345>
	__first[0] = '0' + __val;
  418fdc:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  418fe3:	83 c0 30             	add    $0x30,%eax
  418fe6:	89 c2                	mov    %eax,%edx
  418fe8:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  418fef:	88 10                	mov    %dl,(%rax)
    }
  418ff1:	90                   	nop
  418ff2:	c9                   	leave
  418ff3:	c3                   	ret

0000000000418ff4 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeEUlPcmE_EONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
  418ff4:	55                   	push   %rbp
  418ff5:	48 89 e5             	mov    %rsp,%rbp
  418ff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  418ffc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419000:	5d                   	pop    %rbp
  419001:	c3                   	ret

0000000000419002 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev>:
      _M_read_utf32()
  419002:	55                   	push   %rbp
  419003:	48 89 e5             	mov    %rsp,%rbp
  419006:	48 83 ec 30          	sub    $0x30,%rsp
  41900a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	_Guard<_Iter> __g{this, _M_curr()};
  41900e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419012:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  419016:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41901a:	48 89 c7             	mov    %rax,%rdi
  41901d:	e8 90 de ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419022:	48 8b 00             	mov    (%rax),%rax
  419025:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	char32_t __c = *_M_curr()++;
  419029:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41902d:	48 89 c7             	mov    %rax,%rdi
  419030:	e8 7d de ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419035:	48 8b 10             	mov    (%rax),%rdx
  419038:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  41903c:	48 89 08             	mov    %rcx,(%rax)
  41903f:	8b 02                	mov    (%rdx),%eax
  419041:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (!__is_scalar_value(__c)) [[unlikely]]
  419044:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419047:	89 c7                	mov    %eax,%edi
  419049:	e8 0f bc fe ff       	call   404c5d <_ZNSt9__unicode17__is_scalar_valueEDi>
  41904e:	83 f0 01             	xor    $0x1,%eax
  419051:	84 c0                	test   %al,%al
  419053:	74 0f                	je     419064 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev+0x62>
	  __c = _S_error();
  419055:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419059:	48 89 c7             	mov    %rax,%rdi
  41905c:	e8 b9 02 00 00       	call   41931a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv>
  419061:	89 45 fc             	mov    %eax,-0x4(%rbp)
	_M_update(__c, 1);
  419064:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  419067:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41906b:	ba 01 00 00 00       	mov    $0x1,%edx
  419070:	89 ce                	mov    %ecx,%esi
  419072:	48 89 c7             	mov    %rax,%rdi
  419075:	e8 e2 02 00 00       	call   41935c <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih>
      }
  41907a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  41907e:	48 89 c7             	mov    %rax,%rdi
  419081:	e8 5a 02 00 00       	call   4192e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE6_GuardIS2_ED1Ev>
  419086:	c9                   	leave
  419087:	c3                   	ret

0000000000419088 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>:
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
  419088:	55                   	push   %rbp
  419089:	48 89 e5             	mov    %rsp,%rbp
  41908c:	53                   	push   %rbx
  41908d:	48 83 ec 08          	sub    $0x8,%rsp
	  return __lhs._M_curr() == __rhs._M_curr()
  419091:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419095:	e8 18 de ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  41909a:	48 8b 18             	mov    (%rax),%rbx
  41909d:	48 8d 45 38          	lea    0x38(%rbp),%rax
  4190a1:	48 89 c7             	mov    %rax,%rdi
  4190a4:	e8 09 de ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  4190a9:	48 8b 00             	mov    (%rax),%rax
		   && __lhs._M_buf_index == __rhs._M_buf_index;
  4190ac:	48 39 c3             	cmp    %rax,%rbx
  4190af:	75 13                	jne    4190c4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  4190b1:	0f b6 55 28          	movzbl 0x28(%rbp),%edx
  4190b5:	0f b6 45 50          	movzbl 0x50(%rbp),%eax
  4190b9:	38 c2                	cmp    %al,%dl
  4190bb:	75 07                	jne    4190c4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  4190bd:	b8 01 00 00 00       	mov    $0x1,%eax
  4190c2:	eb 05                	jmp    4190c9 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x41>
  4190c4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  4190c9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4190cd:	c9                   	leave
  4190ce:	c3                   	ret
  4190cf:	90                   	nop

00000000004190d0 <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>:
      operator*() const { return _M_buf[_M_buf_index]; }
  4190d0:	55                   	push   %rbp
  4190d1:	48 89 e5             	mov    %rsp,%rbp
  4190d4:	48 83 ec 10          	sub    $0x10,%rsp
  4190d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4190dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4190e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4190e4:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
  4190e8:	0f b6 d2             	movzbl %dl,%edx
  4190eb:	48 89 d6             	mov    %rdx,%rsi
  4190ee:	48 89 c7             	mov    %rax,%rdi
  4190f1:	e8 94 04 00 00       	call   41958a <_ZNKSt5arrayIcLm4EEixEm>
  4190f6:	0f b6 00             	movzbl (%rax),%eax
  4190f9:	c9                   	leave
  4190fa:	c3                   	ret
  4190fb:	90                   	nop

00000000004190fc <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>:
      operator++()
  4190fc:	55                   	push   %rbp
  4190fd:	48 89 e5             	mov    %rsp,%rbp
  419100:	53                   	push   %rbx
  419101:	48 83 ec 38          	sub    $0x38,%rsp
  419105:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
  419109:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41910d:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  419111:	0f b6 c0             	movzbl %al,%eax
  419114:	8d 50 01             	lea    0x1(%rax),%edx
  419117:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41911b:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  41911f:	0f b6 c0             	movzbl %al,%eax
  419122:	39 c2                	cmp    %eax,%edx
  419124:	75 23                	jne    419149 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x4d>
  419126:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41912a:	48 89 c7             	mov    %rax,%rdi
  41912d:	e8 80 dd ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419132:	48 8b 10             	mov    (%rax),%rdx
  419135:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419139:	48 8b 40 20          	mov    0x20(%rax),%rax
  41913d:	48 39 c2             	cmp    %rax,%rdx
  419140:	74 07                	je     419149 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x4d>
  419142:	b8 01 00 00 00       	mov    $0x1,%eax
  419147:	eb 05                	jmp    41914e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x52>
  419149:	b8 00 00 00 00       	mov    $0x0,%eax
  41914e:	84 c0                	test   %al,%al
  419150:	74 7c                	je     4191ce <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0xd2>
	      std::advance(_M_curr(), _M_to_increment);
  419152:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419156:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  41915a:	0f b6 d8             	movzbl %al,%ebx
  41915d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419161:	48 89 c7             	mov    %rax,%rdi
  419164:	e8 49 dd ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419169:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  41916d:	88 5d e7             	mov    %bl,-0x19(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  419170:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  419174:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  419178:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41917c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  419180:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  419181:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  419185:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419189:	48 89 d6             	mov    %rdx,%rsi
  41918c:	48 89 c7             	mov    %rax,%rdi
  41918f:	e8 10 23 ff ff       	call   40b4a4 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>
    }
  419194:	90                   	nop
	    if (_M_curr() == _M_last)
  419195:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419199:	48 89 c7             	mov    %rax,%rdi
  41919c:	e8 11 dd ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  4191a1:	48 8b 10             	mov    (%rax),%rdx
  4191a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4191a8:	48 8b 40 20          	mov    0x20(%rax),%rax
  4191ac:	48 39 c2             	cmp    %rax,%rdx
  4191af:	0f 94 c0             	sete   %al
  4191b2:	84 c0                	test   %al,%al
  4191b4:	74 0a                	je     4191c0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0xc4>
	      _M_buf_index = 0;
  4191b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4191ba:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  4191be:	eb 3d                	jmp    4191fd <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	      _M_read();
  4191c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4191c4:	48 89 c7             	mov    %rax,%rdi
  4191c7:	e8 5a f3 ff ff       	call   418526 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>
  4191cc:	eb 2f                	jmp    4191fd <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	else if (_M_buf_index + 1 < _M_buf_last)
  4191ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4191d2:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  4191d6:	0f b6 c0             	movzbl %al,%eax
  4191d9:	8d 50 01             	lea    0x1(%rax),%edx
  4191dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4191e0:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  4191e4:	0f b6 c0             	movzbl %al,%eax
  4191e7:	39 c2                	cmp    %eax,%edx
  4191e9:	7d 12                	jge    4191fd <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	  ++_M_buf_index;
  4191eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4191ef:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  4191f3:	8d 50 01             	lea    0x1(%rax),%edx
  4191f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4191fa:	88 50 18             	mov    %dl,0x18(%rax)
	return *this;
  4191fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      }
  419201:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419205:	c9                   	leave
  419206:	c3                   	ret

0000000000419207 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>:
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
  419207:	55                   	push   %rbp
  419208:	48 89 e5             	mov    %rsp,%rbp
  41920b:	53                   	push   %rbx
  41920c:	48 83 ec 08          	sub    $0x8,%rsp
	  return __lhs._M_curr() == __rhs._M_curr()
  419210:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419214:	e8 9f 0d ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  419219:	48 8b 18             	mov    (%rax),%rbx
  41921c:	48 8d 45 38          	lea    0x38(%rbp),%rax
  419220:	48 89 c7             	mov    %rax,%rdi
  419223:	e8 90 0d ff ff       	call   409fb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  419228:	48 8b 00             	mov    (%rax),%rax
		   && __lhs._M_buf_index == __rhs._M_buf_index;
  41922b:	48 39 c3             	cmp    %rax,%rbx
  41922e:	75 13                	jne    419243 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419230:	0f b6 55 28          	movzbl 0x28(%rbp),%edx
  419234:	0f b6 45 50          	movzbl 0x50(%rbp),%eax
  419238:	38 c2                	cmp    %al,%dl
  41923a:	75 07                	jne    419243 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  41923c:	b8 01 00 00 00       	mov    $0x1,%eax
  419241:	eb 05                	jmp    419248 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x41>
  419243:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  419248:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41924c:	c9                   	leave
  41924d:	c3                   	ret

000000000041924e <_ZSt13__countl_zeroIoEiT_>:
    __countl_zero(_Tp __x) noexcept
  41924e:	55                   	push   %rbp
  41924f:	48 89 e5             	mov    %rsp,%rbp
  419252:	48 89 f8             	mov    %rdi,%rax
  419255:	48 89 f1             	mov    %rsi,%rcx
  419258:	48 89 c0             	mov    %rax,%rax
  41925b:	ba 00 00 00 00       	mov    $0x0,%edx
  419260:	48 89 ca             	mov    %rcx,%rdx
  419263:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  419267:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  41926b:	c7 45 fc 80 00 00 00 	movl   $0x80,-0x4(%rbp)
      if (__x == 0)
  419272:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419276:	48 0b 45 c8          	or     -0x38(%rbp),%rax
  41927a:	75 07                	jne    419283 <_ZSt13__countl_zeroIoEiT_+0x35>
        return _Nd;
  41927c:	b8 80 00 00 00       	mov    $0x80,%eax
  419281:	eb 5b                	jmp    4192de <_ZSt13__countl_zeroIoEiT_+0x90>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  419283:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  41928a:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  419291:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  unsigned long long __high = __x >> _Nd_ull;
  419298:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41929c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4192a0:	48 89 d0             	mov    %rdx,%rax
  4192a3:	31 d2                	xor    %edx,%edx
  4192a5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__high != 0)
  4192a9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4192ae:	74 12                	je     4192c2 <_ZSt13__countl_zeroIoEiT_+0x74>
	      constexpr int __diff = (2 * _Nd_ull) - _Nd;
  4192b0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
	      return __builtin_clzll(__high) - __diff;
  4192b7:	48 0f bd 45 e8       	bsr    -0x18(%rbp),%rax
  4192bc:	48 83 f0 3f          	xor    $0x3f,%rax
  4192c0:	eb 1c                	jmp    4192de <_ZSt13__countl_zeroIoEiT_+0x90>
	  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;
  4192c2:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  4192c9:	ff
	  unsigned long long __low = __x & __max_ull;
  4192ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4192ce:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
  4192d2:	48 0f bd 45 d8       	bsr    -0x28(%rbp),%rax
  4192d7:	48 83 f0 3f          	xor    $0x3f,%rax
  4192db:	83 c0 40             	add    $0x40,%eax
    }
  4192de:	5d                   	pop    %rbp
  4192df:	c3                   	ret

00000000004192e0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE6_GuardIS2_ED1Ev>:
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
  4192e0:	55                   	push   %rbp
  4192e1:	48 89 e5             	mov    %rsp,%rbp
  4192e4:	53                   	push   %rbx
  4192e5:	48 83 ec 18          	sub    $0x18,%rsp
  4192e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4192ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4192f1:	48 83 c0 08          	add    $0x8,%rax
  4192f5:	48 89 c7             	mov    %rax,%rdi
  4192f8:	e8 a6 02 00 00       	call   4195a3 <_ZSt4moveIRPKDiEONSt16remove_referenceIT_E4typeEOS4_>
  4192fd:	48 8b 18             	mov    (%rax),%rbx
  419300:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419304:	48 8b 00             	mov    (%rax),%rax
  419307:	48 89 c7             	mov    %rax,%rdi
  41930a:	e8 a3 db ff ff       	call   416eb2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  41930f:	48 89 18             	mov    %rbx,(%rax)
  419312:	90                   	nop
  419313:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419317:	c9                   	leave
  419318:	c3                   	ret
  419319:	90                   	nop

000000000041931a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv>:
      _S_error()
  41931a:	55                   	push   %rbp
  41931b:	48 89 e5             	mov    %rsp,%rbp
  41931e:	48 83 ec 20          	sub    $0x20,%rsp
  419322:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char32_t __c = _ErrorHandler()();
  419326:	48 8d 45 fb          	lea    -0x5(%rbp),%rax
  41932a:	48 89 c7             	mov    %rax,%rdi
  41932d:	e8 64 b9 fe ff       	call   404c96 <_ZNKSt9__unicode5_ReplclEv>
  419332:	89 45 fc             	mov    %eax,-0x4(%rbp)
  419335:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__is_scalar_value(__c));
  41933a:	84 c0                	test   %al,%al
  41933c:	74 18                	je     419356 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv+0x3c>
  41933e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419341:	89 c7                	mov    %eax,%edi
  419343:	e8 15 b9 fe ff       	call   404c5d <_ZNSt9__unicode17__is_scalar_valueEDi>
  419348:	83 f0 01             	xor    $0x1,%eax
  41934b:	0f b6 c0             	movzbl %al,%eax
  41934e:	48 85 c0             	test   %rax,%rax
  419351:	0f 95 c0             	setne  %al
  419354:	84 c0                	test   %al,%al
	return __c;
  419356:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
  419359:	c9                   	leave
  41935a:	c3                   	ret
  41935b:	90                   	nop

000000000041935c <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih>:
      _M_update(char32_t __c, uint8_t __to_incr)
  41935c:	55                   	push   %rbp
  41935d:	48 89 e5             	mov    %rsp,%rbp
  419360:	53                   	push   %rbx
  419361:	48 83 ec 28          	sub    $0x28,%rsp
  419365:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  419369:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  41936c:	89 d0                	mov    %edx,%eax
  41936e:	88 45 d0             	mov    %al,-0x30(%rbp)
	_M_to_increment = __to_incr;
  419371:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419375:	0f b6 55 d0          	movzbl -0x30(%rbp),%edx
  419379:	88 50 1a             	mov    %dl,0x1a(%rax)
	_M_buf_index = 0;
  41937c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419380:	c6 40 18 00          	movb   $0x0,0x18(%rax)
	    int __bits = std::bit_width((uint32_t)__c);
  419384:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419387:	89 c7                	mov    %eax,%edi
  419389:	e8 23 02 00 00       	call   4195b1 <_ZSt9bit_widthITkSt18__unsigned_integerjEiT_>
  41938e:	89 45 ec             	mov    %eax,-0x14(%rbp)
	    if (__bits <= 7) [[likely]]
  419391:	83 7d ec 07          	cmpl   $0x7,-0x14(%rbp)
  419395:	7f 65                	jg     4193fc <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0xa0>
		_M_buf[0] = __c;
  419397:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41939a:	89 c3                	mov    %eax,%ebx
  41939c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4193a0:	be 00 00 00 00       	mov    $0x0,%esi
  4193a5:	48 89 c7             	mov    %rax,%rdi
  4193a8:	e8 1b 02 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  4193ad:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
  4193af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4193b3:	be 03 00 00 00       	mov    $0x3,%esi
  4193b8:	48 89 c7             	mov    %rax,%rdi
  4193bb:	e8 08 02 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  4193c0:	c6 00 00             	movb   $0x0,(%rax)
  4193c3:	0f b6 18             	movzbl (%rax),%ebx
  4193c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4193ca:	be 02 00 00 00       	mov    $0x2,%esi
  4193cf:	48 89 c7             	mov    %rax,%rdi
  4193d2:	e8 f1 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  4193d7:	88 18                	mov    %bl,(%rax)
  4193d9:	0f b6 18             	movzbl (%rax),%ebx
  4193dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4193e0:	be 01 00 00 00       	mov    $0x1,%esi
  4193e5:	48 89 c7             	mov    %rax,%rdi
  4193e8:	e8 db 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  4193ed:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 1;
  4193ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4193f3:	c6 40 19 01          	movb   $0x1,0x19(%rax)
      }
  4193f7:	e9 86 01 00 00       	jmp    419582 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
	    else if (__bits <= 11)
  4193fc:	83 7d ec 0b          	cmpl   $0xb,-0x14(%rbp)
  419400:	7f 73                	jg     419475 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x119>
		_M_buf[0] = 0xC0 | (__c >> 6);
  419402:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419405:	c1 e8 06             	shr    $0x6,%eax
  419408:	83 c8 c0             	or     $0xffffffc0,%eax
  41940b:	89 c3                	mov    %eax,%ebx
  41940d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419411:	be 00 00 00 00       	mov    $0x0,%esi
  419416:	48 89 c7             	mov    %rax,%rdi
  419419:	e8 aa 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  41941e:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | (__c & 0x3F);
  419420:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419423:	83 e0 3f             	and    $0x3f,%eax
  419426:	83 c8 80             	or     $0xffffff80,%eax
  419429:	89 c3                	mov    %eax,%ebx
  41942b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41942f:	be 01 00 00 00       	mov    $0x1,%esi
  419434:	48 89 c7             	mov    %rax,%rdi
  419437:	e8 8c 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  41943c:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = _M_buf[3] = 0;
  41943e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419442:	be 03 00 00 00       	mov    $0x3,%esi
  419447:	48 89 c7             	mov    %rax,%rdi
  41944a:	e8 79 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  41944f:	c6 00 00             	movb   $0x0,(%rax)
  419452:	0f b6 18             	movzbl (%rax),%ebx
  419455:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419459:	be 02 00 00 00       	mov    $0x2,%esi
  41945e:	48 89 c7             	mov    %rax,%rdi
  419461:	e8 62 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  419466:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 2;
  419468:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41946c:	c6 40 19 02          	movb   $0x2,0x19(%rax)
      }
  419470:	e9 0d 01 00 00       	jmp    419582 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
	    else if (__bits <= 16)
  419475:	83 7d ec 10          	cmpl   $0x10,-0x14(%rbp)
  419479:	7f 7e                	jg     4194f9 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x19d>
		_M_buf[0] = 0xE0 | (__c >> 12);
  41947b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41947e:	c1 e8 0c             	shr    $0xc,%eax
  419481:	83 c8 e0             	or     $0xffffffe0,%eax
  419484:	89 c3                	mov    %eax,%ebx
  419486:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41948a:	be 00 00 00 00       	mov    $0x0,%esi
  41948f:	48 89 c7             	mov    %rax,%rdi
  419492:	e8 31 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  419497:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
  419499:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41949c:	c1 e8 06             	shr    $0x6,%eax
  41949f:	83 e0 3f             	and    $0x3f,%eax
  4194a2:	83 c8 80             	or     $0xffffff80,%eax
  4194a5:	89 c3                	mov    %eax,%ebx
  4194a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4194ab:	be 01 00 00 00       	mov    $0x1,%esi
  4194b0:	48 89 c7             	mov    %rax,%rdi
  4194b3:	e8 10 01 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  4194b8:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = 0x80 | (__c & 0x3F);
  4194ba:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  4194bd:	83 e0 3f             	and    $0x3f,%eax
  4194c0:	83 c8 80             	or     $0xffffff80,%eax
  4194c3:	89 c3                	mov    %eax,%ebx
  4194c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4194c9:	be 02 00 00 00       	mov    $0x2,%esi
  4194ce:	48 89 c7             	mov    %rax,%rdi
  4194d1:	e8 f2 00 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  4194d6:	88 18                	mov    %bl,(%rax)
		_M_buf[3] = 0;
  4194d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4194dc:	be 03 00 00 00       	mov    $0x3,%esi
  4194e1:	48 89 c7             	mov    %rax,%rdi
  4194e4:	e8 df 00 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  4194e9:	c6 00 00             	movb   $0x0,(%rax)
		_M_buf_last = 3;
  4194ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4194f0:	c6 40 19 03          	movb   $0x3,0x19(%rax)
      }
  4194f4:	e9 89 00 00 00       	jmp    419582 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
  4194f9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  4194fc:	c1 e8 12             	shr    $0x12,%eax
  4194ff:	83 e0 07             	and    $0x7,%eax
  419502:	83 c8 f0             	or     $0xfffffff0,%eax
  419505:	89 c3                	mov    %eax,%ebx
  419507:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41950b:	be 00 00 00 00       	mov    $0x0,%esi
  419510:	48 89 c7             	mov    %rax,%rdi
  419513:	e8 b0 00 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  419518:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
  41951a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41951d:	c1 e8 0c             	shr    $0xc,%eax
  419520:	83 e0 3f             	and    $0x3f,%eax
  419523:	83 c8 80             	or     $0xffffff80,%eax
  419526:	89 c3                	mov    %eax,%ebx
  419528:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41952c:	be 01 00 00 00       	mov    $0x1,%esi
  419531:	48 89 c7             	mov    %rax,%rdi
  419534:	e8 8f 00 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  419539:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
  41953b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41953e:	c1 e8 06             	shr    $0x6,%eax
  419541:	83 e0 3f             	and    $0x3f,%eax
  419544:	83 c8 80             	or     $0xffffff80,%eax
  419547:	89 c3                	mov    %eax,%ebx
  419549:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41954d:	be 02 00 00 00       	mov    $0x2,%esi
  419552:	48 89 c7             	mov    %rax,%rdi
  419555:	e8 6e 00 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  41955a:	88 18                	mov    %bl,(%rax)
		_M_buf[3] = 0x80 | (__c & 0x3F);
  41955c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41955f:	83 e0 3f             	and    $0x3f,%eax
  419562:	83 c8 80             	or     $0xffffff80,%eax
  419565:	89 c3                	mov    %eax,%ebx
  419567:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41956b:	be 03 00 00 00       	mov    $0x3,%esi
  419570:	48 89 c7             	mov    %rax,%rdi
  419573:	e8 50 00 00 00       	call   4195c8 <_ZNSt5arrayIcLm4EEixEm>
  419578:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 4;
  41957a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41957e:	c6 40 19 04          	movb   $0x4,0x19(%rax)
      }
  419582:	90                   	nop
  419583:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419587:	c9                   	leave
  419588:	c3                   	ret
  419589:	90                   	nop

000000000041958a <_ZNKSt5arrayIcLm4EEixEm>:
      operator[](size_type __n) const noexcept
  41958a:	55                   	push   %rbp
  41958b:	48 89 e5             	mov    %rsp,%rbp
  41958e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  419592:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  419596:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41959a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41959e:	48 01 d0             	add    %rdx,%rax
      }
  4195a1:	5d                   	pop    %rbp
  4195a2:	c3                   	ret

00000000004195a3 <_ZSt4moveIRPKDiEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
  4195a3:	55                   	push   %rbp
  4195a4:	48 89 e5             	mov    %rsp,%rbp
  4195a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4195ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4195af:	5d                   	pop    %rbp
  4195b0:	c3                   	ret

00000000004195b1 <_ZSt9bit_widthITkSt18__unsigned_integerjEiT_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 3656. Inconsistent bit operations returning a count
  /// The smallest integer greater than the base-2 logarithm of `x`.
  template<__unsigned_integer _Tp>
    constexpr int
    bit_width(_Tp __x) noexcept
  4195b1:	55                   	push   %rbp
  4195b2:	48 89 e5             	mov    %rsp,%rbp
  4195b5:	48 83 ec 10          	sub    $0x10,%rsp
  4195b9:	89 7d fc             	mov    %edi,-0x4(%rbp)
    { return std::__bit_width(__x); }
  4195bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4195bf:	89 c7                	mov    %eax,%edi
  4195c1:	e8 f4 af fe ff       	call   4045ba <_ZSt11__bit_widthIjEiT_>
  4195c6:	c9                   	leave
  4195c7:	c3                   	ret

00000000004195c8 <_ZNSt5arrayIcLm4EEixEm>:
      operator[](size_type __n) noexcept
  4195c8:	55                   	push   %rbp
  4195c9:	48 89 e5             	mov    %rsp,%rbp
  4195cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4195d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  4195d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4195d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4195dc:	48 01 d0             	add    %rdx,%rax
      }
  4195df:	5d                   	pop    %rbp
  4195e0:	c3                   	ret

Disassembly of section .fini:

00000000004195e4 <_fini>:
  4195e4:	48 83 ec 08          	sub    $0x8,%rsp
  4195e8:	48 83 c4 08          	add    $0x8,%rsp
  4195ec:	c3                   	ret
