
hello_world:     file format elf64-x86-64
hello_world


Disassembly of section .init:

0000000000404000 <_init>:
  404000:	48 83 ec 08          	sub    $0x8,%rsp
  404004:	48 8b 05 d5 1f 02 00 	mov    0x21fd5(%rip),%rax        # 425fe0 <__gmon_start__@Base>
  40400b:	48 85 c0             	test   %rax,%rax
  40400e:	74 02                	je     404012 <_init+0x12>
  404010:	ff d0                	call   *%rax
  404012:	48 83 c4 08          	add    $0x8,%rsp
  404016:	c3                   	ret

Disassembly of section .plt:

0000000000404020 <_ZSt8to_charsPcS_f@plt-0x10>:
  404020:	ff 35 ca 1f 02 00    	push   0x21fca(%rip)        # 425ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
  404026:	ff 25 cc 1f 02 00    	jmp    *0x21fcc(%rip)        # 425ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
  40402c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404030 <_ZSt8to_charsPcS_f@plt>:
  404030:	ff 25 ca 1f 02 00    	jmp    *0x21fca(%rip)        # 426000 <_ZSt8to_charsPcS_f@GLIBCXX_3.4.29>
  404036:	68 00 00 00 00       	push   $0x0
  40403b:	e9 e0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404040 <frexpf@plt>:
  404040:	ff 25 c2 1f 02 00    	jmp    *0x21fc2(%rip)        # 426008 <frexpf@GLIBC_2.2.5>
  404046:	68 01 00 00 00       	push   $0x1
  40404b:	e9 d0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404050 <_ZSt8to_charsPcS_eSt12chars_format@plt>:
  404050:	ff 25 ba 1f 02 00    	jmp    *0x21fba(%rip)        # 426010 <_ZSt8to_charsPcS_eSt12chars_format@GLIBCXX_3.4.29>
  404056:	68 02 00 00 00       	push   $0x2
  40405b:	e9 c0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404060 <_ZNKSt6localeeqERKS_@plt>:
  404060:	ff 25 b2 1f 02 00    	jmp    *0x21fb2(%rip)        # 426018 <_ZNKSt6localeeqERKS_@GLIBCXX_3.4>
  404066:	68 03 00 00 00       	push   $0x3
  40406b:	e9 b0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404070 <_ZSt8to_charsPcS_d@plt>:
  404070:	ff 25 aa 1f 02 00    	jmp    *0x21faa(%rip)        # 426020 <_ZSt8to_charsPcS_d@GLIBCXX_3.4.29>
  404076:	68 04 00 00 00       	push   $0x4
  40407b:	e9 a0 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404080 <__udivti3@plt>:
  404080:	ff 25 a2 1f 02 00    	jmp    *0x21fa2(%rip)        # 426028 <__udivti3@GCC_3.0>
  404086:	68 05 00 00 00       	push   $0x5
  40408b:	e9 90 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404090 <_ZSt17__throw_bad_allocv@plt>:
  404090:	ff 25 9a 1f 02 00    	jmp    *0x21f9a(%rip)        # 426030 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
  404096:	68 06 00 00 00       	push   $0x6
  40409b:	e9 80 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040a0 <__cxa_begin_catch@plt>:
  4040a0:	ff 25 92 1f 02 00    	jmp    *0x21f92(%rip)        # 426038 <__cxa_begin_catch@CXXABI_1.3>
  4040a6:	68 07 00 00 00       	push   $0x7
  4040ab:	e9 70 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040b0 <strlen@plt>:
  4040b0:	ff 25 8a 1f 02 00    	jmp    *0x21f8a(%rip)        # 426040 <strlen@GLIBC_2.2.5>
  4040b6:	68 08 00 00 00       	push   $0x8
  4040bb:	e9 60 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>:
  4040c0:	ff 25 82 1f 02 00    	jmp    *0x21f82(%rip)        # 426048 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@GLIBCXX_3.4.21>
  4040c6:	68 09 00 00 00       	push   $0x9
  4040cb:	e9 50 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040d0 <_ZNKSt9basic_iosIcSt11char_traitsIcEE5rdbufEv@plt>:
  4040d0:	ff 25 7a 1f 02 00    	jmp    *0x21f7a(%rip)        # 426050 <_ZNKSt9basic_iosIcSt11char_traitsIcEE5rdbufEv@GLIBCXX_3.4>
  4040d6:	68 0a 00 00 00       	push   $0xa
  4040db:	e9 40 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040e0 <memcmp@plt>:
  4040e0:	ff 25 72 1f 02 00    	jmp    *0x21f72(%rip)        # 426058 <memcmp@GLIBC_2.2.5>
  4040e6:	68 0b 00 00 00       	push   $0xb
  4040eb:	e9 30 ff ff ff       	jmp    404020 <_init+0x20>

00000000004040f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@plt>:
  4040f0:	ff 25 6a 1f 02 00    	jmp    *0x21f6a(%rip)        # 426060 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@GLIBCXX_3.4>
  4040f6:	68 0c 00 00 00       	push   $0xc
  4040fb:	e9 20 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404100 <_ZNSo6sentryD1Ev@plt>:
  404100:	ff 25 62 1f 02 00    	jmp    *0x21f62(%rip)        # 426068 <_ZNSo6sentryD1Ev@GLIBCXX_3.4>
  404106:	68 0d 00 00 00       	push   $0xd
  40410b:	e9 10 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404110 <__cxa_allocate_exception@plt>:
  404110:	ff 25 5a 1f 02 00    	jmp    *0x21f5a(%rip)        # 426070 <__cxa_allocate_exception@CXXABI_1.3>
  404116:	68 0e 00 00 00       	push   $0xe
  40411b:	e9 00 ff ff ff       	jmp    404020 <_init+0x20>

0000000000404120 <__gttf2@plt>:
  404120:	ff 25 52 1f 02 00    	jmp    *0x21f52(%rip)        # 426078 <__gttf2@GCC_4.3.0>
  404126:	68 0f 00 00 00       	push   $0xf
  40412b:	e9 f0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404130 <_ZSt20__throw_length_errorPKc@plt>:
  404130:	ff 25 4a 1f 02 00    	jmp    *0x21f4a(%rip)        # 426080 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
  404136:	68 10 00 00 00       	push   $0x10
  40413b:	e9 e0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404140 <memset@plt>:
  404140:	ff 25 42 1f 02 00    	jmp    *0x21f42(%rip)        # 426088 <memset@GLIBC_2.2.5>
  404146:	68 11 00 00 00       	push   $0x11
  40414b:	e9 d0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404150 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@plt>:
  404150:	ff 25 3a 1f 02 00    	jmp    *0x21f3a(%rip)        # 426090 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@GLIBCXX_3.4.21>
  404156:	68 12 00 00 00       	push   $0x12
  40415b:	e9 c0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404160 <_ZSt8to_charsPcS_e@plt>:
  404160:	ff 25 32 1f 02 00    	jmp    *0x21f32(%rip)        # 426098 <_ZSt8to_charsPcS_e@GLIBCXX_3.4.29>
  404166:	68 13 00 00 00       	push   $0x13
  40416b:	e9 b0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404170 <_ZSt8to_charsPcS_dSt12chars_format@plt>:
  404170:	ff 25 2a 1f 02 00    	jmp    *0x21f2a(%rip)        # 4260a0 <_ZSt8to_charsPcS_dSt12chars_format@GLIBCXX_3.4.29>
  404176:	68 14 00 00 00       	push   $0x14
  40417b:	e9 a0 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404180 <_ZSt8to_charsPcS_dSt12chars_formati@plt>:
  404180:	ff 25 22 1f 02 00    	jmp    *0x21f22(%rip)        # 4260a8 <_ZSt8to_charsPcS_dSt12chars_formati@GLIBCXX_3.4.29>
  404186:	68 15 00 00 00       	push   $0x15
  40418b:	e9 90 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404190 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>:
  404190:	ff 25 1a 1f 02 00    	jmp    *0x21f1a(%rip)        # 4260b0 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@GLIBCXX_3.4.21>
  404196:	68 16 00 00 00       	push   $0x16
  40419b:	e9 80 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041a0 <_ZNSt6localeC1ERKS_@plt>:
  4041a0:	ff 25 12 1f 02 00    	jmp    *0x21f12(%rip)        # 4260b8 <_ZNSt6localeC1ERKS_@GLIBCXX_3.4>
  4041a6:	68 17 00 00 00       	push   $0x17
  4041ab:	e9 70 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041b0 <_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate@plt>:
  4041b0:	ff 25 0a 1f 02 00    	jmp    *0x21f0a(%rip)        # 4260c0 <_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate@GLIBCXX_3.4>
  4041b6:	68 18 00 00 00       	push   $0x18
  4041bb:	e9 60 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041c0 <_ZSt20__throw_system_errori@plt>:
  4041c0:	ff 25 02 1f 02 00    	jmp    *0x21f02(%rip)        # 4260c8 <_ZSt20__throw_system_errori@GLIBCXX_3.4.11>
  4041c6:	68 19 00 00 00       	push   $0x19
  4041cb:	e9 50 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041d0 <_ZSt19__throw_logic_errorPKc@plt>:
  4041d0:	ff 25 fa 1e 02 00    	jmp    *0x21efa(%rip)        # 4260d0 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  4041d6:	68 1a 00 00 00       	push   $0x1a
  4041db:	e9 40 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041e0 <__cxa_free_exception@plt>:
  4041e0:	ff 25 f2 1e 02 00    	jmp    *0x21ef2(%rip)        # 4260d8 <__cxa_free_exception@CXXABI_1.3>
  4041e6:	68 1b 00 00 00       	push   $0x1b
  4041eb:	e9 30 fe ff ff       	jmp    404020 <_init+0x20>

00000000004041f0 <_ZSt8to_charsPcS_DF128_St12chars_format@plt>:
  4041f0:	ff 25 ea 1e 02 00    	jmp    *0x21eea(%rip)        # 4260e0 <_ZSt8to_charsPcS_DF128_St12chars_format@GLIBCXX_3.4.31>
  4041f6:	68 1c 00 00 00       	push   $0x1c
  4041fb:	e9 20 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404200 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@plt>:
  404200:	ff 25 e2 1e 02 00    	jmp    *0x21ee2(%rip)        # 4260e8 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@GLIBCXX_3.4.21>
  404206:	68 1d 00 00 00       	push   $0x1d
  40420b:	e9 10 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404210 <_ZSt28__throw_bad_array_new_lengthv@plt>:
  404210:	ff 25 da 1e 02 00    	jmp    *0x21eda(%rip)        # 4260f0 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
  404216:	68 1e 00 00 00       	push   $0x1e
  40421b:	e9 00 fe ff ff       	jmp    404020 <_init+0x20>

0000000000404220 <_ZNSo6sentryC1ERSo@plt>:
  404220:	ff 25 d2 1e 02 00    	jmp    *0x21ed2(%rip)        # 4260f8 <_ZNSo6sentryC1ERSo@GLIBCXX_3.4>
  404226:	68 1f 00 00 00       	push   $0x1f
  40422b:	e9 f0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404230 <memcpy@plt>:
  404230:	ff 25 ca 1e 02 00    	jmp    *0x21eca(%rip)        # 426100 <memcpy@GLIBC_2.14>
  404236:	68 20 00 00 00       	push   $0x20
  40423b:	e9 e0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404240 <_ZSt8to_charsPcS_DF128_St12chars_formati@plt>:
  404240:	ff 25 c2 1e 02 00    	jmp    *0x21ec2(%rip)        # 426108 <_ZSt8to_charsPcS_DF128_St12chars_formati@GLIBCXX_3.4.31>
  404246:	68 21 00 00 00       	push   $0x21
  40424b:	e9 d0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404250 <_ZNKSt7__cxx118numpunctIcE8truenameEv@plt>:
  404250:	ff 25 ba 1e 02 00    	jmp    *0x21eba(%rip)        # 426110 <_ZNKSt7__cxx118numpunctIcE8truenameEv@GLIBCXX_3.4.21>
  404256:	68 22 00 00 00       	push   $0x22
  40425b:	e9 c0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404260 <_ZdlPv@plt>:
  404260:	ff 25 b2 1e 02 00    	jmp    *0x21eb2(%rip)        # 426118 <_ZdlPv@GLIBCXX_3.4>
  404266:	68 23 00 00 00       	push   $0x23
  40426b:	e9 b0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404270 <_Znwm@plt>:
  404270:	ff 25 aa 1e 02 00    	jmp    *0x21eaa(%rip)        # 426120 <_Znwm@GLIBCXX_3.4>
  404276:	68 24 00 00 00       	push   $0x24
  40427b:	e9 a0 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404280 <_ZSt8to_charsPcS_fSt12chars_format@plt>:
  404280:	ff 25 a2 1e 02 00    	jmp    *0x21ea2(%rip)        # 426128 <_ZSt8to_charsPcS_fSt12chars_format@GLIBCXX_3.4.29>
  404286:	68 25 00 00 00       	push   $0x25
  40428b:	e9 90 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404290 <_ZdlPvm@plt>:
  404290:	ff 25 9a 1e 02 00    	jmp    *0x21e9a(%rip)        # 426130 <_ZdlPvm@CXXABI_1.3.9>
  404296:	68 26 00 00 00       	push   $0x26
  40429b:	e9 80 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042a0 <_ZSt8to_charsPcS_eSt12chars_formati@plt>:
  4042a0:	ff 25 92 1e 02 00    	jmp    *0x21e92(%rip)        # 426138 <_ZSt8to_charsPcS_eSt12chars_formati@GLIBCXX_3.4.29>
  4042a6:	68 27 00 00 00       	push   $0x27
  4042ab:	e9 70 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042b0 <_ZNSt13runtime_errorD2Ev@plt>:
  4042b0:	ff 25 8a 1e 02 00    	jmp    *0x21e8a(%rip)        # 426140 <_ZNSt13runtime_errorD2Ev@GLIBCXX_3.4>
  4042b6:	68 28 00 00 00       	push   $0x28
  4042bb:	e9 60 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042c0 <memchr@plt>:
  4042c0:	ff 25 82 1e 02 00    	jmp    *0x21e82(%rip)        # 426148 <memchr@GLIBC_2.2.5>
  4042c6:	68 29 00 00 00       	push   $0x29
  4042cb:	e9 50 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042d0 <_ZSt8to_charsPcS_fSt12chars_formati@plt>:
  4042d0:	ff 25 7a 1e 02 00    	jmp    *0x21e7a(%rip)        # 426150 <_ZSt8to_charsPcS_fSt12chars_formati@GLIBCXX_3.4.29>
  4042d6:	68 2a 00 00 00       	push   $0x2a
  4042db:	e9 40 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042e0 <exit@plt>:
  4042e0:	ff 25 72 1e 02 00    	jmp    *0x21e72(%rip)        # 426158 <exit@GLIBC_2.2.5>
  4042e6:	68 2b 00 00 00       	push   $0x2b
  4042eb:	e9 30 fd ff ff       	jmp    404020 <_init+0x20>

00000000004042f0 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>:
  4042f0:	ff 25 6a 1e 02 00    	jmp    *0x21e6a(%rip)        # 426160 <_ZNKSt7__cxx118numpunctIcE8groupingEv@GLIBCXX_3.4.21>
  4042f6:	68 2c 00 00 00       	push   $0x2c
  4042fb:	e9 20 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404300 <_ZNSt6locale7classicEv@plt>:
  404300:	ff 25 62 1e 02 00    	jmp    *0x21e62(%rip)        # 426168 <_ZNSt6locale7classicEv@GLIBCXX_3.4>
  404306:	68 2d 00 00 00       	push   $0x2d
  40430b:	e9 10 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404310 <_ZNKSt13runtime_error4whatEv@plt>:
  404310:	ff 25 5a 1e 02 00    	jmp    *0x21e5a(%rip)        # 426170 <_ZNKSt13runtime_error4whatEv@GLIBCXX_3.4>
  404316:	68 2e 00 00 00       	push   $0x2e
  40431b:	e9 00 fd ff ff       	jmp    404020 <_init+0x20>

0000000000404320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@plt>:
  404320:	ff 25 52 1e 02 00    	jmp    *0x21e52(%rip)        # 426178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@GLIBCXX_3.4.31>
  404326:	68 2f 00 00 00       	push   $0x2f
  40432b:	e9 f0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404330 <_ZNSt6localeD1Ev@plt>:
  404330:	ff 25 4a 1e 02 00    	jmp    *0x21e4a(%rip)        # 426180 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  404336:	68 30 00 00 00       	push   $0x30
  40433b:	e9 e0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404340 <__unordtf2@plt>:
  404340:	ff 25 42 1e 02 00    	jmp    *0x21e42(%rip)        # 426188 <__unordtf2@GCC_4.3.0>
  404346:	68 31 00 00 00       	push   $0x31
  40434b:	e9 d0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404350 <__cxa_rethrow@plt>:
  404350:	ff 25 3a 1e 02 00    	jmp    *0x21e3a(%rip)        # 426190 <__cxa_rethrow@CXXABI_1.3>
  404356:	68 32 00 00 00       	push   $0x32
  40435b:	e9 c0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404360 <_ZNSt15basic_streambufIcSt11char_traitsIcEE5sputnEPKcl@plt>:
  404360:	ff 25 32 1e 02 00    	jmp    *0x21e32(%rip)        # 426198 <_ZNSt15basic_streambufIcSt11char_traitsIcEE5sputnEPKcl@GLIBCXX_3.4>
  404366:	68 33 00 00 00       	push   $0x33
  40436b:	e9 b0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404370 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
  404370:	ff 25 2a 1e 02 00    	jmp    *0x21e2a(%rip)        # 4261a0 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
  404376:	68 34 00 00 00       	push   $0x34
  40437b:	e9 a0 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404380 <frexpl@plt>:
  404380:	ff 25 22 1e 02 00    	jmp    *0x21e22(%rip)        # 4261a8 <frexpl@GLIBC_2.2.5>
  404386:	68 35 00 00 00       	push   $0x35
  40438b:	e9 90 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404390 <__umodti3@plt>:
  404390:	ff 25 1a 1e 02 00    	jmp    *0x21e1a(%rip)        # 4261b0 <__umodti3@GCC_3.0>
  404396:	68 36 00 00 00       	push   $0x36
  40439b:	e9 80 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043a0 <_ZNKSo6sentrycvbEv@plt>:
  4043a0:	ff 25 12 1e 02 00    	jmp    *0x21e12(%rip)        # 4261b8 <_ZNKSo6sentrycvbEv@GLIBCXX_3.4>
  4043a6:	68 37 00 00 00       	push   $0x37
  4043ab:	e9 70 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043b0 <_ZNKSt6locale4nameB5cxx11Ev@plt>:
  4043b0:	ff 25 0a 1e 02 00    	jmp    *0x21e0a(%rip)        # 4261c0 <_ZNKSt6locale4nameB5cxx11Ev@GLIBCXX_3.4.21>
  4043b6:	68 38 00 00 00       	push   $0x38
  4043bb:	e9 60 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043c0 <memmove@plt>:
  4043c0:	ff 25 02 1e 02 00    	jmp    *0x21e02(%rip)        # 4261c8 <memmove@GLIBC_2.2.5>
  4043c6:	68 39 00 00 00       	push   $0x39
  4043cb:	e9 50 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043d0 <__cxa_end_catch@plt>:
  4043d0:	ff 25 fa 1d 02 00    	jmp    *0x21dfa(%rip)        # 4261d0 <__cxa_end_catch@CXXABI_1.3>
  4043d6:	68 3a 00 00 00       	push   $0x3a
  4043db:	e9 40 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043e0 <__gxx_personality_v0@plt>:
  4043e0:	ff 25 f2 1d 02 00    	jmp    *0x21df2(%rip)        # 4261d8 <__gxx_personality_v0@CXXABI_1.3>
  4043e6:	68 3b 00 00 00       	push   $0x3b
  4043eb:	e9 30 fc ff ff       	jmp    404020 <_init+0x20>

00000000004043f0 <_ZSt8to_charsPcS_DF128_@plt>:
  4043f0:	ff 25 ea 1d 02 00    	jmp    *0x21dea(%rip)        # 4261e0 <_ZSt8to_charsPcS_DF128_@GLIBCXX_3.4.31>
  4043f6:	68 3c 00 00 00       	push   $0x3c
  4043fb:	e9 20 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404400 <__cxa_throw@plt>:
  404400:	ff 25 e2 1d 02 00    	jmp    *0x21de2(%rip)        # 4261e8 <__cxa_throw@CXXABI_1.3>
  404406:	68 3d 00 00 00       	push   $0x3d
  40440b:	e9 10 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404410 <_Unwind_Resume@plt>:
  404410:	ff 25 da 1d 02 00    	jmp    *0x21dda(%rip)        # 4261f0 <_Unwind_Resume@GCC_3.0>
  404416:	68 3e 00 00 00       	push   $0x3e
  40441b:	e9 00 fc ff ff       	jmp    404020 <_init+0x20>

0000000000404420 <toupper@plt>:
  404420:	ff 25 d2 1d 02 00    	jmp    *0x21dd2(%rip)        # 4261f8 <toupper@GLIBC_2.2.5>
  404426:	68 3f 00 00 00       	push   $0x3f
  40442b:	e9 f0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404430 <frexp@plt>:
  404430:	ff 25 ca 1d 02 00    	jmp    *0x21dca(%rip)        # 426200 <frexp@GLIBC_2.2.5>
  404436:	68 40 00 00 00       	push   $0x40
  40443b:	e9 e0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404440 <_ZNSt13runtime_errorC2EPKc@plt>:
  404440:	ff 25 c2 1d 02 00    	jmp    *0x21dc2(%rip)        # 426208 <_ZNSt13runtime_errorC2EPKc@GLIBCXX_3.4.21>
  404446:	68 41 00 00 00       	push   $0x41
  40444b:	e9 d0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404450 <__cxa_pure_virtual@plt>:
  404450:	ff 25 ba 1d 02 00    	jmp    *0x21dba(%rip)        # 426210 <__cxa_pure_virtual@CXXABI_1.3>
  404456:	68 42 00 00 00       	push   $0x42
  40445b:	e9 c0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404460 <fwrite@plt>:
  404460:	ff 25 b2 1d 02 00    	jmp    *0x21db2(%rip)        # 426218 <fwrite@GLIBC_2.2.5>
  404466:	68 43 00 00 00       	push   $0x43
  40446b:	e9 b0 fb ff ff       	jmp    404020 <_init+0x20>

0000000000404470 <_ZNSt6localeC1Ev@plt>:
  404470:	ff 25 aa 1d 02 00    	jmp    *0x21daa(%rip)        # 426220 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  404476:	68 44 00 00 00       	push   $0x44
  40447b:	e9 a0 fb ff ff       	jmp    404020 <_init+0x20>

Disassembly of section .text:

0000000000404480 <_start>:
  404480:	31 ed                	xor    %ebp,%ebp
  404482:	49 89 d1             	mov    %rdx,%r9
  404485:	5e                   	pop    %rsi
  404486:	48 89 e2             	mov    %rsp,%rdx
  404489:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40448d:	50                   	push   %rax
  40448e:	54                   	push   %rsp
  40448f:	45 31 c0             	xor    %r8d,%r8d
  404492:	31 c9                	xor    %ecx,%ecx
  404494:	48 c7 c7 8d 45 40 00 	mov    $0x40458d,%rdi
  40449b:	ff 15 37 1b 02 00    	call   *0x21b37(%rip)        # 425fd8 <__libc_start_main@GLIBC_2.34>
  4044a1:	f4                   	hlt
  4044a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4044a9:	00 00 00
  4044ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004044b0 <_dl_relocate_static_pie>:
  4044b0:	c3                   	ret
  4044b1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4044b8:	00 00 00
  4044bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004044c0 <deregister_tm_clones>:
  4044c0:	b8 38 62 42 00       	mov    $0x426238,%eax
  4044c5:	48 3d 38 62 42 00    	cmp    $0x426238,%rax
  4044cb:	74 13                	je     4044e0 <deregister_tm_clones+0x20>
  4044cd:	b8 00 00 00 00       	mov    $0x0,%eax
  4044d2:	48 85 c0             	test   %rax,%rax
  4044d5:	74 09                	je     4044e0 <deregister_tm_clones+0x20>
  4044d7:	bf 38 62 42 00       	mov    $0x426238,%edi
  4044dc:	ff e0                	jmp    *%rax
  4044de:	66 90                	xchg   %ax,%ax
  4044e0:	c3                   	ret
  4044e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4044e8:	00 00 00 00
  4044ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004044f0 <register_tm_clones>:
  4044f0:	be 38 62 42 00       	mov    $0x426238,%esi
  4044f5:	48 81 ee 38 62 42 00 	sub    $0x426238,%rsi
  4044fc:	48 89 f0             	mov    %rsi,%rax
  4044ff:	48 c1 ee 3f          	shr    $0x3f,%rsi
  404503:	48 c1 f8 03          	sar    $0x3,%rax
  404507:	48 01 c6             	add    %rax,%rsi
  40450a:	48 d1 fe             	sar    %rsi
  40450d:	74 11                	je     404520 <register_tm_clones+0x30>
  40450f:	b8 00 00 00 00       	mov    $0x0,%eax
  404514:	48 85 c0             	test   %rax,%rax
  404517:	74 07                	je     404520 <register_tm_clones+0x30>
  404519:	bf 38 62 42 00       	mov    $0x426238,%edi
  40451e:	ff e0                	jmp    *%rax
  404520:	c3                   	ret
  404521:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  404528:	00 00 00 00
  40452c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404530 <__do_global_dtors_aux>:
  404530:	f3 0f 1e fa          	endbr64
  404534:	80 3d 35 1e 02 00 00 	cmpb   $0x0,0x21e35(%rip)        # 426370 <completed.0>
  40453b:	75 13                	jne    404550 <__do_global_dtors_aux+0x20>
  40453d:	55                   	push   %rbp
  40453e:	48 89 e5             	mov    %rsp,%rbp
  404541:	e8 7a ff ff ff       	call   4044c0 <deregister_tm_clones>
  404546:	c6 05 23 1e 02 00 01 	movb   $0x1,0x21e23(%rip)        # 426370 <completed.0>
  40454d:	5d                   	pop    %rbp
  40454e:	c3                   	ret
  40454f:	90                   	nop
  404550:	c3                   	ret
  404551:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  404558:	00 00 00 00
  40455c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404560 <frame_dummy>:
  404560:	f3 0f 1e fa          	endbr64
  404564:	eb 8a                	jmp    4044f0 <register_tm_clones>

0000000000404566 <_ZN7my_func3fooEv>:
namespace my_func {
	// no need to use std::
	using namespace std;

	void foo(void)
	{
  404566:	55                   	push   %rbp
  404567:	48 89 e5             	mov    %rsp,%rbp
		println("In {}", __FUNCTION__);
  40456a:	b8 05 00 00 00       	mov    $0x5,%eax
  40456f:	ba 42 b1 41 00       	mov    $0x41b142,%edx
  404574:	48 89 c1             	mov    %rax,%rcx
  404577:	48 89 d0             	mov    %rdx,%rax
  40457a:	ba 48 b1 41 00       	mov    $0x41b148,%edx
  40457f:	48 89 cf             	mov    %rcx,%rdi
  404582:	48 89 c6             	mov    %rax,%rsi
  404585:	e8 f8 3d 00 00       	call   408382 <_ZSt7printlnIJRA4_KcEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_>
	}
  40458a:	90                   	nop
  40458b:	5d                   	pop    %rbp
  40458c:	c3                   	ret

000000000040458d <main>:
}

using namespace my_func;

int main(void)
{
  40458d:	55                   	push   %rbp
  40458e:	48 89 e5             	mov    %rsp,%rbp
  404591:	41 57                	push   %r15
  404593:	41 56                	push   %r14
  404595:	41 55                	push   %r13
  404597:	41 54                	push   %r12
  404599:	53                   	push   %rbx
  40459a:	48 83 ec 58          	sub    $0x58,%rsp
  40459e:	48 8d 45 b3          	lea    -0x4d(%rbp),%rax
  4045a2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4045a6:	90                   	nop

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
  4045a7:	90                   	nop
	std::string s {"Hallo \"Professional C++\" Buch :-)"};
  4045a8:	48 8d 55 b3          	lea    -0x4d(%rbp),%rdx
  4045ac:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4045b0:	be 88 b1 41 00       	mov    $0x41b188,%esi
  4045b5:	48 89 c7             	mov    %rax,%rdi
  4045b8:	e8 d7 22 00 00       	call   406894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
  4045bd:	90                   	nop
	std::println("{}", s);
  4045be:	48 c7 45 80 02 00 00 	movq   $0x2,-0x80(%rbp)
  4045c5:	00
  4045c6:	48 c7 45 88 aa b1 41 	movq   $0x41b1aa,-0x78(%rbp)
  4045cd:	00
  4045ce:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4045d2:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  4045d6:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
  4045da:	48 89 ce             	mov    %rcx,%rsi
  4045dd:	48 89 d9             	mov    %rbx,%rcx
  4045e0:	48 89 c2             	mov    %rax,%rdx
  4045e3:	48 89 f7             	mov    %rsi,%rdi
  4045e6:	48 89 ce             	mov    %rcx,%rsi
  4045e9:	e8 c7 44 00 00       	call   408ab5 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>

	// std::cerr
	std::println(std::cerr, "Error code: {}", -1);
  4045ee:	c7 45 b4 ff ff ff ff 	movl   $0xffffffff,-0x4c(%rbp)
  4045f5:	41 be 0e 00 00 00    	mov    $0xe,%r14d
  4045fb:	41 bf ad b1 41 00    	mov    $0x41b1ad,%r15d
  404601:	48 8d 45 b4          	lea    -0x4c(%rbp),%rax
  404605:	4c 89 f6             	mov    %r14,%rsi
  404608:	4c 89 fa             	mov    %r15,%rdx
  40460b:	48 89 c1             	mov    %rax,%rcx
  40460e:	bf 60 62 42 00       	mov    $0x426260,%edi
  404613:	e8 ed 44 00 00       	call   408b05 <_ZSt7printlnIJiEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS3_>

	// within the namespaces using scope resolution operator
	my_func::foo();
  404618:	e8 49 ff ff ff       	call   404566 <_ZN7my_func3fooEv>
	// using directive
	foo();
  40461d:	e8 44 ff ff ff       	call   404566 <_ZN7my_func3fooEv>
	 * std::byte
	 * it's not a character nor a arithmetic type
	 * only for bit operations!
	 * -> cast for println needed
	 */
	std::byte my_byte {10};
  404622:	c6 45 cf 0a          	movb   $0xa,-0x31(%rbp)
  404626:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  40462a:	88 45 bf             	mov    %al,-0x41(%rbp)

  template<typename _IntegerType>
    [[nodiscard,__gnu__::__always_inline__]]
    constexpr _IntegerType
    to_integer(__byte_op_t<_IntegerType> __b) noexcept
    { return _IntegerType(__b); }
  40462d:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
	std::println("Value of byte: {}", to_integer<int>(my_byte));
  404631:	89 45 b8             	mov    %eax,-0x48(%rbp)
  404634:	41 bc 11 00 00 00    	mov    $0x11,%r12d
  40463a:	41 bd bc b1 41 00    	mov    $0x41b1bc,%r13d
  404640:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  404644:	4c 89 e6             	mov    %r12,%rsi
  404647:	4c 89 e9             	mov    %r13,%rcx
  40464a:	48 89 c2             	mov    %rax,%rdx
  40464d:	48 89 f7             	mov    %rsi,%rdi
  404650:	48 89 ce             	mov    %rcx,%rsi
  404653:	e8 59 45 00 00       	call   408bb1 <_ZSt7printlnIJiEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS2_>
	// note: won't work!
	//if (my_byte != 0)
	//	std::println("Value of byte: {}", (unsigned char) my_byte);


	exit (EXIT_SUCCESS);
  404658:	bf 00 00 00 00       	mov    $0x0,%edi
  40465d:	e8 7e fc ff ff       	call   4042e0 <exit@plt>
}
  404662:	48 89 c3             	mov    %rax,%rbx
  404665:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  404669:	48 89 c7             	mov    %rax,%rdi
  40466c:	e8 03 2f 00 00       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  404671:	48 89 d8             	mov    %rbx,%rax
  404674:	48 89 c7             	mov    %rax,%rdi
  404677:	e8 94 fd ff ff       	call   404410 <_Unwind_Resume@plt>

000000000040467c <_ZSt21is_constant_evaluatedv>:
  40467c:	55                   	push   %rbp
  40467d:	48 89 e5             	mov    %rsp,%rbp
  404680:	b8 00 00 00 00       	mov    $0x0,%eax
  404685:	5d                   	pop    %rbp
  404686:	c3                   	ret

0000000000404687 <_ZSteqSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    { return weak_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    [[nodiscard]]
    friend constexpr bool
    operator==(strong_ordering __v, __cmp_cat::__unspec) noexcept
  404687:	55                   	push   %rbp
  404688:	48 89 e5             	mov    %rsp,%rbp
  40468b:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value == 0; }
  40468f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  404693:	84 c0                	test   %al,%al
  404695:	0f 94 c0             	sete   %al
  404698:	5d                   	pop    %rbp
  404699:	c3                   	ret

000000000040469a <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
  40469a:	55                   	push   %rbp
  40469b:	48 89 e5             	mov    %rsp,%rbp
  40469e:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value < 0; }
  4046a2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4046a6:	c0 e8 07             	shr    $0x7,%al
  4046a9:	5d                   	pop    %rbp
  4046aa:	c3                   	ret

00000000004046ab <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
  4046ab:	55                   	push   %rbp
  4046ac:	48 89 e5             	mov    %rsp,%rbp
  4046af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046b3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4046bb:	5d                   	pop    %rbp
  4046bc:	c3                   	ret

00000000004046bd <_ZN9__gnu_cxx5__ops15__iter_less_valEv>:
  };

  _GLIBCXX20_CONSTEXPR
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }
  4046bd:	55                   	push   %rbp
  4046be:	48 89 e5             	mov    %rsp,%rbp
  4046c1:	90                   	nop
  4046c2:	5d                   	pop    %rbp
  4046c3:	c3                   	ret

00000000004046c4 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>:
  };

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }
  4046c4:	55                   	push   %rbp
  4046c5:	48 89 e5             	mov    %rsp,%rbp
  4046c8:	90                   	nop
  4046c9:	5d                   	pop    %rbp
  4046ca:	c3                   	ret

00000000004046cb <_ZSt8to_charsPcS_mi>:
_GLIBCXX_TO_CHARS(signed short)
_GLIBCXX_TO_CHARS(unsigned short)
_GLIBCXX_TO_CHARS(signed int)
_GLIBCXX_TO_CHARS(unsigned int)
_GLIBCXX_TO_CHARS(signed long)
_GLIBCXX_TO_CHARS(unsigned long)
  4046cb:	55                   	push   %rbp
  4046cc:	48 89 e5             	mov    %rsp,%rbp
  4046cf:	48 83 ec 20          	sub    $0x20,%rsp
  4046d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4046d7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4046db:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4046df:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  4046e2:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  4046e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4046e9:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  4046ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4046f1:	48 89 c7             	mov    %rax,%rdi
  4046f4:	e8 e4 28 00 00       	call   406fdd <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i>
  4046f9:	c9                   	leave
  4046fa:	c3                   	ret

00000000004046fb <_ZSt11__bit_widthIjEiT_>:
      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
    }

  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
  4046fb:	55                   	push   %rbp
  4046fc:	48 89 e5             	mov    %rsp,%rbp
  4046ff:	48 83 ec 20          	sub    $0x20,%rsp
  404703:	89 7d ec             	mov    %edi,-0x14(%rbp)
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  404706:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  40470d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404710:	89 c7                	mov    %eax,%edi
  404712:	e8 cc 2b 00 00       	call   4072e3 <_ZSt13__countl_zeroIjEiT_>
  404717:	ba 20 00 00 00       	mov    $0x20,%edx
  40471c:	29 c2                	sub    %eax,%edx
  40471e:	89 d0                	mov    %edx,%eax
    }
  404720:	c9                   	leave
  404721:	c3                   	ret

0000000000404722 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  404722:	55                   	push   %rbp
  404723:	48 89 e5             	mov    %rsp,%rbp
  404726:	48 83 ec 10          	sub    $0x10,%rsp
  40472a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40472e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
  404732:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
  404737:	84 c0                	test   %al,%al
  404739:	74 15                	je     404750 <_ZNSt11char_traitsIcE6assignERcRKc+0x2e>
	  std::construct_at(__builtin_addressof(__c1), __c2);
  40473b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40473f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404743:	48 89 d6             	mov    %rdx,%rsi
  404746:	48 89 c7             	mov    %rax,%rdi
  404749:	e8 d6 2b 00 00       	call   407324 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	else
#endif
	__c1 = __c2;
      }
  40474e:	eb 0d                	jmp    40475d <_ZNSt11char_traitsIcE6assignERcRKc+0x3b>
	__c1 = __c2;
  404750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404754:	0f b6 10             	movzbl (%rax),%edx
  404757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40475b:	88 10                	mov    %dl,(%rax)
      }
  40475d:	90                   	nop
  40475e:	c9                   	leave
  40475f:	c3                   	ret

0000000000404760 <_ZNSt11char_traitsIcE2eqERKcS2_>:

      static _GLIBCXX_CONSTEXPR bool
      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  404760:	55                   	push   %rbp
  404761:	48 89 e5             	mov    %rsp,%rbp
  404764:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404768:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
  40476c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404770:	0f b6 10             	movzbl (%rax),%edx
  404773:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404777:	0f b6 00             	movzbl (%rax),%eax
  40477a:	38 c2                	cmp    %al,%dl
  40477c:	0f 94 c0             	sete   %al
  40477f:	5d                   	pop    %rbp
  404780:	c3                   	ret

0000000000404781 <_ZNSt11char_traitsIcE2ltERKcS2_>:

      static _GLIBCXX_CONSTEXPR bool
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
  404781:	55                   	push   %rbp
  404782:	48 89 e5             	mov    %rsp,%rbp
  404785:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404789:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	// LWG 467.
	return (static_cast<unsigned char>(__c1)
  40478d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404791:	0f b6 00             	movzbl (%rax),%eax
  404794:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
  404796:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40479a:	0f b6 00             	movzbl (%rax),%eax
  40479d:	38 c2                	cmp    %al,%dl
  40479f:	0f 92 c0             	setb   %al
      }
  4047a2:	5d                   	pop    %rbp
  4047a3:	c3                   	ret

00000000004047a4 <_ZNSt11char_traitsIcE7compareEPKcS2_m>:

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
  4047a4:	55                   	push   %rbp
  4047a5:	48 89 e5             	mov    %rsp,%rbp
  4047a8:	48 83 ec 30          	sub    $0x30,%rsp
  4047ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4047b0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4047b4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      {
	if (__n == 0)
  4047b8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4047bd:	75 0a                	jne    4047c9 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
  4047bf:	b8 00 00 00 00       	mov    $0x0,%eax
  4047c4:	e9 99 00 00 00       	jmp    404862 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
  4047c9:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  4047ce:	84 c0                	test   %al,%al
  4047d0:	74 78                	je     40484a <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	  {
	    for (size_t __i = 0; __i < __n; ++__i)
  4047d2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4047d9:	00
  4047da:	eb 5d                	jmp    404839 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
  4047dc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4047e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047e4:	48 01 c2             	add    %rax,%rdx
  4047e7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4047eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4047ef:	48 01 c8             	add    %rcx,%rax
  4047f2:	48 89 d6             	mov    %rdx,%rsi
  4047f5:	48 89 c7             	mov    %rax,%rdi
  4047f8:	e8 84 ff ff ff       	call   404781 <_ZNSt11char_traitsIcE2ltERKcS2_>
  4047fd:	84 c0                	test   %al,%al
  4047ff:	74 07                	je     404808 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
  404801:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  404806:	eb 5a                	jmp    404862 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
  404808:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40480c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404810:	48 01 c2             	add    %rax,%rdx
  404813:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40481b:	48 01 c8             	add    %rcx,%rax
  40481e:	48 89 d6             	mov    %rdx,%rsi
  404821:	48 89 c7             	mov    %rax,%rdi
  404824:	e8 58 ff ff ff       	call   404781 <_ZNSt11char_traitsIcE2ltERKcS2_>
  404829:	84 c0                	test   %al,%al
  40482b:	74 07                	je     404834 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
  40482d:	b8 01 00 00 00       	mov    $0x1,%eax
  404832:	eb 2e                	jmp    404862 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
  404834:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  404839:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40483d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  404841:	72 99                	jb     4047dc <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
  404843:	b8 00 00 00 00       	mov    $0x0,%eax
  404848:	eb 18                	jmp    404862 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
  40484a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40484e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  404852:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404856:	48 89 ce             	mov    %rcx,%rsi
  404859:	48 89 c7             	mov    %rax,%rdi
  40485c:	e8 7f f8 ff ff       	call   4040e0 <memcmp@plt>
  404861:	90                   	nop
      }
  404862:	c9                   	leave
  404863:	c3                   	ret

0000000000404864 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
  404864:	55                   	push   %rbp
  404865:	48 89 e5             	mov    %rsp,%rbp
  404868:	48 83 ec 10          	sub    $0x10,%rsp
  40486c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404870:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  404875:	84 c0                	test   %al,%al
  404877:	74 0e                	je     404887 <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
  404879:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40487d:	48 89 c7             	mov    %rax,%rdi
  404880:	e8 2d 13 00 00       	call   405bb2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
  404885:	eb 0d                	jmp    404894 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
  404887:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40488b:	48 89 c7             	mov    %rax,%rdi
  40488e:	e8 1d f8 ff ff       	call   4040b0 <strlen@plt>
  404893:	90                   	nop
      }
  404894:	c9                   	leave
  404895:	c3                   	ret

0000000000404896 <_ZNSt11char_traitsIcE4findEPKcmRS1_>:

      static _GLIBCXX17_CONSTEXPR const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
  404896:	55                   	push   %rbp
  404897:	48 89 e5             	mov    %rsp,%rbp
  40489a:	48 83 ec 20          	sub    $0x20,%rsp
  40489e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4048a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4048a6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  4048aa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4048af:	75 07                	jne    4048b8 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x22>
	  return 0;
  4048b1:	b8 00 00 00 00       	mov    $0x0,%eax
  4048b6:	eb 3f                	jmp    4048f7 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x61>
  4048b8:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
  4048bd:	84 c0                	test   %al,%al
  4048bf:	74 19                	je     4048da <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x44>
	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
  4048c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4048c5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4048c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4048cd:	48 89 ce             	mov    %rcx,%rsi
  4048d0:	48 89 c7             	mov    %rax,%rdi
  4048d3:	e8 0e 1a 00 00       	call   4062e6 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_>
  4048d8:	eb 1d                	jmp    4048f7 <_ZNSt11char_traitsIcE4findEPKcmRS1_+0x61>
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
  4048da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4048de:	0f b6 00             	movzbl (%rax),%eax
  4048e1:	0f be c8             	movsbl %al,%ecx
  4048e4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4048e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4048ec:	89 ce                	mov    %ecx,%esi
  4048ee:	48 89 c7             	mov    %rax,%rdi
  4048f1:	e8 ca f9 ff ff       	call   4042c0 <memchr@plt>
  4048f6:	90                   	nop
      }
  4048f7:	c9                   	leave
  4048f8:	c3                   	ret

00000000004048f9 <_ZNSt11char_traitsIcE4moveEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
  4048f9:	55                   	push   %rbp
  4048fa:	48 89 e5             	mov    %rsp,%rbp
  4048fd:	48 83 ec 20          	sub    $0x20,%rsp
  404901:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404905:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404909:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  40490d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  404912:	75 06                	jne    40491a <_ZNSt11char_traitsIcE4moveEPcPKcm+0x21>
	  return __s1;
  404914:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404918:	eb 3a                	jmp    404954 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
  40491a:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  40491f:	84 c0                	test   %al,%al
  404921:	74 19                	je     40493c <_ZNSt11char_traitsIcE4moveEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
  404923:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404927:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40492b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40492f:	48 89 ce             	mov    %rcx,%rsi
  404932:	48 89 c7             	mov    %rax,%rdi
  404935:	e8 2a 2a 00 00       	call   407364 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>
  40493a:	eb 18                	jmp    404954 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
  40493c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404940:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404948:	48 89 ce             	mov    %rcx,%rsi
  40494b:	48 89 c7             	mov    %rax,%rdi
  40494e:	e8 6d fa ff ff       	call   4043c0 <memmove@plt>
  404953:	90                   	nop
      }
  404954:	c9                   	leave
  404955:	c3                   	ret

0000000000404956 <_ZNSt11char_traitsIcE4copyEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
  404956:	55                   	push   %rbp
  404957:	48 89 e5             	mov    %rsp,%rbp
  40495a:	48 83 ec 20          	sub    $0x20,%rsp
  40495e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404962:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404966:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
  40496a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40496f:	75 06                	jne    404977 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x21>
	  return __s1;
  404971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404975:	eb 40                	jmp    4049b7 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
  404977:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  40497c:	84 c0                	test   %al,%al
  40497e:	74 19                	je     404999 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
  404980:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404984:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  404988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40498c:	48 89 ce             	mov    %rcx,%rsi
  40498f:	48 89 c7             	mov    %rax,%rdi
  404992:	e8 31 2a 00 00       	call   4073c8 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
  404997:	eb 1e                	jmp    4049b7 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  404999:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40499d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4049a1:	48 89 d1             	mov    %rdx,%rcx
  4049a4:	48 89 c6             	mov    %rax,%rsi
  4049a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4049ab:	48 89 c2             	mov    %rax,%rdx
  4049ae:	48 89 cf             	mov    %rcx,%rdi
  4049b1:	e8 7a f8 ff ff       	call   404230 <memcpy@plt>
  4049b6:	90                   	nop
      }
  4049b7:	c9                   	leave
  4049b8:	c3                   	ret

00000000004049b9 <_ZNSt11char_traitsIcE6assignEPcmc>:

      static _GLIBCXX20_CONSTEXPR char_type*
      assign(char_type* __s, size_t __n, char_type __a)
  4049b9:	55                   	push   %rbp
  4049ba:	48 89 e5             	mov    %rsp,%rbp
  4049bd:	48 83 ec 20          	sub    $0x20,%rsp
  4049c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4049c5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4049c9:	89 d0                	mov    %edx,%eax
  4049cb:	88 45 ec             	mov    %al,-0x14(%rbp)
      {
	if (__n == 0)
  4049ce:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4049d3:	75 06                	jne    4049db <_ZNSt11char_traitsIcE6assignEPcmc+0x22>
	  return __s;
  4049d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049d9:	eb 39                	jmp    404a14 <_ZNSt11char_traitsIcE6assignEPcmc+0x5b>
  4049db:	b8 00 00 00 00       	mov    $0x0,%eax
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
  4049e0:	84 c0                	test   %al,%al
  4049e2:	74 19                	je     4049fd <_ZNSt11char_traitsIcE6assignEPcmc+0x44>
	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
  4049e4:	0f be 55 ec          	movsbl -0x14(%rbp),%edx
  4049e8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4049ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4049f0:	48 89 ce             	mov    %rcx,%rsi
  4049f3:	48 89 c7             	mov    %rax,%rdi
  4049f6:	e8 5b 2a 00 00       	call   407456 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc>
  4049fb:	eb 17                	jmp    404a14 <_ZNSt11char_traitsIcE6assignEPcmc+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
  4049fd:	0f be 4d ec          	movsbl -0x14(%rbp),%ecx
  404a01:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a09:	89 ce                	mov    %ecx,%esi
  404a0b:	48 89 c7             	mov    %rax,%rdi
  404a0e:	e8 2d f7 ff ff       	call   404140 <memset@plt>
  404a13:	90                   	nop
      }
  404a14:	c9                   	leave
  404a15:	c3                   	ret

0000000000404a16 <_ZSt10__sv_checkmmPKc>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  // Helper for basic_string and basic_string_view members.
  constexpr size_t
  __sv_check(size_t __size, size_t __pos, const char* __s)
  {
  404a16:	55                   	push   %rbp
  404a17:	48 89 e5             	mov    %rsp,%rbp
  404a1a:	48 83 ec 20          	sub    $0x20,%rsp
  404a1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404a22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  404a26:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if (__pos > __size)
  404a2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404a2e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  404a32:	73 1e                	jae    404a52 <_ZSt10__sv_checkmmPKc+0x3c>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
  404a34:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  404a38:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404a3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404a40:	48 89 c6             	mov    %rax,%rsi
  404a43:	bf 10 b0 41 00       	mov    $0x41b010,%edi
  404a48:	b8 00 00 00 00       	mov    $0x0,%eax
  404a4d:	e8 1e f9 ff ff       	call   404370 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
				   "(which is %zu)"), __s, __pos, __size);
    return __pos;
  404a52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  }
  404a56:	c9                   	leave
  404a57:	c3                   	ret

0000000000404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_data() const
      { return _M_dataplus._M_p; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_local_data()
  404a58:	55                   	push   %rbp
  404a59:	48 89 e5             	mov    %rsp,%rbp
  404a5c:	48 83 ec 10          	sub    $0x10,%rsp
  404a60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  404a64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a68:	48 83 c0 10          	add    $0x10,%rax
  404a6c:	48 89 c7             	mov    %rax,%rdi
  404a6f:	e8 02 00 00 00       	call   404a76 <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>
#else
	return pointer(_M_local_buf);
#endif
      }
  404a74:	c9                   	leave
  404a75:	c3                   	ret

0000000000404a76 <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
  404a76:	55                   	push   %rbp
  404a77:	48 89 e5             	mov    %rsp,%rbp
  404a7a:	48 83 ec 10          	sub    $0x10,%rsp
  404a7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  404a82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404a86:	48 89 c7             	mov    %rax,%rdi
  404a89:	e8 02 00 00 00       	call   404a90 <_ZSt9addressofIcEPT_RS0_>
  404a8e:	c9                   	leave
  404a8f:	c3                   	ret

0000000000404a90 <_ZSt9addressofIcEPT_RS0_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
  404a90:	55                   	push   %rbp
  404a91:	48 89 e5             	mov    %rsp,%rbp
  404a94:	48 83 ec 10          	sub    $0x10,%rsp
  404a98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  404a9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404aa0:	48 89 c7             	mov    %rax,%rdi
  404aa3:	e8 02 00 00 00       	call   404aaa <_ZSt11__addressofIcEPT_RS0_>
  404aa8:	c9                   	leave
  404aa9:	c3                   	ret

0000000000404aaa <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  404aaa:	55                   	push   %rbp
  404aab:	48 89 e5             	mov    %rsp,%rbp
  404aae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  404ab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ab6:	5d                   	pop    %rbp
  404ab7:	c3                   	ret

0000000000404ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
  404ab8:	55                   	push   %rbp
  404ab9:	48 89 e5             	mov    %rsp,%rbp
  404abc:	48 83 ec 40          	sub    $0x40,%rsp
  404ac0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404ac4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  404ac8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404acc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404ad0:	48 89 c7             	mov    %rax,%rdi
  404ad3:	e8 2c 00 00 00       	call   404b04 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
  404ad8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  404adc:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  404ae0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  404ae4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ae8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  404aec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404af0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

      __attribute__((__always_inline__))
      _GLIBCXX20_CONSTEXPR
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  404af4:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  404af5:	90                   	nop
  404af6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404afa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  404afe:	48 89 10             	mov    %rdx,(%rax)
  404b01:	90                   	nop
  404b02:	c9                   	leave
  404b03:	c3                   	ret

0000000000404b04 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
  404b04:	55                   	push   %rbp
  404b05:	48 89 e5             	mov    %rsp,%rbp
  404b08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  404b0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b10:	5d                   	pop    %rbp
  404b11:	c3                   	ret

0000000000404b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      struct _Alloc_hider : allocator_type // TODO check __is_final
  404b12:	55                   	push   %rbp
  404b13:	48 89 e5             	mov    %rsp,%rbp
  404b16:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  404b1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404b1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      ~allocator() _GLIBCXX_NOTHROW { }
  404b22:	90                   	nop
  404b23:	90                   	nop
  404b24:	5d                   	pop    %rbp
  404b25:	c3                   	ret

0000000000404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:

      /**
       *  @brief  Default constructor creates an empty string.
       */
      _GLIBCXX20_CONSTEXPR
      basic_string()
  404b26:	55                   	push   %rbp
  404b27:	48 89 e5             	mov    %rsp,%rbp
  404b2a:	53                   	push   %rbx
  404b2b:	48 83 ec 38          	sub    $0x38,%rsp
  404b2f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
  404b33:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  404b37:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  404b3b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  404b3f:	90                   	nop
      allocator() _GLIBCXX_NOTHROW { }
  404b40:	90                   	nop
  404b41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404b45:	48 89 c7             	mov    %rax,%rdi
  404b48:	e8 0b ff ff ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  404b4d:	48 89 c1             	mov    %rax,%rcx
  404b50:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
  404b54:	48 89 c2             	mov    %rax,%rdx
  404b57:	48 89 ce             	mov    %rcx,%rsi
  404b5a:	48 89 df             	mov    %rbx,%rdi
  404b5d:	e8 56 ff ff ff       	call   404ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
      ~allocator() _GLIBCXX_NOTHROW { }
  404b62:	90                   	nop
  404b63:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404b67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
  404b6b:	e8 0c fb ff ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  404b70:	84 c0                	test   %al,%al
  404b72:	74 28                	je     404b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x76>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  404b74:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  404b7b:	00
  404b7c:	eb 17                	jmp    404b95 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x6f>
	    _M_local_buf[__i] = _CharT();
  404b7e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  404b82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  404b86:	48 01 d0             	add    %rdx,%rax
  404b89:	48 83 c0 10          	add    $0x10,%rax
  404b8d:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  404b90:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  404b95:	48 83 7d e0 0f       	cmpq   $0xf,-0x20(%rbp)
  404b9a:	76 e2                	jbe    404b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x58>
      }
  404b9c:	90                   	nop
      {
	_M_init_local_buf();
	_M_set_length(0);
  404b9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404ba1:	be 00 00 00 00       	mov    $0x0,%esi
  404ba6:	48 89 c7             	mov    %rax,%rdi
  404ba9:	e8 7a 29 00 00       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  404bae:	90                   	nop
  404baf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  404bb3:	c9                   	leave
  404bb4:	c3                   	ret

0000000000404bb5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
#endif

  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404bb5:	55                   	push   %rbp
  404bb6:	48 89 e5             	mov    %rsp,%rbp
  404bb9:	89 7d dc             	mov    %edi,-0x24(%rbp)
  404bbc:	89 75 d8             	mov    %esi,-0x28(%rbp)
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      unsigned __n = 1;
  404bbf:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404bc6:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404bc9:	0f af c0             	imul   %eax,%eax
  404bcc:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404bcf:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404bd2:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404bd5:	0f af c2             	imul   %edx,%eax
  404bd8:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404bdb:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404bde:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404be2:	89 c0                	mov    %eax,%eax
  404be4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
  404be8:	8b 45 d8             	mov    -0x28(%rbp),%eax
  404beb:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  404bee:	73 05                	jae    404bf5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x40>
  404bf0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404bf3:	eb 46                	jmp    404c3b <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b2) return __n + 1;
  404bf5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404bf8:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  404bfb:	73 08                	jae    404c05 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x50>
  404bfd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c00:	83 c0 01             	add    $0x1,%eax
  404c03:	eb 36                	jmp    404c3b <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b3) return __n + 2;
  404c05:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404c08:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  404c0b:	73 08                	jae    404c15 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
  404c0d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c10:	83 c0 02             	add    $0x2,%eax
  404c13:	eb 26                	jmp    404c3b <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  if (__value < __b4) return __n + 3;
  404c15:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404c18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404c1c:	73 08                	jae    404c26 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x71>
  404c1e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c21:	83 c0 03             	add    $0x3,%eax
  404c24:	eb 15                	jmp    404c3b <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x86>
	  __value /= __b4;
  404c26:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404c29:	ba 00 00 00 00       	mov    $0x0,%edx
  404c2e:	48 f7 75 e8          	divq   -0x18(%rbp)
  404c32:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  __n += 4;
  404c35:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404c39:	eb ad                	jmp    404be8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x33>
	}
    }
  404c3b:	5d                   	pop    %rbp
  404c3c:	c3                   	ret

0000000000404c3d <_ZNSt8__detail14__to_chars_lenImEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404c3d:	55                   	push   %rbp
  404c3e:	48 89 e5             	mov    %rsp,%rbp
  404c41:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404c45:	89 75 d4             	mov    %esi,-0x2c(%rbp)
      unsigned __n = 1;
  404c48:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404c4f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c52:	0f af c0             	imul   %eax,%eax
  404c55:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404c58:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c5b:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404c5e:	0f af c2             	imul   %edx,%eax
  404c61:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404c64:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c67:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404c6b:	89 c0                	mov    %eax,%eax
  404c6d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404c71:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404c74:	89 c0                	mov    %eax,%eax
  404c76:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404c7a:	73 05                	jae    404c81 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x44>
  404c7c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c7f:	eb 4b                	jmp    404ccc <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b2) return __n + 1;
  404c81:	8b 45 f8             	mov    -0x8(%rbp),%eax
  404c84:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404c88:	73 08                	jae    404c92 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x55>
  404c8a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c8d:	83 c0 01             	add    $0x1,%eax
  404c90:	eb 3a                	jmp    404ccc <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b3) return __n + 2;
  404c92:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404c95:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404c99:	73 08                	jae    404ca3 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x66>
  404c9b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404c9e:	83 c0 02             	add    $0x2,%eax
  404ca1:	eb 29                	jmp    404ccc <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  if (__value < __b4) return __n + 3;
  404ca3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404ca7:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404cab:	73 08                	jae    404cb5 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x78>
  404cad:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404cb0:	83 c0 03             	add    $0x3,%eax
  404cb3:	eb 17                	jmp    404ccc <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x8f>
	  __value /= __b4;
  404cb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404cb9:	ba 00 00 00 00       	mov    $0x0,%edx
  404cbe:	48 f7 75 e8          	divq   -0x18(%rbp)
  404cc2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  __n += 4;
  404cc6:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404cca:	eb a5                	jmp    404c71 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x34>
    }
  404ccc:	5d                   	pop    %rbp
  404ccd:	c3                   	ret

0000000000404cce <_ZNSt8__detail14__to_chars_lenIyEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  404cce:	55                   	push   %rbp
  404ccf:	48 89 e5             	mov    %rsp,%rbp
  404cd2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  404cd6:	89 75 d4             	mov    %esi,-0x2c(%rbp)
      unsigned __n = 1;
  404cd9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
      const unsigned __b2 = __base  * __base;
  404ce0:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404ce3:	0f af c0             	imul   %eax,%eax
  404ce6:	89 45 f8             	mov    %eax,-0x8(%rbp)
      const unsigned __b3 = __b2 * __base;
  404ce9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404cec:	8b 55 f8             	mov    -0x8(%rbp),%edx
  404cef:	0f af c2             	imul   %edx,%eax
  404cf2:	89 45 f4             	mov    %eax,-0xc(%rbp)
      const unsigned long __b4 = __b3 * __base;
  404cf5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404cf8:	0f af 45 f4          	imul   -0xc(%rbp),%eax
  404cfc:	89 c0                	mov    %eax,%eax
  404cfe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404d02:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  404d05:	89 c0                	mov    %eax,%eax
  404d07:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404d0b:	73 05                	jae    404d12 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x44>
  404d0d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404d10:	eb 4b                	jmp    404d5d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b2) return __n + 1;
  404d12:	8b 45 f8             	mov    -0x8(%rbp),%eax
  404d15:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404d19:	73 08                	jae    404d23 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x55>
  404d1b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404d1e:	83 c0 01             	add    $0x1,%eax
  404d21:	eb 3a                	jmp    404d5d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b3) return __n + 2;
  404d23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  404d26:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  404d2a:	73 08                	jae    404d34 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x66>
  404d2c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404d2f:	83 c0 02             	add    $0x2,%eax
  404d32:	eb 29                	jmp    404d5d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  if (__value < __b4) return __n + 3;
  404d34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404d38:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  404d3c:	73 08                	jae    404d46 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x78>
  404d3e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  404d41:	83 c0 03             	add    $0x3,%eax
  404d44:	eb 17                	jmp    404d5d <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x8f>
	  __value /= __b4;
  404d46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404d4a:	ba 00 00 00 00       	mov    $0x0,%edx
  404d4f:	48 f7 75 e8          	divq   -0x18(%rbp)
  404d53:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  __n += 4;
  404d57:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
	  if (__value < (unsigned)__base) return __n;
  404d5b:	eb a5                	jmp    404d02 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x34>
    }
  404d5d:	5d                   	pop    %rbp
  404d5e:	c3                   	ret
  404d5f:	90                   	nop

0000000000404d60 <_ZNKSt8ios_base6getlocEv>:
     *  If @c imbue(loc) has previously been called, then this function
     *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),
     *  the global C++ locale.
    */
    locale
    getloc() const
  404d60:	55                   	push   %rbp
  404d61:	48 89 e5             	mov    %rsp,%rbp
  404d64:	48 83 ec 10          	sub    $0x10,%rsp
  404d68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404d6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _M_ios_locale; }
  404d70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404d74:	48 8d 90 d0 00 00 00 	lea    0xd0(%rax),%rdx
  404d7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d7f:	48 89 d6             	mov    %rdx,%rsi
  404d82:	48 89 c7             	mov    %rax,%rdi
  404d85:	e8 16 f4 ff ff       	call   4041a0 <_ZNSt6localeC1ERKS_@plt>
  404d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d8e:	c9                   	leave
  404d8f:	c3                   	ret

0000000000404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
  404d90:	55                   	push   %rbp
  404d91:	48 89 e5             	mov    %rsp,%rbp
  404d94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  404d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404d9c:	48 8b 40 08          	mov    0x8(%rax),%rax
  404da0:	5d                   	pop    %rbp
  404da1:	c3                   	ret

0000000000404da2 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>:
    template<>
      class __extent_storage<dynamic_extent>
      {
      public:
	constexpr
	__extent_storage(size_t __extent) noexcept
  404da2:	55                   	push   %rbp
  404da3:	48 89 e5             	mov    %rsp,%rbp
  404da6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404daa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_extent_value(__extent)
  404dae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404db2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  404db6:	48 89 10             	mov    %rdx,(%rax)
	{ }
  404db9:	90                   	nop
  404dba:	5d                   	pop    %rbp
  404dbb:	c3                   	ret

0000000000404dbc <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>:

	constexpr size_t
	_M_extent() const noexcept
  404dbc:	55                   	push   %rbp
  404dbd:	48 89 e5             	mov    %rsp,%rbp
  404dc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return this->_M_extent_value; }
  404dc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404dc8:	48 8b 00             	mov    (%rax),%rax
  404dcb:	5d                   	pop    %rbp
  404dcc:	c3                   	ret

0000000000404dcd <_ZNSt9__unicode17__is_scalar_valueEDi>:
namespace __unicode
{
  // A Unicode code point that is not a high or low surrogate.
  constexpr bool
  __is_scalar_value(char32_t __c)
  {
  404dcd:	55                   	push   %rbp
  404dce:	48 89 e5             	mov    %rsp,%rbp
  404dd1:	89 7d fc             	mov    %edi,-0x4(%rbp)
    if (__c < 0xD800) [[likely]]
  404dd4:	81 7d fc ff d7 00 00 	cmpl   $0xd7ff,-0x4(%rbp)
  404ddb:	77 07                	ja     404de4 <_ZNSt9__unicode17__is_scalar_valueEDi+0x17>
      return true;
  404ddd:	b8 01 00 00 00       	mov    $0x1,%eax
  404de2:	eb 1f                	jmp    404e03 <_ZNSt9__unicode17__is_scalar_valueEDi+0x36>
    return 0xDFFF < __c && __c <= 0x10FFFF;
  404de4:	81 7d fc ff df 00 00 	cmpl   $0xdfff,-0x4(%rbp)
  404deb:	76 10                	jbe    404dfd <_ZNSt9__unicode17__is_scalar_valueEDi+0x30>
  404ded:	81 7d fc ff ff 10 00 	cmpl   $0x10ffff,-0x4(%rbp)
  404df4:	77 07                	ja     404dfd <_ZNSt9__unicode17__is_scalar_valueEDi+0x30>
  404df6:	b8 01 00 00 00       	mov    $0x1,%eax
  404dfb:	eb 05                	jmp    404e02 <_ZNSt9__unicode17__is_scalar_valueEDi+0x35>
  404dfd:	b8 00 00 00 00       	mov    $0x0,%eax
  404e02:	90                   	nop
  }
  404e03:	5d                   	pop    %rbp
  404e04:	c3                   	ret
  404e05:	90                   	nop

0000000000404e06 <_ZNKSt9__unicode5_ReplclEv>:
  // Based on https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2728r6.html#add-the-transcoding-iterator-template

  struct _Repl
  {
    constexpr char32_t
    operator()() const noexcept
  404e06:	55                   	push   %rbp
  404e07:	48 89 e5             	mov    %rsp,%rbp
  404e0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return 0xFFFD; }
  404e0e:	b8 fd ff 00 00       	mov    $0xfffd,%eax
  404e13:	5d                   	pop    %rbp
  404e14:	c3                   	ret

0000000000404e15 <_ZNSt9__unicode9__v15_1_013__field_widthEDi>:
#endif

  // The field width of a code point.
  constexpr int
  __field_width(char32_t __c) noexcept
  {
  404e15:	55                   	push   %rbp
  404e16:	48 89 e5             	mov    %rsp,%rbp
  404e19:	48 83 ec 20          	sub    $0x20,%rsp
  404e1d:	89 7d ec             	mov    %edi,-0x14(%rbp)
    if (__c < __width_edges[0]) [[likely]]
  404e20:	ba 00 11 00 00       	mov    $0x1100,%edx
  404e25:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404e28:	39 d0                	cmp    %edx,%eax
  404e2a:	73 07                	jae    404e33 <_ZNSt9__unicode9__v15_1_013__field_widthEDi+0x1e>
      return 1;
  404e2c:	b8 01 00 00 00       	mov    $0x1,%eax
  404e31:	eb 48                	jmp    404e7b <_ZNSt9__unicode9__v15_1_013__field_widthEDi+0x66>
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }
  404e33:	b9 a0 b8 41 00       	mov    $0x41b8a0,%ecx

    auto* __p = std::upper_bound(__width_edges, std::end(__width_edges), __c);
  404e38:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  404e3c:	48 89 c2             	mov    %rax,%rdx
  404e3f:	48 89 ce             	mov    %rcx,%rsi
  404e42:	bf 80 b5 41 00       	mov    $0x41b580,%edi
  404e47:	e8 21 32 00 00       	call   40806d <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>
  404e4c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (__p - __width_edges) % 2 + 1;
  404e50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404e54:	48 2d 80 b5 41 00    	sub    $0x41b580,%rax
  404e5a:	48 c1 f8 02          	sar    $0x2,%rax
  404e5e:	48 89 c2             	mov    %rax,%rdx
  404e61:	48 89 d0             	mov    %rdx,%rax
  404e64:	48 c1 f8 3f          	sar    $0x3f,%rax
  404e68:	48 c1 e8 3f          	shr    $0x3f,%rax
  404e6c:	48 01 c2             	add    %rax,%rdx
  404e6f:	83 e2 01             	and    $0x1,%edx
  404e72:	48 29 c2             	sub    %rax,%rdx
  404e75:	48 89 d0             	mov    %rdx,%rax
  404e78:	83 c0 01             	add    $0x1,%eax
  }
  404e7b:	c9                   	leave
  404e7c:	c3                   	ret

0000000000404e7d <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>:

  // @pre c <= 0x10FFFF
  constexpr _Gcb_property
  __grapheme_cluster_break_property(char32_t __c) noexcept
  {
  404e7d:	55                   	push   %rbp
  404e7e:	48 89 e5             	mov    %rsp,%rbp
  404e81:	48 83 ec 30          	sub    $0x30,%rsp
  404e85:	89 7d dc             	mov    %edi,-0x24(%rbp)
    constexpr uint32_t __mask = (1 << __gcb_shift_bits) - 1;
  404e88:	c7 45 fc 0f 00 00 00 	movl   $0xf,-0x4(%rbp)
  404e8f:	b8 30 d3 41 00       	mov    $0x41d330,%eax
    auto* __end = std::end(__gcb_edges);
  404e94:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    auto* __p = std::lower_bound(__gcb_edges, __end,
				 (__c << __gcb_shift_bits) | __mask);
  404e98:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404e9b:	c1 e0 04             	shl    $0x4,%eax
  404e9e:	83 c8 0f             	or     $0xf,%eax
  404ea1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    auto* __p = std::lower_bound(__gcb_edges, __end,
  404ea4:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  404ea8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404eac:	48 89 c6             	mov    %rax,%rsi
  404eaf:	bf a0 b8 41 00       	mov    $0x41b8a0,%edi
  404eb4:	e8 e6 31 00 00       	call   40809f <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>
  404eb9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    return _Gcb_property(__p[-1] & __mask);
  404ebd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404ec1:	48 83 e8 04          	sub    $0x4,%rax
  404ec5:	8b 00                	mov    (%rax),%eax
  404ec7:	83 e0 0f             	and    $0xf,%eax
  }
  404eca:	c9                   	leave
  404ecb:	c3                   	ret

0000000000404ecc <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>:

  constexpr bool
  __is_incb_linker(char32_t __c) noexcept
  {
  404ecc:	55                   	push   %rbp
  404ecd:	48 89 e5             	mov    %rsp,%rbp
  404ed0:	48 83 ec 20          	sub    $0x20,%rsp
  404ed4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  404ed7:	b8 48 d3 41 00       	mov    $0x41d348,%eax
    const auto __end = std::end(__incb_linkers);
  404edc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    // Array is small enough that linear search is faster than binary search.
    return std::find(__incb_linkers, __end, __c) != __end;
  404ee0:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  404ee4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404ee8:	48 89 c6             	mov    %rax,%rsi
  404eeb:	bf 30 d3 41 00       	mov    $0x41d330,%edi
  404ef0:	e8 dc 31 00 00       	call   4080d1 <_ZSt4findIPKDiDiET_S2_S2_RKT0_>
  404ef5:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  404ef9:	0f 95 c0             	setne  %al
  }
  404efc:	c9                   	leave
  404efd:	c3                   	ret

0000000000404efe <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>:

  // @pre c <= 0x10FFFF
  constexpr _InCB
  __incb_property(char32_t __c) noexcept
  {
  404efe:	55                   	push   %rbp
  404eff:	48 89 e5             	mov    %rsp,%rbp
  404f02:	48 83 ec 30          	sub    $0x30,%rsp
  404f06:	89 7d dc             	mov    %edi,-0x24(%rbp)
    if ((__c << 2) < __incb_edges[0]) [[likely]]
  404f09:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404f0c:	c1 e0 02             	shl    $0x2,%eax
  404f0f:	ba 02 0c 00 00       	mov    $0xc02,%edx
  404f14:	39 d0                	cmp    %edx,%eax
  404f16:	73 07                	jae    404f1f <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi+0x21>
      return _InCB(0);
  404f18:	b8 00 00 00 00       	mov    $0x0,%eax
  404f1d:	eb 42                	jmp    404f61 <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi+0x63>

    constexpr uint32_t __mask = 0x3;
  404f1f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%rbp)
  404f26:	b8 74 d9 41 00       	mov    $0x41d974,%eax
    auto* __end = std::end(__incb_edges);
  404f2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
  404f2f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  404f32:	c1 e0 02             	shl    $0x2,%eax
  404f35:	83 c8 03             	or     $0x3,%eax
  404f38:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  404f3b:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  404f3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404f43:	48 89 c6             	mov    %rax,%rsi
  404f46:	bf 60 d3 41 00       	mov    $0x41d360,%edi
  404f4b:	e8 4f 31 00 00       	call   40809f <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>
  404f50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    return _InCB(__p[-1] & __mask);
  404f54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404f58:	48 83 e8 04          	sub    $0x4,%rax
  404f5c:	8b 00                	mov    (%rax),%eax
  404f5e:	83 e0 03             	and    $0x3,%eax
  }
  404f61:	c9                   	leave
  404f62:	c3                   	ret

0000000000404f63 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>:

  constexpr bool
  __is_extended_pictographic(char32_t __c)
  {
  404f63:	55                   	push   %rbp
  404f64:	48 89 e5             	mov    %rsp,%rbp
  404f67:	48 83 ec 20          	sub    $0x20,%rsp
  404f6b:	89 7d ec             	mov    %edi,-0x14(%rbp)
    if (__c < __xpicto_edges[0]) [[likely]]
  404f6e:	ba a9 00 00 00       	mov    $0xa9,%edx
  404f73:	8b 45 ec             	mov    -0x14(%rbp),%eax
  404f76:	39 d0                	cmp    %edx,%eax
  404f78:	73 07                	jae    404f81 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi+0x1e>
      return 0;
  404f7a:	b8 00 00 00 00       	mov    $0x0,%eax
  404f7f:	eb 34                	jmp    404fb5 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi+0x52>
  404f81:	b9 f0 db 41 00       	mov    $0x41dbf0,%ecx

    auto* __p = std::upper_bound(__xpicto_edges, std::end(__xpicto_edges), __c);
  404f86:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  404f8a:	48 89 c2             	mov    %rax,%rdx
  404f8d:	48 89 ce             	mov    %rcx,%rsi
  404f90:	bf 80 d9 41 00       	mov    $0x41d980,%edi
  404f95:	e8 d3 30 00 00       	call   40806d <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>
  404f9a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (__p - __xpicto_edges) % 2;
  404f9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fa2:	48 2d 80 d9 41 00    	sub    $0x41d980,%rax
  404fa8:	48 c1 f8 02          	sar    $0x2,%rax
  404fac:	83 e0 01             	and    $0x1,%eax
  404faf:	48 85 c0             	test   %rax,%rax
  404fb2:	0f 95 c0             	setne  %al
  }
  404fb5:	c9                   	leave
  404fb6:	c3                   	ret
  404fb7:	90                   	nop

0000000000404fb8 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base8_M_resetEDiNS0_13_Gcb_propertyE>:
    _XPicto _M_xpicto_seq_state = _XPicto::_Init;
    unsigned char _M_RI_count = 0;
    bool _M_incb_linker_seen = false;

    constexpr void
    _M_reset(char32_t __c, _Gcb_property __p)
  404fb8:	55                   	push   %rbp
  404fb9:	48 89 e5             	mov    %rsp,%rbp
  404fbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  404fc0:	89 75 f4             	mov    %esi,-0xc(%rbp)
  404fc3:	89 55 f0             	mov    %edx,-0x10(%rbp)
    {
      _M_c = __c;
  404fc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fca:	8b 55 f4             	mov    -0xc(%rbp),%edx
  404fcd:	89 10                	mov    %edx,(%rax)
      _M_prop = __p;
  404fcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fd3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  404fd6:	89 50 04             	mov    %edx,0x4(%rax)
      _M_xpicto_seq_state = _XPicto::_Init;
  404fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fdd:	c6 40 08 00          	movb   $0x0,0x8(%rax)
      _M_RI_count = 0;
  404fe1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fe5:	c6 40 09 00          	movb   $0x0,0x9(%rax)
      _M_incb_linker_seen = false;
  404fe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404fed:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
    }
  404ff1:	90                   	nop
  404ff2:	5d                   	pop    %rbp
  404ff3:	c3                   	ret

0000000000404ff4 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_xpicto_seq_state(char32_t __c, _Gcb_property __p)
  404ff4:	55                   	push   %rbp
  404ff5:	48 89 e5             	mov    %rsp,%rbp
  404ff8:	48 83 ec 20          	sub    $0x20,%rsp
  404ffc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  405000:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  405003:	89 55 e0             	mov    %edx,-0x20(%rbp)
    {
      if (_M_xpicto_seq_state == _XPicto::_Failed)
  405006:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40500a:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  40500e:	3c 03                	cmp    $0x3,%al
  405010:	0f 84 87 00 00 00    	je     40509d <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0xa9>
	return;

      auto __next_state = _XPicto::_Failed;
  405016:	c6 45 ff 03          	movb   $0x3,-0x1(%rbp)
      if (_M_xpicto_seq_state != _XPicto::_Zwj) // i.e. Init or Matched
  40501a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40501e:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  405022:	3c 01                	cmp    $0x1,%al
  405024:	74 42                	je     405068 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x74>
	{
	  if (__p == _Gcb_property::_Gcb_ZWJ)
  405026:	83 7d e0 0a          	cmpl   $0xa,-0x20(%rbp)
  40502a:	75 29                	jne    405055 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x61>
	    {
	      if (_M_xpicto_seq_state == _XPicto::_Matched)
  40502c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405030:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  405034:	3c 02                	cmp    $0x2,%al
  405036:	75 06                	jne    40503e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x4a>
		__next_state = _XPicto::_Zwj;
  405038:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  40503c:	eb 52                	jmp    405090 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	      // We check _M_c here so that we do the lookup at most once,
	      // and only for clusters containing at least one ZWJ.
	      else if (__is_extended_pictographic(_M_c))
  40503e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405042:	8b 00                	mov    (%rax),%eax
  405044:	89 c7                	mov    %eax,%edi
  405046:	e8 18 ff ff ff       	call   404f63 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>
  40504b:	84 c0                	test   %al,%al
  40504d:	74 41                	je     405090 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
		__next_state = _XPicto::_Zwj;
  40504f:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  405053:	eb 3b                	jmp    405090 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    }
	  else if (__p == _Gcb_property::_Gcb_Extend)
  405055:	83 7d e0 04          	cmpl   $0x4,-0x20(%rbp)
  405059:	75 35                	jne    405090 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    __next_state = _M_xpicto_seq_state; // no change
  40505b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40505f:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  405063:	88 45 ff             	mov    %al,-0x1(%rbp)
  405066:	eb 28                	jmp    405090 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
      else // Zwj
	{
	  // This assumes that all \p{Extended_Pictographic} emoji have
	  // Grapheme_Cluster_Break=Other.
	  if (__p == _Gcb_property::_Gcb_Other
		&& __is_extended_pictographic(__c))
  405068:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  40506c:	75 15                	jne    405083 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x8f>
  40506e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  405071:	89 c7                	mov    %eax,%edi
  405073:	e8 eb fe ff ff       	call   404f63 <_ZNSt9__unicode9__v15_1_026__is_extended_pictographicEDi>
  405078:	84 c0                	test   %al,%al
  40507a:	74 07                	je     405083 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x8f>
  40507c:	b8 01 00 00 00       	mov    $0x1,%eax
  405081:	eb 05                	jmp    405088 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x94>
  405083:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (__p == _Gcb_property::_Gcb_Other
  405088:	84 c0                	test   %al,%al
  40508a:	74 04                	je     405090 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0x9c>
	    __next_state = _XPicto::_Matched;
  40508c:	c6 45 ff 02          	movb   $0x2,-0x1(%rbp)
	}
      _M_xpicto_seq_state = __next_state;
  405090:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405094:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  405098:	88 50 08             	mov    %dl,0x8(%rax)
  40509b:	eb 01                	jmp    40509e <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE+0xaa>
	return;
  40509d:	90                   	nop
    }
  40509e:	c9                   	leave
  40509f:	c3                   	ret

00000000004050a0 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_ri_count(_Gcb_property __p)
  4050a0:	55                   	push   %rbp
  4050a1:	48 89 e5             	mov    %rsp,%rbp
  4050a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050a8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    {
      if (__p == _Gcb_property::_Gcb_Regional_Indicator)
  4050ab:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  4050af:	75 14                	jne    4050c5 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE+0x25>
	++_M_RI_count;
  4050b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4050b5:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  4050b9:	8d 50 01             	lea    0x1(%rax),%edx
  4050bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4050c0:	88 50 09             	mov    %dl,0x9(%rax)
      else
	_M_RI_count = 0;
    }
  4050c3:	eb 08                	jmp    4050cd <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE+0x2d>
	_M_RI_count = 0;
  4050c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4050c9:	c6 40 09 00          	movb   $0x0,0x9(%rax)
    }
  4050cd:	90                   	nop
  4050ce:	5d                   	pop    %rbp
  4050cf:	c3                   	ret

00000000004050d0 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE>:

    constexpr void
    _M_update_incb_state(char32_t __c, _Gcb_property)
  4050d0:	55                   	push   %rbp
  4050d1:	48 89 e5             	mov    %rsp,%rbp
  4050d4:	48 83 ec 10          	sub    $0x10,%rsp
  4050d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4050dc:	89 75 f4             	mov    %esi,-0xc(%rbp)
  4050df:	89 55 f0             	mov    %edx,-0x10(%rbp)
    {
      if (__is_incb_linker(__c))
  4050e2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4050e5:	89 c7                	mov    %eax,%edi
  4050e7:	e8 e0 fd ff ff       	call   404ecc <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>
  4050ec:	84 c0                	test   %al,%al
  4050ee:	74 08                	je     4050f8 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE+0x28>
	_M_incb_linker_seen = true;
  4050f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4050f4:	c6 40 0a 01          	movb   $0x1,0xa(%rax)
    }
  4050f8:	90                   	nop
  4050f9:	c9                   	leave
  4050fa:	c3                   	ret

00000000004050fb <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>:
  // return its corresponding base-10 value, otherwise return a value >= 127.
  // If _DecOnly is false: if the character is an alphanumeric digit, then
  // return its corresponding base-36 value, otherwise return a value >= 127.
  template<bool _DecOnly = false>
    _GLIBCXX20_CONSTEXPR unsigned char
    __from_chars_alnum_to_val(unsigned char __c)
  4050fb:	55                   	push   %rbp
  4050fc:	48 89 e5             	mov    %rsp,%rbp
  4050ff:	89 f8                	mov    %edi,%eax
  405101:	88 45 fc             	mov    %al,-0x4(%rbp)
    {
      if _GLIBCXX17_CONSTEXPR (_DecOnly)
	return static_cast<unsigned char>(__c - '0');
      else
	return __from_chars_alnum_to_val_table<_DecOnly>::value.__data[__c];
  405104:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  405108:	48 98                	cltq
  40510a:	0f b6 80 00 dc 41 00 	movzbl 0x41dc00(%rax),%eax
    }
  405111:	5d                   	pop    %rbp
  405112:	c3                   	ret
  405113:	90                   	nop

0000000000405114 <_ZNSt12format_errorC1EPKc>:
  // [format.error], class format_error
  class format_error : public runtime_error
  {
  public:
    explicit format_error(const string& __what) : runtime_error(__what) { }
    explicit format_error(const char* __what) : runtime_error(__what) { }
  405114:	55                   	push   %rbp
  405115:	48 89 e5             	mov    %rsp,%rbp
  405118:	48 83 ec 10          	sub    $0x10,%rsp
  40511c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405120:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405128:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40512c:	48 89 d6             	mov    %rdx,%rsi
  40512f:	48 89 c7             	mov    %rax,%rdi
  405132:	e8 09 f3 ff ff       	call   404440 <_ZNSt13runtime_errorC2EPKc@plt>
  405137:	ba 50 e0 41 00       	mov    $0x41e050,%edx
  40513c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405140:	48 89 10             	mov    %rdx,(%rax)
  405143:	90                   	nop
  405144:	c9                   	leave
  405145:	c3                   	ret

0000000000405146 <_ZNSt12format_errorD1Ev>:
  class format_error : public runtime_error
  405146:	55                   	push   %rbp
  405147:	48 89 e5             	mov    %rsp,%rbp
  40514a:	48 83 ec 10          	sub    $0x10,%rsp
  40514e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405152:	ba 50 e0 41 00       	mov    $0x41e050,%edx
  405157:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40515b:	48 89 10             	mov    %rdx,(%rax)
  40515e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405162:	48 89 c7             	mov    %rax,%rdi
  405165:	e8 46 f1 ff ff       	call   4042b0 <_ZNSt13runtime_errorD2Ev@plt>
  40516a:	90                   	nop
  40516b:	c9                   	leave
  40516c:	c3                   	ret
  40516d:	90                   	nop

000000000040516e <_ZNSt12format_errorD0Ev>:
  40516e:	55                   	push   %rbp
  40516f:	48 89 e5             	mov    %rsp,%rbp
  405172:	48 83 ec 10          	sub    $0x10,%rsp
  405176:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40517a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40517e:	48 89 c7             	mov    %rax,%rdi
  405181:	e8 c0 ff ff ff       	call   405146 <_ZNSt12format_errorD1Ev>
  405186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40518a:	be 10 00 00 00       	mov    $0x10,%esi
  40518f:	48 89 c7             	mov    %rax,%rdi
  405192:	e8 f9 f0 ff ff       	call   404290 <_ZdlPvm@plt>
  405197:	c9                   	leave
  405198:	c3                   	ret

0000000000405199 <_ZSt20__throw_format_errorPKc>:

  /// @cond undocumented
  [[noreturn]]
  inline void
  __throw_format_error(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
  405199:	55                   	push   %rbp
  40519a:	48 89 e5             	mov    %rsp,%rbp
  40519d:	41 54                	push   %r12
  40519f:	53                   	push   %rbx
  4051a0:	48 83 ec 10          	sub    $0x10,%rsp
  4051a4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4051a8:	bf 10 00 00 00       	mov    $0x10,%edi
  4051ad:	e8 5e ef ff ff       	call   404110 <__cxa_allocate_exception@plt>
  4051b2:	48 89 c3             	mov    %rax,%rbx
  4051b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4051b9:	48 89 c6             	mov    %rax,%rsi
  4051bc:	48 89 df             	mov    %rbx,%rdi
  4051bf:	e8 50 ff ff ff       	call   405114 <_ZNSt12format_errorC1EPKc>
  4051c4:	ba 46 51 40 00       	mov    $0x405146,%edx
  4051c9:	be 18 e2 41 00       	mov    $0x41e218,%esi
  4051ce:	48 89 df             	mov    %rbx,%rdi
  4051d1:	e8 2a f2 ff ff       	call   404400 <__cxa_throw@plt>
  4051d6:	49 89 c4             	mov    %rax,%r12
  4051d9:	48 89 df             	mov    %rbx,%rdi
  4051dc:	e8 ff ef ff ff       	call   4041e0 <__cxa_free_exception@plt>
  4051e1:	4c 89 e0             	mov    %r12,%rax
  4051e4:	48 89 c7             	mov    %rax,%rdi
  4051e7:	e8 24 f2 ff ff       	call   404410 <_Unwind_Resume@plt>

00000000004051ec <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>:
  // XXX use named functions for each constexpr error?

  [[noreturn]]
  inline void
  __unmatched_left_brace_in_format_string()
  { __throw_format_error("format error: unmatched '{' in format string"); }
  4051ec:	55                   	push   %rbp
  4051ed:	48 89 e5             	mov    %rsp,%rbp
  4051f0:	bf 48 b0 41 00       	mov    $0x41b048,%edi
  4051f5:	e8 9f ff ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>

00000000004051fa <_ZNSt8__format40__unmatched_right_brace_in_format_stringEv>:

  [[noreturn]]
  inline void
  __unmatched_right_brace_in_format_string()
  { __throw_format_error("format error: unmatched '}' in format string"); }
  4051fa:	55                   	push   %rbp
  4051fb:	48 89 e5             	mov    %rsp,%rbp
  4051fe:	bf 78 b0 41 00       	mov    $0x41b078,%edi
  405203:	e8 91 ff ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000405208 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>:

  [[noreturn]]
  inline void
  __conflicting_indexing_in_format_string()
  { __throw_format_error("format error: conflicting indexing style in format string"); }
  405208:	55                   	push   %rbp
  405209:	48 89 e5             	mov    %rsp,%rbp
  40520c:	bf a8 b0 41 00       	mov    $0x41b0a8,%edi
  405211:	e8 83 ff ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000405216 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>:

  [[noreturn]]
  inline void
  __invalid_arg_id_in_format_string()
  { __throw_format_error("format error: invalid arg-id in format string"); }
  405216:	55                   	push   %rbp
  405217:	48 89 e5             	mov    %rsp,%rbp
  40521a:	bf e8 b0 41 00       	mov    $0x41b0e8,%edi
  40521f:	e8 75 ff ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000405224 <_ZNSt8__format29__failed_to_parse_format_specEv>:

  [[noreturn]]
  inline void
  __failed_to_parse_format_spec()
  { __throw_format_error("format error: failed to parse format-spec"); }
  405224:	55                   	push   %rbp
  405225:	48 89 e5             	mov    %rsp,%rbp
  405228:	bf 18 b1 41 00       	mov    $0x41b118,%edi
  40522d:	e8 67 ff ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000405232 <_ZNSt8__format10__is_digitEc>:
  template<typename _Context>
    size_t
    __int_from_arg(const basic_format_arg<_Context>& __arg);

  constexpr bool __is_digit(char __c)
  { return std::__detail::__from_chars_alnum_to_val(__c) < 10; }
  405232:	55                   	push   %rbp
  405233:	48 89 e5             	mov    %rsp,%rbp
  405236:	48 83 ec 10          	sub    $0x10,%rsp
  40523a:	89 f8                	mov    %edi,%eax
  40523c:	88 45 fc             	mov    %al,-0x4(%rbp)
  40523f:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  405243:	0f b6 c0             	movzbl %al,%eax
  405246:	89 c7                	mov    %eax,%edi
  405248:	e8 ae fe ff ff       	call   4050fb <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>
  40524d:	3c 09                	cmp    $0x9,%al
  40524f:	0f 96 c0             	setbe  %al
  405252:	c9                   	leave
  405253:	c3                   	ret

0000000000405254 <_ZNSt8__format11__is_xdigitEc>:

  constexpr bool __is_xdigit(char __c)
  { return std::__detail::__from_chars_alnum_to_val(__c) < 16; }
  405254:	55                   	push   %rbp
  405255:	48 89 e5             	mov    %rsp,%rbp
  405258:	48 83 ec 10          	sub    $0x10,%rsp
  40525c:	89 f8                	mov    %edi,%eax
  40525e:	88 45 fc             	mov    %al,-0x4(%rbp)
  405261:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  405265:	0f b6 c0             	movzbl %al,%eax
  405268:	89 c7                	mov    %eax,%edi
  40526a:	e8 8c fe ff ff       	call   4050fb <_ZNSt8__detail25__from_chars_alnum_to_valILb0EEEhh>
  40526f:	3c 0f                	cmp    $0xf,%al
  405271:	0f 96 c0             	setbe  %al
  405274:	c9                   	leave
  405275:	c3                   	ret

0000000000405276 <_ZNSt8__format16_Optional_localeC1ERKSt6locale>:
  struct _Optional_locale
  {
    [[__gnu__::__always_inline__]]
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }

    _Optional_locale(const locale& __loc) noexcept
  405276:	55                   	push   %rbp
  405277:	48 89 e5             	mov    %rsp,%rbp
  40527a:	48 83 ec 10          	sub    $0x10,%rsp
  40527e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405282:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    : _M_loc(__loc), _M_hasval(true)
  405286:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40528a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40528e:	48 89 d6             	mov    %rdx,%rsi
  405291:	48 89 c7             	mov    %rax,%rdi
  405294:	e8 07 ef ff ff       	call   4041a0 <_ZNSt6localeC1ERKS_@plt>
  405299:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40529d:	c6 40 08 01          	movb   $0x1,0x8(%rax)
    { }
  4052a1:	90                   	nop
  4052a2:	c9                   	leave
  4052a3:	c3                   	ret

00000000004052a4 <_ZNSt8__format16_Optional_localeD1Ev>:
	  _M_hasval = true;
	}
      return *this;
    }

    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
  4052a4:	55                   	push   %rbp
  4052a5:	48 89 e5             	mov    %rsp,%rbp
  4052a8:	48 83 ec 10          	sub    $0x10,%rsp
  4052ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4052b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052b4:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  4052b8:	84 c0                	test   %al,%al
  4052ba:	74 0c                	je     4052c8 <_ZNSt8__format16_Optional_localeD1Ev+0x24>
  4052bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052c0:	48 89 c7             	mov    %rax,%rdi
  4052c3:	e8 68 f0 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  4052c8:	90                   	nop
  4052c9:	c9                   	leave
  4052ca:	c3                   	ret
  4052cb:	90                   	nop

00000000004052cc <_ZNSt8__format16_Optional_locale5valueEv>:
	}
      return *this;
    }

    const locale&
    value() noexcept
  4052cc:	55                   	push   %rbp
  4052cd:	48 89 e5             	mov    %rsp,%rbp
  4052d0:	48 83 ec 10          	sub    $0x10,%rsp
  4052d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if (!_M_hasval)
  4052d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052dc:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  4052e0:	83 f0 01             	xor    $0x1,%eax
  4052e3:	84 c0                	test   %al,%al
  4052e5:	74 14                	je     4052fb <_ZNSt8__format16_Optional_locale5valueEv+0x2f>
	{
	  std::construct_at(&_M_loc);
  4052e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052eb:	48 89 c7             	mov    %rax,%rdi
  4052ee:	e8 16 2e 00 00       	call   408109 <_ZSt12construct_atISt6localeJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	  _M_hasval = true;
  4052f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4052f7:	c6 40 08 01          	movb   $0x1,0x8(%rax)
	}
      return _M_loc;
  4052fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4052ff:	c9                   	leave
  405300:	c3                   	ret
  405301:	90                   	nop

0000000000405302 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
  using _GLIBCXX_STD_C::vector;

  // A sink that fills a sequence (e.g. std::string, std::vector, std::deque).
  // Writes to a buffer then appends that to the sequence when it fills up.
  template<typename _Seq>
    class _Seq_sink final : public _Buf_sink<typename _Seq::value_type>
  405302:	55                   	push   %rbp
  405303:	48 89 e5             	mov    %rsp,%rbp
  405306:	48 83 ec 10          	sub    $0x10,%rsp
  40530a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40530e:	ba d8 df 41 00       	mov    $0x41dfd8,%edx
  405313:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405317:	48 89 10             	mov    %rdx,(%rax)
  40531a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40531e:	48 05 20 01 00 00    	add    $0x120,%rax
  405324:	48 89 c7             	mov    %rax,%rdi
  405327:	e8 48 22 00 00       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40532c:	90                   	nop
  40532d:	c9                   	leave
  40532e:	c3                   	ret

000000000040532f <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:
#endif

  [[nodiscard]]
  inline string
  vformat(string_view __fmt, format_args __args)
  {
  40532f:	55                   	push   %rbp
  405330:	48 89 e5             	mov    %rsp,%rbp
  405333:	53                   	push   %rbx
  405334:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  40533b:	48 89 bd 28 fe ff ff 	mov    %rdi,-0x1d8(%rbp)
  405342:	48 89 f0             	mov    %rsi,%rax
  405345:	48 89 d6             	mov    %rdx,%rsi
  405348:	48 89 c0             	mov    %rax,%rax
  40534b:	ba 00 00 00 00       	mov    $0x0,%edx
  405350:	48 89 f2             	mov    %rsi,%rdx
  405353:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  40535a:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  405361:	48 89 c8             	mov    %rcx,%rax
  405364:	4c 89 c1             	mov    %r8,%rcx
  405367:	48 89 c0             	mov    %rax,%rax
  40536a:	ba 00 00 00 00       	mov    $0x0,%edx
  40536f:	48 89 ca             	mov    %rcx,%rdx
  405372:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  405379:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
      { }
  405380:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405387:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  40538b:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  40538f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405393:	48 8d 50 20          	lea    0x20(%rax),%rdx
  405397:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40539b:	48 89 d6             	mov    %rdx,%rsi
  40539e:	48 89 c7             	mov    %rax,%rdi
  4053a1:	e8 30 63 00 00       	call   40b6d6 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  4053a6:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  4053aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4053ae:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4053b2:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  4053b9:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  4053c0:	ba 28 e0 41 00       	mov    $0x41e028,%edx
  4053c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4053c9:	48 89 10             	mov    %rdx,(%rax)
  4053cc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4053d0:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  4053d7:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
  4053de:	48 89 41 08          	mov    %rax,0x8(%rcx)
  4053e2:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  4053e6:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4053ea:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4053f1:	48 89 c7             	mov    %rax,%rdi
  4053f4:	e8 2f 66 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4053f9:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  4053fd:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  4053fe:	ba 00 e0 41 00       	mov    $0x41e000,%edx
  405403:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405407:	48 89 10             	mov    %rdx,(%rax)
      { }
  40540a:	90                   	nop
      { }
  40540b:	b8 d8 df 41 00       	mov    $0x41dfd8,%eax
  405410:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  405417:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40541e:	48 05 20 01 00 00    	add    $0x120,%rax
  405424:	48 89 c7             	mov    %rax,%rdi
  405427:	e8 fa f6 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  40542c:	90                   	nop
  40542d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405434:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  405438:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40543c:	48 89 c7             	mov    %rax,%rdi
  40543f:	e8 bd 62 00 00       	call   40b701 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  405444:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405448:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  405449:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40544d:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  405454:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  40545b:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  405462:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  405469:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
  405470:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  405477:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  40547e:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  405485:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
  40548c:	48 8d 85 58 fe ff ff 	lea    -0x1a8(%rbp),%rax
  405493:	48 89 c7             	mov    %rax,%rdi
  405496:	e8 aa 45 00 00       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40549b:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
  4054a2:	48 8b b5 40 fe ff ff 	mov    -0x1c0(%rbp),%rsi
  4054a9:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  4054b0:	48 8b 00             	mov    (%rax),%rax
  4054b3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  4054b9:	48 89 c7             	mov    %rax,%rdi
  4054bc:	e8 de 4e 00 00       	call   40a39f <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  4054c1:	90                   	nop
    __format::_Str_sink<char> __buf;
    std::vformat_to(__buf.out(), __fmt, __args);
    return std::move(__buf).get();
  4054c2:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4054c9:	48 89 c7             	mov    %rax,%rdi
  4054cc:	e8 6a 2c 00 00       	call   40813b <_ZSt4moveIRNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEONSt16remove_referenceIT_E4typeEOSB_>
  4054d1:	48 89 c2             	mov    %rax,%rdx
  4054d4:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4054db:	48 89 d6             	mov    %rdx,%rsi
  4054de:	48 89 c7             	mov    %rax,%rdi
  4054e1:	e8 64 2c 00 00       	call   40814a <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv>
  4054e6:	90                   	nop
  }
  4054e7:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4054ee:	48 89 c7             	mov    %rax,%rdi
  4054f1:	e8 0c fe ff ff       	call   405302 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
    return std::move(__buf).get();
  4054f6:	eb 1d                	jmp    405515 <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x1e6>
  }
  4054f8:	48 89 c3             	mov    %rax,%rbx
  4054fb:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405502:	48 89 c7             	mov    %rax,%rdi
  405505:	e8 f8 fd ff ff       	call   405302 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  40550a:	48 89 d8             	mov    %rbx,%rax
  40550d:	48 89 c7             	mov    %rax,%rdi
  405510:	e8 fb ee ff ff       	call   404410 <_Unwind_Resume@plt>
  405515:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  40551c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405520:	c9                   	leave
  405521:	c3                   	ret

0000000000405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>:
      }
#endif

      [[nodiscard]]
      constexpr pointer
      data() const noexcept
  405522:	55                   	push   %rbp
  405523:	48 89 e5             	mov    %rsp,%rbp
  405526:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_ptr; }
  40552a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40552e:	48 8b 00             	mov    (%rax),%rax
  405531:	5d                   	pop    %rbp
  405532:	c3                   	ret
  405533:	90                   	nop

0000000000405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>:
      size() const noexcept
  405534:	55                   	push   %rbp
  405535:	48 89 e5             	mov    %rsp,%rbp
  405538:	48 83 ec 10          	sub    $0x10,%rsp
  40553c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_extent._M_extent(); }
  405540:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405544:	48 83 c0 08          	add    $0x8,%rax
  405548:	48 89 c7             	mov    %rax,%rdi
  40554b:	e8 6c f8 ff ff       	call   404dbc <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>
  405550:	c9                   	leave
  405551:	c3                   	ret

0000000000405552 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  inline void
  vprint_nonunicode(FILE* __stream, string_view __fmt, format_args __args)
  {
  405552:	55                   	push   %rbp
  405553:	48 89 e5             	mov    %rsp,%rbp
  405556:	53                   	push   %rbx
  405557:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
  40555e:	48 89 bd 18 fe ff ff 	mov    %rdi,-0x1e8(%rbp)
  405565:	48 89 f0             	mov    %rsi,%rax
  405568:	48 89 d6             	mov    %rdx,%rsi
  40556b:	48 89 c0             	mov    %rax,%rax
  40556e:	ba 00 00 00 00       	mov    $0x0,%edx
  405573:	48 89 f2             	mov    %rsi,%rdx
  405576:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  40557d:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
  405584:	48 89 c8             	mov    %rcx,%rax
  405587:	4c 89 c1             	mov    %r8,%rcx
  40558a:	48 89 c0             	mov    %rax,%rax
  40558d:	ba 00 00 00 00       	mov    $0x0,%edx
  405592:	48 89 ca             	mov    %rcx,%rdx
  405595:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  40559c:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
      { }
  4055a3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4055aa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  4055ae:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  4055b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4055b6:	48 8d 50 20          	lea    0x20(%rax),%rdx
  4055ba:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4055be:	48 89 d6             	mov    %rdx,%rsi
  4055c1:	48 89 c7             	mov    %rax,%rdi
  4055c4:	e8 0d 61 00 00       	call   40b6d6 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  4055c9:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  4055cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4055d1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4055d5:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  4055dc:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  4055e3:	ba 28 e0 41 00       	mov    $0x41e028,%edx
  4055e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4055ec:	48 89 10             	mov    %rdx,(%rax)
  4055ef:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4055f3:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  4055fa:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
  405601:	48 89 41 08          	mov    %rax,0x8(%rcx)
  405605:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  405609:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40560d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  405614:	48 89 c7             	mov    %rax,%rdi
  405617:	e8 0c 64 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40561c:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  405620:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  405621:	ba 00 e0 41 00       	mov    $0x41e000,%edx
  405626:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40562a:	48 89 10             	mov    %rdx,(%rax)
      { }
  40562d:	90                   	nop
      { }
  40562e:	b8 d8 df 41 00       	mov    $0x41dfd8,%eax
  405633:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  40563a:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405641:	48 05 20 01 00 00    	add    $0x120,%rax
  405647:	48 89 c7             	mov    %rax,%rdi
  40564a:	e8 d7 f4 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  40564f:	90                   	nop
  405650:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  405657:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  40565b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40565f:	48 89 c7             	mov    %rax,%rdi
  405662:	e8 9a 60 00 00       	call   40b701 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  405667:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40566b:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  40566c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  405670:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  405677:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  40567e:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  405685:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  40568c:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
  405693:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  40569a:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  4056a1:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  4056a8:	48 89 95 28 fe ff ff 	mov    %rdx,-0x1d8(%rbp)
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
  4056af:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  4056b6:	48 89 c7             	mov    %rax,%rdi
  4056b9:	e8 87 43 00 00       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4056be:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
  4056c5:	48 8b b5 30 fe ff ff 	mov    -0x1d0(%rbp),%rsi
  4056cc:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  4056d3:	48 8b 00             	mov    (%rax),%rax
  4056d6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  4056dc:	48 89 c7             	mov    %rax,%rdi
  4056df:	e8 bb 4c 00 00       	call   40a39f <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  4056e4:	90                   	nop
    __format::_Str_sink<char> __buf;
    std::vformat_to(__buf.out(), __fmt, __args);
    auto __out = __buf.view();
  4056e5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  4056ec:	48 89 c7             	mov    %rax,%rdi
  4056ef:	e8 42 2b 00 00       	call   408236 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>
  4056f4:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  4056fb:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
  405702:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  405709:	48 89 c7             	mov    %rax,%rdi
  40570c:	e8 23 fe ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  405711:	48 89 c3             	mov    %rax,%rbx
  405714:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  40571b:	48 89 c7             	mov    %rax,%rdi
  40571e:	e8 ff fd ff ff       	call   405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  405723:	48 89 c7             	mov    %rax,%rdi
  405726:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  40572d:	48 89 c1             	mov    %rax,%rcx
  405730:	48 89 da             	mov    %rbx,%rdx
  405733:	be 01 00 00 00       	mov    $0x1,%esi
  405738:	e8 23 ed ff ff       	call   404460 <fwrite@plt>
  40573d:	48 89 c3             	mov    %rax,%rbx
  405740:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  405747:	48 89 c7             	mov    %rax,%rdi
  40574a:	e8 e5 fd ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40574f:	48 39 c3             	cmp    %rax,%rbx
  405752:	0f 95 c0             	setne  %al
  405755:	84 c0                	test   %al,%al
  405757:	74 0a                	je     405763 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x211>
      __throw_system_error(EIO);
  405759:	bf 05 00 00 00       	mov    $0x5,%edi
  40575e:	e8 5d ea ff ff       	call   4041c0 <_ZSt20__throw_system_errori@plt>
  }
  405763:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40576a:	48 89 c7             	mov    %rax,%rdi
  40576d:	e8 90 fb ff ff       	call   405302 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  405772:	eb 1d                	jmp    405791 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x23f>
  405774:	48 89 c3             	mov    %rax,%rbx
  405777:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  40577e:	48 89 c7             	mov    %rax,%rdi
  405781:	e8 7c fb ff ff       	call   405302 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  405786:	48 89 d8             	mov    %rbx,%rax
  405789:	48 89 c7             	mov    %rax,%rdi
  40578c:	e8 7f ec ff ff       	call   404410 <_Unwind_Resume@plt>
  405791:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405795:	c9                   	leave
  405796:	c3                   	ret

0000000000405797 <_ZSt14vprint_unicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:

  inline void
  vprint_unicode(FILE* __stream, string_view __fmt, format_args __args)
  {
  405797:	55                   	push   %rbp
  405798:	48 89 e5             	mov    %rsp,%rbp
  40579b:	48 83 ec 30          	sub    $0x30,%rsp
  40579f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4057a3:	48 89 f0             	mov    %rsi,%rax
  4057a6:	48 89 d6             	mov    %rdx,%rsi
  4057a9:	48 89 c0             	mov    %rax,%rax
  4057ac:	ba 00 00 00 00       	mov    $0x0,%edx
  4057b1:	48 89 f2             	mov    %rsi,%rdx
  4057b4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4057b8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4057bc:	48 89 c8             	mov    %rcx,%rax
  4057bf:	4c 89 c1             	mov    %r8,%rcx
  4057c2:	48 89 c0             	mov    %rax,%rax
  4057c5:	ba 00 00 00 00       	mov    $0x0,%edx
  4057ca:	48 89 ca             	mov    %rcx,%rdx
  4057cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4057d1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
#if !defined(_WIN32) || defined(__CYGWIN__)
    // For most targets we don't need to do anything special to write
    // Unicode to a terminal.
    std::vprint_nonunicode(__stream, __fmt, __args);
  4057d5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4057d9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4057dd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4057e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4057e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4057e9:	49 89 f8             	mov    %rdi,%r8
  4057ec:	48 89 c7             	mov    %rax,%rdi
  4057ef:	e8 5e fd ff ff       	call   405552 <_ZSt17vprint_nonunicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>

    // Otherwise just write the string to the file as vprint_nonunicode does.
    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
      __throw_system_error(EIO);
#endif
  }
  4057f4:	90                   	nop
  4057f5:	c9                   	leave
  4057f6:	c3                   	ret

00000000004057f7 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:

#if __cpp_lib_print // C++ >= 23

  inline void
  vprint_nonunicode(ostream& __os, string_view __fmt, format_args __args)
  {
  4057f7:	55                   	push   %rbp
  4057f8:	48 89 e5             	mov    %rsp,%rbp
  4057fb:	53                   	push   %rbx
  4057fc:	48 81 ec 18 02 00 00 	sub    $0x218,%rsp
  405803:	48 89 bd 08 fe ff ff 	mov    %rdi,-0x1f8(%rbp)
  40580a:	48 89 f0             	mov    %rsi,%rax
  40580d:	48 89 d6             	mov    %rdx,%rsi
  405810:	48 89 c0             	mov    %rax,%rax
  405813:	ba 00 00 00 00       	mov    $0x0,%edx
  405818:	48 89 f2             	mov    %rsi,%rdx
  40581b:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
  405822:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
  405829:	48 89 c8             	mov    %rcx,%rax
  40582c:	4c 89 c1             	mov    %r8,%rcx
  40582f:	48 89 c0             	mov    %rax,%rax
  405832:	ba 00 00 00 00       	mov    $0x0,%edx
  405837:	48 89 ca             	mov    %rcx,%rdx
  40583a:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  405841:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
    ostream::sentry __cerb(__os);
  405848:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
  40584f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  405853:	48 89 d6             	mov    %rdx,%rsi
  405856:	48 89 c7             	mov    %rax,%rdi
  405859:	e8 c2 e9 ff ff       	call   404220 <_ZNSo6sentryC1ERSo@plt>
    if (__cerb)
  40585e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  405862:	48 89 c7             	mov    %rax,%rdi
  405865:	e8 36 eb ff ff       	call   4043a0 <_ZNKSo6sentrycvbEv@plt>
  40586a:	84 c0                	test   %al,%al
  40586c:	0f 84 c6 01 00 00    	je     405a38 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x241>
      { }
  405872:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405879:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      : _Sink<_CharT>(_M_buf)
  40587d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  405881:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  405885:	48 8d 50 20          	lea    0x20(%rax),%rdx
  405889:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40588d:	48 89 d6             	mov    %rdx,%rsi
  405890:	48 89 c7             	mov    %rax,%rdi
  405893:	e8 3e 5e 00 00       	call   40b6d6 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  405898:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
  40589c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4058a0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4058a4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  4058a8:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  4058ac:	ba 28 e0 41 00       	mov    $0x41e028,%edx
  4058b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4058b5:	48 89 10             	mov    %rdx,(%rax)
  4058b8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4058bc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4058c0:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4058c4:	48 89 41 08          	mov    %rax,0x8(%rcx)
  4058c8:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  4058cc:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  4058d0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4058d4:	48 89 c7             	mov    %rax,%rdi
  4058d7:	e8 4c 61 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4058dc:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  4058e0:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  4058e1:	ba 00 e0 41 00       	mov    $0x41e000,%edx
  4058e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4058ea:	48 89 10             	mov    %rdx,(%rax)
      { }
  4058ed:	90                   	nop
      { }
  4058ee:	b8 d8 df 41 00       	mov    $0x41dfd8,%eax
  4058f3:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4058fa:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405901:	48 05 20 01 00 00    	add    $0x120,%rax
  405907:	48 89 c7             	mov    %rax,%rdi
  40590a:	e8 17 f2 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  40590f:	90                   	nop
      {
	__format::_Str_sink<char> __buf;
	std::vformat_to(__buf.out(), __os.getloc(), __fmt, __args);
  405910:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405917:	48 8b 00             	mov    (%rax),%rax
  40591a:	48 83 e8 18          	sub    $0x18,%rax
  40591e:	48 8b 00             	mov    (%rax),%rax
  405921:	48 89 c2             	mov    %rax,%rdx
  405924:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  40592b:	48 01 c2             	add    %rax,%rdx
  40592e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405932:	48 89 d6             	mov    %rdx,%rsi
  405935:	48 89 c7             	mov    %rax,%rdi
  405938:	e8 23 f4 ff ff       	call   404d60 <_ZNKSt8ios_base6getlocEv>
  40593d:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405944:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
  405948:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40594c:	48 89 c7             	mov    %rax,%rdi
  40594f:	e8 ad 5d 00 00       	call   40b701 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>
  405954:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  405958:	90                   	nop
      { return _Sink_iter<_CharT>(*this); }
  405959:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40595d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  405964:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  40596b:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  405972:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  405979:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  405980:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  405987:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  40598e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  405995:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
      return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc);
  40599c:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  4059a3:	48 89 c7             	mov    %rax,%rdi
  4059a6:	e8 9a 40 00 00       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4059ab:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  4059af:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  4059b6:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  4059bd:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  4059c4:	48 8b 00             	mov    (%rax),%rax
  4059c7:	49 89 f8             	mov    %rdi,%r8
  4059ca:	48 89 c7             	mov    %rax,%rdi
  4059cd:	e8 cd 49 00 00       	call   40a39f <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>
  4059d2:	90                   	nop
  4059d3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4059d7:	48 89 c7             	mov    %rax,%rdi
  4059da:	e8 51 e9 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	auto __out = __buf.view();
  4059df:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4059e6:	48 89 c7             	mov    %rax,%rdi
  4059e9:	e8 48 28 00 00       	call   408236 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>
  4059ee:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4059f2:	48 89 55 98          	mov    %rdx,-0x68(%rbp)

	__try
	  {
	    std::__ostream_write(__os, __out.data(), __out.size());
  4059f6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4059fa:	48 89 c7             	mov    %rax,%rdi
  4059fd:	e8 32 fb ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  405a02:	48 89 c3             	mov    %rax,%rbx
  405a05:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  405a09:	48 89 c7             	mov    %rax,%rdi
  405a0c:	e8 11 fb ff ff       	call   405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  405a11:	48 89 c1             	mov    %rax,%rcx
  405a14:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405a1b:	48 89 da             	mov    %rbx,%rdx
  405a1e:	48 89 ce             	mov    %rcx,%rsi
  405a21:	48 89 c7             	mov    %rax,%rdi
  405a24:	e8 d9 28 00 00       	call   408302 <_ZSt15__ostream_writeIcSt11char_traitsIcEEvRSt13basic_ostreamIT_T0_EPKS3_l>
	    __os._M_setstate(ios_base::badbit);
	    __throw_exception_again;
	  }
	__catch(...)
	  { __os._M_setstate(ios_base::badbit); }
      }
  405a29:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405a30:	48 89 c7             	mov    %rax,%rdi
  405a33:	e8 ca f8 ff ff       	call   405302 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  }
  405a38:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  405a3c:	48 89 c7             	mov    %rax,%rdi
  405a3f:	e8 bc e6 ff ff       	call   404100 <_ZNSo6sentryD1Ev@plt>
  405a44:	e9 d0 00 00 00       	jmp    405b19 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x322>
	std::vformat_to(__buf.out(), __os.getloc(), __fmt, __args);
  405a49:	48 89 c3             	mov    %rax,%rbx
  405a4c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405a50:	48 89 c7             	mov    %rax,%rdi
  405a53:	e8 d8 e8 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  405a58:	e9 96 00 00 00       	jmp    405af3 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2fc>
	__catch(const __cxxabiv1::__forced_unwind&)
  405a5d:	48 83 fa 01          	cmp    $0x1,%rdx
  405a61:	75 3c                	jne    405a9f <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2a8>
  405a63:	48 89 c7             	mov    %rax,%rdi
  405a66:	e8 35 e6 ff ff       	call   4040a0 <__cxa_begin_catch@plt>
  405a6b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    __os._M_setstate(ios_base::badbit);
  405a6f:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405a76:	48 8b 00             	mov    (%rax),%rax
  405a79:	48 83 e8 18          	sub    $0x18,%rax
  405a7d:	48 8b 00             	mov    (%rax),%rax
  405a80:	48 89 c2             	mov    %rax,%rdx
  405a83:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405a8a:	48 01 d0             	add    %rdx,%rax
  405a8d:	be 01 00 00 00       	mov    $0x1,%esi
  405a92:	48 89 c7             	mov    %rax,%rdi
  405a95:	e8 56 e6 ff ff       	call   4040f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@plt>
	    __throw_exception_again;
  405a9a:	e8 b1 e8 ff ff       	call   404350 <__cxa_rethrow@plt>
	__catch(...)
  405a9f:	48 89 c7             	mov    %rax,%rdi
  405aa2:	e8 f9 e5 ff ff       	call   4040a0 <__cxa_begin_catch@plt>
	  { __os._M_setstate(ios_base::badbit); }
  405aa7:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405aae:	48 8b 00             	mov    (%rax),%rax
  405ab1:	48 83 e8 18          	sub    $0x18,%rax
  405ab5:	48 8b 00             	mov    (%rax),%rax
  405ab8:	48 89 c2             	mov    %rax,%rdx
  405abb:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  405ac2:	48 01 d0             	add    %rdx,%rax
  405ac5:	be 01 00 00 00       	mov    $0x1,%esi
  405aca:	48 89 c7             	mov    %rax,%rdi
  405acd:	e8 1e e6 ff ff       	call   4040f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE11_M_setstateESt12_Ios_Iostate@plt>
  405ad2:	e8 f9 e8 ff ff       	call   4043d0 <__cxa_end_catch@plt>
  405ad7:	e9 4d ff ff ff       	jmp    405a29 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x232>
	  }
  405adc:	48 89 c3             	mov    %rax,%rbx
  405adf:	e8 ec e8 ff ff       	call   4043d0 <__cxa_end_catch@plt>
  405ae4:	eb 0d                	jmp    405af3 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2fc>
	  { __os._M_setstate(ios_base::badbit); }
  405ae6:	48 89 c3             	mov    %rax,%rbx
  405ae9:	e8 e2 e8 ff ff       	call   4043d0 <__cxa_end_catch@plt>
  405aee:	eb 03                	jmp    405af3 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE+0x2fc>
      }
  405af0:	48 89 c3             	mov    %rax,%rbx
  405af3:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  405afa:	48 89 c7             	mov    %rax,%rdi
  405afd:	e8 00 f8 ff ff       	call   405302 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
  }
  405b02:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  405b06:	48 89 c7             	mov    %rax,%rdi
  405b09:	e8 f2 e5 ff ff       	call   404100 <_ZNSo6sentryD1Ev@plt>
  405b0e:	48 89 d8             	mov    %rbx,%rax
  405b11:	48 89 c7             	mov    %rax,%rdi
  405b14:	e8 f7 e8 ff ff       	call   404410 <_Unwind_Resume@plt>
  405b19:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  405b1d:	c9                   	leave
  405b1e:	c3                   	ret

0000000000405b1f <_ZSt14vprint_unicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>:

  inline void
  vprint_unicode(ostream& __os, string_view __fmt, format_args __args)
  {
  405b1f:	55                   	push   %rbp
  405b20:	48 89 e5             	mov    %rsp,%rbp
  405b23:	48 83 ec 30          	sub    $0x30,%rsp
  405b27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b2b:	48 89 f0             	mov    %rsi,%rax
  405b2e:	48 89 d6             	mov    %rdx,%rsi
  405b31:	48 89 c0             	mov    %rax,%rax
  405b34:	ba 00 00 00 00       	mov    $0x0,%edx
  405b39:	48 89 f2             	mov    %rsi,%rdx
  405b3c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405b40:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405b44:	48 89 c8             	mov    %rcx,%rax
  405b47:	4c 89 c1             	mov    %r8,%rcx
  405b4a:	48 89 c0             	mov    %rax,%rax
  405b4d:	ba 00 00 00 00       	mov    $0x0,%edx
  405b52:	48 89 ca             	mov    %rcx,%rdx
  405b55:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  405b59:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
#if !defined(_WIN32) || defined(__CYGWIN__)
    // For most targets we don't need to do anything special to write
    // Unicode to a terminal.
    std::vprint_nonunicode(__os, __fmt, __args);
  405b5d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  405b61:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  405b65:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  405b69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405b71:	49 89 f8             	mov    %rdi,%r8
  405b74:	48 89 c7             	mov    %rax,%rdi
  405b77:	e8 7b fc ff ff       	call   4057f7 <_ZSt17vprint_nonunicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
	  }
	__catch(...)
	  { __os._M_setstate(ios_base::badbit); }
      }
#endif // _WIN32
  }
  405b7c:	90                   	nop
  405b7d:	c9                   	leave
  405b7e:	c3                   	ret
  405b7f:	90                   	nop

0000000000405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      [[__gnu__::__nonnull__]]
      constexpr
      basic_string_view(const _CharT* __str) noexcept
  405b80:	55                   	push   %rbp
  405b81:	48 89 e5             	mov    %rsp,%rbp
  405b84:	48 83 ec 10          	sub    $0x10,%rsp
  405b88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405b8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
  405b90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405b94:	48 89 c7             	mov    %rax,%rdi
  405b97:	e8 c8 ec ff ff       	call   404864 <_ZNSt11char_traitsIcE6lengthEPKc>
  405b9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405ba0:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
  405ba3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405ba7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405bab:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  405baf:	90                   	nop
  405bb0:	c9                   	leave
  405bb1:	c3                   	ret

0000000000405bb2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
  405bb2:	55                   	push   %rbp
  405bb3:	48 89 e5             	mov    %rsp,%rbp
  405bb6:	48 83 ec 20          	sub    $0x20,%rsp
  405bba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
  405bbe:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  405bc5:	00
      while (!eq(__p[__i], char_type()))
  405bc6:	eb 05                	jmp    405bcd <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
  405bc8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
  405bcd:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  405bd1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405bd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405bd9:	48 01 c2             	add    %rax,%rdx
  405bdc:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  405be0:	48 89 c6             	mov    %rax,%rsi
  405be3:	48 89 d7             	mov    %rdx,%rdi
  405be6:	e8 0d 00 00 00       	call   405bf8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
  405beb:	83 f0 01             	xor    $0x1,%eax
  405bee:	84 c0                	test   %al,%al
  405bf0:	75 d6                	jne    405bc8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
  405bf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  405bf6:	c9                   	leave
  405bf7:	c3                   	ret

0000000000405bf8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
  405bf8:	55                   	push   %rbp
  405bf9:	48 89 e5             	mov    %rsp,%rbp
  405bfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c00:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
  405c04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c08:	0f b6 10             	movzbl (%rax),%edx
  405c0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405c0f:	0f b6 00             	movzbl (%rax),%eax
  405c12:	38 c2                	cmp    %al,%dl
  405c14:	0f 94 c0             	sete   %al
  405c17:	5d                   	pop    %rbp
  405c18:	c3                   	ret
  405c19:	90                   	nop

0000000000405c1a <_ZNSt8__format8_ScannerIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>:
      _Scanner(basic_string_view<_CharT> __str, size_t __nargs = -1)
  405c1a:	55                   	push   %rbp
  405c1b:	48 89 e5             	mov    %rsp,%rbp
  405c1e:	48 83 ec 20          	sub    $0x20,%rsp
  405c22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c26:	48 89 f0             	mov    %rsi,%rax
  405c29:	48 89 d6             	mov    %rdx,%rsi
  405c2c:	48 89 c0             	mov    %rax,%rax
  405c2f:	ba 00 00 00 00       	mov    $0x0,%edx
  405c34:	48 89 f2             	mov    %rsi,%rdx
  405c37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405c3b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405c3f:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
      : _M_pc(__str, __nargs)
  405c43:	ba b8 df 41 00       	mov    $0x41dfb8,%edx
  405c48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c4c:	48 89 10             	mov    %rdx,(%rax)
  405c4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405c53:	48 8d 78 08          	lea    0x8(%rax),%rdi
  405c57:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  405c5b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  405c5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405c63:	48 89 d6             	mov    %rdx,%rsi
  405c66:	48 89 c2             	mov    %rax,%rdx
  405c69:	e8 04 00 00 00       	call   405c72 <_ZNSt26basic_format_parse_contextIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>
      { }
  405c6e:	90                   	nop
  405c6f:	c9                   	leave
  405c70:	c3                   	ret
  405c71:	90                   	nop

0000000000405c72 <_ZNSt26basic_format_parse_contextIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>:
      basic_format_parse_context(basic_string_view<_CharT> __fmt,
  405c72:	55                   	push   %rbp
  405c73:	48 89 e5             	mov    %rsp,%rbp
  405c76:	48 83 ec 20          	sub    $0x20,%rsp
  405c7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405c7e:	48 89 f0             	mov    %rsi,%rax
  405c81:	48 89 d6             	mov    %rdx,%rsi
  405c84:	48 89 c0             	mov    %rax,%rax
  405c87:	ba 00 00 00 00       	mov    $0x0,%edx
  405c8c:	48 89 f2             	mov    %rsi,%rdx
  405c8f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  405c93:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  405c97:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
  405c9b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405c9f:	48 89 c7             	mov    %rax,%rdi
  405ca2:	e8 41 00 00 00       	call   405ce8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
  405ca7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405cab:	48 89 02             	mov    %rax,(%rdx)
  405cae:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  405cb2:	48 89 c7             	mov    %rax,%rdi
  405cb5:	e8 40 00 00 00       	call   405cfa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>
  405cba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  405cbe:	48 89 42 08          	mov    %rax,0x8(%rdx)
  405cc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cc6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  405ccd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cd1:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  405cd8:	00
  405cd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cdd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  405ce1:	48 89 50 20          	mov    %rdx,0x20(%rax)
      { }
  405ce5:	90                   	nop
  405ce6:	c9                   	leave
  405ce7:	c3                   	ret

0000000000405ce8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>:

      // [string.view.iterators], iterator support

      [[nodiscard]]
      constexpr const_iterator
      begin() const noexcept
  405ce8:	55                   	push   %rbp
  405ce9:	48 89 e5             	mov    %rsp,%rbp
  405cec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
  405cf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405cf4:	48 8b 40 08          	mov    0x8(%rax),%rax
  405cf8:	5d                   	pop    %rbp
  405cf9:	c3                   	ret

0000000000405cfa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>:

      [[nodiscard]]
      constexpr const_iterator
      end() const noexcept
  405cfa:	55                   	push   %rbp
  405cfb:	48 89 e5             	mov    %rsp,%rbp
  405cfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str + this->_M_len; }
  405d02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405d06:	48 8b 50 08          	mov    0x8(%rax),%rdx
  405d0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405d0e:	48 8b 00             	mov    (%rax),%rax
  405d11:	48 01 d0             	add    %rdx,%rax
  405d14:	5d                   	pop    %rbp
  405d15:	c3                   	ret

0000000000405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:

      // [string.view.capacity], capacity

      [[nodiscard]]
      constexpr size_type
      size() const noexcept
  405d16:	55                   	push   %rbp
  405d17:	48 89 e5             	mov    %rsp,%rbp
  405d1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
  405d1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405d22:	48 8b 00             	mov    (%rax),%rax
  405d25:	5d                   	pop    %rbp
  405d26:	c3                   	ret
  405d27:	90                   	nop

0000000000405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>:

      // [string.view.access], element access

      [[nodiscard]]
      constexpr const_reference
      operator[](size_type __pos) const noexcept
  405d28:	55                   	push   %rbp
  405d29:	48 89 e5             	mov    %rsp,%rbp
  405d2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  405d30:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  405d34:	b8 00 00 00 00       	mov    $0x0,%eax
      {
	__glibcxx_assert(__pos < this->_M_len);
  405d39:	84 c0                	test   %al,%al
  405d3b:	74 14                	je     405d51 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm+0x29>
  405d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405d41:	48 8b 00             	mov    (%rax),%rax
  405d44:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  405d48:	0f 93 c0             	setae  %al
  405d4b:	0f b6 c0             	movzbl %al,%eax
  405d4e:	48 85 c0             	test   %rax,%rax
	return *(this->_M_str + __pos);
  405d51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  405d55:	48 8b 50 08          	mov    0x8(%rax),%rdx
  405d59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  405d5d:	48 01 d0             	add    %rdx,%rax
      }
  405d60:	5d                   	pop    %rbp
  405d61:	c3                   	ret

0000000000405d62 <_ZNSt8__format8_ScannerIcE7_M_scanEv>:
      _M_scan()
  405d62:	55                   	push   %rbp
  405d63:	48 89 e5             	mov    %rsp,%rbp
  405d66:	53                   	push   %rbx
  405d67:	48 83 ec 68          	sub    $0x68,%rsp
  405d6b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
	basic_string_view<_CharT> __fmt = _M_fmt_str();
  405d6f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405d73:	48 89 c7             	mov    %rax,%rdi
  405d76:	e8 dd 03 00 00       	call   406158 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405d7b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405d7f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
  405d83:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405d87:	48 89 c7             	mov    %rax,%rdi
  405d8a:	e8 87 ff ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  405d8f:	48 83 f8 02          	cmp    $0x2,%rax
  405d93:	75 37                	jne    405dcc <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405d95:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405d99:	be 00 00 00 00       	mov    $0x0,%esi
  405d9e:	48 89 c7             	mov    %rax,%rdi
  405da1:	e8 82 ff ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405da6:	0f b6 00             	movzbl (%rax),%eax
  405da9:	3c 7b                	cmp    $0x7b,%al
  405dab:	75 1f                	jne    405dcc <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405dad:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405db1:	be 01 00 00 00       	mov    $0x1,%esi
  405db6:	48 89 c7             	mov    %rax,%rdi
  405db9:	e8 6a ff ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405dbe:	0f b6 00             	movzbl (%rax),%eax
  405dc1:	3c 7d                	cmp    $0x7d,%al
  405dc3:	75 07                	jne    405dcc <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6a>
  405dc5:	b8 01 00 00 00       	mov    $0x1,%eax
  405dca:	eb 05                	jmp    405dd1 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x6f>
  405dcc:	b8 00 00 00 00       	mov    $0x0,%eax
  405dd1:	84 c0                	test   %al,%al
  405dd3:	74 55                	je     405e2a <_ZNSt8__format8_ScannerIcE7_M_scanEv+0xc8>
	    _M_pc.advance_to(begin() + 1);
  405dd5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405dd9:	48 8d 58 08          	lea    0x8(%rax),%rbx
  405ddd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405de1:	48 89 c7             	mov    %rax,%rdi
  405de4:	e8 b7 03 00 00       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  405de9:	48 83 c0 01          	add    $0x1,%rax
  405ded:	48 89 c6             	mov    %rax,%rsi
  405df0:	48 89 df             	mov    %rbx,%rdi
  405df3:	e8 5e 05 00 00       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	    _M_format_arg(_M_pc.next_arg_id());
  405df8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405dfc:	48 8b 00             	mov    (%rax),%rax
  405dff:	48 83 c0 08          	add    $0x8,%rax
  405e03:	48 8b 18             	mov    (%rax),%rbx
  405e06:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e0a:	48 83 c0 08          	add    $0x8,%rax
  405e0e:	48 89 c7             	mov    %rax,%rdi
  405e11:	e8 0c 08 00 00       	call   406622 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  405e16:	48 89 c2             	mov    %rax,%rdx
  405e19:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e1d:	48 89 d6             	mov    %rdx,%rsi
  405e20:	48 89 c7             	mov    %rax,%rdi
  405e23:	ff d3                	call   *%rbx
	    return;
  405e25:	e9 28 03 00 00       	jmp    406152 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3f0>
	size_t __lbr = __fmt.find('{');
  405e2a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405e2e:	ba 00 00 00 00       	mov    $0x0,%edx
  405e33:	be 7b 00 00 00       	mov    $0x7b,%esi
  405e38:	48 89 c7             	mov    %rax,%rdi
  405e3b:	e8 26 04 00 00       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405e40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t __rbr = __fmt.find('}');
  405e44:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405e48:	ba 00 00 00 00       	mov    $0x0,%edx
  405e4d:	be 7d 00 00 00       	mov    $0x7d,%esi
  405e52:	48 89 c7             	mov    %rax,%rdi
  405e55:	e8 0c 04 00 00       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405e5a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (__fmt.size())
  405e5e:	e9 d5 02 00 00       	jmp    406138 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
	    auto __cmp = __lbr <=> __rbr;
  405e63:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405e67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405e6b:	48 39 c2             	cmp    %rax,%rdx
  405e6e:	74 11                	je     405e81 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x11f>
  405e70:	48 39 c2             	cmp    %rax,%rdx
  405e73:	73 06                	jae    405e7b <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x119>
  405e75:	c6 45 af ff          	movb   $0xff,-0x51(%rbp)
  405e79:	eb 0a                	jmp    405e85 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x123>
  405e7b:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  405e7f:	eb 04                	jmp    405e85 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x123>
  405e81:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
	    if (__cmp == 0)
  405e85:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
  405e89:	89 c7                	mov    %eax,%edi
  405e8b:	e8 f7 e7 ff ff       	call   404687 <_ZSteqSt15strong_orderingNSt9__cmp_cat8__unspecE>
  405e90:	84 c0                	test   %al,%al
  405e92:	74 49                	je     405edd <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x17b>
		_M_on_chars(end());
  405e94:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405e98:	48 8b 00             	mov    (%rax),%rax
  405e9b:	48 8b 18             	mov    (%rax),%rbx
  405e9e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405ea2:	48 89 c7             	mov    %rax,%rdi
  405ea5:	e8 26 03 00 00       	call   4061d0 <_ZNKSt8__format8_ScannerIcE3endEv>
  405eaa:	48 89 c2             	mov    %rax,%rdx
  405ead:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405eb1:	48 89 d6             	mov    %rdx,%rsi
  405eb4:	48 89 c7             	mov    %rax,%rdi
  405eb7:	ff d3                	call   *%rbx
		_M_pc.advance_to(end());
  405eb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405ebd:	48 8d 58 08          	lea    0x8(%rax),%rbx
  405ec1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405ec5:	48 89 c7             	mov    %rax,%rdi
  405ec8:	e8 03 03 00 00       	call   4061d0 <_ZNKSt8__format8_ScannerIcE3endEv>
  405ecd:	48 89 c6             	mov    %rax,%rsi
  405ed0:	48 89 df             	mov    %rbx,%rdi
  405ed3:	e8 7e 04 00 00       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  405ed8:	e9 75 02 00 00       	jmp    406152 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3f0>
	    else if (__cmp < 0)
  405edd:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
  405ee1:	89 c7                	mov    %eax,%edi
  405ee3:	e8 b2 e7 ff ff       	call   40469a <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
  405ee8:	84 c0                	test   %al,%al
  405eea:	0f 84 71 01 00 00    	je     406061 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x2ff>
		if (__lbr + 1 == __fmt.size()
  405ef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405ef4:	48 8d 58 01          	lea    0x1(%rax),%rbx
  405ef8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405efc:	48 89 c7             	mov    %rax,%rdi
  405eff:	e8 12 fe ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
  405f04:	48 39 c3             	cmp    %rax,%rbx
  405f07:	74 25                	je     405f2e <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1cc>
  405f09:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  405f0e:	75 25                	jne    405f35 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d3>
  405f10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f14:	48 8d 50 01          	lea    0x1(%rax),%rdx
  405f18:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405f1c:	48 89 d6             	mov    %rdx,%rsi
  405f1f:	48 89 c7             	mov    %rax,%rdi
  405f22:	e8 01 fe ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405f27:	0f b6 00             	movzbl (%rax),%eax
  405f2a:	3c 7b                	cmp    $0x7b,%al
  405f2c:	74 07                	je     405f35 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d3>
  405f2e:	b8 01 00 00 00       	mov    $0x1,%eax
  405f33:	eb 05                	jmp    405f3a <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1d8>
  405f35:	b8 00 00 00 00       	mov    $0x0,%eax
		if (__lbr + 1 == __fmt.size()
  405f3a:	84 c0                	test   %al,%al
  405f3c:	74 05                	je     405f43 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x1e1>
		  __format::__unmatched_left_brace_in_format_string();
  405f3e:	e8 a9 f2 ff ff       	call   4051ec <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
		const bool __is_escape = __fmt[__lbr + 1] == '{';
  405f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  405f47:	48 8d 50 01          	lea    0x1(%rax),%rdx
  405f4b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405f4f:	48 89 d6             	mov    %rdx,%rsi
  405f52:	48 89 c7             	mov    %rax,%rdi
  405f55:	e8 ce fd ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  405f5a:	0f b6 00             	movzbl (%rax),%eax
  405f5d:	3c 7b                	cmp    $0x7b,%al
  405f5f:	0f 94 c0             	sete   %al
  405f62:	88 45 d7             	mov    %al,-0x29(%rbp)
		iterator __last = begin() + __lbr + int(__is_escape);
  405f65:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f69:	48 89 c7             	mov    %rax,%rdi
  405f6c:	e8 2f 02 00 00       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  405f71:	0f b6 4d d7          	movzbl -0x29(%rbp),%ecx
  405f75:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  405f79:	48 01 ca             	add    %rcx,%rdx
  405f7c:	48 01 d0             	add    %rdx,%rax
  405f7f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		_M_on_chars(__last);
  405f83:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f87:	48 8b 00             	mov    (%rax),%rax
  405f8a:	48 8b 08             	mov    (%rax),%rcx
  405f8d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405f91:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405f95:	48 89 d6             	mov    %rdx,%rsi
  405f98:	48 89 c7             	mov    %rax,%rdi
  405f9b:	ff d1                	call   *%rcx
		_M_pc.advance_to(__last + 1);
  405f9d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405fa1:	48 83 c0 08          	add    $0x8,%rax
  405fa5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  405fa9:	48 83 c2 01          	add    $0x1,%rdx
  405fad:	48 89 d6             	mov    %rdx,%rsi
  405fb0:	48 89 c7             	mov    %rax,%rdi
  405fb3:	e8 9e 03 00 00       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
		__fmt = _M_fmt_str();
  405fb8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  405fbc:	48 89 c7             	mov    %rax,%rdi
  405fbf:	e8 94 01 00 00       	call   406158 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  405fc4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  405fc8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		if (__is_escape)
  405fcc:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  405fd0:	74 36                	je     406008 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x2a6>
		    if (__rbr != __fmt.npos)
  405fd2:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  405fd7:	74 10                	je     405fe9 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x287>
		      __rbr -= __lbr + 2;
  405fd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  405fdd:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  405fe1:	48 83 e8 02          	sub    $0x2,%rax
  405fe5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    __lbr = __fmt.find('{');
  405fe9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  405fed:	ba 00 00 00 00       	mov    $0x0,%edx
  405ff2:	be 7b 00 00 00       	mov    $0x7b,%esi
  405ff7:	48 89 c7             	mov    %rax,%rdi
  405ffa:	e8 67 02 00 00       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  405fff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  406003:	e9 30 01 00 00       	jmp    406138 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
		    _M_on_replacement_field();
  406008:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40600c:	48 89 c7             	mov    %rax,%rdi
  40600f:	e8 02 04 00 00       	call   406416 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv>
		    __fmt = _M_fmt_str();
  406014:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  406018:	48 89 c7             	mov    %rax,%rdi
  40601b:	e8 38 01 00 00       	call   406158 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  406020:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406024:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		    __lbr = __fmt.find('{');
  406028:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40602c:	ba 00 00 00 00       	mov    $0x0,%edx
  406031:	be 7b 00 00 00       	mov    $0x7b,%esi
  406036:	48 89 c7             	mov    %rax,%rdi
  406039:	e8 28 02 00 00       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  40603e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    __rbr = __fmt.find('}');
  406042:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406046:	ba 00 00 00 00       	mov    $0x0,%edx
  40604b:	be 7d 00 00 00       	mov    $0x7d,%esi
  406050:	48 89 c7             	mov    %rax,%rdi
  406053:	e8 0e 02 00 00       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  406058:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40605c:	e9 d7 00 00 00       	jmp    406138 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3d6>
		if (++__rbr == __fmt.size() || __fmt[__rbr] != '}')
  406061:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  406066:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40606a:	48 89 c7             	mov    %rax,%rdi
  40606d:	e8 a4 fc ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  406072:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  406076:	74 1a                	je     406092 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x330>
  406078:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40607c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406080:	48 89 d6             	mov    %rdx,%rsi
  406083:	48 89 c7             	mov    %rax,%rdi
  406086:	e8 9d fc ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40608b:	0f b6 00             	movzbl (%rax),%eax
  40608e:	3c 7d                	cmp    $0x7d,%al
  406090:	74 07                	je     406099 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x337>
  406092:	b8 01 00 00 00       	mov    $0x1,%eax
  406097:	eb 05                	jmp    40609e <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x33c>
  406099:	b8 00 00 00 00       	mov    $0x0,%eax
  40609e:	84 c0                	test   %al,%al
  4060a0:	74 05                	je     4060a7 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x345>
		  __format::__unmatched_right_brace_in_format_string();
  4060a2:	e8 53 f1 ff ff       	call   4051fa <_ZNSt8__format40__unmatched_right_brace_in_format_stringEv>
		iterator __last = begin() + __rbr;
  4060a7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4060ab:	48 89 c7             	mov    %rax,%rdi
  4060ae:	e8 ed 00 00 00       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  4060b3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4060b7:	48 01 d0             	add    %rdx,%rax
  4060ba:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		_M_on_chars(__last);
  4060be:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4060c2:	48 8b 00             	mov    (%rax),%rax
  4060c5:	48 8b 08             	mov    (%rax),%rcx
  4060c8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4060cc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4060d0:	48 89 d6             	mov    %rdx,%rsi
  4060d3:	48 89 c7             	mov    %rax,%rdi
  4060d6:	ff d1                	call   *%rcx
		_M_pc.advance_to(__last + 1);
  4060d8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4060dc:	48 83 c0 08          	add    $0x8,%rax
  4060e0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4060e4:	48 83 c2 01          	add    $0x1,%rdx
  4060e8:	48 89 d6             	mov    %rdx,%rsi
  4060eb:	48 89 c7             	mov    %rax,%rdi
  4060ee:	e8 63 02 00 00       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
		__fmt = _M_fmt_str();
  4060f3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4060f7:	48 89 c7             	mov    %rax,%rdi
  4060fa:	e8 59 00 00 00       	call   406158 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>
  4060ff:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406103:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
		if (__lbr != __fmt.npos)
  406107:	48 83 7d e8 ff       	cmpq   $0xffffffffffffffff,-0x18(%rbp)
  40610c:	74 10                	je     40611e <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x3bc>
		  __lbr -= __rbr + 1;
  40610e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406112:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  406116:	48 83 e8 01          	sub    $0x1,%rax
  40611a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		__rbr = __fmt.find('}');
  40611e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406122:	ba 00 00 00 00       	mov    $0x0,%edx
  406127:	be 7d 00 00 00       	mov    $0x7d,%esi
  40612c:	48 89 c7             	mov    %rax,%rdi
  40612f:	e8 32 01 00 00       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  406134:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (__fmt.size())
  406138:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40613c:	48 89 c7             	mov    %rax,%rdi
  40613f:	e8 d2 fb ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  406144:	48 85 c0             	test   %rax,%rax
  406147:	0f 95 c0             	setne  %al
  40614a:	84 c0                	test   %al,%al
  40614c:	0f 85 11 fd ff ff    	jne    405e63 <_ZNSt8__format8_ScannerIcE7_M_scanEv+0x101>
      }
  406152:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  406156:	c9                   	leave
  406157:	c3                   	ret

0000000000406158 <_ZNKSt8__format8_ScannerIcE10_M_fmt_strEv>:
      _M_fmt_str() const noexcept
  406158:	55                   	push   %rbp
  406159:	48 89 e5             	mov    %rsp,%rbp
  40615c:	53                   	push   %rbx
  40615d:	48 83 ec 28          	sub    $0x28,%rsp
  406161:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return {begin(), end()}; }
  406165:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406169:	48 89 c7             	mov    %rax,%rdi
  40616c:	e8 2f 00 00 00       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  406171:	48 89 c3             	mov    %rax,%rbx
  406174:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406178:	48 89 c7             	mov    %rax,%rdi
  40617b:	e8 50 00 00 00       	call   4061d0 <_ZNKSt8__format8_ScannerIcE3endEv>
  406180:	48 89 c2             	mov    %rax,%rdx
  406183:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  406187:	48 89 de             	mov    %rbx,%rsi
  40618a:	48 89 c7             	mov    %rax,%rdi
  40618d:	e8 6e 00 00 00       	call   406200 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
  406192:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406196:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40619a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40619e:	c9                   	leave
  40619f:	c3                   	ret

00000000004061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>:
      constexpr iterator begin() const noexcept { return _M_pc.begin(); }
  4061a0:	55                   	push   %rbp
  4061a1:	48 89 e5             	mov    %rsp,%rbp
  4061a4:	48 83 ec 10          	sub    $0x10,%rsp
  4061a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061b0:	48 83 c0 08          	add    $0x8,%rax
  4061b4:	48 89 c7             	mov    %rax,%rdi
  4061b7:	e8 02 00 00 00       	call   4061be <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  4061bc:	c9                   	leave
  4061bd:	c3                   	ret

00000000004061be <_ZNKSt26basic_format_parse_contextIcE5beginEv>:
      constexpr const_iterator begin() const noexcept { return _M_begin; }
  4061be:	55                   	push   %rbp
  4061bf:	48 89 e5             	mov    %rsp,%rbp
  4061c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061ca:	48 8b 00             	mov    (%rax),%rax
  4061cd:	5d                   	pop    %rbp
  4061ce:	c3                   	ret
  4061cf:	90                   	nop

00000000004061d0 <_ZNKSt8__format8_ScannerIcE3endEv>:
      constexpr iterator end() const noexcept { return _M_pc.end(); }
  4061d0:	55                   	push   %rbp
  4061d1:	48 89 e5             	mov    %rsp,%rbp
  4061d4:	48 83 ec 10          	sub    $0x10,%rsp
  4061d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061e0:	48 83 c0 08          	add    $0x8,%rax
  4061e4:	48 89 c7             	mov    %rax,%rdi
  4061e7:	e8 02 00 00 00       	call   4061ee <_ZNKSt26basic_format_parse_contextIcE3endEv>
  4061ec:	c9                   	leave
  4061ed:	c3                   	ret

00000000004061ee <_ZNKSt26basic_format_parse_contextIcE3endEv>:
      constexpr const_iterator end() const noexcept { return _M_end; }
  4061ee:	55                   	push   %rbp
  4061ef:	48 89 e5             	mov    %rsp,%rbp
  4061f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4061f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4061fa:	48 8b 40 08          	mov    0x8(%rax),%rax
  4061fe:	5d                   	pop    %rbp
  4061ff:	c3                   	ret

0000000000406200 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>:
	basic_string_view(_It __first, _End __last)
  406200:	55                   	push   %rbp
  406201:	48 89 e5             	mov    %rsp,%rbp
  406204:	48 83 ec 20          	sub    $0x20,%rsp
  406208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40620c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406210:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _M_len(__last - __first), _M_str(std::to_address(__first))
  406214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406218:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40621c:	48 89 c2             	mov    %rax,%rdx
  40621f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406223:	48 89 10             	mov    %rdx,(%rax)
  406226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40622a:	48 89 c7             	mov    %rax,%rdi
  40622d:	e8 0b 00 00 00       	call   40623d <_ZSt10to_addressIKcEPT_S2_>
  406232:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  406236:	48 89 42 08          	mov    %rax,0x8(%rdx)
	{ }
  40623a:	90                   	nop
  40623b:	c9                   	leave
  40623c:	c3                   	ret

000000000040623d <_ZSt10to_addressIKcEPT_S2_>:
   * @return @c __ptr
   * @ingroup pointer_abstractions
  */
  template<typename _Tp>
    constexpr _Tp*
    to_address(_Tp* __ptr) noexcept
  40623d:	55                   	push   %rbp
  40623e:	48 89 e5             	mov    %rsp,%rbp
  406241:	48 83 ec 10          	sub    $0x10,%rsp
  406245:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__to_address(__ptr); }
  406249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40624d:	48 89 c7             	mov    %rax,%rdi
  406250:	e8 02 00 00 00       	call   406257 <_ZSt12__to_addressIKcEPT_S2_>
  406255:	c9                   	leave
  406256:	c3                   	ret

0000000000406257 <_ZSt12__to_addressIKcEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
  406257:	55                   	push   %rbp
  406258:	48 89 e5             	mov    %rsp,%rbp
  40625b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __ptr;
  40625f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  406263:	5d                   	pop    %rbp
  406264:	c3                   	ret
  406265:	90                   	nop

0000000000406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
  406266:	55                   	push   %rbp
  406267:	48 89 e5             	mov    %rsp,%rbp
  40626a:	48 83 ec 40          	sub    $0x40,%rsp
  40626e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  406272:	89 f0                	mov    %esi,%eax
  406274:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406278:	88 45 d4             	mov    %al,-0x2c(%rbp)
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
  40627b:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
  406282:	ff
      if (__pos < this->_M_len)
  406283:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406287:	48 8b 00             	mov    (%rax),%rax
  40628a:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40628e:	73 50                	jae    4062e0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm+0x7a>
	{
	  const size_type __n = this->_M_len - __pos;
  406290:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406294:	48 8b 00             	mov    (%rax),%rax
  406297:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40629b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
  40629f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4062a3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4062a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4062ab:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  4062af:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4062b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4062b7:	48 89 c6             	mov    %rax,%rsi
  4062ba:	48 89 cf             	mov    %rcx,%rdi
  4062bd:	e8 d4 e5 ff ff       	call   404896 <_ZNSt11char_traitsIcE4findEPKcmRS1_>
  4062c2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__p)
  4062c6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4062cb:	74 13                	je     4062e0 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm+0x7a>
	    __ret = __p - this->_M_str;
  4062cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4062d1:	48 8b 40 08          	mov    0x8(%rax),%rax
  4062d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4062d9:	48 29 c2             	sub    %rax,%rdx
  4062dc:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	}
      return __ret;
  4062e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4062e4:	c9                   	leave
  4062e5:	c3                   	ret

00000000004062e6 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_>:
    char_traits<_CharT>::
  4062e6:	55                   	push   %rbp
  4062e7:	48 89 e5             	mov    %rsp,%rbp
  4062ea:	48 83 ec 30          	sub    $0x30,%rsp
  4062ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4062f2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4062f6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      for (std::size_t __i = 0; __i < __n; ++__i)
  4062fa:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  406301:	00
  406302:	eb 30                	jmp    406334 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x4e>
        if (eq(__s[__i], __a))
  406304:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406308:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40630c:	48 01 c2             	add    %rax,%rdx
  40630f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406313:	48 89 c6             	mov    %rax,%rsi
  406316:	48 89 d7             	mov    %rdx,%rdi
  406319:	e8 da f8 ff ff       	call   405bf8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
  40631e:	84 c0                	test   %al,%al
  406320:	74 0d                	je     40632f <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x49>
          return __s + __i;
  406322:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406326:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40632a:	48 01 d0             	add    %rdx,%rax
  40632d:	eb 14                	jmp    406343 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x5d>
      for (std::size_t __i = 0; __i < __n; ++__i)
  40632f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  406334:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406338:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40633c:	72 c6                	jb     406304 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcmRS2_+0x1e>
      return 0;
  40633e:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  406343:	c9                   	leave
  406344:	c3                   	ret
  406345:	90                   	nop

0000000000406346 <_ZNSt8__format8_ScannerIcE11_M_on_charsEPKc>:
      constexpr virtual void _M_on_chars(iterator) { }
  406346:	55                   	push   %rbp
  406347:	48 89 e5             	mov    %rsp,%rbp
  40634a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40634e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  406352:	90                   	nop
  406353:	5d                   	pop    %rbp
  406354:	c3                   	ret
  406355:	90                   	nop

0000000000406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>:
      advance_to(const_iterator __it) noexcept
  406356:	55                   	push   %rbp
  406357:	48 89 e5             	mov    %rsp,%rbp
  40635a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40635e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_begin = __it; }
  406362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406366:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40636a:	48 89 10             	mov    %rdx,(%rax)
  40636d:	90                   	nop
  40636e:	5d                   	pop    %rbp
  40636f:	c3                   	ret

0000000000406370 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
  406370:	55                   	push   %rbp
  406371:	48 89 e5             	mov    %rsp,%rbp
  406374:	48 83 ec 10          	sub    $0x10,%rsp
  406378:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
  40637c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406380:	48 89 c7             	mov    %rax,%rdi
  406383:	e8 0a 00 00 00       	call   406392 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>
  406388:	48 89 c7             	mov    %rax,%rdi
  40638b:	e8 10 00 00 00       	call   4063a0 <_ZNSt10__pair_getILm0EE10__move_getItPKcEEOT_OSt4pairIS4_T0_E>
  406390:	c9                   	leave
  406391:	c3                   	ret

0000000000406392 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
  406392:	55                   	push   %rbp
  406393:	48 89 e5             	mov    %rsp,%rbp
  406396:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40639a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40639e:	5d                   	pop    %rbp
  40639f:	c3                   	ret

00000000004063a0 <_ZNSt10__pair_getILm0EE10__move_getItPKcEEOT_OSt4pairIS4_T0_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
  4063a0:	55                   	push   %rbp
  4063a1:	48 89 e5             	mov    %rsp,%rbp
  4063a4:	48 83 ec 10          	sub    $0x10,%rsp
  4063a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return std::forward<_Tp1>(__pair.first); }
  4063ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063b0:	48 89 c7             	mov    %rax,%rdi
  4063b3:	e8 02 00 00 00       	call   4063ba <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
  4063b8:	c9                   	leave
  4063b9:	c3                   	ret

00000000004063ba <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4063ba:	55                   	push   %rbp
  4063bb:	48 89 e5             	mov    %rsp,%rbp
  4063be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  4063c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063c6:	5d                   	pop    %rbp
  4063c7:	c3                   	ret

00000000004063c8 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
  4063c8:	55                   	push   %rbp
  4063c9:	48 89 e5             	mov    %rsp,%rbp
  4063cc:	48 83 ec 10          	sub    $0x10,%rsp
  4063d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
  4063d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063d8:	48 89 c7             	mov    %rax,%rdi
  4063db:	e8 b2 ff ff ff       	call   406392 <_ZSt4moveIRSt4pairItPKcEEONSt16remove_referenceIT_E4typeEOS6_>
  4063e0:	48 89 c7             	mov    %rax,%rdi
  4063e3:	e8 02 00 00 00       	call   4063ea <_ZNSt10__pair_getILm1EE10__move_getItPKcEEOT0_OSt4pairIT_S4_E>
  4063e8:	c9                   	leave
  4063e9:	c3                   	ret

00000000004063ea <_ZNSt10__pair_getILm1EE10__move_getItPKcEEOT0_OSt4pairIT_S4_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
  4063ea:	55                   	push   %rbp
  4063eb:	48 89 e5             	mov    %rsp,%rbp
  4063ee:	48 83 ec 10          	sub    $0x10,%rsp
  4063f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return std::forward<_Tp2>(__pair.second); }
  4063f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4063fa:	48 83 c0 08          	add    $0x8,%rax
  4063fe:	48 89 c7             	mov    %rax,%rdi
  406401:	e8 02 00 00 00       	call   406408 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
  406406:	c9                   	leave
  406407:	c3                   	ret

0000000000406408 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  406408:	55                   	push   %rbp
  406409:	48 89 e5             	mov    %rsp,%rbp
  40640c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  406410:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406414:	5d                   	pop    %rbp
  406415:	c3                   	ret

0000000000406416 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv>:
      constexpr void _M_on_replacement_field()
  406416:	55                   	push   %rbp
  406417:	48 89 e5             	mov    %rsp,%rbp
  40641a:	53                   	push   %rbx
  40641b:	48 83 ec 48          	sub    $0x48,%rsp
  40641f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __next = begin();
  406423:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406427:	48 89 c7             	mov    %rax,%rdi
  40642a:	e8 71 fd ff ff       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  40642f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (*__next == '}')
  406433:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406437:	0f b6 00             	movzbl (%rax),%eax
  40643a:	3c 7d                	cmp    $0x7d,%al
  40643c:	75 19                	jne    406457 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x41>
	  __id = _M_pc.next_arg_id();
  40643e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406442:	48 83 c0 08          	add    $0x8,%rax
  406446:	48 89 c7             	mov    %rax,%rdi
  406449:	e8 d4 01 00 00       	call   406622 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  40644e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  406452:	e9 3a 01 00 00       	jmp    406591 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	else if (*__next == ':')
  406457:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40645b:	0f b6 00             	movzbl (%rax),%eax
  40645e:	3c 3a                	cmp    $0x3a,%al
  406460:	75 35                	jne    406497 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x81>
	    __id = _M_pc.next_arg_id();
  406462:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406466:	48 83 c0 08          	add    $0x8,%rax
  40646a:	48 89 c7             	mov    %rax,%rdi
  40646d:	e8 b0 01 00 00       	call   406622 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  406472:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    _M_pc.advance_to(++__next);
  406476:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40647a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40647e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  406483:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406487:	48 89 c6             	mov    %rax,%rsi
  40648a:	48 89 d7             	mov    %rdx,%rdi
  40648d:	e8 c4 fe ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  406492:	e9 fa 00 00 00       	jmp    406591 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	    auto [__i, __ptr] = __format::__parse_arg_id(begin(), end());
  406497:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40649b:	48 89 c7             	mov    %rax,%rdi
  40649e:	e8 2d fd ff ff       	call   4061d0 <_ZNKSt8__format8_ScannerIcE3endEv>
  4064a3:	48 89 c3             	mov    %rax,%rbx
  4064a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4064aa:	48 89 c7             	mov    %rax,%rdi
  4064ad:	e8 ee fc ff ff       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  4064b2:	48 89 de             	mov    %rbx,%rsi
  4064b5:	48 89 c7             	mov    %rax,%rdi
  4064b8:	e8 15 1f 00 00       	call   4083d2 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>
  4064bd:	89 c1                	mov    %eax,%ecx
  4064bf:	48 89 d0             	mov    %rdx,%rax
  4064c2:	89 4d c0             	mov    %ecx,-0x40(%rbp)
  4064c5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4064c9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4064cd:	48 89 c7             	mov    %rax,%rdi
  4064d0:	e8 9b fe ff ff       	call   406370 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  4064d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4064d9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4064dd:	48 89 c7             	mov    %rax,%rdi
  4064e0:	e8 e3 fe ff ff       	call   4063c8 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  4064e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
  4064e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064ed:	48 8b 00             	mov    (%rax),%rax
  4064f0:	48 85 c0             	test   %rax,%rax
  4064f3:	74 1c                	je     406511 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0xfb>
  4064f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4064f9:	48 8b 00             	mov    (%rax),%rax
  4064fc:	0f b6 00             	movzbl (%rax),%eax
  4064ff:	3c 7d                	cmp    $0x7d,%al
  406501:	74 13                	je     406516 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x100>
  406503:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406507:	48 8b 00             	mov    (%rax),%rax
  40650a:	0f b6 00             	movzbl (%rax),%eax
  40650d:	3c 3a                	cmp    $0x3a,%al
  40650f:	74 05                	je     406516 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x100>
	      __format::__invalid_arg_id_in_format_string();
  406511:	e8 00 ed ff ff       	call   405216 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
	    _M_pc.check_arg_id(__id = __i);
  406516:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40651a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40651e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406522:	0f b7 00             	movzwl (%rax),%eax
  406525:	0f b7 c0             	movzwl %ax,%eax
  406528:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40652c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406530:	48 89 c6             	mov    %rax,%rsi
  406533:	48 89 d7             	mov    %rdx,%rdi
  406536:	e8 b7 1f 00 00       	call   4084f2 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>
	    if (*__ptr == ':')
  40653b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40653f:	48 8b 00             	mov    (%rax),%rax
  406542:	0f b6 00             	movzbl (%rax),%eax
  406545:	3c 3a                	cmp    $0x3a,%al
  406547:	75 2e                	jne    406577 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x161>
		_M_pc.advance_to(++__ptr);
  406549:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40654d:	48 8d 50 08          	lea    0x8(%rax),%rdx
  406551:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406555:	48 8b 00             	mov    (%rax),%rax
  406558:	48 8d 48 01          	lea    0x1(%rax),%rcx
  40655c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406560:	48 89 08             	mov    %rcx,(%rax)
  406563:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406567:	48 8b 00             	mov    (%rax),%rax
  40656a:	48 89 c6             	mov    %rax,%rsi
  40656d:	48 89 d7             	mov    %rdx,%rdi
  406570:	e8 e1 fd ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
  406575:	eb 1a                	jmp    406591 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x17b>
	      _M_pc.advance_to(__ptr);
  406577:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40657b:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40657f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406583:	48 8b 00             	mov    (%rax),%rax
  406586:	48 89 c6             	mov    %rax,%rsi
  406589:	48 89 d7             	mov    %rdx,%rdi
  40658c:	e8 c5 fd ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	_M_format_arg(__id);
  406591:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406595:	48 8b 00             	mov    (%rax),%rax
  406598:	48 83 c0 08          	add    $0x8,%rax
  40659c:	48 8b 08             	mov    (%rax),%rcx
  40659f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4065a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4065a7:	48 89 d6             	mov    %rdx,%rsi
  4065aa:	48 89 c7             	mov    %rax,%rdi
  4065ad:	ff d1                	call   *%rcx
	if (begin() == end() || *begin() != '}')
  4065af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4065b3:	48 89 c7             	mov    %rax,%rdi
  4065b6:	e8 e5 fb ff ff       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  4065bb:	48 89 c3             	mov    %rax,%rbx
  4065be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4065c2:	48 89 c7             	mov    %rax,%rdi
  4065c5:	e8 06 fc ff ff       	call   4061d0 <_ZNKSt8__format8_ScannerIcE3endEv>
  4065ca:	48 39 c3             	cmp    %rax,%rbx
  4065cd:	74 13                	je     4065e2 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1cc>
  4065cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4065d3:	48 89 c7             	mov    %rax,%rdi
  4065d6:	e8 c5 fb ff ff       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  4065db:	0f b6 00             	movzbl (%rax),%eax
  4065de:	3c 7d                	cmp    $0x7d,%al
  4065e0:	74 07                	je     4065e9 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1d3>
  4065e2:	b8 01 00 00 00       	mov    $0x1,%eax
  4065e7:	eb 05                	jmp    4065ee <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1d8>
  4065e9:	b8 00 00 00 00       	mov    $0x0,%eax
  4065ee:	84 c0                	test   %al,%al
  4065f0:	74 05                	je     4065f7 <_ZNSt8__format8_ScannerIcE23_M_on_replacement_fieldEv+0x1e1>
	  __format::__unmatched_left_brace_in_format_string();
  4065f2:	e8 f5 eb ff ff       	call   4051ec <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
	_M_pc.advance_to(begin() + 1); // Move past '}'
  4065f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4065fb:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4065ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  406603:	48 89 c7             	mov    %rax,%rdi
  406606:	e8 95 fb ff ff       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  40660b:	48 83 c0 01          	add    $0x1,%rax
  40660f:	48 89 c6             	mov    %rax,%rsi
  406612:	48 89 df             	mov    %rbx,%rdi
  406615:	e8 3c fd ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
      }
  40661a:	90                   	nop
  40661b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40661f:	c9                   	leave
  406620:	c3                   	ret
  406621:	90                   	nop

0000000000406622 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>:
      next_arg_id()
  406622:	55                   	push   %rbp
  406623:	48 89 e5             	mov    %rsp,%rbp
  406626:	48 83 ec 10          	sub    $0x10,%rsp
  40662a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (_M_indexing == _Manual)
  40662e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406632:	8b 40 10             	mov    0x10(%rax),%eax
  406635:	83 f8 01             	cmp    $0x1,%eax
  406638:	75 05                	jne    40663f <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x1d>
	  __format::__conflicting_indexing_in_format_string();
  40663a:	e8 c9 eb ff ff       	call   405208 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>
	_M_indexing = _Auto;
  40663f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406643:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%rax)
	if (std::is_constant_evaluated())
  40664a:	e8 2d e0 ff ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  40664f:	84 c0                	test   %al,%al
  406651:	74 1a                	je     40666d <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x4b>
	  if (_M_next_arg_id == _M_num_args)
  406653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406657:	48 8b 50 18          	mov    0x18(%rax),%rdx
  40665b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40665f:	48 8b 40 20          	mov    0x20(%rax),%rax
  406663:	48 39 c2             	cmp    %rax,%rdx
  406666:	75 05                	jne    40666d <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv+0x4b>
	    __format::__invalid_arg_id_in_format_string();
  406668:	e8 a9 eb ff ff       	call   405216 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
	return _M_next_arg_id++;
  40666d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406671:	48 8b 40 18          	mov    0x18(%rax),%rax
  406675:	48 8d 48 01          	lea    0x1(%rax),%rcx
  406679:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40667d:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
      }
  406681:	c9                   	leave
  406682:	c3                   	ret
  406683:	90                   	nop

0000000000406684 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  406684:	55                   	push   %rbp
  406685:	48 89 e5             	mov    %rsp,%rbp
  406688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  40668c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406690:	48 8b 50 08          	mov    0x8(%rax),%rdx
  406694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406698:	48 8b 00             	mov    (%rax),%rax
  40669b:	48 8b 0a             	mov    (%rdx),%rcx
  40669e:	48 89 08             	mov    %rcx,(%rax)
  4066a1:	8b 52 08             	mov    0x8(%rdx),%edx
  4066a4:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  4066a7:	90                   	nop
  4066a8:	5d                   	pop    %rbp
  4066a9:	c3                   	ret

00000000004066aa <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  4066aa:	55                   	push   %rbp
  4066ab:	48 89 e5             	mov    %rsp,%rbp
  4066ae:	48 83 ec 10          	sub    $0x10,%rsp
  4066b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  4066b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066ba:	48 8b 00             	mov    (%rax),%rax
  4066bd:	48 8b 10             	mov    (%rax),%rdx
  4066c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066c4:	48 8b 40 08          	mov    0x8(%rax),%rax
  4066c8:	48 8b 00             	mov    (%rax),%rax
  4066cb:	48 39 c2             	cmp    %rax,%rdx
  4066ce:	74 11                	je     4066e1 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  4066d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066d4:	48 8b 00             	mov    (%rax),%rax
  4066d7:	48 8b 00             	mov    (%rax),%rax
  4066da:	0f b6 00             	movzbl (%rax),%eax
  4066dd:	3c 7d                	cmp    $0x7d,%al
  4066df:	75 17                	jne    4066f8 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  4066e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4066e5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4066e9:	48 89 c7             	mov    %rax,%rdi
  4066ec:	e8 93 ff ff ff       	call   406684 <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  4066f1:	b8 01 00 00 00       	mov    $0x1,%eax
  4066f6:	eb 05                	jmp    4066fd <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  4066f8:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  4066fd:	c9                   	leave
  4066fe:	c3                   	ret
  4066ff:	90                   	nop

0000000000406700 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  406700:	55                   	push   %rbp
  406701:	48 89 e5             	mov    %rsp,%rbp
  406704:	48 83 ec 60          	sub    $0x60,%rsp
  406708:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40670c:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	auto __first = __pc.begin();
  406710:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406714:	48 89 c7             	mov    %rax,%rdi
  406717:	e8 a2 fa ff ff       	call   4061be <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  40671c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const auto __last = __pc.end();
  406720:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406724:	48 89 c7             	mov    %rax,%rdi
  406727:	e8 c2 fa ff ff       	call   4061ee <_ZNKSt26basic_format_parse_contextIcE3endEv>
  40672c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	_Spec<_CharT> __spec{};
  406730:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  406737:	00
  406738:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40673f:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	auto __finalize = [this, &__spec] {
  406746:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40674a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40674e:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  406752:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  406756:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  40675a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40675e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  406762:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406766:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40676a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  40676e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406772:	48 89 c7             	mov    %rax,%rdi
  406775:	e8 30 ff ff ff       	call   4066aa <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40677a:	84 c0                	test   %al,%al
  40677c:	74 09                	je     406787 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  40677e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406782:	e9 ca 00 00 00       	jmp    406851 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  406787:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40678b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40678f:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  406793:	48 89 ce             	mov    %rcx,%rsi
  406796:	48 89 c7             	mov    %rax,%rdi
  406799:	e8 c8 1e 00 00       	call   408666 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  40679e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  4067a2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4067a6:	48 89 c7             	mov    %rax,%rdi
  4067a9:	e8 fc fe ff ff       	call   4066aa <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4067ae:	84 c0                	test   %al,%al
  4067b0:	74 09                	je     4067bb <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0xbb>
	  return __first;
  4067b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067b6:	e9 96 00 00 00       	jmp    406851 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_width(__first, __last, __pc);
  4067bb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4067bf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4067c3:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4067c7:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  4067cb:	48 89 c7             	mov    %rax,%rdi
  4067ce:	e8 25 20 00 00       	call   4087f8 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  4067d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  4067d7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4067db:	48 89 c7             	mov    %rax,%rdi
  4067de:	e8 c7 fe ff ff       	call   4066aa <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4067e3:	84 c0                	test   %al,%al
  4067e5:	74 06                	je     4067ed <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0xed>
	  return __first;
  4067e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4067eb:	eb 64                	jmp    406851 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__first = __spec._M_parse_precision(__first, __last, __pc);
  4067ed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4067f1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4067f5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4067f9:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  4067fd:	48 89 c7             	mov    %rax,%rdi
  406800:	e8 91 20 00 00       	call   408896 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>
  406805:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  406809:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40680d:	48 89 c7             	mov    %rax,%rdi
  406810:	e8 95 fe ff ff       	call   4066aa <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  406815:	84 c0                	test   %al,%al
  406817:	74 06                	je     40681f <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x11f>
	  return __first;
  406819:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40681d:	eb 32                	jmp    406851 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	if (*__first == 's')
  40681f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406823:	0f b6 00             	movzbl (%rax),%eax
  406826:	3c 73                	cmp    $0x73,%al
  406828:	75 0c                	jne    406836 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x136>
	  ++__first;
  40682a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40682e:	48 83 c0 01          	add    $0x1,%rax
  406832:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__finished())
  406836:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40683a:	48 89 c7             	mov    %rax,%rdi
  40683d:	e8 68 fe ff ff       	call   4066aa <_ZZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  406842:	84 c0                	test   %al,%al
  406844:	74 06                	je     40684c <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x14c>
	  return __first;
  406846:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40684a:	eb 05                	jmp    406851 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE+0x151>
	__format::__failed_to_parse_format_spec();
  40684c:	e8 d3 e9 ff ff       	call   405224 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  406851:	c9                   	leave
  406852:	c3                   	ret
  406853:	90                   	nop

0000000000406854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
  406854:	55                   	push   %rbp
  406855:	48 89 e5             	mov    %rsp,%rbp
  406858:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40685c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  406860:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  406864:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406868:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40686c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  406870:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  406874:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406878:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40687c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  406880:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  406884:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  406885:	90                   	nop
	: allocator_type(__a), _M_p(__dat) { }
  406886:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40688a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40688e:	48 89 10             	mov    %rdx,(%rax)
  406891:	90                   	nop
  406892:	5d                   	pop    %rbp
  406893:	c3                   	ret

0000000000406894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  406894:	55                   	push   %rbp
  406895:	48 89 e5             	mov    %rsp,%rbp
  406898:	53                   	push   %rbx
  406899:	48 83 ec 38          	sub    $0x38,%rsp
  40689d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4068a1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4068a5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
  4068a9:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  4068ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4068b1:	48 89 c7             	mov    %rax,%rdi
  4068b4:	e8 9f e1 ff ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4068b9:	48 89 c1             	mov    %rax,%rcx
  4068bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4068c0:	48 89 c2             	mov    %rax,%rdx
  4068c3:	48 89 ce             	mov    %rcx,%rsi
  4068c6:	48 89 df             	mov    %rbx,%rdi
  4068c9:	e8 86 ff ff ff       	call   406854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
  4068ce:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  4068d3:	75 0a                	jne    4068df <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x4b>
	  std::__throw_logic_error(__N("basic_string: "
  4068d5:	bf 50 b1 41 00       	mov    $0x41b150,%edi
  4068da:	e8 f1 d8 ff ff       	call   4041d0 <_ZSt19__throw_logic_errorPKc@plt>
	const _CharT* __end = __s + traits_type::length(__s);
  4068df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4068e3:	48 89 c7             	mov    %rax,%rdi
  4068e6:	e8 79 df ff ff       	call   404864 <_ZNSt11char_traitsIcE6lengthEPKc>
  4068eb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4068ef:	48 01 d0             	add    %rdx,%rax
  4068f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
  4068f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4068fa:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4068fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406902:	48 89 ce             	mov    %rcx,%rsi
  406905:	48 89 c7             	mov    %rax,%rdi
  406908:	e8 85 20 00 00       	call   408992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
  40690d:	eb 1a                	jmp    406929 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x95>
  40690f:	48 89 c3             	mov    %rax,%rbx
  406912:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  406916:	48 89 c7             	mov    %rax,%rdi
  406919:	e8 f4 e1 ff ff       	call   404b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  40691e:	48 89 d8             	mov    %rbx,%rax
  406921:	48 89 c7             	mov    %rax,%rdi
  406924:	e8 e7 da ff ff       	call   404410 <_Unwind_Resume@plt>
  406929:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40692d:	c9                   	leave
  40692e:	c3                   	ret
  40692f:	90                   	nop

0000000000406930 <_ZNSt8__format15__formatter_intIcE8_M_parseIiEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  406930:	55                   	push   %rbp
  406931:	48 89 e5             	mov    %rsp,%rbp
  406934:	48 83 ec 10          	sub    $0x10,%rsp
  406938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40693c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  406940:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  406944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406948:	ba 01 00 00 00       	mov    $0x1,%edx
  40694d:	48 89 ce             	mov    %rcx,%rsi
  406950:	48 89 c7             	mov    %rax,%rdi
  406953:	e8 7e 00 00 00       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  406958:	c9                   	leave
  406959:	c3                   	ret

000000000040695a <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  40695a:	55                   	push   %rbp
  40695b:	48 89 e5             	mov    %rsp,%rbp
  40695e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  406962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406966:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40696a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40696e:	48 8b 00             	mov    (%rax),%rax
  406971:	48 8b 0a             	mov    (%rdx),%rcx
  406974:	48 89 08             	mov    %rcx,(%rax)
  406977:	8b 52 08             	mov    0x8(%rdx),%edx
  40697a:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  40697d:	90                   	nop
  40697e:	5d                   	pop    %rbp
  40697f:	c3                   	ret

0000000000406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>:
	auto __finished = [&] {
  406980:	55                   	push   %rbp
  406981:	48 89 e5             	mov    %rsp,%rbp
  406984:	48 83 ec 10          	sub    $0x10,%rsp
  406988:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  40698c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406990:	48 8b 00             	mov    (%rax),%rax
  406993:	48 8b 10             	mov    (%rax),%rdx
  406996:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40699a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40699e:	48 8b 00             	mov    (%rax),%rax
  4069a1:	48 39 c2             	cmp    %rax,%rdx
  4069a4:	74 11                	je     4069b7 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x37>
  4069a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4069aa:	48 8b 00             	mov    (%rax),%rax
  4069ad:	48 8b 00             	mov    (%rax),%rax
  4069b0:	0f b6 00             	movzbl (%rax),%eax
  4069b3:	3c 7d                	cmp    $0x7d,%al
  4069b5:	75 17                	jne    4069ce <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x4e>
	      __finalize();
  4069b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4069bb:	48 8b 40 10          	mov    0x10(%rax),%rax
  4069bf:	48 89 c7             	mov    %rax,%rdi
  4069c2:	e8 93 ff ff ff       	call   40695a <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE_clEv>
	      return true;
  4069c7:	b8 01 00 00 00       	mov    $0x1,%eax
  4069cc:	eb 05                	jmp    4069d3 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv+0x53>
	  return false;
  4069ce:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  4069d3:	c9                   	leave
  4069d4:	c3                   	ret
  4069d5:	90                   	nop

00000000004069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>:
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
  4069d6:	55                   	push   %rbp
  4069d7:	48 89 e5             	mov    %rsp,%rbp
  4069da:	48 83 ec 70          	sub    $0x70,%rsp
  4069de:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4069e2:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4069e6:	89 55 9c             	mov    %edx,-0x64(%rbp)
	_Spec<_CharT> __spec{};
  4069e9:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  4069f0:	00
  4069f1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  4069f8:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	__spec._M_type = __type;
  4069ff:	8b 45 9c             	mov    -0x64(%rbp),%eax
  406a02:	83 e0 0f             	and    $0xf,%eax
  406a05:	83 e0 0f             	and    $0xf,%eax
  406a08:	8d 14 c5 00 00 00 00 	lea    0x0(,%rax,8),%edx
  406a0f:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406a13:	83 e0 87             	and    $0xffffff87,%eax
  406a16:	09 d0                	or     %edx,%eax
  406a18:	88 45 f5             	mov    %al,-0xb(%rbp)
	const auto __last = __pc.end();
  406a1b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406a1f:	48 89 c7             	mov    %rax,%rdi
  406a22:	e8 c7 f7 ff ff       	call   4061ee <_ZNKSt26basic_format_parse_contextIcE3endEv>
  406a27:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  406a2b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  406a2f:	48 89 c7             	mov    %rax,%rdi
  406a32:	e8 87 f7 ff ff       	call   4061be <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  406a37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  406a3b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  406a3f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  406a43:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406a47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  406a4b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  406a4f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  406a53:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  406a57:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  406a5b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  406a5f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  406a63:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406a67:	48 89 c7             	mov    %rax,%rdi
  406a6a:	e8 11 ff ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406a6f:	84 c0                	test   %al,%al
  406a71:	74 09                	je     406a7c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0xa6>
	  return __first;
  406a73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406a77:	e9 68 02 00 00       	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  406a7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406a80:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406a84:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406a88:	48 89 ce             	mov    %rcx,%rsi
  406a8b:	48 89 c7             	mov    %rax,%rdi
  406a8e:	e8 d3 1b 00 00       	call   408666 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  406a93:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406a97:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406a9b:	48 89 c7             	mov    %rax,%rdi
  406a9e:	e8 dd fe ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406aa3:	84 c0                	test   %al,%al
  406aa5:	74 09                	je     406ab0 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0xda>
	  return __first;
  406aa7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406aab:	e9 34 02 00 00       	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_sign(__first, __last);
  406ab0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406ab4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406ab8:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406abc:	48 89 ce             	mov    %rcx,%rsi
  406abf:	48 89 c7             	mov    %rax,%rdi
  406ac2:	e8 3b 21 00 00       	call   408c02 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>
  406ac7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406acb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406acf:	48 89 c7             	mov    %rax,%rdi
  406ad2:	e8 a9 fe ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406ad7:	84 c0                	test   %al,%al
  406ad9:	74 09                	je     406ae4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x10e>
	  return __first;
  406adb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406adf:	e9 00 02 00 00       	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_alternate_form(__first, __last);
  406ae4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406ae8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406aec:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406af0:	48 89 ce             	mov    %rcx,%rsi
  406af3:	48 89 c7             	mov    %rax,%rdi
  406af6:	e8 63 21 00 00       	call   408c5e <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>
  406afb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406aff:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406b03:	48 89 c7             	mov    %rax,%rdi
  406b06:	e8 75 fe ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406b0b:	84 c0                	test   %al,%al
  406b0d:	74 09                	je     406b18 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x142>
	  return __first;
  406b0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406b13:	e9 cc 01 00 00       	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_zero_fill(__first, __last);
  406b18:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406b1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406b20:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406b24:	48 89 ce             	mov    %rcx,%rsi
  406b27:	48 89 c7             	mov    %rax,%rdi
  406b2a:	e8 61 21 00 00       	call   408c90 <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>
  406b2f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406b33:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406b37:	48 89 c7             	mov    %rax,%rdi
  406b3a:	e8 41 fe ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406b3f:	84 c0                	test   %al,%al
  406b41:	74 09                	je     406b4c <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x176>
	  return __first;
  406b43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406b47:	e9 98 01 00 00       	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_width(__first, __last, __pc);
  406b4c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406b50:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406b54:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  406b58:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406b5c:	48 89 c7             	mov    %rax,%rdi
  406b5f:	e8 94 1c 00 00       	call   4087f8 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  406b64:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406b68:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406b6c:	48 89 c7             	mov    %rax,%rdi
  406b6f:	e8 0c fe ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406b74:	84 c0                	test   %al,%al
  406b76:	74 09                	je     406b81 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x1ab>
	  return __first;
  406b78:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406b7c:	e9 63 01 00 00       	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__first = __spec._M_parse_locale(__first, __last);
  406b81:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  406b85:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406b89:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  406b8d:	48 89 ce             	mov    %rcx,%rsi
  406b90:	48 89 c7             	mov    %rax,%rdi
  406b93:	e8 2a 21 00 00       	call   408cc2 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>
  406b98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  406b9c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406ba0:	48 89 c7             	mov    %rax,%rdi
  406ba3:	e8 d8 fd ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406ba8:	84 c0                	test   %al,%al
  406baa:	74 09                	je     406bb5 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x1df>
	  return __first;
  406bac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406bb0:	e9 2f 01 00 00       	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	switch (*__first)
  406bb5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406bb9:	0f b6 00             	movzbl (%rax),%eax
  406bbc:	0f be c0             	movsbl %al,%eax
  406bbf:	83 e8 42             	sub    $0x42,%eax
  406bc2:	83 f8 36             	cmp    $0x36,%eax
  406bc5:	0f 87 fe 00 00 00    	ja     406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
  406bcb:	89 c0                	mov    %eax,%eax
  406bcd:	48 8b 04 c5 00 dd 41 	mov    0x41dd00(,%rax,8),%rax
  406bd4:	00
  406bd5:	ff e0                	jmp    *%rax
	    __spec._M_type = _Pres_b;
  406bd7:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406bdb:	83 e0 87             	and    $0xffffff87,%eax
  406bde:	83 c8 10             	or     $0x10,%eax
  406be1:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406be4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406be8:	48 83 c0 01          	add    $0x1,%rax
  406bec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406bf0:	e9 d4 00 00 00       	jmp    406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_B;
  406bf5:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406bf9:	83 e0 87             	and    $0xffffff87,%eax
  406bfc:	83 c8 18             	or     $0x18,%eax
  406bff:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c06:	48 83 c0 01          	add    $0x1,%rax
  406c0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c0e:	e9 b6 00 00 00       	jmp    406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    if (__type != _AsBool)
  406c13:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  406c17:	0f 84 a8 00 00 00    	je     406cc5 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2ef>
		__spec._M_type = _Pres_c;
  406c1d:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c21:	83 e0 87             	and    $0xffffff87,%eax
  406c24:	83 c8 38             	or     $0x38,%eax
  406c27:	88 45 f5             	mov    %al,-0xb(%rbp)
		++__first;
  406c2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c2e:	48 83 c0 01          	add    $0x1,%rax
  406c32:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c36:	e9 8a 00 00 00       	jmp    406cc5 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2ef>
	    __spec._M_type = _Pres_d;
  406c3b:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c3f:	83 e0 87             	and    $0xffffff87,%eax
  406c42:	83 c8 08             	or     $0x8,%eax
  406c45:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c4c:	48 83 c0 01          	add    $0x1,%rax
  406c50:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c54:	eb 73                	jmp    406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_o;
  406c56:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c5a:	83 e0 87             	and    $0xffffff87,%eax
  406c5d:	83 c8 20             	or     $0x20,%eax
  406c60:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c67:	48 83 c0 01          	add    $0x1,%rax
  406c6b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c6f:	eb 58                	jmp    406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_x;
  406c71:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c75:	83 e0 87             	and    $0xffffff87,%eax
  406c78:	83 c8 28             	or     $0x28,%eax
  406c7b:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c82:	48 83 c0 01          	add    $0x1,%rax
  406c86:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406c8a:	eb 3d                	jmp    406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    __spec._M_type = _Pres_X;
  406c8c:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406c90:	83 e0 87             	and    $0xffffff87,%eax
  406c93:	83 c8 30             	or     $0x30,%eax
  406c96:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  406c99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406c9d:	48 83 c0 01          	add    $0x1,%rax
  406ca1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406ca5:	eb 22                	jmp    406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    if (__type == _AsBool)
  406ca7:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  406cab:	75 1b                	jne    406cc8 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f2>
		__spec._M_type = _Pres_s; // same value (and meaning) as "none"
  406cad:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  406cb1:	83 e0 87             	and    $0xffffff87,%eax
  406cb4:	88 45 f5             	mov    %al,-0xb(%rbp)
		++__first;
  406cb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406cbb:	48 83 c0 01          	add    $0x1,%rax
  406cbf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  406cc3:	eb 03                	jmp    406cc8 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f2>
	    break;
  406cc5:	90                   	nop
  406cc6:	eb 01                	jmp    406cc9 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x2f3>
	    break;
  406cc8:	90                   	nop
	if (__finished())
  406cc9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  406ccd:	48 89 c7             	mov    %rax,%rdi
  406cd0:	e8 ab fc ff ff       	call   406980 <_ZZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeEENKUlvE0_clEv>
  406cd5:	84 c0                	test   %al,%al
  406cd7:	74 06                	je     406cdf <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x309>
	  return __first;
  406cd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  406cdd:	eb 05                	jmp    406ce4 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE+0x30e>
	__format::__failed_to_parse_format_spec();
  406cdf:	e8 40 e5 ff ff       	call   405224 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  406ce4:	c9                   	leave
  406ce5:	c3                   	ret

0000000000406ce6 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406ce6:	55                   	push   %rbp
  406ce7:	48 89 e5             	mov    %rsp,%rbp
  406cea:	48 83 ec 30          	sub    $0x30,%rsp
  406cee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406cf2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406cf6:	89 d0                	mov    %edx,%eax
  406cf8:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  406cfb:	88 45 dc             	mov    %al,-0x24(%rbp)
  406cfe:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  406d03:	84 c0                	test   %al,%al
  406d05:	74 30                	je     406d37 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x51>
  406d07:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
  406d0b:	0f 9e c0             	setle  %al
  406d0e:	0f b6 c0             	movzbl %al,%eax
  406d11:	48 85 c0             	test   %rax,%rax
  406d14:	75 0f                	jne    406d25 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x3f>
  406d16:	83 7d d8 24          	cmpl   $0x24,-0x28(%rbp)
  406d1a:	0f 9f c0             	setg   %al
  406d1d:	0f b6 c0             	movzbl %al,%eax
  406d20:	48 85 c0             	test   %rax,%rax
  406d23:	74 07                	je     406d2c <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x46>
  406d25:	b8 01 00 00 00       	mov    $0x1,%eax
  406d2a:	eb 05                	jmp    406d31 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x4b>
  406d2c:	b8 00 00 00 00       	mov    $0x0,%eax
  406d31:	0f b6 c0             	movzbl %al,%eax
  406d34:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  406d37:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  406d3b:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__first == __last) [[__unlikely__]]
  406d3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d42:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406d46:	75 20                	jne    406d68 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  406d48:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  406d4c:	4c 89 ca             	mov    %r9,%rdx
  406d4f:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406d56:	ff ff ff
  406d59:	48 21 d0             	and    %rdx,%rax
  406d5c:	48 83 c8 4b          	or     $0x4b,%rax
  406d60:	49 89 c1             	mov    %rax,%r9
  406d63:	e9 f3 00 00 00       	jmp    406e5b <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
      if (__value == 0)
  406d68:	80 7d dc 00          	cmpb   $0x0,-0x24(%rbp)
  406d6c:	75 2a                	jne    406d98 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xb2>
	  *__first = '0';
  406d6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d72:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  406d75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406d79:	48 83 c0 01          	add    $0x1,%rax
  406d7d:	49 89 c0             	mov    %rax,%r8
  406d80:	4c 89 ca             	mov    %r9,%rdx
  406d83:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406d8a:	ff ff ff
  406d8d:	48 21 d0             	and    %rdx,%rax
  406d90:	49 89 c1             	mov    %rax,%r9
  406d93:	e9 c3 00 00 00       	jmp    406e5b <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
      switch (__base)
  406d98:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406d9c:	74 28                	je     406dc6 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xe0>
  406d9e:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406da2:	0f 8f 96 00 00 00    	jg     406e3e <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
  406da8:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406dac:	74 36                	je     406de4 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0xfe>
  406dae:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406db2:	0f 8f 86 00 00 00    	jg     406e3e <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
  406db8:	83 7d d8 02          	cmpl   $0x2,-0x28(%rbp)
  406dbc:	74 62                	je     406e20 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x13a>
  406dbe:	83 7d d8 08          	cmpl   $0x8,-0x28(%rbp)
  406dc2:	74 3e                	je     406e02 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x11c>
  406dc4:	eb 78                	jmp    406e3e <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x158>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  406dc6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406dc9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406dcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406dd1:	48 89 ce             	mov    %rcx,%rsi
  406dd4:	48 89 c7             	mov    %rax,%rdi
  406dd7:	e8 2f 1f 00 00       	call   408d0b <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>
  406ddc:	49 89 c0             	mov    %rax,%r8
  406ddf:	49 89 d1             	mov    %rdx,%r9
  406de2:	eb 77                	jmp    406e5b <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  406de4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406de7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406deb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406def:	48 89 ce             	mov    %rcx,%rsi
  406df2:	48 89 c7             	mov    %rax,%rdi
  406df5:	e8 4c 20 00 00       	call   408e46 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>
  406dfa:	49 89 c0             	mov    %rax,%r8
  406dfd:	49 89 d1             	mov    %rdx,%r9
  406e00:	eb 59                	jmp    406e5b <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  406e02:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406e05:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406e09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e0d:	48 89 ce             	mov    %rcx,%rsi
  406e10:	48 89 c7             	mov    %rax,%rdi
  406e13:	e8 bb 20 00 00       	call   408ed3 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>
  406e18:	49 89 c0             	mov    %rax,%r8
  406e1b:	49 89 d1             	mov    %rdx,%r9
  406e1e:	eb 3b                	jmp    406e5b <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  406e20:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406e23:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406e27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e2b:	48 89 ce             	mov    %rcx,%rsi
  406e2e:	48 89 c7             	mov    %rax,%rdi
  406e31:	e8 ca 21 00 00       	call   409000 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>
  406e36:	49 89 c0             	mov    %rax,%r8
  406e39:	49 89 d1             	mov    %rdx,%r9
  406e3c:	eb 1d                	jmp    406e5b <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i+0x175>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  406e3e:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  406e41:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406e44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406e48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406e4c:	48 89 c7             	mov    %rax,%rdi
  406e4f:	e8 5b 22 00 00       	call   4090af <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>
  406e54:	49 89 c0             	mov    %rax,%r8
  406e57:	49 89 d1             	mov    %rdx,%r9
  406e5a:	90                   	nop
    }
  406e5b:	4c 89 c0             	mov    %r8,%rax
  406e5e:	4c 89 ca             	mov    %r9,%rdx
  406e61:	c9                   	leave
  406e62:	c3                   	ret

0000000000406e63 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406e63:	55                   	push   %rbp
  406e64:	48 89 e5             	mov    %rsp,%rbp
  406e67:	48 83 ec 30          	sub    $0x30,%rsp
  406e6b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406e6f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406e73:	89 55 dc             	mov    %edx,-0x24(%rbp)
  406e76:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  406e79:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  406e7e:	84 c0                	test   %al,%al
  406e80:	74 30                	je     406eb2 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x4f>
  406e82:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
  406e86:	0f 9e c0             	setle  %al
  406e89:	0f b6 c0             	movzbl %al,%eax
  406e8c:	48 85 c0             	test   %rax,%rax
  406e8f:	75 0f                	jne    406ea0 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x3d>
  406e91:	83 7d d8 24          	cmpl   $0x24,-0x28(%rbp)
  406e95:	0f 9f c0             	setg   %al
  406e98:	0f b6 c0             	movzbl %al,%eax
  406e9b:	48 85 c0             	test   %rax,%rax
  406e9e:	74 07                	je     406ea7 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x44>
  406ea0:	b8 01 00 00 00       	mov    $0x1,%eax
  406ea5:	eb 05                	jmp    406eac <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x49>
  406ea7:	b8 00 00 00 00       	mov    $0x0,%eax
  406eac:	0f b6 c0             	movzbl %al,%eax
  406eaf:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  406eb2:	8b 45 dc             	mov    -0x24(%rbp),%eax
  406eb5:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__first == __last) [[__unlikely__]]
  406eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406ebc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  406ec0:	75 20                	jne    406ee2 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x7f>
	return { __last, errc::value_too_large };
  406ec2:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  406ec6:	4c 89 ca             	mov    %r9,%rdx
  406ec9:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406ed0:	ff ff ff
  406ed3:	48 21 d0             	and    %rdx,%rax
  406ed6:	48 83 c8 4b          	or     $0x4b,%rax
  406eda:	49 89 c1             	mov    %rax,%r9
  406edd:	e9 f3 00 00 00       	jmp    406fd5 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
      if (__value == 0)
  406ee2:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  406ee6:	75 2a                	jne    406f12 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xaf>
	  *__first = '0';
  406ee8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406eec:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  406eef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406ef3:	48 83 c0 01          	add    $0x1,%rax
  406ef7:	49 89 c0             	mov    %rax,%r8
  406efa:	4c 89 ca             	mov    %r9,%rdx
  406efd:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  406f04:	ff ff ff
  406f07:	48 21 d0             	and    %rdx,%rax
  406f0a:	49 89 c1             	mov    %rax,%r9
  406f0d:	e9 c3 00 00 00       	jmp    406fd5 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
      switch (__base)
  406f12:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406f16:	74 28                	je     406f40 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xdd>
  406f18:	83 7d d8 10          	cmpl   $0x10,-0x28(%rbp)
  406f1c:	0f 8f 96 00 00 00    	jg     406fb8 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
  406f22:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406f26:	74 36                	je     406f5e <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0xfb>
  406f28:	83 7d d8 0a          	cmpl   $0xa,-0x28(%rbp)
  406f2c:	0f 8f 86 00 00 00    	jg     406fb8 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
  406f32:	83 7d d8 02          	cmpl   $0x2,-0x28(%rbp)
  406f36:	74 62                	je     406f9a <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x137>
  406f38:	83 7d d8 08          	cmpl   $0x8,-0x28(%rbp)
  406f3c:	74 3e                	je     406f7c <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x119>
  406f3e:	eb 78                	jmp    406fb8 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x155>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  406f40:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f43:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f4b:	48 89 ce             	mov    %rcx,%rsi
  406f4e:	48 89 c7             	mov    %rax,%rdi
  406f51:	e8 b5 1d 00 00       	call   408d0b <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>
  406f56:	49 89 c0             	mov    %rax,%r8
  406f59:	49 89 d1             	mov    %rdx,%r9
  406f5c:	eb 77                	jmp    406fd5 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  406f5e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f61:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f69:	48 89 ce             	mov    %rcx,%rsi
  406f6c:	48 89 c7             	mov    %rax,%rdi
  406f6f:	e8 d2 1e 00 00       	call   408e46 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>
  406f74:	49 89 c0             	mov    %rax,%r8
  406f77:	49 89 d1             	mov    %rdx,%r9
  406f7a:	eb 59                	jmp    406fd5 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  406f7c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f7f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406f83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406f87:	48 89 ce             	mov    %rcx,%rsi
  406f8a:	48 89 c7             	mov    %rax,%rdi
  406f8d:	e8 41 1f 00 00       	call   408ed3 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>
  406f92:	49 89 c0             	mov    %rax,%r8
  406f95:	49 89 d1             	mov    %rdx,%r9
  406f98:	eb 3b                	jmp    406fd5 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  406f9a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406f9d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  406fa1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406fa5:	48 89 ce             	mov    %rcx,%rsi
  406fa8:	48 89 c7             	mov    %rax,%rdi
  406fab:	e8 50 20 00 00       	call   409000 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>
  406fb0:	49 89 c0             	mov    %rax,%r8
  406fb3:	49 89 d1             	mov    %rdx,%r9
  406fb6:	eb 1d                	jmp    406fd5 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i+0x172>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  406fb8:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  406fbb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  406fbe:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  406fc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  406fc6:	48 89 c7             	mov    %rax,%rdi
  406fc9:	e8 e1 20 00 00       	call   4090af <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>
  406fce:	49 89 c0             	mov    %rax,%r8
  406fd1:	49 89 d1             	mov    %rdx,%r9
  406fd4:	90                   	nop
    }
  406fd5:	4c 89 c0             	mov    %r8,%rax
  406fd8:	4c 89 ca             	mov    %r9,%rdx
  406fdb:	c9                   	leave
  406fdc:	c3                   	ret

0000000000406fdd <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  406fdd:	55                   	push   %rbp
  406fde:	48 89 e5             	mov    %rsp,%rbp
  406fe1:	48 83 ec 30          	sub    $0x30,%rsp
  406fe5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406fe9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406fed:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  406ff1:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  406ff4:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  406ff9:	84 c0                	test   %al,%al
  406ffb:	74 30                	je     40702d <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x50>
  406ffd:	83 7d d4 01          	cmpl   $0x1,-0x2c(%rbp)
  407001:	0f 9e c0             	setle  %al
  407004:	0f b6 c0             	movzbl %al,%eax
  407007:	48 85 c0             	test   %rax,%rax
  40700a:	75 0f                	jne    40701b <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x3e>
  40700c:	83 7d d4 24          	cmpl   $0x24,-0x2c(%rbp)
  407010:	0f 9f c0             	setg   %al
  407013:	0f b6 c0             	movzbl %al,%eax
  407016:	48 85 c0             	test   %rax,%rax
  407019:	74 07                	je     407022 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x45>
  40701b:	b8 01 00 00 00       	mov    $0x1,%eax
  407020:	eb 05                	jmp    407027 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x4a>
  407022:	b8 00 00 00 00       	mov    $0x0,%eax
  407027:	0f b6 c0             	movzbl %al,%eax
  40702a:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  40702d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407031:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  407035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407039:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40703d:	75 20                	jne    40705f <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  40703f:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  407043:	4c 89 ca             	mov    %r9,%rdx
  407046:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  40704d:	ff ff ff
  407050:	48 21 d0             	and    %rdx,%rax
  407053:	48 83 c8 4b          	or     $0x4b,%rax
  407057:	49 89 c1             	mov    %rax,%r9
  40705a:	e9 f9 00 00 00       	jmp    407158 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
      if (__value == 0)
  40705f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  407064:	75 2a                	jne    407090 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0xb3>
	  *__first = '0';
  407066:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40706a:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  40706d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407071:	48 83 c0 01          	add    $0x1,%rax
  407075:	49 89 c0             	mov    %rax,%r8
  407078:	4c 89 ca             	mov    %r9,%rdx
  40707b:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  407082:	ff ff ff
  407085:	48 21 d0             	and    %rdx,%rax
  407088:	49 89 c1             	mov    %rax,%r9
  40708b:	e9 c8 00 00 00       	jmp    407158 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
      switch (__base)
  407090:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  407094:	74 28                	je     4070be <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0xe1>
  407096:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  40709a:	0f 8f 9a 00 00 00    	jg     40713a <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
  4070a0:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  4070a4:	74 37                	je     4070dd <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x100>
  4070a6:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  4070aa:	0f 8f 8a 00 00 00    	jg     40713a <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
  4070b0:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
  4070b4:	74 65                	je     40711b <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x13e>
  4070b6:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  4070ba:	74 40                	je     4070fc <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x11f>
  4070bc:	eb 7c                	jmp    40713a <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x15d>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  4070be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4070c2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4070c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4070ca:	48 89 ce             	mov    %rcx,%rsi
  4070cd:	48 89 c7             	mov    %rax,%rdi
  4070d0:	e8 15 21 00 00       	call   4091ea <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>
  4070d5:	49 89 c0             	mov    %rax,%r8
  4070d8:	49 89 d1             	mov    %rdx,%r9
  4070db:	eb 7b                	jmp    407158 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  4070dd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4070e1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4070e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4070e9:	48 89 ce             	mov    %rcx,%rsi
  4070ec:	48 89 c7             	mov    %rax,%rdi
  4070ef:	e8 5d 22 00 00       	call   409351 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>
  4070f4:	49 89 c0             	mov    %rax,%r8
  4070f7:	49 89 d1             	mov    %rdx,%r9
  4070fa:	eb 5c                	jmp    407158 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  4070fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407100:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407108:	48 89 ce             	mov    %rcx,%rsi
  40710b:	48 89 c7             	mov    %rax,%rdi
  40710e:	e8 cf 22 00 00       	call   4093e2 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>
  407113:	49 89 c0             	mov    %rax,%r8
  407116:	49 89 d1             	mov    %rdx,%r9
  407119:	eb 3d                	jmp    407158 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  40711b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40711f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407127:	48 89 ce             	mov    %rcx,%rsi
  40712a:	48 89 c7             	mov    %rax,%rdi
  40712d:	e8 f0 23 00 00       	call   409522 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>
  407132:	49 89 c0             	mov    %rax,%r8
  407135:	49 89 d1             	mov    %rdx,%r9
  407138:	eb 1e                	jmp    407158 <_ZSt12__to_chars_iImESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  40713a:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  40713d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407141:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  407145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407149:	48 89 c7             	mov    %rax,%rdi
  40714c:	e8 85 24 00 00       	call   4095d6 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>
  407151:	49 89 c0             	mov    %rax,%r8
  407154:	49 89 d1             	mov    %rdx,%r9
  407157:	90                   	nop
    }
  407158:	4c 89 c0             	mov    %r8,%rax
  40715b:	4c 89 ca             	mov    %r9,%rdx
  40715e:	c9                   	leave
  40715f:	c3                   	ret

0000000000407160 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  407160:	55                   	push   %rbp
  407161:	48 89 e5             	mov    %rsp,%rbp
  407164:	48 83 ec 30          	sub    $0x30,%rsp
  407168:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40716c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407170:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  407174:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  407177:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  40717c:	84 c0                	test   %al,%al
  40717e:	74 30                	je     4071b0 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x50>
  407180:	83 7d d4 01          	cmpl   $0x1,-0x2c(%rbp)
  407184:	0f 9e c0             	setle  %al
  407187:	0f b6 c0             	movzbl %al,%eax
  40718a:	48 85 c0             	test   %rax,%rax
  40718d:	75 0f                	jne    40719e <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x3e>
  40718f:	83 7d d4 24          	cmpl   $0x24,-0x2c(%rbp)
  407193:	0f 9f c0             	setg   %al
  407196:	0f b6 c0             	movzbl %al,%eax
  407199:	48 85 c0             	test   %rax,%rax
  40719c:	74 07                	je     4071a5 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x45>
  40719e:	b8 01 00 00 00       	mov    $0x1,%eax
  4071a3:	eb 05                	jmp    4071aa <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x4a>
  4071a5:	b8 00 00 00 00       	mov    $0x0,%eax
  4071aa:	0f b6 c0             	movzbl %al,%eax
  4071ad:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  4071b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4071b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  4071b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4071bc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4071c0:	75 20                	jne    4071e2 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x82>
	return { __last, errc::value_too_large };
  4071c2:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  4071c6:	4c 89 ca             	mov    %r9,%rdx
  4071c9:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  4071d0:	ff ff ff
  4071d3:	48 21 d0             	and    %rdx,%rax
  4071d6:	48 83 c8 4b          	or     $0x4b,%rax
  4071da:	49 89 c1             	mov    %rax,%r9
  4071dd:	e9 f9 00 00 00       	jmp    4072db <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
      if (__value == 0)
  4071e2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4071e7:	75 2a                	jne    407213 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0xb3>
	  *__first = '0';
  4071e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4071ed:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  4071f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4071f4:	48 83 c0 01          	add    $0x1,%rax
  4071f8:	49 89 c0             	mov    %rax,%r8
  4071fb:	4c 89 ca             	mov    %r9,%rdx
  4071fe:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  407205:	ff ff ff
  407208:	48 21 d0             	and    %rdx,%rax
  40720b:	49 89 c1             	mov    %rax,%r9
  40720e:	e9 c8 00 00 00       	jmp    4072db <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
      switch (__base)
  407213:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  407217:	74 28                	je     407241 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0xe1>
  407219:	83 7d d4 10          	cmpl   $0x10,-0x2c(%rbp)
  40721d:	0f 8f 9a 00 00 00    	jg     4072bd <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
  407223:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  407227:	74 37                	je     407260 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x100>
  407229:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
  40722d:	0f 8f 8a 00 00 00    	jg     4072bd <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
  407233:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
  407237:	74 65                	je     40729e <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x13e>
  407239:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  40723d:	74 40                	je     40727f <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x11f>
  40723f:	eb 7c                	jmp    4072bd <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x15d>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  407241:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407245:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407249:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40724d:	48 89 ce             	mov    %rcx,%rsi
  407250:	48 89 c7             	mov    %rax,%rdi
  407253:	e8 92 1f 00 00       	call   4091ea <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>
  407258:	49 89 c0             	mov    %rax,%r8
  40725b:	49 89 d1             	mov    %rdx,%r9
  40725e:	eb 7b                	jmp    4072db <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  407260:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407264:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407268:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40726c:	48 89 ce             	mov    %rcx,%rsi
  40726f:	48 89 c7             	mov    %rax,%rdi
  407272:	e8 da 20 00 00       	call   409351 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>
  407277:	49 89 c0             	mov    %rax,%r8
  40727a:	49 89 d1             	mov    %rdx,%r9
  40727d:	eb 5c                	jmp    4072db <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  40727f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407283:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  407287:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40728b:	48 89 ce             	mov    %rcx,%rsi
  40728e:	48 89 c7             	mov    %rax,%rdi
  407291:	e8 4c 21 00 00       	call   4093e2 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>
  407296:	49 89 c0             	mov    %rax,%r8
  407299:	49 89 d1             	mov    %rdx,%r9
  40729c:	eb 3d                	jmp    4072db <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  40729e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4072a2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4072a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4072aa:	48 89 ce             	mov    %rcx,%rsi
  4072ad:	48 89 c7             	mov    %rax,%rdi
  4072b0:	e8 6d 22 00 00       	call   409522 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>
  4072b5:	49 89 c0             	mov    %rax,%r8
  4072b8:	49 89 d1             	mov    %rdx,%r9
  4072bb:	eb 1e                	jmp    4072db <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i+0x17b>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  4072bd:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  4072c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4072c4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4072c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4072cc:	48 89 c7             	mov    %rax,%rdi
  4072cf:	e8 02 23 00 00       	call   4095d6 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>
  4072d4:	49 89 c0             	mov    %rax,%r8
  4072d7:	49 89 d1             	mov    %rdx,%r9
  4072da:	90                   	nop
    }
  4072db:	4c 89 c0             	mov    %r8,%rax
  4072de:	4c 89 ca             	mov    %r9,%rdx
  4072e1:	c9                   	leave
  4072e2:	c3                   	ret

00000000004072e3 <_ZSt13__countl_zeroIjEiT_>:
    __countl_zero(_Tp __x) noexcept
  4072e3:	55                   	push   %rbp
  4072e4:	48 89 e5             	mov    %rsp,%rbp
  4072e7:	89 7d dc             	mov    %edi,-0x24(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  4072ea:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
      if (__x == 0)
  4072f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  4072f5:	75 07                	jne    4072fe <_ZSt13__countl_zeroIjEiT_+0x1b>
        return _Nd;
  4072f7:	b8 20 00 00 00       	mov    $0x20,%eax
  4072fc:	eb 24                	jmp    407322 <_ZSt13__countl_zeroIjEiT_+0x3f>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  4072fe:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  407305:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  40730c:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  constexpr int __diff = _Nd_u - _Nd;
  407313:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	  return __builtin_clz(__x) - __diff;
  40731a:	0f bd 45 dc          	bsr    -0x24(%rbp),%eax
  40731e:	83 f0 1f             	xor    $0x1f,%eax
  407321:	90                   	nop
    }
  407322:	5d                   	pop    %rbp
  407323:	c3                   	ret

0000000000407324 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cpp_constexpr_dynamic_alloc // >= C++20
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
  407324:	55                   	push   %rbp
  407325:	48 89 e5             	mov    %rsp,%rbp
  407328:	53                   	push   %rbx
  407329:	48 83 ec 18          	sub    $0x18,%rsp
  40732d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407331:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  407335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407339:	48 89 c6             	mov    %rax,%rsi
  40733c:	bf 01 00 00 00       	mov    $0x1,%edi
  407341:	e8 65 d3 ff ff       	call   4046ab <_ZnwmPv>
  407346:	48 89 c3             	mov    %rax,%rbx
  407349:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40734d:	48 89 c7             	mov    %rax,%rdi
  407350:	e8 c2 23 00 00       	call   409717 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
  407355:	0f b6 00             	movzbl (%rax),%eax
  407358:	88 03                	mov    %al,(%rbx)
  40735a:	48 89 d8             	mov    %rbx,%rax
  40735d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  407361:	c9                   	leave
  407362:	c3                   	ret
  407363:	90                   	nop

0000000000407364 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>:
    char_traits<_CharT>::
  407364:	55                   	push   %rbp
  407365:	48 89 e5             	mov    %rsp,%rbp
  407368:	48 83 ec 20          	sub    $0x20,%rsp
  40736c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  407370:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  407374:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n == 0)
  407378:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40737d:	75 06                	jne    407385 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x21>
	return __s1;
  40737f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407383:	eb 41                	jmp    4073c6 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x62>
  407385:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  40738a:	84 c0                	test   %al,%al
  40738c:	74 1d                	je     4073ab <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x47>
	    copy(__s1, __s2, __n);
  40738e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407392:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  407396:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40739a:	48 89 ce             	mov    %rcx,%rsi
  40739d:	48 89 c7             	mov    %rax,%rdi
  4073a0:	e8 23 00 00 00       	call   4073c8 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  return __s1;
  4073a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073a9:	eb 1b                	jmp    4073c6 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x62>
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
  4073ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4073af:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4073b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4073b7:	48 89 ce             	mov    %rcx,%rsi
  4073ba:	48 89 c7             	mov    %rax,%rdi
  4073bd:	e8 fe cf ff ff       	call   4043c0 <memmove@plt>
      return __s1;
  4073c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4073c6:	c9                   	leave
  4073c7:	c3                   	ret

00000000004073c8 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>:
    char_traits<_CharT>::
  4073c8:	55                   	push   %rbp
  4073c9:	48 89 e5             	mov    %rsp,%rbp
  4073cc:	48 83 ec 30          	sub    $0x30,%rsp
  4073d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4073d4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4073d8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__n == 0)
  4073dc:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  4073e1:	75 06                	jne    4073e9 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x21>
	return __s1;
  4073e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4073e7:	eb 6a                	jmp    407453 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x8b>
  4073e9:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  4073ee:	84 c0                	test   %al,%al
  4073f0:	74 40                	je     407432 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x6a>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  4073f2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4073f9:	00
  4073fa:	eb 26                	jmp    407422 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x5a>
	    std::construct_at(__s1 + __i, __s2[__i]);
  4073fc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  407400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407404:	48 01 c2             	add    %rax,%rdx
  407407:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40740b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40740f:	48 01 c8             	add    %rcx,%rax
  407412:	48 89 d6             	mov    %rdx,%rsi
  407415:	48 89 c7             	mov    %rax,%rdi
  407418:	e8 07 ff ff ff       	call   407324 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  40741d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  407422:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407426:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40742a:	72 d0                	jb     4073fc <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x34>
	  return __s1;
  40742c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407430:	eb 21                	jmp    407453 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x8b>
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
  407432:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407436:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40743a:	48 89 d1             	mov    %rdx,%rcx
  40743d:	48 89 c6             	mov    %rax,%rsi
  407440:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407444:	48 89 c2             	mov    %rax,%rdx
  407447:	48 89 cf             	mov    %rcx,%rdi
  40744a:	e8 e1 cd ff ff       	call   404230 <memcpy@plt>
      return __s1;
  40744f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  407453:	c9                   	leave
  407454:	c3                   	ret
  407455:	90                   	nop

0000000000407456 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc>:
    char_traits<_CharT>::
  407456:	55                   	push   %rbp
  407457:	48 89 e5             	mov    %rsp,%rbp
  40745a:	48 83 ec 30          	sub    $0x30,%rsp
  40745e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407462:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  407466:	89 d0                	mov    %edx,%eax
  407468:	88 45 dc             	mov    %al,-0x24(%rbp)
  40746b:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated())
  407470:	84 c0                	test   %al,%al
  407472:	74 39                	je     4074ad <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x57>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  407474:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  40747b:	00
  40747c:	eb 1f                	jmp    40749d <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x47>
	    std::construct_at(__s + __i, __a);
  40747e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407482:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407486:	48 01 c2             	add    %rax,%rdx
  407489:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40748d:	48 89 c6             	mov    %rax,%rsi
  407490:	48 89 d7             	mov    %rdx,%rdi
  407493:	e8 8d 22 00 00       	call   409725 <_ZSt12construct_atIcJRcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
  407498:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  40749d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074a1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  4074a5:	72 d7                	jb     40747e <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x28>
	  return __s;
  4074a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4074ab:	eb 2b                	jmp    4074d8 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x82>
	  if (__n)
  4074ad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4074b2:	74 20                	je     4074d4 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcmc+0x7e>
	      __builtin_memcpy(&__c, __builtin_addressof(__a), 1);
  4074b4:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  4074b8:	88 45 f7             	mov    %al,-0x9(%rbp)
	      __builtin_memset(__s, __c, __n);
  4074bb:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  4074bf:	0f b6 c8             	movzbl %al,%ecx
  4074c2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4074c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4074ca:	89 ce                	mov    %ecx,%esi
  4074cc:	48 89 c7             	mov    %rax,%rdi
  4074cf:	e8 6c cc ff ff       	call   404140 <memset@plt>
      return __s;
  4074d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  4074d8:	c9                   	leave
  4074d9:	c3                   	ret

00000000004074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
	return *(this->_M_str + this->_M_len - 1);
      }

      [[nodiscard]]
      constexpr const_pointer
      data() const noexcept
  4074da:	55                   	push   %rbp
  4074db:	48 89 e5             	mov    %rsp,%rbp
  4074de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
  4074e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  4074ea:	5d                   	pop    %rbp
  4074eb:	c3                   	ret

00000000004074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>:
      basic_string_view(const _CharT* __str, size_type __len) noexcept
  4074ec:	55                   	push   %rbp
  4074ed:	48 89 e5             	mov    %rsp,%rbp
  4074f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4074f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4074f8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : _M_len{__len}, _M_str{__str}
  4074fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407500:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407504:	48 89 10             	mov    %rdx,(%rax)
  407507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40750b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40750f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  407513:	90                   	nop
  407514:	5d                   	pop    %rbp
  407515:	c3                   	ret

0000000000407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
  407516:	55                   	push   %rbp
  407517:	48 89 e5             	mov    %rsp,%rbp
  40751a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus._M_p; }
  40751e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407522:	48 8b 00             	mov    (%rax),%rax
  407525:	5d                   	pop    %rbp
  407526:	c3                   	ret
  407527:	90                   	nop

0000000000407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>:
      _M_set_length(size_type __n)
  407528:	55                   	push   %rbp
  407529:	48 89 e5             	mov    %rsp,%rbp
  40752c:	48 83 ec 20          	sub    $0x20,%rsp
  407530:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407534:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_length(__n);
  407538:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40753c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407540:	48 89 d6             	mov    %rdx,%rsi
  407543:	48 89 c7             	mov    %rax,%rdi
  407546:	e8 19 22 00 00       	call   409764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	traits_type::assign(_M_data()[__n], _CharT());
  40754b:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  40754f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407553:	48 89 c7             	mov    %rax,%rdi
  407556:	e8 bb ff ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40755b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40755f:	48 01 c2             	add    %rax,%rdx
  407562:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  407566:	48 89 c6             	mov    %rax,%rsi
  407569:	48 89 d7             	mov    %rdx,%rdi
  40756c:	e8 b1 d1 ff ff       	call   404722 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  407571:	90                   	nop
  407572:	c9                   	leave
  407573:	c3                   	ret

0000000000407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
      ~basic_string()
  407574:	55                   	push   %rbp
  407575:	48 89 e5             	mov    %rsp,%rbp
  407578:	48 83 ec 10          	sub    $0x10,%rsp
  40757c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_dispose(); }
  407580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407584:	48 89 c7             	mov    %rax,%rdi
  407587:	e8 f4 21 00 00       	call   409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  40758c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407590:	48 89 c7             	mov    %rax,%rdi
  407593:	e8 7a d5 ff ff       	call   404b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  407598:	90                   	nop
  407599:	c9                   	leave
  40759a:	c3                   	ret

000000000040759b <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    _GLIBCXX23_CONSTEXPR void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  40759b:	55                   	push   %rbp
  40759c:	48 89 e5             	mov    %rsp,%rbp
  40759f:	48 83 ec 78          	sub    $0x78,%rsp
  4075a3:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  4075aa:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%rbp)
  4075b0:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      constexpr char __digits[201] =
  4075b6:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  4075bd:	32 30 33
  4075c0:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  4075c7:	36 30 37
  4075ca:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4075d1:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  4075d8:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  4075df:	30 31 31
  4075e2:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  4075e9:	34 31 35
  4075ec:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4075f3:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  4075fa:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  407601:	38 31 39
  407604:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  40760b:	32 32 33
  40760e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407615:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  40761c:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  407623:	36 32 37
  407626:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  40762d:	30 33 31
  407630:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407637:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  40763e:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  407645:	34 33 35
  407648:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  40764f:	38 33 39
  407652:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407659:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  407660:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  407667:	32 34 33
  40766a:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  407671:	36 34 37
  407674:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  40767b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  407682:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  407689:	30 35 31
  40768c:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  407693:	34 35 35
  407696:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40769a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40769e:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  4076a5:	38 35 39
  4076a8:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  4076af:	32 36 33
  4076b2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4076b6:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  4076ba:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  4076c1:	36 36 37
  4076c4:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  4076cb:	30 37 31
  4076ce:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4076d2:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4076d6:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  4076dd:	34 37 35
  4076e0:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  4076e7:	38 37 39
  4076ea:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4076ee:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4076f2:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  4076f9:	32 38 33
  4076fc:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  407703:	36 38 37
  407706:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40770a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40770e:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  407715:	30 39 31
  407718:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  40771f:	34 39 35
  407722:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  407726:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40772a:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  407731:	39 35 39
  407734:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  40773b:	39 39 00
  40773e:	48 89 45 d9          	mov    %rax,-0x27(%rbp)
  407742:	48 89 55 e1          	mov    %rdx,-0x1f(%rbp)
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
  407746:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  40774c:	83 e8 01             	sub    $0x1,%eax
  40774f:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  407752:	e9 80 00 00 00       	jmp    4077d7 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x23c>
	{
	  auto const __num = (__val % 100) * 2;
  407757:	8b 8d 10 ff ff ff    	mov    -0xf0(%rbp),%ecx
  40775d:	89 c8                	mov    %ecx,%eax
  40775f:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
  407766:	48 c1 e8 20          	shr    $0x20,%rax
  40776a:	c1 e8 05             	shr    $0x5,%eax
  40776d:	6b d0 64             	imul   $0x64,%eax,%edx
  407770:	89 c8                	mov    %ecx,%eax
  407772:	29 d0                	sub    %edx,%eax
  407774:	01 c0                	add    %eax,%eax
  407776:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val /= 100;
  407779:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  40777f:	89 c0                	mov    %eax,%eax
  407781:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
  407788:	48 c1 e8 20          	shr    $0x20,%rax
  40778c:	c1 e8 05             	shr    $0x5,%eax
  40778f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407795:	8b 45 f4             	mov    -0xc(%rbp),%eax
  407798:	8d 48 01             	lea    0x1(%rax),%ecx
  40779b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40779e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4077a5:	48 01 c2             	add    %rax,%rdx
  4077a8:	89 c8                	mov    %ecx,%eax
  4077aa:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  4077b1:	ff
  4077b2:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  4077b4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4077b7:	83 e8 01             	sub    $0x1,%eax
  4077ba:	89 c2                	mov    %eax,%edx
  4077bc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4077c3:	48 01 c2             	add    %rax,%rdx
  4077c6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4077c9:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  4077d0:	ff
  4077d1:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  4077d3:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  4077d7:	83 bd 10 ff ff ff 63 	cmpl   $0x63,-0xf0(%rbp)
  4077de:	0f 87 73 ff ff ff    	ja     407757 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x1bc>
	}
      if (__val >= 10)
  4077e4:	83 bd 10 ff ff ff 09 	cmpl   $0x9,-0xf0(%rbp)
  4077eb:	76 3e                	jbe    40782b <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x290>
	{
	  auto const __num = __val * 2;
  4077ed:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  4077f3:	01 c0                	add    %eax,%eax
  4077f5:	89 45 f8             	mov    %eax,-0x8(%rbp)
	  __first[1] = __digits[__num + 1];
  4077f8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4077fb:	8d 48 01             	lea    0x1(%rax),%ecx
  4077fe:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  407805:	48 8d 50 01          	lea    0x1(%rax),%rdx
  407809:	89 c8                	mov    %ecx,%eax
  40780b:	0f b6 84 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%eax
  407812:	ff
  407813:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  407815:	8b 45 f8             	mov    -0x8(%rbp),%eax
  407818:	0f b6 94 05 20 ff ff 	movzbl -0xe0(%rbp,%rax,1),%edx
  40781f:	ff
  407820:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  407827:	88 10                	mov    %dl,(%rax)
	}
      else
	__first[0] = '0' + __val;
    }
  407829:	eb 14                	jmp    40783f <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x2a4>
	__first[0] = '0' + __val;
  40782b:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  407831:	83 c0 30             	add    $0x30,%eax
  407834:	89 c2                	mov    %eax,%edx
  407836:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40783d:	88 10                	mov    %dl,(%rax)
    }
  40783f:	90                   	nop
  407840:	c9                   	leave
  407841:	c3                   	ret

0000000000407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
  407842:	55                   	push   %rbp
  407843:	48 89 e5             	mov    %rsp,%rbp
  407846:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  40784a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40784e:	5d                   	pop    %rbp
  40784f:	c3                   	ret

0000000000407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
  407850:	55                   	push   %rbp
  407851:	48 89 e5             	mov    %rsp,%rbp
  407854:	53                   	push   %rbx
  407855:	48 83 ec 18          	sub    $0x18,%rsp
  407859:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (_M_data() == _M_local_data())
  40785d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407861:	48 89 c7             	mov    %rax,%rdi
  407864:	e8 ad fc ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  407869:	48 89 c3             	mov    %rax,%rbx
  40786c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407870:	48 89 c7             	mov    %rax,%rdi
  407873:	e8 42 1f 00 00       	call   4097ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  407878:	48 39 c3             	cmp    %rax,%rbx
  40787b:	0f 94 c0             	sete   %al
  40787e:	84 c0                	test   %al,%al
  407880:	74 13                	je     407895 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x45>
	    if (_M_string_length > _S_local_capacity)
  407882:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407886:	48 8b 40 08          	mov    0x8(%rax),%rax
  40788a:	48 83 f8 0f          	cmp    $0xf,%rax
	    return true;
  40788e:	b8 01 00 00 00       	mov    $0x1,%eax
  407893:	eb 05                	jmp    40789a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x4a>
	return false;
  407895:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40789a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40789e:	c9                   	leave
  40789f:	c3                   	ret

00000000004078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      length() const _GLIBCXX_NOEXCEPT
  4078a0:	55                   	push   %rbp
  4078a1:	48 89 e5             	mov    %rsp,%rbp
  4078a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
  4078a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4078ac:	48 8b 40 08          	mov    0x8(%rax),%rax
  4078b0:	5d                   	pop    %rbp
  4078b1:	c3                   	ret

00000000004078b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
      basic_string(basic_string&& __str) noexcept
  4078b2:	55                   	push   %rbp
  4078b3:	48 89 e5             	mov    %rsp,%rbp
  4078b6:	41 54                	push   %r12
  4078b8:	53                   	push   %rbx
  4078b9:	48 83 ec 40          	sub    $0x40,%rsp
  4078bd:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4078c1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
  4078c5:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  4078c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4078cd:	48 89 c7             	mov    %rax,%rdi
  4078d0:	e8 6d ff ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4078d5:	48 89 c7             	mov    %rax,%rdi
  4078d8:	e8 27 d2 ff ff       	call   404b04 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
  4078dd:	49 89 c4             	mov    %rax,%r12
  4078e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4078e4:	48 89 c7             	mov    %rax,%rdi
  4078e7:	e8 6c d1 ff ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4078ec:	4c 89 e2             	mov    %r12,%rdx
  4078ef:	48 89 c6             	mov    %rax,%rsi
  4078f2:	48 89 df             	mov    %rbx,%rdi
  4078f5:	e8 be d1 ff ff       	call   404ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
	if (__str._M_is_local())
  4078fa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4078fe:	48 89 c7             	mov    %rax,%rdi
  407901:	e8 4a ff ff ff       	call   407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  407906:	84 c0                	test   %al,%al
  407908:	74 67                	je     407971 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xbf>
  40790a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40790e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
  407912:	e8 65 cd ff ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  407917:	84 c0                	test   %al,%al
  407919:	74 28                	je     407943 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x91>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  40791b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  407922:	00
  407923:	eb 17                	jmp    40793c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x8a>
	    _M_local_buf[__i] = _CharT();
  407925:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407929:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40792d:	48 01 d0             	add    %rdx,%rax
  407930:	48 83 c0 10          	add    $0x10,%rax
  407934:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  407937:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40793c:	48 83 7d e0 0f       	cmpq   $0xf,-0x20(%rbp)
  407941:	76 e2                	jbe    407925 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x73>
      }
  407943:	90                   	nop
			      __str.length() + 1);
  407944:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407948:	48 89 c7             	mov    %rax,%rdi
  40794b:	e8 50 ff ff ff       	call   4078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
  407950:	48 8d 50 01          	lea    0x1(%rax),%rdx
  407954:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407958:	48 8d 48 10          	lea    0x10(%rax),%rcx
  40795c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407960:	48 83 c0 10          	add    $0x10,%rax
  407964:	48 89 ce             	mov    %rcx,%rsi
  407967:	48 89 c7             	mov    %rax,%rdi
  40796a:	e8 e7 cf ff ff       	call   404956 <_ZNSt11char_traitsIcE4copyEPcPKcm>
  40796f:	eb 35                	jmp    4079a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xf4>
	    _M_data(__str._M_data());
  407971:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407975:	48 89 c7             	mov    %rax,%rdi
  407978:	e8 99 fb ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40797d:	48 89 c2             	mov    %rax,%rdx
  407980:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407984:	48 89 d6             	mov    %rdx,%rsi
  407987:	48 89 c7             	mov    %rax,%rdi
  40798a:	e8 49 1e 00 00       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__str._M_allocated_capacity);
  40798f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407993:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407997:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40799b:	48 89 d6             	mov    %rdx,%rsi
  40799e:	48 89 c7             	mov    %rax,%rdi
  4079a1:	e8 4c 1e 00 00       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	_M_length(__str.length());
  4079a6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4079aa:	48 89 c7             	mov    %rax,%rdi
  4079ad:	e8 ee fe ff ff       	call   4078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  4079b2:	48 89 c2             	mov    %rax,%rdx
  4079b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4079b9:	48 89 d6             	mov    %rdx,%rsi
  4079bc:	48 89 c7             	mov    %rax,%rdi
  4079bf:	e8 a0 1d 00 00       	call   409764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
  4079c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4079c8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4079cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4079d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (std::is_constant_evaluated())
  4079d4:	e8 a3 cc ff ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  4079d9:	84 c0                	test   %al,%al
  4079db:	74 28                	je     407a05 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x153>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4079dd:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  4079e4:	00
  4079e5:	eb 17                	jmp    4079fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x14c>
	    _M_local_buf[__i] = _CharT();
  4079e7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4079eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4079ef:	48 01 d0             	add    %rdx,%rax
  4079f2:	48 83 c0 10          	add    $0x10,%rax
  4079f6:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4079f9:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  4079fe:	48 83 7d c8 0f       	cmpq   $0xf,-0x38(%rbp)
  407a03:	76 e2                	jbe    4079e7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x135>
      }
  407a05:	90                   	nop
	return _M_local_data();
  407a06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407a0a:	48 89 c7             	mov    %rax,%rdi
  407a0d:	e8 46 d0 ff ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  407a12:	48 89 c2             	mov    %rax,%rdx
  407a15:	90                   	nop
	__str._M_data(__str._M_use_local_data());
  407a16:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407a1a:	48 89 d6             	mov    %rdx,%rsi
  407a1d:	48 89 c7             	mov    %rax,%rdi
  407a20:	e8 b3 1d 00 00       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	__str._M_set_length(0);
  407a25:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  407a29:	be 00 00 00 00       	mov    $0x0,%esi
  407a2e:	48 89 c7             	mov    %rax,%rdi
  407a31:	e8 f2 fa ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  407a36:	90                   	nop
  407a37:	48 83 c4 40          	add    $0x40,%rsp
  407a3b:	5b                   	pop    %rbx
  407a3c:	41 5c                	pop    %r12
  407a3e:	5d                   	pop    %rbp
  407a3f:	c3                   	ret

0000000000407a40 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  407a40:	55                   	push   %rbp
  407a41:	48 89 e5             	mov    %rsp,%rbp
  407a44:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  407a4b:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  407a52:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  407a58:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
      constexpr char __digits[201] =
  407a5f:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  407a66:	32 30 33
  407a69:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  407a70:	36 30 37
  407a73:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  407a7a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  407a81:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  407a88:	30 31 31
  407a8b:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  407a92:	34 31 35
  407a95:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407a9c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  407aa3:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  407aaa:	38 31 39
  407aad:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  407ab4:	32 32 33
  407ab7:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407abe:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  407ac5:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  407acc:	36 32 37
  407acf:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  407ad6:	30 33 31
  407ad9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407ae0:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  407ae7:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  407aee:	34 33 35
  407af1:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  407af8:	38 33 39
  407afb:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407b02:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  407b09:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  407b10:	32 34 33
  407b13:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  407b1a:	36 34 37
  407b1d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407b24:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  407b2b:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  407b32:	30 35 31
  407b35:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  407b3c:	34 35 35
  407b3f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407b46:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  407b4d:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  407b54:	38 35 39
  407b57:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  407b5e:	32 36 33
  407b61:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407b65:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407b69:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  407b70:	36 36 37
  407b73:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  407b7a:	30 37 31
  407b7d:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407b81:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407b85:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  407b8c:	34 37 35
  407b8f:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  407b96:	38 37 39
  407b99:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407b9d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407ba1:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  407ba8:	32 38 33
  407bab:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  407bb2:	36 38 37
  407bb5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407bb9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  407bbd:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  407bc4:	30 39 31
  407bc7:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  407bce:	34 39 35
  407bd1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407bd5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  407bd9:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  407be0:	39 35 39
  407be3:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  407bea:	39 39 00
  407bed:	48 89 45 c9          	mov    %rax,-0x37(%rbp)
  407bf1:	48 89 55 d1          	mov    %rdx,-0x2f(%rbp)
      unsigned __pos = __len - 1;
  407bf5:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  407bfb:	83 e8 01             	sub    $0x1,%eax
  407bfe:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  407c01:	e9 b4 00 00 00       	jmp    407cba <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x27a>
	  auto const __num = (__val % 100) * 2;
  407c06:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  407c0d:	48 89 c8             	mov    %rcx,%rax
  407c10:	48 c1 e8 02          	shr    $0x2,%rax
  407c14:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407c1b:	c2 f5 28
  407c1e:	48 f7 e2             	mul    %rdx
  407c21:	48 c1 ea 02          	shr    $0x2,%rdx
  407c25:	48 89 d0             	mov    %rdx,%rax
  407c28:	48 c1 e0 02          	shl    $0x2,%rax
  407c2c:	48 01 d0             	add    %rdx,%rax
  407c2f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  407c36:	00
  407c37:	48 01 d0             	add    %rdx,%rax
  407c3a:	48 c1 e0 02          	shl    $0x2,%rax
  407c3e:	48 29 c1             	sub    %rax,%rcx
  407c41:	48 89 ca             	mov    %rcx,%rdx
  407c44:	48 8d 04 12          	lea    (%rdx,%rdx,1),%rax
  407c48:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val /= 100;
  407c4c:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407c53:	48 c1 e8 02          	shr    $0x2,%rax
  407c57:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407c5e:	c2 f5 28
  407c61:	48 f7 e2             	mul    %rdx
  407c64:	48 89 d0             	mov    %rdx,%rax
  407c67:	48 c1 e8 02          	shr    $0x2,%rax
  407c6b:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407c72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407c76:	48 83 c0 01          	add    $0x1,%rax
  407c7a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  407c7d:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407c84:	48 01 ca             	add    %rcx,%rdx
  407c87:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407c8e:	ff
  407c8f:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  407c91:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407c94:	83 e8 01             	sub    $0x1,%eax
  407c97:	89 c2                	mov    %eax,%edx
  407c99:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407ca0:	48 01 c2             	add    %rax,%rdx
  407ca3:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
  407caa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407cae:	48 01 c8             	add    %rcx,%rax
  407cb1:	0f b6 00             	movzbl (%rax),%eax
  407cb4:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  407cb6:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  407cba:	48 83 bd f8 fe ff ff 	cmpq   $0x63,-0x108(%rbp)
  407cc1:	63
  407cc2:	0f 87 3e ff ff ff    	ja     407c06 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x1c6>
      if (__val >= 10)
  407cc8:	48 83 bd f8 fe ff ff 	cmpq   $0x9,-0x108(%rbp)
  407ccf:	09
  407cd0:	76 47                	jbe    407d19 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x2d9>
	  auto const __num = __val * 2;
  407cd2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407cd9:	48 01 c0             	add    %rax,%rax
  407cdc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __first[1] = __digits[__num + 1];
  407ce0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ce4:	48 83 c0 01          	add    $0x1,%rax
  407ce8:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407cef:	48 83 c2 01          	add    $0x1,%rdx
  407cf3:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407cfa:	ff
  407cfb:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  407cfd:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  407d04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407d08:	48 01 d0             	add    %rdx,%rax
  407d0b:	0f b6 10             	movzbl (%rax),%edx
  407d0e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407d15:	88 10                	mov    %dl,(%rax)
    }
  407d17:	eb 15                	jmp    407d2e <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x2ee>
	__first[0] = '0' + __val;
  407d19:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407d20:	83 c0 30             	add    $0x30,%eax
  407d23:	89 c2                	mov    %eax,%edx
  407d25:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407d2c:	88 10                	mov    %dl,(%rax)
    }
  407d2e:	90                   	nop
  407d2f:	c9                   	leave
  407d30:	c3                   	ret

0000000000407d31 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  407d31:	55                   	push   %rbp
  407d32:	48 89 e5             	mov    %rsp,%rbp
  407d35:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  407d3c:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  407d43:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  407d49:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
      constexpr char __digits[201] =
  407d50:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  407d57:	32 30 33
  407d5a:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  407d61:	36 30 37
  407d64:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  407d6b:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  407d72:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  407d79:	30 31 31
  407d7c:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  407d83:	34 31 35
  407d86:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  407d8d:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  407d94:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  407d9b:	38 31 39
  407d9e:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  407da5:	32 32 33
  407da8:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  407daf:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  407db6:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  407dbd:	36 32 37
  407dc0:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  407dc7:	30 33 31
  407dca:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  407dd1:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  407dd8:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  407ddf:	34 33 35
  407de2:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  407de9:	38 33 39
  407dec:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  407df3:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  407dfa:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  407e01:	32 34 33
  407e04:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  407e0b:	36 34 37
  407e0e:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  407e15:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  407e1c:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  407e23:	30 35 31
  407e26:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  407e2d:	34 35 35
  407e30:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  407e37:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  407e3e:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  407e45:	38 35 39
  407e48:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  407e4f:	32 36 33
  407e52:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  407e56:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  407e5a:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  407e61:	36 36 37
  407e64:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  407e6b:	30 37 31
  407e6e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  407e72:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  407e76:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  407e7d:	34 37 35
  407e80:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  407e87:	38 37 39
  407e8a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  407e8e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  407e92:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  407e99:	32 38 33
  407e9c:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  407ea3:	36 38 37
  407ea6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  407eaa:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  407eae:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  407eb5:	30 39 31
  407eb8:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  407ebf:	34 39 35
  407ec2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  407ec6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  407eca:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  407ed1:	39 35 39
  407ed4:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  407edb:	39 39 00
  407ede:	48 89 45 c9          	mov    %rax,-0x37(%rbp)
  407ee2:	48 89 55 d1          	mov    %rdx,-0x2f(%rbp)
      unsigned __pos = __len - 1;
  407ee6:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  407eec:	83 e8 01             	sub    $0x1,%eax
  407eef:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  407ef2:	e9 b4 00 00 00       	jmp    407fab <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x27a>
	  auto const __num = (__val % 100) * 2;
  407ef7:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  407efe:	48 89 c8             	mov    %rcx,%rax
  407f01:	48 c1 e8 02          	shr    $0x2,%rax
  407f05:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407f0c:	c2 f5 28
  407f0f:	48 f7 e2             	mul    %rdx
  407f12:	48 c1 ea 02          	shr    $0x2,%rdx
  407f16:	48 89 d0             	mov    %rdx,%rax
  407f19:	48 c1 e0 02          	shl    $0x2,%rax
  407f1d:	48 01 d0             	add    %rdx,%rax
  407f20:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  407f27:	00
  407f28:	48 01 d0             	add    %rdx,%rax
  407f2b:	48 c1 e0 02          	shl    $0x2,%rax
  407f2f:	48 29 c1             	sub    %rax,%rcx
  407f32:	48 89 ca             	mov    %rcx,%rdx
  407f35:	48 8d 04 12          	lea    (%rdx,%rdx,1),%rax
  407f39:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val /= 100;
  407f3d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407f44:	48 c1 e8 02          	shr    $0x2,%rax
  407f48:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
  407f4f:	c2 f5 28
  407f52:	48 f7 e2             	mul    %rdx
  407f55:	48 89 d0             	mov    %rdx,%rax
  407f58:	48 c1 e8 02          	shr    $0x2,%rax
  407f5c:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
	  __first[__pos] = __digits[__num + 1];
  407f63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f67:	48 83 c0 01          	add    $0x1,%rax
  407f6b:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  407f6e:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407f75:	48 01 ca             	add    %rcx,%rdx
  407f78:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407f7f:	ff
  407f80:	88 02                	mov    %al,(%rdx)
	  __first[__pos - 1] = __digits[__num];
  407f82:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407f85:	83 e8 01             	sub    $0x1,%eax
  407f88:	89 c2                	mov    %eax,%edx
  407f8a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  407f91:	48 01 c2             	add    %rax,%rdx
  407f94:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
  407f9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f9f:	48 01 c8             	add    %rcx,%rax
  407fa2:	0f b6 00             	movzbl (%rax),%eax
  407fa5:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  407fa7:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  407fab:	48 83 bd f8 fe ff ff 	cmpq   $0x63,-0x108(%rbp)
  407fb2:	63
  407fb3:	0f 87 3e ff ff ff    	ja     407ef7 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x1c6>
      if (__val >= 10)
  407fb9:	48 83 bd f8 fe ff ff 	cmpq   $0x9,-0x108(%rbp)
  407fc0:	09
  407fc1:	76 47                	jbe    40800a <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x2d9>
	  auto const __num = __val * 2;
  407fc3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  407fca:	48 01 c0             	add    %rax,%rax
  407fcd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __first[1] = __digits[__num + 1];
  407fd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407fd5:	48 83 c0 01          	add    $0x1,%rax
  407fd9:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  407fe0:	48 83 c2 01          	add    $0x1,%rdx
  407fe4:	0f b6 84 05 10 ff ff 	movzbl -0xf0(%rbp,%rax,1),%eax
  407feb:	ff
  407fec:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__num];
  407fee:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  407ff5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ff9:	48 01 d0             	add    %rdx,%rax
  407ffc:	0f b6 10             	movzbl (%rax),%edx
  407fff:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  408006:	88 10                	mov    %dl,(%rax)
    }
  408008:	eb 15                	jmp    40801f <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x2ee>
	__first[0] = '0' + __val;
  40800a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  408011:	83 c0 30             	add    $0x30,%eax
  408014:	89 c2                	mov    %eax,%edx
  408016:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40801d:	88 10                	mov    %dl,(%rax)
    }
  40801f:	90                   	nop
  408020:	c9                   	leave
  408021:	c3                   	ret

0000000000408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>:
      operator __sv_type() const noexcept
  408022:	55                   	push   %rbp
  408023:	48 89 e5             	mov    %rsp,%rbp
  408026:	53                   	push   %rbx
  408027:	48 83 ec 28          	sub    $0x28,%rsp
  40802b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return __sv_type(data(), size()); }
  40802f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408033:	48 89 c7             	mov    %rax,%rdi
  408036:	e8 55 cd ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40803b:	48 89 c3             	mov    %rax,%rbx
  40803e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408042:	48 89 c7             	mov    %rax,%rdi
  408045:	e8 c4 17 00 00       	call   40980e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  40804a:	48 89 c1             	mov    %rax,%rcx
  40804d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408051:	48 89 da             	mov    %rbx,%rdx
  408054:	48 89 ce             	mov    %rcx,%rsi
  408057:	48 89 c7             	mov    %rax,%rdi
  40805a:	e8 8d f4 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40805f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408063:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408067:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40806b:	c9                   	leave
  40806c:	c3                   	ret

000000000040806d <_ZSt11upper_boundIPKDiDiET_S2_S2_RKT0_>:
   *  @ingroup binary_search_algorithms
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  40806d:	55                   	push   %rbp
  40806e:	48 89 e5             	mov    %rsp,%rbp
  408071:	48 83 ec 20          	sub    $0x20,%rsp
  408075:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408079:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40807d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __glibcxx_function_requires(_LessThanOpConcept<
	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_partitioned_upper(__first, __last, __val);

      return std::__upper_bound(__first, __last, __val,
				__gnu_cxx::__ops::__val_less_iter());
  408081:	e8 3e c6 ff ff       	call   4046c4 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>
      return std::__upper_bound(__first, __last, __val,
  408086:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40808a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40808e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408092:	48 89 ce             	mov    %rcx,%rsi
  408095:	48 89 c7             	mov    %rax,%rdi
  408098:	e8 99 17 00 00       	call   409836 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_>
    }
  40809d:	c9                   	leave
  40809e:	c3                   	ret

000000000040809f <_ZSt11lower_boundIPKjjET_S2_S2_RKT0_>:
   *  @ingroup binary_search_algorithms
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  40809f:	55                   	push   %rbp
  4080a0:	48 89 e5             	mov    %rsp,%rbp
  4080a3:	48 83 ec 20          	sub    $0x20,%rsp
  4080a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4080ab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4080af:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __glibcxx_function_requires(_LessThanOpConcept<
	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
      __glibcxx_requires_partitioned_lower(__first, __last, __val);

      return std::__lower_bound(__first, __last, __val,
				__gnu_cxx::__ops::__iter_less_val());
  4080b3:	e8 05 c6 ff ff       	call   4046bd <_ZN9__gnu_cxx5__ops15__iter_less_valEv>
      return std::__lower_bound(__first, __last, __val,
  4080b8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4080bc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4080c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080c4:	48 89 ce             	mov    %rcx,%rsi
  4080c7:	48 89 c7             	mov    %rax,%rdi
  4080ca:	e8 45 18 00 00       	call   409914 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_>
    }
  4080cf:	c9                   	leave
  4080d0:	c3                   	ret

00000000004080d1 <_ZSt4findIPKDiDiET_S2_S2_RKT0_>:
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  4080d1:	55                   	push   %rbp
  4080d2:	48 89 e5             	mov    %rsp,%rbp
  4080d5:	48 83 ec 20          	sub    $0x20,%rsp
  4080d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4080dd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4080e1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
		typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last,
  4080e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4080e9:	48 89 c7             	mov    %rax,%rdi
  4080ec:	e8 01 19 00 00       	call   4099f2 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKDiEENS0_16_Iter_equals_valIT_EERS4_>
  4080f1:	48 89 c2             	mov    %rax,%rdx
  4080f4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4080f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4080fc:	48 89 ce             	mov    %rcx,%rsi
  4080ff:	48 89 c7             	mov    %rax,%rdi
  408102:	e8 10 19 00 00       	call   409a17 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_>
			    __gnu_cxx::__ops::__iter_equals_val(__val));
    }
  408107:	c9                   	leave
  408108:	c3                   	ret

0000000000408109 <_ZSt12construct_atISt6localeJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
  408109:	55                   	push   %rbp
  40810a:	48 89 e5             	mov    %rsp,%rbp
  40810d:	53                   	push   %rbx
  40810e:	48 83 ec 18          	sub    $0x18,%rsp
  408112:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  408116:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40811a:	48 89 c6             	mov    %rax,%rsi
  40811d:	bf 08 00 00 00       	mov    $0x8,%edi
  408122:	e8 84 c5 ff ff       	call   4046ab <_ZnwmPv>
  408127:	48 89 c3             	mov    %rax,%rbx
  40812a:	48 89 df             	mov    %rbx,%rdi
  40812d:	e8 3e c3 ff ff       	call   404470 <_ZNSt6localeC1Ev@plt>
  408132:	48 89 d8             	mov    %rbx,%rax
  408135:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408139:	c9                   	leave
  40813a:	c3                   	ret

000000000040813b <_ZSt4moveIRNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
  40813b:	55                   	push   %rbp
  40813c:	48 89 e5             	mov    %rsp,%rbp
  40813f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  408143:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408147:	5d                   	pop    %rbp
  408148:	c3                   	ret
  408149:	90                   	nop

000000000040814a <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv>:
      get() &&
  40814a:	55                   	push   %rbp
  40814b:	48 89 e5             	mov    %rsp,%rbp
  40814e:	53                   	push   %rbx
  40814f:	48 83 ec 38          	sub    $0x38,%rsp
  408153:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408157:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	if (this->_M_used().size() != 0)
  40815b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40815f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  408163:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408167:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40816b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40816f:	48 83 c0 08          	add    $0x8,%rax
  408173:	48 89 c7             	mov    %rax,%rdi
  408176:	e8 ad 38 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40817b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40817f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408183:	48 8d 50 18          	lea    0x18(%rax),%rdx
  408187:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40818b:	48 89 c6             	mov    %rax,%rsi
  40818e:	48 89 d7             	mov    %rdx,%rdi
  408191:	e8 b7 38 00 00       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  408196:	48 89 c6             	mov    %rax,%rsi
  408199:	48 89 df             	mov    %rbx,%rdi
  40819c:	e8 eb 38 00 00       	call   40ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  4081a1:	90                   	nop
	if (this->_M_used().size() != 0)
  4081a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4081a6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4081aa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4081ae:	48 89 c7             	mov    %rax,%rdi
  4081b1:	e8 7e d3 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4081b6:	48 85 c0             	test   %rax,%rax
  4081b9:	0f 95 c0             	setne  %al
  4081bc:	84 c0                	test   %al,%al
  4081be:	74 0c                	je     4081cc <_ZNOSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3getEv+0x82>
	  _Seq_sink::_M_overflow();
  4081c0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4081c4:	48 89 c7             	mov    %rax,%rdi
  4081c7:	e8 94 25 00 00       	call   40a760 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	return std::move(_M_seq);
  4081cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4081d0:	48 05 20 01 00 00    	add    $0x120,%rax
  4081d6:	48 89 c7             	mov    %rax,%rdi
  4081d9:	e8 4a 16 00 00       	call   409828 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
  4081de:	48 89 c2             	mov    %rax,%rdx
  4081e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4081e5:	48 89 d6             	mov    %rdx,%rsi
  4081e8:	48 89 c7             	mov    %rax,%rdi
  4081eb:	e8 c2 f6 ff ff       	call   4078b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      }
  4081f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4081f4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4081f8:	c9                   	leave
  4081f9:	c3                   	ret

00000000004081fa <_ZNKSt6ranges8__access5_DataclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>:

    public:
      template<__maybe_borrowed_range _Tp>
	requires __member_data<_Tp> || __begin_data<_Tp>
	constexpr auto
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
  4081fa:	55                   	push   %rbp
  4081fb:	48 89 e5             	mov    %rsp,%rbp
  4081fe:	48 83 ec 10          	sub    $0x10,%rsp
  408202:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408206:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  if constexpr (__member_data<_Tp>)
	    return __t.data();
  40820a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40820e:	48 89 c7             	mov    %rax,%rdi
  408211:	e8 26 26 00 00       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
	  else
	    return std::to_address(_Begin{}(__t));
	}
  408216:	c9                   	leave
  408217:	c3                   	ret

0000000000408218 <_ZNKSt6ranges8__access5_SizeclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  408218:	55                   	push   %rbp
  408219:	48 89 e5             	mov    %rsp,%rbp
  40821c:	48 83 ec 10          	sub    $0x10,%rsp
  408220:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408224:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.size();
  408228:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40822c:	48 89 c7             	mov    %rax,%rdi
  40822f:	e8 5c cb ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
	}
  408234:	c9                   	leave
  408235:	c3                   	ret

0000000000408236 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv>:
      view()
  408236:	55                   	push   %rbp
  408237:	48 89 e5             	mov    %rsp,%rbp
  40823a:	53                   	push   %rbx
  40823b:	48 83 ec 48          	sub    $0x48,%rsp
  40823f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __s = this->_M_used();
  408243:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408247:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40824b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40824f:	48 8d 58 08          	lea    0x8(%rax),%rbx
  408253:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408257:	48 83 c0 08          	add    $0x8,%rax
  40825b:	48 89 c7             	mov    %rax,%rdi
  40825e:	e8 c5 37 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  408263:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  408267:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40826b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40826f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  408273:	48 89 c6             	mov    %rax,%rsi
  408276:	48 89 d7             	mov    %rdx,%rdi
  408279:	e8 cf 37 00 00       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40827e:	48 89 c6             	mov    %rax,%rsi
  408281:	48 89 df             	mov    %rbx,%rdi
  408284:	e8 03 38 00 00       	call   40ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  408289:	90                   	nop
	auto __s = this->_M_used();
  40828a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40828e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (_M_seq.size())
  408292:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408296:	48 05 20 01 00 00    	add    $0x120,%rax
  40829c:	48 89 c7             	mov    %rax,%rdi
  40829f:	e8 ec ca ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4082a4:	48 85 c0             	test   %rax,%rax
  4082a7:	0f 95 c0             	setne  %al
  4082aa:	84 c0                	test   %al,%al
  4082ac:	74 46                	je     4082f4 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0xbe>
	    if (__s.size() != 0)
  4082ae:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4082b2:	48 89 c7             	mov    %rax,%rdi
  4082b5:	e8 7a d2 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4082ba:	48 85 c0             	test   %rax,%rax
  4082bd:	0f 95 c0             	setne  %al
  4082c0:	84 c0                	test   %al,%al
  4082c2:	74 0c                	je     4082d0 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0x9a>
	      _Seq_sink::_M_overflow();
  4082c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4082c8:	48 89 c7             	mov    %rax,%rdi
  4082cb:	e8 90 24 00 00       	call   40a760 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	    return _M_seq;
  4082d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4082d4:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  4082db:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4082df:	48 89 d6             	mov    %rdx,%rsi
  4082e2:	48 89 c7             	mov    %rax,%rdi
  4082e5:	e8 6c 25 00 00       	call   40a856 <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>
  4082ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4082ee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4082f2:	eb 08                	jmp    4082fc <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4viewEv+0xc6>
	return __s;
  4082f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4082f8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
      }
  4082fc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408300:	c9                   	leave
  408301:	c3                   	ret

0000000000408302 <_ZSt15__ostream_writeIcSt11char_traitsIcEEvRSt13basic_ostreamIT_T0_EPKS3_l>:

  /// @cond undocumented

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
  408302:	55                   	push   %rbp
  408303:	48 89 e5             	mov    %rsp,%rbp
  408306:	48 83 ec 30          	sub    $0x30,%rsp
  40830a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40830e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408312:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits>       __ostream_type;
      typedef typename __ostream_type::ios_base    __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
  408316:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40831a:	48 8b 00             	mov    (%rax),%rax
  40831d:	48 83 e8 18          	sub    $0x18,%rax
  408321:	48 8b 00             	mov    (%rax),%rax
  408324:	48 89 c2             	mov    %rax,%rdx
  408327:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40832b:	48 01 d0             	add    %rdx,%rax
  40832e:	48 89 c7             	mov    %rax,%rdi
  408331:	e8 9a bd ff ff       	call   4040d0 <_ZNKSt9basic_iosIcSt11char_traitsIcEE5rdbufEv@plt>
  408336:	48 89 c1             	mov    %rax,%rcx
  408339:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40833d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408341:	48 89 c6             	mov    %rax,%rsi
  408344:	48 89 cf             	mov    %rcx,%rdi
  408347:	e8 14 c0 ff ff       	call   404360 <_ZNSt15basic_streambufIcSt11char_traitsIcEE5sputnEPKcl@plt>
  40834c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__put != __n)
  408350:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408354:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  408358:	74 25                	je     40837f <_ZSt15__ostream_writeIcSt11char_traitsIcEEvRSt13basic_ostreamIT_T0_EPKS3_l+0x7d>
	__out.setstate(__ios_base::badbit);
  40835a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40835e:	48 8b 00             	mov    (%rax),%rax
  408361:	48 83 e8 18          	sub    $0x18,%rax
  408365:	48 8b 00             	mov    (%rax),%rax
  408368:	48 89 c2             	mov    %rax,%rdx
  40836b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40836f:	48 01 d0             	add    %rdx,%rax
  408372:	be 01 00 00 00       	mov    $0x1,%esi
  408377:	48 89 c7             	mov    %rax,%rdi
  40837a:	e8 31 be ff ff       	call   4041b0 <_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate@plt>
    }
  40837f:	90                   	nop
  408380:	c9                   	leave
  408381:	c3                   	ret

0000000000408382 <_ZSt7printlnIJRA4_KcEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS5_>:
		 std::format(__fmt, std::forward<_Args>(__args)...));
    }

  template<typename... _Args>
    inline void
    println(format_string<_Args...> __fmt, _Args&&... __args)
  408382:	55                   	push   %rbp
  408383:	48 89 e5             	mov    %rsp,%rbp
  408386:	53                   	push   %rbx
  408387:	48 83 ec 28          	sub    $0x28,%rsp
  40838b:	48 89 f8             	mov    %rdi,%rax
  40838e:	48 89 c1             	mov    %rax,%rcx
  408391:	bb 00 00 00 00       	mov    $0x0,%ebx
  408396:	48 89 f3             	mov    %rsi,%rbx
  408399:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  40839d:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
  4083a1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { std::println(stdout, __fmt, std::forward<_Args>(__args)...); }
  4083a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4083a9:	48 89 c7             	mov    %rax,%rdi
  4083ac:	e8 22 25 00 00       	call   40a8d3 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
  4083b1:	48 89 c1             	mov    %rax,%rcx
  4083b4:	48 8b 05 85 de 01 00 	mov    0x1de85(%rip),%rax        # 426240 <stdout@GLIBC_2.2.5>
  4083bb:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4083bf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4083c3:	48 89 c7             	mov    %rax,%rdi
  4083c6:	e8 16 25 00 00       	call   40a8e1 <_ZSt7printlnIJRA4_KcEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS7_>
  4083cb:	90                   	nop
  4083cc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4083d0:	c9                   	leave
  4083d1:	c3                   	ret

00000000004083d2 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>:
    __parse_arg_id(const _CharT* __first, const _CharT* __last)
  4083d2:	55                   	push   %rbp
  4083d3:	48 89 e5             	mov    %rsp,%rbp
  4083d6:	48 83 ec 70          	sub    $0x70,%rsp
  4083da:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4083de:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
      if (__first == __last)
  4083e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4083e6:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
      if (*__first == '0')
  4083ea:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4083ee:	0f b6 00             	movzbl (%rax),%eax
  4083f1:	3c 30                	cmp    $0x30,%al
  4083f3:	75 37                	jne    40842c <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x5a>
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
  4083f5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  4083fc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408400:	48 83 c0 01          	add    $0x1,%rax
  408404:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  408408:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  40840c:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  408410:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  408414:	48 89 ce             	mov    %rcx,%rsi
  408417:	48 89 c7             	mov    %rax,%rdi
  40841a:	e8 7d 25 00 00       	call   40a99c <_ZNSt4pairItPKcEC1IiS1_EEOT_OT0_>
  40841f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  408423:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  408427:	e9 c0 00 00 00       	jmp    4084ec <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
      if ('1' <= *__first && *__first <= '9')
  40842c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  408430:	0f b6 00             	movzbl (%rax),%eax
  408433:	3c 30                	cmp    $0x30,%al
  408435:	0f 8e 83 00 00 00    	jle    4084be <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xec>
  40843b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40843f:	0f b6 00             	movzbl (%rax),%eax
  408442:	3c 39                	cmp    $0x39,%al
  408444:	7f 78                	jg     4084be <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xec>
	  const unsigned short __id = *__first - '0';
  408446:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40844a:	0f b6 00             	movzbl (%rax),%eax
  40844d:	66 98                	cbtw
  40844f:	83 e8 30             	sub    $0x30,%eax
  408452:	66 89 45 ae          	mov    %ax,-0x52(%rbp)
	  const auto __next = __first + 1;
  408456:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40845a:	48 83 c0 01          	add    $0x1,%rax
  40845e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
  408462:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408466:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  40846a:	74 16                	je     408482 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xb0>
  40846c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408470:	0f b6 00             	movzbl (%rax),%eax
  408473:	3c 2f                	cmp    $0x2f,%al
  408475:	7e 0b                	jle    408482 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xb0>
  408477:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40847b:	0f b6 00             	movzbl (%rax),%eax
  40847e:	3c 39                	cmp    $0x39,%al
  408480:	7e 21                	jle    4084a3 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0xd1>
	    return {__id, __next};
  408482:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  408486:	48 8d 4d ae          	lea    -0x52(%rbp),%rcx
  40848a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40848e:	48 89 ce             	mov    %rcx,%rsi
  408491:	48 89 c7             	mov    %rax,%rdi
  408494:	e8 49 25 00 00       	call   40a9e2 <_ZNSt4pairItPKcEC1ERKtRKS1_>
  408499:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40849d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4084a1:	eb 49                	jmp    4084ec <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
	    return __format::__parse_integer(__first, __last);
  4084a3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4084a7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4084ab:	48 89 d6             	mov    %rdx,%rsi
  4084ae:	48 89 c7             	mov    %rax,%rdi
  4084b1:	e8 5c 25 00 00       	call   40aa12 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>
  4084b6:	48 89 d1             	mov    %rdx,%rcx
  4084b9:	48 89 ca             	mov    %rcx,%rdx
  4084bc:	eb 2e                	jmp    4084ec <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_+0x11a>
      return {0, nullptr};
  4084be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  4084c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4084cc:	00
  4084cd:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  4084d1:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
  4084d5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4084d9:	48 89 ce             	mov    %rcx,%rsi
  4084dc:	48 89 c7             	mov    %rax,%rdi
  4084df:	e8 ee 25 00 00       	call   40aad2 <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>
  4084e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4084e8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4084ec:	89 c1                	mov    %eax,%ecx
  4084ee:	89 c8                	mov    %ecx,%eax
  4084f0:	c9                   	leave
  4084f1:	c3                   	ret

00000000004084f2 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>:
      check_arg_id(size_t __id)
  4084f2:	55                   	push   %rbp
  4084f3:	48 89 e5             	mov    %rsp,%rbp
  4084f6:	48 83 ec 10          	sub    $0x10,%rsp
  4084fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4084fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (_M_indexing == _Auto)
  408502:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408506:	8b 40 10             	mov    0x10(%rax),%eax
  408509:	83 f8 02             	cmp    $0x2,%eax
  40850c:	75 05                	jne    408513 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x21>
	  __format::__conflicting_indexing_in_format_string();
  40850e:	e8 f5 cc ff ff       	call   405208 <_ZNSt8__format39__conflicting_indexing_in_format_stringEv>
	_M_indexing = _Manual;
  408513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408517:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
	if (std::is_constant_evaluated())
  40851e:	e8 59 c1 ff ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  408523:	84 c0                	test   %al,%al
  408525:	74 13                	je     40853a <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x48>
	  if (__id >= _M_num_args)
  408527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40852b:	48 8b 40 20          	mov    0x20(%rax),%rax
  40852f:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  408533:	72 05                	jb     40853a <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm+0x48>
	    __format::__invalid_arg_id_in_format_string();
  408535:	e8 dc cc ff ff       	call   405216 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
      }
  40853a:	90                   	nop
  40853b:	c9                   	leave
  40853c:	c3                   	ret
  40853d:	90                   	nop

000000000040853e <_ZNKSt6ranges8__access6_BeginclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40853e:	55                   	push   %rbp
  40853f:	48 89 e5             	mov    %rsp,%rbp
  408542:	48 83 ec 10          	sub    $0x10,%rsp
  408546:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40854a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  40854e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408552:	48 89 c7             	mov    %rax,%rdi
  408555:	e8 be 25 00 00       	call   40ab18 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5beginEv>
	}
  40855a:	c9                   	leave
  40855b:	c3                   	ret

000000000040855c <_ZNKSt6ranges8__access4_EndclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40855c:	55                   	push   %rbp
  40855d:	48 89 e5             	mov    %rsp,%rbp
  408560:	48 83 ec 10          	sub    $0x10,%rsp
  408564:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408568:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  40856c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408570:	48 89 c7             	mov    %rax,%rdi
  408573:	e8 b2 25 00 00       	call   40ab2a <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE3endEv>
	}
  408578:	c9                   	leave
  408579:	c3                   	ret

000000000040857a <_ZNKSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5emptyEv>:
      constexpr bool empty() const { return ranges::empty(_M_base); }
  40857a:	55                   	push   %rbp
  40857b:	48 89 e5             	mov    %rsp,%rbp
  40857e:	48 83 ec 10          	sub    $0x10,%rsp
  408582:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408586:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40858a:	48 89 c6             	mov    %rax,%rsi
  40858d:	bf 07 b0 41 00       	mov    $0x41b007,%edi
  408592:	e8 03 00 00 00       	call   40859a <_ZNKSt6ranges8__access6_EmptyclIRKNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEbOT_>
  408597:	c9                   	leave
  408598:	c3                   	ret
  408599:	90                   	nop

000000000040859a <_ZNKSt6ranges8__access6_EmptyclIRKNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEbOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40859a:	55                   	push   %rbp
  40859b:	48 89 e5             	mov    %rsp,%rbp
  40859e:	48 83 ec 10          	sub    $0x10,%rsp
  4085a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4085a6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return bool(__t.empty());
  4085aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4085ae:	48 89 c7             	mov    %rax,%rdi
  4085b1:	e8 02 00 00 00       	call   4085b8 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5emptyEv>
	}
  4085b6:	c9                   	leave
  4085b7:	c3                   	ret

00000000004085b8 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5emptyEv>:
      begin() requires (!copyable<_It>)
      { return std::move(_M_begin); }

      constexpr _Sent end() const { return _M_end; }

      constexpr bool empty() const { return _M_begin == _M_end; }
  4085b8:	55                   	push   %rbp
  4085b9:	48 89 e5             	mov    %rsp,%rbp
  4085bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4085c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4085c4:	48 8b 10             	mov    (%rax),%rdx
  4085c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4085cb:	48 8b 40 08          	mov    0x8(%rax),%rax
  4085cf:	48 39 c2             	cmp    %rax,%rdx
  4085d2:	0f 94 c0             	sete   %al
  4085d5:	5d                   	pop    %rbp
  4085d6:	c3                   	ret
  4085d7:	90                   	nop

00000000004085d8 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE8_M_beginIS4_S4_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  4085d8:	55                   	push   %rbp
  4085d9:	48 89 e5             	mov    %rsp,%rbp
  4085dc:	48 83 ec 20          	sub    $0x20,%rsp
  4085e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4085e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4085e8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4085ec:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  4085f0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4085f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4085f8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4085fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408600:	48 89 c7             	mov    %rax,%rdi
  408603:	e8 c2 25 00 00       	call   40abca <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  408608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40860c:	c9                   	leave
  40860d:	c3                   	ret

000000000040860e <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5beginEv>:
      constexpr auto begin()
  40860e:	55                   	push   %rbp
  40860f:	48 89 e5             	mov    %rsp,%rbp
  408612:	53                   	push   %rbx
  408613:	48 83 ec 18          	sub    $0x18,%rsp
  408617:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40861b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  40861f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408623:	48 89 c6             	mov    %rax,%rsi
  408626:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  40862b:	e8 2c ff ff ff       	call   40855c <_ZNKSt6ranges8__access4_EndclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>
  408630:	48 89 c3             	mov    %rax,%rbx
  408633:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408637:	48 89 c6             	mov    %rax,%rsi
  40863a:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  40863f:	e8 fa fe ff ff       	call   40853e <_ZNKSt6ranges8__access6_BeginclIRNS_8subrangeIPKcS5_LNS_13subrange_kindE1EEEEEDaOT_>
  408644:	48 89 c2             	mov    %rax,%rdx
  408647:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40864b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40864f:	48 89 d9             	mov    %rbx,%rcx
  408652:	48 89 c7             	mov    %rax,%rdi
  408655:	e8 7e ff ff ff       	call   4085d8 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE8_M_beginIS4_S4_EEDaT_T0_>
  40865a:	90                   	nop
  40865b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40865f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408663:	c9                   	leave
  408664:	c3                   	ret
  408665:	90                   	nop

0000000000408666 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>:
      _M_parse_fill_and_align(iterator __first, iterator __last) noexcept
  408666:	55                   	push   %rbp
  408667:	48 89 e5             	mov    %rsp,%rbp
  40866a:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  408671:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  408678:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  40867f:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	if (*__first != '{')
  408686:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40868d:	0f b6 00             	movzbl (%rax),%eax
  408690:	3c 7b                	cmp    $0x7b,%al
  408692:	0f 84 57 01 00 00    	je     4087ef <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x189>
		_Utf32_view<ranges::subrange<iterator>> __uv({__first, __last});
  408698:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  40869f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  4086a6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4086aa:	48 89 ce             	mov    %rcx,%rsi
  4086ad:	48 89 c7             	mov    %rax,%rdi
  4086b0:	e8 87 24 00 00       	call   40ab3c <_ZNSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EEC1IS2_EET_S2_>
  4086b5:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  4086b9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4086bd:	48 89 d6             	mov    %rdx,%rsi
  4086c0:	48 89 c7             	mov    %rax,%rdi
  4086c3:	e8 be 24 00 00       	call   40ab86 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEEC1EOS6_>
		if (!__uv.empty())
  4086c8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4086cc:	48 89 c7             	mov    %rax,%rdi
  4086cf:	e8 a6 fe ff ff       	call   40857a <_ZNKSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5emptyEv>
  4086d4:	83 f0 01             	xor    $0x1,%eax
  4086d7:	84 c0                	test   %al,%al
  4086d9:	0f 84 bc 00 00 00    	je     40879b <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
		    auto __beg = __uv.begin();
  4086df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  4086e6:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  4086ea:	48 89 d6             	mov    %rdx,%rsi
  4086ed:	48 89 c7             	mov    %rax,%rdi
  4086f0:	e8 19 ff ff ff       	call   40860e <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEE5beginEv>
		    char32_t __c = *__beg++;
  4086f5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4086f9:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
  408700:	ba 00 00 00 00       	mov    $0x0,%edx
  408705:	48 89 ce             	mov    %rcx,%rsi
  408708:	48 89 c7             	mov    %rax,%rdi
  40870b:	e8 4e 25 00 00       	call   40ac5e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEi>
  408710:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408714:	48 89 c7             	mov    %rax,%rdi
  408717:	e8 9c 25 00 00       	call   40acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  40871c:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    if (__is_scalar_value(__c))
  40871f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408722:	89 c7                	mov    %eax,%edi
  408724:	e8 a4 c6 ff ff       	call   404dcd <_ZNSt9__unicode17__is_scalar_valueEDi>
  408729:	84 c0                	test   %al,%al
  40872b:	74 6e                	je     40879b <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
		      if (auto __next = __beg.base(); __next != __last)
  40872d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  408734:	48 89 c7             	mov    %rax,%rdi
  408737:	e8 a6 25 00 00       	call   40ace2 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>
  40873c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  408740:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408744:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
  40874b:	74 4e                	je     40879b <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
			if (_Align __align = _S_align(*__next))
  40874d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408751:	0f b6 00             	movzbl (%rax),%eax
  408754:	0f be c0             	movsbl %al,%eax
  408757:	89 c7                	mov    %eax,%edi
  408759:	e8 9e 25 00 00       	call   40acfc <_ZNSt8__format5_SpecIcE8_S_alignEc>
  40875e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  408761:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  408765:	74 34                	je     40879b <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x135>
			    _M_fill = __c;
  408767:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40876e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408771:	89 50 08             	mov    %edx,0x8(%rax)
			    _M_align = __align;
  408774:	8b 45 ec             	mov    -0x14(%rbp),%eax
  408777:	83 e0 03             	and    $0x3,%eax
  40877a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  408781:	83 e0 03             	and    $0x3,%eax
  408784:	89 c1                	mov    %eax,%ecx
  408786:	0f b6 02             	movzbl (%rdx),%eax
  408789:	83 e0 fc             	and    $0xfffffffc,%eax
  40878c:	09 c8                	or     %ecx,%eax
  40878e:	88 02                	mov    %al,(%rdx)
			    return ++__next;
  408790:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  408795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408799:	eb 5b                	jmp    4087f6 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x190>
	    if (_Align __align = _S_align(__first[0]))
  40879b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4087a2:	0f b6 00             	movzbl (%rax),%eax
  4087a5:	0f be c0             	movsbl %al,%eax
  4087a8:	89 c7                	mov    %eax,%edi
  4087aa:	e8 4d 25 00 00       	call   40acfc <_ZNSt8__format5_SpecIcE8_S_alignEc>
  4087af:	89 45 e8             	mov    %eax,-0x18(%rbp)
  4087b2:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  4087b6:	74 37                	je     4087ef <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x189>
		_M_fill = ' ';
  4087b8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4087bf:	c7 40 08 20 00 00 00 	movl   $0x20,0x8(%rax)
		_M_align = __align;
  4087c6:	8b 45 e8             	mov    -0x18(%rbp),%eax
  4087c9:	83 e0 03             	and    $0x3,%eax
  4087cc:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  4087d3:	83 e0 03             	and    $0x3,%eax
  4087d6:	89 c1                	mov    %eax,%ecx
  4087d8:	0f b6 02             	movzbl (%rdx),%eax
  4087db:	83 e0 fc             	and    $0xfffffffc,%eax
  4087de:	09 c8                	or     %ecx,%eax
  4087e0:	88 02                	mov    %al,(%rdx)
		return __first + 1;
  4087e2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4087e9:	48 83 c0 01          	add    $0x1,%rax
  4087ed:	eb 07                	jmp    4087f6 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_+0x190>
	return __first;
  4087ef:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
      }
  4087f6:	c9                   	leave
  4087f7:	c3                   	ret

00000000004087f8 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>:
      _M_parse_width(iterator __first, iterator __last,
  4087f8:	55                   	push   %rbp
  4087f9:	48 89 e5             	mov    %rsp,%rbp
  4087fc:	48 83 ec 30          	sub    $0x30,%rsp
  408800:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408804:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408808:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40880c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	bool __arg_id = false;
  408810:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
	if (*__first == '0')
  408814:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408818:	0f b6 00             	movzbl (%rax),%eax
  40881b:	3c 30                	cmp    $0x30,%al
  40881d:	75 0a                	jne    408829 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x31>
	  __throw_format_error("format error: width must be non-zero in "
  40881f:	bf d0 b1 41 00       	mov    $0x41b1d0,%edi
  408824:	e8 70 c9 ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
  408829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40882d:	48 8d 78 04          	lea    0x4(%rax),%rdi
  408831:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  408835:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  408839:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40883d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408841:	49 89 c8             	mov    %rcx,%r8
  408844:	48 89 d1             	mov    %rdx,%rcx
  408847:	48 89 fa             	mov    %rdi,%rdx
  40884a:	48 89 c7             	mov    %rax,%rdi
  40884d:	e8 e9 24 00 00       	call   40ad3b <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>
  408852:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__next != __first)
  408856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40885a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40885e:	74 30                	je     408890 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x98>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
  408860:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  408864:	84 c0                	test   %al,%al
  408866:	74 07                	je     40886f <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x77>
  408868:	ba 02 00 00 00       	mov    $0x2,%edx
  40886d:	eb 05                	jmp    408874 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE+0x7c>
  40886f:	ba 01 00 00 00       	mov    $0x1,%edx
  408874:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408878:	0f b6 d2             	movzbl %dl,%edx
  40887b:	83 e2 03             	and    $0x3,%edx
  40887e:	89 d1                	mov    %edx,%ecx
  408880:	c1 e1 07             	shl    $0x7,%ecx
  408883:	0f b7 10             	movzwl (%rax),%edx
  408886:	66 81 e2 7f fe       	and    $0xfe7f,%dx
  40888b:	09 ca                	or     %ecx,%edx
  40888d:	66 89 10             	mov    %dx,(%rax)
	return __next;
  408890:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  408894:	c9                   	leave
  408895:	c3                   	ret

0000000000408896 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>:
      _M_parse_precision(iterator __first, iterator __last,
  408896:	55                   	push   %rbp
  408897:	48 89 e5             	mov    %rsp,%rbp
  40889a:	48 83 ec 30          	sub    $0x30,%rsp
  40889e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4088a2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4088a6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4088aa:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (__first[0] != '.')
  4088ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088b2:	0f b6 00             	movzbl (%rax),%eax
  4088b5:	3c 2e                	cmp    $0x2e,%al
  4088b7:	74 09                	je     4088c2 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x2c>
	  return __first;
  4088b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088bd:	e9 8a 00 00 00       	jmp    40894c <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0xb6>
	iterator __next = ++__first;
  4088c2:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  4088c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	bool __arg_id = false;
  4088cf:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
	if (__next != __last)
  4088d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4088d7:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  4088db:	74 2d                	je     40890a <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x74>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
  4088dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4088e1:	48 8d 78 06          	lea    0x6(%rax),%rdi
  4088e5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4088e9:	48 8d 55 f7          	lea    -0x9(%rbp),%rdx
  4088ed:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4088f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4088f5:	49 89 c8             	mov    %rcx,%r8
  4088f8:	48 89 d1             	mov    %rdx,%rcx
  4088fb:	48 89 fa             	mov    %rdi,%rdx
  4088fe:	48 89 c7             	mov    %rax,%rdi
  408901:	e8 35 24 00 00       	call   40ad3b <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>
  408906:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__next == __first)
  40890a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40890e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  408912:	75 0a                	jne    40891e <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x88>
	  __throw_format_error("format error: missing precision after '.' in "
  408914:	bf 08 b2 41 00       	mov    $0x41b208,%edi
  408919:	e8 7b c8 ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
  40891e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  408922:	84 c0                	test   %al,%al
  408924:	74 07                	je     40892d <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x97>
  408926:	ba 02 00 00 00       	mov    $0x2,%edx
  40892b:	eb 05                	jmp    408932 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE+0x9c>
  40892d:	ba 01 00 00 00       	mov    $0x1,%edx
  408932:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408936:	83 e2 03             	and    $0x3,%edx
  408939:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
  40893c:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  408940:	83 e2 f9             	and    $0xfffffff9,%edx
  408943:	09 ca                	or     %ecx,%edx
  408945:	88 50 01             	mov    %dl,0x1(%rax)
	return __next;
  408948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40894c:	c9                   	leave
  40894d:	c3                   	ret

000000000040894e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
  40894e:	55                   	push   %rbp
  40894f:	48 89 e5             	mov    %rsp,%rbp
  408952:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408956:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40895a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40895e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408962:	48 89 10             	mov    %rdx,(%rax)
  408965:	90                   	nop
  408966:	5d                   	pop    %rbp
  408967:	c3                   	ret

0000000000408968 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
  408968:	55                   	push   %rbp
  408969:	48 89 e5             	mov    %rsp,%rbp
  40896c:	48 83 ec 10          	sub    $0x10,%rsp
  408970:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408978:	48 8b 00             	mov    (%rax),%rax
  40897b:	48 85 c0             	test   %rax,%rax
  40897e:	74 0f                	je     40898f <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
  408980:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408984:	48 8b 00             	mov    (%rax),%rax
  408987:	48 89 c7             	mov    %rax,%rdi
  40898a:	e8 f1 0d 00 00       	call   409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  40898f:	90                   	nop
  408990:	c9                   	leave
  408991:	c3                   	ret

0000000000408992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
  408992:	55                   	push   %rbp
  408993:	48 89 e5             	mov    %rsp,%rbp
  408996:	48 83 ec 70          	sub    $0x70,%rsp
  40899a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40899e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4089a2:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  4089a6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4089aa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4089ae:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4089b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
  4089b6:	90                   	nop
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
  4089b7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4089bb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4089bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4089c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      return __last - __first;
  4089c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4089cb:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
			     std::__iterator_category(__first));
  4089cf:	90                   	nop
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  4089d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (__dnew > size_type(_S_local_capacity))
  4089d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4089d8:	48 83 f8 0f          	cmp    $0xf,%rax
  4089dc:	76 3f                	jbe    408a1d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8b>
	    _M_data(_M_create(__dnew, size_type(0)));
  4089de:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  4089e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4089e6:	ba 00 00 00 00       	mov    $0x0,%edx
  4089eb:	48 89 ce             	mov    %rcx,%rsi
  4089ee:	48 89 c7             	mov    %rax,%rdi
  4089f1:	e8 e0 24 00 00       	call   40aed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  4089f6:	48 89 c2             	mov    %rax,%rdx
  4089f9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4089fd:	48 89 d6             	mov    %rdx,%rsi
  408a00:	48 89 c7             	mov    %rax,%rdi
  408a03:	e8 d0 0d 00 00       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
  408a08:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  408a0c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a10:	48 89 d6             	mov    %rdx,%rsi
  408a13:	48 89 c7             	mov    %rax,%rdi
  408a16:	e8 d7 0d 00 00       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  408a1b:	eb 3a                	jmp    408a57 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc5>
  408a1d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (std::is_constant_evaluated())
  408a25:	e8 52 bc ff ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  408a2a:	84 c0                	test   %al,%al
  408a2c:	74 28                	je     408a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc4>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  408a2e:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  408a35:	00
  408a36:	eb 17                	jmp    408a4f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xbd>
	    _M_local_buf[__i] = _CharT();
  408a38:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408a3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408a40:	48 01 d0             	add    %rdx,%rax
  408a43:	48 83 c0 10          	add    $0x10,%rax
  408a47:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  408a4a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  408a4f:	48 83 7d d8 0f       	cmpq   $0xf,-0x28(%rbp)
  408a54:	76 e2                	jbe    408a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xa6>
      }
  408a56:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
  408a57:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  408a5b:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  408a5f:	48 89 d6             	mov    %rdx,%rsi
  408a62:	48 89 c7             	mov    %rax,%rdi
  408a65:	e8 e4 fe ff ff       	call   40894e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
  408a6a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a6e:	48 89 c7             	mov    %rax,%rdi
  408a71:	e8 a0 ea ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  408a76:	48 89 c1             	mov    %rax,%rcx
  408a79:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  408a7d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  408a81:	48 89 c6             	mov    %rax,%rsi
  408a84:	48 89 cf             	mov    %rcx,%rdi
  408a87:	e8 0d 25 00 00       	call   40af99 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
  408a8c:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  408a93:	00

	_M_set_length(__dnew);
  408a94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  408a98:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a9c:	48 89 d6             	mov    %rdx,%rsi
  408a9f:	48 89 c7             	mov    %rax,%rdi
  408aa2:	e8 81 ea ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  408aa7:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  408aab:	48 89 c7             	mov    %rax,%rdi
  408aae:	e8 b5 fe ff ff       	call   408968 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
  408ab3:	c9                   	leave
  408ab4:	c3                   	ret

0000000000408ab5 <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
    println(format_string<_Args...> __fmt, _Args&&... __args)
  408ab5:	55                   	push   %rbp
  408ab6:	48 89 e5             	mov    %rsp,%rbp
  408ab9:	53                   	push   %rbx
  408aba:	48 83 ec 28          	sub    $0x28,%rsp
  408abe:	48 89 f8             	mov    %rdi,%rax
  408ac1:	48 89 c1             	mov    %rax,%rcx
  408ac4:	bb 00 00 00 00       	mov    $0x0,%ebx
  408ac9:	48 89 f3             	mov    %rsi,%rbx
  408acc:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  408ad0:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
  408ad4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { std::println(stdout, __fmt, std::forward<_Args>(__args)...); }
  408ad8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408adc:	48 89 c7             	mov    %rax,%rdi
  408adf:	e8 ea 24 00 00       	call   40afce <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
  408ae4:	48 89 c1             	mov    %rax,%rcx
  408ae7:	48 8b 05 52 d7 01 00 	mov    0x1d752(%rip),%rax        # 426240 <stdout@GLIBC_2.2.5>
  408aee:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  408af2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408af6:	48 89 c7             	mov    %rax,%rdi
  408af9:	e8 de 24 00 00       	call   40afdc <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>
  408afe:	90                   	nop
  408aff:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408b03:	c9                   	leave
  408b04:	c3                   	ret

0000000000408b05 <_ZSt7printlnIJiEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS3_>:
	std::vprint_nonunicode(__os, __fmt.get(), __fmtargs);
    }

  template<typename... _Args>
    inline void
    println(ostream& __os, format_string<_Args...> __fmt, _Args&&... __args)
  408b05:	55                   	push   %rbp
  408b06:	48 89 e5             	mov    %rsp,%rbp
  408b09:	41 55                	push   %r13
  408b0b:	41 54                	push   %r12
  408b0d:	53                   	push   %rbx
  408b0e:	48 83 ec 48          	sub    $0x48,%rsp
  408b12:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  408b16:	48 89 f0             	mov    %rsi,%rax
  408b19:	48 89 d6             	mov    %rdx,%rsi
  408b1c:	48 89 c0             	mov    %rax,%rax
  408b1f:	ba 00 00 00 00       	mov    $0x0,%edx
  408b24:	48 89 f2             	mov    %rsi,%rdx
  408b27:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  408b2b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  408b2f:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    {
      std::print(__os, "{}\n",
		 std::format(__fmt, std::forward<_Args>(__args)...));
  408b33:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  408b37:	48 89 c7             	mov    %rax,%rdi
  408b3a:	e8 4e 1e 00 00       	call   40a98d <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  408b3f:	48 89 c1             	mov    %rax,%rcx
  408b42:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408b46:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  408b4a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  408b4e:	48 89 c7             	mov    %rax,%rdi
  408b51:	e8 32 25 00 00       	call   40b088 <_ZSt6formatIJiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS8_>
      std::print(__os, "{}\n",
  408b56:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  408b5c:	41 bd 43 b2 41 00    	mov    $0x41b243,%r13d
  408b62:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  408b66:	4c 89 e6             	mov    %r12,%rsi
  408b69:	4c 89 ef             	mov    %r13,%rdi
  408b6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408b70:	48 89 d1             	mov    %rdx,%rcx
  408b73:	48 89 fa             	mov    %rdi,%rdx
  408b76:	48 89 c7             	mov    %rax,%rdi
  408b79:	e8 c9 25 00 00       	call   40b147 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  408b7e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408b82:	48 89 c7             	mov    %rax,%rdi
  408b85:	e8 ea e9 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  408b8a:	eb 1a                	jmp    408ba6 <_ZSt7printlnIJiEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS3_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  408b8c:	48 89 c3             	mov    %rax,%rbx
  408b8f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  408b93:	48 89 c7             	mov    %rax,%rdi
  408b96:	e8 d9 e9 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  408b9b:	48 89 d8             	mov    %rbx,%rax
  408b9e:	48 89 c7             	mov    %rax,%rdi
  408ba1:	e8 6a b8 ff ff       	call   404410 <_Unwind_Resume@plt>
    }
  408ba6:	48 83 c4 48          	add    $0x48,%rsp
  408baa:	5b                   	pop    %rbx
  408bab:	41 5c                	pop    %r12
  408bad:	41 5d                	pop    %r13
  408baf:	5d                   	pop    %rbp
  408bb0:	c3                   	ret

0000000000408bb1 <_ZSt7printlnIJiEEvSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS2_>:
    println(format_string<_Args...> __fmt, _Args&&... __args)
  408bb1:	55                   	push   %rbp
  408bb2:	48 89 e5             	mov    %rsp,%rbp
  408bb5:	53                   	push   %rbx
  408bb6:	48 83 ec 28          	sub    $0x28,%rsp
  408bba:	48 89 f8             	mov    %rdi,%rax
  408bbd:	48 89 c1             	mov    %rax,%rcx
  408bc0:	bb 00 00 00 00       	mov    $0x0,%ebx
  408bc5:	48 89 f3             	mov    %rsi,%rbx
  408bc8:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  408bcc:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
  408bd0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { std::println(stdout, __fmt, std::forward<_Args>(__args)...); }
  408bd4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408bd8:	48 89 c7             	mov    %rax,%rdi
  408bdb:	e8 ad 1d 00 00       	call   40a98d <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  408be0:	48 89 c1             	mov    %rax,%rcx
  408be3:	48 8b 05 56 d6 01 00 	mov    0x1d656(%rip),%rax        # 426240 <stdout@GLIBC_2.2.5>
  408bea:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  408bee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408bf2:	48 89 c7             	mov    %rax,%rdi
  408bf5:	e8 06 26 00 00       	call   40b200 <_ZSt7printlnIJiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS4_>
  408bfa:	90                   	nop
  408bfb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  408bff:	c9                   	leave
  408c00:	c3                   	ret
  408c01:	90                   	nop

0000000000408c02 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>:
      _M_parse_sign(iterator __first, iterator) noexcept
  408c02:	55                   	push   %rbp
  408c03:	48 89 e5             	mov    %rsp,%rbp
  408c06:	48 83 ec 30          	sub    $0x30,%rsp
  408c0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  408c0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  408c12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (_Sign __sign = _S_sign(*__first))
  408c16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408c1a:	0f b6 00             	movzbl (%rax),%eax
  408c1d:	0f be c0             	movsbl %al,%eax
  408c20:	89 c7                	mov    %eax,%edi
  408c22:	e8 85 26 00 00       	call   40b2ac <_ZNSt8__format5_SpecIcE7_S_signEc>
  408c27:	89 45 fc             	mov    %eax,-0x4(%rbp)
  408c2a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  408c2e:	74 28                	je     408c58 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_+0x56>
	    _M_sign = __sign;
  408c30:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408c33:	83 e0 03             	and    $0x3,%eax
  408c36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408c3a:	83 e0 03             	and    $0x3,%eax
  408c3d:	8d 0c 85 00 00 00 00 	lea    0x0(,%rax,4),%ecx
  408c44:	0f b6 02             	movzbl (%rdx),%eax
  408c47:	83 e0 f3             	and    $0xfffffff3,%eax
  408c4a:	09 c8                	or     %ecx,%eax
  408c4c:	88 02                	mov    %al,(%rdx)
	    return __first + 1;
  408c4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408c52:	48 83 c0 01          	add    $0x1,%rax
  408c56:	eb 04                	jmp    408c5c <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_+0x5a>
	return __first;
  408c58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      }
  408c5c:	c9                   	leave
  408c5d:	c3                   	ret

0000000000408c5e <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>:
      _M_parse_alternate_form(iterator __first, iterator) noexcept
  408c5e:	55                   	push   %rbp
  408c5f:	48 89 e5             	mov    %rsp,%rbp
  408c62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c66:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408c6a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == '#')
  408c6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c72:	0f b6 00             	movzbl (%rax),%eax
  408c75:	3c 23                	cmp    $0x23,%al
  408c77:	75 11                	jne    408c8a <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_+0x2c>
	    _M_alt = true;
  408c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408c7d:	0f b6 10             	movzbl (%rax),%edx
  408c80:	83 ca 10             	or     $0x10,%edx
  408c83:	88 10                	mov    %dl,(%rax)
	    ++__first;
  408c85:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  408c8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  408c8e:	5d                   	pop    %rbp
  408c8f:	c3                   	ret

0000000000408c90 <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>:
      _M_parse_zero_fill(iterator __first, iterator /* __last */) noexcept
  408c90:	55                   	push   %rbp
  408c91:	48 89 e5             	mov    %rsp,%rbp
  408c94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408c98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408c9c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == '0')
  408ca0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408ca4:	0f b6 00             	movzbl (%rax),%eax
  408ca7:	3c 30                	cmp    $0x30,%al
  408ca9:	75 11                	jne    408cbc <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_+0x2c>
	    _M_zero_fill = true;
  408cab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408caf:	0f b6 10             	movzbl (%rax),%edx
  408cb2:	83 ca 40             	or     $0x40,%edx
  408cb5:	88 10                	mov    %dl,(%rax)
	    ++__first;
  408cb7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  408cbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  408cc0:	5d                   	pop    %rbp
  408cc1:	c3                   	ret

0000000000408cc2 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>:
      _M_parse_locale(iterator __first, iterator /* __last */) noexcept
  408cc2:	55                   	push   %rbp
  408cc3:	48 89 e5             	mov    %rsp,%rbp
  408cc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  408cca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  408cce:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (*__first == 'L')
  408cd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408cd6:	0f b6 00             	movzbl (%rax),%eax
  408cd9:	3c 4c                	cmp    $0x4c,%al
  408cdb:	75 11                	jne    408cee <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_+0x2c>
	    _M_localized = true;
  408cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408ce1:	0f b6 10             	movzbl (%rax),%edx
  408ce4:	83 ca 20             	or     $0x20,%edx
  408ce7:	88 10                	mov    %dl,(%rax)
	    ++__first;
  408ce9:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	return __first;
  408cee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  408cf2:	5d                   	pop    %rbp
  408cf3:	c3                   	ret

0000000000408cf4 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  408cf4:	55                   	push   %rbp
  408cf5:	48 89 e5             	mov    %rsp,%rbp
  408cf8:	48 83 ec 10          	sub    $0x10,%rsp
  408cfc:	89 7d fc             	mov    %edi,-0x4(%rbp)
    { return std::__bit_width(__value); }
  408cff:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408d02:	89 c7                	mov    %eax,%edi
  408d04:	e8 f2 b9 ff ff       	call   4046fb <_ZSt11__bit_widthIjEiT_>
  408d09:	c9                   	leave
  408d0a:	c3                   	ret

0000000000408d0b <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  408d0b:	55                   	push   %rbp
  408d0c:	48 89 e5             	mov    %rsp,%rbp
  408d0f:	48 83 ec 50          	sub    $0x50,%rsp
  408d13:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  408d17:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  408d1b:	89 55 bc             	mov    %edx,-0x44(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  408d1e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408d21:	89 c7                	mov    %eax,%edi
  408d23:	e8 cc ff ff ff       	call   408cf4 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  408d28:	83 c0 03             	add    $0x3,%eax
  408d2b:	c1 e8 02             	shr    $0x2,%eax
  408d2e:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408d31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408d35:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  408d39:	48 89 c2             	mov    %rax,%rdx
  408d3c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408d3f:	48 39 c2             	cmp    %rax,%rdx
  408d42:	0f 9c c0             	setl   %al
  408d45:	0f b6 c0             	movzbl %al,%eax
  408d48:	48 85 c0             	test   %rax,%rax
  408d4b:	74 1c                	je     408d69 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x5e>
	  __res.ptr = __last;
  408d4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408d51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408d55:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408d5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408d60:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408d64:	e9 db 00 00 00       	jmp    408e44 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x139>
      constexpr char __digits[] = {
  408d69:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  408d70:	35 36 37
  408d73:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  408d7a:	64 65 66
  408d7d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  408d81:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      unsigned __pos = __len - 1;
  408d85:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408d88:	83 e8 01             	sub    $0x1,%eax
  408d8b:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  408d8e:	eb 4b                	jmp    408ddb <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0xd0>
	  auto __num = __val & 0xF;
  408d90:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408d93:	83 e0 0f             	and    $0xf,%eax
  408d96:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 4;
  408d99:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[__pos] = __digits[__num];
  408d9d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408da0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408da4:	48 01 c2             	add    %rax,%rdx
  408da7:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408daa:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  408daf:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  408db1:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408db4:	83 e0 0f             	and    $0xf,%eax
  408db7:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 4;
  408dba:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[__pos - 1] = __digits[__num];
  408dbe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408dc1:	83 e8 01             	sub    $0x1,%eax
  408dc4:	89 c2                	mov    %eax,%edx
  408dc6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408dca:	48 01 c2             	add    %rax,%rdx
  408dcd:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408dd0:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  408dd5:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  408dd7:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  408ddb:	81 7d bc ff 00 00 00 	cmpl   $0xff,-0x44(%rbp)
  408de2:	77 ac                	ja     408d90 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x85>
      if (__val >= 0x10)
  408de4:	83 7d bc 0f          	cmpl   $0xf,-0x44(%rbp)
  408de8:	76 2f                	jbe    408e19 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x10e>
	  const auto __num = __val & 0xF;
  408dea:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408ded:	83 e0 0f             	and    $0xf,%eax
  408df0:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val >>= 4;
  408df3:	c1 6d bc 04          	shrl   $0x4,-0x44(%rbp)
	  __first[1] = __digits[__num];
  408df7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408dfb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  408dff:	8b 45 f4             	mov    -0xc(%rbp),%eax
  408e02:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax
  408e07:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  408e09:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408e0c:	0f b6 54 05 d0       	movzbl -0x30(%rbp,%rax,1),%edx
  408e11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408e15:	88 10                	mov    %dl,(%rax)
  408e17:	eb 0e                	jmp    408e27 <_ZNSt8__detail13__to_chars_16IjEESt15to_chars_resultPcS2_T_+0x11c>
	__first[0] = __digits[__val];
  408e19:	8b 45 bc             	mov    -0x44(%rbp),%eax
  408e1c:	0f b6 54 05 d0       	movzbl -0x30(%rbp,%rax,1),%edx
  408e21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408e25:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408e27:	8b 55 f8             	mov    -0x8(%rbp),%edx
  408e2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408e2e:	48 01 d0             	add    %rdx,%rax
  408e31:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  408e35:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  408e3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408e40:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408e44:	c9                   	leave
  408e45:	c3                   	ret

0000000000408e46 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  408e46:	55                   	push   %rbp
  408e47:	48 89 e5             	mov    %rsp,%rbp
  408e4a:	48 83 ec 40          	sub    $0x40,%rsp
  408e4e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408e52:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408e56:	89 55 cc             	mov    %edx,-0x34(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  408e59:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408e5c:	be 0a 00 00 00       	mov    $0xa,%esi
  408e61:	89 c7                	mov    %eax,%edi
  408e63:	e8 4d bd ff ff       	call   404bb5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  408e68:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408e6b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408e6f:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  408e73:	48 89 c2             	mov    %rax,%rdx
  408e76:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408e79:	48 39 c2             	cmp    %rax,%rdx
  408e7c:	0f 9c c0             	setl   %al
  408e7f:	0f b6 c0             	movzbl %al,%eax
  408e82:	48 85 c0             	test   %rax,%rax
  408e85:	74 19                	je     408ea0 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_+0x5a>
	  __res.ptr = __last;
  408e87:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408e8b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408e8f:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408e96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408e9a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408e9e:	eb 31                	jmp    408ed1 <_ZNSt8__detail13__to_chars_10IjEESt15to_chars_resultPcS2_T_+0x8b>
      __detail::__to_chars_10_impl(__first, __len, __val);
  408ea0:	8b 55 cc             	mov    -0x34(%rbp),%edx
  408ea3:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  408ea6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408eaa:	89 ce                	mov    %ecx,%esi
  408eac:	48 89 c7             	mov    %rax,%rdi
  408eaf:	e8 e7 e6 ff ff       	call   40759b <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
      __res.ptr = __first + __len;
  408eb4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408eb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408ebb:	48 01 d0             	add    %rdx,%rax
  408ebe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  408ec2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  408ec9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408ecd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408ed1:	c9                   	leave
  408ed2:	c3                   	ret

0000000000408ed3 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  408ed3:	55                   	push   %rbp
  408ed4:	48 89 e5             	mov    %rsp,%rbp
  408ed7:	48 83 ec 40          	sub    $0x40,%rsp
  408edb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  408edf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  408ee3:	89 55 cc             	mov    %edx,-0x34(%rbp)
      unsigned __len = 0;
  408ee6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  408eed:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408ef0:	89 c7                	mov    %eax,%edi
  408ef2:	e8 fd fd ff ff       	call   408cf4 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  408ef7:	83 c0 02             	add    $0x2,%eax
  408efa:	89 c2                	mov    %eax,%edx
  408efc:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  408f01:	48 0f af c2          	imul   %rdx,%rax
  408f05:	48 c1 e8 20          	shr    $0x20,%rax
  408f09:	d1 e8                	shr    %eax
  408f0b:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  408f0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408f12:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  408f16:	48 89 c2             	mov    %rax,%rdx
  408f19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408f1c:	48 39 c2             	cmp    %rax,%rdx
  408f1f:	0f 9c c0             	setl   %al
  408f22:	0f b6 c0             	movzbl %al,%eax
  408f25:	48 85 c0             	test   %rax,%rax
  408f28:	74 1c                	je     408f46 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x73>
	  __res.ptr = __last;
  408f2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408f2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  408f32:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  408f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408f3d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408f41:	e9 b8 00 00 00       	jmp    408ffe <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x12b>
      unsigned __pos = __len - 1;
  408f46:	8b 45 f8             	mov    -0x8(%rbp),%eax
  408f49:	83 e8 01             	sub    $0x1,%eax
  408f4c:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  408f4f:	eb 49                	jmp    408f9a <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0xc7>
	  auto __num = __val & 7;
  408f51:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408f54:	83 e0 07             	and    $0x7,%eax
  408f57:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 3;
  408f5a:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[__pos] = '0' + __num;
  408f5e:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408f61:	8d 48 30             	lea    0x30(%rax),%ecx
  408f64:	8b 55 fc             	mov    -0x4(%rbp),%edx
  408f67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f6b:	48 01 d0             	add    %rdx,%rax
  408f6e:	89 ca                	mov    %ecx,%edx
  408f70:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  408f72:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408f75:	83 e0 07             	and    $0x7,%eax
  408f78:	89 45 f0             	mov    %eax,-0x10(%rbp)
	  __val >>= 3;
  408f7b:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[__pos - 1] = '0' + __num;
  408f7f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  408f82:	8d 50 30             	lea    0x30(%rax),%edx
  408f85:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408f88:	83 e8 01             	sub    $0x1,%eax
  408f8b:	89 c1                	mov    %eax,%ecx
  408f8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408f91:	48 01 c8             	add    %rcx,%rax
  408f94:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  408f96:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  408f9a:	83 7d cc 3f          	cmpl   $0x3f,-0x34(%rbp)
  408f9e:	77 b1                	ja     408f51 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x7e>
      if (__val >= 010)
  408fa0:	83 7d cc 07          	cmpl   $0x7,-0x34(%rbp)
  408fa4:	76 2d                	jbe    408fd3 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x100>
	  auto const __num = __val & 7;
  408fa6:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408fa9:	83 e0 07             	and    $0x7,%eax
  408fac:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  __val >>= 3;
  408faf:	c1 6d cc 03          	shrl   $0x3,-0x34(%rbp)
	  __first[1] = '0' + __num;
  408fb3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  408fb6:	8d 50 30             	lea    0x30(%rax),%edx
  408fb9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408fbd:	48 83 c0 01          	add    $0x1,%rax
  408fc1:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  408fc3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408fc6:	83 c0 30             	add    $0x30,%eax
  408fc9:	89 c2                	mov    %eax,%edx
  408fcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408fcf:	88 10                	mov    %dl,(%rax)
  408fd1:	eb 0e                	jmp    408fe1 <_ZNSt8__detail12__to_chars_8IjEESt15to_chars_resultPcS2_T_+0x10e>
	__first[0] = '0' + __val;
  408fd3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408fd6:	83 c0 30             	add    $0x30,%eax
  408fd9:	89 c2                	mov    %eax,%edx
  408fdb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408fdf:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  408fe1:	8b 55 f8             	mov    -0x8(%rbp),%edx
  408fe4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408fe8:	48 01 d0             	add    %rdx,%rax
  408feb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  408fef:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  408ff6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408ffa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  408ffe:	c9                   	leave
  408fff:	c3                   	ret

0000000000409000 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  409000:	55                   	push   %rbp
  409001:	48 89 e5             	mov    %rsp,%rbp
  409004:	48 83 ec 40          	sub    $0x40,%rsp
  409008:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40900c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  409010:	89 55 cc             	mov    %edx,-0x34(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  409013:	8b 45 cc             	mov    -0x34(%rbp),%eax
  409016:	89 c7                	mov    %eax,%edi
  409018:	e8 d7 fc ff ff       	call   408cf4 <_ZNSt8__detail16__to_chars_len_2IjEEjT_>
  40901d:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409020:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409024:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  409028:	48 89 c2             	mov    %rax,%rdx
  40902b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40902e:	48 39 c2             	cmp    %rax,%rdx
  409031:	0f 9c c0             	setl   %al
  409034:	0f b6 c0             	movzbl %al,%eax
  409037:	48 85 c0             	test   %rax,%rax
  40903a:	74 19                	je     409055 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x55>
	  __res.ptr = __last;
  40903c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409040:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  409044:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  40904b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40904f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409053:	eb 58                	jmp    4090ad <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0xad>
      unsigned __pos = __len - 1;
  409055:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409058:	83 e8 01             	sub    $0x1,%eax
  40905b:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  40905e:	eb 23                	jmp    409083 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x83>
	  __first[__pos--] = '0' + (__val & 1);
  409060:	8b 45 cc             	mov    -0x34(%rbp),%eax
  409063:	83 e0 01             	and    $0x1,%eax
  409066:	83 c0 30             	add    $0x30,%eax
  409069:	89 c6                	mov    %eax,%esi
  40906b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40906f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409072:	8d 50 ff             	lea    -0x1(%rax),%edx
  409075:	89 55 fc             	mov    %edx,-0x4(%rbp)
  409078:	89 c0                	mov    %eax,%eax
  40907a:	48 01 c8             	add    %rcx,%rax
  40907d:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  409080:	d1 6d cc             	shrl   -0x34(%rbp)
      while (__pos)
  409083:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  409087:	75 d7                	jne    409060 <_ZNSt8__detail12__to_chars_2IjEESt15to_chars_resultPcS2_T_+0x60>
      __first[0] = '1';
  409089:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40908d:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  409090:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409093:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409097:	48 01 d0             	add    %rdx,%rax
  40909a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  40909e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4090a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4090a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4090ad:	c9                   	leave
  4090ae:	c3                   	ret

00000000004090af <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  4090af:	55                   	push   %rbp
  4090b0:	48 89 e5             	mov    %rsp,%rbp
  4090b3:	48 83 ec 70          	sub    $0x70,%rsp
  4090b7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  4090bb:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4090bf:	89 55 9c             	mov    %edx,-0x64(%rbp)
  4090c2:	89 4d 98             	mov    %ecx,-0x68(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  4090c5:	8b 55 98             	mov    -0x68(%rbp),%edx
  4090c8:	8b 45 9c             	mov    -0x64(%rbp),%eax
  4090cb:	89 d6                	mov    %edx,%esi
  4090cd:	89 c7                	mov    %eax,%edi
  4090cf:	e8 e1 ba ff ff       	call   404bb5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  4090d4:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  4090d7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4090db:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  4090df:	48 89 c2             	mov    %rax,%rdx
  4090e2:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4090e5:	48 39 c2             	cmp    %rax,%rdx
  4090e8:	0f 9c c0             	setl   %al
  4090eb:	0f b6 c0             	movzbl %al,%eax
  4090ee:	48 85 c0             	test   %rax,%rax
  4090f1:	74 1c                	je     40910f <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0x60>
	  __res.ptr = __last;
  4090f3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4090f7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  4090fb:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  409102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409106:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40910a:	e9 bf 00 00 00       	jmp    4091ce <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0x11f>
      unsigned __pos = __len - 1;
  40910f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409112:	83 e8 01             	sub    $0x1,%eax
  409115:	89 45 fc             	mov    %eax,-0x4(%rbp)
      constexpr char __digits[] = {
  409118:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  40911f:	35 36 37
  409122:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  409129:	64 65 66
  40912c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409130:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  409134:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  40913b:	6c 6d 6e
  40913e:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  409145:	74 75 76
  409148:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40914c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  409150:	c7 45 d0 77 78 79 7a 	movl   $0x7a797877,-0x30(%rbp)
      while (__val >= (unsigned)__base)
  409157:	eb 42                	jmp    40919b <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0xec>
	  auto const __quo = __val / __base;
  409159:	8b 7d 98             	mov    -0x68(%rbp),%edi
  40915c:	8b 45 9c             	mov    -0x64(%rbp),%eax
  40915f:	ba 00 00 00 00       	mov    $0x0,%edx
  409164:	f7 f7                	div    %edi
  409166:	89 45 f4             	mov    %eax,-0xc(%rbp)
	  auto const __rem = __val % __base;
  409169:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  40916c:	8b 45 9c             	mov    -0x64(%rbp),%eax
  40916f:	ba 00 00 00 00       	mov    $0x0,%edx
  409174:	f7 f1                	div    %ecx
  409176:	89 55 f0             	mov    %edx,-0x10(%rbp)
	  __first[__pos--] = __digits[__rem];
  409179:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40917c:	0f b6 54 05 b0       	movzbl -0x50(%rbp,%rax,1),%edx
  409181:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  409185:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409188:	8d 48 ff             	lea    -0x1(%rax),%ecx
  40918b:	89 4d fc             	mov    %ecx,-0x4(%rbp)
  40918e:	89 c0                	mov    %eax,%eax
  409190:	48 01 f0             	add    %rsi,%rax
  409193:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  409195:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409198:	89 45 9c             	mov    %eax,-0x64(%rbp)
      while (__val >= (unsigned)__base)
  40919b:	8b 45 98             	mov    -0x68(%rbp),%eax
  40919e:	39 45 9c             	cmp    %eax,-0x64(%rbp)
  4091a1:	73 b6                	jae    409159 <_ZNSt8__detail10__to_charsIjEESt15to_chars_resultPcS2_T_i+0xaa>
      *__first = __digits[__val];
  4091a3:	8b 45 9c             	mov    -0x64(%rbp),%eax
  4091a6:	0f b6 54 05 b0       	movzbl -0x50(%rbp,%rax,1),%edx
  4091ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4091af:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  4091b1:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4091b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4091b8:	48 01 d0             	add    %rdx,%rax
  4091bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4091bf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4091c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4091ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4091ce:	c9                   	leave
  4091cf:	c3                   	ret

00000000004091d0 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  4091d0:	55                   	push   %rbp
  4091d1:	48 89 e5             	mov    %rsp,%rbp
  4091d4:	48 83 ec 10          	sub    $0x10,%rsp
  4091d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__bit_width(__value); }
  4091dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4091e0:	48 89 c7             	mov    %rax,%rdi
  4091e3:	e8 01 21 00 00       	call   40b2e9 <_ZSt11__bit_widthImEiT_>
  4091e8:	c9                   	leave
  4091e9:	c3                   	ret

00000000004091ea <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  4091ea:	55                   	push   %rbp
  4091eb:	48 89 e5             	mov    %rsp,%rbp
  4091ee:	48 83 ec 60          	sub    $0x60,%rsp
  4091f2:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4091f6:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4091fa:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  4091fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409202:	48 89 c7             	mov    %rax,%rdi
  409205:	e8 c6 ff ff ff       	call   4091d0 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  40920a:	83 c0 03             	add    $0x3,%eax
  40920d:	c1 e8 02             	shr    $0x2,%eax
  409210:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409213:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409217:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  40921b:	48 89 c2             	mov    %rax,%rdx
  40921e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409221:	48 39 c2             	cmp    %rax,%rdx
  409224:	0f 9c c0             	setl   %al
  409227:	0f b6 c0             	movzbl %al,%eax
  40922a:	48 85 c0             	test   %rax,%rax
  40922d:	74 1c                	je     40924b <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x61>
	  __res.ptr = __last;
  40922f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409233:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  409237:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  40923e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409242:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409246:	e9 04 01 00 00       	jmp    40934f <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x165>
      constexpr char __digits[] = {
  40924b:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  409252:	35 36 37
  409255:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  40925c:	64 65 66
  40925f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  409263:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      unsigned __pos = __len - 1;
  409267:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40926a:	83 e8 01             	sub    $0x1,%eax
  40926d:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  409270:	eb 5d                	jmp    4092cf <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0xe5>
	  auto __num = __val & 0xF;
  409272:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409276:	83 e0 0f             	and    $0xf,%eax
  409279:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 4;
  40927d:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[__pos] = __digits[__num];
  409282:	8b 55 fc             	mov    -0x4(%rbp),%edx
  409285:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409289:	48 01 c2             	add    %rax,%rdx
  40928c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  409290:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409294:	48 01 c8             	add    %rcx,%rax
  409297:	0f b6 00             	movzbl (%rax),%eax
  40929a:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  40929c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4092a0:	83 e0 0f             	and    $0xf,%eax
  4092a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 4;
  4092a7:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[__pos - 1] = __digits[__num];
  4092ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4092af:	83 e8 01             	sub    $0x1,%eax
  4092b2:	89 c2                	mov    %eax,%edx
  4092b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4092b8:	48 01 c2             	add    %rax,%rdx
  4092bb:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  4092bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4092c3:	48 01 c8             	add    %rcx,%rax
  4092c6:	0f b6 00             	movzbl (%rax),%eax
  4092c9:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  4092cb:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  4092cf:	48 81 7d a8 ff 00 00 	cmpq   $0xff,-0x58(%rbp)
  4092d6:	00
  4092d7:	77 99                	ja     409272 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x88>
      if (__val >= 0x10)
  4092d9:	48 83 7d a8 0f       	cmpq   $0xf,-0x58(%rbp)
  4092de:	76 3e                	jbe    40931e <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x134>
	  const auto __num = __val & 0xF;
  4092e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4092e4:	83 e0 0f             	and    $0xf,%eax
  4092e7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __val >>= 4;
  4092eb:	48 c1 6d a8 04       	shrq   $0x4,-0x58(%rbp)
	  __first[1] = __digits[__num];
  4092f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4092f4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4092f8:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  4092fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409300:	48 01 c8             	add    %rcx,%rax
  409303:	0f b6 00             	movzbl (%rax),%eax
  409306:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  409308:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40930c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409310:	48 01 d0             	add    %rdx,%rax
  409313:	0f b6 10             	movzbl (%rax),%edx
  409316:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40931a:	88 10                	mov    %dl,(%rax)
  40931c:	eb 14                	jmp    409332 <_ZNSt8__detail13__to_chars_16ImEESt15to_chars_resultPcS2_T_+0x148>
	__first[0] = __digits[__val];
  40931e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  409322:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  409326:	48 01 d0             	add    %rdx,%rax
  409329:	0f b6 10             	movzbl (%rax),%edx
  40932c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409330:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  409332:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409335:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409339:	48 01 d0             	add    %rdx,%rax
  40933c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  409340:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  409347:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40934b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  40934f:	c9                   	leave
  409350:	c3                   	ret

0000000000409351 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  409351:	55                   	push   %rbp
  409352:	48 89 e5             	mov    %rsp,%rbp
  409355:	48 83 ec 40          	sub    $0x40,%rsp
  409359:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40935d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  409361:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  409365:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409369:	be 0a 00 00 00       	mov    $0xa,%esi
  40936e:	48 89 c7             	mov    %rax,%rdi
  409371:	e8 c7 b8 ff ff       	call   404c3d <_ZNSt8__detail14__to_chars_lenImEEjT_i>
  409376:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409379:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40937d:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  409381:	48 89 c2             	mov    %rax,%rdx
  409384:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409387:	48 39 c2             	cmp    %rax,%rdx
  40938a:	0f 9c c0             	setl   %al
  40938d:	0f b6 c0             	movzbl %al,%eax
  409390:	48 85 c0             	test   %rax,%rax
  409393:	74 19                	je     4093ae <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_+0x5d>
	  __res.ptr = __last;
  409395:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409399:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  40939d:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  4093a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4093a8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4093ac:	eb 32                	jmp    4093e0 <_ZNSt8__detail13__to_chars_10ImEESt15to_chars_resultPcS2_T_+0x8f>
      __detail::__to_chars_10_impl(__first, __len, __val);
  4093ae:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4093b2:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  4093b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4093b9:	89 ce                	mov    %ecx,%esi
  4093bb:	48 89 c7             	mov    %rax,%rdi
  4093be:	e8 7d e6 ff ff       	call   407a40 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>
      __res.ptr = __first + __len;
  4093c3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4093c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4093ca:	48 01 d0             	add    %rdx,%rax
  4093cd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4093d1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4093d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4093dc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4093e0:	c9                   	leave
  4093e1:	c3                   	ret

00000000004093e2 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  4093e2:	55                   	push   %rbp
  4093e3:	48 89 e5             	mov    %rsp,%rbp
  4093e6:	48 83 ec 50          	sub    $0x50,%rsp
  4093ea:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  4093ee:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  4093f2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      unsigned __len = 0;
  4093f6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  4093fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409401:	48 89 c7             	mov    %rax,%rdi
  409404:	e8 c7 fd ff ff       	call   4091d0 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  409409:	83 c0 02             	add    $0x2,%eax
  40940c:	89 c2                	mov    %eax,%edx
  40940e:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  409413:	48 0f af c2          	imul   %rdx,%rax
  409417:	48 c1 e8 20          	shr    $0x20,%rax
  40941b:	d1 e8                	shr    %eax
  40941d:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409420:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409424:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  409428:	48 89 c2             	mov    %rax,%rdx
  40942b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40942e:	48 39 c2             	cmp    %rax,%rdx
  409431:	0f 9c c0             	setl   %al
  409434:	0f b6 c0             	movzbl %al,%eax
  409437:	48 85 c0             	test   %rax,%rax
  40943a:	74 1c                	je     409458 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x76>
	  __res.ptr = __last;
  40943c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409440:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  409444:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  40944b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40944f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409453:	e9 c8 00 00 00       	jmp    409520 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x13e>
      unsigned __pos = __len - 1;
  409458:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40945b:	83 e8 01             	sub    $0x1,%eax
  40945e:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  409461:	eb 51                	jmp    4094b4 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0xd2>
	  auto __num = __val & 7;
  409463:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409467:	83 e0 07             	and    $0x7,%eax
  40946a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 3;
  40946e:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[__pos] = '0' + __num;
  409473:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409477:	8d 48 30             	lea    0x30(%rax),%ecx
  40947a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40947d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409481:	48 01 d0             	add    %rdx,%rax
  409484:	89 ca                	mov    %ecx,%edx
  409486:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  409488:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40948c:	83 e0 07             	and    $0x7,%eax
  40948f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __val >>= 3;
  409493:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[__pos - 1] = '0' + __num;
  409498:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40949c:	8d 50 30             	lea    0x30(%rax),%edx
  40949f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4094a2:	83 e8 01             	sub    $0x1,%eax
  4094a5:	89 c1                	mov    %eax,%ecx
  4094a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4094ab:	48 01 c8             	add    %rcx,%rax
  4094ae:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  4094b0:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  4094b4:	48 83 7d b8 3f       	cmpq   $0x3f,-0x48(%rbp)
  4094b9:	77 a8                	ja     409463 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x81>
      if (__val >= 010)
  4094bb:	48 83 7d b8 07       	cmpq   $0x7,-0x48(%rbp)
  4094c0:	76 32                	jbe    4094f4 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x112>
	  auto const __num = __val & 7;
  4094c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4094c6:	83 e0 07             	and    $0x7,%eax
  4094c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __val >>= 3;
  4094cd:	48 c1 6d b8 03       	shrq   $0x3,-0x48(%rbp)
	  __first[1] = '0' + __num;
  4094d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4094d6:	8d 50 30             	lea    0x30(%rax),%edx
  4094d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4094dd:	48 83 c0 01          	add    $0x1,%rax
  4094e1:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  4094e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4094e7:	83 c0 30             	add    $0x30,%eax
  4094ea:	89 c2                	mov    %eax,%edx
  4094ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4094f0:	88 10                	mov    %dl,(%rax)
  4094f2:	eb 0f                	jmp    409503 <_ZNSt8__detail12__to_chars_8ImEESt15to_chars_resultPcS2_T_+0x121>
	__first[0] = '0' + __val;
  4094f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4094f8:	83 c0 30             	add    $0x30,%eax
  4094fb:	89 c2                	mov    %eax,%edx
  4094fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409501:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  409503:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409506:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40950a:	48 01 d0             	add    %rdx,%rax
  40950d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  409511:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  409518:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40951c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  409520:	c9                   	leave
  409521:	c3                   	ret

0000000000409522 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  409522:	55                   	push   %rbp
  409523:	48 89 e5             	mov    %rsp,%rbp
  409526:	48 83 ec 40          	sub    $0x40,%rsp
  40952a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40952e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  409532:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  409536:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40953a:	48 89 c7             	mov    %rax,%rdi
  40953d:	e8 8e fc ff ff       	call   4091d0 <_ZNSt8__detail16__to_chars_len_2ImEEjT_>
  409542:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409545:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409549:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  40954d:	48 89 c2             	mov    %rax,%rdx
  409550:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409553:	48 39 c2             	cmp    %rax,%rdx
  409556:	0f 9c c0             	setl   %al
  409559:	0f b6 c0             	movzbl %al,%eax
  40955c:	48 85 c0             	test   %rax,%rax
  40955f:	74 19                	je     40957a <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x58>
	  __res.ptr = __last;
  409561:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409565:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  409569:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  409570:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409574:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409578:	eb 5a                	jmp    4095d4 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0xb2>
      unsigned __pos = __len - 1;
  40957a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40957d:	83 e8 01             	sub    $0x1,%eax
  409580:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  409583:	eb 25                	jmp    4095aa <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x88>
	  __first[__pos--] = '0' + (__val & 1);
  409585:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409589:	83 e0 01             	and    $0x1,%eax
  40958c:	83 c0 30             	add    $0x30,%eax
  40958f:	89 c6                	mov    %eax,%esi
  409591:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  409595:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409598:	8d 50 ff             	lea    -0x1(%rax),%edx
  40959b:	89 55 fc             	mov    %edx,-0x4(%rbp)
  40959e:	89 c0                	mov    %eax,%eax
  4095a0:	48 01 c8             	add    %rcx,%rax
  4095a3:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  4095a6:	48 d1 6d c8          	shrq   -0x38(%rbp)
      while (__pos)
  4095aa:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4095ae:	75 d5                	jne    409585 <_ZNSt8__detail12__to_chars_2ImEESt15to_chars_resultPcS2_T_+0x63>
      __first[0] = '1';
  4095b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4095b4:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  4095b7:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4095ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4095be:	48 01 d0             	add    %rdx,%rax
  4095c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4095c5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4095cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4095d0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4095d4:	c9                   	leave
  4095d5:	c3                   	ret

00000000004095d6 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  4095d6:	55                   	push   %rbp
  4095d7:	48 89 e5             	mov    %rsp,%rbp
  4095da:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  4095de:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  4095e2:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  4095e6:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  4095ea:	89 4d 84             	mov    %ecx,-0x7c(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  4095ed:	8b 55 84             	mov    -0x7c(%rbp),%edx
  4095f0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4095f4:	89 d6                	mov    %edx,%esi
  4095f6:	48 89 c7             	mov    %rax,%rdi
  4095f9:	e8 3f b6 ff ff       	call   404c3d <_ZNSt8__detail14__to_chars_lenImEEjT_i>
  4095fe:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  409601:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  409605:	48 2b 45 98          	sub    -0x68(%rbp),%rax
  409609:	48 89 c2             	mov    %rax,%rdx
  40960c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40960f:	48 39 c2             	cmp    %rax,%rdx
  409612:	0f 9c c0             	setl   %al
  409615:	0f b6 c0             	movzbl %al,%eax
  409618:	48 85 c0             	test   %rax,%rax
  40961b:	74 1c                	je     409639 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x63>
	  __res.ptr = __last;
  40961d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  409621:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  __res.ec = errc::value_too_large;
  409625:	c7 45 d8 4b 00 00 00 	movl   $0x4b,-0x28(%rbp)
	  return __res;
  40962c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409630:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409634:	e9 dc 00 00 00       	jmp    409715 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x13f>
      unsigned __pos = __len - 1;
  409639:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40963c:	83 e8 01             	sub    $0x1,%eax
  40963f:	89 45 fc             	mov    %eax,-0x4(%rbp)
      constexpr char __digits[] = {
  409642:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  409649:	35 36 37
  40964c:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  409653:	64 65 66
  409656:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40965a:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40965e:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  409665:	6c 6d 6e
  409668:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  40966f:	74 75 76
  409672:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  409676:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40967a:	c7 45 c0 77 78 79 7a 	movl   $0x7a797877,-0x40(%rbp)
      while (__val >= (unsigned)__base)
  409681:	eb 56                	jmp    4096d9 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0x103>
	  auto const __quo = __val / __base;
  409683:	8b 45 84             	mov    -0x7c(%rbp),%eax
  409686:	48 63 f8             	movslq %eax,%rdi
  409689:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40968d:	ba 00 00 00 00       	mov    $0x0,%edx
  409692:	48 f7 f7             	div    %rdi
  409695:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  auto const __rem = __val % __base;
  409699:	8b 45 84             	mov    -0x7c(%rbp),%eax
  40969c:	48 63 c8             	movslq %eax,%rcx
  40969f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4096a3:	ba 00 00 00 00       	mov    $0x0,%edx
  4096a8:	48 f7 f1             	div    %rcx
  4096ab:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __first[__pos--] = __digits[__rem];
  4096af:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  4096b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4096b7:	48 01 d0             	add    %rdx,%rax
  4096ba:	0f b6 10             	movzbl (%rax),%edx
  4096bd:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  4096c1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4096c4:	8d 48 ff             	lea    -0x1(%rax),%ecx
  4096c7:	89 4d fc             	mov    %ecx,-0x4(%rbp)
  4096ca:	89 c0                	mov    %eax,%eax
  4096cc:	48 01 f0             	add    %rsi,%rax
  4096cf:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  4096d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4096d5:	48 89 45 88          	mov    %rax,-0x78(%rbp)
      while (__val >= (unsigned)__base)
  4096d9:	8b 45 84             	mov    -0x7c(%rbp),%eax
  4096dc:	89 c0                	mov    %eax,%eax
  4096de:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
  4096e2:	73 9f                	jae    409683 <_ZNSt8__detail10__to_charsImEESt15to_chars_resultPcS2_T_i+0xad>
      *__first = __digits[__val];
  4096e4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  4096e8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4096ec:	48 01 d0             	add    %rdx,%rax
  4096ef:	0f b6 10             	movzbl (%rax),%edx
  4096f2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4096f6:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  4096f8:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4096fb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4096ff:	48 01 d0             	add    %rdx,%rax
  409702:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __res.ec = {};
  409706:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
      return __res;
  40970d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409711:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  409715:	c9                   	leave
  409716:	c3                   	ret

0000000000409717 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  409717:	55                   	push   %rbp
  409718:	48 89 e5             	mov    %rsp,%rbp
  40971b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40971f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409723:	5d                   	pop    %rbp
  409724:	c3                   	ret

0000000000409725 <_ZSt12construct_atIcJRcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
  409725:	55                   	push   %rbp
  409726:	48 89 e5             	mov    %rsp,%rbp
  409729:	53                   	push   %rbx
  40972a:	48 83 ec 18          	sub    $0x18,%rsp
  40972e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  409732:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  409736:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40973a:	48 89 c6             	mov    %rax,%rsi
  40973d:	bf 01 00 00 00       	mov    $0x1,%edi
  409742:	e8 64 af ff ff       	call   4046ab <_ZnwmPv>
  409747:	48 89 c3             	mov    %rax,%rbx
  40974a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40974e:	48 89 c7             	mov    %rax,%rdi
  409751:	e8 bd 1b 00 00       	call   40b313 <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>
  409756:	0f b6 00             	movzbl (%rax),%eax
  409759:	88 03                	mov    %al,(%rbx)
  40975b:	48 89 d8             	mov    %rbx,%rax
  40975e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409762:	c9                   	leave
  409763:	c3                   	ret

0000000000409764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>:
      _M_length(size_type __length)
  409764:	55                   	push   %rbp
  409765:	48 89 e5             	mov    %rsp,%rbp
  409768:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40976c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_string_length = __length; }
  409770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409774:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409778:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40977c:	90                   	nop
  40977d:	5d                   	pop    %rbp
  40977e:	c3                   	ret
  40977f:	90                   	nop

0000000000409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
  409780:	55                   	push   %rbp
  409781:	48 89 e5             	mov    %rsp,%rbp
  409784:	48 83 ec 10          	sub    $0x10,%rsp
  409788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!_M_is_local())
  40978c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409790:	48 89 c7             	mov    %rax,%rdi
  409793:	e8 b8 e0 ff ff       	call   407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  409798:	83 f0 01             	xor    $0x1,%eax
  40979b:	84 c0                	test   %al,%al
  40979d:	74 17                	je     4097b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x36>
	  _M_destroy(_M_allocated_capacity);
  40979f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4097a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4097a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4097ab:	48 89 d6             	mov    %rdx,%rsi
  4097ae:	48 89 c7             	mov    %rax,%rdi
  4097b1:	e8 6c 1b 00 00       	call   40b322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
      }
  4097b6:	90                   	nop
  4097b7:	c9                   	leave
  4097b8:	c3                   	ret
  4097b9:	90                   	nop

00000000004097ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
  4097ba:	55                   	push   %rbp
  4097bb:	48 89 e5             	mov    %rsp,%rbp
  4097be:	48 83 ec 10          	sub    $0x10,%rsp
  4097c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4097c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4097ca:	48 83 c0 10          	add    $0x10,%rax
  4097ce:	48 89 c7             	mov    %rax,%rdi
  4097d1:	e8 c4 1c 00 00       	call   40b49a <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>
      }
  4097d6:	c9                   	leave
  4097d7:	c3                   	ret

00000000004097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
  4097d8:	55                   	push   %rbp
  4097d9:	48 89 e5             	mov    %rsp,%rbp
  4097dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4097e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_dataplus._M_p = __p; }
  4097e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4097e8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4097ec:	48 89 10             	mov    %rdx,(%rax)
  4097ef:	90                   	nop
  4097f0:	5d                   	pop    %rbp
  4097f1:	c3                   	ret

00000000004097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>:
      _M_capacity(size_type __capacity)
  4097f2:	55                   	push   %rbp
  4097f3:	48 89 e5             	mov    %rsp,%rbp
  4097f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4097fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_allocated_capacity = __capacity; }
  4097fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409802:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409806:	48 89 50 10          	mov    %rdx,0x10(%rax)
  40980a:	90                   	nop
  40980b:	5d                   	pop    %rbp
  40980c:	c3                   	ret
  40980d:	90                   	nop

000000000040980e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      const _CharT*
      data() const _GLIBCXX_NOEXCEPT
  40980e:	55                   	push   %rbp
  40980f:	48 89 e5             	mov    %rsp,%rbp
  409812:	48 83 ec 10          	sub    $0x10,%rsp
  409816:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
  40981a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40981e:	48 89 c7             	mov    %rax,%rdi
  409821:	e8 f0 dc ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  409826:	c9                   	leave
  409827:	c3                   	ret

0000000000409828 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
  409828:	55                   	push   %rbp
  409829:	48 89 e5             	mov    %rsp,%rbp
  40982c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  409830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409834:	5d                   	pop    %rbp
  409835:	c3                   	ret

0000000000409836 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_>:
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  409836:	55                   	push   %rbp
  409837:	48 89 e5             	mov    %rsp,%rbp
  40983a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40983e:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  409842:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  409846:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40984a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40984e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  409852:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  409856:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40985a:	90                   	nop
      return std::__distance(__first, __last,
  40985b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40985f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409863:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409867:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      return __last - __first;
  40986b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40986f:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  409873:	48 c1 f8 02          	sar    $0x2,%rax
			     std::__iterator_category(__first));
  409877:	90                   	nop
      _DistanceType __len = std::distance(__first, __last);
  409878:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  40987c:	e9 82 00 00 00       	jmp    409903 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xcd>
	  _DistanceType __half = __len >> 1;
  409881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409885:	48 d1 f8             	sar    %rax
  409888:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  _ForwardIterator __middle = __first;
  40988c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  409890:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  409894:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409898:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    __attribute__((__always_inline__))
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  40989c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4098a0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4098a4:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  4098a8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  4098ac:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  4098ad:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4098b1:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  4098b5:	48 89 d6             	mov    %rdx,%rsi
  4098b8:	48 89 c7             	mov    %rax,%rdi
  4098bb:	e8 46 2f 00 00       	call   40c806 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>
    }
  4098c0:	90                   	nop
	  if (__comp(__val, __middle))
  4098c1:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4098c5:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  4098c9:	48 8d 45 87          	lea    -0x79(%rbp),%rax
  4098cd:	48 89 ce             	mov    %rcx,%rsi
  4098d0:	48 89 c7             	mov    %rax,%rdi
  4098d3:	e8 dc 1b 00 00       	call   40b4b4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKDiPS3_EEbRT_T0_>
  4098d8:	84 c0                	test   %al,%al
  4098da:	74 0a                	je     4098e6 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xb0>
	    __len = __half;
  4098dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4098e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4098e4:	eb 1d                	jmp    409903 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0xcd>
	      __first = __middle;
  4098e6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4098ea:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	      ++__first;
  4098ee:	48 83 45 98 04       	addq   $0x4,-0x68(%rbp)
	      __len = __len - __half - 1;
  4098f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4098f7:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  4098fb:	48 83 e8 01          	sub    $0x1,%rax
  4098ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  409903:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  409908:	0f 8f 73 ff ff ff    	jg     409881 <_ZSt13__upper_boundIPKDiDiN9__gnu_cxx5__ops14_Val_less_iterEET_S5_S5_RKT0_T1_+0x4b>
      return __first;
  40990e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    }
  409912:	c9                   	leave
  409913:	c3                   	ret

0000000000409914 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_>:
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  409914:	55                   	push   %rbp
  409915:	48 89 e5             	mov    %rsp,%rbp
  409918:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40991c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  409920:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  409924:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  409928:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40992c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  409930:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  409934:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  409938:	90                   	nop
      return std::__distance(__first, __last,
  409939:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40993d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409941:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409945:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      return __last - __first;
  409949:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40994d:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  409951:	48 c1 f8 02          	sar    $0x2,%rax
			     std::__iterator_category(__first));
  409955:	90                   	nop
      _DistanceType __len = std::distance(__first, __last);
  409956:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  40995a:	e9 82 00 00 00       	jmp    4099e1 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xcd>
	  _DistanceType __half = __len >> 1;
  40995f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409963:	48 d1 f8             	sar    %rax
  409966:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  _ForwardIterator __middle = __first;
  40996a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40996e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  409972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409976:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  40997a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40997e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  409982:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  409986:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40998a:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  40998b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40998f:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  409993:	48 89 d6             	mov    %rdx,%rsi
  409996:	48 89 c7             	mov    %rax,%rdi
  409999:	e8 90 2e 00 00       	call   40c82e <_ZSt9__advanceIPKjlEvRT_T0_St26random_access_iterator_tag>
    }
  40999e:	90                   	nop
	  if (__comp(__middle, __val))
  40999f:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  4099a3:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4099a7:	48 8d 45 87          	lea    -0x79(%rbp),%rax
  4099ab:	48 89 ce             	mov    %rcx,%rsi
  4099ae:	48 89 c7             	mov    %rax,%rdi
  4099b1:	e8 22 1b 00 00       	call   40b4d8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPKjS3_EEbT_RT0_>
  4099b6:	84 c0                	test   %al,%al
  4099b8:	74 1f                	je     4099d9 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xc5>
	      __first = __middle;
  4099ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4099be:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	      ++__first;
  4099c2:	48 83 45 98 04       	addq   $0x4,-0x68(%rbp)
	      __len = __len - __half - 1;
  4099c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4099cb:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  4099cf:	48 83 e8 01          	sub    $0x1,%rax
  4099d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4099d7:	eb 08                	jmp    4099e1 <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0xcd>
	    __len = __half;
  4099d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4099dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__len > 0)
  4099e1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4099e6:	0f 8f 73 ff ff ff    	jg     40995f <_ZSt13__lower_boundIPKjjN9__gnu_cxx5__ops14_Iter_less_valEET_S5_S5_RKT0_T1_+0x4b>
      return __first;
  4099ec:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    }
  4099f0:	c9                   	leave
  4099f1:	c3                   	ret

00000000004099f2 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKDiEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
  4099f2:	55                   	push   %rbp
  4099f3:	48 89 e5             	mov    %rsp,%rbp
  4099f6:	48 83 ec 20          	sub    $0x20,%rsp
  4099fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _Iter_equals_val<_Value>(__val); }
  4099fe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409a02:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  409a06:	48 89 d6             	mov    %rdx,%rsi
  409a09:	48 89 c7             	mov    %rax,%rdi
  409a0c:	e8 eb 1a 00 00       	call   40b4fc <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEC1ERS2_>
  409a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a15:	c9                   	leave
  409a16:	c3                   	ret

0000000000409a17 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
  409a17:	55                   	push   %rbp
  409a18:	48 89 e5             	mov    %rsp,%rbp
  409a1b:	48 83 ec 20          	sub    $0x20,%rsp
  409a1f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409a23:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409a27:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  409a2b:	90                   	nop
    {
      return __find_if(__first, __last, __pred,
  409a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a30:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409a34:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  409a38:	48 89 ce             	mov    %rcx,%rsi
  409a3b:	48 89 c7             	mov    %rax,%rdi
  409a3e:	e8 d3 1a 00 00       	call   40b516 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag>
		       std::__iterator_category(__first));
    }
  409a43:	c9                   	leave
  409a44:	c3                   	ret

0000000000409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
  409a45:	55                   	push   %rbp
  409a46:	48 89 e5             	mov    %rsp,%rbp
  409a49:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  409a4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409a51:	5d                   	pop    %rbp
  409a52:	c3                   	ret
  409a53:	90                   	nop

0000000000409a54 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clISt9monostateEEDaSJ_>:
	    std::visit_format_arg([&](auto& __arg) {
  409a54:	55                   	push   %rbp
  409a55:	48 89 e5             	mov    %rsp,%rbp
  409a58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409a5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409a60:	90                   	nop
  409a61:	5d                   	pop    %rbp
  409a62:	c3                   	ret
  409a63:	90                   	nop

0000000000409a64 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_>:
  409a64:	55                   	push   %rbp
  409a65:	48 89 e5             	mov    %rsp,%rbp
  409a68:	53                   	push   %rbx
  409a69:	48 83 ec 48          	sub    $0x48,%rsp
  409a6d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  409a71:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
		  size_t __len = 4 + !__arg;
  409a75:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409a79:	0f b6 00             	movzbl (%rax),%eax
  409a7c:	83 f0 01             	xor    $0x1,%eax
  409a7f:	0f b6 c0             	movzbl %al,%eax
  409a82:	83 c0 04             	add    $0x4,%eax
  409a85:	48 98                	cltq
  409a87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  const char* __chars[] = { "false", "true" };
  409a8b:	48 c7 45 d0 47 b2 41 	movq   $0x41b247,-0x30(%rbp)
  409a92:	00
  409a93:	48 c7 45 d8 4d b2 41 	movq   $0x41b24d,-0x28(%rbp)
  409a9a:	00
		  if (auto __res = __sink_out._M_reserve(__len))
  409a9b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409a9f:	48 8b 00             	mov    (%rax),%rax
  409aa2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409aa6:	48 89 d6             	mov    %rdx,%rsi
  409aa9:	48 89 c7             	mov    %rax,%rdi
  409aac:	e8 6b 00 00 00       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409ab1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  409ab5:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  409ab9:	48 89 c7             	mov    %rax,%rdi
  409abc:	e8 a1 1d 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409ac1:	84 c0                	test   %al,%al
  409ac3:	74 50                	je     409b15 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_+0xb1>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
  409ac5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  409ac9:	0f b6 00             	movzbl (%rax),%eax
  409acc:	0f b6 c0             	movzbl %al,%eax
  409acf:	48 98                	cltq
  409ad1:	48 8b 5c c5 d0       	mov    -0x30(%rbp,%rax,8),%rbx
  409ad6:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  409ada:	48 89 c7             	mov    %rax,%rdi
  409add:	e8 98 1d 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409ae2:	48 89 c1             	mov    %rax,%rcx
  409ae5:	48 89 de             	mov    %rbx,%rsi
  409ae8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409aec:	48 89 c2             	mov    %rax,%rdx
  409aef:	48 89 cf             	mov    %rcx,%rdi
  409af2:	e8 39 a7 ff ff       	call   404230 <memcpy@plt>
		      __res._M_bump(__len);
  409af7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  409afb:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  409aff:	48 89 d6             	mov    %rdx,%rsi
  409b02:	48 89 c7             	mov    %rax,%rdi
  409b05:	e8 92 1d 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409b0a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  409b0e:	48 8b 40 08          	mov    0x8(%rax),%rax
  409b12:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409b15:	90                   	nop
  409b16:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409b1a:	c9                   	leave
  409b1b:	c3                   	ret

0000000000409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>:
      _M_reserve(size_t __n) const
  409b1c:	55                   	push   %rbp
  409b1d:	48 89 e5             	mov    %rsp,%rbp
  409b20:	48 83 ec 10          	sub    $0x10,%rsp
  409b24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409b28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_sink->_M_reserve(__n); }
  409b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409b30:	48 8b 00             	mov    (%rax),%rax
  409b33:	48 8b 00             	mov    (%rax),%rax
  409b36:	48 83 c0 08          	add    $0x8,%rax
  409b3a:	48 8b 08             	mov    (%rax),%rcx
  409b3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409b41:	48 8b 00             	mov    (%rax),%rax
  409b44:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409b48:	48 89 d6             	mov    %rdx,%rsi
  409b4b:	48 89 c7             	mov    %rax,%rdi
  409b4e:	ff d1                	call   *%rcx
  409b50:	c9                   	leave
  409b51:	c3                   	ret

0000000000409b52 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_>:
	    std::visit_format_arg([&](auto& __arg) {
  409b52:	55                   	push   %rbp
  409b53:	48 89 e5             	mov    %rsp,%rbp
  409b56:	53                   	push   %rbx
  409b57:	48 83 ec 28          	sub    $0x28,%rsp
  409b5b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409b5f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  if (auto __res = __sink_out._M_reserve(1))
  409b63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409b67:	48 8b 00             	mov    (%rax),%rax
  409b6a:	be 01 00 00 00       	mov    $0x1,%esi
  409b6f:	48 89 c7             	mov    %rax,%rdi
  409b72:	e8 a5 ff ff ff       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409b77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  409b7b:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  409b7f:	48 89 c7             	mov    %rax,%rdi
  409b82:	e8 db 1c 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409b87:	84 c0                	test   %al,%al
  409b89:	74 31                	je     409bbc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_+0x6a>
		      *__res.get() = __arg;
  409b8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409b8f:	0f b6 18             	movzbl (%rax),%ebx
  409b92:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  409b96:	48 89 c7             	mov    %rax,%rdi
  409b99:	e8 dc 1c 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409b9e:	88 18                	mov    %bl,(%rax)
		      __res._M_bump(1);
  409ba0:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  409ba4:	be 01 00 00 00       	mov    $0x1,%esi
  409ba9:	48 89 c7             	mov    %rax,%rdi
  409bac:	e8 eb 1c 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409bb1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409bb5:	48 8b 40 08          	mov    0x8(%rax),%rax
  409bb9:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409bbc:	90                   	nop
  409bbd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  409bc1:	c9                   	leave
  409bc2:	c3                   	ret
  409bc3:	90                   	nop

0000000000409bc4 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_>:
  409bc4:	55                   	push   %rbp
  409bc5:	48 89 e5             	mov    %rsp,%rbp
  409bc8:	48 83 ec 30          	sub    $0x30,%rsp
  409bcc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409bd0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  409bd4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409bd8:	8b 00                	mov    (%rax),%eax
  409bda:	c1 e8 1f             	shr    $0x1f,%eax
  409bdd:	88 45 fb             	mov    %al,-0x5(%rbp)
		  if (__neg)
  409be0:	80 7d fb 00          	cmpb   $0x0,-0x5(%rbp)
  409be4:	74 0d                	je     409bf3 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0x2f>
		    __uval = make_unsigned_t<_Tp>(~__arg) + 1u;
  409be6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409bea:	8b 00                	mov    (%rax),%eax
  409bec:	f7 d8                	neg    %eax
  409bee:	89 45 fc             	mov    %eax,-0x4(%rbp)
  409bf1:	eb 09                	jmp    409bfc <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0x38>
		    __uval = __arg;
  409bf3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409bf7:	8b 00                	mov    (%rax),%eax
  409bf9:	89 45 fc             	mov    %eax,-0x4(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409bfc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  409bff:	be 0a 00 00 00       	mov    $0xa,%esi
  409c04:	89 c7                	mov    %eax,%edi
  409c06:	e8 aa af ff ff       	call   404bb5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  409c0b:	89 45 f4             	mov    %eax,-0xc(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409c0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c12:	48 8b 00             	mov    (%rax),%rax
  409c15:	0f b6 4d fb          	movzbl -0x5(%rbp),%ecx
  409c19:	8b 55 f4             	mov    -0xc(%rbp),%edx
  409c1c:	01 ca                	add    %ecx,%edx
  409c1e:	89 d2                	mov    %edx,%edx
  409c20:	48 89 d6             	mov    %rdx,%rsi
  409c23:	48 89 c7             	mov    %rax,%rdi
  409c26:	e8 f1 fe ff ff       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409c2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409c2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409c33:	48 89 c7             	mov    %rax,%rdi
  409c36:	e8 27 1c 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409c3b:	84 c0                	test   %al,%al
  409c3d:	74 58                	je     409c97 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_+0xd3>
		      auto __ptr = __res.get();
  409c3f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409c43:	48 89 c7             	mov    %rax,%rdi
  409c46:	e8 2f 1c 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409c4b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  409c4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409c53:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409c56:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  409c5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409c5e:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  409c62:	8b 55 fc             	mov    -0x4(%rbp),%edx
  409c65:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409c68:	89 c6                	mov    %eax,%esi
  409c6a:	48 89 cf             	mov    %rcx,%rdi
  409c6d:	e8 29 d9 ff ff       	call   40759b <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409c72:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  409c76:	8b 45 f4             	mov    -0xc(%rbp),%eax
  409c79:	01 d0                	add    %edx,%eax
  409c7b:	89 c2                	mov    %eax,%edx
  409c7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409c81:	48 89 d6             	mov    %rdx,%rsi
  409c84:	48 89 c7             	mov    %rax,%rdi
  409c87:	e8 10 1c 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409c8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409c90:	48 8b 40 08          	mov    0x8(%rax),%rax
  409c94:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409c97:	90                   	nop
  409c98:	c9                   	leave
  409c99:	c3                   	ret

0000000000409c9a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_>:
  409c9a:	55                   	push   %rbp
  409c9b:	48 89 e5             	mov    %rsp,%rbp
  409c9e:	48 83 ec 30          	sub    $0x30,%rsp
  409ca2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409ca6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  409caa:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		    __uval = __arg;
  409cae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409cb2:	8b 00                	mov    (%rax),%eax
  409cb4:	89 45 f8             	mov    %eax,-0x8(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409cb7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  409cba:	be 0a 00 00 00       	mov    $0xa,%esi
  409cbf:	89 c7                	mov    %eax,%edi
  409cc1:	e8 ef ae ff ff       	call   404bb5 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
  409cc6:	89 45 f4             	mov    %eax,-0xc(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409cc9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409ccd:	48 8b 00             	mov    (%rax),%rax
  409cd0:	8b 55 f4             	mov    -0xc(%rbp),%edx
  409cd3:	48 89 d6             	mov    %rdx,%rsi
  409cd6:	48 89 c7             	mov    %rax,%rdi
  409cd9:	e8 3e fe ff ff       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409cde:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409ce2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409ce6:	48 89 c7             	mov    %rax,%rdi
  409ce9:	e8 74 1b 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409cee:	84 c0                	test   %al,%al
  409cf0:	74 48                	je     409d3a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_+0xa0>
		      auto __ptr = __res.get();
  409cf2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409cf6:	48 89 c7             	mov    %rax,%rdi
  409cf9:	e8 7c 1b 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409cfe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  409d02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409d06:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409d09:	8b 55 f8             	mov    -0x8(%rbp),%edx
  409d0c:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  409d0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409d13:	89 ce                	mov    %ecx,%esi
  409d15:	48 89 c7             	mov    %rax,%rdi
  409d18:	e8 7e d8 ff ff       	call   40759b <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409d1d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  409d20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409d24:	48 89 d6             	mov    %rdx,%rsi
  409d27:	48 89 c7             	mov    %rax,%rdi
  409d2a:	e8 6d 1b 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409d2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409d33:	48 8b 40 08          	mov    0x8(%rax),%rax
  409d37:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409d3a:	90                   	nop
  409d3b:	c9                   	leave
  409d3c:	c3                   	ret
  409d3d:	90                   	nop

0000000000409d3e <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_>:
  409d3e:	55                   	push   %rbp
  409d3f:	48 89 e5             	mov    %rsp,%rbp
  409d42:	48 83 ec 30          	sub    $0x30,%rsp
  409d46:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  409d4a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		  const bool __neg = __arg < 0;
  409d4e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409d52:	48 8b 00             	mov    (%rax),%rax
  409d55:	48 c1 e8 3f          	shr    $0x3f,%rax
  409d59:	88 45 f7             	mov    %al,-0x9(%rbp)
		  if (__neg)
  409d5c:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  409d60:	74 10                	je     409d72 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0x34>
		    __uval = make_unsigned_t<_Tp>(~__arg) + 1u;
  409d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409d66:	48 8b 00             	mov    (%rax),%rax
  409d69:	48 f7 d8             	neg    %rax
  409d6c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409d70:	eb 0b                	jmp    409d7d <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0x3f>
		    __uval = __arg;
  409d72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409d76:	48 8b 00             	mov    (%rax),%rax
  409d79:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409d7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  409d81:	be 0a 00 00 00       	mov    $0xa,%esi
  409d86:	48 89 c7             	mov    %rax,%rdi
  409d89:	e8 40 af ff ff       	call   404cce <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
  409d8e:	89 45 f0             	mov    %eax,-0x10(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409d91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409d95:	48 8b 00             	mov    (%rax),%rax
  409d98:	0f b6 4d f7          	movzbl -0x9(%rbp),%ecx
  409d9c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  409d9f:	01 ca                	add    %ecx,%edx
  409da1:	89 d2                	mov    %edx,%edx
  409da3:	48 89 d6             	mov    %rdx,%rsi
  409da6:	48 89 c7             	mov    %rax,%rdi
  409da9:	e8 6e fd ff ff       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409dae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409db2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409db6:	48 89 c7             	mov    %rax,%rdi
  409db9:	e8 a4 1a 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409dbe:	84 c0                	test   %al,%al
  409dc0:	74 59                	je     409e1b <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_+0xdd>
		      auto __ptr = __res.get();
  409dc2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409dc6:	48 89 c7             	mov    %rax,%rdi
  409dc9:	e8 ac 1a 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409dce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		      *__ptr = '-';
  409dd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409dd6:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409dd9:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  409ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  409de1:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  409de5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  409de9:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409dec:	89 c6                	mov    %eax,%esi
  409dee:	48 89 cf             	mov    %rcx,%rdi
  409df1:	e8 3b df ff ff       	call   407d31 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409df6:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  409dfa:	8b 45 f0             	mov    -0x10(%rbp),%eax
  409dfd:	01 d0                	add    %edx,%eax
  409dff:	89 c2                	mov    %eax,%edx
  409e01:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409e05:	48 89 d6             	mov    %rdx,%rsi
  409e08:	48 89 c7             	mov    %rax,%rdi
  409e0b:	e8 8c 1a 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409e10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  409e14:	48 8b 40 08          	mov    0x8(%rax),%rax
  409e18:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409e1b:	90                   	nop
  409e1c:	c9                   	leave
  409e1d:	c3                   	ret

0000000000409e1e <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_>:
  409e1e:	55                   	push   %rbp
  409e1f:	48 89 e5             	mov    %rsp,%rbp
  409e22:	48 83 ec 40          	sub    $0x40,%rsp
  409e26:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  409e2a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  const bool __neg = __arg < 0;
  409e2e:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		    __uval = __arg;
  409e32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409e36:	48 8b 00             	mov    (%rax),%rax
  409e39:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		  const auto __n = __detail::__to_chars_len(__uval);
  409e3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  409e41:	be 0a 00 00 00       	mov    $0xa,%esi
  409e46:	48 89 c7             	mov    %rax,%rdi
  409e49:	e8 80 ae ff ff       	call   404cce <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
  409e4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
  409e51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409e55:	48 8b 00             	mov    (%rax),%rax
  409e58:	8b 55 ec             	mov    -0x14(%rbp),%edx
  409e5b:	48 89 d6             	mov    %rdx,%rsi
  409e5e:	48 89 c7             	mov    %rax,%rdi
  409e61:	e8 b6 fc ff ff       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409e66:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409e6a:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409e6e:	48 89 c7             	mov    %rax,%rdi
  409e71:	e8 ec 19 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409e76:	84 c0                	test   %al,%al
  409e78:	74 49                	je     409ec3 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_+0xa5>
		      auto __ptr = __res.get();
  409e7a:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409e7e:	48 89 c7             	mov    %rax,%rdi
  409e81:	e8 f4 19 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409e86:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		      *__ptr = '-';
  409e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409e8e:	c6 00 2d             	movb   $0x2d,(%rax)
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
  409e91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  409e95:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  409e98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  409e9c:	89 ce                	mov    %ecx,%esi
  409e9e:	48 89 c7             	mov    %rax,%rdi
  409ea1:	e8 8b de ff ff       	call   407d31 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
		      __res._M_bump(__n + __neg);
  409ea6:	8b 55 ec             	mov    -0x14(%rbp),%edx
  409ea9:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409ead:	48 89 d6             	mov    %rdx,%rsi
  409eb0:	48 89 c7             	mov    %rax,%rdi
  409eb3:	e8 e4 19 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409eb8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409ebc:	48 8b 40 08          	mov    0x8(%rax),%rax
  409ec0:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409ec3:	90                   	nop
  409ec4:	c9                   	leave
  409ec5:	c3                   	ret

0000000000409ec6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIfEEDaSJ_>:
  409ec6:	55                   	push   %rbp
  409ec7:	48 89 e5             	mov    %rsp,%rbp
  409eca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409ece:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409ed2:	90                   	nop
  409ed3:	5d                   	pop    %rbp
  409ed4:	c3                   	ret
  409ed5:	90                   	nop

0000000000409ed6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIdEEDaSJ_>:
  409ed6:	55                   	push   %rbp
  409ed7:	48 89 e5             	mov    %rsp,%rbp
  409eda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409ede:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409ee2:	90                   	nop
  409ee3:	5d                   	pop    %rbp
  409ee4:	c3                   	ret
  409ee5:	90                   	nop

0000000000409ee6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIeEEDaSJ_>:
  409ee6:	55                   	push   %rbp
  409ee7:	48 89 e5             	mov    %rsp,%rbp
  409eea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  409eee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  409ef2:	90                   	nop
  409ef3:	5d                   	pop    %rbp
  409ef4:	c3                   	ret
  409ef5:	90                   	nop

0000000000409ef6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_>:
  409ef6:	55                   	push   %rbp
  409ef7:	48 89 e5             	mov    %rsp,%rbp
  409efa:	41 54                	push   %r12
  409efc:	53                   	push   %rbx
  409efd:	48 83 ec 30          	sub    $0x30,%rsp
  409f01:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  409f05:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  string_view __sv = __arg;
  409f09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409f0d:	48 8b 10             	mov    (%rax),%rdx
  409f10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f14:	48 89 d6             	mov    %rdx,%rsi
  409f17:	48 89 c7             	mov    %rax,%rdi
  409f1a:	e8 61 bc ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
  409f1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409f23:	48 8b 18             	mov    (%rax),%rbx
  409f26:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f2a:	48 89 c7             	mov    %rax,%rdi
  409f2d:	e8 e4 bd ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409f32:	48 89 c6             	mov    %rax,%rsi
  409f35:	48 89 df             	mov    %rbx,%rdi
  409f38:	e8 df fb ff ff       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  409f3d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  409f41:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409f45:	48 89 c7             	mov    %rax,%rdi
  409f48:	e8 15 19 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  409f4d:	84 c0                	test   %al,%al
  409f4f:	74 64                	je     409fb5 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_+0xbf>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
  409f51:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f55:	48 89 c7             	mov    %rax,%rdi
  409f58:	e8 b9 bd ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409f5d:	48 89 c3             	mov    %rax,%rbx
  409f60:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f64:	48 89 c7             	mov    %rax,%rdi
  409f67:	e8 6e d5 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  409f6c:	49 89 c4             	mov    %rax,%r12
  409f6f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409f73:	48 89 c7             	mov    %rax,%rdi
  409f76:	e8 ff 18 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  409f7b:	4c 89 e1             	mov    %r12,%rcx
  409f7e:	48 89 da             	mov    %rbx,%rdx
  409f81:	48 89 ce             	mov    %rcx,%rsi
  409f84:	48 89 c7             	mov    %rax,%rdi
  409f87:	e8 a4 a2 ff ff       	call   404230 <memcpy@plt>
		      __res._M_bump(__sv.size());
  409f8c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409f90:	48 89 c7             	mov    %rax,%rdi
  409f93:	e8 7e bd ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409f98:	48 89 c2             	mov    %rax,%rdx
  409f9b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  409f9f:	48 89 d6             	mov    %rdx,%rsi
  409fa2:	48 89 c7             	mov    %rax,%rdi
  409fa5:	e8 f2 18 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  409faa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409fae:	48 8b 40 08          	mov    0x8(%rax),%rax
  409fb2:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  409fb5:	90                   	nop
  409fb6:	48 83 c4 30          	add    $0x30,%rsp
  409fba:	5b                   	pop    %rbx
  409fbb:	41 5c                	pop    %r12
  409fbd:	5d                   	pop    %rbp
  409fbe:	c3                   	ret
  409fbf:	90                   	nop

0000000000409fc0 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_>:
  409fc0:	55                   	push   %rbp
  409fc1:	48 89 e5             	mov    %rsp,%rbp
  409fc4:	41 54                	push   %r12
  409fc6:	53                   	push   %rbx
  409fc7:	48 83 ec 30          	sub    $0x30,%rsp
  409fcb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  409fcf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		  string_view __sv = __arg;
  409fd3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  409fd7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  409fdb:	48 8b 00             	mov    (%rax),%rax
  409fde:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  409fe2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
  409fe6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409fea:	48 8b 18             	mov    (%rax),%rbx
  409fed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  409ff1:	48 89 c7             	mov    %rax,%rdi
  409ff4:	e8 1d bd ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  409ff9:	48 89 c6             	mov    %rax,%rsi
  409ffc:	48 89 df             	mov    %rbx,%rdi
  409fff:	e8 18 fb ff ff       	call   409b1c <_ZNKSt8__format10_Sink_iterIcE10_M_reserveEm>
  40a004:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40a008:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a00c:	48 89 c7             	mov    %rax,%rdi
  40a00f:	e8 4e 18 00 00       	call   40b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>
  40a014:	84 c0                	test   %al,%al
  40a016:	74 64                	je     40a07c <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_+0xbc>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
  40a018:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40a01c:	48 89 c7             	mov    %rax,%rdi
  40a01f:	e8 f2 bc ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40a024:	48 89 c3             	mov    %rax,%rbx
  40a027:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40a02b:	48 89 c7             	mov    %rax,%rdi
  40a02e:	e8 a7 d4 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40a033:	49 89 c4             	mov    %rax,%r12
  40a036:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a03a:	48 89 c7             	mov    %rax,%rdi
  40a03d:	e8 38 18 00 00       	call   40b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>
  40a042:	4c 89 e1             	mov    %r12,%rcx
  40a045:	48 89 da             	mov    %rbx,%rdx
  40a048:	48 89 ce             	mov    %rcx,%rsi
  40a04b:	48 89 c7             	mov    %rax,%rdi
  40a04e:	e8 dd a1 ff ff       	call   404230 <memcpy@plt>
		      __res._M_bump(__sv.size());
  40a053:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40a057:	48 89 c7             	mov    %rax,%rdi
  40a05a:	e8 b7 bc ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40a05f:	48 89 c2             	mov    %rax,%rdx
  40a062:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a066:	48 89 d6             	mov    %rdx,%rsi
  40a069:	48 89 c7             	mov    %rax,%rdi
  40a06c:	e8 2b 18 00 00       	call   40b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>
		      __done = true;
  40a071:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a075:	48 8b 40 08          	mov    0x8(%rax),%rax
  40a079:	c6 00 01             	movb   $0x1,(%rax)
	    std::visit_format_arg([&](auto& __arg) {
  40a07c:	90                   	nop
  40a07d:	48 83 c4 30          	add    $0x30,%rsp
  40a081:	5b                   	pop    %rbx
  40a082:	41 5c                	pop    %r12
  40a084:	5d                   	pop    %rbp
  40a085:	c3                   	ret

000000000040a086 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKvEEDaSJ_>:
  40a086:	55                   	push   %rbp
  40a087:	48 89 e5             	mov    %rsp,%rbp
  40a08a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a08e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a092:	90                   	nop
  40a093:	5d                   	pop    %rbp
  40a094:	c3                   	ret
  40a095:	90                   	nop

000000000040a096 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clINSt16basic_format_argIS4_E6handleEEEDaSJ_>:
  40a096:	55                   	push   %rbp
  40a097:	48 89 e5             	mov    %rsp,%rbp
  40a09a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a09e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a0a2:	90                   	nop
  40a0a3:	5d                   	pop    %rbp
  40a0a4:	c3                   	ret
  40a0a5:	90                   	nop

000000000040a0a6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clInEEDaSJ_>:
  40a0a6:	55                   	push   %rbp
  40a0a7:	48 89 e5             	mov    %rsp,%rbp
  40a0aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a0ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a0b2:	90                   	nop
  40a0b3:	5d                   	pop    %rbp
  40a0b4:	c3                   	ret
  40a0b5:	90                   	nop

000000000040a0b6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIoEEDaSJ_>:
  40a0b6:	55                   	push   %rbp
  40a0b7:	48 89 e5             	mov    %rsp,%rbp
  40a0ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a0be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a0c2:	90                   	nop
  40a0c3:	5d                   	pop    %rbp
  40a0c4:	c3                   	ret
  40a0c5:	90                   	nop

000000000040a0c6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIDF128_EEDaSJ_>:
  40a0c6:	55                   	push   %rbp
  40a0c7:	48 89 e5             	mov    %rsp,%rbp
  40a0ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a0ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a0d2:	90                   	nop
  40a0d3:	5d                   	pop    %rbp
  40a0d4:	c3                   	ret
  40a0d5:	90                   	nop

000000000040a0d6 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  40a0d6:	55                   	push   %rbp
  40a0d7:	48 89 e5             	mov    %rsp,%rbp
  40a0da:	48 83 ec 30          	sub    $0x30,%rsp
  40a0de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a0e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40a0e6:	89 d0                	mov    %edx,%eax
  40a0e8:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  40a0eb:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  40a0ef:	89 c0                	mov    %eax,%eax
  40a0f1:	48 8b 04 c5 b8 de 41 	mov    0x41deb8(,%rax,8),%rax
  40a0f8:	00
  40a0f9:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  40a0fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a0ff:	48 89 c7             	mov    %rax,%rdi
  40a102:	e8 14 16 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a107:	48 89 c2             	mov    %rax,%rdx
  40a10a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a10e:	48 89 c6             	mov    %rax,%rsi
  40a111:	48 89 d7             	mov    %rdx,%rdi
  40a114:	e8 3b f9 ff ff       	call   409a54 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clISt9monostateEEDaSJ_>
  40a119:	e9 2b 02 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  40a11e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a122:	48 89 c7             	mov    %rax,%rdi
  40a125:	e8 f1 15 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a12a:	48 89 c2             	mov    %rax,%rdx
  40a12d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a131:	48 89 c6             	mov    %rax,%rsi
  40a134:	48 89 d7             	mov    %rdx,%rdi
  40a137:	e8 28 f9 ff ff       	call   409a64 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIbEEDaSJ_>
  40a13c:	e9 08 02 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  40a141:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a145:	48 89 c7             	mov    %rax,%rdi
  40a148:	e8 ce 15 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a14d:	48 89 c2             	mov    %rax,%rdx
  40a150:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a154:	48 89 c6             	mov    %rax,%rsi
  40a157:	48 89 d7             	mov    %rdx,%rdi
  40a15a:	e8 f3 f9 ff ff       	call   409b52 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIcEEDaSJ_>
  40a15f:	e9 e5 01 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  40a164:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a168:	48 89 c7             	mov    %rax,%rdi
  40a16b:	e8 ab 15 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a170:	48 89 c2             	mov    %rax,%rdx
  40a173:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a177:	48 89 c6             	mov    %rax,%rsi
  40a17a:	48 89 d7             	mov    %rdx,%rdi
  40a17d:	e8 42 fa ff ff       	call   409bc4 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIiEEDaSJ_>
  40a182:	e9 c2 01 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  40a187:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a18b:	48 89 c7             	mov    %rax,%rdi
  40a18e:	e8 88 15 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a193:	48 89 c2             	mov    %rax,%rdx
  40a196:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a19a:	48 89 c6             	mov    %rax,%rsi
  40a19d:	48 89 d7             	mov    %rdx,%rdi
  40a1a0:	e8 f5 fa ff ff       	call   409c9a <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIjEEDaSJ_>
  40a1a5:	e9 9f 01 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  40a1aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1ae:	48 89 c7             	mov    %rax,%rdi
  40a1b1:	e8 65 15 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a1b6:	48 89 c2             	mov    %rax,%rdx
  40a1b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a1bd:	48 89 c6             	mov    %rax,%rsi
  40a1c0:	48 89 d7             	mov    %rdx,%rdi
  40a1c3:	e8 76 fb ff ff       	call   409d3e <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIxEEDaSJ_>
  40a1c8:	e9 7c 01 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  40a1cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1d1:	48 89 c7             	mov    %rax,%rdi
  40a1d4:	e8 42 15 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a1d9:	48 89 c2             	mov    %rax,%rdx
  40a1dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a1e0:	48 89 c6             	mov    %rax,%rsi
  40a1e3:	48 89 d7             	mov    %rdx,%rdi
  40a1e6:	e8 33 fc ff ff       	call   409e1e <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIyEEDaSJ_>
  40a1eb:	e9 59 01 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  40a1f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a1f4:	48 89 c7             	mov    %rax,%rdi
  40a1f7:	e8 1f 15 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a1fc:	48 89 c2             	mov    %rax,%rdx
  40a1ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a203:	48 89 c6             	mov    %rax,%rsi
  40a206:	48 89 d7             	mov    %rdx,%rdi
  40a209:	e8 b8 fc ff ff       	call   409ec6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIfEEDaSJ_>
  40a20e:	e9 36 01 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  40a213:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a217:	48 89 c7             	mov    %rax,%rdi
  40a21a:	e8 fc 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a21f:	48 89 c2             	mov    %rax,%rdx
  40a222:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a226:	48 89 c6             	mov    %rax,%rsi
  40a229:	48 89 d7             	mov    %rdx,%rdi
  40a22c:	e8 a5 fc ff ff       	call   409ed6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIdEEDaSJ_>
  40a231:	e9 13 01 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  40a236:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a23a:	48 89 c7             	mov    %rax,%rdi
  40a23d:	e8 d9 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a242:	48 89 c2             	mov    %rax,%rdx
  40a245:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a249:	48 89 c6             	mov    %rax,%rsi
  40a24c:	48 89 d7             	mov    %rdx,%rdi
  40a24f:	e8 92 fc ff ff       	call   409ee6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIeEEDaSJ_>
  40a254:	e9 f0 00 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  40a259:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a25d:	48 89 c7             	mov    %rax,%rdi
  40a260:	e8 b6 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a265:	48 89 c2             	mov    %rax,%rdx
  40a268:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a26c:	48 89 c6             	mov    %rax,%rsi
  40a26f:	48 89 d7             	mov    %rdx,%rdi
  40a272:	e8 7f fc ff ff       	call   409ef6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKcEEDaSJ_>
  40a277:	e9 cd 00 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  40a27c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a280:	48 89 c7             	mov    %rax,%rdi
  40a283:	e8 93 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a288:	48 89 c2             	mov    %rax,%rdx
  40a28b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a28f:	48 89 c6             	mov    %rax,%rsi
  40a292:	48 89 d7             	mov    %rdx,%rdi
  40a295:	e8 26 fd ff ff       	call   409fc0 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIS6_IcS8_IcEEEEDaSJ_>
  40a29a:	e9 aa 00 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  40a29f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a2a3:	48 89 c7             	mov    %rax,%rdi
  40a2a6:	e8 70 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a2ab:	48 89 c2             	mov    %rax,%rdx
  40a2ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a2b2:	48 89 c6             	mov    %rax,%rsi
  40a2b5:	48 89 d7             	mov    %rdx,%rdi
  40a2b8:	e8 c9 fd ff ff       	call   40a086 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIPKvEEDaSJ_>
  40a2bd:	e9 87 00 00 00       	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  40a2c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a2c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  40a2ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a2ce:	48 89 c7             	mov    %rax,%rdi
  40a2d1:	e8 45 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a2d6:	48 89 c2             	mov    %rax,%rdx
  40a2d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a2dd:	48 89 c6             	mov    %rax,%rsi
  40a2e0:	48 89 d7             	mov    %rdx,%rdi
  40a2e3:	e8 ae fd ff ff       	call   40a096 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clINSt16basic_format_argIS4_E6handleEEEDaSJ_>
  40a2e8:	eb 5f                	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  40a2ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a2ee:	48 89 c7             	mov    %rax,%rdi
  40a2f1:	e8 25 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a2f6:	48 89 c2             	mov    %rax,%rdx
  40a2f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a2fd:	48 89 c6             	mov    %rax,%rsi
  40a300:	48 89 d7             	mov    %rdx,%rdi
  40a303:	e8 9e fd ff ff       	call   40a0a6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clInEEDaSJ_>
  40a308:	eb 3f                	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  40a30a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a30e:	48 89 c7             	mov    %rax,%rdi
  40a311:	e8 05 14 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a316:	48 89 c2             	mov    %rax,%rdx
  40a319:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a31d:	48 89 c6             	mov    %rax,%rsi
  40a320:	48 89 d7             	mov    %rdx,%rdi
  40a323:	e8 8e fd ff ff       	call   40a0b6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIoEEDaSJ_>
  40a328:	eb 1f                	jmp    40a349 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  40a32a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a32e:	48 89 c7             	mov    %rax,%rdi
  40a331:	e8 e5 13 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a336:	48 89 c2             	mov    %rax,%rdx
  40a339:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a33d:	48 89 c6             	mov    %rax,%rsi
  40a340:	48 89 d7             	mov    %rdx,%rdi
  40a343:	e8 7e fd ff ff       	call   40a0c6 <_ZZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6localeENKUlRS5_E_clIDF128_EEDaSJ_>
  40a348:	90                   	nop
	}
  40a349:	c9                   	leave
  40a34a:	c3                   	ret

000000000040a34b <_ZSt16visit_format_argIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_S5_EDcOS6_St16basic_format_argIS8_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  40a34b:	55                   	push   %rbp
  40a34c:	48 89 e5             	mov    %rsp,%rbp
  40a34f:	53                   	push   %rbx
  40a350:	48 83 ec 18          	sub    $0x18,%rsp
  40a354:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  40a358:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  40a35c:	0f b6 d8             	movzbl %al,%ebx
  40a35f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a363:	48 89 c7             	mov    %rax,%rdi
  40a366:	e8 b0 13 00 00       	call   40b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>
  40a36b:	89 da                	mov    %ebx,%edx
  40a36d:	48 89 c6             	mov    %rax,%rsi
  40a370:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  40a374:	e8 5d fd ff ff       	call   40a0d6 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_15__do_vformat_toIS3_cS4_EET_S8_St17basic_string_viewIT0_St11char_traitsISA_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS8_E_EEDcOS8_NS1_6_Arg_tE>
  40a379:	90                   	nop
    }
  40a37a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a37e:	c9                   	leave
  40a37f:	c3                   	ret

000000000040a380 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>:
      ~basic_format_context() = default;
  40a380:	55                   	push   %rbp
  40a381:	48 89 e5             	mov    %rsp,%rbp
  40a384:	48 83 ec 10          	sub    $0x10,%rsp
  40a388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a38c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a390:	48 83 c0 18          	add    $0x18,%rax
  40a394:	48 89 c7             	mov    %rax,%rdi
  40a397:	e8 08 af ff ff       	call   4052a4 <_ZNSt8__format16_Optional_localeD1Ev>
  40a39c:	90                   	nop
  40a39d:	c9                   	leave
  40a39e:	c3                   	ret

000000000040a39f <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale>:
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
  40a39f:	55                   	push   %rbp
  40a3a0:	48 89 e5             	mov    %rsp,%rbp
  40a3a3:	53                   	push   %rbx
  40a3a4:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
  40a3ab:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  40a3b2:	48 89 f0             	mov    %rsi,%rax
  40a3b5:	48 89 d6             	mov    %rdx,%rsi
  40a3b8:	48 89 c0             	mov    %rax,%rax
  40a3bb:	ba 00 00 00 00       	mov    $0x0,%edx
  40a3c0:	48 89 f2             	mov    %rsi,%rdx
  40a3c3:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
  40a3ca:	48 89 95 88 fd ff ff 	mov    %rdx,-0x278(%rbp)
  40a3d1:	48 89 8d 90 fd ff ff 	mov    %rcx,-0x270(%rbp)
  40a3d8:	4c 89 85 78 fd ff ff 	mov    %r8,-0x288(%rbp)
      _Iter_sink<_CharT, _Out> __sink(std::move(__out));
  40a3df:	48 8d 85 98 fd ff ff 	lea    -0x268(%rbp),%rax
  40a3e6:	48 89 c7             	mov    %rax,%rdi
  40a3e9:	e8 57 f6 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40a3ee:	48 8b 00             	mov    (%rax),%rax
  40a3f1:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  40a3f8:	48 c7 45 e8 ff ff ff 	movq   $0xffffffffffffffff,-0x18(%rbp)
  40a3ff:	ff
      : _M_out(std::move(__out)), _M_max(__max)
  40a400:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  40a407:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : _Sink<_CharT>(_M_buf)
  40a40b:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  40a40f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a413:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40a417:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40a41b:	48 89 d6             	mov    %rdx,%rsi
  40a41e:	48 89 c7             	mov    %rax,%rdi
  40a421:	e8 b0 12 00 00       	call   40b6d6 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  40a426:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  40a42a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a42e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40a432:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  40a439:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
      : _M_span(__span), _M_next(__span.begin())
  40a440:	ba 28 e0 41 00       	mov    $0x41e028,%edx
  40a445:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40a449:	48 89 10             	mov    %rdx,(%rax)
  40a44c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40a450:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  40a457:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  40a45e:	48 89 41 08          	mov    %rax,0x8(%rcx)
  40a462:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  40a466:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40a46a:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
  40a471:	48 89 c7             	mov    %rax,%rdi
  40a474:	e8 af 15 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a479:	48 89 43 18          	mov    %rax,0x18(%rbx)
      { }
  40a47d:	90                   	nop
      : _Sink<_CharT>(_M_buf)
  40a47e:	ba 00 e0 41 00       	mov    $0x41e000,%edx
  40a483:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a487:	48 89 10             	mov    %rdx,(%rax)
      { }
  40a48a:	90                   	nop
      : _M_out(std::move(__out)), _M_max(__max)
  40a48b:	b8 90 df 41 00       	mov    $0x41df90,%eax
  40a490:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  40a497:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
  40a49e:	48 89 c7             	mov    %rax,%rdi
  40a4a1:	e8 9f f5 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40a4a6:	48 8b 00             	mov    (%rax),%rax
  40a4a9:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40a4b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a4b4:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40a4bb:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  40a4c2:	00 00 00 00
      { }
  40a4c6:	90                   	nop
      _Sink_iter<_CharT> __sink_out;
  40a4c7:	48 c7 85 38 fe ff ff 	movq   $0x0,-0x1c8(%rbp)
  40a4ce:	00 00 00 00
	__sink_out = __out; // Already a sink iterator, safe to use post-move.
  40a4d2:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40a4d9:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
  40a4e0:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40a4e7:	48 89 c7             	mov    %rax,%rdi
  40a4ea:	e8 27 b8 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40a4ef:	48 83 f8 02          	cmp    $0x2,%rax
  40a4f3:	75 3d                	jne    40a532 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  40a4f5:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40a4fc:	be 00 00 00 00       	mov    $0x0,%esi
  40a501:	48 89 c7             	mov    %rax,%rdi
  40a504:	e8 1f b8 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40a509:	0f b6 00             	movzbl (%rax),%eax
  40a50c:	3c 7b                	cmp    $0x7b,%al
  40a50e:	75 22                	jne    40a532 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  40a510:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  40a517:	be 01 00 00 00       	mov    $0x1,%esi
  40a51c:	48 89 c7             	mov    %rax,%rdi
  40a51f:	e8 04 b8 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  40a524:	0f b6 00             	movzbl (%rax),%eax
  40a527:	3c 7d                	cmp    $0x7d,%al
  40a529:	75 07                	jne    40a532 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x193>
  40a52b:	b8 01 00 00 00       	mov    $0x1,%eax
  40a530:	eb 05                	jmp    40a537 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x198>
  40a532:	b8 00 00 00 00       	mov    $0x0,%eax
  40a537:	84 c0                	test   %al,%al
  40a539:	0f 84 23 01 00 00    	je     40a662 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2c3>
	    bool __done = false;
  40a53f:	c6 85 af fd ff ff 00 	movb   $0x0,-0x251(%rbp)
  40a546:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  40a54d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40a551:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  40a558:	00
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40a559:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40a55d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _Arg_value() : _M_none() { }
  40a561:	90                   	nop
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40a562:	c6 45 90 00          	movb   $0x0,-0x70(%rbp)
  40a566:	90                   	nop
	if (__i < _M_packed_size)
  40a567:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a56b:	0f b6 00             	movzbl (%rax),%eax
  40a56e:	83 e0 0f             	and    $0xf,%eax
  40a571:	0f b6 c0             	movzbl %al,%eax
  40a574:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40a578:	73 3a                	jae    40a5b4 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x215>
	    __arg._M_type = _M_type(__i);
  40a57a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a57e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a582:	48 89 d6             	mov    %rdx,%rsi
  40a585:	48 89 c7             	mov    %rax,%rdi
  40a588:	e8 3b 23 00 00       	call   40c8c8 <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>
  40a58d:	88 45 90             	mov    %al,-0x70(%rbp)
	    __arg._M_val = _M_values[__i];
  40a590:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a594:	48 8b 40 08          	mov    0x8(%rax),%rax
  40a598:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a59c:	48 c1 e2 04          	shl    $0x4,%rdx
  40a5a0:	48 01 d0             	add    %rdx,%rax
  40a5a3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40a5a7:	48 8b 00             	mov    (%rax),%rax
  40a5aa:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40a5ae:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	return __arg;
  40a5b2:	eb 4a                	jmp    40a5fe <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
  40a5b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a5b8:	0f b6 00             	movzbl (%rax),%eax
  40a5bb:	83 e0 0f             	and    $0xf,%eax
  40a5be:	84 c0                	test   %al,%al
  40a5c0:	75 3c                	jne    40a5fe <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
  40a5c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a5c6:	48 8b 00             	mov    (%rax),%rax
  40a5c9:	48 c1 e8 04          	shr    $0x4,%rax
  40a5cd:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  40a5d1:	73 2b                	jae    40a5fe <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x25f>
	  __arg = _M_args[__i];
  40a5d3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40a5d7:	48 8b 40 08          	mov    0x8(%rax),%rax
  40a5db:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40a5df:	48 c1 e2 05          	shl    $0x5,%rdx
  40a5e3:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  40a5e7:	48 8b 01             	mov    (%rcx),%rax
  40a5ea:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  40a5ee:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40a5f2:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40a5f6:	0f b6 41 10          	movzbl 0x10(%rcx),%eax
  40a5fa:	88 45 90             	mov    %al,-0x70(%rbp)
	return __arg;
  40a5fd:	90                   	nop
  40a5fe:	90                   	nop
	    std::visit_format_arg([&](auto& __arg) {
  40a5ff:	48 8d 85 38 fe ff ff 	lea    -0x1c8(%rbp),%rax
  40a606:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40a60a:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
  40a611:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40a615:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  40a619:	48 83 ec 20          	sub    $0x20,%rsp
  40a61d:	48 89 e1             	mov    %rsp,%rcx
  40a620:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40a624:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40a628:	48 89 01             	mov    %rax,(%rcx)
  40a62b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40a62f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40a633:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40a637:	48 89 41 10          	mov    %rax,0x10(%rcx)
  40a63b:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  40a63f:	48 89 f7             	mov    %rsi,%rdi
  40a642:	e8 04 fd ff ff       	call   40a34b <_ZSt16visit_format_argIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_S5_EDcOS6_St16basic_format_argIS8_E>
  40a647:	48 83 c4 20          	add    $0x20,%rsp
	    if (__done)
  40a64b:	0f b6 85 af fd ff ff 	movzbl -0x251(%rbp),%eax
  40a652:	84 c0                	test   %al,%al
  40a654:	74 0c                	je     40a662 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2c3>
		  return __sink_out;
  40a656:	48 8b 9d 38 fe ff ff 	mov    -0x1c8(%rbp),%rbx
  40a65d:	e9 b6 00 00 00       	jmp    40a718 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x379>
		     ? _Context(__args, __sink_out)
  40a662:	48 83 bd 78 fd ff ff 	cmpq   $0x0,-0x288(%rbp)
  40a669:	00
  40a66a:	75 26                	jne    40a692 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x2f3>
      auto __ctx = __loc == nullptr
  40a66c:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  40a673:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  40a67a:	48 8b 30             	mov    (%rax),%rsi
  40a67d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40a681:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a688:	48 89 c7             	mov    %rax,%rdi
  40a68b:	e8 44 12 00 00       	call   40b8d4 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_>
  40a690:	eb 2e                	jmp    40a6c0 <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x321>
  40a692:	48 8b bd 78 fd ff ff 	mov    -0x288(%rbp),%rdi
  40a699:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  40a6a0:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  40a6a7:	48 8b 30             	mov    (%rax),%rsi
  40a6aa:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40a6ae:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a6b5:	49 89 f8             	mov    %rdi,%r8
  40a6b8:	48 89 c7             	mov    %rax,%rdi
  40a6bb:	e8 86 12 00 00       	call   40b946 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_RKSt6locale>
      _Formatting_scanner<_Sink_iter<_CharT>, _CharT> __scanner(__ctx, __fmt);
  40a6c0:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  40a6c7:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  40a6ce:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
  40a6d5:	48 8d bd d0 fd ff ff 	lea    -0x230(%rbp),%rdi
  40a6dc:	48 89 d1             	mov    %rdx,%rcx
  40a6df:	48 89 c2             	mov    %rax,%rdx
  40a6e2:	e8 d1 12 00 00       	call   40b9b8 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEC1ERSt20basic_format_contextIS2_cESt17basic_string_viewIcSt11char_traitsIcEE>
      __scanner._M_scan();
  40a6e7:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  40a6ee:	48 89 c7             	mov    %rax,%rdi
  40a6f1:	e8 6c b6 ff ff       	call   405d62 <_ZNSt8__format8_ScannerIcE7_M_scanEv>
	return __ctx.out();
  40a6f6:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a6fd:	48 89 c7             	mov    %rax,%rdi
  40a700:	e8 01 13 00 00       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40a705:	48 89 c3             	mov    %rax,%rbx
  40a708:	90                   	nop
    }
  40a709:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a710:	48 89 c7             	mov    %rax,%rdi
  40a713:	e8 68 fc ff ff       	call   40a380 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>
  40a718:	48 89 d8             	mov    %rbx,%rax
  40a71b:	eb 1d                	jmp    40a73a <_ZNSt8__format15__do_vformat_toINS_10_Sink_iterIcEEcSt20basic_format_contextIS2_cEEET_S5_St17basic_string_viewIT0_St11char_traitsIS7_EERKSt17basic_format_argsIT1_EPKSt6locale+0x39b>
  40a71d:	48 89 c3             	mov    %rax,%rbx
  40a720:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  40a727:	48 89 c7             	mov    %rax,%rdi
  40a72a:	e8 51 fc ff ff       	call   40a380 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcED1Ev>
  40a72f:	48 89 d8             	mov    %rbx,%rax
  40a732:	48 89 c7             	mov    %rax,%rdi
  40a735:	e8 d6 9c ff ff       	call   404410 <_Unwind_Resume@plt>
  40a73a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a73e:	c9                   	leave
  40a73f:	c3                   	ret

000000000040a740 <_ZNKSt4spanIcLm18446744073709551615EE5emptyEv>:
      empty() const noexcept
  40a740:	55                   	push   %rbp
  40a741:	48 89 e5             	mov    %rsp,%rbp
  40a744:	48 83 ec 10          	sub    $0x10,%rsp
  40a748:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size() == 0; }
  40a74c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a750:	48 89 c7             	mov    %rax,%rdi
  40a753:	e8 dc ad ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40a758:	48 85 c0             	test   %rax,%rax
  40a75b:	0f 94 c0             	sete   %al
  40a75e:	c9                   	leave
  40a75f:	c3                   	ret

000000000040a760 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>:
      _M_overflow() override
  40a760:	55                   	push   %rbp
  40a761:	48 89 e5             	mov    %rsp,%rbp
  40a764:	41 54                	push   %r12
  40a766:	53                   	push   %rbx
  40a767:	48 83 ec 40          	sub    $0x40,%rsp
  40a76b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	auto __s = this->_M_used();
  40a76f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a773:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40a777:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a77b:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40a77f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a783:	48 83 c0 08          	add    $0x8,%rax
  40a787:	48 89 c7             	mov    %rax,%rdi
  40a78a:	e8 99 12 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a78f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40a793:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a797:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a79b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40a79f:	48 89 c6             	mov    %rax,%rsi
  40a7a2:	48 89 d7             	mov    %rdx,%rdi
  40a7a5:	e8 a3 12 00 00       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40a7aa:	48 89 c6             	mov    %rax,%rsi
  40a7ad:	48 89 df             	mov    %rbx,%rdi
  40a7b0:	e8 d7 12 00 00       	call   40ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40a7b5:	90                   	nop
	auto __s = this->_M_used();
  40a7b6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40a7ba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__s.empty()) [[unlikely]]
  40a7be:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a7c2:	48 89 c7             	mov    %rax,%rdi
  40a7c5:	e8 76 ff ff ff       	call   40a740 <_ZNKSt4spanIcLm18446744073709551615EE5emptyEv>
  40a7ca:	84 c0                	test   %al,%al
  40a7cc:	75 56                	jne    40a824 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv+0xc4>
	  _M_seq.append(__s.data(), __s.size());
  40a7ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a7d2:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  40a7d9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a7dd:	48 89 c7             	mov    %rax,%rdi
  40a7e0:	e8 4f ad ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40a7e5:	49 89 c4             	mov    %rax,%r12
  40a7e8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a7ec:	48 89 c7             	mov    %rax,%rdi
  40a7ef:	e8 2e ad ff ff       	call   405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40a7f4:	4c 89 e2             	mov    %r12,%rdx
  40a7f7:	48 89 c6             	mov    %rax,%rsi
  40a7fa:	48 89 df             	mov    %rbx,%rdi
  40a7fd:	e8 ee 12 00 00       	call   40baf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>
	this->_M_rewind();
  40a802:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a806:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { _M_next = _M_span.begin(); }
  40a80a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a80e:	48 83 c0 08          	add    $0x8,%rax
  40a812:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  40a816:	48 89 c7             	mov    %rax,%rdi
  40a819:	e8 0a 12 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40a81e:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40a822:	eb 01                	jmp    40a825 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv+0xc5>
	  return; // Nothing in the buffer to transfer to _M_seq.
  40a824:	90                   	nop
      }
  40a825:	48 83 c4 40          	add    $0x40,%rsp
  40a829:	5b                   	pop    %rbx
  40a82a:	41 5c                	pop    %r12
  40a82c:	5d                   	pop    %rbp
  40a82d:	c3                   	ret

000000000040a82e <_ZSt12__to_addressIcEPT_S1_>:
    __to_address(_Tp* __ptr) noexcept
  40a82e:	55                   	push   %rbp
  40a82f:	48 89 e5             	mov    %rsp,%rbp
  40a832:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return __ptr;
  40a836:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40a83a:	5d                   	pop    %rbp
  40a83b:	c3                   	ret

000000000040a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  This is a pointer to the character sequence held by the string.
       *  Modifying the characters in the sequence is allowed.
      */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      _CharT*
      data() noexcept
  40a83c:	55                   	push   %rbp
  40a83d:	48 89 e5             	mov    %rsp,%rbp
  40a840:	48 83 ec 10          	sub    $0x10,%rsp
  40a844:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
  40a848:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a84c:	48 89 c7             	mov    %rax,%rdi
  40a84f:	e8 c2 cc ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40a854:	c9                   	leave
  40a855:	c3                   	ret

000000000040a856 <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>:
	span(_Range&& __range)
  40a856:	55                   	push   %rbp
  40a857:	48 89 e5             	mov    %rsp,%rbp
  40a85a:	53                   	push   %rbx
  40a85b:	48 83 ec 18          	sub    $0x18,%rsp
  40a85f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40a863:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: span(ranges::data(__range), ranges::size(__range))
  40a867:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a86b:	48 89 c6             	mov    %rax,%rsi
  40a86e:	bf 06 b0 41 00       	mov    $0x41b006,%edi
  40a873:	e8 a0 d9 ff ff       	call   408218 <_ZNKSt6ranges8__access5_SizeclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>
  40a878:	48 89 c3             	mov    %rax,%rbx
  40a87b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a87f:	48 89 c6             	mov    %rax,%rsi
  40a882:	bf 08 b0 41 00       	mov    $0x41b008,%edi
  40a887:	e8 6e d9 ff ff       	call   4081fa <_ZNKSt6ranges8__access5_DataclIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDaOT_>
  40a88c:	48 89 c1             	mov    %rax,%rcx
  40a88f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a893:	48 89 da             	mov    %rbx,%rdx
  40a896:	48 89 ce             	mov    %rcx,%rsi
  40a899:	48 89 c7             	mov    %rax,%rdi
  40a89c:	e8 d9 0d 00 00       	call   40b67a <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
	}
  40a8a1:	90                   	nop
  40a8a2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40a8a6:	c9                   	leave
  40a8a7:	c3                   	ret

000000000040a8a8 <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
  40a8a8:	55                   	push   %rbp
  40a8a9:	48 89 e5             	mov    %rsp,%rbp
  40a8ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a8b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__b < __a)
  40a8b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a8b8:	48 8b 10             	mov    (%rax),%rdx
  40a8bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a8bf:	48 8b 00             	mov    (%rax),%rax
  40a8c2:	48 39 c2             	cmp    %rax,%rdx
  40a8c5:	73 06                	jae    40a8cd <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
  40a8c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a8cb:	eb 04                	jmp    40a8d1 <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
  40a8cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  40a8d1:	5d                   	pop    %rbp
  40a8d2:	c3                   	ret

000000000040a8d3 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a8d3:	55                   	push   %rbp
  40a8d4:	48 89 e5             	mov    %rsp,%rbp
  40a8d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a8db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a8df:	5d                   	pop    %rbp
  40a8e0:	c3                   	ret

000000000040a8e1 <_ZSt7printlnIJRA4_KcEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS7_>:
    println(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40a8e1:	55                   	push   %rbp
  40a8e2:	48 89 e5             	mov    %rsp,%rbp
  40a8e5:	41 55                	push   %r13
  40a8e7:	41 54                	push   %r12
  40a8e9:	53                   	push   %rbx
  40a8ea:	48 83 ec 48          	sub    $0x48,%rsp
  40a8ee:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40a8f2:	48 89 f0             	mov    %rsi,%rax
  40a8f5:	48 89 d6             	mov    %rdx,%rsi
  40a8f8:	48 89 c0             	mov    %rax,%rax
  40a8fb:	ba 00 00 00 00       	mov    $0x0,%edx
  40a900:	48 89 f2             	mov    %rsi,%rdx
  40a903:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40a907:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40a90b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40a90f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a913:	48 89 c7             	mov    %rax,%rdi
  40a916:	e8 b8 ff ff ff       	call   40a8d3 <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
  40a91b:	48 89 c1             	mov    %rax,%rcx
  40a91e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a922:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40a926:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40a92a:	48 89 c7             	mov    %rax,%rdi
  40a92d:	e8 97 12 00 00       	call   40bbc9 <_ZSt6formatIJRA4_KcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>
      std::print(__stream, "{}\n",
  40a932:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  40a938:	41 bd 43 b2 41 00    	mov    $0x41b243,%r13d
  40a93e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40a942:	4c 89 e6             	mov    %r12,%rsi
  40a945:	4c 89 ef             	mov    %r13,%rdi
  40a948:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a94c:	48 89 d1             	mov    %rdx,%rcx
  40a94f:	48 89 fa             	mov    %rdi,%rdx
  40a952:	48 89 c7             	mov    %rax,%rdi
  40a955:	e8 2e 13 00 00       	call   40bc88 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40a95a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a95e:	48 89 c7             	mov    %rax,%rdi
  40a961:	e8 0e cc ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  40a966:	eb 1a                	jmp    40a982 <_ZSt7printlnIJRA4_KcEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS7_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40a968:	48 89 c3             	mov    %rax,%rbx
  40a96b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40a96f:	48 89 c7             	mov    %rax,%rdi
  40a972:	e8 fd cb ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40a977:	48 89 d8             	mov    %rbx,%rax
  40a97a:	48 89 c7             	mov    %rax,%rdi
  40a97d:	e8 8e 9a ff ff       	call   404410 <_Unwind_Resume@plt>
    }
  40a982:	48 83 c4 48          	add    $0x48,%rsp
  40a986:	5b                   	pop    %rbx
  40a987:	41 5c                	pop    %r12
  40a989:	41 5d                	pop    %r13
  40a98b:	5d                   	pop    %rbp
  40a98c:	c3                   	ret

000000000040a98d <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40a98d:	55                   	push   %rbp
  40a98e:	48 89 e5             	mov    %rsp,%rbp
  40a991:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40a995:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a999:	5d                   	pop    %rbp
  40a99a:	c3                   	ret
  40a99b:	90                   	nop

000000000040a99c <_ZNSt4pairItPKcEC1IiS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40a99c:	55                   	push   %rbp
  40a99d:	48 89 e5             	mov    %rsp,%rbp
  40a9a0:	48 83 ec 20          	sub    $0x20,%rsp
  40a9a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a9a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a9ac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40a9b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a9b4:	48 89 c7             	mov    %rax,%rdi
  40a9b7:	e8 d1 ff ff ff       	call   40a98d <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  40a9bc:	8b 00                	mov    (%rax),%eax
  40a9be:	89 c2                	mov    %eax,%edx
  40a9c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9c4:	66 89 10             	mov    %dx,(%rax)
  40a9c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40a9cb:	48 89 c7             	mov    %rax,%rdi
  40a9ce:	e8 35 ba ff ff       	call   406408 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
  40a9d3:	48 8b 10             	mov    (%rax),%rdx
  40a9d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9da:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
  40a9de:	90                   	nop
  40a9df:	c9                   	leave
  40a9e0:	c3                   	ret
  40a9e1:	90                   	nop

000000000040a9e2 <_ZNSt4pairItPKcEC1ERKtRKS1_>:
      pair(const _T1& __x, const _T2& __y)
  40a9e2:	55                   	push   %rbp
  40a9e3:	48 89 e5             	mov    %rsp,%rbp
  40a9e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40a9ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40a9ee:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : first(__x), second(__y)
  40a9f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40a9f6:	0f b7 10             	movzwl (%rax),%edx
  40a9f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40a9fd:	66 89 10             	mov    %dx,(%rax)
  40aa00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aa04:	48 8b 10             	mov    (%rax),%rdx
  40aa07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aa0b:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
  40aa0f:	90                   	nop
  40aa10:	5d                   	pop    %rbp
  40aa11:	c3                   	ret

000000000040aa12 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>:
    __parse_integer(const _CharT* __first, const _CharT* __last)
  40aa12:	55                   	push   %rbp
  40aa13:	48 89 e5             	mov    %rsp,%rbp
  40aa16:	48 83 ec 60          	sub    $0x60,%rsp
  40aa1a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40aa1e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
      if (__first == __last)
  40aa22:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40aa26:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
	  const auto __start = __first;
  40aa2a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40aa2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  unsigned short __val = 0;
  40aa32:	66 c7 45 be 00 00    	movw   $0x0,-0x42(%rbp)
	  if (__detail::__from_chars_alnum<true>(__first, __last, __val, 10)
  40aa38:	48 8d 55 be          	lea    -0x42(%rbp),%rdx
  40aa3c:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40aa40:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  40aa44:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40aa49:	48 89 c7             	mov    %rax,%rdi
  40aa4c:	e8 02 13 00 00       	call   40bd53 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i>
		&& __first != __start) [[likely]]
  40aa51:	84 c0                	test   %al,%al
  40aa53:	74 11                	je     40aa66 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x54>
  40aa55:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40aa59:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  40aa5d:	74 07                	je     40aa66 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x54>
  40aa5f:	b8 01 00 00 00       	mov    $0x1,%eax
  40aa64:	eb 05                	jmp    40aa6b <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x59>
  40aa66:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (__detail::__from_chars_alnum<true>(__first, __last, __val, 10)
  40aa6b:	84 c0                	test   %al,%al
  40aa6d:	74 21                	je     40aa90 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0x7e>
	    return {__val, __first};
  40aa6f:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
  40aa73:	48 8d 4d be          	lea    -0x42(%rbp),%rcx
  40aa77:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40aa7b:	48 89 ce             	mov    %rcx,%rsi
  40aa7e:	48 89 c7             	mov    %rax,%rdi
  40aa81:	e8 ec 13 00 00       	call   40be72 <_ZNSt4pairItPKcEC1IRtRS1_EEOT_OT0_>
  40aa86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40aa8a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40aa8e:	eb 2e                	jmp    40aabe <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_+0xac>
      return {0, nullptr};
  40aa90:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40aa97:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40aa9e:	00
  40aa9f:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  40aaa3:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
  40aaa7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40aaab:	48 89 ce             	mov    %rcx,%rsi
  40aaae:	48 89 c7             	mov    %rax,%rdi
  40aab1:	e8 1c 00 00 00       	call   40aad2 <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>
  40aab6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40aaba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
  40aabe:	89 c1                	mov    %eax,%ecx
  40aac0:	89 c8                	mov    %ecx,%eax
  40aac2:	c9                   	leave
  40aac3:	c3                   	ret

000000000040aac4 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40aac4:	55                   	push   %rbp
  40aac5:	48 89 e5             	mov    %rsp,%rbp
  40aac8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40aacc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aad0:	5d                   	pop    %rbp
  40aad1:	c3                   	ret

000000000040aad2 <_ZNSt4pairItPKcEC1IiDnEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40aad2:	55                   	push   %rbp
  40aad3:	48 89 e5             	mov    %rsp,%rbp
  40aad6:	48 83 ec 20          	sub    $0x20,%rsp
  40aada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40aade:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40aae2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40aae6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40aaea:	48 89 c7             	mov    %rax,%rdi
  40aaed:	e8 9b fe ff ff       	call   40a98d <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  40aaf2:	8b 00                	mov    (%rax),%eax
  40aaf4:	89 c2                	mov    %eax,%edx
  40aaf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aafa:	66 89 10             	mov    %dx,(%rax)
  40aafd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ab01:	48 89 c7             	mov    %rax,%rdi
  40ab04:	e8 bb ff ff ff       	call   40aac4 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
  40ab09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab0d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40ab14:	00
	{ }
  40ab15:	90                   	nop
  40ab16:	c9                   	leave
  40ab17:	c3                   	ret

000000000040ab18 <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE5beginEv>:
      begin() const requires copyable<_It>
  40ab18:	55                   	push   %rbp
  40ab19:	48 89 e5             	mov    %rsp,%rbp
  40ab1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_begin; }
  40ab20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab24:	48 8b 00             	mov    (%rax),%rax
  40ab27:	5d                   	pop    %rbp
  40ab28:	c3                   	ret
  40ab29:	90                   	nop

000000000040ab2a <_ZNKSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EE3endEv>:
      constexpr _Sent end() const { return _M_end; }
  40ab2a:	55                   	push   %rbp
  40ab2b:	48 89 e5             	mov    %rsp,%rbp
  40ab2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ab32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ab36:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ab3a:	5d                   	pop    %rbp
  40ab3b:	c3                   	ret

000000000040ab3c <_ZNSt6ranges8subrangeIPKcS2_LNS_13subrange_kindE1EEC1IS2_EET_S2_>:
      subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s)
  40ab3c:	55                   	push   %rbp
  40ab3d:	48 89 e5             	mov    %rsp,%rbp
  40ab40:	48 83 ec 30          	sub    $0x30,%rsp
  40ab44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ab48:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40ab4c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_begin(std::move(__i)), _M_end(__s)
  40ab50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40ab54:	48 89 c7             	mov    %rax,%rdi
  40ab57:	e8 5a 13 00 00       	call   40beb6 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
  40ab5c:	48 8b 10             	mov    (%rax),%rdx
  40ab5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ab63:	48 89 10             	mov    %rdx,(%rax)
  40ab66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ab6a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40ab6e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40ab72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ab76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40ab7a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40ab81:	00
	  constexpr _Size(_Tp = {}) { }
  40ab82:	90                   	nop
      { }
  40ab83:	90                   	nop
  40ab84:	c9                   	leave
  40ab85:	c3                   	ret

000000000040ab86 <_ZNSt9__unicode9_Utf_viewIDiNSt6ranges8subrangeIPKcS4_LNS1_13subrange_kindE1EEEEC1EOS6_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  40ab86:	55                   	push   %rbp
  40ab87:	48 89 e5             	mov    %rsp,%rbp
  40ab8a:	48 83 ec 10          	sub    $0x10,%rsp
  40ab8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ab92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40ab96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ab9a:	48 89 c7             	mov    %rax,%rdi
  40ab9d:	e8 22 13 00 00       	call   40bec4 <_ZSt7forwardINSt6ranges8subrangeIPKcS3_LNS0_13subrange_kindE1EEEEOT_RNSt16remove_referenceIS6_E4typeE>
  40aba2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40aba6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40abaa:	48 8b 00             	mov    (%rax),%rax
  40abad:	48 89 01             	mov    %rax,(%rcx)
  40abb0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40abb4:	90                   	nop
  40abb5:	c9                   	leave
  40abb6:	c3                   	ret
  40abb7:	90                   	nop

000000000040abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() { return _M_first_and_curr._M_curr; }
  40abb8:	55                   	push   %rbp
  40abb9:	48 89 e5             	mov    %rsp,%rbp
  40abbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40abc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abc4:	48 83 c0 10          	add    $0x10,%rax
  40abc8:	5d                   	pop    %rbp
  40abc9:	c3                   	ret

000000000040abca <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>:
      _Utf_iterator(_Iter __first, _Iter __it, _Sent __last)
  40abca:	55                   	push   %rbp
  40abcb:	48 89 e5             	mov    %rsp,%rbp
  40abce:	48 83 ec 20          	sub    $0x20,%rsp
  40abd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40abd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40abda:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40abde:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_first_and_curr{__first, __it}, _M_last(__last)
  40abe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40abe6:	48 8d 48 08          	lea    0x8(%rax),%rcx
  40abea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40abee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40abf2:	48 89 c6             	mov    %rax,%rsi
  40abf5:	48 89 cf             	mov    %rcx,%rdi
  40abf8:	e8 d5 12 00 00       	call   40bed2 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>
  40abfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac01:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  40ac05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac09:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  40ac0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac11:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
  40ac15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac19:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac1d:	48 89 50 20          	mov    %rdx,0x20(%rax)
	if (_M_curr() != _M_last)
  40ac21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac25:	48 89 c7             	mov    %rax,%rdi
  40ac28:	e8 8b ff ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40ac2d:	48 8b 10             	mov    (%rax),%rdx
  40ac30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac34:	48 8b 40 20          	mov    0x20(%rax),%rax
  40ac38:	48 39 c2             	cmp    %rax,%rdx
  40ac3b:	0f 95 c0             	setne  %al
  40ac3e:	84 c0                	test   %al,%al
  40ac40:	74 0e                	je     40ac50 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_+0x86>
	  _M_read();
  40ac42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac46:	48 89 c7             	mov    %rax,%rdi
  40ac49:	e8 ae 12 00 00       	call   40befc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>
      }
  40ac4e:	eb 0a                	jmp    40ac5a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_+0x90>
	  _M_buf = {};
  40ac50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ac54:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      }
  40ac5a:	90                   	nop
  40ac5b:	c9                   	leave
  40ac5c:	c3                   	ret
  40ac5d:	90                   	nop

000000000040ac5e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEi>:
      operator++(int)
  40ac5e:	55                   	push   %rbp
  40ac5f:	48 89 e5             	mov    %rsp,%rbp
  40ac62:	53                   	push   %rbx
  40ac63:	48 83 ec 28          	sub    $0x28,%rsp
  40ac67:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ac6b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40ac6f:	89 55 dc             	mov    %edx,-0x24(%rbp)
	auto __tmp = *this;
  40ac72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ac76:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ac7a:	48 8b 0a             	mov    (%rdx),%rcx
  40ac7d:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
  40ac81:	48 89 08             	mov    %rcx,(%rax)
  40ac84:	48 89 58 08          	mov    %rbx,0x8(%rax)
  40ac88:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  40ac8c:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
  40ac90:	48 89 48 10          	mov    %rcx,0x10(%rax)
  40ac94:	48 89 58 18          	mov    %rbx,0x18(%rax)
  40ac98:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  40ac9c:	48 89 50 20          	mov    %rdx,0x20(%rax)
	++*this;
  40aca0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aca4:	48 89 c7             	mov    %rax,%rdi
  40aca7:	e8 6c 12 00 00       	call   40bf18 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
	return __tmp;
  40acac:	90                   	nop
      }
  40acad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40acb1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40acb5:	c9                   	leave
  40acb6:	c3                   	ret
  40acb7:	90                   	nop

000000000040acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>:
      operator*() const { return _M_buf[_M_buf_index]; }
  40acb8:	55                   	push   %rbp
  40acb9:	48 89 e5             	mov    %rsp,%rbp
  40acbc:	48 83 ec 10          	sub    $0x10,%rsp
  40acc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40acc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acc8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40accc:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
  40acd0:	0f b6 d2             	movzbl %dl,%edx
  40acd3:	48 89 d6             	mov    %rdx,%rsi
  40acd6:	48 89 c7             	mov    %rax,%rdi
  40acd9:	e8 46 13 00 00       	call   40c024 <_ZNKSt5arrayIDiLm1EEixEm>
  40acde:	8b 00                	mov    (%rax),%eax
  40ace0:	c9                   	leave
  40ace1:	c3                   	ret

000000000040ace2 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>:
      base() const requires forward_iterator<_Iter>
  40ace2:	55                   	push   %rbp
  40ace3:	48 89 e5             	mov    %rsp,%rbp
  40ace6:	48 83 ec 10          	sub    $0x10,%rsp
  40acea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_curr(); }
  40acee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40acf2:	48 89 c7             	mov    %rax,%rdi
  40acf5:	e8 4c 13 00 00       	call   40c046 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40acfa:	c9                   	leave
  40acfb:	c3                   	ret

000000000040acfc <_ZNSt8__format5_SpecIcE8_S_alignEc>:
      _S_align(_CharT __c) noexcept
  40acfc:	55                   	push   %rbp
  40acfd:	48 89 e5             	mov    %rsp,%rbp
  40ad00:	89 f8                	mov    %edi,%eax
  40ad02:	88 45 fc             	mov    %al,-0x4(%rbp)
	switch (__c)
  40ad05:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  40ad09:	83 f8 5e             	cmp    $0x5e,%eax
  40ad0c:	74 1f                	je     40ad2d <_ZNSt8__format5_SpecIcE8_S_alignEc+0x31>
  40ad0e:	83 f8 5e             	cmp    $0x5e,%eax
  40ad11:	7f 21                	jg     40ad34 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x38>
  40ad13:	83 f8 3c             	cmp    $0x3c,%eax
  40ad16:	74 07                	je     40ad1f <_ZNSt8__format5_SpecIcE8_S_alignEc+0x23>
  40ad18:	83 f8 3e             	cmp    $0x3e,%eax
  40ad1b:	74 09                	je     40ad26 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x2a>
  40ad1d:	eb 15                	jmp    40ad34 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x38>
	  case '<': return _Align_left;
  40ad1f:	b8 01 00 00 00       	mov    $0x1,%eax
  40ad24:	eb 13                	jmp    40ad39 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  case '>': return _Align_right;
  40ad26:	b8 02 00 00 00       	mov    $0x2,%eax
  40ad2b:	eb 0c                	jmp    40ad39 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  case '^': return _Align_centre;
  40ad2d:	b8 03 00 00 00       	mov    $0x3,%eax
  40ad32:	eb 05                	jmp    40ad39 <_ZNSt8__format5_SpecIcE8_S_alignEc+0x3d>
	  default: return _Align_default;
  40ad34:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40ad39:	5d                   	pop    %rbp
  40ad3a:	c3                   	ret

000000000040ad3b <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE>:
      _S_parse_width_or_precision(iterator __first, iterator __last,
  40ad3b:	55                   	push   %rbp
  40ad3c:	48 89 e5             	mov    %rsp,%rbp
  40ad3f:	48 83 ec 70          	sub    $0x70,%rsp
  40ad43:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40ad47:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40ad4b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40ad4f:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40ad53:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
	if (__format::__is_digit(*__first))
  40ad57:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ad5b:	0f b6 00             	movzbl (%rax),%eax
  40ad5e:	0f be c0             	movsbl %al,%eax
  40ad61:	89 c7                	mov    %eax,%edi
  40ad63:	e8 ca a4 ff ff       	call   405232 <_ZNSt8__format10__is_digitEc>
  40ad68:	84 c0                	test   %al,%al
  40ad6a:	74 73                	je     40addf <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xa4>
	    auto [__v, __ptr] = __format::__parse_integer(__first, __last);
  40ad6c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40ad70:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ad74:	48 89 d6             	mov    %rdx,%rsi
  40ad77:	48 89 c7             	mov    %rax,%rdi
  40ad7a:	e8 93 fc ff ff       	call   40aa12 <_ZNSt8__format15__parse_integerIcEESt4pairItPKT_ES4_S4_>
  40ad7f:	89 c1                	mov    %eax,%ecx
  40ad81:	48 89 d0             	mov    %rdx,%rax
  40ad84:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  40ad87:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40ad8b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40ad8f:	48 89 c7             	mov    %rax,%rdi
  40ad92:	e8 d9 b5 ff ff       	call   406370 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40ad97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40ad9b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40ad9f:	48 89 c7             	mov    %rax,%rdi
  40ada2:	e8 21 b6 ff ff       	call   4063c8 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40ada7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    if (!__ptr)
  40adab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40adaf:	48 8b 00             	mov    (%rax),%rax
  40adb2:	48 85 c0             	test   %rax,%rax
  40adb5:	75 0a                	jne    40adc1 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x86>
	      __throw_format_error("format error: invalid width or precision "
  40adb7:	bf 58 b2 41 00       	mov    $0x41b258,%edi
  40adbc:	e8 d8 a3 ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	    __first = __ptr;
  40adc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40adc5:	48 8b 00             	mov    (%rax),%rax
  40adc8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	    __val = __v;
  40adcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40add0:	0f b7 10             	movzwl (%rax),%edx
  40add3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40add7:	66 89 10             	mov    %dx,(%rax)
  40adda:	e9 f1 00 00 00       	jmp    40aed0 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x195>
	else if (*__first == '{')
  40addf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ade3:	0f b6 00             	movzbl (%rax),%eax
  40ade6:	3c 7b                	cmp    $0x7b,%al
  40ade8:	0f 85 e2 00 00 00    	jne    40aed0 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x195>
	    __arg_id = true;
  40adee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40adf2:	c6 00 01             	movb   $0x1,(%rax)
	    ++__first;
  40adf5:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
	    if (__first == __last)
  40adfa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40adfe:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  40ae02:	75 05                	jne    40ae09 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xce>
	      __format::__unmatched_left_brace_in_format_string();
  40ae04:	e8 e3 a3 ff ff       	call   4051ec <_ZNSt8__format39__unmatched_left_brace_in_format_stringEv>
	    if (*__first == '}')
  40ae09:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ae0d:	0f b6 00             	movzbl (%rax),%eax
  40ae10:	3c 7d                	cmp    $0x7d,%al
  40ae12:	75 1a                	jne    40ae2e <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0xf3>
	      __val = __pc.next_arg_id();
  40ae14:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40ae18:	48 89 c7             	mov    %rax,%rdi
  40ae1b:	e8 02 b8 ff ff       	call   406622 <_ZNSt26basic_format_parse_contextIcE11next_arg_idEv>
  40ae20:	89 c2                	mov    %eax,%edx
  40ae22:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ae26:	66 89 10             	mov    %dx,(%rax)
  40ae29:	e9 9d 00 00 00       	jmp    40aecb <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x190>
		auto [__v, __ptr] = __format::__parse_arg_id(__first, __last);
  40ae2e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40ae32:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ae36:	48 89 d6             	mov    %rdx,%rsi
  40ae39:	48 89 c7             	mov    %rax,%rdi
  40ae3c:	e8 91 d5 ff ff       	call   4083d2 <_ZNSt8__format14__parse_arg_idIcEESt4pairItPKT_ES4_S4_>
  40ae41:	89 c1                	mov    %eax,%ecx
  40ae43:	48 89 d0             	mov    %rdx,%rax
  40ae46:	89 4d c0             	mov    %ecx,-0x40(%rbp)
  40ae49:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40ae4d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ae51:	48 89 c7             	mov    %rax,%rdi
  40ae54:	e8 17 b5 ff ff       	call   406370 <_ZSt3getILm0EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40ae59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40ae5d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ae61:	48 89 c7             	mov    %rax,%rdi
  40ae64:	e8 5f b5 ff ff       	call   4063c8 <_ZSt3getILm1EtPKcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS6_>
  40ae69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
  40ae6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ae71:	48 8b 00             	mov    (%rax),%rax
  40ae74:	48 85 c0             	test   %rax,%rax
  40ae77:	74 1b                	je     40ae94 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x159>
  40ae79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ae7d:	48 8b 00             	mov    (%rax),%rax
  40ae80:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  40ae84:	74 0e                	je     40ae94 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x159>
  40ae86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ae8a:	48 8b 00             	mov    (%rax),%rax
  40ae8d:	0f b6 00             	movzbl (%rax),%eax
  40ae90:	3c 7d                	cmp    $0x7d,%al
  40ae92:	74 05                	je     40ae99 <_ZNSt8__format5_SpecIcE27_S_parse_width_or_precisionEPKcS3_RtRbRSt26basic_format_parse_contextIcE+0x15e>
		  __format::__invalid_arg_id_in_format_string();
  40ae94:	e8 7d a3 ff ff       	call   405216 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
		__first = __ptr;
  40ae99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40ae9d:	48 8b 00             	mov    (%rax),%rax
  40aea0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		__pc.check_arg_id(__v);
  40aea4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aea8:	0f b7 00             	movzwl (%rax),%eax
  40aeab:	0f b7 d0             	movzwl %ax,%edx
  40aeae:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40aeb2:	48 89 d6             	mov    %rdx,%rsi
  40aeb5:	48 89 c7             	mov    %rax,%rdi
  40aeb8:	e8 35 d6 ff ff       	call   4084f2 <_ZNSt26basic_format_parse_contextIcE12check_arg_idEm>
		__val = __v;
  40aebd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40aec1:	0f b7 10             	movzwl (%rax),%edx
  40aec4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40aec8:	66 89 10             	mov    %dx,(%rax)
	    ++__first; // past the '}'
  40aecb:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
	return __first;
  40aed0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
      }
  40aed4:	c9                   	leave
  40aed5:	c3                   	ret

000000000040aed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40aed6:	55                   	push   %rbp
  40aed7:	48 89 e5             	mov    %rsp,%rbp
  40aeda:	53                   	push   %rbx
  40aedb:	48 83 ec 28          	sub    $0x28,%rsp
  40aedf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40aee3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40aee7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__capacity > max_size())
  40aeeb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40aeef:	48 8b 18             	mov    (%rax),%rbx
  40aef2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40aef6:	48 89 c7             	mov    %rax,%rdi
  40aef9:	e8 68 11 00 00       	call   40c066 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40aefe:	48 39 d8             	cmp    %rbx,%rax
  40af01:	0f 92 c0             	setb   %al
  40af04:	84 c0                	test   %al,%al
  40af06:	74 0a                	je     40af12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x3c>
	std::__throw_length_error(__N("basic_string::_M_create"));
  40af08:	bf 90 b2 41 00       	mov    $0x41b290,%edi
  40af0d:	e8 1e 92 ff ff       	call   404130 <_ZSt20__throw_length_errorPKc@plt>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
  40af12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40af16:	48 8b 00             	mov    (%rax),%rax
  40af19:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40af1d:	73 52                	jae    40af71 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
  40af1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40af23:	48 8b 10             	mov    (%rax),%rdx
  40af26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40af2a:	48 01 c0             	add    %rax,%rax
  40af2d:	48 39 c2             	cmp    %rax,%rdx
  40af30:	73 3f                	jae    40af71 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
	  __capacity = 2 * __old_capacity;
  40af32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40af36:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  40af3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40af3e:	48 89 10             	mov    %rdx,(%rax)
	  if (__capacity > max_size())
  40af41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40af45:	48 8b 18             	mov    (%rax),%rbx
  40af48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40af4c:	48 89 c7             	mov    %rax,%rdi
  40af4f:	e8 12 11 00 00       	call   40c066 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40af54:	48 39 d8             	cmp    %rbx,%rax
  40af57:	0f 92 c0             	setb   %al
  40af5a:	84 c0                	test   %al,%al
  40af5c:	74 13                	je     40af71 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x9b>
	    __capacity = max_size();
  40af5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40af62:	48 89 c7             	mov    %rax,%rdi
  40af65:	e8 fc 10 00 00       	call   40c066 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40af6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40af6e:	48 89 02             	mov    %rax,(%rdx)
      return _S_allocate(_M_get_allocator(), __capacity + 1);
  40af71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40af75:	48 8b 00             	mov    (%rax),%rax
  40af78:	48 8d 58 01          	lea    0x1(%rax),%rbx
  40af7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40af80:	48 89 c7             	mov    %rax,%rdi
  40af83:	e8 ba c8 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40af88:	48 89 de             	mov    %rbx,%rsi
  40af8b:	48 89 c7             	mov    %rax,%rdi
  40af8e:	e8 ff 10 00 00       	call   40c092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
    }
  40af93:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40af97:	c9                   	leave
  40af98:	c3                   	ret

000000000040af99 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
  40af99:	55                   	push   %rbp
  40af9a:	48 89 e5             	mov    %rsp,%rbp
  40af9d:	48 83 ec 20          	sub    $0x20,%rsp
  40afa1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40afa5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40afa9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
  40afad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40afb1:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40afb5:	48 89 c2             	mov    %rax,%rdx
  40afb8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40afbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40afc0:	48 89 ce             	mov    %rcx,%rsi
  40afc3:	48 89 c7             	mov    %rax,%rdi
  40afc6:	e8 4b 11 00 00       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40afcb:	90                   	nop
  40afcc:	c9                   	leave
  40afcd:	c3                   	ret

000000000040afce <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40afce:	55                   	push   %rbp
  40afcf:	48 89 e5             	mov    %rsp,%rbp
  40afd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40afd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40afda:	5d                   	pop    %rbp
  40afdb:	c3                   	ret

000000000040afdc <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>:
    println(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40afdc:	55                   	push   %rbp
  40afdd:	48 89 e5             	mov    %rsp,%rbp
  40afe0:	41 55                	push   %r13
  40afe2:	41 54                	push   %r12
  40afe4:	53                   	push   %rbx
  40afe5:	48 83 ec 48          	sub    $0x48,%rsp
  40afe9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40afed:	48 89 f0             	mov    %rsi,%rax
  40aff0:	48 89 d6             	mov    %rdx,%rsi
  40aff3:	48 89 c0             	mov    %rax,%rax
  40aff6:	ba 00 00 00 00       	mov    $0x0,%edx
  40affb:	48 89 f2             	mov    %rsi,%rdx
  40affe:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40b002:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40b006:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40b00a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40b00e:	48 89 c7             	mov    %rax,%rdi
  40b011:	e8 b8 ff ff ff       	call   40afce <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
  40b016:	48 89 c1             	mov    %rax,%rcx
  40b019:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b01d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40b021:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b025:	48 89 c7             	mov    %rax,%rdi
  40b028:	e8 33 11 00 00       	call   40c160 <_ZSt6formatIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES5_St19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>
      std::print(__stream, "{}\n",
  40b02d:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  40b033:	41 bd 43 b2 41 00    	mov    $0x41b243,%r13d
  40b039:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40b03d:	4c 89 e6             	mov    %r12,%rsi
  40b040:	4c 89 ef             	mov    %r13,%rdi
  40b043:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b047:	48 89 d1             	mov    %rdx,%rcx
  40b04a:	48 89 fa             	mov    %rdi,%rdx
  40b04d:	48 89 c7             	mov    %rax,%rdi
  40b050:	e8 33 0c 00 00       	call   40bc88 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40b055:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b059:	48 89 c7             	mov    %rax,%rdi
  40b05c:	e8 13 c5 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  40b061:	eb 1a                	jmp    40b07d <_ZSt7printlnIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40b063:	48 89 c3             	mov    %rax,%rbx
  40b066:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b06a:	48 89 c7             	mov    %rax,%rdi
  40b06d:	e8 02 c5 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40b072:	48 89 d8             	mov    %rbx,%rax
  40b075:	48 89 c7             	mov    %rax,%rdi
  40b078:	e8 93 93 ff ff       	call   404410 <_Unwind_Resume@plt>
    }
  40b07d:	48 83 c4 48          	add    $0x48,%rsp
  40b081:	5b                   	pop    %rbx
  40b082:	41 5c                	pop    %r12
  40b084:	41 5d                	pop    %r13
  40b086:	5d                   	pop    %rbp
  40b087:	c3                   	ret

000000000040b088 <_ZSt6formatIJiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS8_>:
#endif

  template<typename... _Args>
    [[nodiscard]]
    inline string
    format(format_string<_Args...> __fmt, _Args&&... __args)
  40b088:	55                   	push   %rbp
  40b089:	48 89 e5             	mov    %rsp,%rbp
  40b08c:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40b090:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40b094:	48 89 f0             	mov    %rsi,%rax
  40b097:	48 89 d6             	mov    %rdx,%rsi
  40b09a:	48 89 c0             	mov    %rax,%rax
  40b09d:	ba 00 00 00 00       	mov    $0x0,%edx
  40b0a2:	48 89 f2             	mov    %rsi,%rdx
  40b0a5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40b0a9:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40b0ad:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40b0b1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40b0b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40b0b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b0bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40b0c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b0c5:	48 89 c7             	mov    %rax,%rdi
  40b0c8:	e8 30 1f 00 00       	call   40cffd <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJiEE11_S_make_eltIiEENS_10_Arg_valueIS4_EERT_>
  40b0cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b0d1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40b0d5:	90                   	nop
      return _Store(__fmt_args...);
  40b0d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b0da:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b0de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40b0e2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40b0e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b0ea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b0ee:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40b0f2:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40b0f6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40b0fa:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b0fe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b102:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b106:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40b10a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40b10e:	48 89 d6             	mov    %rdx,%rsi
  40b111:	48 89 c7             	mov    %rax,%rdi
  40b114:	e8 e7 12 00 00       	call   40c400 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJiEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40b119:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40b11d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40b121:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40b125:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  40b129:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40b12d:	49 89 c1             	mov    %rax,%r9
  40b130:	48 89 d0             	mov    %rdx,%rax
  40b133:	49 89 f0             	mov    %rsi,%r8
  40b136:	4c 89 ce             	mov    %r9,%rsi
  40b139:	48 89 c2             	mov    %rax,%rdx
  40b13c:	e8 ee a1 ff ff       	call   40532f <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
  40b141:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40b145:	c9                   	leave
  40b146:	c3                   	ret

000000000040b147 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRSoSt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
    print(ostream& __os, format_string<_Args...> __fmt, _Args&&... __args)
  40b147:	55                   	push   %rbp
  40b148:	48 89 e5             	mov    %rsp,%rbp
  40b14b:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40b14f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40b153:	48 89 f0             	mov    %rsi,%rax
  40b156:	48 89 d6             	mov    %rdx,%rsi
  40b159:	48 89 c0             	mov    %rax,%rax
  40b15c:	ba 00 00 00 00       	mov    $0x0,%edx
  40b161:	48 89 f2             	mov    %rsi,%rdx
  40b164:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40b168:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40b16c:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40b170:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40b174:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40b178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b17c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40b180:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b184:	48 89 c7             	mov    %rax,%rdi
  40b187:	e8 aa 1e 00 00       	call   40d036 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40b18c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b190:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40b194:	90                   	nop
      return _Store(__fmt_args...);
  40b195:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b199:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b19d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40b1a1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40b1a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b1a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b1ad:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40b1b1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      auto __fmtargs = std::make_format_args(__args...);
  40b1b5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40b1b9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b1bd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40b1c1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	std::vprint_unicode(__os, __fmt.get(), __fmtargs);
  40b1c5:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  40b1c9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b1cd:	48 89 d6             	mov    %rdx,%rsi
  40b1d0:	48 89 c7             	mov    %rax,%rdi
  40b1d3:	e8 8a 12 00 00       	call   40c462 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40b1d8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40b1dc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40b1e0:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40b1e4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40b1e8:	48 89 c7             	mov    %rax,%rdi
  40b1eb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40b1ef:	49 89 f0             	mov    %rsi,%r8
  40b1f2:	48 89 fe             	mov    %rdi,%rsi
  40b1f5:	48 89 c7             	mov    %rax,%rdi
  40b1f8:	e8 22 a9 ff ff       	call   405b1f <_ZSt14vprint_unicodeRSoSt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
    }
  40b1fd:	90                   	nop
  40b1fe:	c9                   	leave
  40b1ff:	c3                   	ret

000000000040b200 <_ZSt7printlnIJiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS4_>:
    println(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40b200:	55                   	push   %rbp
  40b201:	48 89 e5             	mov    %rsp,%rbp
  40b204:	41 55                	push   %r13
  40b206:	41 54                	push   %r12
  40b208:	53                   	push   %rbx
  40b209:	48 83 ec 48          	sub    $0x48,%rsp
  40b20d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40b211:	48 89 f0             	mov    %rsi,%rax
  40b214:	48 89 d6             	mov    %rdx,%rsi
  40b217:	48 89 c0             	mov    %rax,%rax
  40b21a:	ba 00 00 00 00       	mov    $0x0,%edx
  40b21f:	48 89 f2             	mov    %rsi,%rdx
  40b222:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40b226:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40b22a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40b22e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40b232:	48 89 c7             	mov    %rax,%rdi
  40b235:	e8 53 f7 ff ff       	call   40a98d <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
  40b23a:	48 89 c1             	mov    %rax,%rcx
  40b23d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b241:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40b245:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40b249:	48 89 c7             	mov    %rax,%rdi
  40b24c:	e8 37 fe ff ff       	call   40b088 <_ZSt6formatIJiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS8_>
      std::print(__stream, "{}\n",
  40b251:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  40b257:	41 bd 43 b2 41 00    	mov    $0x41b243,%r13d
  40b25d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40b261:	4c 89 e6             	mov    %r12,%rsi
  40b264:	4c 89 ef             	mov    %r13,%rdi
  40b267:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b26b:	48 89 d1             	mov    %rdx,%rcx
  40b26e:	48 89 fa             	mov    %rdi,%rdx
  40b271:	48 89 c7             	mov    %rax,%rdi
  40b274:	e8 0f 0a 00 00       	call   40bc88 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40b279:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b27d:	48 89 c7             	mov    %rax,%rdi
  40b280:	e8 ef c2 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
  40b285:	eb 1a                	jmp    40b2a1 <_ZSt7printlnIJiEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS4_+0xa1>
		 std::format(__fmt, std::forward<_Args>(__args)...));
  40b287:	48 89 c3             	mov    %rax,%rbx
  40b28a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b28e:	48 89 c7             	mov    %rax,%rdi
  40b291:	e8 de c2 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40b296:	48 89 d8             	mov    %rbx,%rax
  40b299:	48 89 c7             	mov    %rax,%rdi
  40b29c:	e8 6f 91 ff ff       	call   404410 <_Unwind_Resume@plt>
    }
  40b2a1:	48 83 c4 48          	add    $0x48,%rsp
  40b2a5:	5b                   	pop    %rbx
  40b2a6:	41 5c                	pop    %r12
  40b2a8:	41 5d                	pop    %r13
  40b2aa:	5d                   	pop    %rbp
  40b2ab:	c3                   	ret

000000000040b2ac <_ZNSt8__format5_SpecIcE7_S_signEc>:
      _S_sign(_CharT __c) noexcept
  40b2ac:	55                   	push   %rbp
  40b2ad:	48 89 e5             	mov    %rsp,%rbp
  40b2b0:	89 f8                	mov    %edi,%eax
  40b2b2:	88 45 fc             	mov    %al,-0x4(%rbp)
	switch (__c)
  40b2b5:	0f be 45 fc          	movsbl -0x4(%rbp),%eax
  40b2b9:	83 f8 2d             	cmp    $0x2d,%eax
  40b2bc:	74 16                	je     40b2d4 <_ZNSt8__format5_SpecIcE7_S_signEc+0x28>
  40b2be:	83 f8 2d             	cmp    $0x2d,%eax
  40b2c1:	7f 1f                	jg     40b2e2 <_ZNSt8__format5_SpecIcE7_S_signEc+0x36>
  40b2c3:	83 f8 20             	cmp    $0x20,%eax
  40b2c6:	74 13                	je     40b2db <_ZNSt8__format5_SpecIcE7_S_signEc+0x2f>
  40b2c8:	83 f8 2b             	cmp    $0x2b,%eax
  40b2cb:	75 15                	jne    40b2e2 <_ZNSt8__format5_SpecIcE7_S_signEc+0x36>
	  case '+': return _Sign_plus;
  40b2cd:	b8 01 00 00 00       	mov    $0x1,%eax
  40b2d2:	eb 13                	jmp    40b2e7 <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  case '-': return _Sign_minus;
  40b2d4:	b8 02 00 00 00       	mov    $0x2,%eax
  40b2d9:	eb 0c                	jmp    40b2e7 <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  case ' ': return _Sign_space;
  40b2db:	b8 03 00 00 00       	mov    $0x3,%eax
  40b2e0:	eb 05                	jmp    40b2e7 <_ZNSt8__format5_SpecIcE7_S_signEc+0x3b>
	  default:  return _Sign_default;
  40b2e2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40b2e7:	5d                   	pop    %rbp
  40b2e8:	c3                   	ret

000000000040b2e9 <_ZSt11__bit_widthImEiT_>:
    __bit_width(_Tp __x) noexcept
  40b2e9:	55                   	push   %rbp
  40b2ea:	48 89 e5             	mov    %rsp,%rbp
  40b2ed:	48 83 ec 20          	sub    $0x20,%rsp
  40b2f1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  40b2f5:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  40b2fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b300:	48 89 c7             	mov    %rax,%rdi
  40b303:	e8 bc 11 00 00       	call   40c4c4 <_ZSt13__countl_zeroImEiT_>
  40b308:	ba 40 00 00 00       	mov    $0x40,%edx
  40b30d:	29 c2                	sub    %eax,%edx
  40b30f:	89 d0                	mov    %edx,%eax
    }
  40b311:	c9                   	leave
  40b312:	c3                   	ret

000000000040b313 <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40b313:	55                   	push   %rbp
  40b314:	48 89 e5             	mov    %rsp,%rbp
  40b317:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40b31b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b31f:	5d                   	pop    %rbp
  40b320:	c3                   	ret
  40b321:	90                   	nop

000000000040b322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>:
      _M_destroy(size_type __size) throw()
  40b322:	55                   	push   %rbp
  40b323:	48 89 e5             	mov    %rsp,%rbp
  40b326:	41 54                	push   %r12
  40b328:	53                   	push   %rbx
  40b329:	48 83 ec 40          	sub    $0x40,%rsp
  40b32d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40b331:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40b335:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40b339:	4c 8d 60 01          	lea    0x1(%rax),%r12
  40b33d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b341:	48 89 c7             	mov    %rax,%rdi
  40b344:	e8 cd c1 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b349:	48 89 c3             	mov    %rax,%rbx
  40b34c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40b350:	48 89 c7             	mov    %rax,%rdi
  40b353:	e8 ea c4 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40b358:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40b35c:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
  40b360:	4c 89 65 d8          	mov    %r12,-0x28(%rbp)
  40b364:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b368:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b36c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b370:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40b374:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b378:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b37c:	b8 00 00 00 00       	mov    $0x0,%eax

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
  40b381:	84 c0                	test   %al,%al
  40b383:	74 0e                	je     40b393 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm+0x71>
	  {
	    ::operator delete(__p);
  40b385:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40b389:	48 89 c7             	mov    %rax,%rdi
  40b38c:	e8 cf 8e ff ff       	call   404260 <_ZdlPv@plt>
	    return;
  40b391:	eb 17                	jmp    40b3aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm+0x88>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
  40b393:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40b397:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40b39b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b39f:	48 89 ce             	mov    %rcx,%rsi
  40b3a2:	48 89 c7             	mov    %rax,%rdi
  40b3a5:	e8 ae 21 00 00       	call   40d558 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      [[__gnu__::__always_inline__]]
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
  40b3aa:	90                   	nop
  40b3ab:	90                   	nop
  40b3ac:	48 83 c4 40          	add    $0x40,%rsp
  40b3b0:	5b                   	pop    %rbx
  40b3b1:	41 5c                	pop    %r12
  40b3b3:	5d                   	pop    %rbp
  40b3b4:	c3                   	ret
  40b3b5:	90                   	nop

000000000040b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
  40b3b6:	55                   	push   %rbp
  40b3b7:	48 89 e5             	mov    %rsp,%rbp
  40b3ba:	48 83 ec 10          	sub    $0x10,%rsp
  40b3be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _M_is_local() ? size_type(_S_local_capacity)
  40b3c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b3c6:	48 89 c7             	mov    %rax,%rdi
  40b3c9:	e8 82 c4 ff ff       	call   407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  40b3ce:	84 c0                	test   %al,%al
  40b3d0:	74 07                	je     40b3d9 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x23>
  40b3d2:	b8 0f 00 00 00       	mov    $0xf,%eax
	                     : _M_allocated_capacity;
  40b3d7:	eb 08                	jmp    40b3e1 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x2b>
	return _M_is_local() ? size_type(_S_local_capacity)
  40b3d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b3dd:	48 8b 40 10          	mov    0x10(%rax),%rax
      }
  40b3e1:	c9                   	leave
  40b3e2:	c3                   	ret
  40b3e3:	90                   	nop

000000000040b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    basic_string<_CharT, _Traits, _Alloc>::
  40b3e4:	55                   	push   %rbp
  40b3e5:	48 89 e5             	mov    %rsp,%rbp
  40b3e8:	53                   	push   %rbx
  40b3e9:	48 83 ec 28          	sub    $0x28,%rsp
  40b3ed:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40b3f1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    reserve(size_type __res)
    {
      const size_type __capacity = capacity();
  40b3f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b3f9:	48 89 c7             	mov    %rax,%rdi
  40b3fc:	e8 b5 ff ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40b401:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2968. Inconsistencies between basic_string reserve and
      // vector/unordered_map/unordered_set reserve functions
      // P0966 reserve should not shrink
      if (__res <= __capacity)
  40b405:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b409:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40b40d:	0f 83 80 00 00 00    	jae    40b493 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm+0xaf>
	return;

      pointer __tmp = _M_create(__res, __capacity);
  40b413:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b417:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  40b41b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b41f:	48 89 ce             	mov    %rcx,%rsi
  40b422:	48 89 c7             	mov    %rax,%rdi
  40b425:	e8 ac fa ff ff       	call   40aed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  40b42a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      this->_S_copy(__tmp, _M_data(), length() + 1);
  40b42e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b432:	48 89 c7             	mov    %rax,%rdi
  40b435:	e8 66 c4 ff ff       	call   4078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40b43a:	48 8d 58 01          	lea    0x1(%rax),%rbx
  40b43e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b442:	48 89 c7             	mov    %rax,%rdi
  40b445:	e8 cc c0 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40b44a:	48 89 c1             	mov    %rax,%rcx
  40b44d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b451:	48 89 da             	mov    %rbx,%rdx
  40b454:	48 89 ce             	mov    %rcx,%rsi
  40b457:	48 89 c7             	mov    %rax,%rdi
  40b45a:	e8 b7 0c 00 00       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
  40b45f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b463:	48 89 c7             	mov    %rax,%rdi
  40b466:	e8 15 e3 ff ff       	call   409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__tmp);
  40b46b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40b46f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b473:	48 89 d6             	mov    %rdx,%rsi
  40b476:	48 89 c7             	mov    %rax,%rdi
  40b479:	e8 5a e3 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__res);
  40b47e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40b482:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b486:	48 89 d6             	mov    %rdx,%rsi
  40b489:	48 89 c7             	mov    %rax,%rdi
  40b48c:	e8 61 e3 ff ff       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  40b491:	eb 01                	jmp    40b494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm+0xb0>
	return;
  40b493:	90                   	nop
    }
  40b494:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b498:	c9                   	leave
  40b499:	c3                   	ret

000000000040b49a <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>:
      pointer_to(element_type& __r) noexcept
  40b49a:	55                   	push   %rbp
  40b49b:	48 89 e5             	mov    %rsp,%rbp
  40b49e:	48 83 ec 10          	sub    $0x10,%rsp
  40b4a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
  40b4a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b4aa:	48 89 c7             	mov    %rax,%rdi
  40b4ad:	e8 57 10 00 00       	call   40c509 <_ZSt9addressofIKcEPT_RS1_>
  40b4b2:	c9                   	leave
  40b4b3:	c3                   	ret

000000000040b4b4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKDiPS3_EEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
  40b4b4:	55                   	push   %rbp
  40b4b5:	48 89 e5             	mov    %rsp,%rbp
  40b4b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b4bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b4c0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return __val < *__it; }
  40b4c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b4c8:	8b 10                	mov    (%rax),%edx
  40b4ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b4ce:	8b 00                	mov    (%rax),%eax
  40b4d0:	39 c2                	cmp    %eax,%edx
  40b4d2:	0f 92 c0             	setb   %al
  40b4d5:	5d                   	pop    %rbp
  40b4d6:	c3                   	ret
  40b4d7:	90                   	nop

000000000040b4d8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPKjS3_EEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
  40b4d8:	55                   	push   %rbp
  40b4d9:	48 89 e5             	mov    %rsp,%rbp
  40b4dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b4e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b4e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return *__it < __val; }
  40b4e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b4ec:	8b 10                	mov    (%rax),%edx
  40b4ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b4f2:	8b 00                	mov    (%rax),%eax
  40b4f4:	39 c2                	cmp    %eax,%edx
  40b4f6:	0f 92 c0             	setb   %al
  40b4f9:	5d                   	pop    %rbp
  40b4fa:	c3                   	ret
  40b4fb:	90                   	nop

000000000040b4fc <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
  40b4fc:	55                   	push   %rbp
  40b4fd:	48 89 e5             	mov    %rsp,%rbp
  40b500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b504:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_value(__value)
  40b508:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b50c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b510:	48 89 10             	mov    %rdx,(%rax)
      { }
  40b513:	90                   	nop
  40b514:	5d                   	pop    %rbp
  40b515:	c3                   	ret

000000000040b516 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
  40b516:	55                   	push   %rbp
  40b517:	48 89 e5             	mov    %rsp,%rbp
  40b51a:	48 83 ec 30          	sub    $0x30,%rsp
  40b51e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b522:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40b526:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	__trip_count = (__last - __first) >> 2;
  40b52a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b52e:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40b532:	48 c1 f8 02          	sar    $0x2,%rax
  40b536:	48 c1 f8 02          	sar    $0x2,%rax
  40b53a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __trip_count > 0; --__trip_count)
  40b53e:	e9 99 00 00 00       	jmp    40b5dc <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xc6>
	  if (__pred(__first))
  40b543:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b547:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b54b:	48 89 d6             	mov    %rdx,%rsi
  40b54e:	48 89 c7             	mov    %rax,%rdi
  40b551:	e8 00 13 00 00       	call   40c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b556:	84 c0                	test   %al,%al
  40b558:	74 09                	je     40b563 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x4d>
	    return __first;
  40b55a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b55e:	e9 14 01 00 00       	jmp    40b677 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b563:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b568:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b56c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b570:	48 89 d6             	mov    %rdx,%rsi
  40b573:	48 89 c7             	mov    %rax,%rdi
  40b576:	e8 db 12 00 00       	call   40c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b57b:	84 c0                	test   %al,%al
  40b57d:	74 09                	je     40b588 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x72>
	    return __first;
  40b57f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b583:	e9 ef 00 00 00       	jmp    40b677 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b588:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b58d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b591:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b595:	48 89 d6             	mov    %rdx,%rsi
  40b598:	48 89 c7             	mov    %rax,%rdi
  40b59b:	e8 b6 12 00 00       	call   40c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b5a0:	84 c0                	test   %al,%al
  40b5a2:	74 09                	je     40b5ad <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x97>
	    return __first;
  40b5a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b5a8:	e9 ca 00 00 00       	jmp    40b677 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b5ad:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b5b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b5b6:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b5ba:	48 89 d6             	mov    %rdx,%rsi
  40b5bd:	48 89 c7             	mov    %rax,%rdi
  40b5c0:	e8 91 12 00 00       	call   40c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b5c5:	84 c0                	test   %al,%al
  40b5c7:	74 09                	je     40b5d2 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xbc>
	    return __first;
  40b5c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b5cd:	e9 a5 00 00 00       	jmp    40b677 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b5d2:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
      for (; __trip_count > 0; --__trip_count)
  40b5d7:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
  40b5dc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40b5e1:	0f 8f 5c ff ff ff    	jg     40b543 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x2d>
      switch (__last - __first)
  40b5e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b5eb:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40b5ef:	48 c1 f8 02          	sar    $0x2,%rax
  40b5f3:	48 83 f8 03          	cmp    $0x3,%rax
  40b5f7:	74 14                	je     40b60d <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0xf7>
  40b5f9:	48 83 f8 03          	cmp    $0x3,%rax
  40b5fd:	7f 74                	jg     40b673 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x15d>
  40b5ff:	48 83 f8 01          	cmp    $0x1,%rax
  40b603:	74 4c                	je     40b651 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x13b>
  40b605:	48 83 f8 02          	cmp    $0x2,%rax
  40b609:	74 24                	je     40b62f <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x119>
  40b60b:	eb 66                	jmp    40b673 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x15d>
	  if (__pred(__first))
  40b60d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b611:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b615:	48 89 d6             	mov    %rdx,%rsi
  40b618:	48 89 c7             	mov    %rax,%rdi
  40b61b:	e8 36 12 00 00       	call   40c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b620:	84 c0                	test   %al,%al
  40b622:	74 06                	je     40b62a <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x114>
	    return __first;
  40b624:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b628:	eb 4d                	jmp    40b677 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b62a:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b62f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b633:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b637:	48 89 d6             	mov    %rdx,%rsi
  40b63a:	48 89 c7             	mov    %rax,%rdi
  40b63d:	e8 14 12 00 00       	call   40c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b642:	84 c0                	test   %al,%al
  40b644:	74 06                	je     40b64c <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x136>
	    return __first;
  40b646:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b64a:	eb 2b                	jmp    40b677 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b64c:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  if (__pred(__first))
  40b651:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b655:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b659:	48 89 d6             	mov    %rdx,%rsi
  40b65c:	48 89 c7             	mov    %rax,%rdi
  40b65f:	e8 f2 11 00 00       	call   40c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>
  40b664:	84 c0                	test   %al,%al
  40b666:	74 06                	je     40b66e <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x158>
	    return __first;
  40b668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b66c:	eb 09                	jmp    40b677 <_ZSt9__find_ifIPKDiN9__gnu_cxx5__ops16_Iter_equals_valIS0_EEET_S6_S6_T0_St26random_access_iterator_tag+0x161>
	  ++__first;
  40b66e:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	  return __last;
  40b673:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  40b677:	c9                   	leave
  40b678:	c3                   	ret
  40b679:	90                   	nop

000000000040b67a <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>:
	span(_It __first, size_type __count)
  40b67a:	55                   	push   %rbp
  40b67b:	48 89 e5             	mov    %rsp,%rbp
  40b67e:	48 83 ec 20          	sub    $0x20,%rsp
  40b682:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b686:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b68a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _M_ptr(std::to_address(__first)), _M_extent(__count)
  40b68e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40b692:	48 89 c7             	mov    %rax,%rdi
  40b695:	e8 21 00 00 00       	call   40b6bb <_ZSt10to_addressIcEPT_S1_>
  40b69a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b69e:	48 89 02             	mov    %rax,(%rdx)
  40b6a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b6a5:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40b6a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b6ad:	48 89 c6             	mov    %rax,%rsi
  40b6b0:	48 89 d7             	mov    %rdx,%rdi
  40b6b3:	e8 ea 96 ff ff       	call   404da2 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>
	}
  40b6b8:	90                   	nop
  40b6b9:	c9                   	leave
  40b6ba:	c3                   	ret

000000000040b6bb <_ZSt10to_addressIcEPT_S1_>:
    to_address(_Tp* __ptr) noexcept
  40b6bb:	55                   	push   %rbp
  40b6bc:	48 89 e5             	mov    %rsp,%rbp
  40b6bf:	48 83 ec 10          	sub    $0x10,%rsp
  40b6c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__to_address(__ptr); }
  40b6c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b6cb:	48 89 c7             	mov    %rax,%rdi
  40b6ce:	e8 5b f1 ff ff       	call   40a82e <_ZSt12__to_addressIcEPT_S1_>
  40b6d3:	c9                   	leave
  40b6d4:	c3                   	ret
  40b6d5:	90                   	nop

000000000040b6d6 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>:
	span(type_identity_t<element_type> (&__arr)[_ArrayExtent]) noexcept
  40b6d6:	55                   	push   %rbp
  40b6d7:	48 89 e5             	mov    %rsp,%rbp
  40b6da:	48 83 ec 10          	sub    $0x10,%rsp
  40b6de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b6e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: span(static_cast<pointer>(__arr), _ArrayExtent)
  40b6e6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40b6ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b6ee:	ba 00 01 00 00       	mov    $0x100,%edx
  40b6f3:	48 89 ce             	mov    %rcx,%rsi
  40b6f6:	48 89 c7             	mov    %rax,%rdi
  40b6f9:	e8 7c ff ff ff       	call   40b67a <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
	{ }
  40b6fe:	90                   	nop
  40b6ff:	c9                   	leave
  40b700:	c3                   	ret

000000000040b701 <_ZSt9addressofINSt8__format5_SinkIcEEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
  40b701:	55                   	push   %rbp
  40b702:	48 89 e5             	mov    %rsp,%rbp
  40b705:	48 83 ec 10          	sub    $0x10,%rsp
  40b709:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  40b70d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b711:	48 89 c7             	mov    %rax,%rdi
  40b714:	e8 a0 11 00 00       	call   40c8b9 <_ZSt11__addressofINSt8__format5_SinkIcEEEPT_RS3_>
  40b719:	c9                   	leave
  40b71a:	c3                   	ret

000000000040b71b <_ZSt7forwardIZNSt8__format15__do_vformat_toINS0_10_Sink_iterIcEEcSt20basic_format_contextIS3_cEEET_S6_St17basic_string_viewIT0_St11char_traitsIS8_EERKSt17basic_format_argsIT1_EPKSt6localeEUlRS6_E_EOS6_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40b71b:	55                   	push   %rbp
  40b71c:	48 89 e5             	mov    %rsp,%rbp
  40b71f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40b723:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b727:	5d                   	pop    %rbp
  40b728:	c3                   	ret
  40b729:	90                   	nop

000000000040b72a <_ZNSt8__format5_SinkIcE10_M_reserveEm>:
      _M_reserve(size_t __n)
  40b72a:	55                   	push   %rbp
  40b72b:	48 89 e5             	mov    %rsp,%rbp
  40b72e:	53                   	push   %rbx
  40b72f:	48 83 ec 58          	sub    $0x58,%rsp
  40b733:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40b737:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  40b73b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b73f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  40b743:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b747:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40b74b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b74f:	48 83 c0 08          	add    $0x8,%rax
  40b753:	48 89 c7             	mov    %rax,%rdi
  40b756:	e8 cd 02 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40b75b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b75f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b763:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b767:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40b76b:	48 89 c6             	mov    %rax,%rsi
  40b76e:	48 89 d7             	mov    %rdx,%rdi
  40b771:	e8 d7 02 00 00       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40b776:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40b77d:	48 89 c6             	mov    %rax,%rsi
  40b780:	48 89 df             	mov    %rbx,%rdi
  40b783:	e8 04 1b 00 00       	call   40d28c <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  40b788:	90                   	nop
	if (__n <= _M_unused().size())
  40b789:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40b78d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40b791:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40b795:	48 89 c7             	mov    %rax,%rdi
  40b798:	e8 97 9d ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40b79d:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40b7a1:	0f 93 c0             	setae  %al
  40b7a4:	84 c0                	test   %al,%al
  40b7a6:	74 09                	je     40b7b1 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x87>
	  return { this };
  40b7a8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b7ac:	e9 aa 00 00 00       	jmp    40b85b <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x131>
	if (__n <= _M_span.size()) // Cannot meet the request.
  40b7b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b7b5:	48 83 c0 08          	add    $0x8,%rax
  40b7b9:	48 89 c7             	mov    %rax,%rdi
  40b7bc:	e8 73 9d ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40b7c1:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40b7c5:	0f 93 c0             	setae  %al
  40b7c8:	84 c0                	test   %al,%al
  40b7ca:	0f 84 86 00 00 00    	je     40b856 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x12c>
	    _M_overflow(); // Make more space available.
  40b7d0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b7d4:	48 8b 00             	mov    (%rax),%rax
  40b7d7:	48 8b 10             	mov    (%rax),%rdx
  40b7da:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b7de:	48 89 c7             	mov    %rax,%rdi
  40b7e1:	ff d2                	call   *%rdx
  40b7e3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b7e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  40b7eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b7ef:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40b7f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b7f7:	48 83 c0 08          	add    $0x8,%rax
  40b7fb:	48 89 c7             	mov    %rax,%rdi
  40b7fe:	e8 25 02 00 00       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40b803:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40b807:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b80b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b80f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40b813:	48 89 c6             	mov    %rax,%rsi
  40b816:	48 89 d7             	mov    %rdx,%rdi
  40b819:	e8 2f 02 00 00       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40b81e:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40b825:	48 89 c6             	mov    %rax,%rsi
  40b828:	48 89 df             	mov    %rbx,%rdi
  40b82b:	e8 5c 1a 00 00       	call   40d28c <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  40b830:	90                   	nop
	    if (__n <= _M_unused().size())
  40b831:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40b835:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40b839:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40b83d:	48 89 c7             	mov    %rax,%rdi
  40b840:	e8 ef 9c ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40b845:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40b849:	0f 93 c0             	setae  %al
  40b84c:	84 c0                	test   %al,%al
  40b84e:	74 06                	je     40b856 <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x12c>
	      return { this };
  40b850:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40b854:	eb 05                	jmp    40b85b <_ZNSt8__format5_SinkIcE10_M_reserveEm+0x131>
	return { nullptr };
  40b856:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40b85b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40b85f:	c9                   	leave
  40b860:	c3                   	ret
  40b861:	90                   	nop

000000000040b862 <_ZNKSt8__format5_SinkIcE12_ReservationcvbEv>:
	explicit operator bool() const noexcept { return _M_sink; }
  40b862:	55                   	push   %rbp
  40b863:	48 89 e5             	mov    %rsp,%rbp
  40b866:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b86a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b86e:	48 8b 00             	mov    (%rax),%rax
  40b871:	48 85 c0             	test   %rax,%rax
  40b874:	0f 95 c0             	setne  %al
  40b877:	5d                   	pop    %rbp
  40b878:	c3                   	ret
  40b879:	90                   	nop

000000000040b87a <_ZNKSt8__format5_SinkIcE12_Reservation3getEv>:
	_CharT* get() const noexcept { return _M_sink->_M_next.operator->(); }
  40b87a:	55                   	push   %rbp
  40b87b:	48 89 e5             	mov    %rsp,%rbp
  40b87e:	48 83 ec 10          	sub    $0x10,%rsp
  40b882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b88a:	48 8b 00             	mov    (%rax),%rax
  40b88d:	48 83 c0 18          	add    $0x18,%rax
  40b891:	48 89 c7             	mov    %rax,%rdi
  40b894:	e8 8b 10 00 00       	call   40c924 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEptEv>
  40b899:	c9                   	leave
  40b89a:	c3                   	ret
  40b89b:	90                   	nop

000000000040b89c <_ZNSt8__format5_SinkIcE12_Reservation7_M_bumpEm>:
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
  40b89c:	55                   	push   %rbp
  40b89d:	48 89 e5             	mov    %rsp,%rbp
  40b8a0:	48 83 ec 10          	sub    $0x10,%rsp
  40b8a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b8a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b8ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8b0:	48 8b 00             	mov    (%rax),%rax
  40b8b3:	48 8b 00             	mov    (%rax),%rax
  40b8b6:	48 83 c0 10          	add    $0x10,%rax
  40b8ba:	48 8b 08             	mov    (%rax),%rcx
  40b8bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b8c1:	48 8b 00             	mov    (%rax),%rax
  40b8c4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b8c8:	48 89 d6             	mov    %rdx,%rsi
  40b8cb:	48 89 c7             	mov    %rax,%rdi
  40b8ce:	ff d1                	call   *%rcx
  40b8d0:	90                   	nop
  40b8d1:	c9                   	leave
  40b8d2:	c3                   	ret
  40b8d3:	90                   	nop

000000000040b8d4 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_>:
      basic_format_context(basic_format_args<basic_format_context> __args,
  40b8d4:	55                   	push   %rbp
  40b8d5:	48 89 e5             	mov    %rsp,%rbp
  40b8d8:	48 83 ec 30          	sub    $0x30,%rsp
  40b8dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40b8e0:	48 89 f0             	mov    %rsi,%rax
  40b8e3:	48 89 d6             	mov    %rdx,%rsi
  40b8e6:	48 89 c0             	mov    %rax,%rax
  40b8e9:	ba 00 00 00 00       	mov    $0x0,%edx
  40b8ee:	48 89 f2             	mov    %rsi,%rdx
  40b8f1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40b8f5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40b8f9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_args(__args), _M_out(std::move(__out))
  40b8fd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40b901:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40b905:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40b909:	48 89 01             	mov    %rax,(%rcx)
  40b90c:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40b910:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40b914:	48 89 c7             	mov    %rax,%rdi
  40b917:	e8 29 e1 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b91c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b920:	48 8b 00             	mov    (%rax),%rax
  40b923:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40b927:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40b92b:	48 83 c0 18          	add    $0x18,%rax
  40b92f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
  40b933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b937:	c6 00 00             	movb   $0x0,(%rax)
  40b93a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b93e:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  40b942:	90                   	nop
      { }
  40b943:	90                   	nop
  40b944:	c9                   	leave
  40b945:	c3                   	ret

000000000040b946 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcEC1ESt17basic_format_argsIS3_ES2_RKSt6locale>:
      basic_format_context(basic_format_args<basic_format_context> __args,
  40b946:	55                   	push   %rbp
  40b947:	48 89 e5             	mov    %rsp,%rbp
  40b94a:	48 83 ec 30          	sub    $0x30,%rsp
  40b94e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b952:	48 89 f0             	mov    %rsi,%rax
  40b955:	48 89 d6             	mov    %rdx,%rsi
  40b958:	48 89 c0             	mov    %rax,%rax
  40b95b:	ba 00 00 00 00       	mov    $0x0,%edx
  40b960:	48 89 f2             	mov    %rsi,%rdx
  40b963:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40b967:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40b96b:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  40b96f:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
      : _M_args(__args), _M_out(std::move(__out)), _M_loc(__loc)
  40b973:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40b977:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40b97b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b97f:	48 89 01             	mov    %rax,(%rcx)
  40b982:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40b986:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40b98a:	48 89 c7             	mov    %rax,%rdi
  40b98d:	e8 b3 e0 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40b992:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40b996:	48 8b 00             	mov    (%rax),%rax
  40b999:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40b99d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9a1:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b9a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40b9a9:	48 89 c6             	mov    %rax,%rsi
  40b9ac:	48 89 d7             	mov    %rdx,%rdi
  40b9af:	e8 c2 98 ff ff       	call   405276 <_ZNSt8__format16_Optional_localeC1ERKSt6locale>
      { }
  40b9b4:	90                   	nop
  40b9b5:	c9                   	leave
  40b9b6:	c3                   	ret
  40b9b7:	90                   	nop

000000000040b9b8 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcEC1ERSt20basic_format_contextIS2_cESt17basic_string_viewIcSt11char_traitsIcEE>:
      _Formatting_scanner(basic_format_context<_Out, _CharT>& __fc,
  40b9b8:	55                   	push   %rbp
  40b9b9:	48 89 e5             	mov    %rsp,%rbp
  40b9bc:	48 83 ec 20          	sub    $0x20,%rsp
  40b9c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40b9c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40b9c8:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  40b9cc:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
      : _Scanner<_CharT>(__str), _M_fc(__fc)
  40b9d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9d4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40b9d8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40b9dc:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  40b9e3:	48 89 c7             	mov    %rax,%rdi
  40b9e6:	e8 2f a2 ff ff       	call   405c1a <_ZNSt8__format8_ScannerIcEC1ESt17basic_string_viewIcSt11char_traitsIcEEm>
  40b9eb:	ba 70 df 41 00       	mov    $0x41df70,%edx
  40b9f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9f4:	48 89 10             	mov    %rdx,(%rax)
  40b9f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40b9fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40b9ff:	48 89 50 30          	mov    %rdx,0x30(%rax)
      { }
  40ba03:	90                   	nop
  40ba04:	c9                   	leave
  40ba05:	c3                   	ret

000000000040ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>:
      iterator out() { return std::move(_M_out); }
  40ba06:	55                   	push   %rbp
  40ba07:	48 89 e5             	mov    %rsp,%rbp
  40ba0a:	48 83 ec 10          	sub    $0x10,%rsp
  40ba0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ba12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ba16:	48 83 c0 10          	add    $0x10,%rax
  40ba1a:	48 89 c7             	mov    %rax,%rdi
  40ba1d:	e8 23 e0 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40ba22:	48 8b 00             	mov    (%rax),%rax
  40ba25:	c9                   	leave
  40ba26:	c3                   	ret
  40ba27:	90                   	nop

000000000040ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>:

      // iterator support

      [[nodiscard]]
      constexpr iterator
      begin() const noexcept
  40ba28:	55                   	push   %rbp
  40ba29:	48 89 e5             	mov    %rsp,%rbp
  40ba2c:	48 83 ec 20          	sub    $0x20,%rsp
  40ba30:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_ptr); }
  40ba34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ba38:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  40ba3c:	48 89 d6             	mov    %rdx,%rsi
  40ba3f:	48 89 c7             	mov    %rax,%rdi
  40ba42:	e8 bf 0e 00 00       	call   40c906 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  40ba47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ba4b:	c9                   	leave
  40ba4c:	c3                   	ret

000000000040ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  40ba4d:	55                   	push   %rbp
  40ba4e:	48 89 e5             	mov    %rsp,%rbp
  40ba51:	53                   	push   %rbx
  40ba52:	48 83 ec 18          	sub    $0x18,%rsp
  40ba56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ba5a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  40ba5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ba62:	48 89 c7             	mov    %rax,%rdi
  40ba65:	e8 f6 0e 00 00       	call   40c960 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  40ba6a:	48 8b 18             	mov    (%rax),%rbx
  40ba6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ba71:	48 89 c7             	mov    %rax,%rdi
  40ba74:	e8 e7 0e 00 00       	call   40c960 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  40ba79:	48 8b 00             	mov    (%rax),%rax
  40ba7c:	48 89 da             	mov    %rbx,%rdx
  40ba7f:	48 29 c2             	sub    %rax,%rdx
  40ba82:	48 89 d0             	mov    %rdx,%rax
  40ba85:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ba89:	c9                   	leave
  40ba8a:	c3                   	ret
  40ba8b:	90                   	nop

000000000040ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>:
	  return _Sp{ this->data(), _Count };
	}

      [[nodiscard]]
      constexpr span<element_type, dynamic_extent>
      first(size_type __count) const noexcept
  40ba8c:	55                   	push   %rbp
  40ba8d:	48 89 e5             	mov    %rsp,%rbp
  40ba90:	48 83 ec 20          	sub    $0x20,%rsp
  40ba94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ba98:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40ba9c:	b8 00 00 00 00       	mov    $0x0,%eax
      {
	__glibcxx_assert(__count <= size());
  40baa1:	84 c0                	test   %al,%al
  40baa3:	74 1e                	je     40bac3 <_ZNKSt4spanIcLm18446744073709551615EE5firstEm+0x37>
  40baa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40baa9:	48 89 c7             	mov    %rax,%rdi
  40baac:	e8 83 9a ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40bab1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40bab5:	0f 92 c0             	setb   %al
  40bab8:	0f b6 c0             	movzbl %al,%eax
  40babb:	48 85 c0             	test   %rax,%rax
  40babe:	0f 95 c0             	setne  %al
  40bac1:	84 c0                	test   %al,%al
	return { this->data(), __count };
  40bac3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bac7:	48 89 c7             	mov    %rax,%rdi
  40baca:	e8 53 9a ff ff       	call   405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40bacf:	48 89 c1             	mov    %rax,%rcx
  40bad2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40bad6:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40bada:	48 89 ce             	mov    %rcx,%rsi
  40badd:	48 89 c7             	mov    %rax,%rdi
  40bae0:	e8 95 fb ff ff       	call   40b67a <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
  40bae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bae9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
      }
  40baed:	c9                   	leave
  40baee:	c3                   	ret
  40baef:	90                   	nop

000000000040baf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>:
      append(const _CharT* __s, size_type __n)
  40baf0:	55                   	push   %rbp
  40baf1:	48 89 e5             	mov    %rsp,%rbp
  40baf4:	48 83 ec 20          	sub    $0x20,%rsp
  40baf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40bafc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40bb00:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_M_check_length(size_type(0), __n, "basic_string::append");
  40bb04:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40bb08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bb0c:	b9 a8 b2 41 00       	mov    $0x41b2a8,%ecx
  40bb11:	be 00 00 00 00       	mov    $0x0,%esi
  40bb16:	48 89 c7             	mov    %rax,%rdi
  40bb19:	e8 50 0e 00 00       	call   40c96e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
	return _M_append(__s, __n);
  40bb1e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40bb22:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40bb26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bb2a:	48 89 ce             	mov    %rcx,%rsi
  40bb2d:	48 89 c7             	mov    %rax,%rdi
  40bb30:	e8 97 0e 00 00       	call   40c9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>
      }
  40bb35:	c9                   	leave
  40bb36:	c3                   	ret
  40bb37:	90                   	nop

000000000040bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>:
	return __rlen;
      }

      [[nodiscard]]
      constexpr basic_string_view
      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
  40bb38:	55                   	push   %rbp
  40bb39:	48 89 e5             	mov    %rsp,%rbp
  40bb3c:	48 83 ec 50          	sub    $0x50,%rsp
  40bb40:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40bb44:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40bb48:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      {
	__pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
  40bb4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bb50:	48 89 c7             	mov    %rax,%rdi
  40bb53:	e8 be a1 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40bb58:	48 89 c1             	mov    %rax,%rcx
  40bb5b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40bb5f:	ba bd b2 41 00       	mov    $0x41b2bd,%edx
  40bb64:	48 89 c6             	mov    %rax,%rsi
  40bb67:	48 89 cf             	mov    %rcx,%rdi
  40bb6a:	e8 a7 8e ff ff       	call   404a16 <_ZSt10__sv_checkmmPKc>
  40bb6f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
  40bb73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bb77:	48 8b 00             	mov    (%rax),%rax
  40bb7a:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  40bb7e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40bb82:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
  40bb86:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40bb8a:	48 89 d6             	mov    %rdx,%rsi
  40bb8d:	48 89 c7             	mov    %rax,%rdi
  40bb90:	e8 13 ed ff ff       	call   40a8a8 <_ZSt3minImERKT_S2_S2_>
  40bb95:	48 8b 00             	mov    (%rax),%rax
  40bb98:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return basic_string_view{_M_str + __pos, __rlen};
  40bb9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bba0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40bba4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40bba8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40bbac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40bbb0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40bbb4:	48 89 ce             	mov    %rcx,%rsi
  40bbb7:	48 89 c7             	mov    %rax,%rdi
  40bbba:	e8 2d b9 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40bbbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40bbc3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
      }
  40bbc7:	c9                   	leave
  40bbc8:	c3                   	ret

000000000040bbc9 <_ZSt6formatIJRA4_KcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSB_>:
    format(format_string<_Args...> __fmt, _Args&&... __args)
  40bbc9:	55                   	push   %rbp
  40bbca:	48 89 e5             	mov    %rsp,%rbp
  40bbcd:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40bbd1:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40bbd5:	48 89 f0             	mov    %rsi,%rax
  40bbd8:	48 89 d6             	mov    %rdx,%rsi
  40bbdb:	48 89 c0             	mov    %rax,%rax
  40bbde:	ba 00 00 00 00       	mov    $0x0,%edx
  40bbe3:	48 89 f2             	mov    %rsi,%rdx
  40bbe6:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40bbea:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40bbee:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40bbf2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40bbf6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40bbfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bbfe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40bc02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bc06:	48 89 c7             	mov    %rax,%rdi
  40bc09:	e8 8d 17 00 00       	call   40d39b <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJPKcEE11_S_make_eltIA4_S5_EENS_10_Arg_valueIS4_EERT_>
  40bc0e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bc12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40bc16:	90                   	nop
      return _Store(__fmt_args...);
  40bc17:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40bc1b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40bc1f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40bc23:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40bc27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40bc2b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40bc2f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40bc33:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40bc37:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40bc3b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40bc3f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40bc43:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40bc47:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40bc4b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40bc4f:	48 89 d6             	mov    %rdx,%rsi
  40bc52:	48 89 c7             	mov    %rax,%rdi
  40bc55:	e8 3c 0e 00 00       	call   40ca96 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJPKcEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40bc5a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40bc5e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40bc62:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40bc66:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  40bc6a:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40bc6e:	49 89 c1             	mov    %rax,%r9
  40bc71:	48 89 d0             	mov    %rdx,%rax
  40bc74:	49 89 f0             	mov    %rsi,%r8
  40bc77:	4c 89 ce             	mov    %r9,%rsi
  40bc7a:	48 89 c2             	mov    %rax,%rdx
  40bc7d:	e8 ad 96 ff ff       	call   40532f <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
  40bc82:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40bc86:	c9                   	leave
  40bc87:	c3                   	ret

000000000040bc88 <_ZSt5printIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvP8_IO_FILESt19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOSA_>:
    print(FILE* __stream, format_string<_Args...> __fmt, _Args&&... __args)
  40bc88:	55                   	push   %rbp
  40bc89:	48 89 e5             	mov    %rsp,%rbp
  40bc8c:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40bc90:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40bc94:	48 89 f0             	mov    %rsi,%rax
  40bc97:	48 89 d6             	mov    %rdx,%rsi
  40bc9a:	48 89 c0             	mov    %rax,%rax
  40bc9d:	ba 00 00 00 00       	mov    $0x0,%edx
  40bca2:	48 89 f2             	mov    %rsi,%rdx
  40bca5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40bca9:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40bcad:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40bcb1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40bcb5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40bcb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bcbd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40bcc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40bcc5:	48 89 c7             	mov    %rax,%rdi
  40bcc8:	e8 69 13 00 00       	call   40d036 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40bccd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bcd1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40bcd5:	90                   	nop
      return _Store(__fmt_args...);
  40bcd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40bcda:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40bcde:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40bce2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40bce6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40bcea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40bcee:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40bcf2:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      auto __fmtargs = std::make_format_args(__args...);
  40bcf6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40bcfa:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40bcfe:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40bd02:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	std::vprint_unicode(__stream, __fmt.get(), __fmtargs);
  40bd06:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  40bd0a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40bd0e:	48 89 d6             	mov    %rdx,%rsi
  40bd11:	48 89 c7             	mov    %rax,%rdi
  40bd14:	e8 49 07 00 00       	call   40c462 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40bd19:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40bd1d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40bd21:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40bd25:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  40bd29:	48 89 c7             	mov    %rax,%rdi
  40bd2c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40bd30:	49 89 f0             	mov    %rsi,%r8
  40bd33:	48 89 fe             	mov    %rdi,%rsi
  40bd36:	48 89 c7             	mov    %rax,%rdi
  40bd39:	e8 59 9a ff ff       	call   405797 <_ZSt14vprint_unicodeP8_IO_FILESt17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
    }
  40bd3e:	90                   	nop
  40bd3f:	c9                   	leave
  40bd40:	c3                   	ret

000000000040bd41 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>:
    __from_chars_alnum_to_val(unsigned char __c)
  40bd41:	55                   	push   %rbp
  40bd42:	48 89 e5             	mov    %rsp,%rbp
  40bd45:	89 f8                	mov    %edi,%eax
  40bd47:	88 45 fc             	mov    %al,-0x4(%rbp)
	return static_cast<unsigned char>(__c - '0');
  40bd4a:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  40bd4e:	83 e8 30             	sub    $0x30,%eax
    }
  40bd51:	5d                   	pop    %rbp
  40bd52:	c3                   	ret

000000000040bd53 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i>:

  /// std::from_chars implementation for integers in any base.
  /// If _DecOnly is true, then we may assume __base is at most 10.
  template<bool _DecOnly, typename _Tp>
    constexpr bool
    __from_chars_alnum(const char*& __first, const char* __last, _Tp& __val,
  40bd53:	55                   	push   %rbp
  40bd54:	48 89 e5             	mov    %rsp,%rbp
  40bd57:	48 83 ec 30          	sub    $0x30,%rsp
  40bd5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40bd5f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40bd63:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40bd67:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
		       int __base)
    {
      // __glibcxx_assert(_DecOnly ? __base <= 10 : __base <= 36);

      const int __bits_per_digit = __bit_width(unsigned(__base & 0x3f));
  40bd6a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40bd6d:	83 e0 3f             	and    $0x3f,%eax
  40bd70:	89 c7                	mov    %eax,%edi
  40bd72:	e8 84 89 ff ff       	call   4046fb <_ZSt11__bit_widthIjEiT_>
  40bd77:	89 45 f8             	mov    %eax,-0x8(%rbp)
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
  40bd7a:	c7 45 fc 10 00 00 00 	movl   $0x10,-0x4(%rbp)
      for (; __first != __last; ++__first)
  40bd81:	e9 d3 00 00 00       	jmp    40be59 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x106>
	{
	  const unsigned char __c = __from_chars_alnum_to_val<_DecOnly>(*__first);
  40bd86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bd8a:	48 8b 00             	mov    (%rax),%rax
  40bd8d:	0f b6 00             	movzbl (%rax),%eax
  40bd90:	0f b6 c0             	movzbl %al,%eax
  40bd93:	89 c7                	mov    %eax,%edi
  40bd95:	e8 a7 ff ff ff       	call   40bd41 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>
  40bd9a:	88 45 f7             	mov    %al,-0x9(%rbp)
	  if (__c >= __base)
  40bd9d:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  40bda1:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  40bda4:	7f 0a                	jg     40bdb0 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x5d>
	    return true;
  40bda6:	b8 01 00 00 00       	mov    $0x1,%eax
  40bdab:	e9 bf 00 00 00       	jmp    40be6f <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x11c>

	  __unused_bits_lower_bound -= __bits_per_digit;
  40bdb0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40bdb3:	29 45 fc             	sub    %eax,-0x4(%rbp)
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
  40bdb6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40bdba:	78 1c                	js     40bdd8 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x85>
	    // We're definitely not going to overflow.
	    __val = __val * __base + __c;
  40bdbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bdc0:	0f b7 00             	movzwl (%rax),%eax
  40bdc3:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  40bdc6:	0f af d0             	imul   %eax,%edx
  40bdc9:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  40bdcd:	01 c2                	add    %eax,%edx
  40bdcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bdd3:	66 89 10             	mov    %dx,(%rax)
  40bdd6:	eb 6f                	jmp    40be47 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xf4>
	  else if (!__raise_and_add(__val, __base, __c)) [[__unlikely__]]
  40bdd8:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  40bddc:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  40bddf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40bde3:	89 ce                	mov    %ecx,%esi
  40bde5:	48 89 c7             	mov    %rax,%rdi
  40bde8:	e8 0b 0d 00 00       	call   40caf8 <_ZNSt8__detail15__raise_and_addItEEbRT_ih>
  40bded:	83 f0 01             	xor    $0x1,%eax
  40bdf0:	84 c0                	test   %al,%al
  40bdf2:	74 53                	je     40be47 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xf4>
	    {
	      while (++__first != __last
  40bdf4:	90                   	nop
  40bdf5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bdf9:	48 8b 00             	mov    (%rax),%rax
  40bdfc:	48 8d 50 01          	lea    0x1(%rax),%rdx
		     && __from_chars_alnum_to_val<_DecOnly>(*__first) < __base)
  40be00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be04:	48 89 10             	mov    %rdx,(%rax)
	      while (++__first != __last
  40be07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be0b:	48 8b 00             	mov    (%rax),%rax
		     && __from_chars_alnum_to_val<_DecOnly>(*__first) < __base)
  40be0e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40be12:	74 23                	je     40be37 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe4>
  40be14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be18:	48 8b 00             	mov    (%rax),%rax
  40be1b:	0f b6 00             	movzbl (%rax),%eax
  40be1e:	0f b6 c0             	movzbl %al,%eax
  40be21:	89 c7                	mov    %eax,%edi
  40be23:	e8 19 ff ff ff       	call   40bd41 <_ZNSt8__detail25__from_chars_alnum_to_valILb1EEEhh>
  40be28:	0f b6 c0             	movzbl %al,%eax
  40be2b:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  40be2e:	7e 07                	jle    40be37 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe4>
  40be30:	b8 01 00 00 00       	mov    $0x1,%eax
  40be35:	eb 05                	jmp    40be3c <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xe9>
  40be37:	b8 00 00 00 00       	mov    $0x0,%eax
  40be3c:	84 c0                	test   %al,%al
  40be3e:	75 b5                	jne    40bdf5 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0xa2>
		;
	      return false;
  40be40:	b8 00 00 00 00       	mov    $0x0,%eax
  40be45:	eb 28                	jmp    40be6f <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x11c>
      for (; __first != __last; ++__first)
  40be47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be4b:	48 8b 00             	mov    (%rax),%rax
  40be4e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  40be52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be56:	48 89 10             	mov    %rdx,(%rax)
  40be59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40be5d:	48 8b 00             	mov    (%rax),%rax
  40be60:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40be64:	0f 85 1c ff ff ff    	jne    40bd86 <_ZNSt8__detail18__from_chars_alnumILb1EtEEbRPKcS2_RT0_i+0x33>
	    }
	}
      return true;
  40be6a:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40be6f:	c9                   	leave
  40be70:	c3                   	ret
  40be71:	90                   	nop

000000000040be72 <_ZNSt4pairItPKcEC1IRtRS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
  40be72:	55                   	push   %rbp
  40be73:	48 89 e5             	mov    %rsp,%rbp
  40be76:	48 83 ec 20          	sub    $0x20,%rsp
  40be7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40be7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40be82:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
  40be86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40be8a:	48 89 c7             	mov    %rax,%rdi
  40be8d:	e8 f8 0c 00 00       	call   40cb8a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
  40be92:	0f b7 10             	movzwl (%rax),%edx
  40be95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40be99:	66 89 10             	mov    %dx,(%rax)
  40be9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bea0:	48 89 c7             	mov    %rax,%rdi
  40bea3:	e8 f0 0c 00 00       	call   40cb98 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
  40bea8:	48 8b 10             	mov    (%rax),%rdx
  40beab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40beaf:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
  40beb3:	90                   	nop
  40beb4:	c9                   	leave
  40beb5:	c3                   	ret

000000000040beb6 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
  40beb6:	55                   	push   %rbp
  40beb7:	48 89 e5             	mov    %rsp,%rbp
  40beba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40bebe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bec2:	5d                   	pop    %rbp
  40bec3:	c3                   	ret

000000000040bec4 <_ZSt7forwardINSt6ranges8subrangeIPKcS3_LNS0_13subrange_kindE1EEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40bec4:	55                   	push   %rbp
  40bec5:	48 89 e5             	mov    %rsp,%rbp
  40bec8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40becc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bed0:	5d                   	pop    %rbp
  40bed1:	c3                   	ret

000000000040bed2 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>:
	  _First_and_curr(_It __first, _It __curr)
  40bed2:	55                   	push   %rbp
  40bed3:	48 89 e5             	mov    %rsp,%rbp
  40bed6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40beda:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40bede:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  : _M_first(__first), _M_curr(__curr) { }
  40bee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bee6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40beea:	48 89 10             	mov    %rdx,(%rax)
  40beed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bef1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40bef5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40bef9:	90                   	nop
  40befa:	5d                   	pop    %rbp
  40befb:	c3                   	ret

000000000040befc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>:
      _M_read()
  40befc:	55                   	push   %rbp
  40befd:	48 89 e5             	mov    %rsp,%rbp
  40bf00:	48 83 ec 10          	sub    $0x10,%rsp
  40bf04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_read_utf8();
  40bf08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40bf0c:	48 89 c7             	mov    %rax,%rdi
  40bf0f:	e8 cc 0c 00 00       	call   40cbe0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev>
      }
  40bf14:	90                   	nop
  40bf15:	c9                   	leave
  40bf16:	c3                   	ret
  40bf17:	90                   	nop

000000000040bf18 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>:
      operator++()
  40bf18:	55                   	push   %rbp
  40bf19:	48 89 e5             	mov    %rsp,%rbp
  40bf1c:	53                   	push   %rbx
  40bf1d:	48 83 ec 38          	sub    $0x38,%rsp
  40bf21:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
  40bf25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bf29:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40bf2d:	0f b6 c0             	movzbl %al,%eax
  40bf30:	8d 50 01             	lea    0x1(%rax),%edx
  40bf33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bf37:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  40bf3b:	0f b6 c0             	movzbl %al,%eax
  40bf3e:	39 c2                	cmp    %eax,%edx
  40bf40:	75 23                	jne    40bf65 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x4d>
  40bf42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bf46:	48 89 c7             	mov    %rax,%rdi
  40bf49:	e8 6a ec ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bf4e:	48 8b 10             	mov    (%rax),%rdx
  40bf51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bf55:	48 8b 40 20          	mov    0x20(%rax),%rax
  40bf59:	48 39 c2             	cmp    %rax,%rdx
  40bf5c:	74 07                	je     40bf65 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x4d>
  40bf5e:	b8 01 00 00 00       	mov    $0x1,%eax
  40bf63:	eb 05                	jmp    40bf6a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x52>
  40bf65:	b8 00 00 00 00       	mov    $0x0,%eax
  40bf6a:	84 c0                	test   %al,%al
  40bf6c:	74 7c                	je     40bfea <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0xd2>
	      std::advance(_M_curr(), _M_to_increment);
  40bf6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bf72:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  40bf76:	0f b6 d8             	movzbl %al,%ebx
  40bf79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bf7d:	48 89 c7             	mov    %rax,%rdi
  40bf80:	e8 33 ec ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bf85:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40bf89:	88 5d e7             	mov    %bl,-0x19(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  40bf8c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  40bf90:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40bf94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bf98:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40bf9c:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  40bf9d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40bfa1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40bfa5:	48 89 d6             	mov    %rdx,%rsi
  40bfa8:	48 89 c7             	mov    %rax,%rdi
  40bfab:	e8 ed 14 00 00       	call   40d49d <_ZSt9__advanceIPKclEvRT_T0_St26random_access_iterator_tag>
    }
  40bfb0:	90                   	nop
	    if (_M_curr() == _M_last)
  40bfb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bfb5:	48 89 c7             	mov    %rax,%rdi
  40bfb8:	e8 fb eb ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40bfbd:	48 8b 10             	mov    (%rax),%rdx
  40bfc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bfc4:	48 8b 40 20          	mov    0x20(%rax),%rax
  40bfc8:	48 39 c2             	cmp    %rax,%rdx
  40bfcb:	0f 94 c0             	sete   %al
  40bfce:	84 c0                	test   %al,%al
  40bfd0:	74 0a                	je     40bfdc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0xc4>
	      _M_buf_index = 0;
  40bfd2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bfd6:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  40bfda:	eb 3d                	jmp    40c019 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	      _M_read();
  40bfdc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bfe0:	48 89 c7             	mov    %rax,%rdi
  40bfe3:	e8 14 ff ff ff       	call   40befc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_readEv>
  40bfe8:	eb 2f                	jmp    40c019 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	else if (_M_buf_index + 1 < _M_buf_last)
  40bfea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bfee:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40bff2:	0f b6 c0             	movzbl %al,%eax
  40bff5:	8d 50 01             	lea    0x1(%rax),%edx
  40bff8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40bffc:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  40c000:	0f b6 c0             	movzbl %al,%eax
  40c003:	39 c2                	cmp    %eax,%edx
  40c005:	7d 12                	jge    40c019 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv+0x101>
	  ++_M_buf_index;
  40c007:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c00b:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  40c00f:	8d 50 01             	lea    0x1(%rax),%edx
  40c012:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c016:	88 50 18             	mov    %dl,0x18(%rax)
	return *this;
  40c019:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      }
  40c01d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c021:	c9                   	leave
  40c022:	c3                   	ret
  40c023:	90                   	nop

000000000040c024 <_ZNKSt5arrayIDiLm1EEixEm>:
	return _M_elems[__n];
      }

      [[__nodiscard__]]
      constexpr const_reference
      operator[](size_type __n) const noexcept
  40c024:	55                   	push   %rbp
  40c025:	48 89 e5             	mov    %rsp,%rbp
  40c028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c02c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _M_elems[__n];
  40c030:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c034:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40c03b:	00
  40c03c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c040:	48 01 d0             	add    %rdx,%rax
      }
  40c043:	5d                   	pop    %rbp
  40c044:	c3                   	ret
  40c045:	90                   	nop

000000000040c046 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() const { return _M_first_and_curr._M_curr; }
  40c046:	55                   	push   %rbp
  40c047:	48 89 e5             	mov    %rsp,%rbp
  40c04a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c04e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c052:	48 8b 40 10          	mov    0x10(%rax),%rax
  40c056:	5d                   	pop    %rbp
  40c057:	c3                   	ret

000000000040c058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
  40c058:	55                   	push   %rbp
  40c059:	48 89 e5             	mov    %rsp,%rbp
  40c05c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
  40c060:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c064:	5d                   	pop    %rbp
  40c065:	c3                   	ret

000000000040c066 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
  40c066:	55                   	push   %rbp
  40c067:	48 89 e5             	mov    %rsp,%rbp
  40c06a:	48 83 ec 20          	sub    $0x20,%rsp
  40c06e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
  40c072:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c076:	48 89 c7             	mov    %rax,%rdi
  40c079:	e8 da ff ff ff       	call   40c058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40c07e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {
#if __cplusplus <= 201703L
	return __a.max_size();
#else
	return size_t(-1) / sizeof(value_type);
  40c082:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  40c089:	48 83 e8 01          	sub    $0x1,%rax
  40c08d:	48 d1 e8             	shr    %rax
  40c090:	c9                   	leave
  40c091:	c3                   	ret

000000000040c092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>:
      _S_allocate(_Char_alloc_type& __a, size_type __n)
  40c092:	55                   	push   %rbp
  40c093:	48 89 e5             	mov    %rsp,%rbp
  40c096:	48 83 ec 40          	sub    $0x40,%rsp
  40c09a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40c09e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  40c0a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c0a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40c0aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40c0ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40c0b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c0b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c0ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c0be:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c0c2:	b8 00 00 00 00       	mov    $0x0,%eax
	if (std::__is_constant_evaluated())
  40c0c7:	84 c0                	test   %al,%al
  40c0c9:	74 27                	je     40c0f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x60>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
  40c0cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c0cf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40c0d3:	b8 00 00 00 00       	mov    $0x0,%eax
  40c0d8:	83 e0 01             	and    $0x1,%eax
  40c0db:	84 c0                	test   %al,%al
  40c0dd:	74 05                	je     40c0e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x52>
	      std::__throw_bad_array_new_length();
  40c0df:	e8 2c 81 ff ff       	call   404210 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
  40c0e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c0e8:	48 89 c7             	mov    %rax,%rdi
  40c0eb:	e8 80 81 ff ff       	call   404270 <_Znwm@plt>
  40c0f0:	eb 19                	jmp    40c10b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m+0x79>
	return __allocator_base<_Tp>::allocate(__n, 0);
  40c0f2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40c0f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c0fa:	ba 00 00 00 00       	mov    $0x0,%edx
  40c0ff:	48 89 ce             	mov    %rcx,%rsi
  40c102:	48 89 c7             	mov    %rax,%rdi
  40c105:	e8 00 15 00 00       	call   40d60a <_ZNSt15__new_allocatorIcE8allocateEmPKv>
  40c10a:	90                   	nop
      { return __a.allocate(__n); }
  40c10b:	90                   	nop
	pointer __p = _Alloc_traits::allocate(__a, __n);
  40c10c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return __p;
  40c110:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40c114:	c9                   	leave
  40c115:	c3                   	ret

000000000040c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
  40c116:	55                   	push   %rbp
  40c117:	48 89 e5             	mov    %rsp,%rbp
  40c11a:	48 83 ec 20          	sub    $0x20,%rsp
  40c11e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c122:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40c126:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
  40c12a:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
  40c12f:	75 15                	jne    40c146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
  40c131:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c135:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c139:	48 89 d6             	mov    %rdx,%rsi
  40c13c:	48 89 c7             	mov    %rax,%rdi
  40c13f:	e8 de 85 ff ff       	call   404722 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40c144:	eb 17                	jmp    40c15d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x47>
	  traits_type::copy(__d, __s, __n);
  40c146:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c14a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40c14e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c152:	48 89 ce             	mov    %rcx,%rsi
  40c155:	48 89 c7             	mov    %rax,%rdi
  40c158:	e8 f9 87 ff ff       	call   404956 <_ZNSt11char_traitsIcE4copyEPcPKcm>
      }
  40c15d:	90                   	nop
  40c15e:	c9                   	leave
  40c15f:	c3                   	ret

000000000040c160 <_ZSt6formatIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES5_St19basic_format_stringIcJDpNSt13type_identityIT_E4typeEEEDpOS9_>:
    format(format_string<_Args...> __fmt, _Args&&... __args)
  40c160:	55                   	push   %rbp
  40c161:	48 89 e5             	mov    %rsp,%rbp
  40c164:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40c168:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40c16c:	48 89 f0             	mov    %rsi,%rax
  40c16f:	48 89 d6             	mov    %rdx,%rsi
  40c172:	48 89 c0             	mov    %rax,%rax
  40c175:	ba 00 00 00 00       	mov    $0x0,%edx
  40c17a:	48 89 f2             	mov    %rsi,%rdx
  40c17d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  40c181:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40c185:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  40c189:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40c18d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40c191:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c195:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	: _M_args{_S_make_elt(__a)...}
  40c199:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c19d:	48 89 c7             	mov    %rax,%rdi
  40c1a0:	e8 91 0e 00 00       	call   40d036 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>
  40c1a5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c1a9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ }
  40c1ad:	90                   	nop
      return _Store(__fmt_args...);
  40c1ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c1b2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c1b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40c1ba:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40c1be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c1c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c1c6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40c1ca:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40c1ce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c1d2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c1d6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c1da:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40c1de:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40c1e2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40c1e6:	48 89 d6             	mov    %rdx,%rsi
  40c1e9:	48 89 c7             	mov    %rax,%rdi
  40c1ec:	e8 71 02 00 00       	call   40c462 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>
      { return _M_str; }
  40c1f1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40c1f5:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
  40c1f9:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40c1fd:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  40c201:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  40c205:	49 89 c1             	mov    %rax,%r9
  40c208:	48 89 d0             	mov    %rdx,%rax
  40c20b:	49 89 f0             	mov    %rsi,%r8
  40c20e:	4c 89 ce             	mov    %r9,%rsi
  40c211:	48 89 c2             	mov    %rax,%rdx
  40c214:	e8 16 91 ff ff       	call   40532f <_ZSt7vformatB5cxx11St17basic_string_viewIcSt11char_traitsIcEESt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE>
  40c219:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c21d:	c9                   	leave
  40c21e:	c3                   	ret
  40c21f:	90                   	nop

000000000040c220 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEEdeEv>:
      operator*() const
  40c220:	55                   	push   %rbp
  40c221:	48 89 e5             	mov    %rsp,%rbp
  40c224:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	_Iterator __tmp = current;
  40c228:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c22c:	48 8b 00             	mov    (%rax),%rax
  40c22f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return *--__tmp;
  40c233:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
  40c238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40c23c:	5d                   	pop    %rbp
  40c23d:	c3                   	ret

000000000040c23e <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4rendEv>:
      rend() const noexcept
  40c23e:	55                   	push   %rbp
  40c23f:	48 89 e5             	mov    %rsp,%rbp
  40c242:	48 83 ec 10          	sub    $0x10,%rsp
  40c246:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c24a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return const_reverse_iterator(begin()); }
  40c24e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c252:	48 89 c7             	mov    %rax,%rdi
  40c255:	e8 18 00 00 00       	call   40c272 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE5beginEv>
  40c25a:	48 89 c2             	mov    %rax,%rdx
  40c25d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c261:	48 89 d6             	mov    %rdx,%rsi
  40c264:	48 89 c7             	mov    %rax,%rdi
  40c267:	e8 2e 00 00 00       	call   40c29a <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>
  40c26c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c270:	c9                   	leave
  40c271:	c3                   	ret

000000000040c272 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE5beginEv>:
      begin() const noexcept
  40c272:	55                   	push   %rbp
  40c273:	48 89 e5             	mov    %rsp,%rbp
  40c276:	48 83 ec 10          	sub    $0x10,%rsp
  40c27a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_iterator(data()); }
  40c27e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c282:	48 89 c7             	mov    %rax,%rdi
  40c285:	e8 02 00 00 00       	call   40c28c <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>
  40c28a:	c9                   	leave
  40c28b:	c3                   	ret

000000000040c28c <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>:
      data() noexcept
      { return static_cast<pointer>(_M_elems); }

      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
  40c28c:	55                   	push   %rbp
  40c28d:	48 89 e5             	mov    %rsp,%rbp
  40c290:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const_pointer>(_M_elems); }
  40c294:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c298:	5d                   	pop    %rbp
  40c299:	c3                   	ret

000000000040c29a <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>:
      reverse_iterator(iterator_type __x)
  40c29a:	55                   	push   %rbp
  40c29b:	48 89 e5             	mov    %rsp,%rbp
  40c29e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c2a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : current(__x)
  40c2a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c2aa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c2ae:	48 89 10             	mov    %rdx,(%rax)
      { }
  40c2b1:	90                   	nop
  40c2b2:	5d                   	pop    %rbp
  40c2b3:	c3                   	ret

000000000040c2b4 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>:
      base() const
  40c2b4:	55                   	push   %rbp
  40c2b5:	48 89 e5             	mov    %rsp,%rbp
  40c2b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return current; }
  40c2bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c2c0:	48 8b 00             	mov    (%rax),%rax
  40c2c3:	5d                   	pop    %rbp
  40c2c4:	c3                   	ret

000000000040c2c5 <_ZSteqIPKNSt8__format6_Arg_tEEbRKSt16reverse_iteratorIT_ES8_>:
    operator==(const reverse_iterator<_Iterator>& __x,
  40c2c5:	55                   	push   %rbp
  40c2c6:	48 89 e5             	mov    %rsp,%rbp
  40c2c9:	53                   	push   %rbx
  40c2ca:	48 83 ec 18          	sub    $0x18,%rsp
  40c2ce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c2d2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __x.base() == __y.base(); }
  40c2d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c2da:	48 89 c7             	mov    %rax,%rdi
  40c2dd:	e8 d2 ff ff ff       	call   40c2b4 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>
  40c2e2:	48 89 c3             	mov    %rax,%rbx
  40c2e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c2e9:	48 89 c7             	mov    %rax,%rdi
  40c2ec:	e8 c3 ff ff ff       	call   40c2b4 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEE4baseEv>
  40c2f1:	48 39 c3             	cmp    %rax,%rbx
  40c2f4:	0f 94 c0             	sete   %al
  40c2f7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c2fb:	c9                   	leave
  40c2fc:	c3                   	ret

000000000040c2fd <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>:
    __pack_arg_types(const array<_Arg_t, _Nm>& __types)
  40c2fd:	55                   	push   %rbp
  40c2fe:	48 89 e5             	mov    %rsp,%rbp
  40c301:	53                   	push   %rbx
  40c302:	48 83 ec 38          	sub    $0x38,%rsp
  40c306:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      __UINT64_TYPE__ __packed_types = 0;
  40c30a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40c311:	00
      for (auto __i = __types.rbegin(); __i != __types.rend(); ++__i)
  40c312:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c316:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c31a:	48 89 d6             	mov    %rdx,%rsi
  40c31d:	48 89 c7             	mov    %rax,%rdi
  40c320:	e8 69 00 00 00       	call   40c38e <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE6rbeginEv>
  40c325:	eb 30                	jmp    40c357 <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE+0x5a>
	__packed_types = (__packed_types << _Bits) | *__i;
  40c327:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c32b:	48 c1 e0 05          	shl    $0x5,%rax
  40c32f:	48 89 c3             	mov    %rax,%rbx
  40c332:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c336:	48 89 c7             	mov    %rax,%rdi
  40c339:	e8 e2 fe ff ff       	call   40c220 <_ZNKSt16reverse_iteratorIPKNSt8__format6_Arg_tEEdeEv>
  40c33e:	0f b6 00             	movzbl (%rax),%eax
  40c341:	0f b6 c0             	movzbl %al,%eax
  40c344:	48 09 d8             	or     %rbx,%rax
  40c347:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      for (auto __i = __types.rbegin(); __i != __types.rend(); ++__i)
  40c34b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c34f:	48 89 c7             	mov    %rax,%rdi
  40c352:	e8 89 00 00 00       	call   40c3e0 <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEppEv>
  40c357:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40c35b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c35f:	48 89 d6             	mov    %rdx,%rsi
  40c362:	48 89 c7             	mov    %rax,%rdi
  40c365:	e8 d4 fe ff ff       	call   40c23e <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4rendEv>
  40c36a:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  40c36e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40c372:	48 89 d6             	mov    %rdx,%rsi
  40c375:	48 89 c7             	mov    %rax,%rdi
  40c378:	e8 48 ff ff ff       	call   40c2c5 <_ZSteqIPKNSt8__format6_Arg_tEEbRKSt16reverse_iteratorIT_ES8_>
  40c37d:	83 f0 01             	xor    $0x1,%eax
  40c380:	84 c0                	test   %al,%al
  40c382:	75 a3                	jne    40c327 <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE+0x2a>
      return __packed_types;
  40c384:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  40c388:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c38c:	c9                   	leave
  40c38d:	c3                   	ret

000000000040c38e <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE6rbeginEv>:
      rbegin() const noexcept
  40c38e:	55                   	push   %rbp
  40c38f:	48 89 e5             	mov    %rsp,%rbp
  40c392:	48 83 ec 10          	sub    $0x10,%rsp
  40c396:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c39a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return const_reverse_iterator(end()); }
  40c39e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c3a2:	48 89 c7             	mov    %rax,%rdi
  40c3a5:	e8 18 00 00 00       	call   40c3c2 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE3endEv>
  40c3aa:	48 89 c2             	mov    %rax,%rdx
  40c3ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c3b1:	48 89 d6             	mov    %rdx,%rsi
  40c3b4:	48 89 c7             	mov    %rax,%rdi
  40c3b7:	e8 de fe ff ff       	call   40c29a <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEC1ES3_>
  40c3bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c3c0:	c9                   	leave
  40c3c1:	c3                   	ret

000000000040c3c2 <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE3endEv>:
      end() const noexcept
  40c3c2:	55                   	push   %rbp
  40c3c3:	48 89 e5             	mov    %rsp,%rbp
  40c3c6:	48 83 ec 10          	sub    $0x10,%rsp
  40c3ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_iterator(data() + _Nm); }
  40c3ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c3d2:	48 89 c7             	mov    %rax,%rdi
  40c3d5:	e8 b2 fe ff ff       	call   40c28c <_ZNKSt5arrayINSt8__format6_Arg_tELm1EE4dataEv>
  40c3da:	48 83 c0 01          	add    $0x1,%rax
  40c3de:	c9                   	leave
  40c3df:	c3                   	ret

000000000040c3e0 <_ZNSt16reverse_iteratorIPKNSt8__format6_Arg_tEEppEv>:
      operator++()
  40c3e0:	55                   	push   %rbp
  40c3e1:	48 89 e5             	mov    %rsp,%rbp
  40c3e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	--current;
  40c3e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c3ec:	48 8b 00             	mov    (%rax),%rax
  40c3ef:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40c3f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c3f7:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  40c3fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  40c3fe:	5d                   	pop    %rbp
  40c3ff:	c3                   	ret

000000000040c400 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJiEEERKNS1_10_Arg_storeIS4_JDpT_EEE>:
      basic_format_args<_Context>::
  40c400:	55                   	push   %rbp
  40c401:	48 89 e5             	mov    %rsp,%rbp
  40c404:	48 83 ec 20          	sub    $0x20,%rsp
  40c408:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c40c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	    _M_packed_size = sizeof...(_Args);
  40c410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c414:	0f b6 10             	movzbl (%rax),%edx
  40c417:	83 e2 f0             	and    $0xfffffff0,%edx
  40c41a:	83 ca 01             	or     $0x1,%edx
  40c41d:	88 10                	mov    %dl,(%rax)
	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
  40c41f:	c6 45 ff 03          	movb   $0x3,-0x1(%rbp)
  40c423:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40c427:	48 89 c7             	mov    %rax,%rdi
  40c42a:	e8 ce fe ff ff       	call   40c2fd <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>
  40c42f:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  40c436:	ff ff 0f
  40c439:	48 21 c2             	and    %rax,%rdx
  40c43c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c440:	48 89 d1             	mov    %rdx,%rcx
  40c443:	48 c1 e1 04          	shl    $0x4,%rcx
  40c447:	48 8b 10             	mov    (%rax),%rdx
  40c44a:	83 e2 0f             	and    $0xf,%edx
  40c44d:	48 09 ca             	or     %rcx,%rdx
  40c450:	48 89 10             	mov    %rdx,(%rax)
	    _M_values = __store._M_args;
  40c453:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c457:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c45b:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  40c45f:	90                   	nop
  40c460:	c9                   	leave
  40c461:	c3                   	ret

000000000040c462 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJSt17basic_string_viewIcSt11char_traitsIcEEEEERKNS1_10_Arg_storeIS4_JDpT_EEE>:
      basic_format_args<_Context>::
  40c462:	55                   	push   %rbp
  40c463:	48 89 e5             	mov    %rsp,%rbp
  40c466:	48 83 ec 20          	sub    $0x20,%rsp
  40c46a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c46e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	    _M_packed_size = sizeof...(_Args);
  40c472:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c476:	0f b6 10             	movzbl (%rax),%edx
  40c479:	83 e2 f0             	and    $0xfffffff0,%edx
  40c47c:	83 ca 01             	or     $0x1,%edx
  40c47f:	88 10                	mov    %dl,(%rax)
	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
  40c481:	c6 45 ff 0b          	movb   $0xb,-0x1(%rbp)
  40c485:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40c489:	48 89 c7             	mov    %rax,%rdi
  40c48c:	e8 6c fe ff ff       	call   40c2fd <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>
  40c491:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  40c498:	ff ff 0f
  40c49b:	48 21 c2             	and    %rax,%rdx
  40c49e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c4a2:	48 89 d1             	mov    %rdx,%rcx
  40c4a5:	48 c1 e1 04          	shl    $0x4,%rcx
  40c4a9:	48 8b 10             	mov    (%rax),%rdx
  40c4ac:	83 e2 0f             	and    $0xf,%edx
  40c4af:	48 09 ca             	or     %rcx,%rdx
  40c4b2:	48 89 10             	mov    %rdx,(%rax)
	    _M_values = __store._M_args;
  40c4b5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c4b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c4bd:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  40c4c1:	90                   	nop
  40c4c2:	c9                   	leave
  40c4c3:	c3                   	ret

000000000040c4c4 <_ZSt13__countl_zeroImEiT_>:
    __countl_zero(_Tp __x) noexcept
  40c4c4:	55                   	push   %rbp
  40c4c5:	48 89 e5             	mov    %rsp,%rbp
  40c4c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  40c4cc:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%rbp)
      if (__x == 0)
  40c4d3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40c4d8:	75 07                	jne    40c4e1 <_ZSt13__countl_zeroImEiT_+0x1d>
        return _Nd;
  40c4da:	b8 40 00 00 00       	mov    $0x40,%eax
  40c4df:	eb 26                	jmp    40c507 <_ZSt13__countl_zeroImEiT_+0x43>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  40c4e1:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  40c4e8:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  40c4ef:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  constexpr int __diff = _Nd_ul - _Nd;
  40c4f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	  return __builtin_clzl(__x) - __diff;
  40c4fd:	48 0f bd 45 d8       	bsr    -0x28(%rbp),%rax
  40c502:	48 83 f0 3f          	xor    $0x3f,%rax
  40c506:	90                   	nop
    }
  40c507:	5d                   	pop    %rbp
  40c508:	c3                   	ret

000000000040c509 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
  40c509:	55                   	push   %rbp
  40c50a:	48 89 e5             	mov    %rsp,%rbp
  40c50d:	48 83 ec 10          	sub    $0x10,%rsp
  40c511:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
  40c515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c519:	48 89 c7             	mov    %rax,%rdi
  40c51c:	e8 4e 0b 00 00       	call   40d06f <_ZSt11__addressofIKcEPT_RS1_>
  40c521:	c9                   	leave
  40c522:	c3                   	ret
  40c523:	90                   	nop

000000000040c524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
  40c524:	55                   	push   %rbp
  40c525:	48 89 e5             	mov    %rsp,%rbp
  40c528:	48 83 ec 70          	sub    $0x70,%rsp
  40c52c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40c530:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  40c534:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40c538:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  40c53c:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
	       const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");
  40c540:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c544:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  40c548:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c54c:	b9 d7 b2 41 00       	mov    $0x41b2d7,%ecx
  40c551:	48 89 c7             	mov    %rax,%rdi
  40c554:	e8 15 04 00 00       	call   40c96e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>

      const size_type __old_size = this->size();
  40c559:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c55d:	48 89 c7             	mov    %rax,%rdi
  40c560:	e8 2b 88 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c565:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      const size_type __new_size = __old_size + __len2 - __len1;
  40c569:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40c56d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c571:	48 01 d0             	add    %rdx,%rax
  40c574:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  40c578:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

      if (__new_size <= this->capacity())
  40c57c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c580:	48 89 c7             	mov    %rax,%rdi
  40c583:	e8 2e ee ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40c588:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40c58c:	0f 93 c0             	setae  %al
  40c58f:	84 c0                	test   %al,%al
  40c591:	0f 84 dd 01 00 00    	je     40c774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
	{
	  pointer __p = this->_M_data() + __pos;
  40c597:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c59b:	48 89 c7             	mov    %rax,%rdi
  40c59e:	e8 73 af ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c5a3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c5a7:	48 01 d0             	add    %rdx,%rax
  40c5aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	  const size_type __how_much = __old_size - __pos - __len1;
  40c5ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c5b2:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  40c5b6:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  40c5ba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if __cpp_lib_is_constant_evaluated
	  if (std::is_constant_evaluated())
  40c5be:	e8 b9 80 ff ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  40c5c3:	84 c0                	test   %al,%al
  40c5c5:	0f 84 09 01 00 00    	je     40c6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x1b0>
	    {
	      auto __newp = _S_allocate(_M_get_allocator(), __new_size);
  40c5cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c5cf:	48 89 c7             	mov    %rax,%rdi
  40c5d2:	e8 6b b2 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40c5d7:	48 89 c2             	mov    %rax,%rdx
  40c5da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c5de:	48 89 c6             	mov    %rax,%rsi
  40c5e1:	48 89 d7             	mov    %rdx,%rdi
  40c5e4:	e8 a9 fa ff ff       	call   40c092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
  40c5e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      _S_copy(__newp, this->_M_data(), __pos);
  40c5ed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c5f1:	48 89 c7             	mov    %rax,%rdi
  40c5f4:	e8 1d af ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c5f9:	48 89 c1             	mov    %rax,%rcx
  40c5fc:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c600:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c604:	48 89 ce             	mov    %rcx,%rsi
  40c607:	48 89 c7             	mov    %rax,%rdi
  40c60a:	e8 07 fb ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos, __s, __len2);
  40c60f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40c613:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40c617:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c61b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c61f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40c623:	48 89 c6             	mov    %rax,%rsi
  40c626:	48 89 cf             	mov    %rcx,%rdi
  40c629:	e8 e8 fa ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);
  40c62e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c632:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c636:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  40c63a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40c63e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c642:	48 01 c2             	add    %rax,%rdx
  40c645:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c649:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c64d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c651:	48 89 c2             	mov    %rax,%rdx
  40c654:	48 89 cf             	mov    %rcx,%rdi
  40c657:	e8 ba fa ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(this->_M_data(), __newp, __new_size);
  40c65c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c660:	48 89 c7             	mov    %rax,%rdi
  40c663:	e8 ae ae ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40c668:	48 89 c1             	mov    %rax,%rcx
  40c66b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c66f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c673:	48 89 c6             	mov    %rax,%rsi
  40c676:	48 89 cf             	mov    %rcx,%rdi
  40c679:	e8 98 fa ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      this->_M_get_allocator().deallocate(__newp, __new_size);
  40c67e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c682:	48 89 c7             	mov    %rax,%rdi
  40c685:	e8 b8 b1 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  40c68a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40c68e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c692:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40c696:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c69a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40c69e:	b8 00 00 00 00       	mov    $0x0,%eax
	if (std::__is_constant_evaluated())
  40c6a3:	84 c0                	test   %al,%al
  40c6a5:	74 11                	je     40c6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x194>
	    ::operator delete(__p);
  40c6a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c6ab:	48 89 c7             	mov    %rax,%rdi
  40c6ae:	e8 ad 7b ff ff       	call   404260 <_ZdlPv@plt>
	    return;
  40c6b3:	e9 db 00 00 00       	jmp    40c793 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	__allocator_base<_Tp>::deallocate(__p, __n);
  40c6b8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40c6bc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40c6c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c6c4:	48 89 ce             	mov    %rcx,%rsi
  40c6c7:	48 89 c7             	mov    %rax,%rdi
  40c6ca:	e8 89 0e 00 00       	call   40d558 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
  40c6cf:	e9 bf 00 00 00       	jmp    40c793 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	    }
	  else
#endif
	  if (__builtin_expect(_M_disjunct(__s), true))
  40c6d4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40c6d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c6dc:	48 89 d6             	mov    %rdx,%rsi
  40c6df:	48 89 c7             	mov    %rax,%rdi
  40c6e2:	e8 97 09 00 00       	call   40d07e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
  40c6e7:	0f b6 c0             	movzbl %al,%eax
  40c6ea:	48 85 c0             	test   %rax,%rax
  40c6ed:	0f 95 c0             	setne  %al
  40c6f0:	84 c0                	test   %al,%al
  40c6f2:	74 58                	je     40c74c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x228>
	    {
	      if (__how_much && __len1 != __len2)
  40c6f4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40c6f9:	74 31                	je     40c72c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x208>
  40c6fb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c6ff:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  40c703:	74 27                	je     40c72c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x208>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
  40c705:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c709:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40c70d:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  40c711:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40c715:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40c719:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c71d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40c721:	48 89 c2             	mov    %rax,%rdx
  40c724:	48 89 cf             	mov    %rcx,%rdi
  40c727:	e8 d1 09 00 00       	call   40d0fd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2)
  40c72c:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  40c731:	74 60                	je     40c793 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
		this->_S_copy(__p, __s, __len2);
  40c733:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40c737:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40c73b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c73f:	48 89 ce             	mov    %rcx,%rsi
  40c742:	48 89 c7             	mov    %rax,%rdi
  40c745:	e8 cc f9 ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40c74a:	eb 47                	jmp    40c793 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	    }
	  else
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
  40c74c:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  40c750:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40c754:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40c758:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c75c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40c760:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c764:	4d 89 c1             	mov    %r8,%r9
  40c767:	49 89 f8             	mov    %rdi,%r8
  40c76a:	48 89 c7             	mov    %rax,%rdi
  40c76d:	e8 ae 7b ff ff       	call   404320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcmPKcmm@plt>
  40c772:	eb 1f                	jmp    40c793 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x26f>
	}
      else
	this->_M_mutate(__pos, __len1, __s, __len2);
  40c774:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40c778:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40c77c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40c780:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40c784:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c788:	49 89 f8             	mov    %rdi,%r8
  40c78b:	48 89 c7             	mov    %rax,%rdi
  40c78e:	e8 b5 09 00 00       	call   40d148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__new_size);
  40c793:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c797:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40c79b:	48 89 d6             	mov    %rdx,%rsi
  40c79e:	48 89 c7             	mov    %rax,%rdi
  40c7a1:	e8 82 ad ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  40c7a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  40c7aa:	c9                   	leave
  40c7ab:	c3                   	ret

000000000040c7ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>:
      _M_check(size_type __pos, const char* __s) const
  40c7ac:	55                   	push   %rbp
  40c7ad:	48 89 e5             	mov    %rsp,%rbp
  40c7b0:	48 83 ec 20          	sub    $0x20,%rsp
  40c7b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c7b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40c7bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__pos > this->size())
  40c7c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c7c4:	48 89 c7             	mov    %rax,%rdi
  40c7c7:	e8 c4 85 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c7cc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40c7d0:	0f 92 c0             	setb   %al
  40c7d3:	84 c0                	test   %al,%al
  40c7d5:	74 29                	je     40c800 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc+0x54>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
  40c7d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c7db:	48 89 c7             	mov    %rax,%rdi
  40c7de:	e8 ad 85 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c7e3:	48 89 c1             	mov    %rax,%rcx
  40c7e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c7ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c7ee:	48 89 c6             	mov    %rax,%rsi
  40c7f1:	bf f0 b2 41 00       	mov    $0x41b2f0,%edi
  40c7f6:	b8 00 00 00 00       	mov    $0x0,%eax
  40c7fb:	e8 70 7b ff ff       	call   404370 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
	return __pos;
  40c800:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  40c804:	c9                   	leave
  40c805:	c3                   	ret

000000000040c806 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40c806:	55                   	push   %rbp
  40c807:	48 89 e5             	mov    %rsp,%rbp
  40c80a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c80e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40c812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c816:	48 8b 00             	mov    (%rax),%rax
  40c819:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c81d:	48 c1 e2 02          	shl    $0x2,%rdx
  40c821:	48 01 c2             	add    %rax,%rdx
  40c824:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c828:	48 89 10             	mov    %rdx,(%rax)
    }
  40c82b:	90                   	nop
  40c82c:	5d                   	pop    %rbp
  40c82d:	c3                   	ret

000000000040c82e <_ZSt9__advanceIPKjlEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40c82e:	55                   	push   %rbp
  40c82f:	48 89 e5             	mov    %rsp,%rbp
  40c832:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c836:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40c83a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c83e:	48 8b 00             	mov    (%rax),%rax
  40c841:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40c845:	48 c1 e2 02          	shl    $0x2,%rdx
  40c849:	48 01 c2             	add    %rax,%rdx
  40c84c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c850:	48 89 10             	mov    %rdx,(%rax)
    }
  40c853:	90                   	nop
  40c854:	5d                   	pop    %rbp
  40c855:	c3                   	ret

000000000040c856 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKDiEclIPS2_EEbT_>:
	operator()(_Iterator __it)
  40c856:	55                   	push   %rbp
  40c857:	48 89 e5             	mov    %rsp,%rbp
  40c85a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c85e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return *__it == _M_value; }
  40c862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c866:	8b 10                	mov    (%rax),%edx
  40c868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c86c:	48 8b 00             	mov    (%rax),%rax
  40c86f:	8b 00                	mov    (%rax),%eax
  40c871:	39 c2                	cmp    %eax,%edx
  40c873:	0f 94 c0             	sete   %al
  40c876:	5d                   	pop    %rbp
  40c877:	c3                   	ret

000000000040c878 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm>:
      remove_suffix(size_type __n) noexcept
  40c878:	55                   	push   %rbp
  40c879:	48 89 e5             	mov    %rsp,%rbp
  40c87c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c880:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40c884:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(this->_M_len >= __n);
  40c889:	84 c0                	test   %al,%al
  40c88b:	74 14                	je     40c8a1 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm+0x29>
  40c88d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c891:	48 8b 00             	mov    (%rax),%rax
  40c894:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  40c898:	0f 92 c0             	setb   %al
  40c89b:	0f b6 c0             	movzbl %al,%eax
  40c89e:	48 85 c0             	test   %rax,%rax
	this->_M_len -= __n;
  40c8a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c8a5:	48 8b 00             	mov    (%rax),%rax
  40c8a8:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40c8ac:	48 89 c2             	mov    %rax,%rdx
  40c8af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c8b3:	48 89 10             	mov    %rdx,(%rax)
      }
  40c8b6:	90                   	nop
  40c8b7:	5d                   	pop    %rbp
  40c8b8:	c3                   	ret

000000000040c8b9 <_ZSt11__addressofINSt8__format5_SinkIcEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40c8b9:	55                   	push   %rbp
  40c8ba:	48 89 e5             	mov    %rsp,%rbp
  40c8bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  40c8c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c8c5:	5d                   	pop    %rbp
  40c8c6:	c3                   	ret
  40c8c7:	90                   	nop

000000000040c8c8 <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>:
      _M_type(size_t __i) const noexcept
  40c8c8:	55                   	push   %rbp
  40c8c9:	48 89 e5             	mov    %rsp,%rbp
  40c8cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c8d0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
  40c8d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c8d8:	48 8b 00             	mov    (%rax),%rax
  40c8db:	48 c1 e8 04          	shr    $0x4,%rax
  40c8df:	48 89 c6             	mov    %rax,%rsi
  40c8e2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c8e6:	48 89 d0             	mov    %rdx,%rax
  40c8e9:	48 c1 e0 02          	shl    $0x2,%rax
  40c8ed:	48 01 d0             	add    %rdx,%rax
  40c8f0:	89 c1                	mov    %eax,%ecx
  40c8f2:	48 d3 ee             	shr    %cl,%rsi
  40c8f5:	48 89 f0             	mov    %rsi,%rax
  40c8f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
  40c8fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c900:	83 e0 1f             	and    $0x1f,%eax
      }
  40c903:	5d                   	pop    %rbp
  40c904:	c3                   	ret
  40c905:	90                   	nop

000000000040c906 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  40c906:	55                   	push   %rbp
  40c907:	48 89 e5             	mov    %rsp,%rbp
  40c90a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c90e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  40c912:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c916:	48 8b 10             	mov    (%rax),%rdx
  40c919:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c91d:	48 89 10             	mov    %rdx,(%rax)
  40c920:	90                   	nop
  40c921:	5d                   	pop    %rbp
  40c922:	c3                   	ret
  40c923:	90                   	nop

000000000040c924 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
  40c924:	55                   	push   %rbp
  40c925:	48 89 e5             	mov    %rsp,%rbp
  40c928:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40c92c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c930:	48 8b 00             	mov    (%rax),%rax
  40c933:	5d                   	pop    %rbp
  40c934:	c3                   	ret
  40c935:	90                   	nop

000000000040c936 <_ZNSt8__format5_SinkIcE7_M_bumpEm>:
      _M_bump(size_t __n)
  40c936:	55                   	push   %rbp
  40c937:	48 89 e5             	mov    %rsp,%rbp
  40c93a:	48 83 ec 10          	sub    $0x10,%rsp
  40c93e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40c942:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_next += __n; }
  40c946:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40c94a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40c94e:	48 83 c2 18          	add    $0x18,%rdx
  40c952:	48 89 c6             	mov    %rax,%rsi
  40c955:	48 89 d7             	mov    %rdx,%rdi
  40c958:	e8 17 0a 00 00       	call   40d374 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
  40c95d:	90                   	nop
  40c95e:	c9                   	leave
  40c95f:	c3                   	ret

000000000040c960 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
  40c960:	55                   	push   %rbp
  40c961:	48 89 e5             	mov    %rsp,%rbp
  40c964:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  40c968:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c96c:	5d                   	pop    %rbp
  40c96d:	c3                   	ret

000000000040c96e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
  40c96e:	55                   	push   %rbp
  40c96f:	48 89 e5             	mov    %rsp,%rbp
  40c972:	53                   	push   %rbx
  40c973:	48 83 ec 28          	sub    $0x28,%rsp
  40c977:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c97b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40c97f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40c983:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (this->max_size() - (this->size() - __n1) < __n2)
  40c987:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c98b:	48 89 c7             	mov    %rax,%rdi
  40c98e:	e8 d3 f6 ff ff       	call   40c066 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
  40c993:	48 89 c3             	mov    %rax,%rbx
  40c996:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c99a:	48 89 c7             	mov    %rax,%rdi
  40c99d:	e8 ee 83 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c9a2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c9a6:	48 29 c2             	sub    %rax,%rdx
  40c9a9:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
  40c9ad:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40c9b1:	0f 92 c0             	setb   %al
  40c9b4:	84 c0                	test   %al,%al
  40c9b6:	74 0c                	je     40c9c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc+0x56>
	  __throw_length_error(__N(__s));
  40c9b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40c9bc:	48 89 c7             	mov    %rax,%rdi
  40c9bf:	e8 6c 77 ff ff       	call   404130 <_ZSt20__throw_length_errorPKc@plt>
      }
  40c9c4:	90                   	nop
  40c9c5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40c9c9:	c9                   	leave
  40c9ca:	c3                   	ret
  40c9cb:	90                   	nop

000000000040c9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40c9cc:	55                   	push   %rbp
  40c9cd:	48 89 e5             	mov    %rsp,%rbp
  40c9d0:	53                   	push   %rbx
  40c9d1:	48 83 ec 38          	sub    $0x38,%rsp
  40c9d5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40c9d9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40c9dd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      const size_type __len = __n + this->size();
  40c9e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c9e5:	48 89 c7             	mov    %rax,%rdi
  40c9e8:	e8 a3 83 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40c9ed:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c9f1:	48 01 d0             	add    %rdx,%rax
  40c9f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__len <= this->capacity())
  40c9f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40c9fc:	48 89 c7             	mov    %rax,%rdi
  40c9ff:	e8 b2 e9 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40ca04:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40ca08:	0f 93 c0             	setae  %al
  40ca0b:	84 c0                	test   %al,%al
  40ca0d:	74 3b                	je     40ca4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0x7e>
	  if (__n)
  40ca0f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40ca14:	74 62                	je     40ca78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
  40ca16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ca1a:	48 89 c7             	mov    %rax,%rdi
  40ca1d:	e8 f4 aa ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40ca22:	48 89 c3             	mov    %rax,%rbx
  40ca25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ca29:	48 89 c7             	mov    %rax,%rdi
  40ca2c:	e8 5f 83 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40ca31:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40ca35:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40ca39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40ca3d:	48 89 c6             	mov    %rax,%rsi
  40ca40:	48 89 cf             	mov    %rcx,%rdi
  40ca43:	e8 ce f6 ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
  40ca48:	eb 2e                	jmp    40ca78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
  40ca4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ca4e:	48 89 c7             	mov    %rax,%rdi
  40ca51:	e8 3a 83 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40ca56:	48 89 c6             	mov    %rax,%rsi
  40ca59:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40ca5d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ca61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ca65:	49 89 c8             	mov    %rcx,%r8
  40ca68:	48 89 d1             	mov    %rdx,%rcx
  40ca6b:	ba 00 00 00 00       	mov    $0x0,%edx
  40ca70:	48 89 c7             	mov    %rax,%rdi
  40ca73:	e8 d0 06 00 00       	call   40d148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
      this->_M_set_length(__len);
  40ca78:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ca7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ca80:	48 89 d6             	mov    %rdx,%rsi
  40ca83:	48 89 c7             	mov    %rax,%rdi
  40ca86:	e8 9d aa ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  40ca8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
  40ca8f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ca93:	c9                   	leave
  40ca94:	c3                   	ret
  40ca95:	90                   	nop

000000000040ca96 <_ZNSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IJPKcEEERKNS1_10_Arg_storeIS4_JDpT_EEE>:
      basic_format_args<_Context>::
  40ca96:	55                   	push   %rbp
  40ca97:	48 89 e5             	mov    %rsp,%rbp
  40ca9a:	48 83 ec 20          	sub    $0x20,%rsp
  40ca9e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40caa2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	    _M_packed_size = sizeof...(_Args);
  40caa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40caaa:	0f b6 10             	movzbl (%rax),%edx
  40caad:	83 e2 f0             	and    $0xfffffff0,%edx
  40cab0:	83 ca 01             	or     $0x1,%edx
  40cab3:	88 10                	mov    %dl,(%rax)
	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
  40cab5:	c6 45 ff 0a          	movb   $0xa,-0x1(%rbp)
  40cab9:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  40cabd:	48 89 c7             	mov    %rax,%rdi
  40cac0:	e8 38 f8 ff ff       	call   40c2fd <_ZNSt8__format16__pack_arg_typesILi5ELm1EEEDaRKSt5arrayINS_6_Arg_tEXT0_EE>
  40cac5:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  40cacc:	ff ff 0f
  40cacf:	48 21 c2             	and    %rax,%rdx
  40cad2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cad6:	48 89 d1             	mov    %rdx,%rcx
  40cad9:	48 c1 e1 04          	shl    $0x4,%rcx
  40cadd:	48 8b 10             	mov    (%rax),%rdx
  40cae0:	83 e2 0f             	and    $0xf,%edx
  40cae3:	48 09 ca             	or     %rcx,%rdx
  40cae6:	48 89 10             	mov    %rdx,(%rax)
	    _M_values = __store._M_args;
  40cae9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40caed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40caf1:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  40caf5:	90                   	nop
  40caf6:	c9                   	leave
  40caf7:	c3                   	ret

000000000040caf8 <_ZNSt8__detail15__raise_and_addItEEbRT_ih>:
    __raise_and_add(_Tp& __val, int __base, unsigned char __c)
  40caf8:	55                   	push   %rbp
  40caf9:	48 89 e5             	mov    %rsp,%rbp
  40cafc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40cb00:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40cb03:	89 d0                	mov    %edx,%eax
  40cb05:	88 45 f0             	mov    %al,-0x10(%rbp)
      if (__builtin_mul_overflow(__val, __base, &__val)
  40cb08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb0c:	0f b7 00             	movzwl (%rax),%eax
  40cb0f:	b9 00 00 00 00       	mov    $0x0,%ecx
  40cb14:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40cb17:	48 63 d2             	movslq %edx,%rdx
  40cb1a:	0f b7 c0             	movzwl %ax,%eax
  40cb1d:	48 0f af c2          	imul   %rdx,%rax
  40cb21:	0f b7 d0             	movzwl %ax,%edx
  40cb24:	48 39 d0             	cmp    %rdx,%rax
  40cb27:	74 05                	je     40cb2e <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x36>
  40cb29:	b9 01 00 00 00       	mov    $0x1,%ecx
  40cb2e:	89 c2                	mov    %eax,%edx
  40cb30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb34:	66 89 10             	mov    %dx,(%rax)
  40cb37:	89 c8                	mov    %ecx,%eax
  40cb39:	83 e0 01             	and    $0x1,%eax
	  || __builtin_add_overflow(__val, __c, &__val))
  40cb3c:	84 c0                	test   %al,%al
  40cb3e:	75 2c                	jne    40cb6c <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x74>
  40cb40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb44:	0f b7 10             	movzwl (%rax),%edx
  40cb47:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  40cb4b:	b9 00 00 00 00       	mov    $0x0,%ecx
  40cb50:	66 01 d0             	add    %dx,%ax
  40cb53:	73 05                	jae    40cb5a <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x62>
  40cb55:	b9 01 00 00 00       	mov    $0x1,%ecx
  40cb5a:	89 c2                	mov    %eax,%edx
  40cb5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb60:	66 89 10             	mov    %dx,(%rax)
  40cb63:	89 c8                	mov    %ecx,%eax
  40cb65:	83 e0 01             	and    $0x1,%eax
  40cb68:	84 c0                	test   %al,%al
  40cb6a:	74 07                	je     40cb73 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x7b>
  40cb6c:	b8 01 00 00 00       	mov    $0x1,%eax
  40cb71:	eb 05                	jmp    40cb78 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x80>
  40cb73:	b8 00 00 00 00       	mov    $0x0,%eax
      if (__builtin_mul_overflow(__val, __base, &__val)
  40cb78:	84 c0                	test   %al,%al
  40cb7a:	74 07                	je     40cb83 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x8b>
	return false;
  40cb7c:	b8 00 00 00 00       	mov    $0x0,%eax
  40cb81:	eb 05                	jmp    40cb88 <_ZNSt8__detail15__raise_and_addItEEbRT_ih+0x90>
      return true;
  40cb83:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  40cb88:	5d                   	pop    %rbp
  40cb89:	c3                   	ret

000000000040cb8a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40cb8a:	55                   	push   %rbp
  40cb8b:	48 89 e5             	mov    %rsp,%rbp
  40cb8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40cb92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb96:	5d                   	pop    %rbp
  40cb97:	c3                   	ret

000000000040cb98 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40cb98:	55                   	push   %rbp
  40cb99:	48 89 e5             	mov    %rsp,%rbp
  40cb9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40cba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cba4:	5d                   	pop    %rbp
  40cba5:	c3                   	ret

000000000040cba6 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>:
	auto __incr = [&, this] {
  40cba6:	55                   	push   %rbp
  40cba7:	48 89 e5             	mov    %rsp,%rbp
  40cbaa:	48 83 ec 10          	sub    $0x10,%rsp
  40cbae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  ++__to_incr;
  40cbb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cbb6:	48 8b 40 08          	mov    0x8(%rax),%rax
  40cbba:	0f b6 10             	movzbl (%rax),%edx
  40cbbd:	83 c2 01             	add    $0x1,%edx
  40cbc0:	88 10                	mov    %dl,(%rax)
	  return ++_M_curr();
  40cbc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cbc6:	48 8b 00             	mov    (%rax),%rax
  40cbc9:	48 89 c7             	mov    %rax,%rdi
  40cbcc:	e8 e7 df ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cbd1:	48 8b 10             	mov    (%rax),%rdx
  40cbd4:	48 83 c2 01          	add    $0x1,%rdx
  40cbd8:	48 89 10             	mov    %rdx,(%rax)
  40cbdb:	48 8b 00             	mov    (%rax),%rax
	auto __incr = [&, this] {
  40cbde:	c9                   	leave
  40cbdf:	c3                   	ret

000000000040cbe0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev>:
      _M_read_utf8()
  40cbe0:	55                   	push   %rbp
  40cbe1:	48 89 e5             	mov    %rsp,%rbp
  40cbe4:	48 83 ec 50          	sub    $0x50,%rsp
  40cbe8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
	_Guard<_Iter> __g{this, _M_curr()};
  40cbec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cbf0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40cbf4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cbf8:	48 89 c7             	mov    %rax,%rdi
  40cbfb:	e8 b8 df ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cc00:	48 8b 00             	mov    (%rax),%rax
  40cc03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	char32_t __c{};
  40cc07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	const uint8_t __lo_bound = 0x80, __hi_bound = 0xBF;
  40cc0e:	c6 45 fb 80          	movb   $0x80,-0x5(%rbp)
  40cc12:	c6 45 fa bf          	movb   $0xbf,-0x6(%rbp)
	uint8_t __u = *_M_curr()++;
  40cc16:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc1a:	48 89 c7             	mov    %rax,%rdi
  40cc1d:	e8 96 df ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cc22:	48 8b 10             	mov    (%rax),%rdx
  40cc25:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  40cc29:	48 89 08             	mov    %rcx,(%rax)
  40cc2c:	0f b6 02             	movzbl (%rdx),%eax
  40cc2f:	88 45 f9             	mov    %al,-0x7(%rbp)
	uint8_t __to_incr = 1;
  40cc32:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	auto __incr = [&, this] {
  40cc36:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc3a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40cc3e:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  40cc42:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	if (__u <= 0x7F) [[likely]]      // 0x00 to 0x7F
  40cc46:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cc4a:	84 c0                	test   %al,%al
  40cc4c:	78 0c                	js     40cc5a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x7a>
	  __c = __u;
  40cc4e:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cc52:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cc55:	e9 7d 03 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u < 0xC2) [[unlikely]]
  40cc5a:	80 7d f9 c1          	cmpb   $0xc1,-0x7(%rbp)
  40cc5e:	77 14                	ja     40cc74 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x94>
	  __c = _S_error();
  40cc60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc64:	48 89 c7             	mov    %rax,%rdi
  40cc67:	e8 a2 07 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cc6c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cc6f:	e9 63 03 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (_M_curr() == _M_last) [[unlikely]]
  40cc74:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc78:	48 89 c7             	mov    %rax,%rdi
  40cc7b:	e8 38 df ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cc80:	48 8b 10             	mov    (%rax),%rdx
  40cc83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc87:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cc8b:	48 39 c2             	cmp    %rax,%rdx
  40cc8e:	0f 94 c0             	sete   %al
  40cc91:	84 c0                	test   %al,%al
  40cc93:	74 14                	je     40cca9 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0xc9>
	  __c = _S_error();
  40cc95:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cc99:	48 89 c7             	mov    %rax,%rdi
  40cc9c:	e8 6d 07 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cca1:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cca4:	e9 2e 03 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xDF) // 0xC2 to 0xDF
  40cca9:	80 7d f9 df          	cmpb   $0xdf,-0x7(%rbp)
  40ccad:	77 66                	ja     40cd15 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x135>
	    __c = __u & 0x1F;
  40ccaf:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ccb3:	83 e0 1f             	and    $0x1f,%eax
  40ccb6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40ccb9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ccbd:	48 89 c7             	mov    %rax,%rdi
  40ccc0:	e8 f3 de ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40ccc5:	48 8b 00             	mov    (%rax),%rax
  40ccc8:	0f b6 00             	movzbl (%rax),%eax
  40cccb:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40ccce:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ccd2:	84 c0                	test   %al,%al
  40ccd4:	79 06                	jns    40ccdc <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0xfc>
  40ccd6:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40ccda:	76 14                	jbe    40ccf0 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x110>
	      __c = _S_error();
  40ccdc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cce0:	48 89 c7             	mov    %rax,%rdi
  40cce3:	e8 26 07 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cce8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cceb:	e9 e7 02 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40ccf0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ccf3:	c1 e0 06             	shl    $0x6,%eax
  40ccf6:	89 c2                	mov    %eax,%edx
  40ccf8:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ccfc:	83 e0 3f             	and    $0x3f,%eax
  40ccff:	09 d0                	or     %edx,%eax
  40cd01:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__incr();
  40cd04:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cd08:	48 89 c7             	mov    %rax,%rdi
  40cd0b:	e8 96 fe ff ff       	call   40cba6 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cd10:	e9 c2 02 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xEF) // 0xE0 to 0xEF
  40cd15:	80 7d f9 ef          	cmpb   $0xef,-0x7(%rbp)
  40cd19:	0f 87 14 01 00 00    	ja     40ce33 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x253>
	    const uint8_t __lo_bound_2 = __u == 0xE0 ? 0xA0 : __lo_bound;
  40cd1f:	80 7d f9 e0          	cmpb   $0xe0,-0x7(%rbp)
  40cd23:	75 07                	jne    40cd2c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x14c>
  40cd25:	b8 a0 ff ff ff       	mov    $0xffffffa0,%eax
  40cd2a:	eb 05                	jmp    40cd31 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x151>
  40cd2c:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
  40cd31:	88 45 f6             	mov    %al,-0xa(%rbp)
	    const uint8_t __hi_bound_2 = __u == 0xED ? 0x9F : __hi_bound;
  40cd34:	80 7d f9 ed          	cmpb   $0xed,-0x7(%rbp)
  40cd38:	75 07                	jne    40cd41 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x161>
  40cd3a:	b8 9f ff ff ff       	mov    $0xffffff9f,%eax
  40cd3f:	eb 05                	jmp    40cd46 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x166>
  40cd41:	b8 bf ff ff ff       	mov    $0xffffffbf,%eax
  40cd46:	88 45 f5             	mov    %al,-0xb(%rbp)
	    __c = __u & 0x0F;
  40cd49:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cd4d:	83 e0 0f             	and    $0xf,%eax
  40cd50:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40cd53:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cd57:	48 89 c7             	mov    %rax,%rdi
  40cd5a:	e8 59 de ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cd5f:	48 8b 00             	mov    (%rax),%rax
  40cd62:	0f b6 00             	movzbl (%rax),%eax
  40cd65:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
  40cd68:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cd6c:	3a 45 f6             	cmp    -0xa(%rbp),%al
  40cd6f:	72 09                	jb     40cd7a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x19a>
  40cd71:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cd75:	38 45 f5             	cmp    %al,-0xb(%rbp)
  40cd78:	73 14                	jae    40cd8e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x1ae>
	      __c = _S_error();
  40cd7a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cd7e:	48 89 c7             	mov    %rax,%rdi
  40cd81:	e8 88 06 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cd86:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cd89:	e9 49 02 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	    else if (__incr() == _M_last) [[unlikely]]
  40cd8e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cd92:	48 89 c7             	mov    %rax,%rdi
  40cd95:	e8 0c fe ff ff       	call   40cba6 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cd9a:	48 89 c2             	mov    %rax,%rdx
  40cd9d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cda1:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cda5:	48 39 c2             	cmp    %rax,%rdx
  40cda8:	0f 94 c0             	sete   %al
  40cdab:	84 c0                	test   %al,%al
  40cdad:	74 14                	je     40cdc3 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x1e3>
	      __c = _S_error();
  40cdaf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cdb3:	48 89 c7             	mov    %rax,%rdi
  40cdb6:	e8 53 06 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cdbb:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cdbe:	e9 14 02 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40cdc3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cdc6:	c1 e0 06             	shl    $0x6,%eax
  40cdc9:	89 c2                	mov    %eax,%edx
  40cdcb:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cdcf:	83 e0 3f             	and    $0x3f,%eax
  40cdd2:	09 d0                	or     %edx,%eax
  40cdd4:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__u = *_M_curr();
  40cdd7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cddb:	48 89 c7             	mov    %rax,%rdi
  40cdde:	e8 d5 dd ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cde3:	48 8b 00             	mov    (%rax),%rax
  40cde6:	0f b6 00             	movzbl (%rax),%eax
  40cde9:	88 45 f9             	mov    %al,-0x7(%rbp)
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40cdec:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cdf0:	84 c0                	test   %al,%al
  40cdf2:	79 06                	jns    40cdfa <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x21a>
  40cdf4:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40cdf8:	76 14                	jbe    40ce0e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x22e>
		  __c = _S_error();
  40cdfa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cdfe:	48 89 c7             	mov    %rax,%rdi
  40ce01:	e8 08 06 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40ce06:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40ce09:	e9 c9 01 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		    __c = (__c << 6) | (__u & 0x3F);
  40ce0e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ce11:	c1 e0 06             	shl    $0x6,%eax
  40ce14:	89 c2                	mov    %eax,%edx
  40ce16:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ce1a:	83 e0 3f             	and    $0x3f,%eax
  40ce1d:	09 d0                	or     %edx,%eax
  40ce1f:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    __incr();
  40ce22:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ce26:	48 89 c7             	mov    %rax,%rdi
  40ce29:	e8 78 fd ff ff       	call   40cba6 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40ce2e:	e9 a4 01 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	else if (__u <= 0xF4) // 0xF0 to 0xF4
  40ce33:	80 7d f9 f4          	cmpb   $0xf4,-0x7(%rbp)
  40ce37:	0f 87 8b 01 00 00    	ja     40cfc8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3e8>
	    const uint8_t __lo_bound_2 = __u == 0xF0 ? 0x90 : __lo_bound;
  40ce3d:	80 7d f9 f0          	cmpb   $0xf0,-0x7(%rbp)
  40ce41:	75 07                	jne    40ce4a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x26a>
  40ce43:	b8 90 ff ff ff       	mov    $0xffffff90,%eax
  40ce48:	eb 05                	jmp    40ce4f <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x26f>
  40ce4a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
  40ce4f:	88 45 f8             	mov    %al,-0x8(%rbp)
	    const uint8_t __hi_bound_2 = __u == 0xF4 ? 0x8F : __hi_bound;
  40ce52:	80 7d f9 f4          	cmpb   $0xf4,-0x7(%rbp)
  40ce56:	75 07                	jne    40ce5f <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x27f>
  40ce58:	b8 8f ff ff ff       	mov    $0xffffff8f,%eax
  40ce5d:	eb 05                	jmp    40ce64 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x284>
  40ce5f:	b8 bf ff ff ff       	mov    $0xffffffbf,%eax
  40ce64:	88 45 f7             	mov    %al,-0x9(%rbp)
	    __c = __u & 0x07;
  40ce67:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ce6b:	83 e0 07             	and    $0x7,%eax
  40ce6e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    __u = *_M_curr();
  40ce71:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce75:	48 89 c7             	mov    %rax,%rdi
  40ce78:	e8 3b dd ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40ce7d:	48 8b 00             	mov    (%rax),%rax
  40ce80:	0f b6 00             	movzbl (%rax),%eax
  40ce83:	88 45 f9             	mov    %al,-0x7(%rbp)
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
  40ce86:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ce8a:	3a 45 f8             	cmp    -0x8(%rbp),%al
  40ce8d:	72 09                	jb     40ce98 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x2b8>
  40ce8f:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ce93:	38 45 f7             	cmp    %al,-0x9(%rbp)
  40ce96:	73 14                	jae    40ceac <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x2cc>
	      __c = _S_error();
  40ce98:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ce9c:	48 89 c7             	mov    %rax,%rdi
  40ce9f:	e8 6a 05 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cea4:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cea7:	e9 2b 01 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	    else if (__incr() == _M_last) [[unlikely]]
  40ceac:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ceb0:	48 89 c7             	mov    %rax,%rdi
  40ceb3:	e8 ee fc ff ff       	call   40cba6 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40ceb8:	48 89 c2             	mov    %rax,%rdx
  40cebb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cebf:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cec3:	48 39 c2             	cmp    %rax,%rdx
  40cec6:	0f 94 c0             	sete   %al
  40cec9:	84 c0                	test   %al,%al
  40cecb:	74 14                	je     40cee1 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x301>
	      __c = _S_error();
  40cecd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40ced1:	48 89 c7             	mov    %rax,%rdi
  40ced4:	e8 35 05 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40ced9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cedc:	e9 f6 00 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		__c = (__c << 6) | (__u & 0x3F);
  40cee1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cee4:	c1 e0 06             	shl    $0x6,%eax
  40cee7:	89 c2                	mov    %eax,%edx
  40cee9:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40ceed:	83 e0 3f             	and    $0x3f,%eax
  40cef0:	09 d0                	or     %edx,%eax
  40cef2:	89 45 fc             	mov    %eax,-0x4(%rbp)
		__u = *_M_curr();
  40cef5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cef9:	48 89 c7             	mov    %rax,%rdi
  40cefc:	e8 b7 dc ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cf01:	48 8b 00             	mov    (%rax),%rax
  40cf04:	0f b6 00             	movzbl (%rax),%eax
  40cf07:	88 45 f9             	mov    %al,-0x7(%rbp)
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40cf0a:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cf0e:	84 c0                	test   %al,%al
  40cf10:	79 06                	jns    40cf18 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x338>
  40cf12:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40cf16:	76 14                	jbe    40cf2c <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x34c>
		  __c = _S_error();
  40cf18:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cf1c:	48 89 c7             	mov    %rax,%rdi
  40cf1f:	e8 ea 04 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cf24:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cf27:	e9 ab 00 00 00       	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		else if (__incr() == _M_last) [[unlikely]]
  40cf2c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cf30:	48 89 c7             	mov    %rax,%rdi
  40cf33:	e8 6e fc ff ff       	call   40cba6 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cf38:	48 89 c2             	mov    %rax,%rdx
  40cf3b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cf3f:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cf43:	48 39 c2             	cmp    %rax,%rdx
  40cf46:	0f 94 c0             	sete   %al
  40cf49:	84 c0                	test   %al,%al
  40cf4b:	74 11                	je     40cf5e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x37e>
		  __c = _S_error();
  40cf4d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cf51:	48 89 c7             	mov    %rax,%rdi
  40cf54:	e8 b5 04 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cf59:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cf5c:	eb 79                	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
		    __c = (__c << 6) | (__u & 0x3F);
  40cf5e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cf61:	c1 e0 06             	shl    $0x6,%eax
  40cf64:	89 c2                	mov    %eax,%edx
  40cf66:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cf6a:	83 e0 3f             	and    $0x3f,%eax
  40cf6d:	09 d0                	or     %edx,%eax
  40cf6f:	89 45 fc             	mov    %eax,-0x4(%rbp)
		    __u = *_M_curr();
  40cf72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cf76:	48 89 c7             	mov    %rax,%rdi
  40cf79:	e8 3a dc ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40cf7e:	48 8b 00             	mov    (%rax),%rax
  40cf81:	0f b6 00             	movzbl (%rax),%eax
  40cf84:	88 45 f9             	mov    %al,-0x7(%rbp)
		    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
  40cf87:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cf8b:	84 c0                	test   %al,%al
  40cf8d:	79 06                	jns    40cf95 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3b5>
  40cf8f:	80 7d f9 bf          	cmpb   $0xbf,-0x7(%rbp)
  40cf93:	76 11                	jbe    40cfa6 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3c6>
		      __c = _S_error();
  40cf95:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cf99:	48 89 c7             	mov    %rax,%rdi
  40cf9c:	e8 6d 04 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cfa1:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40cfa4:	eb 31                	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
			__c = (__c << 6) | (__u & 0x3F);
  40cfa6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40cfa9:	c1 e0 06             	shl    $0x6,%eax
  40cfac:	89 c2                	mov    %eax,%edx
  40cfae:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40cfb2:	83 e0 3f             	and    $0x3f,%eax
  40cfb5:	09 d0                	or     %edx,%eax
  40cfb7:	89 45 fc             	mov    %eax,-0x4(%rbp)
			__incr();
  40cfba:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40cfbe:	48 89 c7             	mov    %rax,%rdi
  40cfc1:	e8 e0 fb ff ff       	call   40cba6 <_ZZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8EvENKUlvE_clEv>
  40cfc6:	eb 0f                	jmp    40cfd7 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE12_M_read_utf8Ev+0x3f7>
	  __c = _S_error();
  40cfc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cfcc:	48 89 c7             	mov    %rax,%rdi
  40cfcf:	e8 3a 04 00 00       	call   40d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>
  40cfd4:	89 45 fc             	mov    %eax,-0x4(%rbp)
	_M_update(__c, __to_incr);
  40cfd7:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  40cfdb:	0f b6 d0             	movzbl %al,%edx
  40cfde:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  40cfe1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40cfe5:	89 ce                	mov    %ecx,%esi
  40cfe7:	48 89 c7             	mov    %rax,%rdi
  40cfea:	e8 61 04 00 00       	call   40d450 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE9_M_updateEDih>
      }
  40cfef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40cff3:	48 89 c7             	mov    %rax,%rdi
  40cff6:	e8 d9 03 00 00       	call   40d3d4 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE6_GuardIS2_ED1Ev>
  40cffb:	c9                   	leave
  40cffc:	c3                   	ret

000000000040cffd <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJiEE11_S_make_eltIiEENS_10_Arg_valueIS4_EERT_>:
	_S_make_elt(_Tp& __v)
  40cffd:	55                   	push   %rbp
  40cffe:	48 89 e5             	mov    %rsp,%rbp
  40d001:	48 83 ec 50          	sub    $0x50,%rsp
  40d005:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	  basic_format_arg<_Context> __arg(__v);
  40d009:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d00d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d011:	48 89 d6             	mov    %rdx,%rsi
  40d014:	48 89 c7             	mov    %rax,%rdi
  40d017:	e8 a6 04 00 00       	call   40d4c2 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IiEERT_>
	    return __arg._M_val;
  40d01c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d020:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d024:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d028:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40d02c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d030:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
	}
  40d034:	c9                   	leave
  40d035:	c3                   	ret

000000000040d036 <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJSt17basic_string_viewIcSt11char_traitsIcEEEE11_S_make_eltINSt7__cxx1112basic_stringIcS7_SaIcEEEEENS_10_Arg_valueIS4_EERT_>:
	_S_make_elt(_Tp& __v)
  40d036:	55                   	push   %rbp
  40d037:	48 89 e5             	mov    %rsp,%rbp
  40d03a:	48 83 ec 50          	sub    $0x50,%rsp
  40d03e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	  basic_format_arg<_Context> __arg(__v);
  40d042:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d046:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d04a:	48 89 d6             	mov    %rdx,%rsi
  40d04d:	48 89 c7             	mov    %rax,%rdi
  40d050:	e8 9d 04 00 00       	call   40d4f2 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_>
	    return __arg._M_val;
  40d055:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d059:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d05d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d061:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40d065:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d069:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
	}
  40d06d:	c9                   	leave
  40d06e:	c3                   	ret

000000000040d06f <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40d06f:	55                   	push   %rbp
  40d070:	48 89 e5             	mov    %rsp,%rbp
  40d073:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  40d077:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d07b:	5d                   	pop    %rbp
  40d07c:	c3                   	ret
  40d07d:	90                   	nop

000000000040d07e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
  40d07e:	55                   	push   %rbp
  40d07f:	48 89 e5             	mov    %rsp,%rbp
  40d082:	53                   	push   %rbx
  40d083:	48 83 ec 28          	sub    $0x28,%rsp
  40d087:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d08b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	return (less<const _CharT*>()(__s, _M_data())
  40d08f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d093:	48 89 c7             	mov    %rax,%rdi
  40d096:	e8 7b a4 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40d09b:	48 89 c2             	mov    %rax,%rdx
  40d09e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40d0a2:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
  40d0a6:	48 89 ce             	mov    %rcx,%rsi
  40d0a9:	48 89 c7             	mov    %rax,%rdi
  40d0ac:	e8 d1 04 00 00       	call   40d582 <_ZNKSt4lessIPKcEclES1_S1_>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
  40d0b1:	84 c0                	test   %al,%al
  40d0b3:	75 36                	jne    40d0eb <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x6d>
  40d0b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d0b9:	48 89 c7             	mov    %rax,%rdi
  40d0bc:	e8 55 a4 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40d0c1:	48 89 c3             	mov    %rax,%rbx
  40d0c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d0c8:	48 89 c7             	mov    %rax,%rdi
  40d0cb:	e8 c0 7c ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40d0d0:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40d0d4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d0d8:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  40d0dc:	48 89 ce             	mov    %rcx,%rsi
  40d0df:	48 89 c7             	mov    %rax,%rdi
  40d0e2:	e8 9b 04 00 00       	call   40d582 <_ZNKSt4lessIPKcEclES1_S1_>
  40d0e7:	84 c0                	test   %al,%al
  40d0e9:	74 07                	je     40d0f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x74>
  40d0eb:	b8 01 00 00 00       	mov    $0x1,%eax
  40d0f0:	eb 05                	jmp    40d0f7 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x79>
  40d0f2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  40d0f7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d0fb:	c9                   	leave
  40d0fc:	c3                   	ret

000000000040d0fd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
  40d0fd:	55                   	push   %rbp
  40d0fe:	48 89 e5             	mov    %rsp,%rbp
  40d101:	48 83 ec 20          	sub    $0x20,%rsp
  40d105:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d109:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d10d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
  40d111:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
  40d116:	75 15                	jne    40d12d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
  40d118:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d11c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d120:	48 89 d6             	mov    %rdx,%rsi
  40d123:	48 89 c7             	mov    %rax,%rdi
  40d126:	e8 f7 75 ff ff       	call   404722 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  40d12b:	eb 17                	jmp    40d144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x47>
	  traits_type::move(__d, __s, __n);
  40d12d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d131:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40d135:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d139:	48 89 ce             	mov    %rcx,%rsi
  40d13c:	48 89 c7             	mov    %rax,%rdi
  40d13f:	e8 b5 77 ff ff       	call   4048f9 <_ZNSt11char_traitsIcE4moveEPcPKcm>
      }
  40d144:	90                   	nop
  40d145:	c9                   	leave
  40d146:	c3                   	ret
  40d147:	90                   	nop

000000000040d148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
  40d148:	55                   	push   %rbp
  40d149:	48 89 e5             	mov    %rsp,%rbp
  40d14c:	48 83 ec 50          	sub    $0x50,%rsp
  40d150:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d154:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d158:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40d15c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40d160:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
      const size_type __how_much = length() - __pos - __len1;
  40d164:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d168:	48 89 c7             	mov    %rax,%rdi
  40d16b:	e8 30 a7 ff ff       	call   4078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40d170:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  40d174:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40d178:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      size_type __new_capacity = length() + __len2 - __len1;
  40d17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d180:	48 89 c7             	mov    %rax,%rdi
  40d183:	e8 18 a7 ff ff       	call   4078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  40d188:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d18c:	48 01 d0             	add    %rdx,%rax
  40d18f:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  40d193:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __r = _M_create(__new_capacity, capacity());
  40d197:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d19b:	48 89 c7             	mov    %rax,%rdi
  40d19e:	e8 13 e2 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  40d1a3:	48 89 c2             	mov    %rax,%rdx
  40d1a6:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  40d1aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d1ae:	48 89 ce             	mov    %rcx,%rsi
  40d1b1:	48 89 c7             	mov    %rax,%rdi
  40d1b4:	e8 1d dd ff ff       	call   40aed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  40d1b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__pos)
  40d1bd:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40d1c2:	74 22                	je     40d1e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x9e>
	this->_S_copy(__r, _M_data(), __pos);
  40d1c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d1c8:	48 89 c7             	mov    %rax,%rdi
  40d1cb:	e8 46 a3 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40d1d0:	48 89 c1             	mov    %rax,%rcx
  40d1d3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d1d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d1db:	48 89 ce             	mov    %rcx,%rsi
  40d1de:	48 89 c7             	mov    %rax,%rdi
  40d1e1:	e8 30 ef ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__s && __len2)
  40d1e6:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40d1eb:	74 26                	je     40d213 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
  40d1ed:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  40d1f2:	74 1f                	je     40d213 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
	this->_S_copy(__r + __pos, __s, __len2);
  40d1f4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d1f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d1fc:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40d200:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40d204:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d208:	48 89 c6             	mov    %rax,%rsi
  40d20b:	48 89 cf             	mov    %rcx,%rdi
  40d20e:	e8 03 ef ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__how_much)
  40d213:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40d218:	74 3d                	je     40d257 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x10f>
		      _M_data() + __pos + __len1, __how_much);
  40d21a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d21e:	48 89 c7             	mov    %rax,%rdi
  40d221:	e8 f0 a2 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  40d226:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40d22a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d22e:	48 01 ca             	add    %rcx,%rdx
  40d231:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
	this->_S_copy(__r + __pos + __len2,
  40d235:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d239:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40d23d:	48 01 c2             	add    %rax,%rdx
  40d240:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d244:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40d248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d24c:	48 89 c2             	mov    %rax,%rdx
  40d24f:	48 89 cf             	mov    %rcx,%rdi
  40d252:	e8 bf ee ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
  40d257:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d25b:	48 89 c7             	mov    %rax,%rdi
  40d25e:	e8 1d c5 ff ff       	call   409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
  40d263:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d267:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d26b:	48 89 d6             	mov    %rdx,%rsi
  40d26e:	48 89 c7             	mov    %rax,%rdi
  40d271:	e8 62 c5 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
  40d276:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d27a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d27e:	48 89 d6             	mov    %rdx,%rsi
  40d281:	48 89 c7             	mov    %rax,%rdi
  40d284:	e8 69 c5 ff ff       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    }
  40d289:	90                   	nop
  40d28a:	c9                   	leave
  40d28b:	c3                   	ret

000000000040d28c <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>:
	    }
	}

      [[nodiscard]]
      constexpr span<element_type, dynamic_extent>
      subspan(size_type __offset, size_type __count = dynamic_extent) const
  40d28c:	55                   	push   %rbp
  40d28d:	48 89 e5             	mov    %rsp,%rbp
  40d290:	53                   	push   %rbx
  40d291:	48 83 ec 38          	sub    $0x38,%rsp
  40d295:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d299:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d29d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40d2a1:	b8 00 00 00 00       	mov    $0x0,%eax
      noexcept
      {
	__glibcxx_assert(__offset <= size());
  40d2a6:	84 c0                	test   %al,%al
  40d2a8:	74 1e                	je     40d2c8 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x3c>
  40d2aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d2ae:	48 89 c7             	mov    %rax,%rdi
  40d2b1:	e8 7e 82 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d2b6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  40d2ba:	0f 92 c0             	setb   %al
  40d2bd:	0f b6 c0             	movzbl %al,%eax
  40d2c0:	48 85 c0             	test   %rax,%rax
  40d2c3:	0f 95 c0             	setne  %al
  40d2c6:	84 c0                	test   %al,%al
	if (__count == dynamic_extent)
  40d2c8:	48 83 7d c8 ff       	cmpq   $0xffffffffffffffff,-0x38(%rbp)
  40d2cd:	75 16                	jne    40d2e5 <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x59>
	  __count = this->size() - __offset;
  40d2cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d2d3:	48 89 c7             	mov    %rax,%rdi
  40d2d6:	e8 59 82 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d2db:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  40d2df:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40d2e3:	eb 59                	jmp    40d33e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0xb2>
  40d2e5:	b8 00 00 00 00       	mov    $0x0,%eax
	else
	  {
	    __glibcxx_assert(__count <= size());
  40d2ea:	84 c0                	test   %al,%al
  40d2ec:	74 1e                	je     40d30c <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0x80>
  40d2ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d2f2:	48 89 c7             	mov    %rax,%rdi
  40d2f5:	e8 3a 82 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d2fa:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40d2fe:	0f 92 c0             	setb   %al
  40d301:	0f b6 c0             	movzbl %al,%eax
  40d304:	48 85 c0             	test   %rax,%rax
  40d307:	0f 95 c0             	setne  %al
  40d30a:	84 c0                	test   %al,%al
  40d30c:	b8 00 00 00 00       	mov    $0x0,%eax
	    __glibcxx_assert(__offset + __count <= size());
  40d311:	84 c0                	test   %al,%al
  40d313:	74 29                	je     40d33e <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm+0xb2>
  40d315:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d319:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d31d:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  40d321:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d325:	48 89 c7             	mov    %rax,%rdi
  40d328:	e8 07 82 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40d32d:	48 39 d8             	cmp    %rbx,%rax
  40d330:	0f 92 c0             	setb   %al
  40d333:	0f b6 c0             	movzbl %al,%eax
  40d336:	48 85 c0             	test   %rax,%rax
  40d339:	0f 95 c0             	setne  %al
  40d33c:	84 c0                	test   %al,%al
	  }
	return {this->data() + __offset, __count};
  40d33e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d342:	48 89 c7             	mov    %rax,%rdi
  40d345:	e8 d8 81 ff ff       	call   405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  40d34a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d34e:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  40d352:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d356:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40d35a:	48 89 ce             	mov    %rcx,%rsi
  40d35d:	48 89 c7             	mov    %rax,%rdi
  40d360:	e8 15 e3 ff ff       	call   40b67a <_ZNSt4spanIcLm18446744073709551615EEC1IPcEET_m>
  40d365:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d369:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
      }
  40d36d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d371:	c9                   	leave
  40d372:	c3                   	ret
  40d373:	90                   	nop

000000000040d374 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
  40d374:	55                   	push   %rbp
  40d375:	48 89 e5             	mov    %rsp,%rbp
  40d378:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d37c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_current += __n; return *this; }
  40d380:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d384:	48 8b 10             	mov    (%rax),%rdx
  40d387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d38b:	48 01 c2             	add    %rax,%rdx
  40d38e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d392:	48 89 10             	mov    %rdx,(%rax)
  40d395:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d399:	5d                   	pop    %rbp
  40d39a:	c3                   	ret

000000000040d39b <_ZNSt8__format10_Arg_storeISt20basic_format_contextINS_10_Sink_iterIcEEcEJPKcEE11_S_make_eltIA4_S5_EENS_10_Arg_valueIS4_EERT_>:
	_S_make_elt(_Tp& __v)
  40d39b:	55                   	push   %rbp
  40d39c:	48 89 e5             	mov    %rsp,%rbp
  40d39f:	48 83 ec 50          	sub    $0x50,%rsp
  40d3a3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	  basic_format_arg<_Context> __arg(__v);
  40d3a7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d3ab:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d3af:	48 89 d6             	mov    %rdx,%rsi
  40d3b2:	48 89 c7             	mov    %rax,%rdi
  40d3b5:	e8 fe 01 00 00       	call   40d5b8 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IA4_KcEERT_>
	    return __arg._M_val;
  40d3ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d3be:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d3c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40d3c6:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40d3ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d3ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
	}
  40d3d2:	c9                   	leave
  40d3d3:	c3                   	ret

000000000040d3d4 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE6_GuardIS2_ED1Ev>:
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
  40d3d4:	55                   	push   %rbp
  40d3d5:	48 89 e5             	mov    %rsp,%rbp
  40d3d8:	53                   	push   %rbx
  40d3d9:	48 83 ec 18          	sub    $0x18,%rsp
  40d3dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d3e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3e5:	48 83 c0 08          	add    $0x8,%rax
  40d3e9:	48 89 c7             	mov    %rax,%rdi
  40d3ec:	e8 c5 ea ff ff       	call   40beb6 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
  40d3f1:	48 8b 18             	mov    (%rax),%rbx
  40d3f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d3f8:	48 8b 00             	mov    (%rax),%rax
  40d3fb:	48 89 c7             	mov    %rax,%rdi
  40d3fe:	e8 b5 d7 ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  40d403:	48 89 18             	mov    %rbx,(%rax)
  40d406:	90                   	nop
  40d407:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d40b:	c9                   	leave
  40d40c:	c3                   	ret
  40d40d:	90                   	nop

000000000040d40e <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv>:
      _S_error()
  40d40e:	55                   	push   %rbp
  40d40f:	48 89 e5             	mov    %rsp,%rbp
  40d412:	48 83 ec 20          	sub    $0x20,%rsp
  40d416:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char32_t __c = _ErrorHandler()();
  40d41a:	48 8d 45 fb          	lea    -0x5(%rbp),%rax
  40d41e:	48 89 c7             	mov    %rax,%rdi
  40d421:	e8 e0 79 ff ff       	call   404e06 <_ZNKSt9__unicode5_ReplclEv>
  40d426:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40d429:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__is_scalar_value(__c));
  40d42e:	84 c0                	test   %al,%al
  40d430:	74 18                	je     40d44a <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE8_S_errorEv+0x3c>
  40d432:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d435:	89 c7                	mov    %eax,%edi
  40d437:	e8 91 79 ff ff       	call   404dcd <_ZNSt9__unicode17__is_scalar_valueEDi>
  40d43c:	83 f0 01             	xor    $0x1,%eax
  40d43f:	0f b6 c0             	movzbl %al,%eax
  40d442:	48 85 c0             	test   %rax,%rax
  40d445:	0f 95 c0             	setne  %al
  40d448:	84 c0                	test   %al,%al
	return __c;
  40d44a:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
  40d44d:	c9                   	leave
  40d44e:	c3                   	ret
  40d44f:	90                   	nop

000000000040d450 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE9_M_updateEDih>:
      _M_update(char32_t __c, uint8_t __to_incr)
  40d450:	55                   	push   %rbp
  40d451:	48 89 e5             	mov    %rsp,%rbp
  40d454:	53                   	push   %rbx
  40d455:	48 83 ec 18          	sub    $0x18,%rsp
  40d459:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d45d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  40d460:	89 d0                	mov    %edx,%eax
  40d462:	88 45 e0             	mov    %al,-0x20(%rbp)
	_M_to_increment = __to_incr;
  40d465:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d469:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
  40d46d:	88 50 1a             	mov    %dl,0x1a(%rax)
	_M_buf_index = 0;
  40d470:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d474:	c6 40 18 00          	movb   $0x0,0x18(%rax)
	    _M_buf[0] = __c;
  40d478:	8b 5d e4             	mov    -0x1c(%rbp),%ebx
  40d47b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d47f:	be 00 00 00 00       	mov    $0x0,%esi
  40d484:	48 89 c7             	mov    %rax,%rdi
  40d487:	e8 5c 01 00 00       	call   40d5e8 <_ZNSt5arrayIDiLm1EEixEm>
  40d48c:	89 18                	mov    %ebx,(%rax)
	    _M_buf_last = 1;
  40d48e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d492:	c6 40 19 01          	movb   $0x1,0x19(%rax)
      }
  40d496:	90                   	nop
  40d497:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d49b:	c9                   	leave
  40d49c:	c3                   	ret

000000000040d49d <_ZSt9__advanceIPKclEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
  40d49d:	55                   	push   %rbp
  40d49e:	48 89 e5             	mov    %rsp,%rbp
  40d4a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d4a5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__i += __n;
  40d4a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d4ad:	48 8b 10             	mov    (%rax),%rdx
  40d4b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d4b4:	48 01 c2             	add    %rax,%rdx
  40d4b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d4bb:	48 89 10             	mov    %rdx,(%rax)
    }
  40d4be:	90                   	nop
  40d4bf:	5d                   	pop    %rbp
  40d4c0:	c3                   	ret
  40d4c1:	90                   	nop

000000000040d4c2 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IiEERT_>:
	basic_format_arg(_Tp& __v) noexcept
  40d4c2:	55                   	push   %rbp
  40d4c3:	48 89 e5             	mov    %rsp,%rbp
  40d4c6:	48 83 ec 20          	sub    $0x20,%rsp
  40d4ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d4ce:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
  40d4d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d4d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      _Arg_value() : _M_none() { }
  40d4da:	90                   	nop
	    _M_set(static_cast<_Td>(__v));
  40d4db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d4df:	8b 10                	mov    (%rax),%edx
  40d4e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d4e5:	89 d6                	mov    %edx,%esi
  40d4e7:	48 89 c7             	mov    %rax,%rdi
  40d4ea:	e8 69 01 00 00       	call   40d658 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIiEEvT_>
	}
  40d4ef:	90                   	nop
  40d4f0:	c9                   	leave
  40d4f1:	c3                   	ret

000000000040d4f2 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_>:
	basic_format_arg(_Tp& __v) noexcept
  40d4f2:	55                   	push   %rbp
  40d4f3:	48 89 e5             	mov    %rsp,%rbp
  40d4f6:	53                   	push   %rbx
  40d4f7:	48 83 ec 38          	sub    $0x38,%rsp
  40d4fb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d4ff:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	{
  40d503:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d507:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Arg_value() : _M_none() { }
  40d50b:	90                   	nop
	    _M_set(_Td{__v.data(), __v.size()});
  40d50c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d510:	48 89 c7             	mov    %rax,%rdi
  40d513:	e8 24 d3 ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  40d518:	48 89 c3             	mov    %rax,%rbx
  40d51b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d51f:	48 89 c7             	mov    %rax,%rdi
  40d522:	e8 69 78 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40d527:	48 89 c2             	mov    %rax,%rdx
  40d52a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40d52e:	48 89 de             	mov    %rbx,%rsi
  40d531:	48 89 c7             	mov    %rax,%rdi
  40d534:	e8 b3 9f ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40d539:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40d53d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40d541:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d545:	48 89 ce             	mov    %rcx,%rsi
  40d548:	48 89 c7             	mov    %rax,%rdi
  40d54b:	e8 3e 01 00 00       	call   40d68e <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setISt17basic_string_viewIcSt11char_traitsIcEEEEvT_>
	}
  40d550:	90                   	nop
  40d551:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d555:	c9                   	leave
  40d556:	c3                   	ret
  40d557:	90                   	nop

000000000040d558 <_ZNSt15__new_allocatorIcE10deallocateEPcm>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
  40d558:	55                   	push   %rbp
  40d559:	48 89 e5             	mov    %rsp,%rbp
  40d55c:	48 83 ec 20          	sub    $0x20,%rsp
  40d560:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d564:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d568:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  40d56c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d570:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d574:	48 89 d6             	mov    %rdx,%rsi
  40d577:	48 89 c7             	mov    %rax,%rdi
  40d57a:	e8 11 6d ff ff       	call   404290 <_ZdlPvm@plt>
      }
  40d57f:	c9                   	leave
  40d580:	c3                   	ret
  40d581:	90                   	nop

000000000040d582 <_ZNKSt4lessIPKcEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
  40d582:	55                   	push   %rbp
  40d583:	48 89 e5             	mov    %rsp,%rbp
  40d586:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d58a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d58e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40d592:	b8 00 00 00 00       	mov    $0x0,%eax
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
  40d597:	84 c0                	test   %al,%al
  40d599:	74 0d                	je     40d5a8 <_ZNKSt4lessIPKcEclES1_S1_+0x26>
	  return __x < __y;
  40d59b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d59f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  40d5a3:	0f 92 c0             	setb   %al
  40d5a6:	eb 0e                	jmp    40d5b6 <_ZNKSt4lessIPKcEclES1_S1_+0x34>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
  40d5a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d5ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d5b0:	48 39 c2             	cmp    %rax,%rdx
  40d5b3:	0f 92 c0             	setb   %al
      }
  40d5b6:	5d                   	pop    %rbp
  40d5b7:	c3                   	ret

000000000040d5b8 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEEC1IA4_KcEERT_>:
	basic_format_arg(_Tp& __v) noexcept
  40d5b8:	55                   	push   %rbp
  40d5b9:	48 89 e5             	mov    %rsp,%rbp
  40d5bc:	48 83 ec 20          	sub    $0x20,%rsp
  40d5c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d5c4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
  40d5c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d5cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      _Arg_value() : _M_none() { }
  40d5d0:	90                   	nop
	    _M_set(static_cast<_Td>(__v));
  40d5d1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40d5d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d5d9:	48 89 d6             	mov    %rdx,%rsi
  40d5dc:	48 89 c7             	mov    %rax,%rdi
  40d5df:	e8 0a 01 00 00       	call   40d6ee <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIPKcEEvT_>
	}
  40d5e4:	90                   	nop
  40d5e5:	c9                   	leave
  40d5e6:	c3                   	ret
  40d5e7:	90                   	nop

000000000040d5e8 <_ZNSt5arrayIDiLm1EEixEm>:
      operator[](size_type __n) noexcept
  40d5e8:	55                   	push   %rbp
  40d5e9:	48 89 e5             	mov    %rsp,%rbp
  40d5ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d5f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  40d5f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d5f8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40d5ff:	00
  40d600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d604:	48 01 d0             	add    %rdx,%rax
      }
  40d607:	5d                   	pop    %rbp
  40d608:	c3                   	ret
  40d609:	90                   	nop

000000000040d60a <_ZNSt15__new_allocatorIcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
  40d60a:	55                   	push   %rbp
  40d60b:	48 89 e5             	mov    %rsp,%rbp
  40d60e:	48 83 ec 30          	sub    $0x30,%rsp
  40d612:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d616:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40d61a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40d61e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d622:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
  40d626:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  40d62d:	ff ff 7f
	if (__builtin_expect(__n > this->_M_max_size(), false))
  40d630:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  40d634:	0f 92 c0             	setb   %al
  40d637:	0f b6 c0             	movzbl %al,%eax
  40d63a:	48 85 c0             	test   %rax,%rax
  40d63d:	0f 95 c0             	setne  %al
  40d640:	84 c0                	test   %al,%al
  40d642:	74 05                	je     40d649 <_ZNSt15__new_allocatorIcE8allocateEmPKv+0x3f>
	    std::__throw_bad_alloc();
  40d644:	e8 47 6a ff ff       	call   404090 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  40d649:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d64d:	48 89 c7             	mov    %rax,%rdi
  40d650:	e8 1b 6c ff ff       	call   404270 <_Znwm@plt>
  40d655:	90                   	nop
      }
  40d656:	c9                   	leave
  40d657:	c3                   	ret

000000000040d658 <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIiEEvT_>:
	_M_set(_Tp __v) noexcept
  40d658:	55                   	push   %rbp
  40d659:	48 89 e5             	mov    %rsp,%rbp
  40d65c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d660:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	  _M_type = _S_to_enum<_Tp>();
  40d663:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d667:	c6 40 10 03          	movb   $0x3,0x10(%rax)
	  _M_val._M_set(__v);
  40d66b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d66f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d673:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40d676:	89 45 f4             	mov    %eax,-0xc(%rbp)
	    _S_get<_Tp>(*this) = __v;
  40d679:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40d67c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d680:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    return __u._M_i;
  40d684:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	    _S_get<_Tp>(*this) = __v;
  40d688:	89 10                	mov    %edx,(%rax)
	}
  40d68a:	90                   	nop
	}
  40d68b:	90                   	nop
  40d68c:	5d                   	pop    %rbp
  40d68d:	c3                   	ret

000000000040d68e <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setISt17basic_string_viewIcSt11char_traitsIcEEEEvT_>:
	_M_set(_Tp __v) noexcept
  40d68e:	55                   	push   %rbp
  40d68f:	48 89 e5             	mov    %rsp,%rbp
  40d692:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d696:	48 89 f0             	mov    %rsi,%rax
  40d699:	48 89 d1             	mov    %rdx,%rcx
  40d69c:	48 89 c0             	mov    %rax,%rax
  40d69f:	ba 00 00 00 00       	mov    $0x0,%edx
  40d6a4:	48 89 ca             	mov    %rcx,%rdx
  40d6a7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40d6ab:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  _M_type = _S_to_enum<_Tp>();
  40d6af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d6b3:	c6 40 10 0b          	movb   $0xb,0x10(%rax)
	  _M_val._M_set(__v);
  40d6b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d6bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d6bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d6c3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40d6c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d6cb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40d6cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d6d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	    return __u._M_sv;
  40d6d7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
	    _S_get<_Tp>(*this) = __v;
  40d6db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d6df:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d6e3:	48 89 01             	mov    %rax,(%rcx)
  40d6e6:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	}
  40d6ea:	90                   	nop
	}
  40d6eb:	90                   	nop
  40d6ec:	5d                   	pop    %rbp
  40d6ed:	c3                   	ret

000000000040d6ee <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE6_M_setIPKcEEvT_>:
	_M_set(_Tp __v) noexcept
  40d6ee:	55                   	push   %rbp
  40d6ef:	48 89 e5             	mov    %rsp,%rbp
  40d6f2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d6f6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  _M_type = _S_to_enum<_Tp>();
  40d6fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d6fe:	c6 40 10 0a          	movb   $0xa,0x10(%rax)
	  _M_val._M_set(__v);
  40d702:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d706:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d70a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d70e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	    _S_get<_Tp>(*this) = __v;
  40d712:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d716:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d71a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    return __u._M_str;
  40d71e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	    _S_get<_Tp>(*this) = __v;
  40d722:	48 89 10             	mov    %rdx,(%rax)
	}
  40d725:	90                   	nop
	}
  40d726:	90                   	nop
  40d727:	5d                   	pop    %rbp
  40d728:	c3                   	ret
  40d729:	90                   	nop

000000000040d72a <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE11_M_on_charsEPKc>:
      _M_on_chars(iterator __last) override
  40d72a:	55                   	push   %rbp
  40d72b:	48 89 e5             	mov    %rsp,%rbp
  40d72e:	53                   	push   %rbx
  40d72f:	48 83 ec 28          	sub    $0x28,%rsp
  40d733:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d737:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	basic_string_view<_CharT> __str(this->begin(), __last);
  40d73b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d73f:	48 89 c7             	mov    %rax,%rdi
  40d742:	e8 59 8a ff ff       	call   4061a0 <_ZNKSt8__format8_ScannerIcE5beginEv>
  40d747:	48 89 c1             	mov    %rax,%rcx
  40d74a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40d74e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40d752:	48 89 ce             	mov    %rcx,%rsi
  40d755:	48 89 c7             	mov    %rax,%rdi
  40d758:	e8 a3 8a ff ff       	call   406200 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
	_M_fc.advance_to(__format::__write(_M_fc.out(), __str));
  40d75d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d761:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d765:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d769:	48 8b 40 30          	mov    0x30(%rax),%rax
  40d76d:	48 89 c7             	mov    %rax,%rdi
  40d770:	e8 91 e2 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40d775:	48 89 c1             	mov    %rax,%rcx
  40d778:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40d77c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d780:	48 89 d6             	mov    %rdx,%rsi
  40d783:	48 89 c2             	mov    %rax,%rdx
  40d786:	48 89 cf             	mov    %rcx,%rdi
  40d789:	e8 d2 10 00 00       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  40d78e:	48 89 c6             	mov    %rax,%rsi
  40d791:	48 89 df             	mov    %rbx,%rdi
  40d794:	e8 31 11 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
      }
  40d799:	90                   	nop
  40d79a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d79e:	c9                   	leave
  40d79f:	c3                   	ret

000000000040d7a0 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt9monostateEEDaS5_>:
	std::visit_format_arg([this](auto& __arg) {
  40d7a0:	55                   	push   %rbp
  40d7a1:	48 89 e5             	mov    %rsp,%rbp
  40d7a4:	48 83 ec 10          	sub    $0x10,%rsp
  40d7a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d7ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    __format::__invalid_arg_id_in_format_string();
  40d7b0:	e8 61 7a ff ff       	call   405216 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
  40d7b5:	90                   	nop

000000000040d7b6 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIbEEDaS5_>:
	std::visit_format_arg([this](auto& __arg) {
  40d7b6:	55                   	push   %rbp
  40d7b7:	48 89 e5             	mov    %rsp,%rbp
  40d7ba:	53                   	push   %rbx
  40d7bb:	48 83 ec 38          	sub    $0x38,%rsp
  40d7bf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d7c3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d7c7:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d7ce:	00
  40d7cf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d7d6:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d7dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d7e1:	48 8b 00             	mov    (%rax),%rax
  40d7e4:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d7e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d7ec:	48 8b 00             	mov    (%rax),%rax
  40d7ef:	48 83 c0 08          	add    $0x8,%rax
  40d7f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d7f7:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d7fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d7ff:	48 89 d6             	mov    %rdx,%rsi
  40d802:	48 89 c7             	mov    %rax,%rdi
  40d805:	e8 22 19 00 00       	call   40f12c <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE>
  40d80a:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d80b:	48 89 c6             	mov    %rax,%rsi
  40d80e:	48 89 df             	mov    %rbx,%rdi
  40d811:	e8 40 8b ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d816:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d81a:	48 8b 00             	mov    (%rax),%rax
  40d81d:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d821:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d825:	48 8b 00             	mov    (%rax),%rax
  40d828:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d82c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d830:	0f b6 00             	movzbl (%rax),%eax
  40d833:	0f b6 c8             	movzbl %al,%ecx
  40d836:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d83a:	89 ce                	mov    %ecx,%esi
  40d83c:	48 89 c7             	mov    %rax,%rdi
  40d83f:	e8 9e 11 00 00       	call   40e9e2 <_ZNKSt9formatterIbcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>
  40d844:	48 89 c6             	mov    %rax,%rsi
  40d847:	48 89 df             	mov    %rbx,%rdi
  40d84a:	e8 7b 10 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d84f:	90                   	nop
  40d850:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d854:	c9                   	leave
  40d855:	c3                   	ret

000000000040d856 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIcEEDaS5_>:
  40d856:	55                   	push   %rbp
  40d857:	48 89 e5             	mov    %rsp,%rbp
  40d85a:	53                   	push   %rbx
  40d85b:	48 83 ec 28          	sub    $0x28,%rsp
  40d85f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d863:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	      _Formatter __f;
  40d867:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  40d86e:	00
  40d86f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40d876:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d87d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d881:	48 8b 00             	mov    (%rax),%rax
  40d884:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d888:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d88c:	48 8b 00             	mov    (%rax),%rax
  40d88f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40d893:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40d897:	48 89 d6             	mov    %rdx,%rsi
  40d89a:	48 89 c7             	mov    %rax,%rdi
  40d89d:	e8 6e 11 00 00       	call   40ea10 <_ZNSt9formatterIccE5parseERSt26basic_format_parse_contextIcE>
  40d8a2:	48 89 c6             	mov    %rax,%rsi
  40d8a5:	48 89 df             	mov    %rbx,%rdi
  40d8a8:	e8 a9 8a ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d8ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d8b1:	48 8b 00             	mov    (%rax),%rax
  40d8b4:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d8b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d8bc:	48 8b 00             	mov    (%rax),%rax
  40d8bf:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d8c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d8c7:	0f b6 00             	movzbl (%rax),%eax
  40d8ca:	0f be c8             	movsbl %al,%ecx
  40d8cd:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40d8d1:	89 ce                	mov    %ecx,%esi
  40d8d3:	48 89 c7             	mov    %rax,%rdi
  40d8d6:	e8 5b 11 00 00       	call   40ea36 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40d8db:	48 89 c6             	mov    %rax,%rsi
  40d8de:	48 89 df             	mov    %rbx,%rdi
  40d8e1:	e8 e4 0f 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d8e6:	90                   	nop
  40d8e7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d8eb:	c9                   	leave
  40d8ec:	c3                   	ret
  40d8ed:	90                   	nop

000000000040d8ee <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIiEEDaS5_>:
  40d8ee:	55                   	push   %rbp
  40d8ef:	48 89 e5             	mov    %rsp,%rbp
  40d8f2:	53                   	push   %rbx
  40d8f3:	48 83 ec 38          	sub    $0x38,%rsp
  40d8f7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d8fb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d8ff:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d906:	00
  40d907:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d90e:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d915:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d919:	48 8b 00             	mov    (%rax),%rax
  40d91c:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d920:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d924:	48 8b 00             	mov    (%rax),%rax
  40d927:	48 83 c0 08          	add    $0x8,%rax
  40d92b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d92f:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d933:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d937:	48 89 d6             	mov    %rdx,%rsi
  40d93a:	48 89 c7             	mov    %rax,%rdi
  40d93d:	e8 ee 8f ff ff       	call   406930 <_ZNSt8__format15__formatter_intIcE8_M_parseIiEEPKcRSt26basic_format_parse_contextIcE>
  40d942:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d943:	48 89 c6             	mov    %rax,%rsi
  40d946:	48 89 df             	mov    %rbx,%rdi
  40d949:	e8 08 8a ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d94e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d952:	48 8b 00             	mov    (%rax),%rax
  40d955:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d959:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d95d:	48 8b 00             	mov    (%rax),%rax
  40d960:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40d964:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d968:	8b 08                	mov    (%rax),%ecx
  40d96a:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d96e:	89 ce                	mov    %ecx,%esi
  40d970:	48 89 c7             	mov    %rax,%rdi
  40d973:	e8 42 11 00 00       	call   40eaba <_ZNKSt9formatterIicE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEiRS7_>
  40d978:	48 89 c6             	mov    %rax,%rsi
  40d97b:	48 89 df             	mov    %rbx,%rdi
  40d97e:	e8 47 0f 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40d983:	90                   	nop
  40d984:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40d988:	c9                   	leave
  40d989:	c3                   	ret

000000000040d98a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIjEEDaS5_>:
  40d98a:	55                   	push   %rbp
  40d98b:	48 89 e5             	mov    %rsp,%rbp
  40d98e:	53                   	push   %rbx
  40d98f:	48 83 ec 38          	sub    $0x38,%rsp
  40d993:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40d997:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40d99b:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40d9a2:	00
  40d9a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40d9aa:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d9b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9b5:	48 8b 00             	mov    (%rax),%rax
  40d9b8:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40d9bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9c0:	48 8b 00             	mov    (%rax),%rax
  40d9c3:	48 83 c0 08          	add    $0x8,%rax
  40d9c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40d9cb:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40d9cf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40d9d3:	48 89 d6             	mov    %rdx,%rsi
  40d9d6:	48 89 c7             	mov    %rax,%rdi
  40d9d9:	e8 16 22 00 00       	call   40fbf4 <_ZNSt8__format15__formatter_intIcE8_M_parseIjEEPKcRSt26basic_format_parse_contextIcE>
  40d9de:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40d9df:	48 89 c6             	mov    %rax,%rsi
  40d9e2:	48 89 df             	mov    %rbx,%rdi
  40d9e5:	e8 6c 89 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40d9ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9ee:	48 8b 00             	mov    (%rax),%rax
  40d9f1:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40d9f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9f9:	48 8b 00             	mov    (%rax),%rax
  40d9fc:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40da00:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40da04:	8b 08                	mov    (%rax),%ecx
  40da06:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40da0a:	89 ce                	mov    %ecx,%esi
  40da0c:	48 89 c7             	mov    %rax,%rdi
  40da0f:	e8 d0 10 00 00       	call   40eae4 <_ZNKSt9formatterIjcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEjRS7_>
  40da14:	48 89 c6             	mov    %rax,%rsi
  40da17:	48 89 df             	mov    %rbx,%rdi
  40da1a:	e8 ab 0e 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40da1f:	90                   	nop
  40da20:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40da24:	c9                   	leave
  40da25:	c3                   	ret

000000000040da26 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIxEEDaS5_>:
  40da26:	55                   	push   %rbp
  40da27:	48 89 e5             	mov    %rsp,%rbp
  40da2a:	53                   	push   %rbx
  40da2b:	48 83 ec 38          	sub    $0x38,%rsp
  40da2f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40da33:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40da37:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40da3e:	00
  40da3f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40da46:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40da4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da51:	48 8b 00             	mov    (%rax),%rax
  40da54:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40da58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da5c:	48 8b 00             	mov    (%rax),%rax
  40da5f:	48 83 c0 08          	add    $0x8,%rax
  40da63:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40da67:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40da6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40da6f:	48 89 d6             	mov    %rdx,%rsi
  40da72:	48 89 c7             	mov    %rax,%rdi
  40da75:	e8 5e 25 00 00       	call   40ffd8 <_ZNSt8__format15__formatter_intIcE8_M_parseIxEEPKcRSt26basic_format_parse_contextIcE>
  40da7a:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40da7b:	48 89 c6             	mov    %rax,%rsi
  40da7e:	48 89 df             	mov    %rbx,%rdi
  40da81:	e8 d0 88 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40da86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da8a:	48 8b 00             	mov    (%rax),%rax
  40da8d:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40da91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da95:	48 8b 00             	mov    (%rax),%rax
  40da98:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40da9c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40daa0:	48 8b 08             	mov    (%rax),%rcx
  40daa3:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40daa7:	48 89 ce             	mov    %rcx,%rsi
  40daaa:	48 89 c7             	mov    %rax,%rdi
  40daad:	e8 5c 10 00 00       	call   40eb0e <_ZNKSt9formatterIxcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorExRS7_>
  40dab2:	48 89 c6             	mov    %rax,%rsi
  40dab5:	48 89 df             	mov    %rbx,%rdi
  40dab8:	e8 0d 0e 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dabd:	90                   	nop
  40dabe:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dac2:	c9                   	leave
  40dac3:	c3                   	ret

000000000040dac4 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIyEEDaS5_>:
  40dac4:	55                   	push   %rbp
  40dac5:	48 89 e5             	mov    %rsp,%rbp
  40dac8:	53                   	push   %rbx
  40dac9:	48 83 ec 38          	sub    $0x38,%rsp
  40dacd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dad1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40dad5:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dadc:	00
  40dadd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dae4:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40daeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40daef:	48 8b 00             	mov    (%rax),%rax
  40daf2:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40daf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dafa:	48 8b 00             	mov    (%rax),%rax
  40dafd:	48 83 c0 08          	add    $0x8,%rax
  40db01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40db05:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40db09:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40db0d:	48 89 d6             	mov    %rdx,%rsi
  40db10:	48 89 c7             	mov    %rax,%rdi
  40db13:	e8 ce 28 00 00       	call   4103e6 <_ZNSt8__format15__formatter_intIcE8_M_parseIyEEPKcRSt26basic_format_parse_contextIcE>
  40db18:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40db19:	48 89 c6             	mov    %rax,%rsi
  40db1c:	48 89 df             	mov    %rbx,%rdi
  40db1f:	e8 32 88 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40db24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db28:	48 8b 00             	mov    (%rax),%rax
  40db2b:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40db2f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db33:	48 8b 00             	mov    (%rax),%rax
  40db36:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40db3a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40db3e:	48 8b 08             	mov    (%rax),%rcx
  40db41:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40db45:	48 89 ce             	mov    %rcx,%rsi
  40db48:	48 89 c7             	mov    %rax,%rdi
  40db4b:	e8 ec 0f 00 00       	call   40eb3c <_ZNKSt9formatterIycE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEyRS7_>
  40db50:	48 89 c6             	mov    %rax,%rsi
  40db53:	48 89 df             	mov    %rbx,%rdi
  40db56:	e8 6f 0d 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40db5b:	90                   	nop
  40db5c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40db60:	c9                   	leave
  40db61:	c3                   	ret

000000000040db62 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIfEEDaS5_>:
  40db62:	55                   	push   %rbp
  40db63:	48 89 e5             	mov    %rsp,%rbp
  40db66:	53                   	push   %rbx
  40db67:	48 83 ec 38          	sub    $0x38,%rsp
  40db6b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40db6f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40db73:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40db7a:	00
  40db7b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40db82:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40db89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db8d:	48 8b 00             	mov    (%rax),%rax
  40db90:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40db94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db98:	48 8b 00             	mov    (%rax),%rax
  40db9b:	48 83 c0 08          	add    $0x8,%rax
  40db9f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dba3:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dba7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dbab:	48 89 d6             	mov    %rdx,%rsi
  40dbae:	48 89 c7             	mov    %rax,%rdi
  40dbb1:	e8 a0 2c 00 00       	call   410856 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40dbb6:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dbb7:	48 89 c6             	mov    %rax,%rsi
  40dbba:	48 89 df             	mov    %rbx,%rdi
  40dbbd:	e8 94 87 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dbc2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbc6:	48 8b 00             	mov    (%rax),%rax
  40dbc9:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dbcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbd1:	48 8b 00             	mov    (%rax),%rax
  40dbd4:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40dbd8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dbdc:	8b 10                	mov    (%rax),%edx
  40dbde:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dbe2:	48 89 ce             	mov    %rcx,%rsi
  40dbe5:	66 0f 6e c2          	movd   %edx,%xmm0
  40dbe9:	48 89 c7             	mov    %rax,%rdi
  40dbec:	e8 79 0f 00 00       	call   40eb6a <_ZNKSt9formatterIfcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEfRS7_>
  40dbf1:	48 89 c6             	mov    %rax,%rsi
  40dbf4:	48 89 df             	mov    %rbx,%rdi
  40dbf7:	e8 ce 0c 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dbfc:	90                   	nop
  40dbfd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dc01:	c9                   	leave
  40dc02:	c3                   	ret
  40dc03:	90                   	nop

000000000040dc04 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIdEEDaS5_>:
  40dc04:	55                   	push   %rbp
  40dc05:	48 89 e5             	mov    %rsp,%rbp
  40dc08:	53                   	push   %rbx
  40dc09:	48 83 ec 38          	sub    $0x38,%rsp
  40dc0d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dc11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40dc15:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dc1c:	00
  40dc1d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dc24:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dc2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc2f:	48 8b 00             	mov    (%rax),%rax
  40dc32:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dc36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc3a:	48 8b 00             	mov    (%rax),%rax
  40dc3d:	48 83 c0 08          	add    $0x8,%rax
  40dc41:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dc45:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dc49:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dc4d:	48 89 d6             	mov    %rdx,%rsi
  40dc50:	48 89 c7             	mov    %rax,%rdi
  40dc53:	e8 fe 2b 00 00       	call   410856 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40dc58:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dc59:	48 89 c6             	mov    %rax,%rsi
  40dc5c:	48 89 df             	mov    %rbx,%rdi
  40dc5f:	e8 f2 86 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dc64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc68:	48 8b 00             	mov    (%rax),%rax
  40dc6b:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dc6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dc73:	48 8b 00             	mov    (%rax),%rax
  40dc76:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40dc7a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dc7e:	48 8b 10             	mov    (%rax),%rdx
  40dc81:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dc85:	48 89 ce             	mov    %rcx,%rsi
  40dc88:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  40dc8d:	48 89 c7             	mov    %rax,%rdi
  40dc90:	e8 07 0f 00 00       	call   40eb9c <_ZNKSt9formatterIdcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEdRS7_>
  40dc95:	48 89 c6             	mov    %rax,%rsi
  40dc98:	48 89 df             	mov    %rbx,%rdi
  40dc9b:	e8 2a 0c 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dca0:	90                   	nop
  40dca1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dca5:	c9                   	leave
  40dca6:	c3                   	ret
  40dca7:	90                   	nop

000000000040dca8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIeEEDaS5_>:
  40dca8:	55                   	push   %rbp
  40dca9:	48 89 e5             	mov    %rsp,%rbp
  40dcac:	53                   	push   %rbx
  40dcad:	48 83 ec 38          	sub    $0x38,%rsp
  40dcb1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dcb5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40dcb9:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dcc0:	00
  40dcc1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dcc8:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dccf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dcd3:	48 8b 00             	mov    (%rax),%rax
  40dcd6:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dcda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dcde:	48 8b 00             	mov    (%rax),%rax
  40dce1:	48 83 c0 08          	add    $0x8,%rax
  40dce5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dce9:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dced:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dcf1:	48 89 d6             	mov    %rdx,%rsi
  40dcf4:	48 89 c7             	mov    %rax,%rdi
  40dcf7:	e8 5a 2b 00 00       	call   410856 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40dcfc:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dcfd:	48 89 c6             	mov    %rax,%rsi
  40dd00:	48 89 df             	mov    %rbx,%rdi
  40dd03:	e8 4e 86 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dd08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dd0c:	48 8b 00             	mov    (%rax),%rax
  40dd0f:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dd13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dd17:	48 8b 00             	mov    (%rax),%rax
  40dd1a:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40dd1e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40dd22:	db 28                	fldt   (%rax)
  40dd24:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dd28:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  40dd2d:	db 3c 24             	fstpt  (%rsp)
  40dd30:	48 89 d6             	mov    %rdx,%rsi
  40dd33:	48 89 c7             	mov    %rax,%rdi
  40dd36:	e8 95 0e 00 00       	call   40ebd0 <_ZNKSt9formatterIecE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEeRS7_>
  40dd3b:	48 83 c4 10          	add    $0x10,%rsp
  40dd3f:	48 89 c6             	mov    %rax,%rsi
  40dd42:	48 89 df             	mov    %rbx,%rdi
  40dd45:	e8 80 0b 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dd4a:	90                   	nop
  40dd4b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40dd4f:	c9                   	leave
  40dd50:	c3                   	ret
  40dd51:	90                   	nop

000000000040dd52 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKcEEDaS5_>:
  40dd52:	55                   	push   %rbp
  40dd53:	48 89 e5             	mov    %rsp,%rbp
  40dd56:	53                   	push   %rbx
  40dd57:	48 83 ec 38          	sub    $0x38,%rsp
  40dd5b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40dd5f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40dd63:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dd6a:	00
  40dd6b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dd72:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dd79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dd7d:	48 8b 00             	mov    (%rax),%rax
  40dd80:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dd84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dd88:	48 8b 00             	mov    (%rax),%rax
  40dd8b:	48 83 c0 08          	add    $0x8,%rax
  40dd8f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40dd93:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dd97:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dd9b:	48 89 d6             	mov    %rdx,%rsi
  40dd9e:	48 89 c7             	mov    %rax,%rdi
  40dda1:	e8 5a 89 ff ff       	call   406700 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>
  40dda6:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dda7:	48 89 c6             	mov    %rax,%rsi
  40ddaa:	48 89 df             	mov    %rbx,%rdi
  40ddad:	e8 a4 85 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40ddb2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ddb6:	48 8b 00             	mov    (%rax),%rax
  40ddb9:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40ddbd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ddc1:	48 8b 00             	mov    (%rax),%rax
  40ddc4:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40ddc8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40ddcc:	48 8b 08             	mov    (%rax),%rcx
  40ddcf:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40ddd3:	48 89 ce             	mov    %rcx,%rsi
  40ddd6:	48 89 c7             	mov    %rax,%rdi
  40ddd9:	e8 22 0e 00 00       	call   40ec00 <_ZNKSt9formatterIPKccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>
  40ddde:	48 89 c6             	mov    %rax,%rsi
  40dde1:	48 89 df             	mov    %rbx,%rdi
  40dde4:	e8 e1 0a 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40dde9:	90                   	nop
  40ddea:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ddee:	c9                   	leave
  40ddef:	c3                   	ret

000000000040ddf0 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt17basic_string_viewIcSt11char_traitsIcEEEEDaS5_>:
  40ddf0:	55                   	push   %rbp
  40ddf1:	48 89 e5             	mov    %rsp,%rbp
  40ddf4:	53                   	push   %rbx
  40ddf5:	48 83 ec 38          	sub    $0x38,%rsp
  40ddf9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40ddfd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40de01:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40de08:	00
  40de09:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40de10:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40de17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40de1b:	48 8b 00             	mov    (%rax),%rax
  40de1e:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40de22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40de26:	48 8b 00             	mov    (%rax),%rax
  40de29:	48 83 c0 08          	add    $0x8,%rax
  40de2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40de31:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40de35:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40de39:	48 89 d6             	mov    %rdx,%rsi
  40de3c:	48 89 c7             	mov    %rax,%rdi
  40de3f:	e8 bc 88 ff ff       	call   406700 <_ZNSt8__format15__formatter_strIcE5parseERSt26basic_format_parse_contextIcE>
  40de44:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40de45:	48 89 c6             	mov    %rax,%rsi
  40de48:	48 89 df             	mov    %rbx,%rdi
  40de4b:	e8 06 85 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40de50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40de54:	48 8b 00             	mov    (%rax),%rax
  40de57:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40de5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40de5f:	48 8b 00             	mov    (%rax),%rax
  40de62:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40de66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40de6a:	48 8b 30             	mov    (%rax),%rsi
  40de6d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40de71:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40de75:	48 89 c7             	mov    %rax,%rdi
  40de78:	e8 cf 0d 00 00       	call   40ec4c <_ZNKSt9formatterISt17basic_string_viewIcSt11char_traitsIcEEcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES3_RSB_>
  40de7d:	48 89 c6             	mov    %rax,%rsi
  40de80:	48 89 df             	mov    %rbx,%rdi
  40de83:	e8 42 0a 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40de88:	90                   	nop
  40de89:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40de8d:	c9                   	leave
  40de8e:	c3                   	ret
  40de8f:	90                   	nop

000000000040de90 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKvEEDaS5_>:
  40de90:	55                   	push   %rbp
  40de91:	48 89 e5             	mov    %rsp,%rbp
  40de94:	53                   	push   %rbx
  40de95:	48 83 ec 28          	sub    $0x28,%rsp
  40de99:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40de9d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	      _Formatter __f;
  40dea1:	48 c7 45 e4 00 00 00 	movq   $0x0,-0x1c(%rbp)
  40dea8:	00
  40dea9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40deb0:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40deb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40debb:	48 8b 00             	mov    (%rax),%rax
  40debe:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dec2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dec6:	48 8b 00             	mov    (%rax),%rax
  40dec9:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40decd:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40ded1:	48 89 d6             	mov    %rdx,%rsi
  40ded4:	48 89 c7             	mov    %rax,%rdi
  40ded7:	e8 30 0e 00 00       	call   40ed0c <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE>
  40dedc:	48 89 c6             	mov    %rax,%rsi
  40dedf:	48 89 df             	mov    %rbx,%rdi
  40dee2:	e8 6f 84 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dee7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40deeb:	48 8b 00             	mov    (%rax),%rax
  40deee:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40def2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40def6:	48 8b 00             	mov    (%rax),%rax
  40def9:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40defd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40df01:	48 8b 08             	mov    (%rax),%rcx
  40df04:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  40df08:	48 89 ce             	mov    %rcx,%rsi
  40df0b:	48 89 c7             	mov    %rax,%rdi
  40df0e:	e8 31 0f 00 00       	call   40ee44 <_ZNKSt9formatterIPKvcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>
  40df13:	48 89 c6             	mov    %rax,%rsi
  40df16:	48 89 df             	mov    %rbx,%rdi
  40df19:	e8 ac 09 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40df1e:	90                   	nop
  40df1f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40df23:	c9                   	leave
  40df24:	c3                   	ret
  40df25:	90                   	nop

000000000040df26 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clINSt16basic_format_argISt20basic_format_contextIS2_cEE6handleEEEDaS5_>:
  40df26:	55                   	push   %rbp
  40df27:	48 89 e5             	mov    %rsp,%rbp
  40df2a:	48 83 ec 30          	sub    $0x30,%rsp
  40df2e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40df32:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	    __arg.format(this->_M_pc, this->_M_fc);
  40df36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40df3a:	48 8b 00             	mov    (%rax),%rax
  40df3d:	48 8b 40 30          	mov    0x30(%rax),%rax
  40df41:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40df45:	48 8b 12             	mov    (%rdx),%rdx
  40df48:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  40df4c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40df50:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  40df54:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  40df58:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  auto __f = reinterpret_cast<_Func>(this->_M_func);
  40df5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40df60:	48 8b 40 08          	mov    0x8(%rax),%rax
  40df64:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __f(__pc, __fc, this->_M_ptr);
  40df68:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
  40df6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40df70:	48 8b 10             	mov    (%rax),%rdx
  40df73:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40df77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40df7b:	48 89 ce             	mov    %rcx,%rsi
  40df7e:	48 89 c7             	mov    %rax,%rdi
  40df81:	41 ff d0             	call   *%r8
	}
  40df84:	90                   	nop
	std::visit_format_arg([this](auto& __arg) {
  40df85:	90                   	nop
  40df86:	c9                   	leave
  40df87:	c3                   	ret

000000000040df88 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clInEEDaS5_>:
  40df88:	55                   	push   %rbp
  40df89:	48 89 e5             	mov    %rsp,%rbp
  40df8c:	53                   	push   %rbx
  40df8d:	48 83 ec 38          	sub    $0x38,%rsp
  40df91:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40df95:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40df99:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40dfa0:	00
  40dfa1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40dfa8:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dfaf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dfb3:	48 8b 00             	mov    (%rax),%rax
  40dfb6:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40dfba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dfbe:	48 8b 00             	mov    (%rax),%rax
  40dfc1:	48 83 c0 08          	add    $0x8,%rax
  40dfc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40dfc9:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40dfcd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dfd1:	48 89 d6             	mov    %rdx,%rsi
  40dfd4:	48 89 c7             	mov    %rax,%rdi
  40dfd7:	e8 ce 54 00 00       	call   4134aa <_ZNSt8__format15__formatter_intIcE8_M_parseInEEPKcRSt26basic_format_parse_contextIcE>
  40dfdc:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40dfdd:	48 89 c6             	mov    %rax,%rsi
  40dfe0:	48 89 df             	mov    %rbx,%rdi
  40dfe3:	e8 6e 83 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40dfe8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dfec:	48 8b 00             	mov    (%rax),%rax
  40dfef:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40dff3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dff7:	48 8b 00             	mov    (%rax),%rax
  40dffa:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40dffe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40e002:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40e006:	48 8b 00             	mov    (%rax),%rax
  40e009:	48 89 c6             	mov    %rax,%rsi
  40e00c:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40e010:	48 89 c7             	mov    %rax,%rdi
  40e013:	e8 ec 0e 00 00       	call   40ef04 <_ZNKSt9formatterIncE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEnRS7_>
  40e018:	48 89 c6             	mov    %rax,%rsi
  40e01b:	48 89 df             	mov    %rbx,%rdi
  40e01e:	e8 a7 08 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40e023:	90                   	nop
  40e024:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e028:	c9                   	leave
  40e029:	c3                   	ret

000000000040e02a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIoEEDaS5_>:
  40e02a:	55                   	push   %rbp
  40e02b:	48 89 e5             	mov    %rsp,%rbp
  40e02e:	53                   	push   %rbx
  40e02f:	48 83 ec 38          	sub    $0x38,%rsp
  40e033:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40e037:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40e03b:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40e042:	00
  40e043:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40e04a:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40e051:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e055:	48 8b 00             	mov    (%rax),%rax
  40e058:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e05c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e060:	48 8b 00             	mov    (%rax),%rax
  40e063:	48 83 c0 08          	add    $0x8,%rax
  40e067:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return _M_f.template _M_parse<_Tp>(__pc);
  40e06b:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40e06f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e073:	48 89 d6             	mov    %rdx,%rsi
  40e076:	48 89 c7             	mov    %rax,%rdi
  40e079:	e8 a8 58 00 00       	call   413926 <_ZNSt8__format15__formatter_intIcE8_M_parseIoEEPKcRSt26basic_format_parse_contextIcE>
  40e07e:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40e07f:	48 89 c6             	mov    %rax,%rsi
  40e082:	48 89 df             	mov    %rbx,%rdi
  40e085:	e8 cc 82 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40e08a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e08e:	48 8b 00             	mov    (%rax),%rax
  40e091:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40e095:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e099:	48 8b 00             	mov    (%rax),%rax
  40e09c:	48 8b 48 30          	mov    0x30(%rax),%rcx
  40e0a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40e0a4:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40e0a8:	48 8b 00             	mov    (%rax),%rax
  40e0ab:	48 89 c6             	mov    %rax,%rsi
  40e0ae:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40e0b2:	48 89 c7             	mov    %rax,%rdi
  40e0b5:	e8 8e 0e 00 00       	call   40ef48 <_ZNKSt9formatterIocE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEoRS7_>
  40e0ba:	48 89 c6             	mov    %rax,%rsi
  40e0bd:	48 89 df             	mov    %rbx,%rdi
  40e0c0:	e8 05 08 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40e0c5:	90                   	nop
  40e0c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e0ca:	c9                   	leave
  40e0cb:	c3                   	ret

000000000040e0cc <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIDF128_EEDaS5_>:
  40e0cc:	55                   	push   %rbp
  40e0cd:	48 89 e5             	mov    %rsp,%rbp
  40e0d0:	53                   	push   %rbx
  40e0d1:	48 83 ec 38          	sub    $0x38,%rsp
  40e0d5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40e0d9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	      _Formatter __f;
  40e0dd:	48 c7 45 dc 00 00 00 	movq   $0x0,-0x24(%rbp)
  40e0e4:	00
  40e0e5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40e0ec:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40e0f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e0f7:	48 8b 00             	mov    (%rax),%rax
  40e0fa:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e0fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e102:	48 8b 00             	mov    (%rax),%rax
  40e105:	48 83 c0 08          	add    $0x8,%rax
  40e109:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_f.parse(__pc); }
  40e10d:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40e111:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e115:	48 89 d6             	mov    %rdx,%rsi
  40e118:	48 89 c7             	mov    %rax,%rdi
  40e11b:	e8 36 27 00 00       	call   410856 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>
  40e120:	90                   	nop
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
  40e121:	48 89 c6             	mov    %rax,%rsi
  40e124:	48 89 df             	mov    %rbx,%rdi
  40e127:	e8 2a 82 ff ff       	call   406356 <_ZNSt26basic_format_parse_contextIcE10advance_toEPKc>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
  40e12c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e130:	48 8b 00             	mov    (%rax),%rax
  40e133:	48 8b 58 30          	mov    0x30(%rax),%rbx
  40e137:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e13b:	48 8b 00             	mov    (%rax),%rax
  40e13e:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e142:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40e146:	66 0f 6f 00          	movdqa (%rax),%xmm0
  40e14a:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  40e14e:	48 89 d6             	mov    %rdx,%rsi
  40e151:	48 89 c7             	mov    %rax,%rdi
  40e154:	e8 33 0e 00 00       	call   40ef8c <_ZNKSt9formatterIDF128_cE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEDF128_RS7_>
  40e159:	48 89 c6             	mov    %rax,%rsi
  40e15c:	48 89 df             	mov    %rbx,%rdi
  40e15f:	e8 66 07 00 00       	call   40e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>
	std::visit_format_arg([this](auto& __arg) {
  40e164:	90                   	nop
  40e165:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e169:	c9                   	leave
  40e16a:	c3                   	ret
  40e16b:	90                   	nop

000000000040e16c <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  40e16c:	55                   	push   %rbp
  40e16d:	48 89 e5             	mov    %rsp,%rbp
  40e170:	48 83 ec 30          	sub    $0x30,%rsp
  40e174:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40e178:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40e17c:	89 d0                	mov    %edx,%eax
  40e17e:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  40e181:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  40e185:	89 c0                	mov    %eax,%eax
  40e187:	48 8b 04 c5 48 e2 41 	mov    0x41e248(,%rax,8),%rax
  40e18e:	00
  40e18f:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  40e191:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e195:	48 89 c7             	mov    %rax,%rdi
  40e198:	e8 36 08 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e19d:	48 89 c2             	mov    %rax,%rdx
  40e1a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e1a4:	48 89 c6             	mov    %rax,%rsi
  40e1a7:	48 89 d7             	mov    %rdx,%rdi
  40e1aa:	e8 f1 f5 ff ff       	call   40d7a0 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt9monostateEEDaS5_>
  40e1af:	e9 2b 02 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  40e1b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e1b8:	48 89 c7             	mov    %rax,%rdi
  40e1bb:	e8 13 08 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e1c0:	48 89 c2             	mov    %rax,%rdx
  40e1c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e1c7:	48 89 c6             	mov    %rax,%rsi
  40e1ca:	48 89 d7             	mov    %rdx,%rdi
  40e1cd:	e8 e4 f5 ff ff       	call   40d7b6 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIbEEDaS5_>
  40e1d2:	e9 08 02 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  40e1d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e1db:	48 89 c7             	mov    %rax,%rdi
  40e1de:	e8 f0 07 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e1e3:	48 89 c2             	mov    %rax,%rdx
  40e1e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e1ea:	48 89 c6             	mov    %rax,%rsi
  40e1ed:	48 89 d7             	mov    %rdx,%rdi
  40e1f0:	e8 61 f6 ff ff       	call   40d856 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIcEEDaS5_>
  40e1f5:	e9 e5 01 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  40e1fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e1fe:	48 89 c7             	mov    %rax,%rdi
  40e201:	e8 cd 07 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e206:	48 89 c2             	mov    %rax,%rdx
  40e209:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e20d:	48 89 c6             	mov    %rax,%rsi
  40e210:	48 89 d7             	mov    %rdx,%rdi
  40e213:	e8 d6 f6 ff ff       	call   40d8ee <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIiEEDaS5_>
  40e218:	e9 c2 01 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  40e21d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e221:	48 89 c7             	mov    %rax,%rdi
  40e224:	e8 aa 07 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e229:	48 89 c2             	mov    %rax,%rdx
  40e22c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e230:	48 89 c6             	mov    %rax,%rsi
  40e233:	48 89 d7             	mov    %rdx,%rdi
  40e236:	e8 4f f7 ff ff       	call   40d98a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIjEEDaS5_>
  40e23b:	e9 9f 01 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  40e240:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e244:	48 89 c7             	mov    %rax,%rdi
  40e247:	e8 87 07 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e24c:	48 89 c2             	mov    %rax,%rdx
  40e24f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e253:	48 89 c6             	mov    %rax,%rsi
  40e256:	48 89 d7             	mov    %rdx,%rdi
  40e259:	e8 c8 f7 ff ff       	call   40da26 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIxEEDaS5_>
  40e25e:	e9 7c 01 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  40e263:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e267:	48 89 c7             	mov    %rax,%rdi
  40e26a:	e8 64 07 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e26f:	48 89 c2             	mov    %rax,%rdx
  40e272:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e276:	48 89 c6             	mov    %rax,%rsi
  40e279:	48 89 d7             	mov    %rdx,%rdi
  40e27c:	e8 43 f8 ff ff       	call   40dac4 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIyEEDaS5_>
  40e281:	e9 59 01 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  40e286:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e28a:	48 89 c7             	mov    %rax,%rdi
  40e28d:	e8 41 07 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e292:	48 89 c2             	mov    %rax,%rdx
  40e295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e299:	48 89 c6             	mov    %rax,%rsi
  40e29c:	48 89 d7             	mov    %rdx,%rdi
  40e29f:	e8 be f8 ff ff       	call   40db62 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIfEEDaS5_>
  40e2a4:	e9 36 01 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  40e2a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e2ad:	48 89 c7             	mov    %rax,%rdi
  40e2b0:	e8 1e 07 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e2b5:	48 89 c2             	mov    %rax,%rdx
  40e2b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e2bc:	48 89 c6             	mov    %rax,%rsi
  40e2bf:	48 89 d7             	mov    %rdx,%rdi
  40e2c2:	e8 3d f9 ff ff       	call   40dc04 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIdEEDaS5_>
  40e2c7:	e9 13 01 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  40e2cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e2d0:	48 89 c7             	mov    %rax,%rdi
  40e2d3:	e8 fb 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e2d8:	48 89 c2             	mov    %rax,%rdx
  40e2db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e2df:	48 89 c6             	mov    %rax,%rsi
  40e2e2:	48 89 d7             	mov    %rdx,%rdi
  40e2e5:	e8 be f9 ff ff       	call   40dca8 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIeEEDaS5_>
  40e2ea:	e9 f0 00 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  40e2ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e2f3:	48 89 c7             	mov    %rax,%rdi
  40e2f6:	e8 d8 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e2fb:	48 89 c2             	mov    %rax,%rdx
  40e2fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e302:	48 89 c6             	mov    %rax,%rsi
  40e305:	48 89 d7             	mov    %rdx,%rdi
  40e308:	e8 45 fa ff ff       	call   40dd52 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKcEEDaS5_>
  40e30d:	e9 cd 00 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  40e312:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e316:	48 89 c7             	mov    %rax,%rdi
  40e319:	e8 b5 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e31e:	48 89 c2             	mov    %rax,%rdx
  40e321:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e325:	48 89 c6             	mov    %rax,%rsi
  40e328:	48 89 d7             	mov    %rdx,%rdi
  40e32b:	e8 c0 fa ff ff       	call   40ddf0 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clISt17basic_string_viewIcSt11char_traitsIcEEEEDaS5_>
  40e330:	e9 aa 00 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  40e335:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e339:	48 89 c7             	mov    %rax,%rdi
  40e33c:	e8 92 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e341:	48 89 c2             	mov    %rax,%rdx
  40e344:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e348:	48 89 c6             	mov    %rax,%rsi
  40e34b:	48 89 d7             	mov    %rdx,%rdi
  40e34e:	e8 3d fb ff ff       	call   40de90 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIPKvEEDaS5_>
  40e353:	e9 87 00 00 00       	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  40e358:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e35c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  40e360:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e364:	48 89 c7             	mov    %rax,%rdi
  40e367:	e8 67 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e36c:	48 89 c2             	mov    %rax,%rdx
  40e36f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e373:	48 89 c6             	mov    %rax,%rsi
  40e376:	48 89 d7             	mov    %rdx,%rdi
  40e379:	e8 a8 fb ff ff       	call   40df26 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clINSt16basic_format_argISt20basic_format_contextIS2_cEE6handleEEEDaS5_>
  40e37e:	eb 5f                	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  40e380:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e384:	48 89 c7             	mov    %rax,%rdi
  40e387:	e8 47 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e38c:	48 89 c2             	mov    %rax,%rdx
  40e38f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e393:	48 89 c6             	mov    %rax,%rsi
  40e396:	48 89 d7             	mov    %rdx,%rdi
  40e399:	e8 ea fb ff ff       	call   40df88 <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clInEEDaS5_>
  40e39e:	eb 3f                	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  40e3a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e3a4:	48 89 c7             	mov    %rax,%rdi
  40e3a7:	e8 27 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e3ac:	48 89 c2             	mov    %rax,%rdx
  40e3af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e3b3:	48 89 c6             	mov    %rax,%rsi
  40e3b6:	48 89 d7             	mov    %rdx,%rdi
  40e3b9:	e8 6c fc ff ff       	call   40e02a <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIoEEDaS5_>
  40e3be:	eb 1f                	jmp    40e3df <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  40e3c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e3c4:	48 89 c7             	mov    %rax,%rdi
  40e3c7:	e8 07 06 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e3cc:	48 89 c2             	mov    %rax,%rdx
  40e3cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e3d3:	48 89 c6             	mov    %rax,%rsi
  40e3d6:	48 89 d7             	mov    %rdx,%rdi
  40e3d9:	e8 ee fc ff ff       	call   40e0cc <_ZZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEmENKUlRT_E_clIDF128_EEDaS5_>
  40e3de:	90                   	nop
	}
  40e3df:	c9                   	leave
  40e3e0:	c3                   	ret

000000000040e3e1 <_ZSt16visit_format_argIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_St20basic_format_contextIS3_cEEDcOS5_St16basic_format_argIT0_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  40e3e1:	55                   	push   %rbp
  40e3e2:	48 89 e5             	mov    %rsp,%rbp
  40e3e5:	53                   	push   %rbx
  40e3e6:	48 83 ec 18          	sub    $0x18,%rsp
  40e3ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  40e3ee:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  40e3f2:	0f b6 d8             	movzbl %al,%ebx
  40e3f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e3f9:	48 89 c7             	mov    %rax,%rdi
  40e3fc:	e8 d2 05 00 00       	call   40e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>
  40e401:	89 da                	mov    %ebx,%edx
  40e403:	48 89 c6             	mov    %rax,%rsi
  40e406:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  40e40a:	e8 5d fd ff ff       	call   40e16c <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitIZNS1_19_Formatting_scannerIS3_cE13_M_format_argEmEUlRT_E_EEDcOS9_NS1_6_Arg_tE>
  40e40f:	90                   	nop
    }
  40e410:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e414:	c9                   	leave
  40e415:	c3                   	ret

000000000040e416 <_ZNSt8__format19_Formatting_scannerINS_10_Sink_iterIcEEcE13_M_format_argEm>:
      _M_format_arg(size_t __id) override
  40e416:	55                   	push   %rbp
  40e417:	48 89 e5             	mov    %rsp,%rbp
  40e41a:	48 83 ec 40          	sub    $0x40,%rsp
  40e41e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40e422:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	}, _M_fc.arg(__id));
  40e426:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e42a:	48 8b 48 30          	mov    0x30(%rax),%rcx
	std::visit_format_arg([this](auto& __arg) {
  40e42e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e432:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40e436:	48 89 ce             	mov    %rcx,%rsi
  40e439:	48 89 c7             	mov    %rax,%rdi
  40e43c:	e8 b3 04 00 00       	call   40e8f4 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  40e441:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e445:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40e449:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  40e44d:	48 83 ec 20          	sub    $0x20,%rsp
  40e451:	48 89 e1             	mov    %rsp,%rcx
  40e454:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40e458:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e45c:	48 89 01             	mov    %rax,(%rcx)
  40e45f:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40e463:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e467:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e46b:	48 89 41 10          	mov    %rax,0x10(%rcx)
  40e46f:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  40e473:	48 89 f7             	mov    %rsi,%rdi
  40e476:	e8 66 ff ff ff       	call   40e3e1 <_ZSt16visit_format_argIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_St20basic_format_contextIS3_cEEDcOS5_St16basic_format_argIT0_E>
  40e47b:	48 83 c4 20          	add    $0x20,%rsp
      }
  40e47f:	90                   	nop
  40e480:	c9                   	leave
  40e481:	c3                   	ret

000000000040e482 <_ZNKSt6ranges8__access6_BeginclIRSt4spanIcLm18446744073709551615EEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40e482:	55                   	push   %rbp
  40e483:	48 89 e5             	mov    %rsp,%rbp
  40e486:	48 83 ec 10          	sub    $0x10,%rsp
  40e48a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e48e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  40e492:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e496:	48 89 c7             	mov    %rax,%rdi
  40e499:	e8 8a d5 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
	}
  40e49e:	c9                   	leave
  40e49f:	c3                   	ret

000000000040e4a0 <_ZNKSt6ranges8__access4_EndclIRSt4spanIcLm18446744073709551615EEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  40e4a0:	55                   	push   %rbp
  40e4a1:	48 89 e5             	mov    %rsp,%rbp
  40e4a4:	48 83 ec 10          	sub    $0x10,%rsp
  40e4a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e4ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  40e4b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40e4b4:	48 89 c7             	mov    %rax,%rdi
  40e4b7:	e8 fe 0a 00 00       	call   40efba <_ZNKSt4spanIcLm18446744073709551615EE3endEv>
	}
  40e4bc:	c9                   	leave
  40e4bd:	c3                   	ret

000000000040e4be <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv>:
      _M_overflow() override
  40e4be:	55                   	push   %rbp
  40e4bf:	48 89 e5             	mov    %rsp,%rbp
  40e4c2:	53                   	push   %rbx
  40e4c3:	48 83 ec 78          	sub    $0x78,%rsp
  40e4c7:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
	auto __s = this->_M_used();
  40e4cb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e4cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40e4d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e4d7:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e4db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e4df:	48 83 c0 08          	add    $0x8,%rax
  40e4e3:	48 89 c7             	mov    %rax,%rdi
  40e4e6:	e8 3d d5 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e4eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40e4ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e4f3:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40e4f7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e4fb:	48 89 c6             	mov    %rax,%rsi
  40e4fe:	48 89 d7             	mov    %rdx,%rdi
  40e501:	e8 47 d5 ff ff       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40e506:	48 89 c6             	mov    %rax,%rsi
  40e509:	48 89 df             	mov    %rbx,%rdi
  40e50c:	e8 7b d5 ff ff       	call   40ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e511:	90                   	nop
	auto __s = this->_M_used();
  40e512:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40e516:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	if (_M_max < 0) // No maximum.
  40e51a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e51e:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40e525:	48 85 c0             	test   %rax,%rax
  40e528:	79 42                	jns    40e56c <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0xae>
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
  40e52a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e52e:	48 05 20 01 00 00    	add    $0x120,%rax
  40e534:	48 89 c7             	mov    %rax,%rdi
  40e537:	e8 09 b5 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40e53c:	48 8b 10             	mov    (%rax),%rdx
  40e53f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e543:	48 89 c6             	mov    %rax,%rsi
  40e546:	bf 60 b5 41 00       	mov    $0x41b560,%edi
  40e54b:	e8 ae 0a 00 00       	call   40effe <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>
  40e550:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40e554:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40e558:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e55c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40e560:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
  40e567:	e9 d0 00 00 00       	jmp    40e63c <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x17e>
	else if (_M_count < static_cast<size_t>(_M_max))
  40e56c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e570:	48 8b 90 30 01 00 00 	mov    0x130(%rax),%rdx
  40e577:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e57b:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40e582:	48 39 c2             	cmp    %rax,%rdx
  40e585:	0f 83 b1 00 00 00    	jae    40e63c <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x17e>
	    auto __max = _M_max - _M_count;
  40e58b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e58f:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  40e596:	48 89 c2             	mov    %rax,%rdx
  40e599:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e59d:	48 8b 80 30 01 00 00 	mov    0x130(%rax),%rax
  40e5a4:	48 29 c2             	sub    %rax,%rdx
  40e5a7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    span<_CharT> __first;
  40e5ab:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  40e5b2:	00
  40e5b3:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  40e5ba:	00
	    if (__max < __s.size())
  40e5bb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e5bf:	48 89 c7             	mov    %rax,%rdi
  40e5c2:	e8 6d 6f ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e5c7:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  40e5cb:	0f 92 c0             	setb   %al
  40e5ce:	84 c0                	test   %al,%al
  40e5d0:	74 1d                	je     40e5ef <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x131>
	      __first = __s.first(static_cast<size_t>(__max));
  40e5d2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40e5d6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e5da:	48 89 d6             	mov    %rdx,%rsi
  40e5dd:	48 89 c7             	mov    %rax,%rdi
  40e5e0:	e8 a7 d4 ff ff       	call   40ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e5e5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40e5e9:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  40e5ed:	eb 10                	jmp    40e5ff <_ZNSt8__format10_Iter_sinkIcNS_10_Sink_iterIcEEE11_M_overflowEv+0x141>
	      __first = __s;
  40e5ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40e5f3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40e5f7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40e5fb:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
  40e5ff:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e603:	48 05 20 01 00 00    	add    $0x120,%rax
  40e609:	48 89 c7             	mov    %rax,%rdi
  40e60c:	e8 34 b4 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40e611:	48 8b 10             	mov    (%rax),%rdx
  40e614:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40e618:	48 89 c6             	mov    %rax,%rsi
  40e61b:	bf 60 b5 41 00       	mov    $0x41b560,%edi
  40e620:	e8 d9 09 00 00       	call   40effe <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>
  40e625:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40e629:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40e62d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e631:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40e635:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	this->_M_rewind();
  40e63c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e640:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      { _M_next = _M_span.begin(); }
  40e644:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e648:	48 83 c0 08          	add    $0x8,%rax
  40e64c:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40e650:	48 89 c7             	mov    %rax,%rdi
  40e653:	e8 d0 d3 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e658:	48 89 43 18          	mov    %rax,0x18(%rbx)
  40e65c:	90                   	nop
	_M_count += __s.size();
  40e65d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e661:	48 89 c7             	mov    %rax,%rdi
  40e664:	e8 cb 6e ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e669:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40e66d:	48 8b 92 30 01 00 00 	mov    0x130(%rdx),%rdx
  40e674:	48 01 c2             	add    %rax,%rdx
  40e677:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e67b:	48 89 90 30 01 00 00 	mov    %rdx,0x130(%rax)
      }
  40e682:	90                   	nop
  40e683:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e687:	c9                   	leave
  40e688:	c3                   	ret
  40e689:	90                   	nop

000000000040e68a <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm>:
      _M_reserve(size_t __n) override
  40e68a:	55                   	push   %rbp
  40e68b:	48 89 e5             	mov    %rsp,%rbp
  40e68e:	53                   	push   %rbx
  40e68f:	48 83 ec 78          	sub    $0x78,%rsp
  40e693:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40e697:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	    if (this->_M_used().size()) [[unlikely]]
  40e69b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e69f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40e6a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e6a7:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e6ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e6af:	48 83 c0 08          	add    $0x8,%rax
  40e6b3:	48 89 c7             	mov    %rax,%rdi
  40e6b6:	e8 6d d3 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e6bb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40e6bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40e6c3:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40e6c7:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  40e6cb:	48 89 c6             	mov    %rax,%rsi
  40e6ce:	48 89 d7             	mov    %rdx,%rdi
  40e6d1:	e8 77 d3 ff ff       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40e6d6:	48 89 c6             	mov    %rax,%rsi
  40e6d9:	48 89 df             	mov    %rbx,%rdi
  40e6dc:	e8 ab d3 ff ff       	call   40ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e6e1:	90                   	nop
	    if (this->_M_used().size()) [[unlikely]]
  40e6e2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40e6e6:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40e6ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40e6ee:	48 89 c7             	mov    %rax,%rdi
  40e6f1:	e8 3e 6e ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e6f6:	48 85 c0             	test   %rax,%rax
  40e6f9:	0f 95 c0             	setne  %al
  40e6fc:	84 c0                	test   %al,%al
  40e6fe:	74 0c                	je     40e70c <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEm+0x82>
	      _Seq_sink::_M_overflow();
  40e700:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e704:	48 89 c7             	mov    %rax,%rdi
  40e707:	e8 54 c0 ff ff       	call   40a760 <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_overflowEv>
	    const auto __sz = _M_seq.size();
  40e70c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e710:	48 05 20 01 00 00    	add    $0x120,%rax
  40e716:	48 89 c7             	mov    %rax,%rdi
  40e719:	e8 72 66 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40e71e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	      _M_seq.__resize_and_overwrite(__sz + __n,
  40e722:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e726:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  40e72d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40e731:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40e735:	48 01 c8             	add    %rcx,%rax
  40e738:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40e73c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  template<typename _Operation>
    [[__gnu__::__always_inline__]]
    constexpr void
    basic_string<_CharT, _Traits, _Alloc>::
    __resize_and_overwrite(const size_type __n, _Operation __op)
    { resize_and_overwrite<_Operation&>(__n, __op); }
  40e740:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
  40e744:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40e748:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e74c:	48 89 ce             	mov    %rcx,%rsi
  40e74f:	48 89 c7             	mov    %rax,%rdi
  40e752:	e8 3f 64 00 00       	call   414b96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_>
  40e757:	90                   	nop
	    this->_M_reset(_M_seq, __sz);
  40e758:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
  40e75c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40e760:	48 8d 90 20 01 00 00 	lea    0x120(%rax),%rdx
  40e767:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40e76b:	48 89 d6             	mov    %rdx,%rsi
  40e76e:	48 89 c7             	mov    %rax,%rdi
  40e771:	e8 e0 c0 ff ff       	call   40a856 <_ZNSt4spanIcLm18446744073709551615EEC1IRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_>
  40e776:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40e77a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40e77e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e782:	48 89 d6             	mov    %rdx,%rsi
  40e785:	48 89 c2             	mov    %rax,%rdx
  40e788:	48 89 df             	mov    %rbx,%rdi
  40e78b:	e8 da 08 00 00       	call   40f06a <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>
	    return { this };
  40e790:	48 8b 45 88          	mov    -0x78(%rbp),%rax
      }
  40e794:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e798:	c9                   	leave
  40e799:	c3                   	ret

000000000040e79a <_ZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_bumpEm>:
      _M_bump(size_t __n) override
  40e79a:	55                   	push   %rbp
  40e79b:	48 89 e5             	mov    %rsp,%rbp
  40e79e:	53                   	push   %rbx
  40e79f:	48 83 ec 48          	sub    $0x48,%rsp
  40e7a3:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40e7a7:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	    auto __s = this->_M_used();
  40e7ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e7af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.first(_M_next - _M_span.begin()); }
  40e7b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e7b7:	48 8d 58 08          	lea    0x8(%rax),%rbx
  40e7bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e7bf:	48 83 c0 08          	add    $0x8,%rax
  40e7c3:	48 89 c7             	mov    %rax,%rdi
  40e7c6:	e8 5d d2 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40e7cb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40e7cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e7d3:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40e7d7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40e7db:	48 89 c6             	mov    %rax,%rsi
  40e7de:	48 89 d7             	mov    %rdx,%rdi
  40e7e1:	e8 67 d2 ff ff       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  40e7e6:	48 89 c6             	mov    %rax,%rsi
  40e7e9:	48 89 df             	mov    %rbx,%rdi
  40e7ec:	e8 9b d2 ff ff       	call   40ba8c <_ZNKSt4spanIcLm18446744073709551615EE5firstEm>
  40e7f1:	90                   	nop
	    auto __s = this->_M_used();
  40e7f2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40e7f6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	    _M_seq.resize(__s.size() + __n);
  40e7fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e7fe:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  40e805:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40e809:	48 89 c7             	mov    %rax,%rdi
  40e80c:	e8 23 6d ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40e811:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40e815:	48 01 d0             	add    %rdx,%rax
  40e818:	48 89 c6             	mov    %rax,%rsi
  40e81b:	48 89 df             	mov    %rbx,%rdi
  40e81e:	e8 bd 08 00 00       	call   40f0e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm>
	    this->_M_reset(this->_M_buf);
  40e823:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  40e827:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40e82b:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40e82f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e833:	48 89 d6             	mov    %rdx,%rsi
  40e836:	48 89 c7             	mov    %rax,%rdi
  40e839:	e8 98 ce ff ff       	call   40b6d6 <_ZNSt4spanIcLm18446744073709551615EEC1ILm256EEERAT__c>
  40e83e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40e842:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e846:	b9 00 00 00 00       	mov    $0x0,%ecx
  40e84b:	48 89 d6             	mov    %rdx,%rsi
  40e84e:	48 89 c2             	mov    %rax,%rdx
  40e851:	48 89 df             	mov    %rbx,%rdi
  40e854:	e8 11 08 00 00       	call   40f06a <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>
      }
  40e859:	90                   	nop
  40e85a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40e85e:	c9                   	leave
  40e85f:	c3                   	ret

000000000040e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>:
    __write(_Out __out, basic_string_view<_CharT> __str)
  40e860:	55                   	push   %rbp
  40e861:	48 89 e5             	mov    %rsp,%rbp
  40e864:	48 83 ec 30          	sub    $0x30,%rsp
  40e868:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40e86c:	48 89 f0             	mov    %rsi,%rax
  40e86f:	48 89 d1             	mov    %rdx,%rcx
  40e872:	48 89 c0             	mov    %rax,%rax
  40e875:	ba 00 00 00 00       	mov    $0x0,%edx
  40e87a:	48 89 ca             	mov    %rcx,%rdx
  40e87d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40e881:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  if (__str.size())
  40e885:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40e889:	48 89 c7             	mov    %rax,%rdi
  40e88c:	e8 85 74 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40e891:	48 85 c0             	test   %rax,%rax
  40e894:	0f 95 c0             	setne  %al
  40e897:	84 c0                	test   %al,%al
  40e899:	74 28                	je     40e8c3 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE+0x63>
  40e89b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40e89f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e8a3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40e8a7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	_M_sink->_M_write(__s);
  40e8ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40e8af:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40e8b3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e8b7:	48 89 ce             	mov    %rcx,%rsi
  40e8ba:	48 89 c7             	mov    %rax,%rdi
  40e8bd:	e8 12 68 00 00       	call   4150d4 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE>
	return *this;
  40e8c2:	90                   	nop
      return __out;
  40e8c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  40e8c7:	c9                   	leave
  40e8c8:	c3                   	ret
  40e8c9:	90                   	nop

000000000040e8ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE10advance_toES2_>:
      void advance_to(iterator __it) { _M_out = std::move(__it); }
  40e8ca:	55                   	push   %rbp
  40e8cb:	48 89 e5             	mov    %rsp,%rbp
  40e8ce:	48 83 ec 10          	sub    $0x10,%rsp
  40e8d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e8d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40e8da:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40e8de:	48 89 c7             	mov    %rax,%rdi
  40e8e1:	e8 5f b1 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40e8e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40e8ea:	48 8b 00             	mov    (%rax),%rax
  40e8ed:	48 89 42 10          	mov    %rax,0x10(%rdx)
  40e8f1:	90                   	nop
  40e8f2:	c9                   	leave
  40e8f3:	c3                   	ret

000000000040e8f4 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>:
      arg(size_t __id) const noexcept
  40e8f4:	55                   	push   %rbp
  40e8f5:	48 89 e5             	mov    %rsp,%rbp
  40e8f8:	48 83 ec 40          	sub    $0x40,%rsp
  40e8fc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40e900:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40e904:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      { return _M_args.get(__id); }
  40e908:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40e90c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40e910:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40e914:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40e918:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e91c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      _Arg_value() : _M_none() { }
  40e920:	90                   	nop
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
  40e921:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e925:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  40e929:	90                   	nop
	if (__i < _M_packed_size)
  40e92a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e92e:	0f b6 00             	movzbl (%rax),%eax
  40e931:	83 e0 0f             	and    $0xf,%eax
  40e934:	0f b6 c0             	movzbl %al,%eax
  40e937:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40e93b:	73 41                	jae    40e97e <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0x8a>
	    __arg._M_type = _M_type(__i);
  40e93d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40e941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e945:	48 89 d6             	mov    %rdx,%rsi
  40e948:	48 89 c7             	mov    %rax,%rdi
  40e94b:	e8 78 df ff ff       	call   40c8c8 <_ZNKSt17basic_format_argsISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE7_M_typeEm>
  40e950:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40e954:	88 42 10             	mov    %al,0x10(%rdx)
	    __arg._M_val = _M_values[__i];
  40e957:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e95b:	48 8b 40 08          	mov    0x8(%rax),%rax
  40e95f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40e963:	48 c1 e2 04          	shl    $0x4,%rdx
  40e967:	48 01 d0             	add    %rdx,%rax
  40e96a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40e96e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40e972:	48 8b 00             	mov    (%rax),%rax
  40e975:	48 89 01             	mov    %rax,(%rcx)
  40e978:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	return __arg;
  40e97c:	eb 4d                	jmp    40e9cb <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
  40e97e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e982:	0f b6 00             	movzbl (%rax),%eax
  40e985:	83 e0 0f             	and    $0xf,%eax
  40e988:	84 c0                	test   %al,%al
  40e98a:	75 3f                	jne    40e9cb <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
  40e98c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e990:	48 8b 00             	mov    (%rax),%rax
  40e993:	48 c1 e8 04          	shr    $0x4,%rax
  40e997:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  40e99b:	73 2e                	jae    40e9cb <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm+0xd7>
	  __arg = _M_args[__i];
  40e99d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e9a1:	48 8b 40 08          	mov    0x8(%rax),%rax
  40e9a5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40e9a9:	48 c1 e2 05          	shl    $0x5,%rdx
  40e9ad:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
  40e9b1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40e9b5:	48 8b 06             	mov    (%rsi),%rax
  40e9b8:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  40e9bc:	48 89 01             	mov    %rax,(%rcx)
  40e9bf:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  40e9c3:	0f b6 46 10          	movzbl 0x10(%rsi),%eax
  40e9c7:	88 41 10             	mov    %al,0x10(%rcx)
	return __arg;
  40e9ca:	90                   	nop
  40e9cb:	90                   	nop
      { return _M_args.get(__id); }
  40e9cc:	90                   	nop
  40e9cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40e9d1:	c9                   	leave
  40e9d2:	c3                   	ret

000000000040e9d3 <_ZSt7forwardIZNSt8__format19_Formatting_scannerINS0_10_Sink_iterIcEEcE13_M_format_argEmEUlRT_E_EOS5_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  40e9d3:	55                   	push   %rbp
  40e9d4:	48 89 e5             	mov    %rsp,%rbp
  40e9d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  40e9db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e9df:	5d                   	pop    %rbp
  40e9e0:	c3                   	ret
  40e9e1:	90                   	nop

000000000040e9e2 <_ZNKSt9formatterIbcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40e9e2:	55                   	push   %rbp
  40e9e3:	48 89 e5             	mov    %rsp,%rbp
  40e9e6:	48 83 ec 20          	sub    $0x20,%rsp
  40e9ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40e9ee:	89 f0                	mov    %esi,%eax
  40e9f0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40e9f4:	88 45 f4             	mov    %al,-0xc(%rbp)
	{ return _M_f.format(__u, __fc); }
  40e9f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40e9fb:	0f b6 4d f4          	movzbl -0xc(%rbp),%ecx
  40e9ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ea03:	89 ce                	mov    %ecx,%esi
  40ea05:	48 89 c7             	mov    %rax,%rdi
  40ea08:	e8 95 07 00 00       	call   40f1a2 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>
  40ea0d:	c9                   	leave
  40ea0e:	c3                   	ret
  40ea0f:	90                   	nop

000000000040ea10 <_ZNSt9formatterIccE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  40ea10:	55                   	push   %rbp
  40ea11:	48 89 e5             	mov    %rsp,%rbp
  40ea14:	48 83 ec 10          	sub    $0x10,%rsp
  40ea18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ea1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_f.template _M_parse<_CharT>(__pc);
  40ea20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea24:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ea28:	48 89 d6             	mov    %rdx,%rsi
  40ea2b:	48 89 c7             	mov    %rax,%rdi
  40ea2e:	e8 47 09 00 00       	call   40f37a <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE>
      }
  40ea33:	c9                   	leave
  40ea34:	c3                   	ret
  40ea35:	90                   	nop

000000000040ea36 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>:
	format(_CharT __u, basic_format_context<_Out, _CharT>& __fc) const
  40ea36:	55                   	push   %rbp
  40ea37:	48 89 e5             	mov    %rsp,%rbp
  40ea3a:	48 83 ec 20          	sub    $0x20,%rsp
  40ea3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ea42:	89 f0                	mov    %esi,%eax
  40ea44:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ea48:	88 45 f4             	mov    %al,-0xc(%rbp)
	  if (_M_f._M_spec._M_type == __format::_Pres_none
  40ea4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea4f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ea53:	83 e0 78             	and    $0x78,%eax
  40ea56:	84 c0                	test   %al,%al
  40ea58:	74 0f                	je     40ea69 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x33>
	      || _M_f._M_spec._M_type == __format::_Pres_c)
  40ea5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea5e:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ea62:	83 e0 78             	and    $0x78,%eax
  40ea65:	3c 38                	cmp    $0x38,%al
  40ea67:	75 18                	jne    40ea81 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x4b>
	    return _M_f._M_format_character(__u, __fc);
  40ea69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea6d:	0f be 4d f4          	movsbl -0xc(%rbp),%ecx
  40ea71:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ea75:	89 ce                	mov    %ecx,%esi
  40ea77:	48 89 c7             	mov    %rax,%rdi
  40ea7a:	e8 7f 09 00 00       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40ea7f:	eb 37                	jmp    40eab8 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x82>
	  else if (_M_f._M_spec._M_type == __format::_Pres_esc)
  40ea81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ea85:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40ea89:	83 e0 78             	and    $0x78,%eax
  40ea8c:	3c 78                	cmp    $0x78,%al
  40ea8e:	75 0e                	jne    40ea9e <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x68>
	      return __fc.out();
  40ea90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ea94:	48 89 c7             	mov    %rax,%rdi
  40ea97:	e8 6a cf ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  40ea9c:	eb 1a                	jmp    40eab8 <_ZNKSt9formatterIccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_+0x82>
	    return _M_f.format(static_cast<make_unsigned_t<_CharT>>(__u), __fc);
  40ea9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eaa2:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  40eaa6:	0f b6 ca             	movzbl %dl,%ecx
  40eaa9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eaad:	89 ce                	mov    %ecx,%esi
  40eaaf:	48 89 c7             	mov    %rax,%rdi
  40eab2:	e8 a7 09 00 00       	call   40f45e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40eab7:	90                   	nop
	}
  40eab8:	c9                   	leave
  40eab9:	c3                   	ret

000000000040eaba <_ZNKSt9formatterIicE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEiRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40eaba:	55                   	push   %rbp
  40eabb:	48 89 e5             	mov    %rsp,%rbp
  40eabe:	48 83 ec 20          	sub    $0x20,%rsp
  40eac2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eac6:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40eac9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40eacd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ead1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ead5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  40ead8:	89 ce                	mov    %ecx,%esi
  40eada:	48 89 c7             	mov    %rax,%rdi
  40eadd:	e8 42 0d 00 00       	call   40f824 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40eae2:	c9                   	leave
  40eae3:	c3                   	ret

000000000040eae4 <_ZNKSt9formatterIjcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEjRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40eae4:	55                   	push   %rbp
  40eae5:	48 89 e5             	mov    %rsp,%rbp
  40eae8:	48 83 ec 20          	sub    $0x20,%rsp
  40eaec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eaf0:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40eaf3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40eaf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eafb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eaff:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  40eb02:	89 ce                	mov    %ecx,%esi
  40eb04:	48 89 c7             	mov    %rax,%rdi
  40eb07:	e8 12 11 00 00       	call   40fc1e <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40eb0c:	c9                   	leave
  40eb0d:	c3                   	ret

000000000040eb0e <_ZNKSt9formatterIxcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorExRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40eb0e:	55                   	push   %rbp
  40eb0f:	48 89 e5             	mov    %rsp,%rbp
  40eb12:	48 83 ec 20          	sub    $0x20,%rsp
  40eb16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eb1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40eb1e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40eb22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eb2a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40eb2e:	48 89 ce             	mov    %rcx,%rsi
  40eb31:	48 89 c7             	mov    %rax,%rdi
  40eb34:	e8 c9 14 00 00       	call   410002 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40eb39:	c9                   	leave
  40eb3a:	c3                   	ret
  40eb3b:	90                   	nop

000000000040eb3c <_ZNKSt9formatterIycE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEyRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40eb3c:	55                   	push   %rbp
  40eb3d:	48 89 e5             	mov    %rsp,%rbp
  40eb40:	48 83 ec 20          	sub    $0x20,%rsp
  40eb44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eb48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40eb4c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40eb50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb54:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eb58:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40eb5c:	48 89 ce             	mov    %rcx,%rsi
  40eb5f:	48 89 c7             	mov    %rax,%rdi
  40eb62:	e8 a9 18 00 00       	call   410410 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40eb67:	c9                   	leave
  40eb68:	c3                   	ret
  40eb69:	90                   	nop

000000000040eb6a <_ZNKSt9formatterIfcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEfRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40eb6a:	55                   	push   %rbp
  40eb6b:	48 89 e5             	mov    %rsp,%rbp
  40eb6e:	48 83 ec 20          	sub    $0x20,%rsp
  40eb72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eb76:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  40eb7b:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40eb7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eb83:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40eb87:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40eb8a:	48 89 ce             	mov    %rcx,%rsi
  40eb8d:	66 0f 6e c2          	movd   %edx,%xmm0
  40eb91:	48 89 c7             	mov    %rax,%rdi
  40eb94:	e8 0d 21 00 00       	call   410ca6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40eb99:	c9                   	leave
  40eb9a:	c3                   	ret
  40eb9b:	90                   	nop

000000000040eb9c <_ZNKSt9formatterIdcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEdRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40eb9c:	55                   	push   %rbp
  40eb9d:	48 89 e5             	mov    %rsp,%rbp
  40eba0:	48 83 ec 20          	sub    $0x20,%rsp
  40eba4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40eba8:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  40ebad:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ebb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ebb5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ebb9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ebbd:	48 89 ce             	mov    %rcx,%rsi
  40ebc0:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  40ebc5:	48 89 c7             	mov    %rax,%rdi
  40ebc8:	e8 01 2e 00 00       	call   4119ce <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ebcd:	c9                   	leave
  40ebce:	c3                   	ret
  40ebcf:	90                   	nop

000000000040ebd0 <_ZNKSt9formatterIecE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEeRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ebd0:	55                   	push   %rbp
  40ebd1:	48 89 e5             	mov    %rsp,%rbp
  40ebd4:	48 83 ec 10          	sub    $0x10,%rsp
  40ebd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ebdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ebe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ebe4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40ebe8:	ff 75 18             	push   0x18(%rbp)
  40ebeb:	ff 75 10             	push   0x10(%rbp)
  40ebee:	48 89 d6             	mov    %rdx,%rsi
  40ebf1:	48 89 c7             	mov    %rax,%rdi
  40ebf4:	e8 1b 3b 00 00       	call   412714 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ebf9:	48 83 c4 10          	add    $0x10,%rsp
  40ebfd:	c9                   	leave
  40ebfe:	c3                   	ret
  40ebff:	90                   	nop

000000000040ec00 <_ZNKSt9formatterIPKccE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>:
	format(const _CharT* __u,
  40ec00:	55                   	push   %rbp
  40ec01:	48 89 e5             	mov    %rsp,%rbp
  40ec04:	53                   	push   %rbx
  40ec05:	48 83 ec 38          	sub    $0x38,%rsp
  40ec09:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40ec0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40ec11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ec15:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40ec19:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40ec1d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40ec21:	48 89 d6             	mov    %rdx,%rsi
  40ec24:	48 89 c7             	mov    %rax,%rdi
  40ec27:	e8 54 6f ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40ec2c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40ec30:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ec34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ec38:	48 89 d6             	mov    %rdx,%rsi
  40ec3b:	48 89 c2             	mov    %rax,%rdx
  40ec3e:	48 89 df             	mov    %rbx,%rdi
  40ec41:	e8 92 46 00 00       	call   4132d8 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>
  40ec46:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ec4a:	c9                   	leave
  40ec4b:	c3                   	ret

000000000040ec4c <_ZNKSt9formatterISt17basic_string_viewIcSt11char_traitsIcEEcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES3_RSB_>:
	format(basic_string_view<char, _Traits> __u,
  40ec4c:	55                   	push   %rbp
  40ec4d:	48 89 e5             	mov    %rsp,%rbp
  40ec50:	48 83 ec 20          	sub    $0x20,%rsp
  40ec54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ec58:	48 89 f0             	mov    %rsi,%rax
  40ec5b:	48 89 d6             	mov    %rdx,%rsi
  40ec5e:	48 89 c0             	mov    %rax,%rax
  40ec61:	ba 00 00 00 00       	mov    $0x0,%edx
  40ec66:	48 89 f2             	mov    %rsi,%rdx
  40ec69:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ec6d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ec71:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ec75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ec79:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ec7d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40ec81:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ec85:	48 89 c7             	mov    %rax,%rdi
  40ec88:	e8 4b 46 00 00       	call   4132d8 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>
  40ec8d:	c9                   	leave
  40ec8e:	c3                   	ret
  40ec8f:	90                   	nop

000000000040ec90 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  40ec90:	55                   	push   %rbp
  40ec91:	48 89 e5             	mov    %rsp,%rbp
  40ec94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  40ec98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ec9c:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40eca0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40eca4:	48 8b 00             	mov    (%rax),%rax
  40eca7:	48 8b 0a             	mov    (%rdx),%rcx
  40ecaa:	48 89 08             	mov    %rcx,(%rax)
  40ecad:	8b 52 08             	mov    0x8(%rdx),%edx
  40ecb0:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  40ecb3:	90                   	nop
  40ecb4:	5d                   	pop    %rbp
  40ecb5:	c3                   	ret

000000000040ecb6 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  40ecb6:	55                   	push   %rbp
  40ecb7:	48 89 e5             	mov    %rsp,%rbp
  40ecba:	48 83 ec 10          	sub    $0x10,%rsp
  40ecbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  40ecc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ecc6:	48 8b 00             	mov    (%rax),%rax
  40ecc9:	48 8b 10             	mov    (%rax),%rdx
  40eccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ecd0:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ecd4:	48 8b 00             	mov    (%rax),%rax
  40ecd7:	48 39 c2             	cmp    %rax,%rdx
  40ecda:	74 11                	je     40eced <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  40ecdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ece0:	48 8b 00             	mov    (%rax),%rax
  40ece3:	48 8b 00             	mov    (%rax),%rax
  40ece6:	0f b6 00             	movzbl (%rax),%eax
  40ece9:	3c 7d                	cmp    $0x7d,%al
  40eceb:	75 17                	jne    40ed04 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  40eced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ecf1:	48 8b 40 10          	mov    0x10(%rax),%rax
  40ecf5:	48 89 c7             	mov    %rax,%rdi
  40ecf8:	e8 93 ff ff ff       	call   40ec90 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  40ecfd:	b8 01 00 00 00       	mov    $0x1,%eax
  40ed02:	eb 05                	jmp    40ed09 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  40ed04:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  40ed09:	c9                   	leave
  40ed0a:	c3                   	ret
  40ed0b:	90                   	nop

000000000040ed0c <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  40ed0c:	55                   	push   %rbp
  40ed0d:	48 89 e5             	mov    %rsp,%rbp
  40ed10:	48 83 ec 60          	sub    $0x60,%rsp
  40ed14:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  40ed18:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	__format::_Spec<_CharT> __spec{};
  40ed1c:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  40ed23:	00
  40ed24:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40ed2b:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	const auto __last = __pc.end();
  40ed32:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ed36:	48 89 c7             	mov    %rax,%rdi
  40ed39:	e8 b0 74 ff ff       	call   4061ee <_ZNKSt26basic_format_parse_contextIcE3endEv>
  40ed3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  40ed42:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40ed46:	48 89 c7             	mov    %rax,%rdi
  40ed49:	e8 70 74 ff ff       	call   4061be <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  40ed4e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  40ed52:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40ed56:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  40ed5a:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40ed5e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  40ed62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40ed66:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40ed6a:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40ed6e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  40ed72:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40ed76:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  40ed7a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ed7e:	48 89 c7             	mov    %rax,%rdi
  40ed81:	e8 30 ff ff ff       	call   40ecb6 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40ed86:	84 c0                	test   %al,%al
  40ed88:	74 09                	je     40ed93 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  40ed8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ed8e:	e9 8c 00 00 00       	jmp    40ee1f <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  40ed93:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ed97:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40ed9b:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40ed9f:	48 89 ce             	mov    %rcx,%rsi
  40eda2:	48 89 c7             	mov    %rax,%rdi
  40eda5:	e8 bc 98 ff ff       	call   408666 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  40edaa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40edae:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40edb2:	48 89 c7             	mov    %rax,%rdi
  40edb5:	e8 fc fe ff ff       	call   40ecb6 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40edba:	84 c0                	test   %al,%al
  40edbc:	74 06                	je     40edc4 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xb8>
	  return __first;
  40edbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40edc2:	eb 5b                	jmp    40ee1f <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__first = __spec._M_parse_width(__first, __last, __pc);
  40edc4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40edc8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40edcc:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40edd0:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  40edd4:	48 89 c7             	mov    %rax,%rdi
  40edd7:	e8 1c 9a ff ff       	call   4087f8 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  40eddc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__first != __last)
  40ede0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ede4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ede8:	48 39 c2             	cmp    %rax,%rdx
  40edeb:	74 17                	je     40ee04 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xf8>
	    if (*__first == 'p')
  40eded:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40edf1:	0f b6 00             	movzbl (%rax),%eax
  40edf4:	3c 70                	cmp    $0x70,%al
  40edf6:	75 0c                	jne    40ee04 <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0xf8>
	      ++__first;
  40edf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40edfc:	48 83 c0 01          	add    $0x1,%rax
  40ee00:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  40ee04:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ee08:	48 89 c7             	mov    %rax,%rdi
  40ee0b:	e8 a6 fe ff ff       	call   40ecb6 <_ZZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  40ee10:	84 c0                	test   %al,%al
  40ee12:	74 06                	je     40ee1a <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x10e>
	  return __first;
  40ee14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ee18:	eb 05                	jmp    40ee1f <_ZNSt9formatterIPKvcE5parseERSt26basic_format_parse_contextIcE+0x113>
	__format::__failed_to_parse_format_spec();
  40ee1a:	e8 05 64 ff ff       	call   405224 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  40ee1f:	c9                   	leave
  40ee20:	c3                   	ret
  40ee21:	90                   	nop

000000000040ee22 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1Ev>:
      basic_string_view() noexcept
  40ee22:	55                   	push   %rbp
  40ee23:	48 89 e5             	mov    %rsp,%rbp
  40ee26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_len{0}, _M_str{nullptr}
  40ee2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ee2e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40ee35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ee39:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40ee40:	00
      { }
  40ee41:	90                   	nop
  40ee42:	5d                   	pop    %rbp
  40ee43:	c3                   	ret

000000000040ee44 <_ZNKSt9formatterIPKvcE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorES1_RS9_>:
	format(const void* __v, basic_format_context<_Out, _CharT>& __fc) const
  40ee44:	55                   	push   %rbp
  40ee45:	48 89 e5             	mov    %rsp,%rbp
  40ee48:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  40ee4c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  40ee50:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  40ee54:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	  auto __u = reinterpret_cast<__UINTPTR_TYPE__>(__v);
  40ee58:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40ee5c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40ee60:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  40ee64:	48 83 c6 12          	add    $0x12,%rsi
	  auto [__ptr, __ec] = std::to_chars(__buf + 2, std::end(__buf),
  40ee68:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ee6c:	48 83 c0 02          	add    $0x2,%rax
  40ee70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40ee74:	b9 10 00 00 00       	mov    $0x10,%ecx
  40ee79:	48 89 c7             	mov    %rax,%rdi
  40ee7c:	e8 4a 58 ff ff       	call   4046cb <_ZSt8to_charsPcS_mi>
  40ee81:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40ee85:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	  int __n = __ptr - __buf;
  40ee89:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40ee8d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40ee91:	48 29 c2             	sub    %rax,%rdx
  40ee94:	89 55 f4             	mov    %edx,-0xc(%rbp)
	  __buf[0] = '0';
  40ee97:	c6 45 c0 30          	movb   $0x30,-0x40(%rbp)
	  __buf[1] = 'x';
  40ee9b:	c6 45 c1 78          	movb   $0x78,-0x3f(%rbp)
	  basic_string_view<_CharT> __str;
  40ee9f:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40eea6:	00
  40eea7:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  40eeae:	00
	    __str = string_view(__buf, __n);
  40eeaf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40eeb2:	48 63 d0             	movslq %eax,%rdx
  40eeb5:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  40eeb9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40eebd:	48 89 ce             	mov    %rcx,%rsi
  40eec0:	48 89 c7             	mov    %rax,%rdi
  40eec3:	e8 24 86 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40eec8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eecc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40eed0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40eed4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
  40eed8:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  40eedc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40eedf:	48 63 d0             	movslq %eax,%rdx
  40eee2:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  40eee6:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  40eeea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40eeee:	41 b9 02 00 00 00    	mov    $0x2,%r9d
  40eef4:	49 89 f8             	mov    %rdi,%r8
  40eef7:	48 89 f7             	mov    %rsi,%rdi
  40eefa:	48 89 c6             	mov    %rax,%rsi
  40eefd:	e8 c6 44 00 00       	call   4133c8 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
	}
  40ef02:	c9                   	leave
  40ef03:	c3                   	ret

000000000040ef04 <_ZNKSt9formatterIncE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEnRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ef04:	55                   	push   %rbp
  40ef05:	48 89 e5             	mov    %rsp,%rbp
  40ef08:	48 83 ec 20          	sub    $0x20,%rsp
  40ef0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ef10:	48 89 f0             	mov    %rsi,%rax
  40ef13:	48 89 d6             	mov    %rdx,%rsi
  40ef16:	48 89 c0             	mov    %rax,%rax
  40ef19:	ba 00 00 00 00       	mov    $0x0,%edx
  40ef1e:	48 89 f2             	mov    %rsi,%rdx
  40ef21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ef25:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ef29:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ef2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ef31:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ef35:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40ef39:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ef3d:	48 89 c7             	mov    %rax,%rdi
  40ef40:	e8 8f 45 00 00       	call   4134d4 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ef45:	c9                   	leave
  40ef46:	c3                   	ret
  40ef47:	90                   	nop

000000000040ef48 <_ZNKSt9formatterIocE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEoRS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ef48:	55                   	push   %rbp
  40ef49:	48 89 e5             	mov    %rsp,%rbp
  40ef4c:	48 83 ec 20          	sub    $0x20,%rsp
  40ef50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ef54:	48 89 f0             	mov    %rsi,%rax
  40ef57:	48 89 d6             	mov    %rdx,%rsi
  40ef5a:	48 89 c0             	mov    %rax,%rax
  40ef5d:	ba 00 00 00 00       	mov    $0x0,%edx
  40ef62:	48 89 f2             	mov    %rsi,%rdx
  40ef65:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40ef69:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40ef6d:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40ef71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ef75:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ef79:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40ef7d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ef81:	48 89 c7             	mov    %rax,%rdi
  40ef84:	e8 c7 49 00 00       	call   413950 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40ef89:	c9                   	leave
  40ef8a:	c3                   	ret
  40ef8b:	90                   	nop

000000000040ef8c <_ZNKSt9formatterIDF128_cE6formatINSt8__format10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEDF128_RS7_>:
	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
  40ef8c:	55                   	push   %rbp
  40ef8d:	48 89 e5             	mov    %rsp,%rbp
  40ef90:	48 83 ec 20          	sub    $0x20,%rsp
  40ef94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ef98:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
  40ef9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return _M_f.format(__u, __fc); }
  40efa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40efa4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40efa8:	66 0f 6f 45 e0       	movdqa -0x20(%rbp),%xmm0
  40efad:	48 89 d6             	mov    %rdx,%rsi
  40efb0:	48 89 c7             	mov    %rax,%rdi
  40efb3:	e8 e8 4e 00 00       	call   413ea0 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40efb8:	c9                   	leave
  40efb9:	c3                   	ret

000000000040efba <_ZNKSt4spanIcLm18446744073709551615EE3endEv>:
      end() const noexcept
  40efba:	55                   	push   %rbp
  40efbb:	48 89 e5             	mov    %rsp,%rbp
  40efbe:	53                   	push   %rbx
  40efbf:	48 83 ec 28          	sub    $0x28,%rsp
  40efc3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      { return iterator(this->_M_ptr + this->size()); }
  40efc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40efcb:	48 8b 18             	mov    (%rax),%rbx
  40efce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40efd2:	48 89 c7             	mov    %rax,%rdi
  40efd5:	e8 5a 65 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  40efda:	48 01 d8             	add    %rbx,%rax
  40efdd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40efe1:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  40efe5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40efe9:	48 89 d6             	mov    %rdx,%rsi
  40efec:	48 89 c7             	mov    %rax,%rdi
  40efef:	e8 12 d9 ff ff       	call   40c906 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  40eff4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40eff8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40effc:	c9                   	leave
  40effd:	c3                   	ret

000000000040effe <_ZNKSt6ranges9__copy_fnclIRSt4spanIcLm18446744073709551615EENSt8__format10_Sink_iterIcEEEENS_13in_out_resultINSt13__conditionalIX14borrowed_rangeIT_EEE4typeIDTcl7__begincl7declvalIRSA_EEEENS_8danglingEEET0_EEOSA_SH_>:
      }

    template<input_range _Range, weakly_incrementable _Out>
      requires indirectly_copyable<iterator_t<_Range>, _Out>
      constexpr copy_result<borrowed_iterator_t<_Range>, _Out>
      operator()(_Range&& __r, _Out __result) const
  40effe:	55                   	push   %rbp
  40efff:	48 89 e5             	mov    %rsp,%rbp
  40f002:	41 54                	push   %r12
  40f004:	53                   	push   %rbx
  40f005:	48 83 ec 20          	sub    $0x20,%rsp
  40f009:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40f00d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40f011:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
		       std::move(__result));
  40f015:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  40f019:	48 89 c7             	mov    %rax,%rdi
  40f01c:	e8 24 aa ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  40f021:	48 89 c3             	mov    %rax,%rbx
	return (*this)(ranges::begin(__r), ranges::end(__r),
  40f024:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f028:	48 89 c6             	mov    %rax,%rsi
  40f02b:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  40f030:	e8 6b f4 ff ff       	call   40e4a0 <_ZNKSt6ranges8__access4_EndclIRSt4spanIcLm18446744073709551615EEEEDaOT_>
  40f035:	49 89 c4             	mov    %rax,%r12
  40f038:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f03c:	48 89 c6             	mov    %rax,%rsi
  40f03f:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  40f044:	e8 39 f4 ff ff       	call   40e482 <_ZNKSt6ranges8__access6_BeginclIRSt4spanIcLm18446744073709551615EEEEDaOT_>
  40f049:	48 89 c6             	mov    %rax,%rsi
  40f04c:	48 8b 13             	mov    (%rbx),%rdx
  40f04f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f053:	48 89 d1             	mov    %rdx,%rcx
  40f056:	4c 89 e2             	mov    %r12,%rdx
  40f059:	48 89 c7             	mov    %rax,%rdi
  40f05c:	e8 91 5a 00 00       	call   414af2 <_ZNKSt6ranges9__copy_fnclIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES7_NSt8__format10_Sink_iterIcEEEENS_13in_out_resultIT_T1_EESC_T0_SD_>
      }
  40f061:	48 83 c4 20          	add    $0x20,%rsp
  40f065:	5b                   	pop    %rbx
  40f066:	41 5c                	pop    %r12
  40f068:	5d                   	pop    %rbp
  40f069:	c3                   	ret

000000000040f06a <_ZNSt8__format5_SinkIcE8_M_resetESt4spanIcLm18446744073709551615EEm>:
      _M_reset(span<_CharT> __s, size_t __pos = 0) noexcept
  40f06a:	55                   	push   %rbp
  40f06b:	48 89 e5             	mov    %rsp,%rbp
  40f06e:	41 54                	push   %r12
  40f070:	53                   	push   %rbx
  40f071:	48 83 ec 30          	sub    $0x30,%rsp
  40f075:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40f079:	48 89 f0             	mov    %rsi,%rax
  40f07c:	48 89 d6             	mov    %rdx,%rsi
  40f07f:	48 89 c0             	mov    %rax,%rax
  40f082:	ba 00 00 00 00       	mov    $0x0,%edx
  40f087:	48 89 f2             	mov    %rsi,%rdx
  40f08a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40f08e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40f092:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	_M_span = __s;
  40f096:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40f09a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40f09e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40f0a2:	48 89 41 08          	mov    %rax,0x8(%rcx)
  40f0a6:	48 89 51 10          	mov    %rdx,0x10(%rcx)
	_M_next = __s.begin() + __pos;
  40f0aa:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
  40f0ae:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40f0b2:	48 89 c7             	mov    %rax,%rdi
  40f0b5:	e8 6e c9 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  40f0ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40f0be:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  40f0c2:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  40f0c6:	48 89 de             	mov    %rbx,%rsi
  40f0c9:	48 89 c7             	mov    %rax,%rdi
  40f0cc:	e8 b9 5b 00 00       	call   414c8a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEplEl>
  40f0d1:	49 89 44 24 18       	mov    %rax,0x18(%r12)
      }
  40f0d6:	90                   	nop
  40f0d7:	48 83 c4 30          	add    $0x30,%rsp
  40f0db:	5b                   	pop    %rbx
  40f0dc:	41 5c                	pop    %r12
  40f0de:	5d                   	pop    %rbp
  40f0df:	c3                   	ret

000000000040f0e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm>:
      resize(size_type __n)
  40f0e0:	55                   	push   %rbp
  40f0e1:	48 89 e5             	mov    %rsp,%rbp
  40f0e4:	48 83 ec 10          	sub    $0x10,%rsp
  40f0e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40f0ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { this->resize(__n, _CharT()); }
  40f0f0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40f0f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f0f8:	ba 00 00 00 00       	mov    $0x0,%edx
  40f0fd:	48 89 ce             	mov    %rcx,%rsi
  40f100:	48 89 c7             	mov    %rax,%rdi
  40f103:	e8 be 5b 00 00       	call   414cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc>
  40f108:	90                   	nop
  40f109:	c9                   	leave
  40f10a:	c3                   	ret
  40f10b:	90                   	nop

000000000040f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
  40f10c:	55                   	push   %rbp
  40f10d:	48 89 e5             	mov    %rsp,%rbp
  40f110:	48 83 ec 10          	sub    $0x10,%rsp
  40f114:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->size() == 0; }
  40f118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40f11c:	48 89 c7             	mov    %rax,%rdi
  40f11f:	e8 6c 5c ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40f124:	48 85 c0             	test   %rax,%rax
  40f127:	0f 94 c0             	sete   %al
  40f12a:	c9                   	leave
  40f12b:	c3                   	ret

000000000040f12c <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40f12c:	55                   	push   %rbp
  40f12d:	48 89 e5             	mov    %rsp,%rbp
  40f130:	48 83 ec 20          	sub    $0x20,%rsp
  40f134:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40f138:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      auto __end = _M_do_parse(__pc, _AsBool);
  40f13c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f140:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f144:	ba 00 00 00 00       	mov    $0x0,%edx
  40f149:	48 89 ce             	mov    %rcx,%rsi
  40f14c:	48 89 c7             	mov    %rax,%rdi
  40f14f:	e8 82 78 ff ff       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
  40f154:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      if (_M_spec._M_type == _Pres_s)
  40f158:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f15c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f160:	83 e0 78             	and    $0x78,%eax
  40f163:	84 c0                	test   %al,%al
  40f165:	75 34                	jne    40f19b <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x6f>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
  40f167:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f16b:	0f b6 00             	movzbl (%rax),%eax
  40f16e:	83 e0 0c             	and    $0xc,%eax
  40f171:	84 c0                	test   %al,%al
  40f173:	75 1c                	jne    40f191 <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x65>
  40f175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f179:	0f b6 00             	movzbl (%rax),%eax
  40f17c:	83 e0 10             	and    $0x10,%eax
  40f17f:	84 c0                	test   %al,%al
  40f181:	75 0e                	jne    40f191 <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x65>
  40f183:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f187:	0f b6 00             	movzbl (%rax),%eax
  40f18a:	83 e0 40             	and    $0x40,%eax
  40f18d:	84 c0                	test   %al,%al
  40f18f:	74 0a                	je     40f19b <_ZNSt8__format15__formatter_intIcE8_M_parseIbEEPKcRSt26basic_format_parse_contextIcE+0x6f>
		  __throw_format_error("format error: format-spec contains "
  40f191:	bf 58 b3 41 00       	mov    $0x41b358,%edi
  40f196:	e8 fe 5f ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	      return __end;
  40f19b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  40f19f:	c9                   	leave
  40f1a0:	c3                   	ret
  40f1a1:	90                   	nop

000000000040f1a2 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_>:
	format(bool __i, basic_format_context<_Out, _CharT>& __fc) const
  40f1a2:	55                   	push   %rbp
  40f1a3:	48 89 e5             	mov    %rsp,%rbp
  40f1a6:	53                   	push   %rbx
  40f1a7:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  40f1ae:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40f1b2:	89 f0                	mov    %esi,%eax
  40f1b4:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40f1bb:	88 45 84             	mov    %al,-0x7c(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40f1be:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f1c2:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f1c6:	83 e0 78             	and    $0x78,%eax
  40f1c9:	3c 38                	cmp    $0x38,%al
  40f1cb:	75 21                	jne    40f1ee <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x4c>
	    return _M_format_character(static_cast<unsigned char>(__i), __fc);
  40f1cd:	0f b6 4d 84          	movzbl -0x7c(%rbp),%ecx
  40f1d1:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40f1d8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f1dc:	89 ce                	mov    %ecx,%esi
  40f1de:	48 89 c7             	mov    %rax,%rdi
  40f1e1:	e8 18 02 00 00       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40f1e6:	48 89 c3             	mov    %rax,%rbx
  40f1e9:	e9 55 01 00 00       	jmp    40f343 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1a1>
	  if (_M_spec._M_type != _Pres_s)
  40f1ee:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f1f2:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f1f6:	83 e0 78             	and    $0x78,%eax
  40f1f9:	84 c0                	test   %al,%al
  40f1fb:	74 21                	je     40f21e <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x7c>
	    return format(static_cast<unsigned char>(__i), __fc);
  40f1fd:	0f b6 4d 84          	movzbl -0x7c(%rbp),%ecx
  40f201:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40f208:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f20c:	89 ce                	mov    %ecx,%esi
  40f20e:	48 89 c7             	mov    %rax,%rdi
  40f211:	e8 48 02 00 00       	call   40f45e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>
  40f216:	48 89 c3             	mov    %rax,%rbx
  40f219:	e9 25 01 00 00       	jmp    40f343 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1a1>
	  basic_string<_CharT> __s;
  40f21e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f222:	48 89 c7             	mov    %rax,%rdi
  40f225:	e8 fc 58 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  if (_M_spec._M_localized) [[unlikely]]
  40f22a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40f22e:	0f b6 00             	movzbl (%rax),%eax
  40f231:	83 e0 20             	and    $0x20,%eax
  40f234:	84 c0                	test   %al,%al
  40f236:	0f 84 91 00 00 00    	je     40f2cd <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x12b>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
  40f23c:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f240:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  40f247:	48 89 d6             	mov    %rdx,%rsi
  40f24a:	48 89 c7             	mov    %rax,%rdi
  40f24d:	e8 78 60 00 00       	call   4152ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  40f252:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f256:	48 89 c7             	mov    %rax,%rdi
  40f259:	e8 62 4e ff ff       	call   4040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  40f25e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40f262:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f266:	48 89 c7             	mov    %rax,%rdi
  40f269:	e8 c2 50 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      __s = __i ? __np.truename() : __np.falsename();
  40f26e:	80 7d 84 00          	cmpb   $0x0,-0x7c(%rbp)
  40f272:	74 15                	je     40f289 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0xe7>
  40f274:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40f278:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40f27c:	48 89 d6             	mov    %rdx,%rsi
  40f27f:	48 89 c7             	mov    %rax,%rdi
  40f282:	e8 c9 4f ff ff       	call   404250 <_ZNKSt7__cxx118numpunctIcE8truenameEv@plt>
  40f287:	eb 13                	jmp    40f29c <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0xfa>
  40f289:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40f28d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40f291:	48 89 d6             	mov    %rdx,%rsi
  40f294:	48 89 c7             	mov    %rax,%rdi
  40f297:	e8 64 4f ff ff       	call   404200 <_ZNKSt7__cxx118numpunctIcE9falsenameEv@plt>
  40f29c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  40f2a0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f2a4:	48 89 d6             	mov    %rdx,%rsi
  40f2a7:	48 89 c7             	mov    %rax,%rdi
  40f2aa:	e8 61 60 00 00       	call   415310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  40f2af:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40f2b3:	48 89 c7             	mov    %rax,%rdi
  40f2b6:	e8 b9 82 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      __est_width = __s.size(); // TODO Unicode-aware estimate
  40f2bb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f2bf:	48 89 c7             	mov    %rax,%rdi
  40f2c2:	e8 c9 5a ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40f2c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40f2cb:	eb 31                	jmp    40f2fe <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x15c>
		__s = __i ? "true" : "false";
  40f2cd:	80 7d 84 00          	cmpb   $0x0,-0x7c(%rbp)
  40f2d1:	74 07                	je     40f2da <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x138>
  40f2d3:	ba 4d b2 41 00       	mov    $0x41b24d,%edx
  40f2d8:	eb 05                	jmp    40f2df <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x13d>
  40f2da:	ba 47 b2 41 00       	mov    $0x41b247,%edx
  40f2df:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f2e3:	48 89 d6             	mov    %rdx,%rsi
  40f2e6:	48 89 c7             	mov    %rax,%rdi
  40f2e9:	e8 d0 62 00 00       	call   4155be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	      __est_width = __s.size();
  40f2ee:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f2f2:	48 89 c7             	mov    %rax,%rdi
  40f2f5:	e8 96 5a ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  40f2fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						  _M_spec);
  40f2fe:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
	  return __format::__write_padded_as_spec(__s, __est_width, __fc,
  40f302:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f306:	48 89 c7             	mov    %rax,%rdi
  40f309:	e8 14 8d ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  40f30e:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  40f315:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  40f319:	48 89 c7             	mov    %rax,%rdi
  40f31c:	48 89 d0             	mov    %rdx,%rax
  40f31f:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  40f325:	49 89 d8             	mov    %rbx,%r8
  40f328:	48 89 f2             	mov    %rsi,%rdx
  40f32b:	48 89 c6             	mov    %rax,%rsi
  40f32e:	e8 95 40 00 00       	call   4133c8 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
  40f333:	48 89 c3             	mov    %rax,%rbx
						  _M_spec);
  40f336:	90                   	nop
	}
  40f337:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f33b:	48 89 c7             	mov    %rax,%rdi
  40f33e:	e8 31 82 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40f343:	48 89 d8             	mov    %rbx,%rax
  40f346:	eb 2b                	jmp    40f373 <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1d1>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
  40f348:	48 89 c3             	mov    %rax,%rbx
  40f34b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  40f34f:	48 89 c7             	mov    %rax,%rdi
  40f352:	e8 d9 4f ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  40f357:	eb 03                	jmp    40f35c <_ZNKSt8__format15__formatter_intIcE6formatINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEbRS7_+0x1ba>
	}
  40f359:	48 89 c3             	mov    %rax,%rbx
  40f35c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f360:	48 89 c7             	mov    %rax,%rdi
  40f363:	e8 0c 82 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  40f368:	48 89 d8             	mov    %rbx,%rax
  40f36b:	48 89 c7             	mov    %rax,%rdi
  40f36e:	e8 9d 50 ff ff       	call   404410 <_Unwind_Resume@plt>
  40f373:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f377:	c9                   	leave
  40f378:	c3                   	ret
  40f379:	90                   	nop

000000000040f37a <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40f37a:	55                   	push   %rbp
  40f37b:	48 89 e5             	mov    %rsp,%rbp
  40f37e:	48 83 ec 20          	sub    $0x20,%rsp
  40f382:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40f386:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      auto __end = _M_do_parse(__pc, _AsChar);
  40f38a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40f38e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f392:	ba 07 00 00 00       	mov    $0x7,%edx
  40f397:	48 89 ce             	mov    %rcx,%rsi
  40f39a:	48 89 c7             	mov    %rax,%rdi
  40f39d:	e8 34 76 ff ff       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
  40f3a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
  40f3a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f3aa:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f3ae:	83 e0 78             	and    $0x78,%eax
  40f3b1:	3c 38                	cmp    $0x38,%al
  40f3b3:	74 0f                	je     40f3c4 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x4a>
  40f3b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f3b9:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f3bd:	83 e0 78             	and    $0x78,%eax
  40f3c0:	3c 78                	cmp    $0x78,%al
  40f3c2:	75 34                	jne    40f3f8 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x7e>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
  40f3c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f3c8:	0f b6 00             	movzbl (%rax),%eax
  40f3cb:	83 e0 0c             	and    $0xc,%eax
  40f3ce:	84 c0                	test   %al,%al
  40f3d0:	75 1c                	jne    40f3ee <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x74>
  40f3d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f3d6:	0f b6 00             	movzbl (%rax),%eax
  40f3d9:	83 e0 10             	and    $0x10,%eax
  40f3dc:	84 c0                	test   %al,%al
  40f3de:	75 0e                	jne    40f3ee <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x74>
  40f3e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f3e4:	0f b6 00             	movzbl (%rax),%eax
  40f3e7:	83 e0 40             	and    $0x40,%eax
  40f3ea:	84 c0                	test   %al,%al
  40f3ec:	74 0a                	je     40f3f8 <_ZNSt8__format15__formatter_intIcE8_M_parseIcEEPKcRSt26basic_format_parse_contextIcE+0x7e>
		  __throw_format_error("format error: format-spec contains "
  40f3ee:	bf a8 b3 41 00       	mov    $0x41b3a8,%edi
  40f3f3:	e8 a1 5d ff ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	      return __end;
  40f3f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  40f3fc:	c9                   	leave
  40f3fd:	c3                   	ret

000000000040f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>:
	_M_format_character(_CharT __c,
  40f3fe:	55                   	push   %rbp
  40f3ff:	48 89 e5             	mov    %rsp,%rbp
  40f402:	53                   	push   %rbx
  40f403:	48 83 ec 38          	sub    $0x38,%rsp
  40f407:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40f40b:	89 f0                	mov    %esi,%eax
  40f40d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  40f411:	88 45 d4             	mov    %al,-0x2c(%rbp)
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
  40f414:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  40f418:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  40f41c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40f420:	ba 01 00 00 00       	mov    $0x1,%edx
  40f425:	48 89 ce             	mov    %rcx,%rsi
  40f428:	48 89 c7             	mov    %rax,%rdi
  40f42b:	e8 bc 80 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40f430:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40f434:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  40f438:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f43c:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  40f442:	49 89 d8             	mov    %rbx,%r8
  40f445:	48 89 d1             	mov    %rdx,%rcx
  40f448:	ba 01 00 00 00       	mov    $0x1,%edx
  40f44d:	48 89 f7             	mov    %rsi,%rdi
  40f450:	48 89 c6             	mov    %rax,%rsi
  40f453:	e8 70 3f 00 00       	call   4133c8 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
	}
  40f458:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f45c:	c9                   	leave
  40f45d:	c3                   	ret

000000000040f45e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40f45e:	55                   	push   %rbp
  40f45f:	48 89 e5             	mov    %rsp,%rbp
  40f462:	53                   	push   %rbx
  40f463:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  40f46a:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  40f471:	89 f0                	mov    %esi,%eax
  40f473:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  40f47a:	88 85 44 ff ff ff    	mov    %al,-0xbc(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40f480:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f487:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f48b:	83 e0 78             	and    $0x78,%eax
  40f48e:	3c 38                	cmp    $0x38,%al
  40f490:	75 2e                	jne    40f4c0 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  40f492:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40f499:	89 c7                	mov    %eax,%edi
  40f49b:	e8 43 61 00 00       	call   4155e3 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_>
  40f4a0:	0f be c8             	movsbl %al,%ecx
  40f4a3:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  40f4aa:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f4b1:	89 ce                	mov    %ecx,%esi
  40f4b3:	48 89 c7             	mov    %rax,%rdi
  40f4b6:	e8 43 ff ff ff       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40f4bb:	e9 5e 03 00 00       	jmp    40f81e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c0>
	  to_chars_result __res{};
  40f4c0:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  40f4c7:	00 00 00 00
  40f4cb:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
  40f4d2:	00 00 00 00
	  string_view __base_prefix;
  40f4d6:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  40f4dd:	00 00 00 00
  40f4e1:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  40f4e8:	00 00 00 00
	    __u = __i;
  40f4ec:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40f4f3:	88 45 df             	mov    %al,-0x21(%rbp)
	  char* __start = __buf + 3;
  40f4f6:	48 8d 85 75 ff ff ff 	lea    -0x8b(%rbp),%rax
  40f4fd:	48 83 c0 03          	add    $0x3,%rax
  40f501:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40f505:	48 8d 85 75 ff ff ff 	lea    -0x8b(%rbp),%rax
  40f50c:	48 83 c0 0b          	add    $0xb,%rax
  40f510:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40f514:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f518:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40f51c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f523:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f527:	c0 e8 03             	shr    $0x3,%al
  40f52a:	83 e0 0f             	and    $0xf,%eax
  40f52d:	0f b6 c0             	movzbl %al,%eax
  40f530:	83 f8 06             	cmp    $0x6,%eax
  40f533:	0f 8f e3 01 00 00    	jg     40f71c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f539:	83 f8 05             	cmp    $0x5,%eax
  40f53c:	0f 8d 27 01 00 00    	jge    40f669 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x20b>
  40f542:	83 f8 04             	cmp    $0x4,%eax
  40f545:	0f 84 c2 00 00 00    	je     40f60d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1af>
  40f54b:	83 f8 04             	cmp    $0x4,%eax
  40f54e:	0f 8f c8 01 00 00    	jg     40f71c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f554:	83 f8 01             	cmp    $0x1,%eax
  40f557:	7f 0d                	jg     40f566 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
  40f559:	85 c0                	test   %eax,%eax
  40f55b:	0f 89 80 00 00 00    	jns    40f5e1 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x183>
  40f561:	e9 b6 01 00 00       	jmp    40f71c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f566:	83 e8 02             	sub    $0x2,%eax
  40f569:	83 f8 01             	cmp    $0x1,%eax
  40f56c:	0f 87 aa 01 00 00    	ja     40f71c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40f572:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f579:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f57d:	83 e0 78             	and    $0x78,%eax
  40f580:	3c 10                	cmp    $0x10,%al
  40f582:	75 07                	jne    40f58b <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12d>
  40f584:	ba f2 b3 41 00       	mov    $0x41b3f2,%edx
  40f589:	eb 05                	jmp    40f590 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x132>
  40f58b:	ba f5 b3 41 00       	mov    $0x41b3f5,%edx
  40f590:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40f594:	48 89 d6             	mov    %rdx,%rsi
  40f597:	48 89 c7             	mov    %rax,%rdi
  40f59a:	e8 e1 65 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f59f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40f5a3:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40f5a7:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40f5ae:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40f5b5:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f5b9:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f5bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f5c1:	b9 02 00 00 00       	mov    $0x2,%ecx
  40f5c6:	48 89 c7             	mov    %rax,%rdi
  40f5c9:	e8 3c 60 00 00       	call   41560a <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f5ce:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f5d5:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40f5dc:	e9 3c 01 00 00       	jmp    40f71d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      __res = to_chars(__start, __end, __u, 10);
  40f5e1:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f5e5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f5e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f5ed:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40f5f2:	48 89 c7             	mov    %rax,%rdi
  40f5f5:	e8 10 60 00 00       	call   41560a <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f5fa:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f601:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40f608:	e9 10 01 00 00       	jmp    40f71d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      if (__i != 0)
  40f60d:	80 bd 44 ff ff ff 00 	cmpb   $0x0,-0xbc(%rbp)
  40f614:	74 27                	je     40f63d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1df>
		__base_prefix = "0";
  40f616:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f61a:	be f8 b3 41 00       	mov    $0x41b3f8,%esi
  40f61f:	48 89 c7             	mov    %rax,%rdi
  40f622:	e8 59 65 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f627:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40f62b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40f62f:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40f636:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40f63d:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f641:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f645:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f649:	b9 08 00 00 00       	mov    $0x8,%ecx
  40f64e:	48 89 c7             	mov    %rax,%rdi
  40f651:	e8 b4 5f 00 00       	call   41560a <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f656:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f65d:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      break;
  40f664:	e9 b4 00 00 00       	jmp    40f71d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2bf>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40f669:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f670:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f674:	83 e0 78             	and    $0x78,%eax
  40f677:	3c 28                	cmp    $0x28,%al
  40f679:	75 07                	jne    40f682 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x224>
  40f67b:	ba fa b3 41 00       	mov    $0x41b3fa,%edx
  40f680:	eb 05                	jmp    40f687 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x229>
  40f682:	ba fd b3 41 00       	mov    $0x41b3fd,%edx
  40f687:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40f68b:	48 89 d6             	mov    %rdx,%rsi
  40f68e:	48 89 c7             	mov    %rax,%rdi
  40f691:	e8 ea 64 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f696:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40f69a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40f69e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40f6a5:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40f6ac:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  40f6b0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f6b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f6b8:	b9 10 00 00 00       	mov    $0x10,%ecx
  40f6bd:	48 89 c7             	mov    %rax,%rdi
  40f6c0:	e8 45 5f 00 00       	call   41560a <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>
  40f6c5:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40f6cc:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40f6d3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f6da:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f6de:	83 e0 78             	and    $0x78,%eax
  40f6e1:	3c 30                	cmp    $0x30,%al
  40f6e3:	75 37                	jne    40f71c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f6e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f6e9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40f6ed:	eb 1e                	jmp    40f70d <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2af>
		  *__p = __builtin_toupper(*__p);
  40f6ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f6f3:	0f b6 00             	movzbl (%rax),%eax
  40f6f6:	0f be c0             	movsbl %al,%eax
  40f6f9:	89 c7                	mov    %eax,%edi
  40f6fb:	e8 20 4d ff ff       	call   404420 <toupper@plt>
  40f700:	89 c2                	mov    %eax,%edx
  40f702:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f706:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40f708:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40f70d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40f714:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40f718:	75 d5                	jne    40f6ef <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x291>
	      break;
  40f71a:	eb 00                	jmp    40f71c <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2be>
  40f71c:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40f71d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f724:	0f b6 00             	movzbl (%rax),%eax
  40f727:	83 e0 10             	and    $0x10,%eax
  40f72a:	84 c0                	test   %al,%al
  40f72c:	74 1b                	je     40f749 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2eb>
  40f72e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f735:	48 89 c7             	mov    %rax,%rdi
  40f738:	e8 d9 65 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f73d:	48 85 c0             	test   %rax,%rax
  40f740:	74 07                	je     40f749 <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2eb>
  40f742:	b8 01 00 00 00       	mov    $0x1,%eax
  40f747:	eb 05                	jmp    40f74e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f0>
  40f749:	b8 00 00 00 00       	mov    $0x0,%eax
  40f74e:	84 c0                	test   %al,%al
  40f750:	74 4c                	je     40f79e <_ZNKSt8__format15__formatter_intIcE6formatIhNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x340>
	      __start -= __base_prefix.size();
  40f752:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f759:	48 89 c7             	mov    %rax,%rdi
  40f75c:	e8 b5 65 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f761:	48 f7 d8             	neg    %rax
  40f764:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40f768:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f76f:	48 89 c7             	mov    %rax,%rdi
  40f772:	e8 9f 65 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40f777:	48 89 c3             	mov    %rax,%rbx
  40f77a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f781:	48 89 c7             	mov    %rax,%rdi
  40f784:	e8 51 7d ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40f789:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40f78d:	48 89 d1             	mov    %rdx,%rcx
  40f790:	48 89 da             	mov    %rbx,%rdx
  40f793:	48 89 c6             	mov    %rax,%rsi
  40f796:	48 89 cf             	mov    %rcx,%rdi
  40f799:	e8 92 4a ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40f79e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40f7a2:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40f7a6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f7ad:	0f b6 00             	movzbl (%rax),%eax
  40f7b0:	c0 e8 02             	shr    $0x2,%al
  40f7b3:	83 e0 03             	and    $0x3,%eax
  40f7b6:	0f b6 c8             	movzbl %al,%ecx
  40f7b9:	0f b6 85 44 ff ff ff 	movzbl -0xbc(%rbp),%eax
  40f7c0:	89 ce                	mov    %ecx,%esi
  40f7c2:	89 c7                	mov    %eax,%edi
  40f7c4:	e8 72 5e 00 00       	call   41563b <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_>
  40f7c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  40f7cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40f7d1:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40f7d5:	48 89 c3             	mov    %rax,%rbx
  40f7d8:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40f7df:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40f7e3:	48 89 c2             	mov    %rax,%rdx
  40f7e6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40f7ea:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40f7ee:	48 89 ce             	mov    %rcx,%rsi
  40f7f1:	48 89 c7             	mov    %rax,%rdi
  40f7f4:	e8 f3 7c ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40f7f9:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  40f800:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40f804:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40f808:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40f80f:	49 89 c8             	mov    %rcx,%r8
  40f812:	48 89 d9             	mov    %rbx,%rcx
  40f815:	48 89 c7             	mov    %rax,%rdi
  40f818:	e8 57 5e 00 00       	call   415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40f81d:	90                   	nop
	}
  40f81e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40f822:	c9                   	leave
  40f823:	c3                   	ret

000000000040f824 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40f824:	55                   	push   %rbp
  40f825:	48 89 e5             	mov    %rsp,%rbp
  40f828:	53                   	push   %rbx
  40f829:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  40f830:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  40f837:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  40f83d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40f844:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f84b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f84f:	83 e0 78             	and    $0x78,%eax
  40f852:	3c 38                	cmp    $0x38,%al
  40f854:	75 2d                	jne    40f883 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f>
	    return _M_format_character(_S_to_character(__i), __fc);
  40f856:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40f85c:	89 c7                	mov    %eax,%edi
  40f85e:	e8 82 62 00 00       	call   415ae5 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_>
  40f863:	0f be c8             	movsbl %al,%ecx
  40f866:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40f86d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f874:	89 ce                	mov    %ecx,%esi
  40f876:	48 89 c7             	mov    %rax,%rdi
  40f879:	e8 80 fb ff ff       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40f87e:	e9 6a 03 00 00       	jmp    40fbed <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c9>
	  to_chars_result __res{};
  40f883:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40f88a:	00 00 00 00
  40f88e:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  40f895:	00 00 00 00
	  string_view __base_prefix;
  40f899:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40f8a0:	00 00 00 00
  40f8a4:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40f8ab:	00 00 00 00
	  if (__i < 0)
  40f8af:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40f8b6:	79 0d                	jns    40f8c5 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa1>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  40f8b8:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40f8be:	f7 d8                	neg    %eax
  40f8c0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  40f8c3:	eb 09                	jmp    40f8ce <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaa>
	    __u = __i;
  40f8c5:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40f8cb:	89 45 ec             	mov    %eax,-0x14(%rbp)
	  char* __start = __buf + 3;
  40f8ce:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f8d5:	48 83 c0 03          	add    $0x3,%rax
  40f8d9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40f8dd:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40f8e4:	48 83 c0 23          	add    $0x23,%rax
  40f8e8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40f8ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f8f0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40f8f4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f8fb:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f8ff:	c0 e8 03             	shr    $0x3,%al
  40f902:	83 e0 0f             	and    $0xf,%eax
  40f905:	0f b6 c0             	movzbl %al,%eax
  40f908:	83 f8 06             	cmp    $0x6,%eax
  40f90b:	0f 8f db 01 00 00    	jg     40faec <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40f911:	83 f8 05             	cmp    $0x5,%eax
  40f914:	0f 8d 20 01 00 00    	jge    40fa3a <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x216>
  40f91a:	83 f8 04             	cmp    $0x4,%eax
  40f91d:	0f 84 bc 00 00 00    	je     40f9df <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1bb>
  40f923:	83 f8 04             	cmp    $0x4,%eax
  40f926:	0f 8f c0 01 00 00    	jg     40faec <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40f92c:	83 f8 01             	cmp    $0x1,%eax
  40f92f:	7f 09                	jg     40f93a <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x116>
  40f931:	85 c0                	test   %eax,%eax
  40f933:	79 7f                	jns    40f9b4 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x190>
  40f935:	e9 b2 01 00 00       	jmp    40faec <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40f93a:	83 e8 02             	sub    $0x2,%eax
  40f93d:	83 f8 01             	cmp    $0x1,%eax
  40f940:	0f 87 a6 01 00 00    	ja     40faec <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40f946:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40f94d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40f951:	83 e0 78             	and    $0x78,%eax
  40f954:	3c 10                	cmp    $0x10,%al
  40f956:	75 07                	jne    40f95f <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x13b>
  40f958:	ba f2 b3 41 00       	mov    $0x41b3f2,%edx
  40f95d:	eb 05                	jmp    40f964 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x140>
  40f95f:	ba f5 b3 41 00       	mov    $0x41b3f5,%edx
  40f964:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40f968:	48 89 d6             	mov    %rdx,%rsi
  40f96b:	48 89 c7             	mov    %rax,%rdi
  40f96e:	e8 0d 62 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f973:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40f977:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40f97b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40f982:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40f989:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40f98c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f990:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f994:	b9 02 00 00 00       	mov    $0x2,%ecx
  40f999:	48 89 c7             	mov    %rax,%rdi
  40f99c:	e8 6c 61 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40f9a1:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40f9a8:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40f9af:	e9 39 01 00 00       	jmp    40faed <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      __res = to_chars(__start, __end, __u, 10);
  40f9b4:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40f9b7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40f9bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40f9bf:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40f9c4:	48 89 c7             	mov    %rax,%rdi
  40f9c7:	e8 41 61 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40f9cc:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40f9d3:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40f9da:	e9 0e 01 00 00       	jmp    40faed <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      if (__i != 0)
  40f9df:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40f9e6:	74 27                	je     40fa0f <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1eb>
		__base_prefix = "0";
  40f9e8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40f9ec:	be f8 b3 41 00       	mov    $0x41b3f8,%esi
  40f9f1:	48 89 c7             	mov    %rax,%rdi
  40f9f4:	e8 87 61 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40f9f9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40f9fd:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40fa01:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fa08:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40fa0f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40fa12:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fa16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fa1a:	b9 08 00 00 00       	mov    $0x8,%ecx
  40fa1f:	48 89 c7             	mov    %rax,%rdi
  40fa22:	e8 e6 60 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fa27:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fa2e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40fa35:	e9 b3 00 00 00       	jmp    40faed <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c9>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40fa3a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fa41:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fa45:	83 e0 78             	and    $0x78,%eax
  40fa48:	3c 28                	cmp    $0x28,%al
  40fa4a:	75 07                	jne    40fa53 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x22f>
  40fa4c:	ba fa b3 41 00       	mov    $0x41b3fa,%edx
  40fa51:	eb 05                	jmp    40fa58 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x234>
  40fa53:	ba fd b3 41 00       	mov    $0x41b3fd,%edx
  40fa58:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40fa5c:	48 89 d6             	mov    %rdx,%rsi
  40fa5f:	48 89 c7             	mov    %rax,%rdi
  40fa62:	e8 19 61 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40fa67:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40fa6b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40fa6f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fa76:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40fa7d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40fa80:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fa84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fa88:	b9 10 00 00 00       	mov    $0x10,%ecx
  40fa8d:	48 89 c7             	mov    %rax,%rdi
  40fa90:	e8 78 60 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fa95:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fa9c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40faa3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40faaa:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40faae:	83 e0 78             	and    $0x78,%eax
  40fab1:	3c 30                	cmp    $0x30,%al
  40fab3:	75 37                	jne    40faec <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40fab5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fab9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40fabd:	eb 1e                	jmp    40fadd <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b9>
		  *__p = __builtin_toupper(*__p);
  40fabf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40fac3:	0f b6 00             	movzbl (%rax),%eax
  40fac6:	0f be c0             	movsbl %al,%eax
  40fac9:	89 c7                	mov    %eax,%edi
  40facb:	e8 50 49 ff ff       	call   404420 <toupper@plt>
  40fad0:	89 c2                	mov    %eax,%edx
  40fad2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40fad6:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40fad8:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  40fadd:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40fae4:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  40fae8:	75 d5                	jne    40fabf <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x29b>
	      break;
  40faea:	eb 00                	jmp    40faec <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c8>
  40faec:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40faed:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40faf4:	0f b6 00             	movzbl (%rax),%eax
  40faf7:	83 e0 10             	and    $0x10,%eax
  40fafa:	84 c0                	test   %al,%al
  40fafc:	74 1b                	je     40fb19 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f5>
  40fafe:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fb05:	48 89 c7             	mov    %rax,%rdi
  40fb08:	e8 09 62 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fb0d:	48 85 c0             	test   %rax,%rax
  40fb10:	74 07                	je     40fb19 <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f5>
  40fb12:	b8 01 00 00 00       	mov    $0x1,%eax
  40fb17:	eb 05                	jmp    40fb1e <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2fa>
  40fb19:	b8 00 00 00 00       	mov    $0x0,%eax
  40fb1e:	84 c0                	test   %al,%al
  40fb20:	74 4c                	je     40fb6e <_ZNKSt8__format15__formatter_intIcE6formatIiNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x34a>
	      __start -= __base_prefix.size();
  40fb22:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fb29:	48 89 c7             	mov    %rax,%rdi
  40fb2c:	e8 e5 61 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fb31:	48 f7 d8             	neg    %rax
  40fb34:	48 01 45 e0          	add    %rax,-0x20(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40fb38:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fb3f:	48 89 c7             	mov    %rax,%rdi
  40fb42:	e8 cf 61 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fb47:	48 89 c3             	mov    %rax,%rbx
  40fb4a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fb51:	48 89 c7             	mov    %rax,%rdi
  40fb54:	e8 81 79 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40fb59:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40fb5d:	48 89 d1             	mov    %rdx,%rcx
  40fb60:	48 89 da             	mov    %rbx,%rdx
  40fb63:	48 89 c6             	mov    %rax,%rsi
  40fb66:	48 89 cf             	mov    %rcx,%rdi
  40fb69:	e8 c2 46 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40fb6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fb72:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40fb76:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fb7d:	0f b6 00             	movzbl (%rax),%eax
  40fb80:	c0 e8 02             	shr    $0x2,%al
  40fb83:	83 e0 03             	and    $0x3,%eax
  40fb86:	0f b6 c8             	movzbl %al,%ecx
  40fb89:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40fb8f:	89 ce                	mov    %ecx,%esi
  40fb91:	89 c7                	mov    %eax,%edi
  40fb93:	e8 d4 51 00 00       	call   414d6c <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_>
  40fb98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			       __start_digits - __start, __fc);
  40fb9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40fba0:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40fba4:	48 89 c3             	mov    %rax,%rbx
  40fba7:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40fbae:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  40fbb2:	48 89 c2             	mov    %rax,%rdx
  40fbb5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40fbb9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40fbbd:	48 89 ce             	mov    %rcx,%rsi
  40fbc0:	48 89 c7             	mov    %rax,%rdi
  40fbc3:	e8 24 79 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40fbc8:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40fbcf:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40fbd3:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40fbd7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fbde:	49 89 c8             	mov    %rcx,%r8
  40fbe1:	48 89 d9             	mov    %rbx,%rcx
  40fbe4:	48 89 c7             	mov    %rax,%rdi
  40fbe7:	e8 88 5a 00 00       	call   415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40fbec:	90                   	nop
	}
  40fbed:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40fbf1:	c9                   	leave
  40fbf2:	c3                   	ret
  40fbf3:	90                   	nop

000000000040fbf4 <_ZNSt8__format15__formatter_intIcE8_M_parseIjEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40fbf4:	55                   	push   %rbp
  40fbf5:	48 89 e5             	mov    %rsp,%rbp
  40fbf8:	48 83 ec 10          	sub    $0x10,%rsp
  40fbfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40fc00:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40fc04:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40fc08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fc0c:	ba 01 00 00 00       	mov    $0x1,%edx
  40fc11:	48 89 ce             	mov    %rcx,%rsi
  40fc14:	48 89 c7             	mov    %rax,%rdi
  40fc17:	e8 ba 6d ff ff       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  40fc1c:	c9                   	leave
  40fc1d:	c3                   	ret

000000000040fc1e <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  40fc1e:	55                   	push   %rbp
  40fc1f:	48 89 e5             	mov    %rsp,%rbp
  40fc22:	53                   	push   %rbx
  40fc23:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  40fc2a:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  40fc31:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  40fc37:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  40fc3e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fc45:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fc49:	83 e0 78             	and    $0x78,%eax
  40fc4c:	3c 38                	cmp    $0x38,%al
  40fc4e:	75 2d                	jne    40fc7d <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f>
	    return _M_format_character(_S_to_character(__i), __fc);
  40fc50:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40fc56:	89 c7                	mov    %eax,%edi
  40fc58:	e8 de 5e 00 00       	call   415b3b <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_>
  40fc5d:	0f be c8             	movsbl %al,%ecx
  40fc60:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40fc67:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fc6e:	89 ce                	mov    %ecx,%esi
  40fc70:	48 89 c7             	mov    %rax,%rdi
  40fc73:	e8 86 f7 ff ff       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  40fc78:	e9 54 03 00 00       	jmp    40ffd1 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3b3>
	  to_chars_result __res{};
  40fc7d:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  40fc84:	00 00 00 00
  40fc88:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  40fc8f:	00 00 00 00
	  string_view __base_prefix;
  40fc93:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  40fc9a:	00 00 00 00
  40fc9e:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  40fca5:	00 00 00 00
	    __u = __i;
  40fca9:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40fcaf:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  char* __start = __buf + 3;
  40fcb2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40fcb9:	48 83 c0 03          	add    $0x3,%rax
  40fcbd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  40fcc1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40fcc8:	48 83 c0 23          	add    $0x23,%rax
  40fccc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  40fcd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fcd4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  40fcd8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fcdf:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fce3:	c0 e8 03             	shr    $0x3,%al
  40fce6:	83 e0 0f             	and    $0xf,%eax
  40fce9:	0f b6 c0             	movzbl %al,%eax
  40fcec:	83 f8 06             	cmp    $0x6,%eax
  40fcef:	0f 8f db 01 00 00    	jg     40fed0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fcf5:	83 f8 05             	cmp    $0x5,%eax
  40fcf8:	0f 8d 20 01 00 00    	jge    40fe1e <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x200>
  40fcfe:	83 f8 04             	cmp    $0x4,%eax
  40fd01:	0f 84 bc 00 00 00    	je     40fdc3 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1a5>
  40fd07:	83 f8 04             	cmp    $0x4,%eax
  40fd0a:	0f 8f c0 01 00 00    	jg     40fed0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fd10:	83 f8 01             	cmp    $0x1,%eax
  40fd13:	7f 09                	jg     40fd1e <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x100>
  40fd15:	85 c0                	test   %eax,%eax
  40fd17:	79 7f                	jns    40fd98 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
  40fd19:	e9 b2 01 00 00       	jmp    40fed0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fd1e:	83 e8 02             	sub    $0x2,%eax
  40fd21:	83 f8 01             	cmp    $0x1,%eax
  40fd24:	0f 87 a6 01 00 00    	ja     40fed0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  40fd2a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fd31:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fd35:	83 e0 78             	and    $0x78,%eax
  40fd38:	3c 10                	cmp    $0x10,%al
  40fd3a:	75 07                	jne    40fd43 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x125>
  40fd3c:	ba f2 b3 41 00       	mov    $0x41b3f2,%edx
  40fd41:	eb 05                	jmp    40fd48 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12a>
  40fd43:	ba f5 b3 41 00       	mov    $0x41b3f5,%edx
  40fd48:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40fd4c:	48 89 d6             	mov    %rdx,%rsi
  40fd4f:	48 89 c7             	mov    %rax,%rdi
  40fd52:	e8 29 5e ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40fd57:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40fd5b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40fd5f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fd66:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  40fd6d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fd70:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fd74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fd78:	b9 02 00 00 00       	mov    $0x2,%ecx
  40fd7d:	48 89 c7             	mov    %rax,%rdi
  40fd80:	e8 88 5d 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fd85:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fd8c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40fd93:	e9 39 01 00 00       	jmp    40fed1 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      __res = to_chars(__start, __end, __u, 10);
  40fd98:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fd9b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fd9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fda3:	b9 0a 00 00 00       	mov    $0xa,%ecx
  40fda8:	48 89 c7             	mov    %rax,%rdi
  40fdab:	e8 5d 5d 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fdb0:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fdb7:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40fdbe:	e9 0e 01 00 00       	jmp    40fed1 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      if (__i != 0)
  40fdc3:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
  40fdca:	74 27                	je     40fdf3 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1d5>
		__base_prefix = "0";
  40fdcc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40fdd0:	be f8 b3 41 00       	mov    $0x41b3f8,%esi
  40fdd5:	48 89 c7             	mov    %rax,%rdi
  40fdd8:	e8 a3 5d ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40fddd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40fde1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40fde5:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fdec:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  40fdf3:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fdf6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fdfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fdfe:	b9 08 00 00 00       	mov    $0x8,%ecx
  40fe03:	48 89 c7             	mov    %rax,%rdi
  40fe06:	e8 02 5d 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fe0b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fe12:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      break;
  40fe19:	e9 b3 00 00 00       	jmp    40fed1 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b3>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  40fe1e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fe25:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fe29:	83 e0 78             	and    $0x78,%eax
  40fe2c:	3c 28                	cmp    $0x28,%al
  40fe2e:	75 07                	jne    40fe37 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x219>
  40fe30:	ba fa b3 41 00       	mov    $0x41b3fa,%edx
  40fe35:	eb 05                	jmp    40fe3c <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x21e>
  40fe37:	ba fd b3 41 00       	mov    $0x41b3fd,%edx
  40fe3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40fe40:	48 89 d6             	mov    %rdx,%rsi
  40fe43:	48 89 c7             	mov    %rax,%rdi
  40fe46:	e8 35 5d ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  40fe4b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40fe4f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40fe53:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40fe5a:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  40fe61:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40fe64:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  40fe68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fe6c:	b9 10 00 00 00       	mov    $0x10,%ecx
  40fe71:	48 89 c7             	mov    %rax,%rdi
  40fe74:	e8 94 5c 00 00       	call   415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>
  40fe79:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  40fe80:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  40fe87:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fe8e:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40fe92:	83 e0 78             	and    $0x78,%eax
  40fe95:	3c 30                	cmp    $0x30,%al
  40fe97:	75 37                	jne    40fed0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40fe99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40fe9d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40fea1:	eb 1e                	jmp    40fec1 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2a3>
		  *__p = __builtin_toupper(*__p);
  40fea3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40fea7:	0f b6 00             	movzbl (%rax),%eax
  40feaa:	0f be c0             	movsbl %al,%eax
  40fead:	89 c7                	mov    %eax,%edi
  40feaf:	e8 6c 45 ff ff       	call   404420 <toupper@plt>
  40feb4:	89 c2                	mov    %eax,%edx
  40feb6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40feba:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  40febc:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  40fec1:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40fec8:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  40fecc:	75 d5                	jne    40fea3 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x285>
	      break;
  40fece:	eb 00                	jmp    40fed0 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b2>
  40fed0:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  40fed1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40fed8:	0f b6 00             	movzbl (%rax),%eax
  40fedb:	83 e0 10             	and    $0x10,%eax
  40fede:	84 c0                	test   %al,%al
  40fee0:	74 1b                	je     40fefd <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2df>
  40fee2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40fee9:	48 89 c7             	mov    %rax,%rdi
  40feec:	e8 25 5e ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40fef1:	48 85 c0             	test   %rax,%rax
  40fef4:	74 07                	je     40fefd <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2df>
  40fef6:	b8 01 00 00 00       	mov    $0x1,%eax
  40fefb:	eb 05                	jmp    40ff02 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2e4>
  40fefd:	b8 00 00 00 00       	mov    $0x0,%eax
  40ff02:	84 c0                	test   %al,%al
  40ff04:	74 4c                	je     40ff52 <_ZNKSt8__format15__formatter_intIcE6formatIjNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x334>
	      __start -= __base_prefix.size();
  40ff06:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ff0d:	48 89 c7             	mov    %rax,%rdi
  40ff10:	e8 01 5e ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40ff15:	48 f7 d8             	neg    %rax
  40ff18:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  40ff1c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ff23:	48 89 c7             	mov    %rax,%rdi
  40ff26:	e8 eb 5d ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  40ff2b:	48 89 c3             	mov    %rax,%rbx
  40ff2e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  40ff35:	48 89 c7             	mov    %rax,%rdi
  40ff38:	e8 9d 75 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  40ff3d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40ff41:	48 89 d1             	mov    %rdx,%rcx
  40ff44:	48 89 da             	mov    %rbx,%rdx
  40ff47:	48 89 c6             	mov    %rax,%rsi
  40ff4a:	48 89 cf             	mov    %rcx,%rdi
  40ff4d:	e8 de 42 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  40ff52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ff56:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40ff5a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ff61:	0f b6 00             	movzbl (%rax),%eax
  40ff64:	c0 e8 02             	shr    $0x2,%al
  40ff67:	83 e0 03             	and    $0x3,%eax
  40ff6a:	0f b6 c8             	movzbl %al,%ecx
  40ff6d:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  40ff73:	89 ce                	mov    %ecx,%esi
  40ff75:	89 c7                	mov    %eax,%edi
  40ff77:	e8 b9 4d 00 00       	call   414d35 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_>
  40ff7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  40ff80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40ff84:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  40ff88:	48 89 c3             	mov    %rax,%rbx
  40ff8b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40ff92:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  40ff96:	48 89 c2             	mov    %rax,%rdx
  40ff99:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40ff9d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40ffa1:	48 89 ce             	mov    %rcx,%rsi
  40ffa4:	48 89 c7             	mov    %rax,%rdi
  40ffa7:	e8 40 75 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  40ffac:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  40ffb3:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  40ffb7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40ffbb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40ffc2:	49 89 c8             	mov    %rcx,%r8
  40ffc5:	48 89 d9             	mov    %rbx,%rcx
  40ffc8:	48 89 c7             	mov    %rax,%rdi
  40ffcb:	e8 a4 56 00 00       	call   415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  40ffd0:	90                   	nop
	}
  40ffd1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  40ffd5:	c9                   	leave
  40ffd6:	c3                   	ret
  40ffd7:	90                   	nop

000000000040ffd8 <_ZNSt8__format15__formatter_intIcE8_M_parseIxEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  40ffd8:	55                   	push   %rbp
  40ffd9:	48 89 e5             	mov    %rsp,%rbp
  40ffdc:	48 83 ec 10          	sub    $0x10,%rsp
  40ffe0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ffe4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  40ffe8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40ffec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40fff0:	ba 01 00 00 00       	mov    $0x1,%edx
  40fff5:	48 89 ce             	mov    %rcx,%rsi
  40fff8:	48 89 c7             	mov    %rax,%rdi
  40fffb:	e8 d6 69 ff ff       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  410000:	c9                   	leave
  410001:	c3                   	ret

0000000000410002 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  410002:	55                   	push   %rbp
  410003:	48 89 e5             	mov    %rsp,%rbp
  410006:	53                   	push   %rbx
  410007:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  41000e:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  410015:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  41001c:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  410023:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41002a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41002e:	83 e0 78             	and    $0x78,%eax
  410031:	3c 38                	cmp    $0x38,%al
  410033:	75 2f                	jne    410064 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  410035:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  41003c:	48 89 c7             	mov    %rax,%rdi
  41003f:	e8 19 5b 00 00       	call   415b5d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_>
  410044:	0f be c8             	movsbl %al,%ecx
  410047:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  41004e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410055:	89 ce                	mov    %ecx,%esi
  410057:	48 89 c7             	mov    %rax,%rdi
  41005a:	e8 9f f3 ff ff       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  41005f:	e9 7b 03 00 00       	jmp    4103df <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3dd>
	  to_chars_result __res{};
  410064:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  41006b:	00 00 00 00
  41006f:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
  410076:	00 00 00 00
	  string_view __base_prefix;
  41007a:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  410081:	00 00 00 00
  410085:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
  41008c:	00 00 00 00
	  if (__i < 0)
  410090:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  410097:	00
  410098:	79 10                	jns    4100aa <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa8>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  41009a:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  4100a1:	48 f7 d8             	neg    %rax
  4100a4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4100a8:	eb 0b                	jmp    4100b5 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb3>
	    __u = __i;
  4100aa:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  4100b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __start = __buf + 3;
  4100b5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4100bc:	48 83 c0 03          	add    $0x3,%rax
  4100c0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  4100c4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4100cb:	48 83 c0 43          	add    $0x43,%rax
  4100cf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  4100d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4100d7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  4100db:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4100e2:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4100e6:	c0 e8 03             	shr    $0x3,%al
  4100e9:	83 e0 0f             	and    $0xf,%eax
  4100ec:	0f b6 c0             	movzbl %al,%eax
  4100ef:	83 f8 06             	cmp    $0x6,%eax
  4100f2:	0f 8f e4 01 00 00    	jg     4102dc <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  4100f8:	83 f8 05             	cmp    $0x5,%eax
  4100fb:	0f 8d 28 01 00 00    	jge    410229 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x227>
  410101:	83 f8 04             	cmp    $0x4,%eax
  410104:	0f 84 c2 00 00 00    	je     4101cc <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1ca>
  41010a:	83 f8 04             	cmp    $0x4,%eax
  41010d:	0f 8f c9 01 00 00    	jg     4102dc <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  410113:	83 f8 01             	cmp    $0x1,%eax
  410116:	7f 0d                	jg     410125 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x123>
  410118:	85 c0                	test   %eax,%eax
  41011a:	0f 89 80 00 00 00    	jns    4101a0 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x19e>
  410120:	e9 b7 01 00 00       	jmp    4102dc <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  410125:	83 e8 02             	sub    $0x2,%eax
  410128:	83 f8 01             	cmp    $0x1,%eax
  41012b:	0f 87 ab 01 00 00    	ja     4102dc <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  410131:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410138:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41013c:	83 e0 78             	and    $0x78,%eax
  41013f:	3c 10                	cmp    $0x10,%al
  410141:	75 07                	jne    41014a <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x148>
  410143:	ba f2 b3 41 00       	mov    $0x41b3f2,%edx
  410148:	eb 05                	jmp    41014f <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x14d>
  41014a:	ba f5 b3 41 00       	mov    $0x41b3f5,%edx
  41014f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  410153:	48 89 d6             	mov    %rdx,%rsi
  410156:	48 89 c7             	mov    %rax,%rdi
  410159:	e8 22 5a ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  41015e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  410162:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  410166:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  41016d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  410174:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410178:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  41017c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410180:	b9 02 00 00 00       	mov    $0x2,%ecx
  410185:	48 89 c7             	mov    %rax,%rdi
  410188:	e8 fc 59 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  41018d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410194:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  41019b:	e9 3d 01 00 00       	jmp    4102dd <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      __res = to_chars(__start, __end, __u, 10);
  4101a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4101a4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4101a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4101ac:	b9 0a 00 00 00       	mov    $0xa,%ecx
  4101b1:	48 89 c7             	mov    %rax,%rdi
  4101b4:	e8 d0 59 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  4101b9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4101c0:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  4101c7:	e9 11 01 00 00       	jmp    4102dd <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      if (__i != 0)
  4101cc:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  4101d3:	00
  4101d4:	74 27                	je     4101fd <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1fb>
		__base_prefix = "0";
  4101d6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4101da:	be f8 b3 41 00       	mov    $0x41b3f8,%esi
  4101df:	48 89 c7             	mov    %rax,%rdi
  4101e2:	e8 99 59 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  4101e7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4101eb:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4101ef:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4101f6:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  4101fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410201:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  410205:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410209:	b9 08 00 00 00       	mov    $0x8,%ecx
  41020e:	48 89 c7             	mov    %rax,%rdi
  410211:	e8 73 59 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  410216:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  41021d:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  410224:	e9 b4 00 00 00       	jmp    4102dd <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2db>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  410229:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410230:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410234:	83 e0 78             	and    $0x78,%eax
  410237:	3c 28                	cmp    $0x28,%al
  410239:	75 07                	jne    410242 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x240>
  41023b:	ba fa b3 41 00       	mov    $0x41b3fa,%edx
  410240:	eb 05                	jmp    410247 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x245>
  410242:	ba fd b3 41 00       	mov    $0x41b3fd,%edx
  410247:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41024b:	48 89 d6             	mov    %rdx,%rsi
  41024e:	48 89 c7             	mov    %rax,%rdi
  410251:	e8 2a 59 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  410256:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41025a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41025e:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  410265:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  41026c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410270:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  410274:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410278:	b9 10 00 00 00       	mov    $0x10,%ecx
  41027d:	48 89 c7             	mov    %rax,%rdi
  410280:	e8 04 59 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  410285:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  41028c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  410293:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41029a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41029e:	83 e0 78             	and    $0x78,%eax
  4102a1:	3c 30                	cmp    $0x30,%al
  4102a3:	75 37                	jne    4102dc <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4102a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4102a9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4102ad:	eb 1e                	jmp    4102cd <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2cb>
		  *__p = __builtin_toupper(*__p);
  4102af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4102b3:	0f b6 00             	movzbl (%rax),%eax
  4102b6:	0f be c0             	movsbl %al,%eax
  4102b9:	89 c7                	mov    %eax,%edi
  4102bb:	e8 60 41 ff ff       	call   404420 <toupper@plt>
  4102c0:	89 c2                	mov    %eax,%edx
  4102c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4102c6:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4102c8:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  4102cd:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  4102d4:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  4102d8:	75 d5                	jne    4102af <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ad>
	      break;
  4102da:	eb 00                	jmp    4102dc <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2da>
  4102dc:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  4102dd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4102e4:	0f b6 00             	movzbl (%rax),%eax
  4102e7:	83 e0 10             	and    $0x10,%eax
  4102ea:	84 c0                	test   %al,%al
  4102ec:	74 1b                	je     410309 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x307>
  4102ee:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4102f5:	48 89 c7             	mov    %rax,%rdi
  4102f8:	e8 19 5a ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4102fd:	48 85 c0             	test   %rax,%rax
  410300:	74 07                	je     410309 <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x307>
  410302:	b8 01 00 00 00       	mov    $0x1,%eax
  410307:	eb 05                	jmp    41030e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x30c>
  410309:	b8 00 00 00 00       	mov    $0x0,%eax
  41030e:	84 c0                	test   %al,%al
  410310:	74 4c                	je     41035e <_ZNKSt8__format15__formatter_intIcE6formatIxNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x35c>
	      __start -= __base_prefix.size();
  410312:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  410319:	48 89 c7             	mov    %rax,%rdi
  41031c:	e8 f5 59 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410321:	48 f7 d8             	neg    %rax
  410324:	48 01 45 e0          	add    %rax,-0x20(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  410328:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  41032f:	48 89 c7             	mov    %rax,%rdi
  410332:	e8 df 59 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410337:	48 89 c3             	mov    %rax,%rbx
  41033a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  410341:	48 89 c7             	mov    %rax,%rdi
  410344:	e8 91 71 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  410349:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41034d:	48 89 d1             	mov    %rdx,%rcx
  410350:	48 89 da             	mov    %rbx,%rdx
  410353:	48 89 c6             	mov    %rax,%rsi
  410356:	48 89 cf             	mov    %rcx,%rdi
  410359:	e8 d2 3e ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  41035e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410362:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  410366:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41036d:	0f b6 00             	movzbl (%rax),%eax
  410370:	c0 e8 02             	shr    $0x2,%al
  410373:	83 e0 03             	and    $0x3,%eax
  410376:	0f b6 c8             	movzbl %al,%ecx
  410379:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  410380:	89 ce                	mov    %ecx,%esi
  410382:	48 89 c7             	mov    %rax,%rdi
  410385:	e8 28 4a 00 00       	call   414db2 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_>
  41038a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			       __start_digits - __start, __fc);
  41038e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410392:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  410396:	48 89 c3             	mov    %rax,%rbx
  410399:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  4103a0:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  4103a4:	48 89 c2             	mov    %rax,%rdx
  4103a7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4103ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4103af:	48 89 ce             	mov    %rcx,%rsi
  4103b2:	48 89 c7             	mov    %rax,%rdi
  4103b5:	e8 32 71 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  4103ba:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  4103c1:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  4103c5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4103c9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4103d0:	49 89 c8             	mov    %rcx,%r8
  4103d3:	48 89 d9             	mov    %rbx,%rcx
  4103d6:	48 89 c7             	mov    %rax,%rdi
  4103d9:	e8 96 52 00 00       	call   415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  4103de:	90                   	nop
	}
  4103df:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4103e3:	c9                   	leave
  4103e4:	c3                   	ret
  4103e5:	90                   	nop

00000000004103e6 <_ZNSt8__format15__formatter_intIcE8_M_parseIyEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  4103e6:	55                   	push   %rbp
  4103e7:	48 89 e5             	mov    %rsp,%rbp
  4103ea:	48 83 ec 10          	sub    $0x10,%rsp
  4103ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4103f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  4103f6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4103fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4103fe:	ba 01 00 00 00       	mov    $0x1,%edx
  410403:	48 89 ce             	mov    %rcx,%rsi
  410406:	48 89 c7             	mov    %rax,%rdi
  410409:	e8 c8 65 ff ff       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  41040e:	c9                   	leave
  41040f:	c3                   	ret

0000000000410410 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  410410:	55                   	push   %rbp
  410411:	48 89 e5             	mov    %rsp,%rbp
  410414:	53                   	push   %rbx
  410415:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  41041c:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  410423:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  41042a:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  410431:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410438:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41043c:	83 e0 78             	and    $0x78,%eax
  41043f:	3c 38                	cmp    $0x38,%al
  410441:	75 2f                	jne    410472 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x62>
	    return _M_format_character(_S_to_character(__i), __fc);
  410443:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  41044a:	48 89 c7             	mov    %rax,%rdi
  41044d:	e8 67 57 00 00       	call   415bb9 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_>
  410452:	0f be c8             	movsbl %al,%ecx
  410455:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  41045c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410463:	89 ce                	mov    %ecx,%esi
  410465:	48 89 c7             	mov    %rax,%rdi
  410468:	e8 91 ef ff ff       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  41046d:	e9 61 03 00 00       	jmp    4107d3 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
	  to_chars_result __res{};
  410472:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  410479:	00 00 00 00
  41047d:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
  410484:	00 00 00 00
	  string_view __base_prefix;
  410488:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  41048f:	00 00 00 00
  410493:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
  41049a:	00 00 00 00
	    __u = __i;
  41049e:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  4104a5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  char* __start = __buf + 3;
  4104a9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4104b0:	48 83 c0 03          	add    $0x3,%rax
  4104b4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  4104b8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4104bf:	48 83 c0 43          	add    $0x43,%rax
  4104c3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  char* const __start_digits = __start;
  4104c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4104cb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  switch (_M_spec._M_type)
  4104cf:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4104d6:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4104da:	c0 e8 03             	shr    $0x3,%al
  4104dd:	83 e0 0f             	and    $0xf,%eax
  4104e0:	0f b6 c0             	movzbl %al,%eax
  4104e3:	83 f8 06             	cmp    $0x6,%eax
  4104e6:	0f 8f e4 01 00 00    	jg     4106d0 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  4104ec:	83 f8 05             	cmp    $0x5,%eax
  4104ef:	0f 8d 28 01 00 00    	jge    41061d <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x20d>
  4104f5:	83 f8 04             	cmp    $0x4,%eax
  4104f8:	0f 84 c2 00 00 00    	je     4105c0 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1b0>
  4104fe:	83 f8 04             	cmp    $0x4,%eax
  410501:	0f 8f c9 01 00 00    	jg     4106d0 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  410507:	83 f8 01             	cmp    $0x1,%eax
  41050a:	7f 0d                	jg     410519 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x109>
  41050c:	85 c0                	test   %eax,%eax
  41050e:	0f 89 80 00 00 00    	jns    410594 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x184>
  410514:	e9 b7 01 00 00       	jmp    4106d0 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  410519:	83 e8 02             	sub    $0x2,%eax
  41051c:	83 f8 01             	cmp    $0x1,%eax
  41051f:	0f 87 ab 01 00 00    	ja     4106d0 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  410525:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41052c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410530:	83 e0 78             	and    $0x78,%eax
  410533:	3c 10                	cmp    $0x10,%al
  410535:	75 07                	jne    41053e <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x12e>
  410537:	ba f2 b3 41 00       	mov    $0x41b3f2,%edx
  41053c:	eb 05                	jmp    410543 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x133>
  41053e:	ba f5 b3 41 00       	mov    $0x41b3f5,%edx
  410543:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  410547:	48 89 d6             	mov    %rdx,%rsi
  41054a:	48 89 c7             	mov    %rax,%rdi
  41054d:	e8 2e 56 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  410552:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  410556:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  41055a:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  410561:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  410568:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41056c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  410570:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410574:	b9 02 00 00 00       	mov    $0x2,%ecx
  410579:	48 89 c7             	mov    %rax,%rdi
  41057c:	e8 08 56 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  410581:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410588:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  41058f:	e9 3d 01 00 00       	jmp    4106d1 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      __res = to_chars(__start, __end, __u, 10);
  410594:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  410598:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  41059c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4105a0:	b9 0a 00 00 00       	mov    $0xa,%ecx
  4105a5:	48 89 c7             	mov    %rax,%rdi
  4105a8:	e8 dc 55 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  4105ad:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4105b4:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  4105bb:	e9 11 01 00 00       	jmp    4106d1 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      if (__i != 0)
  4105c0:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
  4105c7:	00
  4105c8:	74 27                	je     4105f1 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1e1>
		__base_prefix = "0";
  4105ca:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4105ce:	be f8 b3 41 00       	mov    $0x41b3f8,%esi
  4105d3:	48 89 c7             	mov    %rax,%rdi
  4105d6:	e8 a5 55 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  4105db:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4105df:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4105e3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4105ea:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  4105f1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4105f5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4105f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4105fd:	b9 08 00 00 00       	mov    $0x8,%ecx
  410602:	48 89 c7             	mov    %rax,%rdi
  410605:	e8 7f 55 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  41060a:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410611:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      break;
  410618:	e9 b4 00 00 00       	jmp    4106d1 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c1>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  41061d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410624:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410628:	83 e0 78             	and    $0x78,%eax
  41062b:	3c 28                	cmp    $0x28,%al
  41062d:	75 07                	jne    410636 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
  41062f:	ba fa b3 41 00       	mov    $0x41b3fa,%edx
  410634:	eb 05                	jmp    41063b <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x22b>
  410636:	ba fd b3 41 00       	mov    $0x41b3fd,%edx
  41063b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41063f:	48 89 d6             	mov    %rdx,%rsi
  410642:	48 89 c7             	mov    %rax,%rdi
  410645:	e8 36 55 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  41064a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41064e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  410652:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  410659:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  410660:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  410664:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  410668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41066c:	b9 10 00 00 00       	mov    $0x10,%ecx
  410671:	48 89 c7             	mov    %rax,%rdi
  410674:	e8 10 55 00 00       	call   415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>
  410679:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  410680:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  410687:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41068e:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410692:	83 e0 78             	and    $0x78,%eax
  410695:	3c 30                	cmp    $0x30,%al
  410697:	75 37                	jne    4106d0 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  410699:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41069d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4106a1:	eb 1e                	jmp    4106c1 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2b1>
		  *__p = __builtin_toupper(*__p);
  4106a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4106a7:	0f b6 00             	movzbl (%rax),%eax
  4106aa:	0f be c0             	movsbl %al,%eax
  4106ad:	89 c7                	mov    %eax,%edi
  4106af:	e8 6c 3d ff ff       	call   404420 <toupper@plt>
  4106b4:	89 c2                	mov    %eax,%edx
  4106b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4106ba:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4106bc:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  4106c1:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  4106c8:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  4106cc:	75 d5                	jne    4106a3 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x293>
	      break;
  4106ce:	eb 00                	jmp    4106d0 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2c0>
  4106d0:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  4106d1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4106d8:	0f b6 00             	movzbl (%rax),%eax
  4106db:	83 e0 10             	and    $0x10,%eax
  4106de:	84 c0                	test   %al,%al
  4106e0:	74 1b                	je     4106fd <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ed>
  4106e2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  4106e9:	48 89 c7             	mov    %rax,%rdi
  4106ec:	e8 25 56 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4106f1:	48 85 c0             	test   %rax,%rax
  4106f4:	74 07                	je     4106fd <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2ed>
  4106f6:	b8 01 00 00 00       	mov    $0x1,%eax
  4106fb:	eb 05                	jmp    410702 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2f2>
  4106fd:	b8 00 00 00 00       	mov    $0x0,%eax
  410702:	84 c0                	test   %al,%al
  410704:	74 4c                	je     410752 <_ZNKSt8__format15__formatter_intIcE6formatIyNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __start -= __base_prefix.size();
  410706:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  41070d:	48 89 c7             	mov    %rax,%rdi
  410710:	e8 01 56 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  410715:	48 f7 d8             	neg    %rax
  410718:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  41071c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  410723:	48 89 c7             	mov    %rax,%rdi
  410726:	e8 eb 55 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41072b:	48 89 c3             	mov    %rax,%rbx
  41072e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  410735:	48 89 c7             	mov    %rax,%rdi
  410738:	e8 9d 6d ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  41073d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410741:	48 89 d1             	mov    %rdx,%rcx
  410744:	48 89 da             	mov    %rbx,%rdx
  410747:	48 89 c6             	mov    %rax,%rsi
  41074a:	48 89 cf             	mov    %rcx,%rdi
  41074d:	e8 de 3a ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  410752:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410756:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  41075a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  410761:	0f b6 00             	movzbl (%rax),%eax
  410764:	c0 e8 02             	shr    $0x2,%al
  410767:	83 e0 03             	and    $0x3,%eax
  41076a:	0f b6 c8             	movzbl %al,%ecx
  41076d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  410774:	89 ce                	mov    %ecx,%esi
  410776:	48 89 c7             	mov    %rax,%rdi
  410779:	e8 7c 46 00 00       	call   414dfa <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_>
  41077e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  410782:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  410786:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  41078a:	48 89 c3             	mov    %rax,%rbx
  41078d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  410794:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  410798:	48 89 c2             	mov    %rax,%rdx
  41079b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41079f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4107a3:	48 89 ce             	mov    %rcx,%rsi
  4107a6:	48 89 c7             	mov    %rax,%rdi
  4107a9:	e8 3e 6d ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  4107ae:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  4107b5:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  4107b9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4107bd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4107c4:	49 89 c8             	mov    %rcx,%r8
  4107c7:	48 89 d9             	mov    %rbx,%rcx
  4107ca:	48 89 c7             	mov    %rax,%rdi
  4107cd:	e8 a2 4e 00 00       	call   415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  4107d2:	90                   	nop
	}
  4107d3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4107d7:	c9                   	leave
  4107d8:	c3                   	ret
  4107d9:	90                   	nop

00000000004107da <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>:
	auto __finalize = [this, &__spec] {
  4107da:	55                   	push   %rbp
  4107db:	48 89 e5             	mov    %rsp,%rbp
  4107de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  _M_spec = __spec;
  4107e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4107e6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4107ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4107ee:	48 8b 00             	mov    (%rax),%rax
  4107f1:	48 8b 0a             	mov    (%rdx),%rcx
  4107f4:	48 89 08             	mov    %rcx,(%rax)
  4107f7:	8b 52 08             	mov    0x8(%rdx),%edx
  4107fa:	89 50 08             	mov    %edx,0x8(%rax)
	auto __finalize = [this, &__spec] {
  4107fd:	90                   	nop
  4107fe:	5d                   	pop    %rbp
  4107ff:	c3                   	ret

0000000000410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>:
	auto __finished = [&] {
  410800:	55                   	push   %rbp
  410801:	48 89 e5             	mov    %rsp,%rbp
  410804:	48 83 ec 10          	sub    $0x10,%rsp
  410808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (__first == __last || *__first == '}')
  41080c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410810:	48 8b 00             	mov    (%rax),%rax
  410813:	48 8b 10             	mov    (%rax),%rdx
  410816:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41081a:	48 8b 40 08          	mov    0x8(%rax),%rax
  41081e:	48 8b 00             	mov    (%rax),%rax
  410821:	48 39 c2             	cmp    %rax,%rdx
  410824:	74 11                	je     410837 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x37>
  410826:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41082a:	48 8b 00             	mov    (%rax),%rax
  41082d:	48 8b 00             	mov    (%rax),%rax
  410830:	0f b6 00             	movzbl (%rax),%eax
  410833:	3c 7d                	cmp    $0x7d,%al
  410835:	75 17                	jne    41084e <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x4e>
	      __finalize();
  410837:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41083b:	48 8b 40 10          	mov    0x10(%rax),%rax
  41083f:	48 89 c7             	mov    %rax,%rdi
  410842:	e8 93 ff ff ff       	call   4107da <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE_clEv>
	      return true;
  410847:	b8 01 00 00 00       	mov    $0x1,%eax
  41084c:	eb 05                	jmp    410853 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv+0x53>
	  return false;
  41084e:	b8 00 00 00 00       	mov    $0x0,%eax
	auto __finished = [&] {
  410853:	c9                   	leave
  410854:	c3                   	ret
  410855:	90                   	nop

0000000000410856 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE>:
      parse(basic_format_parse_context<_CharT>& __pc)
  410856:	55                   	push   %rbp
  410857:	48 89 e5             	mov    %rsp,%rbp
  41085a:	48 83 ec 60          	sub    $0x60,%rsp
  41085e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  410862:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	_Spec<_CharT> __spec{};
  410866:	48 c7 45 f4 00 00 00 	movq   $0x0,-0xc(%rbp)
  41086d:	00
  41086e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  410875:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
	const auto __last = __pc.end();
  41087c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410880:	48 89 c7             	mov    %rax,%rdi
  410883:	e8 66 59 ff ff       	call   4061ee <_ZNKSt26basic_format_parse_contextIcE3endEv>
  410888:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto __first = __pc.begin();
  41088c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  410890:	48 89 c7             	mov    %rax,%rdi
  410893:	e8 26 59 ff ff       	call   4061be <_ZNKSt26basic_format_parse_contextIcE5beginEv>
  410898:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto __finalize = [this, &__spec] {
  41089c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4108a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4108a4:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4108a8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto __finished = [&] {
  4108ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4108b0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4108b4:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  4108b8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4108bc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4108c0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (__finished())
  4108c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4108c8:	48 89 c7             	mov    %rax,%rdi
  4108cb:	e8 30 ff ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4108d0:	84 c0                	test   %al,%al
  4108d2:	74 09                	je     4108dd <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x87>
	  return __first;
  4108d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4108d8:	e9 96 02 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_fill_and_align(__first, __last);
  4108dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4108e1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4108e5:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4108e9:	48 89 ce             	mov    %rcx,%rsi
  4108ec:	48 89 c7             	mov    %rax,%rdi
  4108ef:	e8 72 7d ff ff       	call   408666 <_ZNSt8__format5_SpecIcE23_M_parse_fill_and_alignEPKcS3_>
  4108f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  4108f8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4108fc:	48 89 c7             	mov    %rax,%rdi
  4108ff:	e8 fc fe ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410904:	84 c0                	test   %al,%al
  410906:	74 09                	je     410911 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0xbb>
	  return __first;
  410908:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41090c:	e9 62 02 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_sign(__first, __last);
  410911:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410915:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  410919:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  41091d:	48 89 ce             	mov    %rcx,%rsi
  410920:	48 89 c7             	mov    %rax,%rdi
  410923:	e8 da 82 ff ff       	call   408c02 <_ZNSt8__format5_SpecIcE13_M_parse_signEPKcS3_>
  410928:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  41092c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410930:	48 89 c7             	mov    %rax,%rdi
  410933:	e8 c8 fe ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410938:	84 c0                	test   %al,%al
  41093a:	74 09                	je     410945 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0xef>
	  return __first;
  41093c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410940:	e9 2e 02 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_alternate_form(__first, __last);
  410945:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410949:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  41094d:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  410951:	48 89 ce             	mov    %rcx,%rsi
  410954:	48 89 c7             	mov    %rax,%rdi
  410957:	e8 02 83 ff ff       	call   408c5e <_ZNSt8__format5_SpecIcE23_M_parse_alternate_formEPKcS3_>
  41095c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  410960:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410964:	48 89 c7             	mov    %rax,%rdi
  410967:	e8 94 fe ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  41096c:	84 c0                	test   %al,%al
  41096e:	74 09                	je     410979 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x123>
	  return __first;
  410970:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410974:	e9 fa 01 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_zero_fill(__first, __last);
  410979:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41097d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  410981:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  410985:	48 89 ce             	mov    %rcx,%rsi
  410988:	48 89 c7             	mov    %rax,%rdi
  41098b:	e8 00 83 ff ff       	call   408c90 <_ZNSt8__format5_SpecIcE18_M_parse_zero_fillEPKcS3_>
  410990:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  410994:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410998:	48 89 c7             	mov    %rax,%rdi
  41099b:	e8 60 fe ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4109a0:	84 c0                	test   %al,%al
  4109a2:	74 09                	je     4109ad <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x157>
	  return __first;
  4109a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4109a8:	e9 c6 01 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	if (__first[0] != '.')
  4109ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4109b1:	0f b6 00             	movzbl (%rax),%eax
  4109b4:	3c 2e                	cmp    $0x2e,%al
  4109b6:	74 35                	je     4109ed <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x197>
	    __first = __spec._M_parse_width(__first, __last, __pc);
  4109b8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4109bc:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4109c0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4109c4:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4109c8:	48 89 c7             	mov    %rax,%rdi
  4109cb:	e8 28 7e ff ff       	call   4087f8 <_ZNSt8__format5_SpecIcE14_M_parse_widthEPKcS3_RSt26basic_format_parse_contextIcE>
  4109d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    if (__finished())
  4109d4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4109d8:	48 89 c7             	mov    %rax,%rdi
  4109db:	e8 20 fe ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  4109e0:	84 c0                	test   %al,%al
  4109e2:	74 09                	je     4109ed <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x197>
	      return __first;
  4109e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4109e8:	e9 86 01 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_precision(__first, __last, __pc);
  4109ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4109f1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4109f5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4109f9:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  4109fd:	48 89 c7             	mov    %rax,%rdi
  410a00:	e8 91 7e ff ff       	call   408896 <_ZNSt8__format5_SpecIcE18_M_parse_precisionEPKcS3_RSt26basic_format_parse_contextIcE>
  410a05:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  410a09:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410a0d:	48 89 c7             	mov    %rax,%rdi
  410a10:	e8 eb fd ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410a15:	84 c0                	test   %al,%al
  410a17:	74 09                	je     410a22 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x1cc>
	  return __first;
  410a19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410a1d:	e9 51 01 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__first = __spec._M_parse_locale(__first, __last);
  410a22:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410a26:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  410a2a:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  410a2e:	48 89 ce             	mov    %rcx,%rsi
  410a31:	48 89 c7             	mov    %rax,%rdi
  410a34:	e8 89 82 ff ff       	call   408cc2 <_ZNSt8__format5_SpecIcE15_M_parse_localeEPKcS3_>
  410a39:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (__finished())
  410a3d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410a41:	48 89 c7             	mov    %rax,%rdi
  410a44:	e8 b7 fd ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410a49:	84 c0                	test   %al,%al
  410a4b:	74 09                	je     410a56 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x200>
	  return __first;
  410a4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410a51:	e9 1d 01 00 00       	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	switch (*__first)
  410a56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410a5a:	0f b6 00             	movzbl (%rax),%eax
  410a5d:	0f be c0             	movsbl %al,%eax
  410a60:	83 e8 41             	sub    $0x41,%eax
  410a63:	83 f8 26             	cmp    $0x26,%eax
  410a66:	0f 87 ec 00 00 00    	ja     410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
  410a6c:	89 c0                	mov    %eax,%eax
  410a6e:	48 8b 04 c5 f0 e2 41 	mov    0x41e2f0(,%rax,8),%rax
  410a75:	00
  410a76:	ff e0                	jmp    *%rax
	    __spec._M_type = _Pres_a;
  410a78:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410a7c:	83 e0 87             	and    $0xffffff87,%eax
  410a7f:	83 c8 08             	or     $0x8,%eax
  410a82:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410a85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410a89:	48 83 c0 01          	add    $0x1,%rax
  410a8d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410a91:	e9 c2 00 00 00       	jmp    410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_A;
  410a96:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410a9a:	83 e0 87             	and    $0xffffff87,%eax
  410a9d:	83 c8 10             	or     $0x10,%eax
  410aa0:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410aa3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410aa7:	48 83 c0 01          	add    $0x1,%rax
  410aab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410aaf:	e9 a4 00 00 00       	jmp    410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_e;
  410ab4:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410ab8:	83 e0 87             	and    $0xffffff87,%eax
  410abb:	83 c8 18             	or     $0x18,%eax
  410abe:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410ac1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410ac5:	48 83 c0 01          	add    $0x1,%rax
  410ac9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410acd:	e9 86 00 00 00       	jmp    410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_E;
  410ad2:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410ad6:	83 e0 87             	and    $0xffffff87,%eax
  410ad9:	83 c8 20             	or     $0x20,%eax
  410adc:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410adf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410ae3:	48 83 c0 01          	add    $0x1,%rax
  410ae7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410aeb:	eb 6b                	jmp    410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_f;
  410aed:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410af1:	83 e0 87             	and    $0xffffff87,%eax
  410af4:	83 c8 28             	or     $0x28,%eax
  410af7:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410afa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410afe:	48 83 c0 01          	add    $0x1,%rax
  410b02:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410b06:	eb 50                	jmp    410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_F;
  410b08:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410b0c:	83 e0 87             	and    $0xffffff87,%eax
  410b0f:	83 c8 30             	or     $0x30,%eax
  410b12:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410b15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410b19:	48 83 c0 01          	add    $0x1,%rax
  410b1d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410b21:	eb 35                	jmp    410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_g;
  410b23:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410b27:	83 e0 87             	and    $0xffffff87,%eax
  410b2a:	83 c8 38             	or     $0x38,%eax
  410b2d:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410b30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410b34:	48 83 c0 01          	add    $0x1,%rax
  410b38:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410b3c:	eb 1a                	jmp    410b58 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x302>
	    __spec._M_type = _Pres_G;
  410b3e:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  410b42:	83 e0 87             	and    $0xffffff87,%eax
  410b45:	83 c8 40             	or     $0x40,%eax
  410b48:	88 45 f5             	mov    %al,-0xb(%rbp)
	    ++__first;
  410b4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410b4f:	48 83 c0 01          	add    $0x1,%rax
  410b53:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    break;
  410b57:	90                   	nop
	if (__finished())
  410b58:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  410b5c:	48 89 c7             	mov    %rax,%rdi
  410b5f:	e8 9c fc ff ff       	call   410800 <_ZZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcEENKUlvE0_clEv>
  410b64:	84 c0                	test   %al,%al
  410b66:	74 06                	je     410b6e <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x318>
	  return __first;
  410b68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  410b6c:	eb 05                	jmp    410b73 <_ZNSt8__format14__formatter_fpIcE5parseERSt26basic_format_parse_contextIcE+0x31d>
	__format::__failed_to_parse_format_spec();
  410b6e:	e8 b1 46 ff ff       	call   405224 <_ZNSt8__format29__failed_to_parse_format_specEv>
      }
  410b73:	c9                   	leave
  410b74:	c3                   	ret
  410b75:	90                   	nop

0000000000410b76 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  410b76:	55                   	push   %rbp
  410b77:	48 89 e5             	mov    %rsp,%rbp
  410b7a:	48 83 ec 20          	sub    $0x20,%rsp
  410b7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  410b82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  410b86:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  410b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410b8e:	48 8b 00             	mov    (%rax),%rax
  410b91:	0f b6 00             	movzbl (%rax),%eax
  410b94:	84 c0                	test   %al,%al
  410b96:	74 37                	je     410bcf <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x59>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  410b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410b9c:	48 8b 40 18          	mov    0x18(%rax),%rax
  410ba0:	48 8b 00             	mov    (%rax),%rax
  410ba3:	89 c1                	mov    %eax,%ecx
  410ba5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410ba9:	48 8b 40 10          	mov    0x10(%rax),%rax
  410bad:	8b 10                	mov    (%rax),%edx
  410baf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410bb3:	48 8b 40 08          	mov    0x8(%rax),%rax
  410bb7:	8b 38                	mov    (%rax),%edi
  410bb9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  410bbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  410bc1:	66 0f 6e c7          	movd   %edi,%xmm0
  410bc5:	48 89 c7             	mov    %rax,%rdi
  410bc8:	e8 03 37 ff ff       	call   4042d0 <_ZSt8to_charsPcS_fSt12chars_formati@plt>
  410bcd:	eb 5d                	jmp    410c2c <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb6>
	    else if (__fmt != chars_format{})
  410bcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410bd3:	48 8b 40 10          	mov    0x10(%rax),%rax
  410bd7:	8b 00                	mov    (%rax),%eax
  410bd9:	85 c0                	test   %eax,%eax
  410bdb:	74 2d                	je     410c0a <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x94>
	      return __format::to_chars(__b, __e, __v, __fmt);
  410bdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410be1:	48 8b 40 10          	mov    0x10(%rax),%rax
  410be5:	8b 10                	mov    (%rax),%edx
  410be7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410beb:	48 8b 40 08          	mov    0x8(%rax),%rax
  410bef:	8b 30                	mov    (%rax),%esi
  410bf1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410bf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  410bf9:	66 0f 6e c6          	movd   %esi,%xmm0
  410bfd:	48 89 ce             	mov    %rcx,%rsi
  410c00:	48 89 c7             	mov    %rax,%rdi
  410c03:	e8 78 36 ff ff       	call   404280 <_ZSt8to_charsPcS_fSt12chars_format@plt>
  410c08:	eb 22                	jmp    410c2c <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb6>
	      return __format::to_chars(__b, __e, __v);
  410c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  410c0e:	48 8b 40 08          	mov    0x8(%rax),%rax
  410c12:	8b 08                	mov    (%rax),%ecx
  410c14:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  410c18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  410c1c:	66 0f 6e c1          	movd   %ecx,%xmm0
  410c20:	48 89 d6             	mov    %rdx,%rsi
  410c23:	48 89 c7             	mov    %rax,%rdi
  410c26:	e8 05 34 ff ff       	call   404030 <_ZSt8to_charsPcS_f@plt>
  410c2b:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  410c2c:	c9                   	leave
  410c2d:	c3                   	ret

0000000000410c2e <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  410c2e:	55                   	push   %rbp
  410c2f:	48 89 e5             	mov    %rsp,%rbp
  410c32:	53                   	push   %rbx
  410c33:	48 83 ec 28          	sub    $0x28,%rsp
  410c37:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  410c3b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  410c3f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  410c43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410c47:	48 8b 00             	mov    (%rax),%rax
  410c4a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  410c4e:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  410c52:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  410c56:	48 01 ca             	add    %rcx,%rdx
  410c59:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  410c5d:	48 83 c1 01          	add    $0x1,%rcx
  410c61:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  410c65:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  410c69:	48 89 ce             	mov    %rcx,%rsi
  410c6c:	48 89 c7             	mov    %rax,%rdi
  410c6f:	e8 02 ff ff ff       	call   410b76 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  410c74:	48 89 03             	mov    %rax,(%rbx)
  410c77:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  410c7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410c7f:	48 8b 40 08          	mov    0x8(%rax),%rax
  410c83:	8b 40 08             	mov    0x8(%rax),%eax
  410c86:	85 c0                	test   %eax,%eax
  410c88:	75 11                	jne    410c9b <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  410c8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  410c8e:	48 8b 40 08          	mov    0x8(%rax),%rax
  410c92:	48 8b 00             	mov    (%rax),%rax
  410c95:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  410c99:	eb 05                	jmp    410ca0 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  410c9b:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  410ca0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  410ca4:	c9                   	leave
  410ca5:	c3                   	ret

0000000000410ca6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  410ca6:	55                   	push   %rbp
  410ca7:	48 89 e5             	mov    %rsp,%rbp
  410caa:	53                   	push   %rbx
  410cab:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  410cb2:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  410cb9:	f3 0f 11 85 94 fd ff 	movss  %xmm0,-0x26c(%rbp)
  410cc0:	ff
  410cc1:	48 89 b5 88 fd ff ff 	mov    %rsi,-0x278(%rbp)
	  std::string __dynbuf;
  410cc8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410ccf:	48 89 c7             	mov    %rax,%rdi
  410cd2:	e8 4f 3e ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  410cd7:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  410cde:	00 00 00 00
  410ce2:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  410ce9:	00 00 00 00
	  size_t __prec = 6;
  410ced:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  410cf4:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  410cf8:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410cff:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410d03:	83 e0 06             	and    $0x6,%eax
  410d06:	84 c0                	test   %al,%al
  410d08:	0f 95 c0             	setne  %al
  410d0b:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  410d11:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  410d18:	84 c0                	test   %al,%al
  410d1a:	74 20                	je     410d3c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x96>
	    __prec = _M_spec._M_get_precision(__fc);
  410d1c:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410d23:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  410d2a:	48 89 d6             	mov    %rdx,%rsi
  410d2d:	48 89 c7             	mov    %rax,%rdi
  410d30:	e8 a9 4e 00 00       	call   415bde <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  410d35:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  410d3c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  410d43:	48 83 c0 01          	add    $0x1,%rax
  410d47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  410d4b:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  410d52:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  410d56:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  410d5a:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  410d61:	00 00 00
	  bool __upper = false;
  410d64:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  410d68:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  410d6c:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  410d70:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410d77:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410d7b:	c0 e8 03             	shr    $0x3,%al
  410d7e:	83 e0 0f             	and    $0xf,%eax
  410d81:	0f b6 c0             	movzbl %al,%eax
  410d84:	89 c0                	mov    %eax,%eax
  410d86:	48 8b 04 c5 28 e4 41 	mov    0x41e428(,%rax,8),%rax
  410d8d:	00
  410d8e:	ff e0                	jmp    *%rax
	      __upper = true;
  410d90:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  410d94:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  410d98:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  410d9f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  410da3:	83 e0 78             	and    $0x78,%eax
  410da6:	3c 10                	cmp    $0x10,%al
  410da8:	74 04                	je     410dae <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
		__expc = 'p';
  410daa:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  410dae:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  410db5:	00 00 00
	      break;
  410db8:	eb 67                	jmp    410e21 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  410dba:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  410dbe:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  410dc2:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  410dc9:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  410dd0:	00 00 00
	      break;
  410dd3:	eb 4c                	jmp    410e21 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  410dd5:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  410dd9:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  410de0:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  410de7:	00 00 00
	      break;
  410dea:	eb 35                	jmp    410e21 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  410dec:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  410df0:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  410df4:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  410df8:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  410dff:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  410e06:	00 00 00
	      break;
  410e09:	eb 16                	jmp    410e21 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      if (__use_prec)
  410e0b:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  410e12:	84 c0                	test   %al,%al
  410e14:	74 0a                	je     410e20 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
		__fmt = chars_format::general;
  410e16:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  410e1d:	00 00 00
	      break;
  410e20:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  410e21:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  410e28:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  410e2f:	48 8d 85 94 fd ff ff 	lea    -0x26c(%rbp),%rax
  410e36:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  410e3d:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  410e44:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  410e4b:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  410e52:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  410e59:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  410e5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  410e61:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  410e68:	48 89 ce             	mov    %rcx,%rsi
  410e6b:	48 89 c7             	mov    %rax,%rdi
  410e6e:	e8 03 fd ff ff       	call   410b76 <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  410e73:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  410e7a:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  410e81:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  410e87:	83 f8 4b             	cmp    $0x4b,%eax
  410e8a:	0f 94 c0             	sete   %al
  410e8d:	0f b6 c0             	movzbl %al,%eax
  410e90:	48 85 c0             	test   %rax,%rax
  410e93:	0f 84 63 01 00 00    	je     410ffc <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x356>
	      size_t __guess = 8 + __prec;
  410e99:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  410ea0:	48 83 c0 08          	add    $0x8,%rax
  410ea4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  410ea8:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  410eae:	83 f8 02             	cmp    $0x2,%eax
  410eb1:	75 58                	jne    410f0b <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x265>
		      int __exp{};
  410eb3:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  410eba:	00 00 00
			__builtin_frexpf(__v, &__exp);
  410ebd:	8b 85 94 fd ff ff    	mov    -0x26c(%rbp),%eax
  410ec3:	48 8d 95 d4 fd ff ff 	lea    -0x22c(%rbp),%rdx
  410eca:	48 89 d7             	mov    %rdx,%rdi
  410ecd:	66 0f 6e c0          	movd   %eax,%xmm0
  410ed1:	e8 6a 31 ff ff       	call   404040 <frexpf@plt>
		      if (__exp > 0)
  410ed6:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  410edc:	85 c0                	test   %eax,%eax
  410ede:	7e 2b                	jle    410f0b <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x265>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  410ee0:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  410ee6:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  410eec:	89 d0                	mov    %edx,%eax
  410eee:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  410ef5:	48 c1 e8 20          	shr    $0x20,%rax
  410ef9:	29 c2                	sub    %eax,%edx
  410efb:	d1 ea                	shr    %edx
  410efd:	01 d0                	add    %edx,%eax
  410eff:	c1 e8 0d             	shr    $0xd,%eax
  410f02:	83 c0 01             	add    $0x1,%eax
  410f05:	89 c0                	mov    %eax,%eax
  410f07:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  410f0b:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  410f12:	00
  410f13:	77 08                	ja     410f1d <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x277>
		__guess = sizeof(__buf) * 2;
  410f15:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  410f1c:	00
	      __dynbuf.reserve(__guess);
  410f1d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  410f21:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410f28:	48 89 d6             	mov    %rdx,%rsi
  410f2b:	48 89 c7             	mov    %rax,%rdi
  410f2e:	e8 b1 a4 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  410f33:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  410f3a:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  410f41:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  410f48:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  410f4f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410f56:	48 89 c7             	mov    %rax,%rdi
  410f59:	e8 58 a4 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  410f5e:	48 01 c0             	add    %rax,%rax
  410f61:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  410f68:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  410f6f:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  410f76:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  410f7d:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  410f84:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  410f8b:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  410f92:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410f99:	48 89 ce             	mov    %rcx,%rsi
  410f9c:	48 89 c7             	mov    %rax,%rdi
  410f9f:	e8 ce 69 00 00       	call   417972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  410fa4:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  410fa5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410fac:	48 89 c7             	mov    %rax,%rdi
  410faf:	e8 88 98 ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  410fb4:	48 83 c0 01          	add    $0x1,%rax
  410fb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  410fbc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410fc3:	48 89 c7             	mov    %rax,%rdi
  410fc6:	e8 71 98 ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  410fcb:	48 89 c3             	mov    %rax,%rbx
  410fce:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  410fd5:	48 89 c7             	mov    %rax,%rdi
  410fd8:	e8 b3 3d ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  410fdd:	48 01 d8             	add    %rbx,%rax
  410fe0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  410fe4:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  410fea:	83 f8 4b             	cmp    $0x4b,%eax
  410fed:	0f 94 c0             	sete   %al
  410ff0:	0f b6 c0             	movzbl %al,%eax
  410ff3:	48 85 c0             	test   %rax,%rax
  410ff6:	0f 85 37 ff ff ff    	jne    410f33 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x28d>
	  if (__upper)
  410ffc:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  411000:	74 35                	je     411037 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x391>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411002:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411006:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  41100a:	eb 1e                	jmp    41102a <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x384>
		*__p = std::toupper(*__p);
  41100c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411010:	0f b6 00             	movzbl (%rax),%eax
  411013:	0f be c0             	movsbl %al,%eax
  411016:	89 c7                	mov    %eax,%edi
  411018:	e8 03 34 ff ff       	call   404420 <toupper@plt>
  41101d:	89 c2                	mov    %eax,%edx
  41101f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411023:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411025:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  41102a:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411031:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  411035:	75 d5                	jne    41100c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x366>
	  bool __have_sign = true;
  411037:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  41103b:	8b 85 94 fd ff ff    	mov    -0x26c(%rbp),%eax
  411041:	25 00 00 00 80       	and    $0x80000000,%eax
  411046:	85 c0                	test   %eax,%eax
  411048:	75 42                	jne    41108c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
	      if (_M_spec._M_sign == _Sign_plus)
  41104a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411051:	0f b6 00             	movzbl (%rax),%eax
  411054:	83 e0 0c             	and    $0xc,%eax
  411057:	3c 04                	cmp    $0x4,%al
  411059:	75 0e                	jne    411069 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
		*--__start = '+';
  41105b:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  411060:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411064:	c6 00 2b             	movb   $0x2b,(%rax)
  411067:	eb 23                	jmp    41108c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
	      else if (_M_spec._M_sign == _Sign_space)
  411069:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411070:	0f b6 00             	movzbl (%rax),%eax
  411073:	83 e0 0c             	and    $0xc,%eax
  411076:	3c 0c                	cmp    $0xc,%al
  411078:	75 0e                	jne    411088 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e2>
		*--__start = ' ';
  41107a:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  41107f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411083:	c6 00 20             	movb   $0x20,(%rax)
  411086:	eb 04                	jmp    41108c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e6>
		__have_sign = false;
  411088:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  41108c:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411093:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  411097:	48 89 c2             	mov    %rax,%rdx
  41109a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41109e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4110a5:	48 89 ce             	mov    %rcx,%rsi
  4110a8:	48 89 c7             	mov    %rax,%rdi
  4110ab:	e8 3c 64 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  4110b0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4110b7:	0f b6 00             	movzbl (%rax),%eax
  4110ba:	83 e0 10             	and    $0x10,%eax
  4110bd:	84 c0                	test   %al,%al
  4110bf:	0f 84 29 04 00 00    	je     4114ee <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
  4110c5:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  4110cc:	ff
  4110cd:	f3 0f 10 0d 1b a4 00 	movss  0xa41b(%rip),%xmm1        # 41b4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  4110d4:	00
  4110d5:	0f 54 c8             	andps  %xmm0,%xmm1
  4110d8:	f3 0f 10 05 20 a4 00 	movss  0xa420(%rip),%xmm0        # 41b500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  4110df:	00
  4110e0:	0f 2e c1             	ucomiss %xmm1,%xmm0
  4110e3:	0f 92 c0             	setb   %al
  4110e6:	83 f0 01             	xor    $0x1,%eax
  4110e9:	0f b6 c0             	movzbl %al,%eax
  4110ec:	85 c0                	test   %eax,%eax
  4110ee:	0f 84 fa 03 00 00    	je     4114ee <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
	      string_view __s = __narrow_str;
  4110f4:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4110fb:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  411102:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  411109:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  411110:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  411117:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  411118:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41111f:	ba 00 00 00 00       	mov    $0x0,%edx
  411124:	be 2e 00 00 00       	mov    $0x2e,%esi
  411129:	48 89 c7             	mov    %rax,%rdi
  41112c:	e8 35 51 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411131:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  411135:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  41113a:	0f 84 a5 00 00 00    	je     4111e5 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x53f>
		  __p = __s.find(__expc, __d + 1);
  411140:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411144:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411148:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  41114c:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411153:	89 ce                	mov    %ecx,%esi
  411155:	48 89 c7             	mov    %rax,%rdi
  411158:	e8 09 51 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  41115d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411161:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411166:	75 13                	jne    41117b <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4d5>
		    __p = __s.size();
  411168:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41116f:	48 89 c7             	mov    %rax,%rdi
  411172:	e8 9f 4b ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411177:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  41117b:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  41117f:	0f 84 af 00 00 00    	je     411234 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
		      if (__s[__have_sign] != '0')
  411185:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  411189:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411190:	48 89 d6             	mov    %rdx,%rsi
  411193:	48 89 c7             	mov    %rax,%rdi
  411196:	e8 8d 4b ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41119b:	0f b6 00             	movzbl (%rax),%eax
  41119e:	3c 30                	cmp    $0x30,%al
  4111a0:	0f 95 c0             	setne  %al
  4111a3:	84 c0                	test   %al,%al
  4111a5:	74 15                	je     4111bc <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x516>
			__sigfigs = __p - __have_sign - 1;
  4111a7:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  4111ab:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4111af:	48 29 c2             	sub    %rax,%rdx
  4111b2:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  4111b6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4111ba:	eb 78                	jmp    411234 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  4111bc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4111c0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4111c4:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4111cb:	be 30 00 00 00       	mov    $0x30,%esi
  4111d0:	48 89 c7             	mov    %rax,%rdi
  4111d3:	e8 5a 3c 00 00       	call   414e32 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  4111d8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4111dc:	48 29 c2             	sub    %rax,%rdx
  4111df:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4111e3:	eb 4f                	jmp    411234 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x58e>
		  __p = __s.find(__expc); // Find the exponent, if present.
  4111e5:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4111e9:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4111f0:	ba 00 00 00 00       	mov    $0x0,%edx
  4111f5:	89 ce                	mov    %ecx,%esi
  4111f7:	48 89 c7             	mov    %rax,%rdi
  4111fa:	e8 67 50 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4111ff:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411203:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411208:	75 13                	jne    41121d <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x577>
		    __p = __s.size();
  41120a:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411211:	48 89 c7             	mov    %rax,%rdi
  411214:	e8 fd 4a ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411219:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  41121d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411221:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  411225:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  411229:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  41122d:	48 29 c2             	sub    %rax,%rdx
  411230:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  411234:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411238:	74 1b                	je     411255 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5af>
  41123a:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411241:	48 85 c0             	test   %rax,%rax
  411244:	74 0f                	je     411255 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5af>
		  __z = __prec - __sigfigs;
  411246:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  41124d:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  411251:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  411255:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411259:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41125d:	0f 94 c0             	sete   %al
  411260:	0f b6 d0             	movzbl %al,%edx
  411263:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411267:	48 01 d0             	add    %rdx,%rax
  41126a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  41126e:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  411273:	0f 84 75 02 00 00    	je     4114ee <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  411279:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411280:	48 89 c7             	mov    %rax,%rdi
  411283:	e8 84 de ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411288:	84 c0                	test   %al,%al
  41128a:	74 1e                	je     4112aa <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x604>
  41128c:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411293:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411297:	48 29 c2             	sub    %rax,%rdx
  41129a:	48 89 d0             	mov    %rdx,%rax
  41129d:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  4112a1:	72 07                	jb     4112aa <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x604>
  4112a3:	b8 01 00 00 00       	mov    $0x1,%eax
  4112a8:	eb 05                	jmp    4112af <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x609>
  4112aa:	b8 00 00 00 00       	mov    $0x0,%eax
  4112af:	84 c0                	test   %al,%al
  4112b1:	0f 84 d7 00 00 00    	je     41138e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6e8>
					__s.size() - __p);
  4112b7:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4112be:	48 89 c7             	mov    %rax,%rdi
  4112c1:	e8 50 4a ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  4112c6:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  4112ca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4112ce:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4112d2:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  4112d6:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  4112da:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4112de:	48 01 d1             	add    %rdx,%rcx
  4112e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4112e5:	48 01 d1             	add    %rdx,%rcx
  4112e8:	48 89 c2             	mov    %rax,%rdx
  4112eb:	48 89 cf             	mov    %rcx,%rdi
  4112ee:	e8 cd 30 ff ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  4112f3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4112f7:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4112fb:	75 16                	jne    411313 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x66d>
			__start[__p++] = '.';
  4112fd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411301:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411305:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411309:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  41130d:	48 01 c8             	add    %rcx,%rax
  411310:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  411313:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  411317:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41131b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  41131f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411323:	48 89 c2             	mov    %rax,%rdx
  411326:	be 30 00 00 00       	mov    $0x30,%esi
  41132b:	48 89 cf             	mov    %rcx,%rdi
  41132e:	e8 0d 2e ff ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  411333:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41133a:	48 89 c7             	mov    %rax,%rdi
  41133d:	e8 98 61 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  411342:	48 89 c3             	mov    %rax,%rbx
  411345:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41134c:	48 89 c7             	mov    %rax,%rdi
  41134f:	e8 c2 49 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411354:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411358:	48 01 c2             	add    %rax,%rdx
  41135b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  411362:	48 89 de             	mov    %rbx,%rsi
  411365:	48 89 c7             	mov    %rax,%rdi
  411368:	e8 7f 61 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  41136d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  411374:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  41137b:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  411382:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  411389:	e9 60 01 00 00       	jmp    4114ee <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x848>
		      __dynbuf.reserve(__s.size() + __extras);
  41138e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411395:	48 89 c7             	mov    %rax,%rdi
  411398:	e8 79 49 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41139d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4113a1:	48 01 c2             	add    %rax,%rdx
  4113a4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4113ab:	48 89 d6             	mov    %rdx,%rsi
  4113ae:	48 89 c7             	mov    %rax,%rdi
  4113b1:	e8 2e a0 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  4113b6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4113bd:	48 89 c7             	mov    %rax,%rdi
  4113c0:	e8 47 dd ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4113c5:	84 c0                	test   %al,%al
  4113c7:	0f 84 c5 00 00 00    	je     411492 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7ec>
			  __dynbuf = __s.substr(0, __p);
  4113cd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4113d1:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4113d8:	be 00 00 00 00       	mov    $0x0,%esi
  4113dd:	48 89 c7             	mov    %rax,%rdi
  4113e0:	e8 53 a7 ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  4113e5:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4113ec:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4113f3:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  4113fa:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411401:	48 89 d6             	mov    %rdx,%rsi
  411404:	48 89 c7             	mov    %rax,%rdi
  411407:	e8 84 3a 00 00       	call   414e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  41140c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411410:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411414:	75 14                	jne    41142a <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x784>
			    __dynbuf += '.';
  411416:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41141d:	be 2e 00 00 00       	mov    $0x2e,%esi
  411422:	48 89 c7             	mov    %rax,%rdi
  411425:	e8 8c 3a 00 00       	call   414eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  41142a:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  41142f:	74 1b                	je     41144c <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7a6>
			    __dynbuf.append(__z, '0');
  411431:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  411435:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41143c:	ba 30 00 00 00       	mov    $0x30,%edx
  411441:	48 89 ce             	mov    %rcx,%rsi
  411444:	48 89 c7             	mov    %rax,%rdi
  411447:	e8 94 3a 00 00       	call   414ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  41144c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  411450:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411457:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41145e:	48 89 ce             	mov    %rcx,%rsi
  411461:	48 89 c7             	mov    %rax,%rdi
  411464:	e8 cf a6 ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  411469:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  411470:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  411477:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  41147e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411485:	48 89 d6             	mov    %rdx,%rsi
  411488:	48 89 c7             	mov    %rax,%rdi
  41148b:	e8 9a 3a 00 00       	call   414f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  411490:	eb 3f                	jmp    4114d1 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x82b>
			  __dynbuf.insert(__p, __extras, '0');
  411492:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  411496:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  41149a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4114a1:	b9 30 00 00 00       	mov    $0x30,%ecx
  4114a6:	48 89 c7             	mov    %rax,%rdi
  4114a9:	e8 d6 3a 00 00       	call   414f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  4114ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4114b2:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4114b6:	75 19                	jne    4114d1 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x82b>
			    __dynbuf[__p] = '.';
  4114b8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4114bc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4114c3:	48 89 d6             	mov    %rdx,%rsi
  4114c6:	48 89 c7             	mov    %rax,%rdi
  4114c9:	e8 10 3b 00 00       	call   414fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  4114ce:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  4114d1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4114d8:	48 89 c7             	mov    %rax,%rdi
  4114db:	e8 42 6b ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4114e0:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4114e7:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  4114ee:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4114f5:	48 89 c7             	mov    %rax,%rdi
  4114f8:	e8 29 36 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  4114fd:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  411504:	00 00 00 00
  411508:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  41150f:	00 00 00 00
	    __str = __narrow_str;
  411513:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  41151a:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  411521:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  411528:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  41152f:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411536:	0f b6 00             	movzbl (%rax),%eax
  411539:	83 e0 20             	and    $0x20,%eax
  41153c:	84 c0                	test   %al,%al
  41153e:	0f 84 ea 00 00 00    	je     41162e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
  411544:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  41154b:	ff
  41154c:	f3 0f 10 0d 9c 9f 00 	movss  0x9f9c(%rip),%xmm1        # 41b4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  411553:	00
  411554:	0f 54 c8             	andps  %xmm0,%xmm1
  411557:	f3 0f 10 05 a1 9f 00 	movss  0x9fa1(%rip),%xmm0        # 41b500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  41155e:	00
  41155f:	0f 2e c1             	ucomiss %xmm1,%xmm0
  411562:	0f 92 c0             	setb   %al
  411565:	83 f0 01             	xor    $0x1,%eax
  411568:	0f b6 c0             	movzbl %al,%eax
  41156b:	85 c0                	test   %eax,%eax
  41156d:	0f 84 bb 00 00 00    	je     41162e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  411573:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41157a:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  411581:	48 89 d6             	mov    %rdx,%rsi
  411584:	48 89 c7             	mov    %rax,%rdi
  411587:	e8 3e 3d 00 00       	call   4152ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  41158c:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411590:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  411597:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  41159e:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  4115a5:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4115ac:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  4115b3:	4d 89 c1             	mov    %r8,%r9
  4115b6:	41 89 c8             	mov    %ecx,%r8d
  4115b9:	48 89 d1             	mov    %rdx,%rcx
  4115bc:	48 89 c2             	mov    %rax,%rdx
  4115bf:	e8 d4 47 00 00       	call   415d98 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  4115c4:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4115cb:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4115d2:	48 89 d6             	mov    %rdx,%rsi
  4115d5:	48 89 c7             	mov    %rax,%rdi
  4115d8:	e8 33 3d 00 00       	call   415310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  4115dd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4115e4:	48 89 c7             	mov    %rax,%rdi
  4115e7:	e8 88 5f ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4115ec:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4115f3:	48 89 c7             	mov    %rax,%rdi
  4115f6:	e8 35 2d ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  4115fb:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411602:	48 89 c7             	mov    %rax,%rdi
  411605:	e8 02 db ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41160a:	83 f0 01             	xor    $0x1,%eax
  41160d:	84 c0                	test   %al,%al
  41160f:	74 1d                	je     41162e <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x988>
		__str = __wstr;
  411611:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411618:	48 89 c7             	mov    %rax,%rdi
  41161b:	e8 02 6a ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  411620:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  411627:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  41162e:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411635:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  41163c:	48 89 d6             	mov    %rdx,%rsi
  41163f:	48 89 c7             	mov    %rax,%rdi
  411642:	e8 ed 49 00 00       	call   416034 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  411647:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  41164b:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411652:	48 89 c7             	mov    %rax,%rdi
  411655:	e8 bc 46 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41165a:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  41165e:	0f 93 c0             	setae  %al
  411661:	84 c0                	test   %al,%al
  411663:	74 36                	je     41169b <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9f5>
	    return __format::__write(__fc.out(), __str);
  411665:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  41166c:	48 89 c7             	mov    %rax,%rdi
  41166f:	e8 92 a3 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  411674:	48 89 c1             	mov    %rax,%rcx
  411677:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  41167e:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  411685:	48 89 d6             	mov    %rdx,%rsi
  411688:	48 89 c2             	mov    %rax,%rdx
  41168b:	48 89 cf             	mov    %rcx,%rdi
  41168e:	e8 cd d1 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  411693:	48 89 c3             	mov    %rax,%rbx
  411696:	e9 8f 01 00 00       	jmp    41182a <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb84>
	  char32_t __fill_char = _M_spec._M_fill;
  41169b:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4116a2:	8b 40 08             	mov    0x8(%rax),%eax
  4116a5:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  4116a8:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4116af:	0f b6 00             	movzbl (%rax),%eax
  4116b2:	83 e0 03             	and    $0x3,%eax
  4116b5:	0f b6 c0             	movzbl %al,%eax
  4116b8:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  4116bb:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4116c2:	48 89 c7             	mov    %rax,%rdi
  4116c5:	e8 4c 46 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4116ca:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4116ce:	48 29 c2             	sub    %rax,%rdx
  4116d1:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  4116d5:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  4116dc:	48 89 c7             	mov    %rax,%rdi
  4116df:	e8 22 a3 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4116e4:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  4116eb:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  4116ef:	0f 85 f8 00 00 00    	jne    4117ed <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
	      __align = _Align_right;
  4116f5:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  4116fc:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411703:	0f b6 00             	movzbl (%rax),%eax
  411706:	83 e0 40             	and    $0x40,%eax
  411709:	84 c0                	test   %al,%al
  41170b:	0f 84 d5 00 00 00    	je     4117e6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb40>
  411711:	f3 0f 10 85 94 fd ff 	movss  -0x26c(%rbp),%xmm0
  411718:	ff
  411719:	f3 0f 10 0d cf 9d 00 	movss  0x9dcf(%rip),%xmm1        # 41b4f0 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x4>
  411720:	00
  411721:	0f 54 c8             	andps  %xmm0,%xmm1
  411724:	f3 0f 10 05 d4 9d 00 	movss  0x9dd4(%rip),%xmm0        # 41b500 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x14>
  41172b:	00
  41172c:	0f 2e c1             	ucomiss %xmm1,%xmm0
  41172f:	0f 92 c0             	setb   %al
  411732:	83 f0 01             	xor    $0x1,%eax
  411735:	0f b6 c0             	movzbl %al,%eax
  411738:	85 c0                	test   %eax,%eax
  41173a:	0f 84 a6 00 00 00    	je     4117e6 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb40>
		  __fill_char = _CharT('0');
  411740:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  411747:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  41174e:	be 00 00 00 00       	mov    $0x0,%esi
  411753:	48 89 c7             	mov    %rax,%rdi
  411756:	e8 cd 45 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41175b:	0f b6 00             	movzbl (%rax),%eax
  41175e:	0f be c0             	movsbl %al,%eax
  411761:	89 c7                	mov    %eax,%edi
  411763:	e8 ec 3a ff ff       	call   405254 <_ZNSt8__format11__is_xdigitEc>
  411768:	83 f0 01             	xor    $0x1,%eax
  41176b:	84 c0                	test   %al,%al
  41176d:	74 7e                	je     4117ed <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
		      *__out++ = __str[0];
  41176f:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  411776:	be 00 00 00 00       	mov    $0x0,%esi
  41177b:	48 89 c7             	mov    %rax,%rdi
  41177e:	e8 a5 45 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  411783:	0f b6 00             	movzbl (%rax),%eax
  411786:	0f be c0             	movsbl %al,%eax
  411789:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  411790:	00 00 00
      operator++(int) { return *this; }
  411793:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  41179a:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4117a1:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4117a8:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4117af:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4117b5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4117bc:	48 8b 00             	mov    (%rax),%rax
  4117bf:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4117c6:	89 d6                	mov    %edx,%esi
  4117c8:	48 89 c7             	mov    %rax,%rdi
  4117cb:	e8 96 62 00 00       	call   417a66 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  4117d0:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4117d7:	be 01 00 00 00       	mov    $0x1,%esi
  4117dc:	48 89 c7             	mov    %rax,%rdi
  4117df:	e8 d0 48 00 00       	call   4160b4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4117e4:	eb 07                	jmp    4117ed <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb47>
		__fill_char = _CharT(' ');
  4117e6:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  4117ed:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  4117f4:	48 89 c7             	mov    %rax,%rdi
  4117f7:	e8 49 82 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4117fc:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  411800:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  411804:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  411807:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  41180e:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  411815:	48 8b 00             	mov    (%rax),%rax
  411818:	45 89 c1             	mov    %r8d,%r9d
  41181b:	49 89 f8             	mov    %rdi,%r8
  41181e:	48 89 c7             	mov    %rax,%rdi
  411821:	e8 4b 4b 00 00       	call   416371 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  411826:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  411829:	90                   	nop
	}
  41182a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  411831:	48 89 c7             	mov    %rax,%rdi
  411834:	e8 3b 5d ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411839:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411840:	48 89 c7             	mov    %rax,%rdi
  411843:	e8 2c 5d ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411848:	48 89 d8             	mov    %rbx,%rax
  41184b:	eb 45                	jmp    411892 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbec>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41184d:	48 89 c3             	mov    %rax,%rbx
  411850:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  411857:	48 89 c7             	mov    %rax,%rdi
  41185a:	e8 d1 2a ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  41185f:	eb 03                	jmp    411864 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbbe>
	}
  411861:	48 89 c3             	mov    %rax,%rbx
  411864:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41186b:	48 89 c7             	mov    %rax,%rdi
  41186e:	e8 01 5d ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411873:	eb 03                	jmp    411878 <_ZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbd2>
  411875:	48 89 c3             	mov    %rax,%rbx
  411878:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41187f:	48 89 c7             	mov    %rax,%rdi
  411882:	e8 ed 5c ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  411887:	48 89 d8             	mov    %rbx,%rax
  41188a:	48 89 c7             	mov    %rax,%rdi
  41188d:	e8 7e 2b ff ff       	call   404410 <_Unwind_Resume@plt>
  411892:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  411896:	c9                   	leave
  411897:	c3                   	ret

0000000000411898 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  411898:	55                   	push   %rbp
  411899:	48 89 e5             	mov    %rsp,%rbp
  41189c:	48 83 ec 20          	sub    $0x20,%rsp
  4118a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4118a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4118a8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  4118ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4118b0:	48 8b 00             	mov    (%rax),%rax
  4118b3:	0f b6 00             	movzbl (%rax),%eax
  4118b6:	84 c0                	test   %al,%al
  4118b8:	74 39                	je     4118f3 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x5b>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  4118ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4118be:	48 8b 40 18          	mov    0x18(%rax),%rax
  4118c2:	48 8b 00             	mov    (%rax),%rax
  4118c5:	89 c1                	mov    %eax,%ecx
  4118c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4118cb:	48 8b 40 10          	mov    0x10(%rax),%rax
  4118cf:	8b 10                	mov    (%rax),%edx
  4118d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4118d5:	48 8b 40 08          	mov    0x8(%rax),%rax
  4118d9:	48 8b 38             	mov    (%rax),%rdi
  4118dc:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4118e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4118e4:	66 48 0f 6e c7       	movq   %rdi,%xmm0
  4118e9:	48 89 c7             	mov    %rax,%rdi
  4118ec:	e8 8f 28 ff ff       	call   404180 <_ZSt8to_charsPcS_dSt12chars_formati@plt>
  4118f1:	eb 61                	jmp    411954 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xbc>
	    else if (__fmt != chars_format{})
  4118f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4118f7:	48 8b 40 10          	mov    0x10(%rax),%rax
  4118fb:	8b 00                	mov    (%rax),%eax
  4118fd:	85 c0                	test   %eax,%eax
  4118ff:	74 2f                	je     411930 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x98>
	      return __format::to_chars(__b, __e, __v, __fmt);
  411901:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411905:	48 8b 40 10          	mov    0x10(%rax),%rax
  411909:	8b 10                	mov    (%rax),%edx
  41190b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41190f:	48 8b 40 08          	mov    0x8(%rax),%rax
  411913:	48 8b 30             	mov    (%rax),%rsi
  411916:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41191a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41191e:	66 48 0f 6e c6       	movq   %rsi,%xmm0
  411923:	48 89 ce             	mov    %rcx,%rsi
  411926:	48 89 c7             	mov    %rax,%rdi
  411929:	e8 42 28 ff ff       	call   404170 <_ZSt8to_charsPcS_dSt12chars_format@plt>
  41192e:	eb 24                	jmp    411954 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xbc>
	      return __format::to_chars(__b, __e, __v);
  411930:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  411934:	48 8b 40 08          	mov    0x8(%rax),%rax
  411938:	48 8b 08             	mov    (%rax),%rcx
  41193b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41193f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  411943:	66 48 0f 6e c1       	movq   %rcx,%xmm0
  411948:	48 89 d6             	mov    %rdx,%rsi
  41194b:	48 89 c7             	mov    %rax,%rdi
  41194e:	e8 1d 27 ff ff       	call   404070 <_ZSt8to_charsPcS_d@plt>
  411953:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  411954:	c9                   	leave
  411955:	c3                   	ret

0000000000411956 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  411956:	55                   	push   %rbp
  411957:	48 89 e5             	mov    %rsp,%rbp
  41195a:	53                   	push   %rbx
  41195b:	48 83 ec 28          	sub    $0x28,%rsp
  41195f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  411963:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  411967:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  41196b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41196f:	48 8b 00             	mov    (%rax),%rax
  411972:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  411976:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  41197a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41197e:	48 01 ca             	add    %rcx,%rdx
  411981:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  411985:	48 83 c1 01          	add    $0x1,%rcx
  411989:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  41198d:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  411991:	48 89 ce             	mov    %rcx,%rsi
  411994:	48 89 c7             	mov    %rax,%rdi
  411997:	e8 fc fe ff ff       	call   411898 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  41199c:	48 89 03             	mov    %rax,(%rbx)
  41199f:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  4119a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4119a7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4119ab:	8b 40 08             	mov    0x8(%rax),%eax
  4119ae:	85 c0                	test   %eax,%eax
  4119b0:	75 11                	jne    4119c3 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  4119b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4119b6:	48 8b 40 08          	mov    0x8(%rax),%rax
  4119ba:	48 8b 00             	mov    (%rax),%rax
  4119bd:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  4119c1:	eb 05                	jmp    4119c8 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  4119c3:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  4119c8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4119cc:	c9                   	leave
  4119cd:	c3                   	ret

00000000004119ce <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  4119ce:	55                   	push   %rbp
  4119cf:	48 89 e5             	mov    %rsp,%rbp
  4119d2:	53                   	push   %rbx
  4119d3:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  4119da:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  4119e1:	f2 0f 11 85 90 fd ff 	movsd  %xmm0,-0x270(%rbp)
  4119e8:	ff
  4119e9:	48 89 b5 88 fd ff ff 	mov    %rsi,-0x278(%rbp)
	  std::string __dynbuf;
  4119f0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4119f7:	48 89 c7             	mov    %rax,%rdi
  4119fa:	e8 27 31 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  4119ff:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  411a06:	00 00 00 00
  411a0a:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  411a11:	00 00 00 00
	  size_t __prec = 6;
  411a15:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  411a1c:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  411a20:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411a27:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  411a2b:	83 e0 06             	and    $0x6,%eax
  411a2e:	84 c0                	test   %al,%al
  411a30:	0f 95 c0             	setne  %al
  411a33:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  411a39:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  411a40:	84 c0                	test   %al,%al
  411a42:	74 20                	je     411a64 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x96>
	    __prec = _M_spec._M_get_precision(__fc);
  411a44:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411a4b:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  411a52:	48 89 d6             	mov    %rdx,%rsi
  411a55:	48 89 c7             	mov    %rax,%rdi
  411a58:	e8 81 41 00 00       	call   415bde <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  411a5d:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  411a64:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  411a6b:	48 83 c0 01          	add    $0x1,%rax
  411a6f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  411a73:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  411a7a:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  411a7e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  411a82:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  411a89:	00 00 00
	  bool __upper = false;
  411a8c:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  411a90:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  411a94:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  411a98:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411a9f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  411aa3:	c0 e8 03             	shr    $0x3,%al
  411aa6:	83 e0 0f             	and    $0xf,%eax
  411aa9:	0f b6 c0             	movzbl %al,%eax
  411aac:	89 c0                	mov    %eax,%eax
  411aae:	48 8b 04 c5 70 e4 41 	mov    0x41e470(,%rax,8),%rax
  411ab5:	00
  411ab6:	ff e0                	jmp    *%rax
	      __upper = true;
  411ab8:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  411abc:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  411ac0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411ac7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  411acb:	83 e0 78             	and    $0x78,%eax
  411ace:	3c 10                	cmp    $0x10,%al
  411ad0:	74 04                	je     411ad6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x108>
		__expc = 'p';
  411ad2:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  411ad6:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  411add:	00 00 00
	      break;
  411ae0:	eb 67                	jmp    411b49 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  411ae2:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  411ae6:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  411aea:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  411af1:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  411af8:	00 00 00
	      break;
  411afb:	eb 4c                	jmp    411b49 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  411afd:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  411b01:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  411b08:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  411b0f:	00 00 00
	      break;
  411b12:	eb 35                	jmp    411b49 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      __upper = true;
  411b14:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  411b18:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  411b1c:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  411b20:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  411b27:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  411b2e:	00 00 00
	      break;
  411b31:	eb 16                	jmp    411b49 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17b>
	      if (__use_prec)
  411b33:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  411b3a:	84 c0                	test   %al,%al
  411b3c:	74 0a                	je     411b48 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
		__fmt = chars_format::general;
  411b3e:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  411b45:	00 00 00
	      break;
  411b48:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  411b49:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  411b50:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  411b57:	48 8d 85 90 fd ff ff 	lea    -0x270(%rbp),%rax
  411b5e:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  411b65:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  411b6c:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  411b73:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  411b7a:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  411b81:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411b85:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411b89:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  411b90:	48 89 ce             	mov    %rcx,%rsi
  411b93:	48 89 c7             	mov    %rax,%rdi
  411b96:	e8 fd fc ff ff       	call   411898 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  411b9b:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  411ba2:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  411ba9:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  411baf:	83 f8 4b             	cmp    $0x4b,%eax
  411bb2:	0f 94 c0             	sete   %al
  411bb5:	0f b6 c0             	movzbl %al,%eax
  411bb8:	48 85 c0             	test   %rax,%rax
  411bbb:	0f 84 65 01 00 00    	je     411d26 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x358>
	      size_t __guess = 8 + __prec;
  411bc1:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411bc8:	48 83 c0 08          	add    $0x8,%rax
  411bcc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  411bd0:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  411bd6:	83 f8 02             	cmp    $0x2,%eax
  411bd9:	75 5a                	jne    411c35 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x267>
		      int __exp{};
  411bdb:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  411be2:	00 00 00
			__builtin_frexp(__v, &__exp);
  411be5:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  411bec:	48 8d 95 d4 fd ff ff 	lea    -0x22c(%rbp),%rdx
  411bf3:	48 89 d7             	mov    %rdx,%rdi
  411bf6:	66 48 0f 6e c0       	movq   %rax,%xmm0
  411bfb:	e8 30 28 ff ff       	call   404430 <frexp@plt>
		      if (__exp > 0)
  411c00:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  411c06:	85 c0                	test   %eax,%eax
  411c08:	7e 2b                	jle    411c35 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x267>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  411c0a:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  411c10:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  411c16:	89 d0                	mov    %edx,%eax
  411c18:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  411c1f:	48 c1 e8 20          	shr    $0x20,%rax
  411c23:	29 c2                	sub    %eax,%edx
  411c25:	d1 ea                	shr    %edx
  411c27:	01 d0                	add    %edx,%eax
  411c29:	c1 e8 0d             	shr    $0xd,%eax
  411c2c:	83 c0 01             	add    $0x1,%eax
  411c2f:	89 c0                	mov    %eax,%eax
  411c31:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  411c35:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  411c3c:	00
  411c3d:	77 08                	ja     411c47 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x279>
		__guess = sizeof(__buf) * 2;
  411c3f:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  411c46:	00
	      __dynbuf.reserve(__guess);
  411c47:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  411c4b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411c52:	48 89 d6             	mov    %rdx,%rsi
  411c55:	48 89 c7             	mov    %rax,%rdi
  411c58:	e8 87 97 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  411c5d:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  411c64:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  411c6b:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  411c72:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  411c79:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411c80:	48 89 c7             	mov    %rax,%rdi
  411c83:	e8 2e 97 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  411c88:	48 01 c0             	add    %rax,%rax
  411c8b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  411c92:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  411c99:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  411ca0:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  411ca7:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  411cae:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  411cb5:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  411cbc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411cc3:	48 89 ce             	mov    %rcx,%rsi
  411cc6:	48 89 c7             	mov    %rax,%rdi
  411cc9:	e8 f2 5f 00 00       	call   417cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  411cce:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  411ccf:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411cd6:	48 89 c7             	mov    %rax,%rdi
  411cd9:	e8 5e 8b ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  411cde:	48 83 c0 01          	add    $0x1,%rax
  411ce2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  411ce6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411ced:	48 89 c7             	mov    %rax,%rdi
  411cf0:	e8 47 8b ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  411cf5:	48 89 c3             	mov    %rax,%rbx
  411cf8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411cff:	48 89 c7             	mov    %rax,%rdi
  411d02:	e8 89 30 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  411d07:	48 01 d8             	add    %rbx,%rax
  411d0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  411d0e:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  411d14:	83 f8 4b             	cmp    $0x4b,%eax
  411d17:	0f 94 c0             	sete   %al
  411d1a:	0f b6 c0             	movzbl %al,%eax
  411d1d:	48 85 c0             	test   %rax,%rax
  411d20:	0f 85 37 ff ff ff    	jne    411c5d <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x28f>
	  if (__upper)
  411d26:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  411d2a:	74 35                	je     411d61 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x393>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411d30:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  411d34:	eb 1e                	jmp    411d54 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x386>
		*__p = std::toupper(*__p);
  411d36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411d3a:	0f b6 00             	movzbl (%rax),%eax
  411d3d:	0f be c0             	movsbl %al,%eax
  411d40:	89 c7                	mov    %eax,%edi
  411d42:	e8 d9 26 ff ff       	call   404420 <toupper@plt>
  411d47:	89 c2                	mov    %eax,%edx
  411d49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  411d4d:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  411d4f:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  411d54:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411d5b:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  411d5f:	75 d5                	jne    411d36 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x368>
	  bool __have_sign = true;
  411d61:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  411d65:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  411d6c:	ff
  411d6d:	66 0f 50 c0          	movmskpd %xmm0,%eax
  411d71:	83 e0 01             	and    $0x1,%eax
  411d74:	85 c0                	test   %eax,%eax
  411d76:	75 42                	jne    411dba <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
	      if (_M_spec._M_sign == _Sign_plus)
  411d78:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411d7f:	0f b6 00             	movzbl (%rax),%eax
  411d82:	83 e0 0c             	and    $0xc,%eax
  411d85:	3c 04                	cmp    $0x4,%al
  411d87:	75 0e                	jne    411d97 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c9>
		*--__start = '+';
  411d89:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  411d8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411d92:	c6 00 2b             	movb   $0x2b,(%rax)
  411d95:	eb 23                	jmp    411dba <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
	      else if (_M_spec._M_sign == _Sign_space)
  411d97:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411d9e:	0f b6 00             	movzbl (%rax),%eax
  411da1:	83 e0 0c             	and    $0xc,%eax
  411da4:	3c 0c                	cmp    $0xc,%al
  411da6:	75 0e                	jne    411db6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e8>
		*--__start = ' ';
  411da8:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  411dad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  411db1:	c6 00 20             	movb   $0x20,(%rax)
  411db4:	eb 04                	jmp    411dba <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3ec>
		__have_sign = false;
  411db6:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  411dba:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411dc1:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  411dc5:	48 89 c2             	mov    %rax,%rdx
  411dc8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411dcc:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  411dd3:	48 89 ce             	mov    %rcx,%rsi
  411dd6:	48 89 c7             	mov    %rax,%rdi
  411dd9:	e8 0e 57 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  411dde:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  411de5:	0f b6 00             	movzbl (%rax),%eax
  411de8:	83 e0 10             	and    $0x10,%eax
  411deb:	84 c0                	test   %al,%al
  411ded:	0f 84 2b 04 00 00    	je     41221e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
  411df3:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  411dfa:	ff
  411dfb:	f3 0f 7e 0d 0d 97 00 	movq   0x970d(%rip),%xmm1        # 41b510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  411e02:	00
  411e03:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  411e07:	f2 0f 10 05 11 97 00 	movsd  0x9711(%rip),%xmm0        # 41b520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  411e0e:	00
  411e0f:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  411e13:	0f 92 c0             	setb   %al
  411e16:	83 f0 01             	xor    $0x1,%eax
  411e19:	0f b6 c0             	movzbl %al,%eax
  411e1c:	85 c0                	test   %eax,%eax
  411e1e:	0f 84 fa 03 00 00    	je     41221e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
	      string_view __s = __narrow_str;
  411e24:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  411e2b:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  411e32:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  411e39:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  411e40:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  411e47:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  411e48:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411e4f:	ba 00 00 00 00       	mov    $0x0,%edx
  411e54:	be 2e 00 00 00       	mov    $0x2e,%esi
  411e59:	48 89 c7             	mov    %rax,%rdi
  411e5c:	e8 05 44 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411e61:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  411e65:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  411e6a:	0f 84 a5 00 00 00    	je     411f15 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x547>
		  __p = __s.find(__expc, __d + 1);
  411e70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411e74:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411e78:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411e7c:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411e83:	89 ce                	mov    %ecx,%esi
  411e85:	48 89 c7             	mov    %rax,%rdi
  411e88:	e8 d9 43 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411e8d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411e91:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411e96:	75 13                	jne    411eab <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4dd>
		    __p = __s.size();
  411e98:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411e9f:	48 89 c7             	mov    %rax,%rdi
  411ea2:	e8 6f 3e ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411ea7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  411eab:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411eaf:	0f 84 af 00 00 00    	je     411f64 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
		      if (__s[__have_sign] != '0')
  411eb5:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  411eb9:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411ec0:	48 89 d6             	mov    %rdx,%rsi
  411ec3:	48 89 c7             	mov    %rax,%rdi
  411ec6:	e8 5d 3e ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  411ecb:	0f b6 00             	movzbl (%rax),%eax
  411ece:	3c 30                	cmp    $0x30,%al
  411ed0:	0f 95 c0             	setne  %al
  411ed3:	84 c0                	test   %al,%al
  411ed5:	74 15                	je     411eec <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x51e>
			__sigfigs = __p - __have_sign - 1;
  411ed7:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  411edb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411edf:	48 29 c2             	sub    %rax,%rdx
  411ee2:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  411ee6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  411eea:	eb 78                	jmp    411f64 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  411eec:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411ef0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  411ef4:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411efb:	be 30 00 00 00       	mov    $0x30,%esi
  411f00:	48 89 c7             	mov    %rax,%rdi
  411f03:	e8 2a 2f 00 00       	call   414e32 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  411f08:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  411f0c:	48 29 c2             	sub    %rax,%rdx
  411f0f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  411f13:	eb 4f                	jmp    411f64 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x596>
		  __p = __s.find(__expc); // Find the exponent, if present.
  411f15:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  411f19:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411f20:	ba 00 00 00 00       	mov    $0x0,%edx
  411f25:	89 ce                	mov    %ecx,%esi
  411f27:	48 89 c7             	mov    %rax,%rdi
  411f2a:	e8 37 43 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  411f2f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  411f33:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  411f38:	75 13                	jne    411f4d <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57f>
		    __p = __s.size();
  411f3a:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411f41:	48 89 c7             	mov    %rax,%rdi
  411f44:	e8 cd 3d ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  411f49:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  411f4d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  411f51:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  411f55:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  411f59:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  411f5d:	48 29 c2             	sub    %rax,%rdx
  411f60:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  411f64:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  411f68:	74 1b                	je     411f85 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5b7>
  411f6a:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411f71:	48 85 c0             	test   %rax,%rax
  411f74:	74 0f                	je     411f85 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5b7>
		  __z = __prec - __sigfigs;
  411f76:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  411f7d:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  411f81:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  411f85:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  411f89:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  411f8d:	0f 94 c0             	sete   %al
  411f90:	0f b6 d0             	movzbl %al,%edx
  411f93:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  411f97:	48 01 d0             	add    %rdx,%rax
  411f9a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  411f9e:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  411fa3:	0f 84 75 02 00 00    	je     41221e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  411fa9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  411fb0:	48 89 c7             	mov    %rax,%rdi
  411fb3:	e8 54 d1 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  411fb8:	84 c0                	test   %al,%al
  411fba:	74 1e                	je     411fda <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x60c>
  411fbc:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  411fc3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  411fc7:	48 29 c2             	sub    %rax,%rdx
  411fca:	48 89 d0             	mov    %rdx,%rax
  411fcd:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  411fd1:	72 07                	jb     411fda <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x60c>
  411fd3:	b8 01 00 00 00       	mov    $0x1,%eax
  411fd8:	eb 05                	jmp    411fdf <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x611>
  411fda:	b8 00 00 00 00       	mov    $0x0,%eax
  411fdf:	84 c0                	test   %al,%al
  411fe1:	0f 84 d7 00 00 00    	je     4120be <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6f0>
					__s.size() - __p);
  411fe7:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  411fee:	48 89 c7             	mov    %rax,%rdi
  411ff1:	e8 20 3d ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  411ff6:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  411ffa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  411ffe:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412002:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  412006:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  41200a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41200e:	48 01 d1             	add    %rdx,%rcx
  412011:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412015:	48 01 d1             	add    %rdx,%rcx
  412018:	48 89 c2             	mov    %rax,%rdx
  41201b:	48 89 cf             	mov    %rcx,%rdi
  41201e:	e8 9d 23 ff ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  412023:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412027:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41202b:	75 16                	jne    412043 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x675>
			__start[__p++] = '.';
  41202d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412031:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  412035:	48 8d 50 01          	lea    0x1(%rax),%rdx
  412039:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  41203d:	48 01 c8             	add    %rcx,%rax
  412040:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  412043:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412047:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41204b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  41204f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  412053:	48 89 c2             	mov    %rax,%rdx
  412056:	be 30 00 00 00       	mov    $0x30,%esi
  41205b:	48 89 cf             	mov    %rcx,%rdi
  41205e:	e8 dd 20 ff ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  412063:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41206a:	48 89 c7             	mov    %rax,%rdi
  41206d:	e8 68 54 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  412072:	48 89 c3             	mov    %rax,%rbx
  412075:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41207c:	48 89 c7             	mov    %rax,%rdi
  41207f:	e8 92 3c ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412084:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412088:	48 01 c2             	add    %rax,%rdx
  41208b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  412092:	48 89 de             	mov    %rbx,%rsi
  412095:	48 89 c7             	mov    %rax,%rdi
  412098:	e8 4f 54 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  41209d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  4120a4:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  4120ab:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4120b2:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  4120b9:	e9 60 01 00 00       	jmp    41221e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x850>
		      __dynbuf.reserve(__s.size() + __extras);
  4120be:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4120c5:	48 89 c7             	mov    %rax,%rdi
  4120c8:	e8 49 3c ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4120cd:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4120d1:	48 01 c2             	add    %rax,%rdx
  4120d4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4120db:	48 89 d6             	mov    %rdx,%rsi
  4120de:	48 89 c7             	mov    %rax,%rdi
  4120e1:	e8 fe 92 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  4120e6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4120ed:	48 89 c7             	mov    %rax,%rdi
  4120f0:	e8 17 d0 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4120f5:	84 c0                	test   %al,%al
  4120f7:	0f 84 c5 00 00 00    	je     4121c2 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7f4>
			  __dynbuf = __s.substr(0, __p);
  4120fd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412101:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412108:	be 00 00 00 00       	mov    $0x0,%esi
  41210d:	48 89 c7             	mov    %rax,%rdi
  412110:	e8 23 9a ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  412115:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  41211c:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  412123:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  41212a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412131:	48 89 d6             	mov    %rdx,%rsi
  412134:	48 89 c7             	mov    %rax,%rdi
  412137:	e8 54 2d 00 00       	call   414e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  41213c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412140:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412144:	75 14                	jne    41215a <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x78c>
			    __dynbuf += '.';
  412146:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41214d:	be 2e 00 00 00       	mov    $0x2e,%esi
  412152:	48 89 c7             	mov    %rax,%rdi
  412155:	e8 5c 2d 00 00       	call   414eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  41215a:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  41215f:	74 1b                	je     41217c <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7ae>
			    __dynbuf.append(__z, '0');
  412161:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  412165:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41216c:	ba 30 00 00 00       	mov    $0x30,%edx
  412171:	48 89 ce             	mov    %rcx,%rsi
  412174:	48 89 c7             	mov    %rax,%rdi
  412177:	e8 64 2d 00 00       	call   414ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  41217c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  412180:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412187:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41218e:	48 89 ce             	mov    %rcx,%rsi
  412191:	48 89 c7             	mov    %rax,%rdi
  412194:	e8 9f 99 ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  412199:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  4121a0:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  4121a7:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  4121ae:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4121b5:	48 89 d6             	mov    %rdx,%rsi
  4121b8:	48 89 c7             	mov    %rax,%rdi
  4121bb:	e8 6a 2d 00 00       	call   414f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  4121c0:	eb 3f                	jmp    412201 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x833>
			  __dynbuf.insert(__p, __extras, '0');
  4121c2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4121c6:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  4121ca:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4121d1:	b9 30 00 00 00       	mov    $0x30,%ecx
  4121d6:	48 89 c7             	mov    %rax,%rdi
  4121d9:	e8 a6 2d 00 00       	call   414f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  4121de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4121e2:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4121e6:	75 19                	jne    412201 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x833>
			    __dynbuf[__p] = '.';
  4121e8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4121ec:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4121f3:	48 89 d6             	mov    %rdx,%rsi
  4121f6:	48 89 c7             	mov    %rax,%rdi
  4121f9:	e8 e0 2d 00 00       	call   414fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  4121fe:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  412201:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412208:	48 89 c7             	mov    %rax,%rdi
  41220b:	e8 12 5e ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  412210:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  412217:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  41221e:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412225:	48 89 c7             	mov    %rax,%rdi
  412228:	e8 f9 28 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  41222d:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  412234:	00 00 00 00
  412238:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  41223f:	00 00 00 00
	    __str = __narrow_str;
  412243:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  41224a:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  412251:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  412258:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  41225f:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412266:	0f b6 00             	movzbl (%rax),%eax
  412269:	83 e0 20             	and    $0x20,%eax
  41226c:	84 c0                	test   %al,%al
  41226e:	0f 84 ec 00 00 00    	je     412360 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
  412274:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  41227b:	ff
  41227c:	f3 0f 7e 0d 8c 92 00 	movq   0x928c(%rip),%xmm1        # 41b510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  412283:	00
  412284:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  412288:	f2 0f 10 05 90 92 00 	movsd  0x9290(%rip),%xmm0        # 41b520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  41228f:	00
  412290:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  412294:	0f 92 c0             	setb   %al
  412297:	83 f0 01             	xor    $0x1,%eax
  41229a:	0f b6 c0             	movzbl %al,%eax
  41229d:	85 c0                	test   %eax,%eax
  41229f:	0f 84 bb 00 00 00    	je     412360 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  4122a5:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  4122ac:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  4122b3:	48 89 d6             	mov    %rdx,%rsi
  4122b6:	48 89 c7             	mov    %rax,%rdi
  4122b9:	e8 0c 30 00 00       	call   4152ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  4122be:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4122c2:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  4122c9:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  4122d0:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  4122d7:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4122de:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  4122e5:	4d 89 c1             	mov    %r8,%r9
  4122e8:	41 89 c8             	mov    %ecx,%r8d
  4122eb:	48 89 d1             	mov    %rdx,%rcx
  4122ee:	48 89 c2             	mov    %rax,%rdx
  4122f1:	e8 a2 3a 00 00       	call   415d98 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  4122f6:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4122fd:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412304:	48 89 d6             	mov    %rdx,%rsi
  412307:	48 89 c7             	mov    %rax,%rdi
  41230a:	e8 01 30 00 00       	call   415310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  41230f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  412316:	48 89 c7             	mov    %rax,%rdi
  412319:	e8 56 52 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41231e:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  412325:	48 89 c7             	mov    %rax,%rdi
  412328:	e8 03 20 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  41232d:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412334:	48 89 c7             	mov    %rax,%rdi
  412337:	e8 d0 cd ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41233c:	83 f0 01             	xor    $0x1,%eax
  41233f:	84 c0                	test   %al,%al
  412341:	74 1d                	je     412360 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x992>
		__str = __wstr;
  412343:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41234a:	48 89 c7             	mov    %rax,%rdi
  41234d:	e8 d0 5c ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  412352:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  412359:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  412360:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412367:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
  41236e:	48 89 d6             	mov    %rdx,%rsi
  412371:	48 89 c7             	mov    %rax,%rdi
  412374:	e8 bb 3c 00 00       	call   416034 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  412379:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  41237d:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  412384:	48 89 c7             	mov    %rax,%rdi
  412387:	e8 8a 39 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41238c:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  412390:	0f 93 c0             	setae  %al
  412393:	84 c0                	test   %al,%al
  412395:	74 36                	je     4123cd <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ff>
	    return __format::__write(__fc.out(), __str);
  412397:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  41239e:	48 89 c7             	mov    %rax,%rdi
  4123a1:	e8 60 96 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4123a6:	48 89 c1             	mov    %rax,%rcx
  4123a9:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  4123b0:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  4123b7:	48 89 d6             	mov    %rdx,%rsi
  4123ba:	48 89 c2             	mov    %rax,%rdx
  4123bd:	48 89 cf             	mov    %rcx,%rdi
  4123c0:	e8 9b c4 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4123c5:	48 89 c3             	mov    %rax,%rbx
  4123c8:	e9 91 01 00 00       	jmp    41255e <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb90>
	  char32_t __fill_char = _M_spec._M_fill;
  4123cd:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4123d4:	8b 40 08             	mov    0x8(%rax),%eax
  4123d7:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  4123da:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4123e1:	0f b6 00             	movzbl (%rax),%eax
  4123e4:	83 e0 03             	and    $0x3,%eax
  4123e7:	0f b6 c0             	movzbl %al,%eax
  4123ea:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  4123ed:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4123f4:	48 89 c7             	mov    %rax,%rdi
  4123f7:	e8 1a 39 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4123fc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  412400:	48 29 c2             	sub    %rax,%rdx
  412403:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  412407:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  41240e:	48 89 c7             	mov    %rax,%rdi
  412411:	e8 f0 95 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  412416:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  41241d:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  412421:	0f 85 fa 00 00 00    	jne    412521 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
	      __align = _Align_right;
  412427:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  41242e:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412435:	0f b6 00             	movzbl (%rax),%eax
  412438:	83 e0 40             	and    $0x40,%eax
  41243b:	84 c0                	test   %al,%al
  41243d:	0f 84 d7 00 00 00    	je     41251a <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb4c>
  412443:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  41244a:	ff
  41244b:	f3 0f 7e 0d bd 90 00 	movq   0x90bd(%rip),%xmm1        # 41b510 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x24>
  412452:	00
  412453:	66 0f 54 c8          	andpd  %xmm0,%xmm1
  412457:	f2 0f 10 05 c1 90 00 	movsd  0x90c1(%rip),%xmm0        # 41b520 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x34>
  41245e:	00
  41245f:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  412463:	0f 92 c0             	setb   %al
  412466:	83 f0 01             	xor    $0x1,%eax
  412469:	0f b6 c0             	movzbl %al,%eax
  41246c:	85 c0                	test   %eax,%eax
  41246e:	0f 84 a6 00 00 00    	je     41251a <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb4c>
		  __fill_char = _CharT('0');
  412474:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  41247b:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  412482:	be 00 00 00 00       	mov    $0x0,%esi
  412487:	48 89 c7             	mov    %rax,%rdi
  41248a:	e8 99 38 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41248f:	0f b6 00             	movzbl (%rax),%eax
  412492:	0f be c0             	movsbl %al,%eax
  412495:	89 c7                	mov    %eax,%edi
  412497:	e8 b8 2d ff ff       	call   405254 <_ZNSt8__format11__is_xdigitEc>
  41249c:	83 f0 01             	xor    $0x1,%eax
  41249f:	84 c0                	test   %al,%al
  4124a1:	74 7e                	je     412521 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
		      *__out++ = __str[0];
  4124a3:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4124aa:	be 00 00 00 00       	mov    $0x0,%esi
  4124af:	48 89 c7             	mov    %rax,%rdi
  4124b2:	e8 71 38 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  4124b7:	0f b6 00             	movzbl (%rax),%eax
  4124ba:	0f be c0             	movsbl %al,%eax
  4124bd:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  4124c4:	00 00 00
      operator++(int) { return *this; }
  4124c7:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  4124ce:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4124d5:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4124dc:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4124e3:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4124e9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4124f0:	48 8b 00             	mov    (%rax),%rax
  4124f3:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  4124fa:	89 d6                	mov    %edx,%esi
  4124fc:	48 89 c7             	mov    %rax,%rdi
  4124ff:	e8 62 55 00 00       	call   417a66 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  412504:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  41250b:	be 01 00 00 00       	mov    $0x1,%esi
  412510:	48 89 c7             	mov    %rax,%rdi
  412513:	e8 9c 3b 00 00       	call   4160b4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  412518:	eb 07                	jmp    412521 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb53>
		__fill_char = _CharT(' ');
  41251a:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  412521:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  412528:	48 89 c7             	mov    %rax,%rdi
  41252b:	e8 15 75 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  412530:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  412534:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  412538:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  41253b:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  412542:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  412549:	48 8b 00             	mov    (%rax),%rax
  41254c:	45 89 c1             	mov    %r8d,%r9d
  41254f:	49 89 f8             	mov    %rdi,%r8
  412552:	48 89 c7             	mov    %rax,%rdi
  412555:	e8 17 3e 00 00       	call   416371 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  41255a:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  41255d:	90                   	nop
	}
  41255e:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412565:	48 89 c7             	mov    %rax,%rdi
  412568:	e8 07 50 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41256d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412574:	48 89 c7             	mov    %rax,%rdi
  412577:	e8 f8 4f ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41257c:	48 89 d8             	mov    %rbx,%rax
  41257f:	eb 45                	jmp    4125c6 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbf8>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  412581:	48 89 c3             	mov    %rax,%rbx
  412584:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41258b:	48 89 c7             	mov    %rax,%rdi
  41258e:	e8 9d 1d ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  412593:	eb 03                	jmp    412598 <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbca>
	}
  412595:	48 89 c3             	mov    %rax,%rbx
  412598:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  41259f:	48 89 c7             	mov    %rax,%rdi
  4125a2:	e8 cd 4f ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4125a7:	eb 03                	jmp    4125ac <_ZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbde>
  4125a9:	48 89 c3             	mov    %rax,%rbx
  4125ac:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4125b3:	48 89 c7             	mov    %rax,%rdi
  4125b6:	e8 b9 4f ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4125bb:	48 89 d8             	mov    %rbx,%rax
  4125be:	48 89 c7             	mov    %rax,%rdi
  4125c1:	e8 4a 1e ff ff       	call   404410 <_Unwind_Resume@plt>
  4125c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4125ca:	c9                   	leave
  4125cb:	c3                   	ret

00000000004125cc <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  4125cc:	55                   	push   %rbp
  4125cd:	48 89 e5             	mov    %rsp,%rbp
  4125d0:	48 83 ec 20          	sub    $0x20,%rsp
  4125d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4125d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4125dc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  4125e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4125e4:	48 8b 00             	mov    (%rax),%rax
  4125e7:	0f b6 00             	movzbl (%rax),%eax
  4125ea:	84 c0                	test   %al,%al
  4125ec:	74 3f                	je     41262d <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x61>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  4125ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4125f2:	48 8b 40 18          	mov    0x18(%rax),%rax
  4125f6:	48 8b 00             	mov    (%rax),%rax
  4125f9:	89 c1                	mov    %eax,%ecx
  4125fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4125ff:	48 8b 40 10          	mov    0x10(%rax),%rax
  412603:	8b 10                	mov    (%rax),%edx
  412605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412609:	48 8b 40 08          	mov    0x8(%rax),%rax
  41260d:	db 28                	fldt   (%rax)
  41260f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  412613:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412617:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  41261c:	db 3c 24             	fstpt  (%rsp)
  41261f:	48 89 c7             	mov    %rax,%rdi
  412622:	e8 79 1c ff ff       	call   4042a0 <_ZSt8to_charsPcS_eSt12chars_formati@plt>
  412627:	48 83 c4 10          	add    $0x10,%rsp
  41262b:	eb 6d                	jmp    41269a <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xce>
	    else if (__fmt != chars_format{})
  41262d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412631:	48 8b 40 10          	mov    0x10(%rax),%rax
  412635:	8b 00                	mov    (%rax),%eax
  412637:	85 c0                	test   %eax,%eax
  412639:	74 35                	je     412670 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xa4>
	      return __format::to_chars(__b, __e, __v, __fmt);
  41263b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41263f:	48 8b 40 10          	mov    0x10(%rax),%rax
  412643:	8b 10                	mov    (%rax),%edx
  412645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412649:	48 8b 40 08          	mov    0x8(%rax),%rax
  41264d:	db 28                	fldt   (%rax)
  41264f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412653:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412657:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  41265c:	db 3c 24             	fstpt  (%rsp)
  41265f:	48 89 ce             	mov    %rcx,%rsi
  412662:	48 89 c7             	mov    %rax,%rdi
  412665:	e8 e6 19 ff ff       	call   404050 <_ZSt8to_charsPcS_eSt12chars_format@plt>
  41266a:	48 83 c4 10          	add    $0x10,%rsp
  41266e:	eb 2a                	jmp    41269a <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xce>
	      return __format::to_chars(__b, __e, __v);
  412670:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  412674:	48 8b 40 08          	mov    0x8(%rax),%rax
  412678:	db 28                	fldt   (%rax)
  41267a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41267e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  412682:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  412687:	db 3c 24             	fstpt  (%rsp)
  41268a:	48 89 d6             	mov    %rdx,%rsi
  41268d:	48 89 c7             	mov    %rax,%rdi
  412690:	e8 cb 1a ff ff       	call   404160 <_ZSt8to_charsPcS_e@plt>
  412695:	48 83 c4 10          	add    $0x10,%rsp
  412699:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  41269a:	c9                   	leave
  41269b:	c3                   	ret

000000000041269c <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  41269c:	55                   	push   %rbp
  41269d:	48 89 e5             	mov    %rsp,%rbp
  4126a0:	53                   	push   %rbx
  4126a1:	48 83 ec 28          	sub    $0x28,%rsp
  4126a5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4126a9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4126ad:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  4126b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4126b5:	48 8b 00             	mov    (%rax),%rax
  4126b8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4126bc:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  4126c0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4126c4:	48 01 ca             	add    %rcx,%rdx
  4126c7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4126cb:	48 83 c1 01          	add    $0x1,%rcx
  4126cf:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4126d3:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  4126d7:	48 89 ce             	mov    %rcx,%rsi
  4126da:	48 89 c7             	mov    %rax,%rdi
  4126dd:	e8 ea fe ff ff       	call   4125cc <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  4126e2:	48 89 03             	mov    %rax,(%rbx)
  4126e5:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  4126e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4126ed:	48 8b 40 08          	mov    0x8(%rax),%rax
  4126f1:	8b 40 08             	mov    0x8(%rax),%eax
  4126f4:	85 c0                	test   %eax,%eax
  4126f6:	75 11                	jne    412709 <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  4126f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4126fc:	48 8b 40 08          	mov    0x8(%rax),%rax
  412700:	48 8b 00             	mov    (%rax),%rax
  412703:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  412707:	eb 05                	jmp    41270e <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  412709:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  41270e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  412712:	c9                   	leave
  412713:	c3                   	ret

0000000000412714 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  412714:	55                   	push   %rbp
  412715:	48 89 e5             	mov    %rsp,%rbp
  412718:	53                   	push   %rbx
  412719:	48 81 ec 68 02 00 00 	sub    $0x268,%rsp
  412720:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  412727:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
	  std::string __dynbuf;
  41272e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412735:	48 89 c7             	mov    %rax,%rdi
  412738:	e8 e9 23 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  41273d:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  412744:	00 00 00 00
  412748:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  41274f:	00 00 00 00
	  size_t __prec = 6;
  412753:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  41275a:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  41275e:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412765:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412769:	83 e0 06             	and    $0x6,%eax
  41276c:	84 c0                	test   %al,%al
  41276e:	0f 95 c0             	setne  %al
  412771:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  412777:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  41277e:	84 c0                	test   %al,%al
  412780:	74 20                	je     4127a2 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e>
	    __prec = _M_spec._M_get_precision(__fc);
  412782:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412789:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  412790:	48 89 d6             	mov    %rdx,%rsi
  412793:	48 89 c7             	mov    %rax,%rdi
  412796:	e8 43 34 00 00       	call   415bde <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41279b:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  4127a2:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4127a9:	48 83 c0 01          	add    $0x1,%rax
  4127ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  4127b1:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  4127b8:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  4127bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  4127c0:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  4127c7:	00 00 00
	  bool __upper = false;
  4127ca:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  4127ce:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  4127d2:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  4127d6:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4127dd:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4127e1:	c0 e8 03             	shr    $0x3,%al
  4127e4:	83 e0 0f             	and    $0xf,%eax
  4127e7:	0f b6 c0             	movzbl %al,%eax
  4127ea:	89 c0                	mov    %eax,%eax
  4127ec:	48 8b 04 c5 b8 e4 41 	mov    0x41e4b8(,%rax,8),%rax
  4127f3:	00
  4127f4:	ff e0                	jmp    *%rax
	      __upper = true;
  4127f6:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  4127fa:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  4127fe:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412805:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  412809:	83 e0 78             	and    $0x78,%eax
  41280c:	3c 10                	cmp    $0x10,%al
  41280e:	74 04                	je     412814 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x100>
		__expc = 'p';
  412810:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  412814:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  41281b:	00 00 00
	      break;
  41281e:	eb 67                	jmp    412887 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  412820:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  412824:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  412828:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  41282f:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  412836:	00 00 00
	      break;
  412839:	eb 4c                	jmp    412887 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  41283b:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  41283f:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  412846:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  41284d:	00 00 00
	      break;
  412850:	eb 35                	jmp    412887 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      __upper = true;
  412852:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  412856:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  41285a:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  41285e:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  412865:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  41286c:	00 00 00
	      break;
  41286f:	eb 16                	jmp    412887 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x173>
	      if (__use_prec)
  412871:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  412878:	84 c0                	test   %al,%al
  41287a:	74 0a                	je     412886 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x172>
		__fmt = chars_format::general;
  41287c:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  412883:	00 00 00
	      break;
  412886:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  412887:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  41288e:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  412895:	48 8d 45 10          	lea    0x10(%rbp),%rax
  412899:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  4128a0:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  4128a7:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  4128ae:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  4128b5:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  4128bc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4128c0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4128c4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  4128cb:	48 89 ce             	mov    %rcx,%rsi
  4128ce:	48 89 c7             	mov    %rax,%rdi
  4128d1:	e8 f6 fc ff ff       	call   4125cc <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  4128d6:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  4128dd:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  4128e4:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  4128ea:	83 f8 4b             	cmp    $0x4b,%eax
  4128ed:	0f 94 c0             	sete   %al
  4128f0:	0f b6 c0             	movzbl %al,%eax
  4128f3:	48 85 c0             	test   %rax,%rax
  4128f6:	0f 84 6a 01 00 00    	je     412a66 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x352>
	      size_t __guess = 8 + __prec;
  4128fc:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  412903:	48 83 c0 08          	add    $0x8,%rax
  412907:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  41290b:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  412911:	83 f8 02             	cmp    $0x2,%eax
  412914:	75 5f                	jne    412975 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x261>
		      int __exp{};
  412916:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  41291d:	00 00 00
			__builtin_frexpl(__v, &__exp);
  412920:	db 6d 10             	fldt   0x10(%rbp)
  412923:	48 8d 85 d4 fd ff ff 	lea    -0x22c(%rbp),%rax
  41292a:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
  41292f:	db 3c 24             	fstpt  (%rsp)
  412932:	48 89 c7             	mov    %rax,%rdi
  412935:	e8 46 1a ff ff       	call   404380 <frexpl@plt>
  41293a:	dd d8                	fstp   %st(0)
  41293c:	48 83 c4 10          	add    $0x10,%rsp
		      if (__exp > 0)
  412940:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  412946:	85 c0                	test   %eax,%eax
  412948:	7e 2b                	jle    412975 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x261>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
  41294a:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  412950:	69 d0 a4 0f 00 00    	imul   $0xfa4,%eax,%edx
  412956:	89 d0                	mov    %edx,%eax
  412958:	48 69 c0 f9 65 56 3b 	imul   $0x3b5665f9,%rax,%rax
  41295f:	48 c1 e8 20          	shr    $0x20,%rax
  412963:	29 c2                	sub    %eax,%edx
  412965:	d1 ea                	shr    %edx
  412967:	01 d0                	add    %edx,%eax
  412969:	c1 e8 0d             	shr    $0xd,%eax
  41296c:	83 c0 01             	add    $0x1,%eax
  41296f:	89 c0                	mov    %eax,%eax
  412971:	48 01 45 d0          	add    %rax,-0x30(%rbp)
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  412975:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  41297c:	00
  41297d:	77 08                	ja     412987 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x273>
		__guess = sizeof(__buf) * 2;
  41297f:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  412986:	00
	      __dynbuf.reserve(__guess);
  412987:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41298b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412992:	48 89 d6             	mov    %rdx,%rsi
  412995:	48 89 c7             	mov    %rax,%rdi
  412998:	e8 47 8a ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  41299d:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  4129a4:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  4129ab:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  4129b2:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  4129b9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4129c0:	48 89 c7             	mov    %rax,%rdi
  4129c3:	e8 ee 89 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  4129c8:	48 01 c0             	add    %rax,%rax
  4129cb:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4129d2:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  4129d9:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  4129e0:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  4129e7:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  4129ee:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  4129f5:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  4129fc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412a03:	48 89 ce             	mov    %rcx,%rsi
  412a06:	48 89 c7             	mov    %rax,%rdi
  412a09:	e8 d0 53 00 00       	call   417dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  412a0e:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  412a0f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412a16:	48 89 c7             	mov    %rax,%rdi
  412a19:	e8 1e 7e ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  412a1e:	48 83 c0 01          	add    $0x1,%rax
  412a22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  412a26:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412a2d:	48 89 c7             	mov    %rax,%rdi
  412a30:	e8 07 7e ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  412a35:	48 89 c3             	mov    %rax,%rbx
  412a38:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412a3f:	48 89 c7             	mov    %rax,%rdi
  412a42:	e8 49 23 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  412a47:	48 01 d8             	add    %rbx,%rax
  412a4a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  412a4e:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  412a54:	83 f8 4b             	cmp    $0x4b,%eax
  412a57:	0f 94 c0             	sete   %al
  412a5a:	0f b6 c0             	movzbl %al,%eax
  412a5d:	48 85 c0             	test   %rax,%rax
  412a60:	0f 85 37 ff ff ff    	jne    41299d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x289>
	  if (__upper)
  412a66:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  412a6a:	74 35                	je     412aa1 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x38d>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  412a6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412a70:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  412a74:	eb 1e                	jmp    412a94 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x380>
		*__p = std::toupper(*__p);
  412a76:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  412a7a:	0f b6 00             	movzbl (%rax),%eax
  412a7d:	0f be c0             	movsbl %al,%eax
  412a80:	89 c7                	mov    %eax,%edi
  412a82:	e8 99 19 ff ff       	call   404420 <toupper@plt>
  412a87:	89 c2                	mov    %eax,%edx
  412a89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  412a8d:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  412a8f:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  412a94:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  412a9b:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  412a9f:	75 d5                	jne    412a76 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x362>
	  bool __have_sign = true;
  412aa1:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  412aa5:	db 6d 10             	fldt   0x10(%rbp)
  412aa8:	d9 e5                	fxam
  412aaa:	df e0                	fnstsw %ax
  412aac:	dd d8                	fstp   %st(0)
  412aae:	25 00 02 00 00       	and    $0x200,%eax
  412ab3:	85 c0                	test   %eax,%eax
  412ab5:	75 42                	jne    412af9 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
	      if (_M_spec._M_sign == _Sign_plus)
  412ab7:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412abe:	0f b6 00             	movzbl (%rax),%eax
  412ac1:	83 e0 0c             	and    $0xc,%eax
  412ac4:	3c 04                	cmp    $0x4,%al
  412ac6:	75 0e                	jne    412ad6 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c2>
		*--__start = '+';
  412ac8:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  412acd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412ad1:	c6 00 2b             	movb   $0x2b,(%rax)
  412ad4:	eb 23                	jmp    412af9 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
	      else if (_M_spec._M_sign == _Sign_space)
  412ad6:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412add:	0f b6 00             	movzbl (%rax),%eax
  412ae0:	83 e0 0c             	and    $0xc,%eax
  412ae3:	3c 0c                	cmp    $0xc,%al
  412ae5:	75 0e                	jne    412af5 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e1>
		*--__start = ' ';
  412ae7:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  412aec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  412af0:	c6 00 20             	movb   $0x20,(%rax)
  412af3:	eb 04                	jmp    412af9 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3e5>
		__have_sign = false;
  412af5:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  412af9:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  412b00:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  412b04:	48 89 c2             	mov    %rax,%rdx
  412b07:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412b0b:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  412b12:	48 89 ce             	mov    %rcx,%rsi
  412b15:	48 89 c7             	mov    %rax,%rdi
  412b18:	e8 cf 49 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  412b1d:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412b24:	0f b6 00             	movzbl (%rax),%eax
  412b27:	83 e0 10             	and    $0x10,%eax
  412b2a:	84 c0                	test   %al,%al
  412b2c:	0f 84 1a 04 00 00    	je     412f4c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
  412b32:	db 6d 10             	fldt   0x10(%rbp)
  412b35:	d9 e1                	fabs
  412b37:	db 2d f3 89 00 00    	fldt   0x89f3(%rip)        # 41b530 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  412b3d:	df e9                	fucomip %st(1),%st
  412b3f:	dd d8                	fstp   %st(0)
  412b41:	0f 92 c0             	setb   %al
  412b44:	83 f0 01             	xor    $0x1,%eax
  412b47:	0f b6 c0             	movzbl %al,%eax
  412b4a:	85 c0                	test   %eax,%eax
  412b4c:	0f 84 fa 03 00 00    	je     412f4c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
	      string_view __s = __narrow_str;
  412b52:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  412b59:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  412b60:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  412b67:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  412b6e:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  412b75:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  412b76:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412b7d:	ba 00 00 00 00       	mov    $0x0,%edx
  412b82:	be 2e 00 00 00       	mov    $0x2e,%esi
  412b87:	48 89 c7             	mov    %rax,%rdi
  412b8a:	e8 d7 36 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  412b8f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  412b93:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  412b98:	0f 84 a5 00 00 00    	je     412c43 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x52f>
		  __p = __s.find(__expc, __d + 1);
  412b9e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412ba2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  412ba6:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  412baa:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412bb1:	89 ce                	mov    %ecx,%esi
  412bb3:	48 89 c7             	mov    %rax,%rdi
  412bb6:	e8 ab 36 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  412bbb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  412bbf:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  412bc4:	75 13                	jne    412bd9 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4c5>
		    __p = __s.size();
  412bc6:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412bcd:	48 89 c7             	mov    %rax,%rdi
  412bd0:	e8 41 31 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412bd5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  412bd9:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  412bdd:	0f 84 af 00 00 00    	je     412c92 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
		      if (__s[__have_sign] != '0')
  412be3:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  412be7:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412bee:	48 89 d6             	mov    %rdx,%rsi
  412bf1:	48 89 c7             	mov    %rax,%rdi
  412bf4:	e8 2f 31 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  412bf9:	0f b6 00             	movzbl (%rax),%eax
  412bfc:	3c 30                	cmp    $0x30,%al
  412bfe:	0f 95 c0             	setne  %al
  412c01:	84 c0                	test   %al,%al
  412c03:	74 15                	je     412c1a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x506>
			__sigfigs = __p - __have_sign - 1;
  412c05:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  412c09:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412c0d:	48 29 c2             	sub    %rax,%rdx
  412c10:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  412c14:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  412c18:	eb 78                	jmp    412c92 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  412c1a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412c1e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  412c22:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412c29:	be 30 00 00 00       	mov    $0x30,%esi
  412c2e:	48 89 c7             	mov    %rax,%rdi
  412c31:	e8 fc 21 00 00       	call   414e32 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  412c36:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412c3a:	48 29 c2             	sub    %rax,%rdx
  412c3d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  412c41:	eb 4f                	jmp    412c92 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57e>
		  __p = __s.find(__expc); // Find the exponent, if present.
  412c43:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  412c47:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412c4e:	ba 00 00 00 00       	mov    $0x0,%edx
  412c53:	89 ce                	mov    %ecx,%esi
  412c55:	48 89 c7             	mov    %rax,%rdi
  412c58:	e8 09 36 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  412c5d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  412c61:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  412c66:	75 13                	jne    412c7b <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x567>
		    __p = __s.size();
  412c68:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412c6f:	48 89 c7             	mov    %rax,%rdi
  412c72:	e8 9f 30 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412c77:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  412c7b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  412c7f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  412c83:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  412c87:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  412c8b:	48 29 c2             	sub    %rax,%rdx
  412c8e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  412c92:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  412c96:	74 1b                	je     412cb3 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59f>
  412c98:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  412c9f:	48 85 c0             	test   %rax,%rax
  412ca2:	74 0f                	je     412cb3 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59f>
		  __z = __prec - __sigfigs;
  412ca4:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  412cab:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  412caf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  412cb3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412cb7:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412cbb:	0f 94 c0             	sete   %al
  412cbe:	0f b6 d0             	movzbl %al,%edx
  412cc1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  412cc5:	48 01 d0             	add    %rdx,%rax
  412cc8:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  412ccc:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  412cd1:	0f 84 75 02 00 00    	je     412f4c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  412cd7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412cde:	48 89 c7             	mov    %rax,%rdi
  412ce1:	e8 26 c4 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  412ce6:	84 c0                	test   %al,%al
  412ce8:	74 1e                	je     412d08 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f4>
  412cea:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  412cf1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  412cf5:	48 29 c2             	sub    %rax,%rdx
  412cf8:	48 89 d0             	mov    %rdx,%rax
  412cfb:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  412cff:	72 07                	jb     412d08 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f4>
  412d01:	b8 01 00 00 00       	mov    $0x1,%eax
  412d06:	eb 05                	jmp    412d0d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f9>
  412d08:	b8 00 00 00 00       	mov    $0x0,%eax
  412d0d:	84 c0                	test   %al,%al
  412d0f:	0f 84 d7 00 00 00    	je     412dec <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6d8>
					__s.size() - __p);
  412d15:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412d1c:	48 89 c7             	mov    %rax,%rdi
  412d1f:	e8 f2 2f ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  412d24:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  412d28:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412d2c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412d30:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  412d34:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  412d38:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412d3c:	48 01 d1             	add    %rdx,%rcx
  412d3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412d43:	48 01 d1             	add    %rdx,%rcx
  412d46:	48 89 c2             	mov    %rax,%rdx
  412d49:	48 89 cf             	mov    %rcx,%rdi
  412d4c:	e8 6f 16 ff ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  412d51:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412d55:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412d59:	75 16                	jne    412d71 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x65d>
			__start[__p++] = '.';
  412d5b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  412d5f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  412d63:	48 8d 50 01          	lea    0x1(%rax),%rdx
  412d67:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  412d6b:	48 01 c8             	add    %rcx,%rax
  412d6e:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  412d71:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  412d75:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  412d79:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  412d7d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  412d81:	48 89 c2             	mov    %rax,%rdx
  412d84:	be 30 00 00 00       	mov    $0x30,%esi
  412d89:	48 89 cf             	mov    %rcx,%rdi
  412d8c:	e8 af 13 ff ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  412d91:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412d98:	48 89 c7             	mov    %rax,%rdi
  412d9b:	e8 3a 47 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  412da0:	48 89 c3             	mov    %rax,%rbx
  412da3:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412daa:	48 89 c7             	mov    %rax,%rdi
  412dad:	e8 64 2f ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412db2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412db6:	48 01 c2             	add    %rax,%rdx
  412db9:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  412dc0:	48 89 de             	mov    %rbx,%rsi
  412dc3:	48 89 c7             	mov    %rax,%rdi
  412dc6:	e8 21 47 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  412dcb:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  412dd2:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  412dd9:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  412de0:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  412de7:	e9 60 01 00 00       	jmp    412f4c <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x838>
		      __dynbuf.reserve(__s.size() + __extras);
  412dec:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412df3:	48 89 c7             	mov    %rax,%rdi
  412df6:	e8 1b 2f ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  412dfb:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412dff:	48 01 c2             	add    %rax,%rdx
  412e02:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412e09:	48 89 d6             	mov    %rdx,%rsi
  412e0c:	48 89 c7             	mov    %rax,%rdi
  412e0f:	e8 d0 85 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  412e14:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412e1b:	48 89 c7             	mov    %rax,%rdi
  412e1e:	e8 e9 c2 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  412e23:	84 c0                	test   %al,%al
  412e25:	0f 84 c5 00 00 00    	je     412ef0 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7dc>
			  __dynbuf = __s.substr(0, __p);
  412e2b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412e2f:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412e36:	be 00 00 00 00       	mov    $0x0,%esi
  412e3b:	48 89 c7             	mov    %rax,%rdi
  412e3e:	e8 f5 8c ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  412e43:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  412e4a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  412e51:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  412e58:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412e5f:	48 89 d6             	mov    %rdx,%rsi
  412e62:	48 89 c7             	mov    %rax,%rdi
  412e65:	e8 26 20 00 00       	call   414e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  412e6a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412e6e:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412e72:	75 14                	jne    412e88 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x774>
			    __dynbuf += '.';
  412e74:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412e7b:	be 2e 00 00 00       	mov    $0x2e,%esi
  412e80:	48 89 c7             	mov    %rax,%rdi
  412e83:	e8 2e 20 00 00       	call   414eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  412e88:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  412e8d:	74 1b                	je     412eaa <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x796>
			    __dynbuf.append(__z, '0');
  412e8f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  412e93:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412e9a:	ba 30 00 00 00       	mov    $0x30,%edx
  412e9f:	48 89 ce             	mov    %rcx,%rsi
  412ea2:	48 89 c7             	mov    %rax,%rdi
  412ea5:	e8 36 20 00 00       	call   414ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  412eaa:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  412eae:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  412eb5:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  412ebc:	48 89 ce             	mov    %rcx,%rsi
  412ebf:	48 89 c7             	mov    %rax,%rdi
  412ec2:	e8 71 8c ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  412ec7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  412ece:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  412ed5:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  412edc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412ee3:	48 89 d6             	mov    %rdx,%rsi
  412ee6:	48 89 c7             	mov    %rax,%rdi
  412ee9:	e8 3c 20 00 00       	call   414f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  412eee:	eb 3f                	jmp    412f2f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x81b>
			  __dynbuf.insert(__p, __extras, '0');
  412ef0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  412ef4:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  412ef8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412eff:	b9 30 00 00 00       	mov    $0x30,%ecx
  412f04:	48 89 c7             	mov    %rax,%rdi
  412f07:	e8 78 20 00 00       	call   414f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  412f0c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  412f10:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  412f14:	75 19                	jne    412f2f <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x81b>
			    __dynbuf[__p] = '.';
  412f16:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  412f1a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412f21:	48 89 d6             	mov    %rdx,%rsi
  412f24:	48 89 c7             	mov    %rax,%rdi
  412f27:	e8 b2 20 00 00       	call   414fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  412f2c:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  412f2f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  412f36:	48 89 c7             	mov    %rax,%rdi
  412f39:	e8 e4 50 ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  412f3e:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  412f45:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  412f4c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  412f53:	48 89 c7             	mov    %rax,%rdi
  412f56:	e8 cb 1b ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  412f5b:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  412f62:	00 00 00 00
  412f66:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  412f6d:	00 00 00 00
	    __str = __narrow_str;
  412f71:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  412f78:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  412f7f:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  412f86:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  412f8d:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  412f94:	0f b6 00             	movzbl (%rax),%eax
  412f97:	83 e0 20             	and    $0x20,%eax
  412f9a:	84 c0                	test   %al,%al
  412f9c:	0f 84 db 00 00 00    	je     41307d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
  412fa2:	db 6d 10             	fldt   0x10(%rbp)
  412fa5:	d9 e1                	fabs
  412fa7:	db 2d 83 85 00 00    	fldt   0x8583(%rip)        # 41b530 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  412fad:	df e9                	fucomip %st(1),%st
  412faf:	dd d8                	fstp   %st(0)
  412fb1:	0f 92 c0             	setb   %al
  412fb4:	83 f0 01             	xor    $0x1,%eax
  412fb7:	0f b6 c0             	movzbl %al,%eax
  412fba:	85 c0                	test   %eax,%eax
  412fbc:	0f 84 bb 00 00 00    	je     41307d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  412fc2:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  412fc9:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  412fd0:	48 89 d6             	mov    %rdx,%rsi
  412fd3:	48 89 c7             	mov    %rax,%rdi
  412fd6:	e8 ef 22 00 00       	call   4152ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  412fdb:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  412fdf:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  412fe6:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  412fed:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  412ff4:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  412ffb:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  413002:	4d 89 c1             	mov    %r8,%r9
  413005:	41 89 c8             	mov    %ecx,%r8d
  413008:	48 89 d1             	mov    %rdx,%rcx
  41300b:	48 89 c2             	mov    %rax,%rdx
  41300e:	e8 85 2d 00 00       	call   415d98 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  413013:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  41301a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  413021:	48 89 d6             	mov    %rdx,%rsi
  413024:	48 89 c7             	mov    %rax,%rdi
  413027:	e8 e4 22 00 00       	call   415310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  41302c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  413033:	48 89 c7             	mov    %rax,%rdi
  413036:	e8 39 45 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41303b:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  413042:	48 89 c7             	mov    %rax,%rdi
  413045:	e8 e6 12 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  41304a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  413051:	48 89 c7             	mov    %rax,%rdi
  413054:	e8 b3 c0 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  413059:	83 f0 01             	xor    $0x1,%eax
  41305c:	84 c0                	test   %al,%al
  41305e:	74 1d                	je     41307d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x969>
		__str = __wstr;
  413060:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  413067:	48 89 c7             	mov    %rax,%rdi
  41306a:	e8 b3 4f ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  41306f:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  413076:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  41307d:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413084:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  41308b:	48 89 d6             	mov    %rdx,%rsi
  41308e:	48 89 c7             	mov    %rax,%rdi
  413091:	e8 9e 2f 00 00       	call   416034 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  413096:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  41309a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4130a1:	48 89 c7             	mov    %rax,%rdi
  4130a4:	e8 6d 2c ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4130a9:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  4130ad:	0f 93 c0             	setae  %al
  4130b0:	84 c0                	test   %al,%al
  4130b2:	74 36                	je     4130ea <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9d6>
	    return __format::__write(__fc.out(), __str);
  4130b4:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4130bb:	48 89 c7             	mov    %rax,%rdi
  4130be:	e8 43 89 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4130c3:	48 89 c1             	mov    %rax,%rcx
  4130c6:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  4130cd:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  4130d4:	48 89 d6             	mov    %rdx,%rsi
  4130d7:	48 89 c2             	mov    %rax,%rdx
  4130da:	48 89 cf             	mov    %rcx,%rdi
  4130dd:	e8 7e b7 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4130e2:	48 89 c3             	mov    %rax,%rbx
  4130e5:	e9 80 01 00 00       	jmp    41326a <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb56>
	  char32_t __fill_char = _M_spec._M_fill;
  4130ea:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4130f1:	8b 40 08             	mov    0x8(%rax),%eax
  4130f4:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  4130f7:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4130fe:	0f b6 00             	movzbl (%rax),%eax
  413101:	83 e0 03             	and    $0x3,%eax
  413104:	0f b6 c0             	movzbl %al,%eax
  413107:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  41310a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  413111:	48 89 c7             	mov    %rax,%rdi
  413114:	e8 fd 2b ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413119:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  41311d:	48 29 c2             	sub    %rax,%rdx
  413120:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  413124:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  41312b:	48 89 c7             	mov    %rax,%rdi
  41312e:	e8 d3 88 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  413133:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  41313a:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  41313e:	0f 85 e9 00 00 00    	jne    41322d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
	      __align = _Align_right;
  413144:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  41314b:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413152:	0f b6 00             	movzbl (%rax),%eax
  413155:	83 e0 40             	and    $0x40,%eax
  413158:	84 c0                	test   %al,%al
  41315a:	0f 84 c6 00 00 00    	je     413226 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb12>
  413160:	db 6d 10             	fldt   0x10(%rbp)
  413163:	d9 e1                	fabs
  413165:	db 2d c5 83 00 00    	fldt   0x83c5(%rip)        # 41b530 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x44>
  41316b:	df e9                	fucomip %st(1),%st
  41316d:	dd d8                	fstp   %st(0)
  41316f:	0f 92 c0             	setb   %al
  413172:	83 f0 01             	xor    $0x1,%eax
  413175:	0f b6 c0             	movzbl %al,%eax
  413178:	85 c0                	test   %eax,%eax
  41317a:	0f 84 a6 00 00 00    	je     413226 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb12>
		  __fill_char = _CharT('0');
  413180:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  413187:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  41318e:	be 00 00 00 00       	mov    $0x0,%esi
  413193:	48 89 c7             	mov    %rax,%rdi
  413196:	e8 8d 2b ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  41319b:	0f b6 00             	movzbl (%rax),%eax
  41319e:	0f be c0             	movsbl %al,%eax
  4131a1:	89 c7                	mov    %eax,%edi
  4131a3:	e8 ac 20 ff ff       	call   405254 <_ZNSt8__format11__is_xdigitEc>
  4131a8:	83 f0 01             	xor    $0x1,%eax
  4131ab:	84 c0                	test   %al,%al
  4131ad:	74 7e                	je     41322d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
		      *__out++ = __str[0];
  4131af:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4131b6:	be 00 00 00 00       	mov    $0x0,%esi
  4131bb:	48 89 c7             	mov    %rax,%rdi
  4131be:	e8 65 2b ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  4131c3:	0f b6 00             	movzbl (%rax),%eax
  4131c6:	0f be c0             	movsbl %al,%eax
  4131c9:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  4131d0:	00 00 00
      operator++(int) { return *this; }
  4131d3:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  4131da:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4131e1:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  4131e8:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  4131ef:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  4131f5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4131fc:	48 8b 00             	mov    (%rax),%rax
  4131ff:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  413206:	89 d6                	mov    %edx,%esi
  413208:	48 89 c7             	mov    %rax,%rdi
  41320b:	e8 56 48 00 00       	call   417a66 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  413210:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  413217:	be 01 00 00 00       	mov    $0x1,%esi
  41321c:	48 89 c7             	mov    %rax,%rdi
  41321f:	e8 90 2e 00 00       	call   4160b4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  413224:	eb 07                	jmp    41322d <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb19>
		__fill_char = _CharT(' ');
  413226:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  41322d:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  413234:	48 89 c7             	mov    %rax,%rdi
  413237:	e8 09 68 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41323c:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  413240:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  413244:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  413247:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  41324e:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  413255:	48 8b 00             	mov    (%rax),%rax
  413258:	45 89 c1             	mov    %r8d,%r9d
  41325b:	49 89 f8             	mov    %rdi,%r8
  41325e:	48 89 c7             	mov    %rax,%rdi
  413261:	e8 0b 31 00 00       	call   416371 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  413266:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  413269:	90                   	nop
	}
  41326a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  413271:	48 89 c7             	mov    %rax,%rdi
  413274:	e8 fb 42 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  413279:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413280:	48 89 c7             	mov    %rax,%rdi
  413283:	e8 ec 42 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  413288:	48 89 d8             	mov    %rbx,%rax
  41328b:	eb 45                	jmp    4132d2 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbbe>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  41328d:	48 89 c3             	mov    %rax,%rbx
  413290:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  413297:	48 89 c7             	mov    %rax,%rdi
  41329a:	e8 91 10 ff ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  41329f:	eb 03                	jmp    4132a4 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xb90>
	}
  4132a1:	48 89 c3             	mov    %rax,%rbx
  4132a4:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4132ab:	48 89 c7             	mov    %rax,%rdi
  4132ae:	e8 c1 42 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4132b3:	eb 03                	jmp    4132b8 <_ZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba4>
  4132b5:	48 89 c3             	mov    %rax,%rbx
  4132b8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4132bf:	48 89 c7             	mov    %rax,%rdi
  4132c2:	e8 ad 42 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  4132c7:	48 89 d8             	mov    %rbx,%rax
  4132ca:	48 89 c7             	mov    %rax,%rdi
  4132cd:	e8 3e 11 ff ff       	call   404410 <_Unwind_Resume@plt>
  4132d2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4132d6:	c9                   	leave
  4132d7:	c3                   	ret

00000000004132d8 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE>:
	format(basic_string_view<_CharT> __s,
  4132d8:	55                   	push   %rbp
  4132d9:	48 89 e5             	mov    %rsp,%rbp
  4132dc:	48 83 ec 30          	sub    $0x30,%rsp
  4132e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4132e4:	48 89 f0             	mov    %rsi,%rax
  4132e7:	48 89 d6             	mov    %rdx,%rsi
  4132ea:	48 89 c0             	mov    %rax,%rax
  4132ed:	ba 00 00 00 00       	mov    $0x0,%edx
  4132f2:	48 89 f2             	mov    %rsi,%rdx
  4132f5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4132f9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4132fd:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	  if (_M_spec._M_width_kind == _WP_none
  413301:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413305:	0f b7 00             	movzwl (%rax),%eax
  413308:	66 25 80 01          	and    $0x180,%ax
  41330c:	66 85 c0             	test   %ax,%ax
  41330f:	75 36                	jne    413347 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0x6f>
		&& _M_spec._M_prec_kind == _WP_none)
  413311:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413315:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413319:	83 e0 06             	and    $0x6,%eax
  41331c:	84 c0                	test   %al,%al
  41331e:	75 27                	jne    413347 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0x6f>
	    return __format::__write(__fc.out(), __s);
  413320:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413324:	48 89 c7             	mov    %rax,%rdi
  413327:	e8 da 86 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  41332c:	48 89 c1             	mov    %rax,%rcx
  41332f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  413333:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413337:	48 89 d6             	mov    %rdx,%rsi
  41333a:	48 89 c2             	mov    %rax,%rdx
  41333d:	48 89 cf             	mov    %rcx,%rdi
  413340:	e8 1b b5 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  413345:	eb 7f                	jmp    4133c6 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xee>
	      if (_M_spec._M_prec_kind != _WP_none)
  413347:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41334b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41334f:	83 e0 06             	and    $0x6,%eax
  413352:	84 c0                	test   %al,%al
  413354:	74 30                	je     413386 <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xae>
		  size_t __prec = _M_spec._M_get_precision(__fc);
  413356:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41335a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41335e:	48 89 d6             	mov    %rdx,%rsi
  413361:	48 89 c7             	mov    %rax,%rdi
  413364:	e8 75 28 00 00       	call   415bde <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  413369:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		  __estimated_width = __unicode::__truncate(__s, __prec);
  41336d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  413371:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  413375:	48 89 d6             	mov    %rdx,%rsi
  413378:	48 89 c7             	mov    %rax,%rdi
  41337b:	e8 7c 35 00 00       	call   4168fc <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm>
  413380:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  413384:	eb 17                	jmp    41339d <_ZNKSt8__format15__formatter_strIcE6formatINS_10_Sink_iterIcEEEET_St17basic_string_viewIcSt11char_traitsIcEERSt20basic_format_contextIS5_cE+0xc5>
		__estimated_width = __unicode::__field_width(__s);
  413386:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41338a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41338e:	48 89 d7             	mov    %rdx,%rdi
  413391:	48 89 c6             	mov    %rax,%rsi
  413394:	e8 ef 36 00 00       	call   416a88 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE>
  413399:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
						  __fc, _M_spec);
  41339d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
	  return __format::__write_padded_as_spec(__s, __estimated_width,
  4133a1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4133a5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4133a9:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  4133ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4133b1:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  4133b7:	49 89 f8             	mov    %rdi,%r8
  4133ba:	48 89 f7             	mov    %rsi,%rdi
  4133bd:	48 89 c6             	mov    %rax,%rsi
  4133c0:	e8 03 00 00 00       	call   4133c8 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>
						  __fc, _M_spec);
  4133c5:	90                   	nop
	}
  4133c6:	c9                   	leave
  4133c7:	c3                   	ret

00000000004133c8 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE>:
    __write_padded_as_spec(basic_string_view<type_identity_t<_CharT>> __str,
  4133c8:	55                   	push   %rbp
  4133c9:	48 89 e5             	mov    %rsp,%rbp
  4133cc:	53                   	push   %rbx
  4133cd:	48 83 ec 48          	sub    $0x48,%rsp
  4133d1:	48 89 f8             	mov    %rdi,%rax
  4133d4:	49 89 f2             	mov    %rsi,%r10
  4133d7:	48 89 c6             	mov    %rax,%rsi
  4133da:	bf 00 00 00 00       	mov    $0x0,%edi
  4133df:	4c 89 d7             	mov    %r10,%rdi
  4133e2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4133e6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4133ea:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4133ee:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4133f2:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  4133f6:	44 89 4d b4          	mov    %r9d,-0x4c(%rbp)
      size_t __width = __spec._M_get_width(__fc);
  4133fa:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4133fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413402:	48 89 d6             	mov    %rdx,%rsi
  413405:	48 89 c7             	mov    %rax,%rdi
  413408:	e8 27 2c 00 00       	call   416034 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  41340d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__width <= __estimated_width)
  413411:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413415:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  413419:	72 27                	jb     413442 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0x7a>
	return __format::__write(__fc.out(), __str);
  41341b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41341f:	48 89 c7             	mov    %rax,%rdi
  413422:	e8 df 85 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  413427:	48 89 c1             	mov    %rax,%rcx
  41342a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41342e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413432:	48 89 d6             	mov    %rdx,%rsi
  413435:	48 89 c2             	mov    %rax,%rdx
  413438:	48 89 cf             	mov    %rcx,%rdi
  41343b:	e8 20 b4 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  413440:	eb 61                	jmp    4134a3 <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0xdb>
      const size_t __nfill = __width - __estimated_width;
  413442:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413446:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  41344a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__spec._M_align)
  41344e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413452:	0f b6 00             	movzbl (%rax),%eax
  413455:	83 e0 03             	and    $0x3,%eax
  413458:	84 c0                	test   %al,%al
  41345a:	74 10                	je     41346c <_ZNSt8__format22__write_padded_as_specIcNS_10_Sink_iterIcEEEET0_St17basic_string_viewINSt13type_identityIT_E4typeESt11char_traitsIS8_EEmRSt20basic_format_contextIS3_S6_ERKNS_5_SpecIS6_EENS_6_AlignE+0xa4>
	__align = __spec._M_align;
  41345c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413460:	0f b6 00             	movzbl (%rax),%eax
  413463:	83 e0 03             	and    $0x3,%eax
  413466:	0f b6 c0             	movzbl %al,%eax
  413469:	89 45 b4             	mov    %eax,-0x4c(%rbp)
				      __spec._M_fill);
  41346c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  413470:	8b 58 08             	mov    0x8(%rax),%ebx
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
  413473:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  413477:	48 89 c7             	mov    %rax,%rdi
  41347a:	e8 87 85 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  41347f:	48 89 c7             	mov    %rax,%rdi
  413482:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  413486:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
  413489:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41348d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  413491:	41 89 d9             	mov    %ebx,%r9d
  413494:	49 89 f0             	mov    %rsi,%r8
  413497:	48 89 d6             	mov    %rdx,%rsi
  41349a:	48 89 c2             	mov    %rax,%rdx
  41349d:	e8 cf 2e 00 00       	call   416371 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
				      __spec._M_fill);
  4134a2:	90                   	nop
    }
  4134a3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4134a7:	c9                   	leave
  4134a8:	c3                   	ret
  4134a9:	90                   	nop

00000000004134aa <_ZNSt8__format15__formatter_intIcE8_M_parseInEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  4134aa:	55                   	push   %rbp
  4134ab:	48 89 e5             	mov    %rsp,%rbp
  4134ae:	48 83 ec 10          	sub    $0x10,%rsp
  4134b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4134b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  4134ba:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4134be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4134c2:	ba 01 00 00 00       	mov    $0x1,%edx
  4134c7:	48 89 ce             	mov    %rcx,%rsi
  4134ca:	48 89 c7             	mov    %rax,%rdi
  4134cd:	e8 04 35 ff ff       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  4134d2:	c9                   	leave
  4134d3:	c3                   	ret

00000000004134d4 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  4134d4:	55                   	push   %rbp
  4134d5:	48 89 e5             	mov    %rsp,%rbp
  4134d8:	53                   	push   %rbx
  4134d9:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  4134e0:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  4134e7:	48 89 f0             	mov    %rsi,%rax
  4134ea:	48 89 d6             	mov    %rdx,%rsi
  4134ed:	48 89 c0             	mov    %rax,%rax
  4134f0:	ba 00 00 00 00       	mov    $0x0,%edx
  4134f5:	48 89 f2             	mov    %rsi,%rdx
  4134f8:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  4134ff:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  413506:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  41350d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413514:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413518:	83 e0 78             	and    $0x78,%eax
  41351b:	3c 38                	cmp    $0x38,%al
  41351d:	75 39                	jne    413558 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x84>
	    return _M_format_character(_S_to_character(__i), __fc);
  41351f:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  413526:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  41352d:	48 89 d7             	mov    %rdx,%rdi
  413530:	48 89 c6             	mov    %rax,%rsi
  413533:	e8 2e 36 00 00       	call   416b66 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_>
  413538:	0f be c8             	movsbl %al,%ecx
  41353b:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  413542:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413549:	89 ce                	mov    %ecx,%esi
  41354b:	48 89 c7             	mov    %rax,%rdi
  41354e:	e8 ab be ff ff       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  413553:	e9 c8 03 00 00       	jmp    413920 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x44c>
	  to_chars_result __res{};
  413558:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
  41355f:	00 00 00 00
  413563:	48 c7 85 e8 fe ff ff 	movq   $0x0,-0x118(%rbp)
  41356a:	00 00 00 00
	  string_view __base_prefix;
  41356e:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  413575:	00 00 00 00
  413579:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  413580:	00 00 00 00
	  if (__i < 0)
  413584:	48 83 bd b8 fe ff ff 	cmpq   $0x0,-0x148(%rbp)
  41358b:	00
  41358c:	79 22                	jns    4135b0 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xdc>
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
  41358e:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  413595:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  41359c:	48 f7 d8             	neg    %rax
  41359f:	48 83 d2 00          	adc    $0x0,%rdx
  4135a3:	48 f7 da             	neg    %rdx
  4135a6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4135aa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4135ae:	eb 16                	jmp    4135c6 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xf2>
	    __u = __i;
  4135b0:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4135b7:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  4135be:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4135c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  char* __start = __buf + 3;
  4135c6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4135cd:	48 83 c0 03          	add    $0x3,%rax
  4135d1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  4135d5:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4135dc:	48 05 83 00 00 00    	add    $0x83,%rax
  4135e2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  char* const __start_digits = __start;
  4135e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4135ea:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  switch (_M_spec._M_type)
  4135ee:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4135f5:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4135f9:	c0 e8 03             	shr    $0x3,%al
  4135fc:	83 e0 0f             	and    $0xf,%eax
  4135ff:	0f b6 c0             	movzbl %al,%eax
  413602:	83 f8 06             	cmp    $0x6,%eax
  413605:	0f 8f 0a 02 00 00    	jg     413815 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  41360b:	83 f8 05             	cmp    $0x5,%eax
  41360e:	0f 8d 46 01 00 00    	jge    41375a <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x286>
  413614:	83 f8 04             	cmp    $0x4,%eax
  413617:	0f 84 d2 00 00 00    	je     4136ef <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x21b>
  41361d:	83 f8 04             	cmp    $0x4,%eax
  413620:	0f 8f ef 01 00 00    	jg     413815 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  413626:	83 f8 01             	cmp    $0x1,%eax
  413629:	7f 0d                	jg     413638 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x164>
  41362b:	85 c0                	test   %eax,%eax
  41362d:	0f 89 88 00 00 00    	jns    4136bb <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1e7>
  413633:	e9 dd 01 00 00       	jmp    413815 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  413638:	83 e8 02             	sub    $0x2,%eax
  41363b:	83 f8 01             	cmp    $0x1,%eax
  41363e:	0f 87 d1 01 00 00    	ja     413815 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  413644:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41364b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  41364f:	83 e0 78             	and    $0x78,%eax
  413652:	3c 10                	cmp    $0x10,%al
  413654:	75 07                	jne    41365d <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x189>
  413656:	ba f2 b3 41 00       	mov    $0x41b3f2,%edx
  41365b:	eb 05                	jmp    413662 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x18e>
  41365d:	ba f5 b3 41 00       	mov    $0x41b3f5,%edx
  413662:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  413666:	48 89 d6             	mov    %rdx,%rsi
  413669:	48 89 c7             	mov    %rax,%rdi
  41366c:	e8 0f 25 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413671:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  413675:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  413679:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413680:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  413687:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41368b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41368f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413693:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  413697:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  41369d:	48 89 d1             	mov    %rdx,%rcx
  4136a0:	48 89 c2             	mov    %rax,%rdx
  4136a3:	e8 05 35 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  4136a8:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4136af:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  4136b6:	e9 5b 01 00 00       	jmp    413816 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __res = to_chars(__start, __end, __u, 10);
  4136bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4136bf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4136c3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4136c7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4136cb:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  4136d1:	48 89 d1             	mov    %rdx,%rcx
  4136d4:	48 89 c2             	mov    %rax,%rdx
  4136d7:	e8 d1 34 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  4136dc:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4136e3:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  4136ea:	e9 27 01 00 00       	jmp    413816 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      if (__i != 0)
  4136ef:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4136f6:	48 0b 85 b8 fe ff ff 	or     -0x148(%rbp),%rax
  4136fd:	74 27                	je     413726 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x252>
		__base_prefix = "0";
  4136ff:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  413703:	be f8 b3 41 00       	mov    $0x41b3f8,%esi
  413708:	48 89 c7             	mov    %rax,%rdi
  41370b:	e8 70 24 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413710:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  413714:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  413718:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  41371f:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  413726:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41372a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41372e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413732:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  413736:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  41373c:	48 89 d1             	mov    %rdx,%rcx
  41373f:	48 89 c2             	mov    %rax,%rdx
  413742:	e8 66 34 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413747:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  41374e:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  413755:	e9 bc 00 00 00       	jmp    413816 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  41375a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413761:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413765:	83 e0 78             	and    $0x78,%eax
  413768:	3c 28                	cmp    $0x28,%al
  41376a:	75 07                	jne    413773 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x29f>
  41376c:	ba fa b3 41 00       	mov    $0x41b3fa,%edx
  413771:	eb 05                	jmp    413778 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2a4>
  413773:	ba fd b3 41 00       	mov    $0x41b3fd,%edx
  413778:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41377c:	48 89 d6             	mov    %rdx,%rsi
  41377f:	48 89 c7             	mov    %rax,%rdi
  413782:	e8 f9 23 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413787:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41378b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  41378f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413796:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  41379d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4137a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4137a5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  4137a9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4137ad:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  4137b3:	48 89 d1             	mov    %rdx,%rcx
  4137b6:	48 89 c2             	mov    %rax,%rdx
  4137b9:	e8 ef 33 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  4137be:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4137c5:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  4137cc:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4137d3:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4137d7:	83 e0 78             	and    $0x78,%eax
  4137da:	3c 30                	cmp    $0x30,%al
  4137dc:	75 37                	jne    413815 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  4137de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4137e2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4137e6:	eb 1e                	jmp    413806 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x332>
		  *__p = __builtin_toupper(*__p);
  4137e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4137ec:	0f b6 00             	movzbl (%rax),%eax
  4137ef:	0f be c0             	movsbl %al,%eax
  4137f2:	89 c7                	mov    %eax,%edi
  4137f4:	e8 27 0c ff ff       	call   404420 <toupper@plt>
  4137f9:	89 c2                	mov    %eax,%edx
  4137fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4137ff:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  413801:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
  413806:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  41380d:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  413811:	75 d5                	jne    4137e8 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x314>
	      break;
  413813:	eb 00                	jmp    413815 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x341>
  413815:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  413816:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41381d:	0f b6 00             	movzbl (%rax),%eax
  413820:	83 e0 10             	and    $0x10,%eax
  413823:	84 c0                	test   %al,%al
  413825:	74 1b                	je     413842 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x36e>
  413827:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  41382e:	48 89 c7             	mov    %rax,%rdi
  413831:	e8 e0 24 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413836:	48 85 c0             	test   %rax,%rax
  413839:	74 07                	je     413842 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x36e>
  41383b:	b8 01 00 00 00       	mov    $0x1,%eax
  413840:	eb 05                	jmp    413847 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x373>
  413842:	b8 00 00 00 00       	mov    $0x0,%eax
  413847:	84 c0                	test   %al,%al
  413849:	74 4c                	je     413897 <_ZNKSt8__format15__formatter_intIcE6formatInNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x3c3>
	      __start -= __base_prefix.size();
  41384b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413852:	48 89 c7             	mov    %rax,%rdi
  413855:	e8 bc 24 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41385a:	48 f7 d8             	neg    %rax
  41385d:	48 01 45 d8          	add    %rax,-0x28(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  413861:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413868:	48 89 c7             	mov    %rax,%rdi
  41386b:	e8 a6 24 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413870:	48 89 c3             	mov    %rax,%rbx
  413873:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  41387a:	48 89 c7             	mov    %rax,%rdi
  41387d:	e8 58 3c ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  413882:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413886:	48 89 d1             	mov    %rdx,%rcx
  413889:	48 89 da             	mov    %rbx,%rdx
  41388c:	48 89 c6             	mov    %rax,%rsi
  41388f:	48 89 cf             	mov    %rcx,%rdi
  413892:	e8 99 09 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  413897:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41389b:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
  41389f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4138a6:	0f b6 00             	movzbl (%rax),%eax
  4138a9:	c0 e8 02             	shr    $0x2,%al
  4138ac:	83 e0 03             	and    $0x3,%eax
  4138af:	0f b6 d0             	movzbl %al,%edx
  4138b2:	48 8b b5 b0 fe ff ff 	mov    -0x150(%rbp),%rsi
  4138b9:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  4138c0:	48 89 f7             	mov    %rsi,%rdi
  4138c3:	48 89 c6             	mov    %rax,%rsi
  4138c6:	e8 5f 17 00 00       	call   41502a <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_>
  4138cb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			       __start_digits - __start, __fc);
  4138cf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4138d3:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  4138d7:	48 89 c3             	mov    %rax,%rbx
  4138da:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4138e1:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4138e5:	48 89 c2             	mov    %rax,%rdx
  4138e8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4138ec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4138f0:	48 89 ce             	mov    %rcx,%rsi
  4138f3:	48 89 c7             	mov    %rax,%rdi
  4138f6:	e8 f1 3b ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  4138fb:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  413902:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  413906:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  41390a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413911:	49 89 c8             	mov    %rcx,%r8
  413914:	48 89 d9             	mov    %rbx,%rcx
  413917:	48 89 c7             	mov    %rax,%rdi
  41391a:	e8 55 1d 00 00       	call   415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  41391f:	90                   	nop
	}
  413920:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413924:	c9                   	leave
  413925:	c3                   	ret

0000000000413926 <_ZNSt8__format15__formatter_intIcE8_M_parseIoEEPKcRSt26basic_format_parse_contextIcE>:
	_M_parse(basic_format_parse_context<_CharT>& __pc)
  413926:	55                   	push   %rbp
  413927:	48 89 e5             	mov    %rsp,%rbp
  41392a:	48 83 ec 10          	sub    $0x10,%rsp
  41392e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413932:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return _M_do_parse(__pc, _AsInteger);
  413936:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  41393a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41393e:	ba 01 00 00 00       	mov    $0x1,%edx
  413943:	48 89 ce             	mov    %rcx,%rsi
  413946:	48 89 c7             	mov    %rax,%rdi
  413949:	e8 88 30 ff ff       	call   4069d6 <_ZNSt8__format15__formatter_intIcE11_M_do_parseERSt26basic_format_parse_contextIcENS_10_Pres_typeE>
	}
  41394e:	c9                   	leave
  41394f:	c3                   	ret

0000000000413950 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
  413950:	55                   	push   %rbp
  413951:	48 89 e5             	mov    %rsp,%rbp
  413954:	53                   	push   %rbx
  413955:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  41395c:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  413963:	48 89 f0             	mov    %rsi,%rax
  413966:	48 89 d6             	mov    %rdx,%rsi
  413969:	48 89 c0             	mov    %rax,%rax
  41396c:	ba 00 00 00 00       	mov    $0x0,%edx
  413971:	48 89 f2             	mov    %rsi,%rdx
  413974:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  41397b:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  413982:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
	  if (_M_spec._M_type == _Pres_c)
  413989:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413990:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413994:	83 e0 78             	and    $0x78,%eax
  413997:	3c 38                	cmp    $0x38,%al
  413999:	75 39                	jne    4139d4 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x84>
	    return _M_format_character(_S_to_character(__i), __fc);
  41399b:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  4139a2:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  4139a9:	48 89 d7             	mov    %rdx,%rdi
  4139ac:	48 89 c6             	mov    %rax,%rsi
  4139af:	e8 38 32 00 00       	call   416bec <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_>
  4139b4:	0f be c8             	movsbl %al,%ecx
  4139b7:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  4139be:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4139c5:	89 ce                	mov    %ecx,%esi
  4139c7:	48 89 c7             	mov    %rax,%rdi
  4139ca:	e8 2f ba ff ff       	call   40f3fe <_ZNKSt8__format15__formatter_intIcE19_M_format_characterINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorEcRS7_>
  4139cf:	e9 9c 03 00 00       	jmp    413d70 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x420>
	  to_chars_result __res{};
  4139d4:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
  4139db:	00 00 00 00
  4139df:	48 c7 85 e8 fe ff ff 	movq   $0x0,-0x118(%rbp)
  4139e6:	00 00 00 00
	  string_view __base_prefix;
  4139ea:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  4139f1:	00 00 00 00
  4139f5:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  4139fc:	00 00 00 00
	    __u = __i;
  413a00:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  413a07:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  413a0e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  413a12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  char* __start = __buf + 3;
  413a16:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  413a1d:	48 83 c0 03          	add    $0x3,%rax
  413a21:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* const __end = __buf + sizeof(__buf);
  413a25:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  413a2c:	48 05 83 00 00 00    	add    $0x83,%rax
  413a32:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	  char* const __start_digits = __start;
  413a36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413a3a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  switch (_M_spec._M_type)
  413a3e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413a45:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413a49:	c0 e8 03             	shr    $0x3,%al
  413a4c:	83 e0 0f             	and    $0xf,%eax
  413a4f:	0f b6 c0             	movzbl %al,%eax
  413a52:	83 f8 06             	cmp    $0x6,%eax
  413a55:	0f 8f 0a 02 00 00    	jg     413c65 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  413a5b:	83 f8 05             	cmp    $0x5,%eax
  413a5e:	0f 8d 46 01 00 00    	jge    413baa <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x25a>
  413a64:	83 f8 04             	cmp    $0x4,%eax
  413a67:	0f 84 d2 00 00 00    	je     413b3f <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1ef>
  413a6d:	83 f8 04             	cmp    $0x4,%eax
  413a70:	0f 8f ef 01 00 00    	jg     413c65 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  413a76:	83 f8 01             	cmp    $0x1,%eax
  413a79:	7f 0d                	jg     413a88 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x138>
  413a7b:	85 c0                	test   %eax,%eax
  413a7d:	0f 89 88 00 00 00    	jns    413b0b <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x1bb>
  413a83:	e9 dd 01 00 00       	jmp    413c65 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  413a88:	83 e8 02             	sub    $0x2,%eax
  413a8b:	83 f8 01             	cmp    $0x1,%eax
  413a8e:	0f 87 d1 01 00 00    	ja     413c65 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
  413a94:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413a9b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413a9f:	83 e0 78             	and    $0x78,%eax
  413aa2:	3c 10                	cmp    $0x10,%al
  413aa4:	75 07                	jne    413aad <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x15d>
  413aa6:	ba f2 b3 41 00       	mov    $0x41b3f2,%edx
  413aab:	eb 05                	jmp    413ab2 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x162>
  413aad:	ba f5 b3 41 00       	mov    $0x41b3f5,%edx
  413ab2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  413ab6:	48 89 d6             	mov    %rdx,%rsi
  413ab9:	48 89 c7             	mov    %rax,%rdi
  413abc:	e8 bf 20 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413ac1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  413ac5:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  413ac9:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413ad0:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 2);
  413ad7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  413adb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413adf:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413ae3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  413ae7:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  413aed:	48 89 d1             	mov    %rdx,%rcx
  413af0:	48 89 c2             	mov    %rax,%rdx
  413af3:	e8 b5 30 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413af8:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413aff:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  413b06:	e9 5b 01 00 00       	jmp    413c66 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      __res = to_chars(__start, __end, __u, 10);
  413b0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  413b0f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413b13:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413b17:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  413b1b:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  413b21:	48 89 d1             	mov    %rdx,%rcx
  413b24:	48 89 c2             	mov    %rax,%rdx
  413b27:	e8 81 30 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413b2c:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413b33:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  413b3a:	e9 27 01 00 00       	jmp    413c66 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      if (__i != 0)
  413b3f:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  413b46:	48 0b 85 b8 fe ff ff 	or     -0x148(%rbp),%rax
  413b4d:	74 27                	je     413b76 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
		__base_prefix = "0";
  413b4f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  413b53:	be f8 b3 41 00       	mov    $0x41b3f8,%esi
  413b58:	48 89 c7             	mov    %rax,%rdi
  413b5b:	e8 20 20 ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413b60:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  413b64:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  413b68:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413b6f:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 8);
  413b76:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  413b7a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413b7e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413b82:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  413b86:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  413b8c:	48 89 d1             	mov    %rdx,%rcx
  413b8f:	48 89 c2             	mov    %rax,%rdx
  413b92:	e8 16 30 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413b97:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413b9e:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      break;
  413ba5:	e9 bc 00 00 00       	jmp    413c66 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x316>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
  413baa:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413bb1:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413bb5:	83 e0 78             	and    $0x78,%eax
  413bb8:	3c 28                	cmp    $0x28,%al
  413bba:	75 07                	jne    413bc3 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x273>
  413bbc:	ba fa b3 41 00       	mov    $0x41b3fa,%edx
  413bc1:	eb 05                	jmp    413bc8 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x278>
  413bc3:	ba fd b3 41 00       	mov    $0x41b3fd,%edx
  413bc8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  413bcc:	48 89 d6             	mov    %rdx,%rsi
  413bcf:	48 89 c7             	mov    %rax,%rdi
  413bd2:	e8 a9 1f ff ff       	call   405b80 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
  413bd7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  413bdb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  413bdf:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  413be6:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
	      __res = to_chars(__start, __end, __u, 16);
  413bed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  413bf1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413bf5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  413bf9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  413bfd:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  413c03:	48 89 d1             	mov    %rdx,%rcx
  413c06:	48 89 c2             	mov    %rax,%rdx
  413c09:	e8 9f 2f 00 00       	call   416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>
  413c0e:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  413c15:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	      if (_M_spec._M_type == _Pres_X)
  413c1c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413c23:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413c27:	83 e0 78             	and    $0x78,%eax
  413c2a:	3c 30                	cmp    $0x30,%al
  413c2c:	75 37                	jne    413c65 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
		for (auto __p = __start; __p != __res.ptr; ++__p)
  413c2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413c32:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  413c36:	eb 1e                	jmp    413c56 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x306>
		  *__p = __builtin_toupper(*__p);
  413c38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413c3c:	0f b6 00             	movzbl (%rax),%eax
  413c3f:	0f be c0             	movsbl %al,%eax
  413c42:	89 c7                	mov    %eax,%edi
  413c44:	e8 d7 07 ff ff       	call   404420 <toupper@plt>
  413c49:	89 c2                	mov    %eax,%edx
  413c4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  413c4f:	88 10                	mov    %dl,(%rax)
		for (auto __p = __start; __p != __res.ptr; ++__p)
  413c51:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  413c56:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  413c5d:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  413c61:	75 d5                	jne    413c38 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x2e8>
	      break;
  413c63:	eb 00                	jmp    413c65 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
  413c65:	90                   	nop
	  if (_M_spec._M_alt && __base_prefix.size())
  413c66:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413c6d:	0f b6 00             	movzbl (%rax),%eax
  413c70:	83 e0 10             	and    $0x10,%eax
  413c73:	84 c0                	test   %al,%al
  413c75:	74 1b                	je     413c92 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
  413c77:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413c7e:	48 89 c7             	mov    %rax,%rdi
  413c81:	e8 90 20 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413c86:	48 85 c0             	test   %rax,%rax
  413c89:	74 07                	je     413c92 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x342>
  413c8b:	b8 01 00 00 00       	mov    $0x1,%eax
  413c90:	eb 05                	jmp    413c97 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x347>
  413c92:	b8 00 00 00 00       	mov    $0x0,%eax
  413c97:	84 c0                	test   %al,%al
  413c99:	74 4c                	je     413ce7 <_ZNKSt8__format15__formatter_intIcE6formatIoNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x397>
	      __start -= __base_prefix.size();
  413c9b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413ca2:	48 89 c7             	mov    %rax,%rdi
  413ca5:	e8 6c 20 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413caa:	48 f7 d8             	neg    %rax
  413cad:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	      __builtin_memcpy(__start, __base_prefix.data(),
  413cb1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413cb8:	48 89 c7             	mov    %rax,%rdi
  413cbb:	e8 56 20 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  413cc0:	48 89 c3             	mov    %rax,%rbx
  413cc3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  413cca:	48 89 c7             	mov    %rax,%rdi
  413ccd:	e8 08 38 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  413cd2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413cd6:	48 89 d1             	mov    %rdx,%rcx
  413cd9:	48 89 da             	mov    %rbx,%rdx
  413cdc:	48 89 c6             	mov    %rax,%rsi
  413cdf:	48 89 cf             	mov    %rcx,%rdi
  413ce2:	e8 49 05 ff ff       	call   404230 <memcpy@plt>
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
  413ce7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413ceb:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
  413cef:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413cf6:	0f b6 00             	movzbl (%rax),%eax
  413cf9:	c0 e8 02             	shr    $0x2,%al
  413cfc:	83 e0 03             	and    $0x3,%eax
  413cff:	0f b6 d0             	movzbl %al,%edx
  413d02:	48 8b b5 b0 fe ff ff 	mov    -0x150(%rbp),%rsi
  413d09:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  413d10:	48 89 f7             	mov    %rsi,%rdi
  413d13:	48 89 c6             	mov    %rax,%rsi
  413d16:	e8 6c 13 00 00       	call   415087 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_>
  413d1b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			       __start_digits - __start, __fc);
  413d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  413d23:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
  413d27:	48 89 c3             	mov    %rax,%rbx
  413d2a:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  413d31:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  413d35:	48 89 c2             	mov    %rax,%rdx
  413d38:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  413d3c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  413d40:	48 89 ce             	mov    %rcx,%rsi
  413d43:	48 89 c7             	mov    %rax,%rdi
  413d46:	e8 a1 37 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  413d4b:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  413d52:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  413d56:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  413d5a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  413d61:	49 89 c8             	mov    %rcx,%r8
  413d64:	48 89 d9             	mov    %rbx,%rcx
  413d67:	48 89 c7             	mov    %rax,%rdi
  413d6a:	e8 05 19 00 00       	call   415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>
			       __start_digits - __start, __fc);
  413d6f:	90                   	nop
	}
  413d70:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413d74:	c9                   	leave
  413d75:	c3                   	ret

0000000000413d76 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>:
	  auto __to_chars = [&](char* __b, char* __e) {
  413d76:	55                   	push   %rbp
  413d77:	48 89 e5             	mov    %rsp,%rbp
  413d7a:	48 83 ec 20          	sub    $0x20,%rsp
  413d7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  413d82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  413d86:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    if (__use_prec)
  413d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413d8e:	48 8b 00             	mov    (%rax),%rax
  413d91:	0f b6 00             	movzbl (%rax),%eax
  413d94:	84 c0                	test   %al,%al
  413d96:	74 35                	je     413dcd <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x57>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
  413d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413d9c:	48 8b 40 18          	mov    0x18(%rax),%rax
  413da0:	48 8b 00             	mov    (%rax),%rax
  413da3:	89 c1                	mov    %eax,%ecx
  413da5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413da9:	48 8b 40 10          	mov    0x10(%rax),%rax
  413dad:	8b 10                	mov    (%rax),%edx
  413daf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413db3:	48 8b 40 08          	mov    0x8(%rax),%rax
  413db7:	66 0f 6f 00          	movdqa (%rax),%xmm0
  413dbb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  413dbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413dc3:	48 89 c7             	mov    %rax,%rdi
  413dc6:	e8 75 04 ff ff       	call   404240 <_ZSt8to_charsPcS_DF128_St12chars_formati@plt>
  413dcb:	eb 59                	jmp    413e26 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb0>
	    else if (__fmt != chars_format{})
  413dcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413dd1:	48 8b 40 10          	mov    0x10(%rax),%rax
  413dd5:	8b 00                	mov    (%rax),%eax
  413dd7:	85 c0                	test   %eax,%eax
  413dd9:	74 2b                	je     413e06 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0x90>
	      return __format::to_chars(__b, __e, __v, __fmt);
  413ddb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413ddf:	48 8b 40 10          	mov    0x10(%rax),%rax
  413de3:	8b 10                	mov    (%rax),%edx
  413de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413de9:	48 8b 40 08          	mov    0x8(%rax),%rax
  413ded:	66 0f 6f 00          	movdqa (%rax),%xmm0
  413df1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  413df5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413df9:	48 89 ce             	mov    %rcx,%rsi
  413dfc:	48 89 c7             	mov    %rax,%rdi
  413dff:	e8 ec 03 ff ff       	call   4041f0 <_ZSt8to_charsPcS_DF128_St12chars_format@plt>
  413e04:	eb 20                	jmp    413e26 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_+0xb0>
	      return __format::to_chars(__b, __e, __v);
  413e06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  413e0a:	48 8b 40 08          	mov    0x8(%rax),%rax
  413e0e:	66 0f 6f 00          	movdqa (%rax),%xmm0
  413e12:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  413e16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  413e1a:	48 89 d6             	mov    %rdx,%rsi
  413e1d:	48 89 c7             	mov    %rax,%rdi
  413e20:	e8 cb 05 ff ff       	call   4043f0 <_ZSt8to_charsPcS_DF128_@plt>
  413e25:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  413e26:	c9                   	leave
  413e27:	c3                   	ret

0000000000413e28 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>:
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  413e28:	55                   	push   %rbp
  413e29:	48 89 e5             	mov    %rsp,%rbp
  413e2c:	53                   	push   %rbx
  413e2d:	48 83 ec 28          	sub    $0x28,%rsp
  413e31:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  413e35:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  413e39:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		    __res = __to_chars(__p + 1, __p + __n - 1);
  413e3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413e41:	48 8b 00             	mov    (%rax),%rax
  413e44:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  413e48:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  413e4c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  413e50:	48 01 ca             	add    %rcx,%rdx
  413e53:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  413e57:	48 83 c1 01          	add    $0x1,%rcx
  413e5b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  413e5f:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  413e63:	48 89 ce             	mov    %rcx,%rsi
  413e66:	48 89 c7             	mov    %rax,%rdi
  413e69:	e8 08 ff ff ff       	call   413d76 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  413e6e:	48 89 03             	mov    %rax,(%rbx)
  413e71:	48 89 53 08          	mov    %rdx,0x8(%rbx)
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
  413e75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413e79:	48 8b 40 08          	mov    0x8(%rax),%rax
  413e7d:	8b 40 08             	mov    0x8(%rax),%eax
  413e80:	85 c0                	test   %eax,%eax
  413e82:	75 11                	jne    413e95 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x6d>
  413e84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  413e88:	48 8b 40 08          	mov    0x8(%rax),%rax
  413e8c:	48 8b 00             	mov    (%rax),%rax
  413e8f:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
  413e93:	eb 05                	jmp    413e9a <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m+0x72>
  413e95:	b8 00 00 00 00       	mov    $0x0,%eax
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  413e9a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  413e9e:	c9                   	leave
  413e9f:	c3                   	ret

0000000000413ea0 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
  413ea0:	55                   	push   %rbp
  413ea1:	48 89 e5             	mov    %rsp,%rbp
  413ea4:	53                   	push   %rbx
  413ea5:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
  413eac:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
  413eb3:	0f 29 85 80 fd ff ff 	movaps %xmm0,-0x280(%rbp)
  413eba:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
	  std::string __dynbuf;
  413ec1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  413ec8:	48 89 c7             	mov    %rax,%rdi
  413ecb:	e8 56 0c ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  to_chars_result __res{};
  413ed0:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  413ed7:	00 00 00 00
  413edb:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  413ee2:	00 00 00 00
	  size_t __prec = 6;
  413ee6:	48 c7 85 48 fe ff ff 	movq   $0x6,-0x1b8(%rbp)
  413eed:	06 00 00 00
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
  413ef1:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413ef8:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413efc:	83 e0 06             	and    $0x6,%eax
  413eff:	84 c0                	test   %al,%al
  413f01:	0f 95 c0             	setne  %al
  413f04:	88 85 47 fe ff ff    	mov    %al,-0x1b9(%rbp)
	  if (__use_prec)
  413f0a:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  413f11:	84 c0                	test   %al,%al
  413f13:	74 20                	je     413f35 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x95>
	    __prec = _M_spec._M_get_precision(__fc);
  413f15:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413f1c:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  413f23:	48 89 d6             	mov    %rdx,%rsi
  413f26:	48 89 c7             	mov    %rax,%rdi
  413f29:	e8 b0 1c 00 00       	call   415bde <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  413f2e:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
	  char* __start = __buf + 1; // reserve space for sign
  413f35:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  413f3c:	48 83 c0 01          	add    $0x1,%rax
  413f40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  char* __end = __buf + sizeof(__buf);
  413f44:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
  413f4b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  413f4f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  chars_format __fmt{};
  413f53:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  413f5a:	00 00 00
	  bool __upper = false;
  413f5d:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
	  bool __trailing_zeros = false;
  413f61:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
	  char __expc = 'e';
  413f65:	c6 45 dd 65          	movb   $0x65,-0x23(%rbp)
	  switch (_M_spec._M_type)
  413f69:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413f70:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413f74:	c0 e8 03             	shr    $0x3,%al
  413f77:	83 e0 0f             	and    $0xf,%eax
  413f7a:	0f b6 c0             	movzbl %al,%eax
  413f7d:	89 c0                	mov    %eax,%eax
  413f7f:	48 8b 04 c5 00 e5 41 	mov    0x41e500(,%rax,8),%rax
  413f86:	00
  413f87:	ff e0                	jmp    *%rax
	      __upper = true;
  413f89:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'P';
  413f8d:	c6 45 dd 50          	movb   $0x50,-0x23(%rbp)
	      if (_M_spec._M_type != _Pres_A)
  413f91:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  413f98:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  413f9c:	83 e0 78             	and    $0x78,%eax
  413f9f:	3c 10                	cmp    $0x10,%al
  413fa1:	74 04                	je     413fa7 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x107>
		__expc = 'p';
  413fa3:	c6 45 dd 70          	movb   $0x70,-0x23(%rbp)
	      __fmt = chars_format::hex;
  413fa7:	c7 85 40 fe ff ff 04 	movl   $0x4,-0x1c0(%rbp)
  413fae:	00 00 00
	      break;
  413fb1:	eb 67                	jmp    41401a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  413fb3:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  413fb7:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __use_prec = true;
  413fbb:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::scientific;
  413fc2:	c7 85 40 fe ff ff 01 	movl   $0x1,-0x1c0(%rbp)
  413fc9:	00 00 00
	      break;
  413fcc:	eb 4c                	jmp    41401a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  413fce:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __use_prec = true;
  413fd2:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::fixed;
  413fd9:	c7 85 40 fe ff ff 02 	movl   $0x2,-0x1c0(%rbp)
  413fe0:	00 00 00
	      break;
  413fe3:	eb 35                	jmp    41401a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      __upper = true;
  413fe5:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	      __expc = 'E';
  413fe9:	c6 45 dd 45          	movb   $0x45,-0x23(%rbp)
	      __trailing_zeros = true;
  413fed:	c6 45 de 01          	movb   $0x1,-0x22(%rbp)
	      __use_prec = true;
  413ff1:	c6 85 47 fe ff ff 01 	movb   $0x1,-0x1b9(%rbp)
	      __fmt = chars_format::general;
  413ff8:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  413fff:	00 00 00
	      break;
  414002:	eb 16                	jmp    41401a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x17a>
	      if (__use_prec)
  414004:	0f b6 85 47 fe ff ff 	movzbl -0x1b9(%rbp),%eax
  41400b:	84 c0                	test   %al,%al
  41400d:	74 0a                	je     414019 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x179>
		__fmt = chars_format::general;
  41400f:	c7 85 40 fe ff ff 03 	movl   $0x3,-0x1c0(%rbp)
  414016:	00 00 00
	      break;
  414019:	90                   	nop
	  auto __to_chars = [&](char* __b, char* __e) {
  41401a:	48 8d 85 47 fe ff ff 	lea    -0x1b9(%rbp),%rax
  414021:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  414028:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
  41402f:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  414036:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  41403d:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  414044:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
  41404b:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
	  __res = __to_chars(__start, __end);
  414052:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  414056:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41405a:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  414061:	48 89 ce             	mov    %rcx,%rsi
  414064:	48 89 c7             	mov    %rax,%rdi
  414067:	e8 0a fd ff ff       	call   413d76 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcSB_E_clESB_SB_>
  41406c:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  414073:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
  41407a:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  414080:	83 f8 4b             	cmp    $0x4b,%eax
  414083:	0f 94 c0             	sete   %al
  414086:	0f b6 c0             	movzbl %al,%eax
  414089:	48 85 c0             	test   %rax,%rax
  41408c:	0f 84 13 01 00 00    	je     4141a5 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x305>
	      size_t __guess = 8 + __prec;
  414092:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  414099:	48 83 c0 08          	add    $0x8,%rax
  41409d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      if (__fmt == chars_format::fixed) // +ddd.prec
  4140a1:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  4140a7:	83 f8 02             	cmp    $0x2,%eax
  4140aa:	75 08                	jne    4140b4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x214>
		    __guess += numeric_limits<_Fp>::max_exponent10;
  4140ac:	48 81 45 d0 44 13 00 	addq   $0x1344,-0x30(%rbp)
  4140b3:	00
	      if (__guess <= sizeof(__buf)) [[unlikely]]
  4140b4:	48 81 7d d0 80 00 00 	cmpq   $0x80,-0x30(%rbp)
  4140bb:	00
  4140bc:	77 08                	ja     4140c6 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x226>
		__guess = sizeof(__buf) * 2;
  4140be:	48 c7 45 d0 00 01 00 	movq   $0x100,-0x30(%rbp)
  4140c5:	00
	      __dynbuf.reserve(__guess);
  4140c6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4140ca:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4140d1:	48 89 d6             	mov    %rdx,%rsi
  4140d4:	48 89 c7             	mov    %rax,%rdi
  4140d7:	e8 08 73 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
  4140dc:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  4140e3:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  4140ea:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  4140f1:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
  4140f8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4140ff:	48 89 c7             	mov    %rax,%rdi
  414102:	e8 af 72 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  414107:	48 01 c0             	add    %rax,%rax
  41410a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  414111:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  414118:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  41411f:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
  414126:	48 89 95 b8 fd ff ff 	mov    %rdx,-0x248(%rbp)
  41412d:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  414134:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  41413b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414142:	48 89 ce             	mov    %rcx,%rsi
  414145:	48 89 c7             	mov    %rax,%rdi
  414148:	e8 13 41 00 00       	call   418260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>
  41414d:	90                   	nop
		  __start = __dynbuf.data() + 1; // reserve space for sign
  41414e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414155:	48 89 c7             	mov    %rax,%rdi
  414158:	e8 df 66 ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  41415d:	48 83 c0 01          	add    $0x1,%rax
  414161:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		  __end = __dynbuf.data() + __dynbuf.size();
  414165:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41416c:	48 89 c7             	mov    %rax,%rdi
  41416f:	e8 c8 66 ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  414174:	48 89 c3             	mov    %rax,%rbx
  414177:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41417e:	48 89 c7             	mov    %rax,%rdi
  414181:	e8 0a 0c ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414186:	48 01 d8             	add    %rbx,%rax
  414189:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
  41418d:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  414193:	83 f8 4b             	cmp    $0x4b,%eax
  414196:	0f 94 c0             	sete   %al
  414199:	0f b6 c0             	movzbl %al,%eax
  41419c:	48 85 c0             	test   %rax,%rax
  41419f:	0f 85 37 ff ff ff    	jne    4140dc <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x23c>
	  if (__upper)
  4141a5:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  4141a9:	74 35                	je     4141e0 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x340>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  4141ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4141af:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4141b3:	eb 1e                	jmp    4141d3 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x333>
		*__p = std::toupper(*__p);
  4141b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4141b9:	0f b6 00             	movzbl (%rax),%eax
  4141bc:	0f be c0             	movsbl %al,%eax
  4141bf:	89 c7                	mov    %eax,%edi
  4141c1:	e8 5a 02 ff ff       	call   404420 <toupper@plt>
  4141c6:	89 c2                	mov    %eax,%edx
  4141c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4141cc:	88 10                	mov    %dl,(%rax)
	      for (char* __p = __start; __p != __res.ptr; ++__p)
  4141ce:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
  4141d3:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  4141da:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  4141de:	75 d5                	jne    4141b5 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x315>
	  bool __have_sign = true;
  4141e0:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
	  if (!__builtin_signbit(__v))
  4141e4:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  4141eb:	ff
  4141ec:	0f 50 c0             	movmskps %xmm0,%eax
  4141ef:	83 e0 08             	and    $0x8,%eax
  4141f2:	85 c0                	test   %eax,%eax
  4141f4:	75 42                	jne    414238 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
	      if (_M_spec._M_sign == _Sign_plus)
  4141f6:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4141fd:	0f b6 00             	movzbl (%rax),%eax
  414200:	83 e0 0c             	and    $0xc,%eax
  414203:	3c 04                	cmp    $0x4,%al
  414205:	75 0e                	jne    414215 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x375>
		*--__start = '+';
  414207:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  41420c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414210:	c6 00 2b             	movb   $0x2b,(%rax)
  414213:	eb 23                	jmp    414238 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
	      else if (_M_spec._M_sign == _Sign_space)
  414215:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41421c:	0f b6 00             	movzbl (%rax),%eax
  41421f:	83 e0 0c             	and    $0xc,%eax
  414222:	3c 0c                	cmp    $0xc,%al
  414224:	75 0e                	jne    414234 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x394>
		*--__start = ' ';
  414226:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  41422b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41422f:	c6 00 20             	movb   $0x20,(%rax)
  414232:	eb 04                	jmp    414238 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x398>
		__have_sign = false;
  414234:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
	  string_view __narrow_str(__start, __res.ptr - __start);
  414238:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  41423f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
  414243:	48 89 c2             	mov    %rax,%rdx
  414246:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  41424a:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  414251:	48 89 ce             	mov    %rcx,%rsi
  414254:	48 89 c7             	mov    %rax,%rdi
  414257:	e8 90 32 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
  41425c:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  414263:	0f b6 00             	movzbl (%rax),%eax
  414266:	83 e0 10             	and    $0x10,%eax
  414269:	84 c0                	test   %al,%al
  41426b:	0f 84 63 04 00 00    	je     4146d4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
  414271:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  414278:	ff
  414279:	66 0f 6f 0d bf 72 00 	movdqa 0x72bf(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  414280:	00
  414281:	66 0f db c1          	pand   %xmm1,%xmm0
  414285:	bb 01 00 00 00       	mov    $0x1,%ebx
  41428a:	66 0f 6f 0d be 72 00 	movdqa 0x72be(%rip),%xmm1        # 41b550 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  414291:	00
  414292:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  414299:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  4142a0:	ff
  4142a1:	e8 9a 00 ff ff       	call   404340 <__unordtf2@plt>
  4142a6:	48 85 c0             	test   %rax,%rax
  4142a9:	75 1f                	jne    4142ca <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x42a>
  4142ab:	66 0f 6f 0d 9d 72 00 	movdqa 0x729d(%rip),%xmm1        # 41b550 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  4142b2:	00
  4142b3:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  4142ba:	ff
  4142bb:	e8 60 fe fe ff       	call   404120 <__gttf2@plt>
  4142c0:	48 85 c0             	test   %rax,%rax
  4142c3:	7f 05                	jg     4142ca <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x42a>
  4142c5:	bb 00 00 00 00       	mov    $0x0,%ebx
  4142ca:	89 d8                	mov    %ebx,%eax
  4142cc:	83 f0 01             	xor    $0x1,%eax
  4142cf:	0f b6 c0             	movzbl %al,%eax
  4142d2:	85 c0                	test   %eax,%eax
  4142d4:	0f 84 fa 03 00 00    	je     4146d4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
	      string_view __s = __narrow_str;
  4142da:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  4142e1:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  4142e8:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  4142ef:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
	      size_t __z = 0;   // Number of trailing zeros to add.
  4142f6:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  4142fd:	00
	      size_t __d = __s.find('.'); // Position of decimal point.
  4142fe:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414305:	ba 00 00 00 00       	mov    $0x0,%edx
  41430a:	be 2e 00 00 00       	mov    $0x2e,%esi
  41430f:	48 89 c7             	mov    %rax,%rdi
  414312:	e8 4f 1f ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  414317:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	      if (__d != __s.npos) // Found decimal point.
  41431b:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
  414320:	0f 84 a5 00 00 00    	je     4143cb <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x52b>
		  __p = __s.find(__expc, __d + 1);
  414326:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41432a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  41432e:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  414332:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414339:	89 ce                	mov    %ecx,%esi
  41433b:	48 89 c7             	mov    %rax,%rdi
  41433e:	e8 23 1f ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  414343:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  414347:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  41434c:	75 13                	jne    414361 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x4c1>
		    __p = __s.size();
  41434e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414355:	48 89 c7             	mov    %rax,%rdi
  414358:	e8 b9 19 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41435d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__trailing_zeros)
  414361:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  414365:	0f 84 af 00 00 00    	je     41441a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
		      if (__s[__have_sign] != '0')
  41436b:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
  41436f:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414376:	48 89 d6             	mov    %rdx,%rsi
  414379:	48 89 c7             	mov    %rax,%rdi
  41437c:	e8 a7 19 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  414381:	0f b6 00             	movzbl (%rax),%eax
  414384:	3c 30                	cmp    $0x30,%al
  414386:	0f 95 c0             	setne  %al
  414389:	84 c0                	test   %al,%al
  41438b:	74 15                	je     4143a2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x502>
			__sigfigs = __p - __have_sign - 1;
  41438d:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  414391:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  414395:	48 29 c2             	sub    %rax,%rdx
  414398:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  41439c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  4143a0:	eb 78                	jmp    41441a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
  4143a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4143a6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4143aa:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4143b1:	be 30 00 00 00       	mov    $0x30,%esi
  4143b6:	48 89 c7             	mov    %rax,%rdi
  4143b9:	e8 74 0a 00 00       	call   414e32 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>
  4143be:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4143c2:	48 29 c2             	sub    %rax,%rdx
  4143c5:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4143c9:	eb 4f                	jmp    41441a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x57a>
		  __p = __s.find(__expc); // Find the exponent, if present.
  4143cb:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4143cf:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4143d6:	ba 00 00 00 00       	mov    $0x0,%edx
  4143db:	89 ce                	mov    %ecx,%esi
  4143dd:	48 89 c7             	mov    %rax,%rdi
  4143e0:	e8 81 1e ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  4143e5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  if (__p == __s.npos)
  4143e9:	48 83 7d a8 ff       	cmpq   $0xffffffffffffffff,-0x58(%rbp)
  4143ee:	75 13                	jne    414403 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x563>
		    __p = __s.size();
  4143f0:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4143f7:	48 89 c7             	mov    %rax,%rdi
  4143fa:	e8 17 19 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4143ff:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		  __d = __p; // Position where '.' should be inserted.
  414403:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414407:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		  __sigfigs = __d - __have_sign;
  41440b:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  41440f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  414413:	48 29 c2             	sub    %rax,%rdx
  414416:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	      if (__trailing_zeros && __prec != 0)
  41441a:	80 7d de 00          	cmpb   $0x0,-0x22(%rbp)
  41441e:	74 1b                	je     41443b <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59b>
  414420:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  414427:	48 85 c0             	test   %rax,%rax
  41442a:	74 0f                	je     41443b <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x59b>
		  __z = __prec - __sigfigs;
  41442c:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  414433:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  414437:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
  41443b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41443f:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  414443:	0f 94 c0             	sete   %al
  414446:	0f b6 d0             	movzbl %al,%edx
  414449:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41444d:	48 01 d0             	add    %rdx,%rax
  414450:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  414454:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
  414459:	0f 84 75 02 00 00    	je     4146d4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
  41445f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414466:	48 89 c7             	mov    %rax,%rdi
  414469:	e8 9e ac ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41446e:	84 c0                	test   %al,%al
  414470:	74 1e                	je     414490 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f0>
  414472:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  414479:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41447d:	48 29 c2             	sub    %rax,%rdx
  414480:	48 89 d0             	mov    %rdx,%rax
  414483:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  414487:	72 07                	jb     414490 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f0>
  414489:	b8 01 00 00 00       	mov    $0x1,%eax
  41448e:	eb 05                	jmp    414495 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x5f5>
  414490:	b8 00 00 00 00       	mov    $0x0,%eax
  414495:	84 c0                	test   %al,%al
  414497:	0f 84 d7 00 00 00    	je     414574 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x6d4>
					__s.size() - __p);
  41449d:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4144a4:	48 89 c7             	mov    %rax,%rdi
  4144a7:	e8 6a 18 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
		      __builtin_memmove(__start + __p + __extras,
  4144ac:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
					__start + __p,
  4144b0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4144b4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4144b8:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
		      __builtin_memmove(__start + __p + __extras,
  4144bc:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  4144c0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4144c4:	48 01 d1             	add    %rdx,%rcx
  4144c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4144cb:	48 01 d1             	add    %rdx,%rcx
  4144ce:	48 89 c2             	mov    %rax,%rdx
  4144d1:	48 89 cf             	mov    %rcx,%rdi
  4144d4:	e8 e7 fe fe ff       	call   4043c0 <memmove@plt>
		      if (__d == __p)
  4144d9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4144dd:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4144e1:	75 16                	jne    4144f9 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x659>
			__start[__p++] = '.';
  4144e3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4144e7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4144eb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4144ef:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4144f3:	48 01 c8             	add    %rcx,%rax
  4144f6:	c6 00 2e             	movb   $0x2e,(%rax)
		      __builtin_memset(__start + __p, '0', __z);
  4144f9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4144fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  414501:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  414505:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  414509:	48 89 c2             	mov    %rax,%rdx
  41450c:	be 30 00 00 00       	mov    $0x30,%esi
  414511:	48 89 cf             	mov    %rcx,%rdi
  414514:	e8 27 fc fe ff       	call   404140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
  414519:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414520:	48 89 c7             	mov    %rax,%rdi
  414523:	e8 b2 2f ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  414528:	48 89 c3             	mov    %rax,%rbx
  41452b:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  414532:	48 89 c7             	mov    %rax,%rdi
  414535:	e8 dc 17 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41453a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41453e:	48 01 c2             	add    %rax,%rdx
  414541:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  414548:	48 89 de             	mov    %rbx,%rsi
  41454b:	48 89 c7             	mov    %rax,%rdi
  41454e:	e8 99 2f ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  414553:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  41455a:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  414561:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  414568:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  41456f:	e9 60 01 00 00       	jmp    4146d4 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x834>
		      __dynbuf.reserve(__s.size() + __extras);
  414574:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41457b:	48 89 c7             	mov    %rax,%rdi
  41457e:	e8 93 17 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414583:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  414587:	48 01 c2             	add    %rax,%rdx
  41458a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414591:	48 89 d6             	mov    %rdx,%rsi
  414594:	48 89 c7             	mov    %rax,%rdi
  414597:	e8 48 6e ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
		      if (__dynbuf.empty())
  41459c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4145a3:	48 89 c7             	mov    %rax,%rdi
  4145a6:	e8 61 ab ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4145ab:	84 c0                	test   %al,%al
  4145ad:	0f 84 c5 00 00 00    	je     414678 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x7d8>
			  __dynbuf = __s.substr(0, __p);
  4145b3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4145b7:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  4145be:	be 00 00 00 00       	mov    $0x0,%esi
  4145c3:	48 89 c7             	mov    %rax,%rdi
  4145c6:	e8 6d 75 ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  4145cb:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4145d2:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  4145d9:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  4145e0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4145e7:	48 89 d6             	mov    %rdx,%rsi
  4145ea:	48 89 c7             	mov    %rax,%rdi
  4145ed:	e8 9e 08 00 00       	call   414e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
			  if (__d == __p)
  4145f2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4145f6:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  4145fa:	75 14                	jne    414610 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x770>
			    __dynbuf += '.';
  4145fc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414603:	be 2e 00 00 00       	mov    $0x2e,%esi
  414608:	48 89 c7             	mov    %rax,%rdi
  41460b:	e8 a6 08 00 00       	call   414eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  if (__z)
  414610:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  414615:	74 1b                	je     414632 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x792>
			    __dynbuf.append(__z, '0');
  414617:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  41461b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414622:	ba 30 00 00 00       	mov    $0x30,%edx
  414627:	48 89 ce             	mov    %rcx,%rsi
  41462a:	48 89 c7             	mov    %rax,%rdi
  41462d:	e8 ae 08 00 00       	call   414ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
			  __dynbuf.append(__s.substr(__p));
  414632:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  414636:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
  41463d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  414644:	48 89 ce             	mov    %rcx,%rsi
  414647:	48 89 c7             	mov    %rax,%rdi
  41464a:	e8 e9 74 ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  41464f:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  414656:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  41465d:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
  414664:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  41466b:	48 89 d6             	mov    %rdx,%rsi
  41466e:	48 89 c7             	mov    %rax,%rdi
  414671:	e8 b4 08 00 00       	call   414f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  414676:	eb 3f                	jmp    4146b7 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x817>
			  __dynbuf.insert(__p, __extras, '0');
  414678:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  41467c:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  414680:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414687:	b9 30 00 00 00       	mov    $0x30,%ecx
  41468c:	48 89 c7             	mov    %rax,%rdi
  41468f:	e8 f0 08 00 00       	call   414f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>
			  if (__d == __p)
  414694:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  414698:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  41469c:	75 19                	jne    4146b7 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x817>
			    __dynbuf[__p] = '.';
  41469e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4146a2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4146a9:	48 89 d6             	mov    %rdx,%rsi
  4146ac:	48 89 c7             	mov    %rax,%rdi
  4146af:	e8 2a 09 00 00       	call   414fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>
  4146b4:	c6 00 2e             	movb   $0x2e,(%rax)
		      __narrow_str = __dynbuf;
  4146b7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  4146be:	48 89 c7             	mov    %rax,%rdi
  4146c1:	e8 5c 39 ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  4146c6:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  4146cd:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
	  basic_string<_CharT> __wstr;
  4146d4:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4146db:	48 89 c7             	mov    %rax,%rdi
  4146de:	e8 43 04 ff ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  basic_string_view<_CharT> __str;
  4146e3:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
  4146ea:	00 00 00 00
  4146ee:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
  4146f5:	00 00 00 00
	    __str = __narrow_str;
  4146f9:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  414700:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  414707:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  41470e:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
  414715:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  41471c:	0f b6 00             	movzbl (%rax),%eax
  41471f:	83 e0 20             	and    $0x20,%eax
  414722:	84 c0                	test   %al,%al
  414724:	0f 84 24 01 00 00    	je     41484e <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
  41472a:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  414731:	ff
  414732:	66 0f 6f 0d 06 6e 00 	movdqa 0x6e06(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  414739:	00
  41473a:	66 0f db c1          	pand   %xmm1,%xmm0
  41473e:	bb 01 00 00 00       	mov    $0x1,%ebx
  414743:	66 0f 6f 0d 05 6e 00 	movdqa 0x6e05(%rip),%xmm1        # 41b550 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  41474a:	00
  41474b:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  414752:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  414759:	ff
  41475a:	e8 e1 fb fe ff       	call   404340 <__unordtf2@plt>
  41475f:	48 85 c0             	test   %rax,%rax
  414762:	75 1f                	jne    414783 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e3>
  414764:	66 0f 6f 0d e4 6d 00 	movdqa 0x6de4(%rip),%xmm1        # 41b550 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  41476b:	00
  41476c:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  414773:	ff
  414774:	e8 a7 f9 fe ff       	call   404120 <__gttf2@plt>
  414779:	48 85 c0             	test   %rax,%rax
  41477c:	7f 05                	jg     414783 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x8e3>
  41477e:	bb 00 00 00 00       	mov    $0x0,%ebx
  414783:	89 d8                	mov    %ebx,%eax
  414785:	83 f0 01             	xor    $0x1,%eax
  414788:	0f b6 c0             	movzbl %al,%eax
  41478b:	85 c0                	test   %eax,%eax
  41478d:	0f 84 bb 00 00 00    	je     41484e <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  414793:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  41479a:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  4147a1:	48 89 d6             	mov    %rdx,%rsi
  4147a4:	48 89 c7             	mov    %rax,%rdi
  4147a7:	e8 1e 0b 00 00       	call   4152ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  4147ac:	0f be 4d dd          	movsbl -0x23(%rbp),%ecx
  4147b0:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  4147b7:	4c 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%r8
  4147be:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  4147c5:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  4147cc:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
  4147d3:	4d 89 c1             	mov    %r8,%r9
  4147d6:	41 89 c8             	mov    %ecx,%r8d
  4147d9:	48 89 d1             	mov    %rdx,%rcx
  4147dc:	48 89 c2             	mov    %rax,%rdx
  4147df:	e8 b4 15 00 00       	call   415d98 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>
  4147e4:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  4147eb:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  4147f2:	48 89 d6             	mov    %rdx,%rsi
  4147f5:	48 89 c7             	mov    %rax,%rdi
  4147f8:	e8 13 0b 00 00       	call   415310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
  4147fd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  414804:	48 89 c7             	mov    %rax,%rdi
  414807:	e8 68 2d ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41480c:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  414813:	48 89 c7             	mov    %rax,%rdi
  414816:	e8 15 fb fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	      if (!__wstr.empty())
  41481b:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  414822:	48 89 c7             	mov    %rax,%rdi
  414825:	e8 e2 a8 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  41482a:	83 f0 01             	xor    $0x1,%eax
  41482d:	84 c0                	test   %al,%al
  41482f:	74 1d                	je     41484e <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0x9ae>
		__str = __wstr;
  414831:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  414838:	48 89 c7             	mov    %rax,%rdi
  41483b:	e8 e2 37 ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  414840:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  414847:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  41484e:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  414855:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  41485c:	48 89 d6             	mov    %rdx,%rsi
  41485f:	48 89 c7             	mov    %rax,%rdi
  414862:	e8 cd 17 00 00       	call   416034 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  414867:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	  if (__width <= __str.size())
  41486b:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  414872:	48 89 c7             	mov    %rax,%rdi
  414875:	e8 9c 14 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41487a:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  41487e:	0f 93 c0             	setae  %al
  414881:	84 c0                	test   %al,%al
  414883:	74 36                	je     4148bb <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xa1b>
	    return __format::__write(__fc.out(), __str);
  414885:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  41488c:	48 89 c7             	mov    %rax,%rdi
  41488f:	e8 72 71 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  414894:	48 89 c1             	mov    %rax,%rcx
  414897:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
  41489e:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  4148a5:	48 89 d6             	mov    %rdx,%rsi
  4148a8:	48 89 c2             	mov    %rax,%rdx
  4148ab:	48 89 cf             	mov    %rcx,%rdi
  4148ae:	e8 ad 9f ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4148b3:	48 89 c3             	mov    %rax,%rbx
  4148b6:	e9 c9 01 00 00       	jmp    414a84 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xbe4>
	  char32_t __fill_char = _M_spec._M_fill;
  4148bb:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4148c2:	8b 40 08             	mov    0x8(%rax),%eax
  4148c5:	89 45 9c             	mov    %eax,-0x64(%rbp)
	  _Align __align = _M_spec._M_align;
  4148c8:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4148cf:	0f b6 00             	movzbl (%rax),%eax
  4148d2:	83 e0 03             	and    $0x3,%eax
  4148d5:	0f b6 c0             	movzbl %al,%eax
  4148d8:	89 45 98             	mov    %eax,-0x68(%rbp)
	  size_t __nfill = __width - __str.size();
  4148db:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4148e2:	48 89 c7             	mov    %rax,%rdi
  4148e5:	e8 2c 14 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4148ea:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4148ee:	48 29 c2             	sub    %rax,%rdx
  4148f1:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
	  auto __out = __fc.out();
  4148f5:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4148fc:	48 89 c7             	mov    %rax,%rdi
  4148ff:	e8 02 71 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  414904:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
	  if (__align == _Align_default)
  41490b:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  41490f:	0f 85 32 01 00 00    	jne    414a47 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
	      __align = _Align_right;
  414915:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%rbp)
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
  41491c:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  414923:	0f b6 00             	movzbl (%rax),%eax
  414926:	83 e0 40             	and    $0x40,%eax
  414929:	84 c0                	test   %al,%al
  41492b:	0f 84 0f 01 00 00    	je     414a40 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba0>
  414931:	66 0f 6f 85 80 fd ff 	movdqa -0x280(%rbp),%xmm0
  414938:	ff
  414939:	66 0f 6f 0d ff 6b 00 	movdqa 0x6bff(%rip),%xmm1        # 41b540 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x54>
  414940:	00
  414941:	66 0f db c1          	pand   %xmm1,%xmm0
  414945:	bb 01 00 00 00       	mov    $0x1,%ebx
  41494a:	66 0f 6f 0d fe 6b 00 	movdqa 0x6bfe(%rip),%xmm1        # 41b550 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  414951:	00
  414952:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
  414959:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  414960:	ff
  414961:	e8 da f9 fe ff       	call   404340 <__unordtf2@plt>
  414966:	48 85 c0             	test   %rax,%rax
  414969:	75 1f                	jne    41498a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaea>
  41496b:	66 0f 6f 0d dd 6b 00 	movdqa 0x6bdd(%rip),%xmm1        # 41b550 <_ZNSt8__detail30__integer_to_chars_is_unsignedIoEE+0x64>
  414972:	00
  414973:	66 0f 6f 85 70 fd ff 	movdqa -0x290(%rbp),%xmm0
  41497a:	ff
  41497b:	e8 a0 f7 fe ff       	call   404120 <__gttf2@plt>
  414980:	48 85 c0             	test   %rax,%rax
  414983:	7f 05                	jg     41498a <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xaea>
  414985:	bb 00 00 00 00       	mov    $0x0,%ebx
  41498a:	89 d8                	mov    %ebx,%eax
  41498c:	83 f0 01             	xor    $0x1,%eax
  41498f:	0f b6 c0             	movzbl %al,%eax
  414992:	85 c0                	test   %eax,%eax
  414994:	0f 84 a6 00 00 00    	je     414a40 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba0>
		  __fill_char = _CharT('0');
  41499a:	c7 45 9c 30 00 00 00 	movl   $0x30,-0x64(%rbp)
		  if (!__format::__is_xdigit(__narrow_str[0]))
  4149a1:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
  4149a8:	be 00 00 00 00       	mov    $0x0,%esi
  4149ad:	48 89 c7             	mov    %rax,%rdi
  4149b0:	e8 73 13 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  4149b5:	0f b6 00             	movzbl (%rax),%eax
  4149b8:	0f be c0             	movsbl %al,%eax
  4149bb:	89 c7                	mov    %eax,%edi
  4149bd:	e8 92 08 ff ff       	call   405254 <_ZNSt8__format11__is_xdigitEc>
  4149c2:	83 f0 01             	xor    $0x1,%eax
  4149c5:	84 c0                	test   %al,%al
  4149c7:	74 7e                	je     414a47 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
		      *__out++ = __str[0];
  4149c9:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  4149d0:	be 00 00 00 00       	mov    $0x0,%esi
  4149d5:	48 89 c7             	mov    %rax,%rdi
  4149d8:	e8 4b 13 ff ff       	call   405d28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEEixEm>
  4149dd:	0f b6 00             	movzbl (%rax),%eax
  4149e0:	0f be c0             	movsbl %al,%eax
  4149e3:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  4149ea:	00 00 00
      operator++(int) { return *this; }
  4149ed:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
		      *__out++ = __str[0];
  4149f4:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
      operator*() { return *this; }
  4149fb:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
  414a02:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  414a09:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
	_M_sink->_M_write(__c);
  414a0f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  414a16:	48 8b 00             	mov    (%rax),%rax
  414a19:	0f be 95 6f ff ff ff 	movsbl -0x91(%rbp),%edx
  414a20:	89 d6                	mov    %edx,%esi
  414a22:	48 89 c7             	mov    %rax,%rdi
  414a25:	e8 3c 30 00 00       	call   417a66 <_ZNSt8__format5_SinkIcE8_M_writeEc>
		      __str.remove_prefix(1);
  414a2a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
  414a31:	be 01 00 00 00       	mov    $0x1,%esi
  414a36:	48 89 c7             	mov    %rax,%rdi
  414a39:	e8 76 16 00 00       	call   4160b4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
		  if (!__format::__is_xdigit(__narrow_str[0]))
  414a3e:	eb 07                	jmp    414a47 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xba7>
		__fill_char = _CharT(' ');
  414a40:	c7 45 9c 20 00 00 00 	movl   $0x20,-0x64(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  414a47:	48 8d 85 d8 fd ff ff 	lea    -0x228(%rbp),%rax
  414a4e:	48 89 c7             	mov    %rax,%rdi
  414a51:	e8 ef 4f ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  414a56:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
  414a5a:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  414a5e:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  414a61:	48 8b b5 e0 fd ff ff 	mov    -0x220(%rbp),%rsi
  414a68:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  414a6f:	48 8b 00             	mov    (%rax),%rax
  414a72:	45 89 c1             	mov    %r8d,%r9d
  414a75:	49 89 f8             	mov    %rdi,%r8
  414a78:	48 89 c7             	mov    %rax,%rdi
  414a7b:	e8 f1 18 00 00       	call   416371 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
  414a80:	48 89 c3             	mov    %rax,%rbx
					  __align, __nfill, __fill_char);
  414a83:	90                   	nop
	}
  414a84:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  414a8b:	48 89 c7             	mov    %rax,%rdi
  414a8e:	e8 e1 2a ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414a93:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414a9a:	48 89 c7             	mov    %rax,%rdi
  414a9d:	e8 d2 2a ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414aa2:	48 89 d8             	mov    %rbx,%rax
  414aa5:	eb 45                	jmp    414aec <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc4c>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
  414aa7:	48 89 c3             	mov    %rax,%rbx
  414aaa:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  414ab1:	48 89 c7             	mov    %rax,%rdi
  414ab4:	e8 77 f8 fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  414ab9:	eb 03                	jmp    414abe <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc1e>
	}
  414abb:	48 89 c3             	mov    %rax,%rbx
  414abe:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
  414ac5:	48 89 c7             	mov    %rax,%rdi
  414ac8:	e8 a7 2a ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414acd:	eb 03                	jmp    414ad2 <_ZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_+0xc32>
  414acf:	48 89 c3             	mov    %rax,%rbx
  414ad2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
  414ad9:	48 89 c7             	mov    %rax,%rdi
  414adc:	e8 93 2a ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  414ae1:	48 89 d8             	mov    %rbx,%rax
  414ae4:	48 89 c7             	mov    %rax,%rdi
  414ae7:	e8 24 f9 fe ff       	call   404410 <_Unwind_Resume@plt>
  414aec:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414af0:	c9                   	leave
  414af1:	c3                   	ret

0000000000414af2 <_ZNKSt6ranges9__copy_fnclIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES7_NSt8__format10_Sink_iterIcEEEENS_13in_out_resultIT_T1_EESC_T0_SD_>:
      operator()(_Iter __first, _Sent __last, _Out __result) const
  414af2:	55                   	push   %rbp
  414af3:	48 89 e5             	mov    %rsp,%rbp
  414af6:	41 54                	push   %r12
  414af8:	53                   	push   %rbx
  414af9:	48 83 ec 20          	sub    $0x20,%rsp
  414afd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414b01:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414b05:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  414b09:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
					     std::move(__result));
  414b0d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  414b11:	48 89 c7             	mov    %rax,%rdi
  414b14:	e8 2c 4f ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  414b19:	49 89 c4             	mov    %rax,%r12
					     std::move(__last),
  414b1c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  414b20:	48 89 c7             	mov    %rax,%rdi
  414b23:	e8 0b 21 00 00       	call   416c33 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>
  414b28:	48 89 c3             	mov    %rax,%rbx
	return ranges::__copy_or_move<false>(std::move(__first),
  414b2b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  414b2f:	48 89 c7             	mov    %rax,%rdi
  414b32:	e8 fc 20 00 00       	call   416c33 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>
  414b37:	49 8b 14 24          	mov    (%r12),%rdx
  414b3b:	48 8b 0b             	mov    (%rbx),%rcx
  414b3e:	48 8b 00             	mov    (%rax),%rax
  414b41:	48 89 ce             	mov    %rcx,%rsi
  414b44:	48 89 c7             	mov    %rax,%rdi
  414b47:	e8 f5 20 00 00       	call   416c41 <_ZNSt6ranges14__copy_or_moveILb0EN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES6_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESG_EESE_T1_SF_>
      }
  414b4c:	48 83 c4 20          	add    $0x20,%rsp
  414b50:	5b                   	pop    %rbx
  414b51:	41 5c                	pop    %r12
  414b53:	5d                   	pop    %rbp
  414b54:	c3                   	ret
  414b55:	90                   	nop

0000000000414b56 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_EN11_TerminatorD1Ev>:
#if __cpp_lib_is_constant_evaluated
      if (std::__is_constant_evaluated() && __n > size())
	traits_type::assign(__p + size(), __n - size(), _CharT());
#endif
      struct _Terminator {
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  414b56:	55                   	push   %rbp
  414b57:	48 89 e5             	mov    %rsp,%rbp
  414b5a:	48 83 ec 10          	sub    $0x10,%rsp
  414b5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414b62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414b66:	48 8b 00             	mov    (%rax),%rax
  414b69:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  414b6d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  414b71:	48 89 d6             	mov    %rdx,%rsi
  414b74:	48 89 c7             	mov    %rax,%rdi
  414b77:	e8 ac 29 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  414b7c:	90                   	nop
  414b7d:	c9                   	leave
  414b7e:	c3                   	ret
  414b7f:	90                   	nop

0000000000414b80 <_ZZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmENKUlT_T0_E_clIPcmEEDaS8_S9_>:
					    [](auto, auto __n2) {
  414b80:	55                   	push   %rbp
  414b81:	48 89 e5             	mov    %rsp,%rbp
  414b84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414b88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414b8c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
					      return __n2;
  414b90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
					    [](auto, auto __n2) {
  414b94:	5d                   	pop    %rbp
  414b95:	c3                   	ret

0000000000414b96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_>:
    basic_string<_CharT, _Traits, _Alloc>::
  414b96:	55                   	push   %rbp
  414b97:	48 89 e5             	mov    %rsp,%rbp
  414b9a:	53                   	push   %rbx
  414b9b:	48 83 ec 48          	sub    $0x48,%rsp
  414b9f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  414ba3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  414ba7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  414bab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  414baf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414bb3:	48 89 d6             	mov    %rdx,%rsi
  414bb6:	48 89 c7             	mov    %rax,%rdi
  414bb9:	e8 26 68 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  414bbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414bc2:	48 89 c7             	mov    %rax,%rdi
  414bc5:	e8 4c 29 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  414bca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  414bce:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  414bd3:	84 c0                	test   %al,%al
  414bd5:	74 19                	je     414bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5a>
  414bd7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414bdb:	48 89 c7             	mov    %rax,%rdi
  414bde:	e8 ad 01 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414be3:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  414be7:	73 07                	jae    414bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5a>
  414be9:	b8 01 00 00 00       	mov    $0x1,%eax
  414bee:	eb 05                	jmp    414bf5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x5f>
  414bf0:	b8 00 00 00 00       	mov    $0x0,%eax
  414bf5:	84 c0                	test   %al,%al
  414bf7:	74 39                	je     414c32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  414bf9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414bfd:	48 89 c7             	mov    %rax,%rdi
  414c00:	e8 8b 01 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414c05:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  414c09:	48 89 d3             	mov    %rdx,%rbx
  414c0c:	48 29 c3             	sub    %rax,%rbx
  414c0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414c13:	48 89 c7             	mov    %rax,%rdi
  414c16:	e8 75 01 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414c1b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  414c1f:	48 01 d0             	add    %rdx,%rax
  414c22:	ba 00 00 00 00       	mov    $0x0,%edx
  414c27:	48 89 de             	mov    %rbx,%rsi
  414c2a:	48 89 c7             	mov    %rax,%rdi
  414c2d:	e8 87 fd fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
	basic_string* _M_this;
	size_type _M_r;
      };
      _Terminator __term{this, 0};
  414c32:	66 0f ef c0          	pxor   %xmm0,%xmm0
  414c36:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  414c3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  414c3e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  414c42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  414c46:	48 89 c7             	mov    %rax,%rdi
  414c49:	e8 89 20 00 00       	call   416cd7 <_ZSt4moveIRZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmEUlT_T0_E_EONSt16remove_referenceIS9_E4typeEOS9_>
  414c4e:	48 89 c1             	mov    %rax,%rcx
  414c51:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  414c55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414c59:	48 89 c6             	mov    %rax,%rsi
  414c5c:	48 89 cf             	mov    %rcx,%rdi
  414c5f:	e8 1c ff ff ff       	call   414b80 <_ZZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmENKUlT_T0_E_clIPcmEEDaS8_S9_>
  414c64:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#else
      static_assert(__gnu_cxx::__is_integer_nonstrict<decltype(__r)>::__value,
		    "resize_and_overwrite operation must return an integer");
#endif
      _GLIBCXX_DEBUG_ASSERT(__r >= 0 && __r <= __n);
      __term._M_r = size_type(__r);
  414c68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414c6c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  414c70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  414c74:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
	__builtin_unreachable();
    }
  414c78:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  414c7c:	48 89 c7             	mov    %rax,%rdi
  414c7f:	e8 d2 fe ff ff       	call   414b56 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNSt8__format9_Seq_sinkIS4_E10_M_reserveEmEUlT_T0_E_EEvmS9_EN11_TerminatorD1Ev>
  414c84:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414c88:	c9                   	leave
  414c89:	c3                   	ret

0000000000414c8a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEplEl>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
  414c8a:	55                   	push   %rbp
  414c8b:	48 89 e5             	mov    %rsp,%rbp
  414c8e:	48 83 ec 20          	sub    $0x20,%rsp
  414c92:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414c96:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current + __n); }
  414c9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414c9e:	48 8b 10             	mov    (%rax),%rdx
  414ca1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414ca5:	48 01 d0             	add    %rdx,%rax
  414ca8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  414cac:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  414cb0:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  414cb4:	48 89 d6             	mov    %rdx,%rsi
  414cb7:	48 89 c7             	mov    %rax,%rdi
  414cba:	e8 47 7c ff ff       	call   40c906 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  414cbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414cc3:	c9                   	leave
  414cc4:	c3                   	ret
  414cc5:	90                   	nop

0000000000414cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc>:
    basic_string<_CharT, _Traits, _Alloc>::
  414cc6:	55                   	push   %rbp
  414cc7:	48 89 e5             	mov    %rsp,%rbp
  414cca:	48 83 ec 30          	sub    $0x30,%rsp
  414cce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414cd2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414cd6:	89 d0                	mov    %edx,%eax
  414cd8:	88 45 dc             	mov    %al,-0x24(%rbp)
      const size_type __size = this->size();
  414cdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414cdf:	48 89 c7             	mov    %rax,%rdi
  414ce2:	e8 a9 00 ff ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414ce7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__size < __n)
  414ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414cef:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  414cf3:	73 20                	jae    414d15 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x4f>
	this->append(__n - __size, __c);
  414cf5:	0f be 55 dc          	movsbl -0x24(%rbp),%edx
  414cf9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414cfd:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  414d01:	48 89 c1             	mov    %rax,%rcx
  414d04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414d08:	48 89 ce             	mov    %rcx,%rsi
  414d0b:	48 89 c7             	mov    %rax,%rdi
  414d0e:	e8 cd 01 00 00       	call   414ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>
    }
  414d13:	eb 1d                	jmp    414d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x6c>
      else if (__n < __size)
  414d15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  414d19:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  414d1d:	73 13                	jae    414d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc+0x6c>
	this->_M_set_length(__n);
  414d1f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  414d23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414d27:	48 89 d6             	mov    %rdx,%rsi
  414d2a:	48 89 c7             	mov    %rax,%rdi
  414d2d:	e8 f6 27 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
    }
  414d32:	90                   	nop
  414d33:	c9                   	leave
  414d34:	c3                   	ret

0000000000414d35 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414d35:	55                   	push   %rbp
  414d36:	48 89 e5             	mov    %rsp,%rbp
  414d39:	89 7d fc             	mov    %edi,-0x4(%rbp)
  414d3c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  414d3f:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
      else if (__sign == _Sign_plus)
  414d43:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  414d47:	75 09                	jne    414d52 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x1d>
	*__dest = '+';
  414d49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414d4d:	c6 00 2b             	movb   $0x2b,(%rax)
  414d50:	eb 14                	jmp    414d66 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x31>
      else if (__sign == _Sign_space)
  414d52:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  414d56:	75 09                	jne    414d61 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x2c>
	*__dest = ' ';
  414d58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414d5c:	c6 00 20             	movb   $0x20,(%rax)
  414d5f:	eb 05                	jmp    414d66 <_ZNSt8__format10__put_signIjEEPcT_NS_5_SignES1_+0x31>
	++__dest;
  414d61:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  414d66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  414d6a:	5d                   	pop    %rbp
  414d6b:	c3                   	ret

0000000000414d6c <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414d6c:	55                   	push   %rbp
  414d6d:	48 89 e5             	mov    %rsp,%rbp
  414d70:	89 7d fc             	mov    %edi,-0x4(%rbp)
  414d73:	89 75 f8             	mov    %esi,-0x8(%rbp)
  414d76:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
      if (__i < 0)
  414d7a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  414d7e:	79 09                	jns    414d89 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x1d>
	*__dest = '-';
  414d80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414d84:	c6 00 2d             	movb   $0x2d,(%rax)
  414d87:	eb 23                	jmp    414dac <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
      else if (__sign == _Sign_plus)
  414d89:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  414d8d:	75 09                	jne    414d98 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x2c>
	*__dest = '+';
  414d8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414d93:	c6 00 2b             	movb   $0x2b,(%rax)
  414d96:	eb 14                	jmp    414dac <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
      else if (__sign == _Sign_space)
  414d98:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  414d9c:	75 09                	jne    414da7 <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x3b>
	*__dest = ' ';
  414d9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  414da2:	c6 00 20             	movb   $0x20,(%rax)
  414da5:	eb 05                	jmp    414dac <_ZNSt8__format10__put_signIiEEPcT_NS_5_SignES1_+0x40>
	++__dest;
  414da7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  414dac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  414db0:	5d                   	pop    %rbp
  414db1:	c3                   	ret

0000000000414db2 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414db2:	55                   	push   %rbp
  414db3:	48 89 e5             	mov    %rsp,%rbp
  414db6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414dba:	89 75 f4             	mov    %esi,-0xc(%rbp)
  414dbd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__i < 0)
  414dc1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  414dc6:	79 09                	jns    414dd1 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x1f>
	*__dest = '-';
  414dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414dcc:	c6 00 2d             	movb   $0x2d,(%rax)
  414dcf:	eb 23                	jmp    414df4 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
      else if (__sign == _Sign_plus)
  414dd1:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  414dd5:	75 09                	jne    414de0 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x2e>
	*__dest = '+';
  414dd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414ddb:	c6 00 2b             	movb   $0x2b,(%rax)
  414dde:	eb 14                	jmp    414df4 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
      else if (__sign == _Sign_space)
  414de0:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  414de4:	75 09                	jne    414def <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x3d>
	*__dest = ' ';
  414de6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414dea:	c6 00 20             	movb   $0x20,(%rax)
  414ded:	eb 05                	jmp    414df4 <_ZNSt8__format10__put_signIxEEPcT_NS_5_SignES1_+0x42>
	++__dest;
  414def:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
      return __dest;
  414df4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  414df8:	5d                   	pop    %rbp
  414df9:	c3                   	ret

0000000000414dfa <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  414dfa:	55                   	push   %rbp
  414dfb:	48 89 e5             	mov    %rsp,%rbp
  414dfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414e02:	89 75 f4             	mov    %esi,-0xc(%rbp)
  414e05:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      else if (__sign == _Sign_plus)
  414e09:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  414e0d:	75 09                	jne    414e18 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x1e>
	*__dest = '+';
  414e0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414e13:	c6 00 2b             	movb   $0x2b,(%rax)
  414e16:	eb 14                	jmp    414e2c <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x32>
      else if (__sign == _Sign_space)
  414e18:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  414e1c:	75 09                	jne    414e27 <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x2d>
	*__dest = ' ';
  414e1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414e22:	c6 00 20             	movb   $0x20,(%rax)
  414e25:	eb 05                	jmp    414e2c <_ZNSt8__format10__put_signIyEEPcT_NS_5_SignES1_+0x32>
	++__dest;
  414e27:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
      return __dest;
  414e2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  414e30:	5d                   	pop    %rbp
  414e31:	c3                   	ret

0000000000414e32 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
  414e32:	55                   	push   %rbp
  414e33:	48 89 e5             	mov    %rsp,%rbp
  414e36:	48 83 ec 20          	sub    $0x20,%rsp
  414e3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414e3e:	89 f0                	mov    %esi,%eax
  414e40:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  414e44:	88 45 f4             	mov    %al,-0xc(%rbp)
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->_M_len; ++__pos)
  414e47:	eb 30                	jmp    414e79 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x47>
	if (!traits_type::eq(this->_M_str[__pos], __c))
  414e49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414e4d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  414e51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414e55:	48 01 c2             	add    %rax,%rdx
  414e58:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  414e5c:	48 89 c6             	mov    %rax,%rsi
  414e5f:	48 89 d7             	mov    %rdx,%rdi
  414e62:	e8 f9 f8 fe ff       	call   404760 <_ZNSt11char_traitsIcE2eqERKcS2_>
  414e67:	83 f0 01             	xor    $0x1,%eax
  414e6a:	84 c0                	test   %al,%al
  414e6c:	74 06                	je     414e74 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x42>
	  return __pos;
  414e6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414e72:	eb 19                	jmp    414e8d <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x5b>
      for (; __pos < this->_M_len; ++__pos)
  414e74:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  414e79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414e7d:	48 8b 00             	mov    (%rax),%rax
  414e80:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  414e84:	72 c3                	jb     414e49 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE17find_first_not_ofEcm+0x17>
      return npos;
  414e86:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    }
  414e8d:	c9                   	leave
  414e8e:	c3                   	ret
  414e8f:	90                   	nop

0000000000414e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
       operator=(const _Tp& __svt)
  414e90:	55                   	push   %rbp
  414e91:	48 89 e5             	mov    %rsp,%rbp
  414e94:	48 83 ec 10          	sub    $0x10,%rsp
  414e98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414e9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
       { return this->assign(__svt); }
  414ea0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  414ea4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414ea8:	48 89 d6             	mov    %rdx,%rsi
  414eab:	48 89 c7             	mov    %rax,%rdi
  414eae:	e8 a9 1e 00 00       	call   416d5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>
  414eb3:	c9                   	leave
  414eb4:	c3                   	ret
  414eb5:	90                   	nop

0000000000414eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
      operator+=(_CharT __c)
  414eb6:	55                   	push   %rbp
  414eb7:	48 89 e5             	mov    %rsp,%rbp
  414eba:	48 83 ec 10          	sub    $0x10,%rsp
  414ebe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414ec2:	89 f0                	mov    %esi,%eax
  414ec4:	88 45 f4             	mov    %al,-0xc(%rbp)
	this->push_back(__c);
  414ec7:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  414ecb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414ecf:	89 d6                	mov    %edx,%esi
  414ed1:	48 89 c7             	mov    %rax,%rdi
  414ed4:	e8 dd 1e 00 00       	call   416db6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	return *this;
  414ed9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  414edd:	c9                   	leave
  414ede:	c3                   	ret
  414edf:	90                   	nop

0000000000414ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc>:
      append(size_type __n, _CharT __c)
  414ee0:	55                   	push   %rbp
  414ee1:	48 89 e5             	mov    %rsp,%rbp
  414ee4:	53                   	push   %rbx
  414ee5:	48 83 ec 28          	sub    $0x28,%rsp
  414ee9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414eed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414ef1:	89 d0                	mov    %edx,%eax
  414ef3:	88 45 dc             	mov    %al,-0x24(%rbp)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
  414ef6:	0f be 5d dc          	movsbl -0x24(%rbp),%ebx
  414efa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414efe:	48 89 c7             	mov    %rax,%rdi
  414f01:	e8 8a fe fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  414f06:	48 89 c6             	mov    %rax,%rsi
  414f09:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  414f0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414f11:	41 89 d8             	mov    %ebx,%r8d
  414f14:	48 89 d1             	mov    %rdx,%rcx
  414f17:	ba 00 00 00 00       	mov    $0x0,%edx
  414f1c:	48 89 c7             	mov    %rax,%rdi
  414f1f:	e8 32 1f 00 00       	call   416e56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>
  414f24:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414f28:	c9                   	leave
  414f29:	c3                   	ret

0000000000414f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
        append(const _Tp& __svt)
  414f2a:	55                   	push   %rbp
  414f2b:	48 89 e5             	mov    %rsp,%rbp
  414f2e:	53                   	push   %rbx
  414f2f:	48 83 ec 28          	sub    $0x28,%rsp
  414f33:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  414f37:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
          __sv_type __sv = __svt;
  414f3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  414f3f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  414f43:	48 8b 00             	mov    (%rax),%rax
  414f46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  414f4a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
          return this->append(__sv.data(), __sv.size());
  414f4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  414f52:	48 89 c7             	mov    %rax,%rdi
  414f55:	e8 bc 0d ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  414f5a:	48 89 c3             	mov    %rax,%rbx
  414f5d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  414f61:	48 89 c7             	mov    %rax,%rdi
  414f64:	e8 71 25 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  414f69:	48 89 c1             	mov    %rax,%rcx
  414f6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  414f70:	48 89 da             	mov    %rbx,%rdx
  414f73:	48 89 ce             	mov    %rcx,%rsi
  414f76:	48 89 c7             	mov    %rax,%rdi
  414f79:	e8 72 6b ff ff       	call   40baf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm>
        }
  414f7e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414f82:	c9                   	leave
  414f83:	c3                   	ret

0000000000414f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc>:
      insert(size_type __pos, size_type __n, _CharT __c)
  414f84:	55                   	push   %rbp
  414f85:	48 89 e5             	mov    %rsp,%rbp
  414f88:	53                   	push   %rbx
  414f89:	48 83 ec 28          	sub    $0x28,%rsp
  414f8d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  414f91:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  414f95:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  414f99:	89 c8                	mov    %ecx,%eax
  414f9b:	88 45 d4             	mov    %al,-0x2c(%rbp)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
  414f9e:	0f be 5d d4          	movsbl -0x2c(%rbp),%ebx
  414fa2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  414fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414faa:	ba 00 b4 41 00       	mov    $0x41b400,%edx
  414faf:	48 89 ce             	mov    %rcx,%rsi
  414fb2:	48 89 c7             	mov    %rax,%rdi
  414fb5:	e8 f2 77 ff ff       	call   40c7ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>
  414fba:	48 89 c6             	mov    %rax,%rsi
  414fbd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  414fc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  414fc5:	41 89 d8             	mov    %ebx,%r8d
  414fc8:	48 89 d1             	mov    %rdx,%rcx
  414fcb:	ba 00 00 00 00       	mov    $0x0,%edx
  414fd0:	48 89 c7             	mov    %rax,%rdi
  414fd3:	e8 7e 1e 00 00       	call   416e56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>
			      size_type(0), __n, __c); }
  414fd8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  414fdc:	c9                   	leave
  414fdd:	c3                   	ret

0000000000414fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm>:
      operator[](size_type __pos)
  414fde:	55                   	push   %rbp
  414fdf:	48 89 e5             	mov    %rsp,%rbp
  414fe2:	48 83 ec 10          	sub    $0x10,%rsp
  414fe6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  414fea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  414fee:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__pos <= size());
  414ff3:	84 c0                	test   %al,%al
  414ff5:	74 1e                	je     415015 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm+0x37>
  414ff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  414ffb:	48 89 c7             	mov    %rax,%rdi
  414ffe:	e8 8d fd fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  415003:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  415007:	0f 92 c0             	setb   %al
  41500a:	0f b6 c0             	movzbl %al,%eax
  41500d:	48 85 c0             	test   %rax,%rax
  415010:	0f 95 c0             	setne  %al
  415013:	84 c0                	test   %al,%al
	return _M_data()[__pos];
  415015:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415019:	48 89 c7             	mov    %rax,%rdi
  41501c:	e8 f5 24 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  415021:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  415025:	48 01 d0             	add    %rdx,%rax
      }
  415028:	c9                   	leave
  415029:	c3                   	ret

000000000041502a <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  41502a:	55                   	push   %rbp
  41502b:	48 89 e5             	mov    %rsp,%rbp
  41502e:	48 89 f8             	mov    %rdi,%rax
  415031:	49 89 f0             	mov    %rsi,%r8
  415034:	48 89 c6             	mov    %rax,%rsi
  415037:	bf 00 00 00 00       	mov    $0x0,%edi
  41503c:	4c 89 c7             	mov    %r8,%rdi
  41503f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415043:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415047:	89 55 ec             	mov    %edx,-0x14(%rbp)
  41504a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      if (__i < 0)
  41504e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  415053:	79 09                	jns    41505e <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x34>
	*__dest = '-';
  415055:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415059:	c6 00 2d             	movb   $0x2d,(%rax)
  41505c:	eb 23                	jmp    415081 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
      else if (__sign == _Sign_plus)
  41505e:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
  415062:	75 09                	jne    41506d <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x43>
	*__dest = '+';
  415064:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415068:	c6 00 2b             	movb   $0x2b,(%rax)
  41506b:	eb 14                	jmp    415081 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
      else if (__sign == _Sign_space)
  41506d:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  415071:	75 09                	jne    41507c <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x52>
	*__dest = ' ';
  415073:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415077:	c6 00 20             	movb   $0x20,(%rax)
  41507a:	eb 05                	jmp    415081 <_ZNSt8__format10__put_signInEEPcT_NS_5_SignES1_+0x57>
	++__dest;
  41507c:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
      return __dest;
  415081:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  415085:	5d                   	pop    %rbp
  415086:	c3                   	ret

0000000000415087 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  415087:	55                   	push   %rbp
  415088:	48 89 e5             	mov    %rsp,%rbp
  41508b:	48 89 f8             	mov    %rdi,%rax
  41508e:	49 89 f0             	mov    %rsi,%r8
  415091:	48 89 c6             	mov    %rax,%rsi
  415094:	bf 00 00 00 00       	mov    $0x0,%edi
  415099:	4c 89 c7             	mov    %r8,%rdi
  41509c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4150a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4150a4:	89 55 ec             	mov    %edx,-0x14(%rbp)
  4150a7:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      else if (__sign == _Sign_plus)
  4150ab:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
  4150af:	75 09                	jne    4150ba <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x33>
	*__dest = '+';
  4150b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4150b5:	c6 00 2b             	movb   $0x2b,(%rax)
  4150b8:	eb 14                	jmp    4150ce <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x47>
      else if (__sign == _Sign_space)
  4150ba:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  4150be:	75 09                	jne    4150c9 <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x42>
	*__dest = ' ';
  4150c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4150c4:	c6 00 20             	movb   $0x20,(%rax)
  4150c7:	eb 05                	jmp    4150ce <_ZNSt8__format10__put_signIoEEPcT_NS_5_SignES1_+0x47>
	++__dest;
  4150c9:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
      return __dest;
  4150ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  4150d2:	5d                   	pop    %rbp
  4150d3:	c3                   	ret

00000000004150d4 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE>:
      _M_write(basic_string_view<_CharT> __s)
  4150d4:	55                   	push   %rbp
  4150d5:	48 89 e5             	mov    %rsp,%rbp
  4150d8:	53                   	push   %rbx
  4150d9:	48 83 ec 58          	sub    $0x58,%rsp
  4150dd:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4150e1:	48 89 f0             	mov    %rsi,%rax
  4150e4:	48 89 d1             	mov    %rdx,%rcx
  4150e7:	48 89 c0             	mov    %rax,%rax
  4150ea:	ba 00 00 00 00       	mov    $0x0,%edx
  4150ef:	48 89 ca             	mov    %rcx,%rdx
  4150f2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4150f6:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  4150fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4150fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  415102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415106:	48 8d 58 08          	lea    0x8(%rax),%rbx
  41510a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41510e:	48 83 c0 08          	add    $0x8,%rax
  415112:	48 89 c7             	mov    %rax,%rdi
  415115:	e8 0e 69 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  41511a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  41511e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415122:	48 8d 50 18          	lea    0x18(%rax),%rdx
  415126:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  41512a:	48 89 c6             	mov    %rax,%rsi
  41512d:	48 89 d7             	mov    %rdx,%rdi
  415130:	e8 18 69 ff ff       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  415135:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41513c:	48 89 c6             	mov    %rax,%rsi
  41513f:	48 89 df             	mov    %rbx,%rdi
  415142:	e8 45 81 ff ff       	call   40d28c <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  415147:	90                   	nop
	span __to = _M_unused();
  415148:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41514c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	while (__to.size() <= __s.size())
  415150:	e9 db 00 00 00       	jmp    415230 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x15c>
	    __s.copy(__to.data(), __to.size());
  415155:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415159:	48 89 c7             	mov    %rax,%rdi
  41515c:	e8 d3 03 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  415161:	48 89 c3             	mov    %rax,%rbx
  415164:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415168:	48 89 c7             	mov    %rax,%rdi
  41516b:	e8 b2 03 ff ff       	call   405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  415170:	48 89 c6             	mov    %rax,%rsi
  415173:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415177:	b9 00 00 00 00       	mov    $0x0,%ecx
  41517c:	48 89 da             	mov    %rbx,%rdx
  41517f:	48 89 c7             	mov    %rax,%rdi
  415182:	e8 c3 1f 00 00       	call   41714a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
	    _M_next += __to.size();
  415187:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41518b:	48 89 c7             	mov    %rax,%rdi
  41518e:	e8 a1 03 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  415193:	48 89 c2             	mov    %rax,%rdx
  415196:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41519a:	48 83 c0 18          	add    $0x18,%rax
  41519e:	48 89 d6             	mov    %rdx,%rsi
  4151a1:	48 89 c7             	mov    %rax,%rdi
  4151a4:	e8 cb 81 ff ff       	call   40d374 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
	    __s.remove_prefix(__to.size());
  4151a9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4151ad:	48 89 c7             	mov    %rax,%rdi
  4151b0:	e8 7f 03 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  4151b5:	48 89 c2             	mov    %rax,%rdx
  4151b8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4151bc:	48 89 d6             	mov    %rdx,%rsi
  4151bf:	48 89 c7             	mov    %rax,%rdi
  4151c2:	e8 ed 0e 00 00       	call   4160b4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
	    _M_overflow();
  4151c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4151cb:	48 8b 00             	mov    (%rax),%rax
  4151ce:	48 8b 10             	mov    (%rax),%rdx
  4151d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4151d5:	48 89 c7             	mov    %rax,%rdi
  4151d8:	ff d2                	call   *%rdx
  4151da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4151de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      { return _M_span.subspan(_M_next - _M_span.begin()); }
  4151e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4151e6:	48 8d 58 08          	lea    0x8(%rax),%rbx
  4151ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4151ee:	48 83 c0 08          	add    $0x8,%rax
  4151f2:	48 89 c7             	mov    %rax,%rdi
  4151f5:	e8 2e 68 ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  4151fa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4151fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  415202:	48 8d 50 18          	lea    0x18(%rax),%rdx
  415206:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  41520a:	48 89 c6             	mov    %rax,%rsi
  41520d:	48 89 d7             	mov    %rdx,%rdi
  415210:	e8 38 68 ff ff       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  415215:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41521c:	48 89 c6             	mov    %rax,%rsi
  41521f:	48 89 df             	mov    %rbx,%rdi
  415222:	e8 65 80 ff ff       	call   40d28c <_ZNKSt4spanIcLm18446744073709551615EE7subspanEmm>
  415227:	90                   	nop
	    __to = _M_unused();
  415228:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41522c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	while (__to.size() <= __s.size())
  415230:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415234:	48 89 c7             	mov    %rax,%rdi
  415237:	e8 f8 02 ff ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  41523c:	48 89 c3             	mov    %rax,%rbx
  41523f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415243:	48 89 c7             	mov    %rax,%rdi
  415246:	e8 cb 0a ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41524b:	48 39 d8             	cmp    %rbx,%rax
  41524e:	0f 93 c0             	setae  %al
  415251:	84 c0                	test   %al,%al
  415253:	0f 85 fc fe ff ff    	jne    415155 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x81>
	if (__s.size())
  415259:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  41525d:	48 89 c7             	mov    %rax,%rdi
  415260:	e8 b1 0a ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415265:	48 85 c0             	test   %rax,%rax
  415268:	0f 95 c0             	setne  %al
  41526b:	84 c0                	test   %al,%al
  41526d:	74 54                	je     4152c3 <_ZNSt8__format5_SinkIcE8_M_writeESt17basic_string_viewIcSt11char_traitsIcEE+0x1ef>
	    __s.copy(__to.data(), __s.size());
  41526f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415273:	48 89 c7             	mov    %rax,%rdi
  415276:	e8 9b 0a ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41527b:	48 89 c3             	mov    %rax,%rbx
  41527e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  415282:	48 89 c7             	mov    %rax,%rdi
  415285:	e8 98 02 ff ff       	call   405522 <_ZNKSt4spanIcLm18446744073709551615EE4dataEv>
  41528a:	48 89 c6             	mov    %rax,%rsi
  41528d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415291:	b9 00 00 00 00       	mov    $0x0,%ecx
  415296:	48 89 da             	mov    %rbx,%rdx
  415299:	48 89 c7             	mov    %rax,%rdi
  41529c:	e8 a9 1e 00 00       	call   41714a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
	    _M_next += __s.size();
  4152a1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4152a5:	48 89 c7             	mov    %rax,%rdi
  4152a8:	e8 69 0a ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4152ad:	48 89 c2             	mov    %rax,%rdx
  4152b0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4152b4:	48 83 c0 18          	add    $0x18,%rax
  4152b8:	48 89 d6             	mov    %rdx,%rsi
  4152bb:	48 89 c7             	mov    %rax,%rdi
  4152be:	e8 b1 80 ff ff       	call   40d374 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEpLEl>
      }
  4152c3:	90                   	nop
  4152c4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4152c8:	c9                   	leave
  4152c9:	c3                   	ret

00000000004152ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>:
      std::locale locale() { return _M_loc.value(); }
  4152ca:	55                   	push   %rbp
  4152cb:	48 89 e5             	mov    %rsp,%rbp
  4152ce:	48 83 ec 10          	sub    $0x10,%rsp
  4152d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4152d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4152da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4152de:	48 83 c0 18          	add    $0x18,%rax
  4152e2:	48 89 c7             	mov    %rax,%rdi
  4152e5:	e8 e2 ff fe ff       	call   4052cc <_ZNSt8__format16_Optional_locale5valueEv>
  4152ea:	48 89 c2             	mov    %rax,%rdx
  4152ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4152f1:	48 89 d6             	mov    %rdx,%rsi
  4152f4:	48 89 c7             	mov    %rax,%rdi
  4152f7:	e8 a4 ee fe ff       	call   4041a0 <_ZNSt6localeC1ERKS_@plt>
  4152fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415300:	c9                   	leave
  415301:	c3                   	ret

0000000000415302 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  415302:	55                   	push   %rbp
  415303:	48 89 e5             	mov    %rsp,%rbp
  415306:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  41530a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41530e:	5d                   	pop    %rbp
  41530f:	c3                   	ret

0000000000415310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
      operator=(basic_string&& __str)
  415310:	55                   	push   %rbp
  415311:	48 89 e5             	mov    %rsp,%rbp
  415314:	41 54                	push   %r12
  415316:	53                   	push   %rbx
  415317:	48 83 ec 50          	sub    $0x50,%rsp
  41531b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  41531f:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	const bool __equal_allocs = _Alloc_traits::_S_always_equal()
  415323:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
  415327:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41532b:	48 89 c7             	mov    %rax,%rdi
  41532e:	e8 1d 25 ff ff       	call   407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  415333:	83 f0 01             	xor    $0x1,%eax
  415336:	84 c0                	test   %al,%al
  415338:	74 07                	je     415341 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x31>
    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }
  41533a:	b8 01 00 00 00       	mov    $0x1,%eax
  41533f:	84 c0                	test   %al,%al
	    && !__equal_allocs)
  415341:	b8 00 00 00 00       	mov    $0x0,%eax
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
  415346:	84 c0                	test   %al,%al
  415348:	74 46                	je     415390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x80>
	    _M_destroy(_M_allocated_capacity);
  41534a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41534e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  415352:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415356:	48 89 d6             	mov    %rdx,%rsi
  415359:	48 89 c7             	mov    %rax,%rdi
  41535c:	e8 c1 5f ff ff       	call   40b322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
	    _M_data(_M_local_data());
  415361:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415365:	48 89 c7             	mov    %rax,%rdi
  415368:	e8 eb f6 fe ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  41536d:	48 89 c2             	mov    %rax,%rdx
  415370:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415374:	48 89 d6             	mov    %rdx,%rsi
  415377:	48 89 c7             	mov    %rax,%rdi
  41537a:	e8 59 44 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_set_length(0);
  41537f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415383:	be 00 00 00 00       	mov    $0x0,%esi
  415388:	48 89 c7             	mov    %rax,%rdi
  41538b:	e8 98 21 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
  415390:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415394:	48 89 c7             	mov    %rax,%rdi
  415397:	e8 a6 24 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41539c:	48 89 c3             	mov    %rax,%rbx
  41539f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4153a3:	48 89 c7             	mov    %rax,%rdi
  4153a6:	e8 97 24 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4153ab:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
  4153af:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      using __traits = allocator_traits<_Alloc>;
      using __pocma
	= typename __traits::propagate_on_container_move_assignment::type;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
  4153b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4153b7:	48 89 c7             	mov    %rax,%rdi
  4153ba:	e8 45 f7 fe ff       	call   404b04 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
#else
      __do_alloc_on_move(__one, __two, __pocma());
#endif
    }
  4153bf:	90                   	nop
	if (__str._M_is_local())
  4153c0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4153c4:	48 89 c7             	mov    %rax,%rdi
  4153c7:	e8 84 24 ff ff       	call   407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  4153cc:	84 c0                	test   %al,%al
  4153ce:	0f 84 95 00 00 00    	je     415469 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x159>
	    if (__builtin_expect(std::__addressof(__str) != this, true))
  4153d4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4153d8:	48 89 c7             	mov    %rax,%rdi
  4153db:	e8 22 ff ff ff       	call   415302 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
  4153e0:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  4153e4:	0f 95 c0             	setne  %al
  4153e7:	0f b6 c0             	movzbl %al,%eax
  4153ea:	48 85 c0             	test   %rax,%rax
  4153ed:	0f 95 c0             	setne  %al
  4153f0:	84 c0                	test   %al,%al
  4153f2:	0f 84 ad 01 00 00    	je     4155a5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
		if (__str.size())
  4153f8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4153fc:	48 89 c7             	mov    %rax,%rdi
  4153ff:	e8 8c f9 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  415404:	48 85 c0             	test   %rax,%rax
  415407:	0f 95 c0             	setne  %al
  41540a:	84 c0                	test   %al,%al
  41540c:	74 38                	je     415446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x136>
		  this->_S_copy(_M_data(), __str._M_data(), __str.size());
  41540e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415412:	48 89 c7             	mov    %rax,%rdi
  415415:	e8 76 f9 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41541a:	49 89 c4             	mov    %rax,%r12
  41541d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415421:	48 89 c7             	mov    %rax,%rdi
  415424:	e8 ed 20 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  415429:	48 89 c3             	mov    %rax,%rbx
  41542c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415430:	48 89 c7             	mov    %rax,%rdi
  415433:	e8 de 20 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  415438:	4c 89 e2             	mov    %r12,%rdx
  41543b:	48 89 de             	mov    %rbx,%rsi
  41543e:	48 89 c7             	mov    %rax,%rdi
  415441:	e8 d0 6c ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
		_M_set_length(__str.size());
  415446:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41544a:	48 89 c7             	mov    %rax,%rdi
  41544d:	e8 3e f9 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  415452:	48 89 c2             	mov    %rax,%rdx
  415455:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415459:	48 89 d6             	mov    %rdx,%rsi
  41545c:	48 89 c7             	mov    %rax,%rdi
  41545f:	e8 c4 20 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  415464:	e9 3c 01 00 00       	jmp    4155a5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
	else if (_Alloc_traits::_S_propagate_on_move_assign() || __equal_allocs)
  415469:	b8 01 00 00 00       	mov    $0x1,%eax
  41546e:	84 c0                	test   %al,%al
  415470:	0f 84 1c 01 00 00    	je     415592 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x282>
	    pointer __data = nullptr;
  415476:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  41547d:	00
	    if (!_M_is_local())
  41547e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415482:	48 89 c7             	mov    %rax,%rdi
  415485:	e8 c6 23 ff ff       	call   407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  41548a:	83 f0 01             	xor    $0x1,%eax
  41548d:	84 c0                	test   %al,%al
  41548f:	74 1c                	je     4154ad <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x19d>
		    __data = _M_data();
  415491:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  415495:	48 89 c7             	mov    %rax,%rdi
  415498:	e8 79 20 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41549d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    __capacity = _M_allocated_capacity;
  4154a1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4154a5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4154a9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    _M_data(__str._M_data());
  4154ad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4154b1:	48 89 c7             	mov    %rax,%rdi
  4154b4:	e8 5d 20 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4154b9:	48 89 c2             	mov    %rax,%rdx
  4154bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4154c0:	48 89 d6             	mov    %rdx,%rsi
  4154c3:	48 89 c7             	mov    %rax,%rdi
  4154c6:	e8 0d 43 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_length(__str.length());
  4154cb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4154cf:	48 89 c7             	mov    %rax,%rdi
  4154d2:	e8 c9 23 ff ff       	call   4078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  4154d7:	48 89 c2             	mov    %rax,%rdx
  4154da:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4154de:	48 89 d6             	mov    %rdx,%rsi
  4154e1:	48 89 c7             	mov    %rax,%rdi
  4154e4:	e8 7b 42 ff ff       	call   409764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	    _M_capacity(__str._M_allocated_capacity);
  4154e9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4154ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4154f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4154f5:	48 89 d6             	mov    %rdx,%rsi
  4154f8:	48 89 c7             	mov    %rax,%rdi
  4154fb:	e8 f2 42 ff ff       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	    if (__data)
  415500:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  415505:	74 28                	je     41552f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x21f>
		__str._M_data(__data);
  415507:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41550b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  41550f:	48 89 d6             	mov    %rdx,%rsi
  415512:	48 89 c7             	mov    %rax,%rdi
  415515:	e8 be 42 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		__str._M_capacity(__capacity);
  41551a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41551e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415522:	48 89 d6             	mov    %rdx,%rsi
  415525:	48 89 c7             	mov    %rax,%rdi
  415528:	e8 c5 42 ff ff       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
  41552d:	eb 76                	jmp    4155a5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
  41552f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415533:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  415537:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41553b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	if (std::is_constant_evaluated())
  41553f:	e8 38 f1 fe ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  415544:	84 c0                	test   %al,%al
  415546:	74 28                	je     415570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x260>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  415548:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  41554f:	00
  415550:	eb 17                	jmp    415569 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x259>
	    _M_local_buf[__i] = _CharT();
  415552:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  415556:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41555a:	48 01 d0             	add    %rdx,%rax
  41555d:	48 83 c0 10          	add    $0x10,%rax
  415561:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  415564:	48 83 45 b0 01       	addq   $0x1,-0x50(%rbp)
  415569:	48 83 7d b0 0f       	cmpq   $0xf,-0x50(%rbp)
  41556e:	76 e2                	jbe    415552 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x242>
      }
  415570:	90                   	nop
	return _M_local_data();
  415571:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415575:	48 89 c7             	mov    %rax,%rdi
  415578:	e8 db f4 fe ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  41557d:	48 89 c2             	mov    %rax,%rdx
  415580:	90                   	nop
	      __str._M_data(__str._M_use_local_data());
  415581:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  415585:	48 89 d6             	mov    %rdx,%rsi
  415588:	48 89 c7             	mov    %rax,%rdi
  41558b:	e8 48 42 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
  415590:	eb 13                	jmp    4155a5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x295>
	  assign(__str);
  415592:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  415596:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41559a:	48 89 d6             	mov    %rdx,%rsi
  41559d:	48 89 c7             	mov    %rax,%rdi
  4155a0:	e8 3b 1c 00 00       	call   4171e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>
	__str.clear();
  4155a5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4155a9:	48 89 c7             	mov    %rax,%rdi
  4155ac:	e8 8b 1e 00 00       	call   41743c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return *this;
  4155b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
      }
  4155b5:	48 83 c4 50          	add    $0x50,%rsp
  4155b9:	5b                   	pop    %rbx
  4155ba:	41 5c                	pop    %r12
  4155bc:	5d                   	pop    %rbp
  4155bd:	c3                   	ret

00000000004155be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
      operator=(const _CharT* __s)
  4155be:	55                   	push   %rbp
  4155bf:	48 89 e5             	mov    %rsp,%rbp
  4155c2:	48 83 ec 10          	sub    $0x10,%rsp
  4155c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4155ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->assign(__s); }
  4155ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4155d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4155d6:	48 89 d6             	mov    %rdx,%rsi
  4155d9:	48 89 c7             	mov    %rax,%rdi
  4155dc:	e8 7b 1e 00 00       	call   41745c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
  4155e1:	c9                   	leave
  4155e2:	c3                   	ret

00000000004155e3 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_>:
	_S_to_character(_Int __i)
  4155e3:	55                   	push   %rbp
  4155e4:	48 89 e5             	mov    %rsp,%rbp
  4155e7:	48 83 ec 10          	sub    $0x10,%rsp
  4155eb:	89 f8                	mov    %edi,%eax
  4155ed:	88 45 fc             	mov    %al,-0x4(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  4155f0:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  4155f4:	84 c0                	test   %al,%al
  4155f6:	78 06                	js     4155fe <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_+0x1b>
	    return static_cast<_CharT>(__i);
  4155f8:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  4155fc:	eb 0a                	jmp    415608 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIhEEcT_+0x25>
	  __throw_format_error("format error: integer not representable as "
  4155fe:	bf 18 b4 41 00       	mov    $0x41b418,%edi
  415603:	e8 91 fb fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	}
  415608:	c9                   	leave
  415609:	c3                   	ret

000000000041560a <_ZNSt8__format15__formatter_intIcE8to_charsIhEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  41560a:	55                   	push   %rbp
  41560b:	48 89 e5             	mov    %rsp,%rbp
  41560e:	48 83 ec 20          	sub    $0x20,%rsp
  415612:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415616:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41561a:	89 d0                	mov    %edx,%eax
  41561c:	89 4d e8             	mov    %ecx,-0x18(%rbp)
  41561f:	88 45 ec             	mov    %al,-0x14(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  415622:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
  415626:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  415629:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  41562d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415631:	48 89 c7             	mov    %rax,%rdi
  415634:	e8 ad 16 ff ff       	call   406ce6 <_ZSt12__to_chars_iIhESt15to_chars_resultPcS1_T_i>
  415639:	c9                   	leave
  41563a:	c3                   	ret

000000000041563b <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_>:
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
  41563b:	55                   	push   %rbp
  41563c:	48 89 e5             	mov    %rsp,%rbp
  41563f:	89 f8                	mov    %edi,%eax
  415641:	89 75 f8             	mov    %esi,-0x8(%rbp)
  415644:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  415648:	88 45 fc             	mov    %al,-0x4(%rbp)
      else if (__sign == _Sign_plus)
  41564b:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  41564f:	75 09                	jne    41565a <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x1f>
	*__dest = '+';
  415651:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415655:	c6 00 2b             	movb   $0x2b,(%rax)
  415658:	eb 14                	jmp    41566e <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x33>
      else if (__sign == _Sign_space)
  41565a:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  41565e:	75 09                	jne    415669 <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x2e>
	*__dest = ' ';
  415660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  415664:	c6 00 20             	movb   $0x20,(%rax)
  415667:	eb 05                	jmp    41566e <_ZNSt8__format10__put_signIhEEPcT_NS_5_SignES1_+0x33>
	++__dest;
  415669:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      return __dest;
  41566e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  415672:	5d                   	pop    %rbp
  415673:	c3                   	ret

0000000000415674 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_>:
	_M_format_int(string_view __narrow_str, size_t __prefix_len,
  415674:	55                   	push   %rbp
  415675:	48 89 e5             	mov    %rsp,%rbp
  415678:	41 55                	push   %r13
  41567a:	41 54                	push   %r12
  41567c:	53                   	push   %rbx
  41567d:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  415684:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  41568b:	48 89 f0             	mov    %rsi,%rax
  41568e:	48 89 d6             	mov    %rdx,%rsi
  415691:	48 89 c0             	mov    %rax,%rax
  415694:	ba 00 00 00 00       	mov    $0x0,%edx
  415699:	48 89 f2             	mov    %rsi,%rdx
  41569c:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  4156a3:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  4156aa:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
  4156b1:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	  size_t __width = _M_spec._M_get_width(__fc);
  4156b8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4156bf:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  4156c6:	48 89 d6             	mov    %rdx,%rsi
  4156c9:	48 89 c7             	mov    %rax,%rdi
  4156cc:	e8 63 09 00 00       	call   416034 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>
  4156d1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  basic_string_view<_CharT> __str;
  4156d5:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  4156dc:	00 00 00 00
  4156e0:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  4156e7:	00 00 00 00
	    __str = __narrow_str;
  4156eb:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  4156f2:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  4156f9:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  415700:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
	  if (_M_spec._M_localized)
  415707:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  41570e:	0f b6 00             	movzbl (%rax),%eax
  415711:	83 e0 20             	and    $0x20,%eax
  415714:	84 c0                	test   %al,%al
  415716:	0f 84 00 02 00 00    	je     41591c <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x2a8>
	      const auto& __l = __fc.locale();
  41571c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415723:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  41572a:	48 89 d6             	mov    %rdx,%rsi
  41572d:	48 89 c7             	mov    %rax,%rdi
  415730:	e8 95 fb ff ff       	call   4152ca <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE6localeEv>
  415735:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  41573c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	      if (__l.name() != "C")
  415740:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  415747:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41574b:	48 89 d6             	mov    %rdx,%rsi
  41574e:	48 89 c7             	mov    %rax,%rdi
  415751:	e8 5a ec fe ff       	call   4043b0 <_ZNKSt6locale4nameB5cxx11Ev@plt>
  415756:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  41575d:	be 4d b4 41 00       	mov    $0x41b44d,%esi
  415762:	48 89 c7             	mov    %rax,%rdi
  415765:	e8 7b 15 00 00       	call   416ce5 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
  41576a:	83 f0 01             	xor    $0x1,%eax
  41576d:	89 c3                	mov    %eax,%ebx
  41576f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  415776:	48 89 c7             	mov    %rax,%rdi
  415779:	e8 f6 1d ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41577e:	84 db                	test   %bl,%bl
  415780:	0f 84 87 01 00 00    	je     41590d <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x299>
		  auto& __np = use_facet<numpunct<_CharT>>(__l);
  415786:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41578a:	48 89 c7             	mov    %rax,%rdi
  41578d:	e8 2e e9 fe ff       	call   4040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  415792:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		  string __grp = __np.grouping();
  415796:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  41579d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4157a1:	48 89 d6             	mov    %rdx,%rsi
  4157a4:	48 89 c7             	mov    %rax,%rdi
  4157a7:	e8 44 eb fe ff       	call   4042f0 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>
		  if (!__grp.empty())
  4157ac:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  4157b3:	48 89 c7             	mov    %rax,%rdi
  4157b6:	e8 51 99 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  4157bb:	83 f0 01             	xor    $0x1,%eax
  4157be:	84 c0                	test   %al,%al
  4157c0:	0f 84 38 01 00 00    	je     4158fe <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x28a>
		      size_t __n = __str.size() - __prefix_len;
  4157c6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4157cd:	48 89 c7             	mov    %rax,%rdi
  4157d0:	e8 41 05 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  4157d5:	48 2b 85 10 ff ff ff 	sub    -0xf0(%rbp),%rax
  4157dc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		      auto __p = (_CharT*)__builtin_alloca(2 * __n
  4157e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4157e4:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  4157e8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4157ef:	48 01 d0             	add    %rdx,%rax
  4157f2:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4157f6:	b8 10 00 00 00       	mov    $0x10,%eax
  4157fb:	48 83 e8 01          	sub    $0x1,%rax
  4157ff:	48 01 d0             	add    %rdx,%rax
  415802:	bb 10 00 00 00       	mov    $0x10,%ebx
  415807:	ba 00 00 00 00       	mov    $0x0,%edx
  41580c:	48 f7 f3             	div    %rbx
  41580f:	48 6b c0 10          	imul   $0x10,%rax,%rax
  415813:	48 29 c4             	sub    %rax,%rsp
  415816:	48 89 e0             	mov    %rsp,%rax
  415819:	48 83 c0 0f          	add    $0xf,%rax
  41581d:	48 c1 e8 04          	shr    $0x4,%rax
  415821:	48 c1 e0 04          	shl    $0x4,%rax
  415825:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		      auto __s = __str.data();
  415829:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  415830:	48 89 c7             	mov    %rax,%rdi
  415833:	e8 a2 1c ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  415838:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		      char_traits<_CharT>::copy(__p, __s, __prefix_len);
  41583c:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  415843:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  415847:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41584b:	48 89 ce             	mov    %rcx,%rsi
  41584e:	48 89 c7             	mov    %rax,%rdi
  415851:	e8 00 f1 fe ff       	call   404956 <_ZNSt11char_traitsIcE4copyEPcPKcm>
		      __s += __prefix_len;
  415856:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  41585d:	48 01 45 a8          	add    %rax,-0x58(%rbp)
		      auto __end = std::__add_grouping(__p + __prefix_len,
  415861:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  415865:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  415869:	4c 8d 2c 02          	lea    (%rdx,%rax,1),%r13
  41586d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415874:	48 89 c7             	mov    %rax,%rdi
  415877:	e8 14 f5 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41587c:	49 89 c4             	mov    %rax,%r12
						       __grp.data(),
  41587f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415886:	48 89 c7             	mov    %rax,%rdi
  415889:	e8 ae 4f ff ff       	call   40a83c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  41588e:	48 89 c3             	mov    %rax,%rbx
						       __np.thousands_sep(),
  415891:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415895:	48 89 c7             	mov    %rax,%rdi
  415898:	e8 f3 e8 fe ff       	call   404190 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>
		      auto __end = std::__add_grouping(__p + __prefix_len,
  41589d:	0f be c0             	movsbl %al,%eax
  4158a0:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4158a4:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  4158ab:	48 8d 3c 11          	lea    (%rcx,%rdx,1),%rdi
  4158af:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4158b3:	4d 89 e9             	mov    %r13,%r9
  4158b6:	49 89 d0             	mov    %rdx,%r8
  4158b9:	4c 89 e1             	mov    %r12,%rcx
  4158bc:	48 89 da             	mov    %rbx,%rdx
  4158bf:	89 c6                	mov    %eax,%esi
  4158c1:	e8 e9 1b 00 00       	call   4174af <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>
  4158c6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		      __str = {__p, size_t(__end - __p)};
  4158ca:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4158ce:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  4158d2:	48 89 c2             	mov    %rax,%rdx
  4158d5:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4158d9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4158dd:	48 89 ce             	mov    %rcx,%rsi
  4158e0:	48 89 c7             	mov    %rax,%rdi
  4158e3:	e8 04 1c ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
  4158e8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4158ec:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4158f0:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  4158f7:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
		}
  4158fe:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415905:	48 89 c7             	mov    %rax,%rdi
  415908:	e8 67 1c ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    }
  41590d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415914:	48 89 c7             	mov    %rax,%rdi
  415917:	e8 14 ea fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
	  if (__width <= __str.size())
  41591c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  415923:	48 89 c7             	mov    %rax,%rdi
  415926:	e8 eb 03 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41592b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  41592f:	0f 93 c0             	setae  %al
  415932:	84 c0                	test   %al,%al
  415934:	74 33                	je     415969 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x2f5>
	    return __format::__write(__fc.out(), __str);
  415936:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  41593d:	48 89 c7             	mov    %rax,%rdi
  415940:	e8 c1 60 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  415945:	48 89 c1             	mov    %rax,%rcx
  415948:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  41594f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  415956:	48 89 d6             	mov    %rdx,%rsi
  415959:	48 89 c2             	mov    %rax,%rdx
  41595c:	48 89 cf             	mov    %rcx,%rdi
  41595f:	e8 fc 8e ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  415964:	e9 71 01 00 00       	jmp    415ada <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x466>
	  char32_t __fill_char = _M_spec._M_fill;
  415969:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  415970:	8b 40 08             	mov    0x8(%rax),%eax
  415973:	89 45 dc             	mov    %eax,-0x24(%rbp)
	  _Align __align = _M_spec._M_align;
  415976:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  41597d:	0f b6 00             	movzbl (%rax),%eax
  415980:	83 e0 03             	and    $0x3,%eax
  415983:	0f b6 c0             	movzbl %al,%eax
  415986:	89 45 d8             	mov    %eax,-0x28(%rbp)
	  size_t __nfill = __width - __str.size();
  415989:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  415990:	48 89 c7             	mov    %rax,%rdi
  415993:	e8 7e 03 ff ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415998:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  41599c:	48 29 c2             	sub    %rax,%rdx
  41599f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  auto __out = __fc.out();
  4159a3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4159aa:	48 89 c7             	mov    %rax,%rdi
  4159ad:	e8 54 60 ff ff       	call   40ba06 <_ZNSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3outEv>
  4159b2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	  if (__align == _Align_default)
  4159b9:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  4159bd:	0f 85 96 00 00 00    	jne    415a59 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
	      __align = _Align_right;
  4159c3:	c7 45 d8 02 00 00 00 	movl   $0x2,-0x28(%rbp)
	      if (_M_spec._M_zero_fill)
  4159ca:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4159d1:	0f b6 00             	movzbl (%rax),%eax
  4159d4:	83 e0 40             	and    $0x40,%eax
  4159d7:	84 c0                	test   %al,%al
  4159d9:	74 77                	je     415a52 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3de>
		  __fill_char = _CharT('0');
  4159db:	c7 45 dc 30 00 00 00 	movl   $0x30,-0x24(%rbp)
		  if (__prefix_len != 0)
  4159e2:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
  4159e9:	00
  4159ea:	74 6d                	je     415a59 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
		      __out = __format::__write(std::move(__out),
  4159ec:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  4159f3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4159fa:	be 00 00 00 00       	mov    $0x0,%esi
  4159ff:	48 89 c7             	mov    %rax,%rdi
  415a02:	e8 31 61 ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  415a07:	49 89 c4             	mov    %rax,%r12
  415a0a:	49 89 d5             	mov    %rdx,%r13
  415a0d:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
  415a14:	48 89 c7             	mov    %rax,%rdi
  415a17:	e8 29 40 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  415a1c:	4c 89 e1             	mov    %r12,%rcx
  415a1f:	4c 89 ea             	mov    %r13,%rdx
  415a22:	48 8b 00             	mov    (%rax),%rax
  415a25:	48 89 ce             	mov    %rcx,%rsi
  415a28:	48 89 c7             	mov    %rax,%rdi
  415a2b:	e8 30 8e ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  415a30:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
		      __str.remove_prefix(__prefix_len);
  415a37:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  415a3e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  415a45:	48 89 d6             	mov    %rdx,%rsi
  415a48:	48 89 c7             	mov    %rax,%rdi
  415a4b:	e8 64 06 00 00       	call   4160b4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>
  415a50:	eb 07                	jmp    415a59 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x3e5>
		__fill_char = _CharT(' ');
  415a52:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
	  return __format::__write_padded(std::move(__out), __str,
  415a59:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
  415a60:	48 89 c7             	mov    %rax,%rdi
  415a63:	e8 dd 3f ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  415a68:	44 8b 45 dc          	mov    -0x24(%rbp),%r8d
  415a6c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  415a70:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  415a73:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  415a7a:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  415a81:	48 8b 00             	mov    (%rax),%rax
  415a84:	45 89 c1             	mov    %r8d,%r9d
  415a87:	49 89 f8             	mov    %rdi,%r8
  415a8a:	48 89 c7             	mov    %rax,%rdi
  415a8d:	e8 df 08 00 00       	call   416371 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>
					  __align, __nfill, __fill_char);
  415a92:	90                   	nop
  415a93:	eb 45                	jmp    415ada <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x466>
	      if (__l.name() != "C")
  415a95:	48 89 c3             	mov    %rax,%rbx
  415a98:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  415a9f:	48 89 c7             	mov    %rax,%rdi
  415aa2:	e8 cd 1a ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415aa7:	eb 17                	jmp    415ac0 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x44c>
		}
  415aa9:	48 89 c3             	mov    %rax,%rbx
  415aac:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  415ab3:	48 89 c7             	mov    %rax,%rdi
  415ab6:	e8 b9 1a ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415abb:	eb 03                	jmp    415ac0 <_ZNKSt8__format15__formatter_intIcE13_M_format_intINS_10_Sink_iterIcEEEENSt20basic_format_contextIT_cE8iteratorESt17basic_string_viewIcSt11char_traitsIcEEmRS7_+0x44c>
	    }
  415abd:	48 89 c3             	mov    %rax,%rbx
  415ac0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  415ac7:	48 89 c7             	mov    %rax,%rdi
  415aca:	e8 61 e8 fe ff       	call   404330 <_ZNSt6localeD1Ev@plt>
  415acf:	48 89 d8             	mov    %rbx,%rax
  415ad2:	48 89 c7             	mov    %rax,%rdi
  415ad5:	e8 36 e9 fe ff       	call   404410 <_Unwind_Resume@plt>
	}
  415ada:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  415ade:	5b                   	pop    %rbx
  415adf:	41 5c                	pop    %r12
  415ae1:	41 5d                	pop    %r13
  415ae3:	5d                   	pop    %rbp
  415ae4:	c3                   	ret

0000000000415ae5 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_>:
	_S_to_character(_Int __i)
  415ae5:	55                   	push   %rbp
  415ae6:	48 89 e5             	mov    %rsp,%rbp
  415ae9:	48 83 ec 10          	sub    $0x10,%rsp
  415aed:	89 7d fc             	mov    %edi,-0x4(%rbp)
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
  415af0:	83 7d fc 80          	cmpl   $0xffffff80,-0x4(%rbp)
  415af4:	7c 0b                	jl     415b01 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x1c>
  415af6:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
  415afa:	7f 05                	jg     415b01 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x1c>
		return static_cast<_CharT>(__i);
  415afc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  415aff:	eb 0a                	jmp    415b0b <_ZNSt8__format15__formatter_intIcE15_S_to_characterIiEEcT_+0x26>
	  __throw_format_error("format error: integer not representable as "
  415b01:	bf 18 b4 41 00       	mov    $0x41b418,%edi
  415b06:	e8 8e f6 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	}
  415b0b:	c9                   	leave
  415b0c:	c3                   	ret

0000000000415b0d <_ZNSt8__format15__formatter_intIcE8to_charsIjEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  415b0d:	55                   	push   %rbp
  415b0e:	48 89 e5             	mov    %rsp,%rbp
  415b11:	48 83 ec 20          	sub    $0x20,%rsp
  415b15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415b19:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415b1d:	89 55 ec             	mov    %edx,-0x14(%rbp)
  415b20:	89 4d e8             	mov    %ecx,-0x18(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  415b23:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  415b26:	8b 55 ec             	mov    -0x14(%rbp),%edx
  415b29:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  415b2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415b31:	48 89 c7             	mov    %rax,%rdi
  415b34:	e8 2a 13 ff ff       	call   406e63 <_ZSt12__to_chars_iIjESt15to_chars_resultPcS1_T_i>
  415b39:	c9                   	leave
  415b3a:	c3                   	ret

0000000000415b3b <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_>:
	_S_to_character(_Int __i)
  415b3b:	55                   	push   %rbp
  415b3c:	48 89 e5             	mov    %rsp,%rbp
  415b3f:	48 83 ec 10          	sub    $0x10,%rsp
  415b43:	89 7d fc             	mov    %edi,-0x4(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  415b46:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
  415b4a:	77 05                	ja     415b51 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_+0x16>
	    return static_cast<_CharT>(__i);
  415b4c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  415b4f:	eb 0a                	jmp    415b5b <_ZNSt8__format15__formatter_intIcE15_S_to_characterIjEEcT_+0x20>
	  __throw_format_error("format error: integer not representable as "
  415b51:	bf 18 b4 41 00       	mov    $0x41b418,%edi
  415b56:	e8 3e f6 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	}
  415b5b:	c9                   	leave
  415b5c:	c3                   	ret

0000000000415b5d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_>:
	_S_to_character(_Int __i)
  415b5d:	55                   	push   %rbp
  415b5e:	48 89 e5             	mov    %rsp,%rbp
  415b61:	48 83 ec 10          	sub    $0x10,%rsp
  415b65:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
  415b69:	48 83 7d f8 80       	cmpq   $0xffffffffffffff80,-0x8(%rbp)
  415b6e:	7c 0d                	jl     415b7d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x20>
  415b70:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
  415b75:	7f 06                	jg     415b7d <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x20>
		return static_cast<_CharT>(__i);
  415b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415b7b:	eb 0a                	jmp    415b87 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIxEEcT_+0x2a>
	  __throw_format_error("format error: integer not representable as "
  415b7d:	bf 18 b4 41 00       	mov    $0x41b418,%edi
  415b82:	e8 12 f6 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	}
  415b87:	c9                   	leave
  415b88:	c3                   	ret

0000000000415b89 <_ZNSt8__format15__formatter_intIcE8to_charsIyEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  415b89:	55                   	push   %rbp
  415b8a:	48 89 e5             	mov    %rsp,%rbp
  415b8d:	48 83 ec 20          	sub    $0x20,%rsp
  415b91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  415b95:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  415b99:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  415b9d:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  415ba0:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  415ba3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415ba7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  415bab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415baf:	48 89 c7             	mov    %rax,%rdi
  415bb2:	e8 a9 15 ff ff       	call   407160 <_ZSt12__to_chars_iIyESt15to_chars_resultPcS1_T_i>
  415bb7:	c9                   	leave
  415bb8:	c3                   	ret

0000000000415bb9 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_>:
	_S_to_character(_Int __i)
  415bb9:	55                   	push   %rbp
  415bba:	48 89 e5             	mov    %rsp,%rbp
  415bbd:	48 83 ec 10          	sub    $0x10,%rsp
  415bc1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  415bc5:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
  415bca:	77 06                	ja     415bd2 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_+0x19>
	    return static_cast<_CharT>(__i);
  415bcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  415bd0:	eb 0a                	jmp    415bdc <_ZNSt8__format15__formatter_intIcE15_S_to_characterIyEEcT_+0x23>
	  __throw_format_error("format error: integer not representable as "
  415bd2:	bf 18 b4 41 00       	mov    $0x41b418,%edi
  415bd7:	e8 bd f5 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	}
  415bdc:	c9                   	leave
  415bdd:	c3                   	ret

0000000000415bde <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>:
	_M_get_precision(_Context& __ctx) const
  415bde:	55                   	push   %rbp
  415bdf:	48 89 e5             	mov    %rsp,%rbp
  415be2:	48 83 ec 40          	sub    $0x40,%rsp
  415be6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  415bea:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	  size_t __prec = -1;
  415bee:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
  415bf5:	ff
	  if (_M_prec_kind == _WP_value)
  415bf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415bfa:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  415bfe:	83 e0 06             	and    $0x6,%eax
  415c01:	3c 02                	cmp    $0x2,%al
  415c03:	75 11                	jne    415c16 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x38>
	    __prec = _M_prec;
  415c05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415c09:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  415c0d:	0f b7 c0             	movzwl %ax,%eax
  415c10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  415c14:	eb 3d                	jmp    415c53 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x75>
	  else if (_M_prec_kind == _WP_from_arg)
  415c16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415c1a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  415c1e:	83 e0 06             	and    $0x6,%eax
  415c21:	3c 04                	cmp    $0x4,%al
  415c23:	75 2e                	jne    415c53 <_ZNKSt8__format5_SpecIcE16_M_get_precisionISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x75>
	    __prec = __format::__int_from_arg(__ctx.arg(_M_prec));
  415c25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415c29:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  415c2d:	0f b7 d0             	movzwl %ax,%edx
  415c30:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  415c34:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  415c38:	48 89 ce             	mov    %rcx,%rsi
  415c3b:	48 89 c7             	mov    %rax,%rdi
  415c3e:	e8 b1 8c ff ff       	call   40e8f4 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  415c43:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  415c47:	48 89 c7             	mov    %rax,%rdi
  415c4a:	e8 b4 1c 00 00       	call   417903 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>
  415c4f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return __prec;
  415c53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  415c57:	c9                   	leave
  415c58:	c3                   	ret
  415c59:	90                   	nop

0000000000415c5a <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m>:
	auto __overwrite = [&](_CharT* __p, size_t) {
  415c5a:	55                   	push   %rbp
  415c5b:	48 89 e5             	mov    %rsp,%rbp
  415c5e:	41 56                	push   %r14
  415c60:	41 55                	push   %r13
  415c62:	41 54                	push   %r12
  415c64:	53                   	push   %rbx
  415c65:	48 83 ec 30          	sub    $0x30,%rsp
  415c69:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  415c6d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  415c71:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
					   __str.data(), __str.data() + __e);
  415c75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415c79:	48 8b 40 10          	mov    0x10(%rax),%rax
  415c7d:	48 89 c7             	mov    %rax,%rdi
  415c80:	e8 55 18 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  415c85:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  415c89:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  415c8d:	48 8b 12             	mov    (%rdx),%rdx
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
  415c90:	4c 8d 34 10          	lea    (%rax,%rdx,1),%r14
  415c94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415c98:	48 8b 40 10          	mov    0x10(%rax),%rax
  415c9c:	48 89 c7             	mov    %rax,%rdi
  415c9f:	e8 36 18 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  415ca4:	49 89 c5             	mov    %rax,%r13
  415ca7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415cab:	48 8b 40 08          	mov    0x8(%rax),%rax
  415caf:	48 89 c7             	mov    %rax,%rdi
  415cb2:	e8 d9 f0 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  415cb7:	49 89 c4             	mov    %rax,%r12
  415cba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415cbe:	48 8b 40 08          	mov    0x8(%rax),%rax
  415cc2:	48 89 c7             	mov    %rax,%rdi
  415cc5:	e8 44 3b ff ff       	call   40980e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  415cca:	48 89 c3             	mov    %rax,%rbx
  415ccd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415cd1:	48 8b 00             	mov    (%rax),%rax
  415cd4:	48 89 c7             	mov    %rax,%rdi
  415cd7:	e8 b4 e4 fe ff       	call   404190 <_ZNKSt7__cxx118numpunctIcE13thousands_sepEv@plt>
  415cdc:	0f be f0             	movsbl %al,%esi
  415cdf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  415ce3:	4d 89 f1             	mov    %r14,%r9
  415ce6:	4d 89 e8             	mov    %r13,%r8
  415ce9:	4c 89 e1             	mov    %r12,%rcx
  415cec:	48 89 da             	mov    %rbx,%rdx
  415cef:	48 89 c7             	mov    %rax,%rdi
  415cf2:	e8 b8 17 00 00       	call   4174af <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>
  415cf7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  if (__r)
  415cfb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415cff:	48 8b 40 20          	mov    0x20(%rax),%rax
  415d03:	48 8b 00             	mov    (%rax),%rax
  415d06:	48 85 c0             	test   %rax,%rax
  415d09:	74 77                	je     415d82 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0x128>
	      if (__d != __str.npos)
  415d0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415d0f:	48 8b 40 28          	mov    0x28(%rax),%rax
  415d13:	48 8b 00             	mov    (%rax),%rax
  415d16:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  415d1a:	74 28                	je     415d44 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0xea>
		  *__end = __point;
  415d1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415d20:	48 8b 40 30          	mov    0x30(%rax),%rax
  415d24:	0f b6 10             	movzbl (%rax),%edx
  415d27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415d2b:	88 10                	mov    %dl,(%rax)
		  ++__end;
  415d2d:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
		  ++__e;
  415d32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415d36:	48 8b 40 18          	mov    0x18(%rax),%rax
  415d3a:	48 8b 10             	mov    (%rax),%rdx
  415d3d:	48 83 c2 01          	add    $0x1,%rdx
  415d41:	48 89 10             	mov    %rdx,(%rax)
	      if (__r > 1)
  415d44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415d48:	48 8b 40 20          	mov    0x20(%rax),%rax
  415d4c:	48 8b 00             	mov    (%rax),%rax
  415d4f:	48 83 f8 01          	cmp    $0x1,%rax
  415d53:	76 2d                	jbe    415d82 <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m+0x128>
		__end += __str.copy(__end, __str.npos, __e);
  415d55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  415d59:	48 8b 40 10          	mov    0x10(%rax),%rax
  415d5d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  415d61:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  415d65:	48 8b 12             	mov    (%rdx),%rdx
  415d68:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  415d6c:	48 89 d1             	mov    %rdx,%rcx
  415d6f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  415d76:	48 89 c7             	mov    %rax,%rdi
  415d79:	e8 cc 13 00 00       	call   41714a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>
  415d7e:	48 01 45 d8          	add    %rax,-0x28(%rbp)
	  return (__end - __p);
  415d82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415d86:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
	auto __overwrite = [&](_CharT* __p, size_t) {
  415d8a:	48 83 c4 30          	add    $0x30,%rsp
  415d8e:	5b                   	pop    %rbx
  415d8f:	41 5c                	pop    %r12
  415d91:	41 5d                	pop    %r13
  415d93:	41 5e                	pop    %r14
  415d95:	5d                   	pop    %rbp
  415d96:	c3                   	ret
  415d97:	90                   	nop

0000000000415d98 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale>:
      _M_localize(basic_string_view<_CharT> __str, char __expc,
  415d98:	55                   	push   %rbp
  415d99:	48 89 e5             	mov    %rsp,%rbp
  415d9c:	53                   	push   %rbx
  415d9d:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  415da4:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  415dab:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
  415db2:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  415db9:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  415dc0:	44 89 c0             	mov    %r8d,%eax
  415dc3:	4c 89 8d e0 fe ff ff 	mov    %r9,-0x120(%rbp)
  415dca:	88 85 ec fe ff ff    	mov    %al,-0x114(%rbp)
	basic_string<_CharT> __lstr;
  415dd0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415dd7:	48 89 c7             	mov    %rax,%rdi
  415dda:	e8 47 ed fe ff       	call   404b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	if (__loc == locale::classic())
  415ddf:	e8 1c e5 fe ff       	call   404300 <_ZNSt6locale7classicEv@plt>
  415de4:	48 89 c2             	mov    %rax,%rdx
  415de7:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  415dee:	48 89 d6             	mov    %rdx,%rsi
  415df1:	48 89 c7             	mov    %rax,%rdi
  415df4:	e8 67 e2 fe ff       	call   404060 <_ZNKSt6localeeqERKS_@plt>
  415df9:	84 c0                	test   %al,%al
  415dfb:	0f 85 24 02 00 00    	jne    416025 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x28d>
	const auto& __np = use_facet<numpunct<_CharT>>(__loc);
  415e01:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  415e08:	48 89 c7             	mov    %rax,%rdi
  415e0b:	e8 b0 e2 fe ff       	call   4040c0 <_ZSt9use_facetINSt7__cxx118numpunctIcEEERKT_RKSt6locale@plt>
  415e10:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	const _CharT __point = __np.decimal_point();
  415e14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415e18:	48 89 c7             	mov    %rax,%rdi
  415e1b:	e8 30 e3 fe ff       	call   404150 <_ZNKSt7__cxx118numpunctIcE13decimal_pointEv@plt>
  415e20:	88 45 c7             	mov    %al,-0x39(%rbp)
	const string __grp = __np.grouping();
  415e23:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415e27:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  415e2b:	48 89 d6             	mov    %rdx,%rsi
  415e2e:	48 89 c7             	mov    %rax,%rdi
  415e31:	e8 ba e4 fe ff       	call   4042f0 <_ZNKSt7__cxx118numpunctIcE8groupingEv@plt>
	    __dot = '.';
  415e36:	c6 45 e7 2e          	movb   $0x2e,-0x19(%rbp)
	    __exp = __expc;
  415e3a:	0f b6 85 ec fe ff ff 	movzbl -0x114(%rbp),%eax
  415e41:	88 45 e6             	mov    %al,-0x1a(%rbp)
	if (__grp.empty() && __point == __dot)
  415e44:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415e48:	48 89 c7             	mov    %rax,%rdi
  415e4b:	e8 bc 92 ff ff       	call   40f10c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
  415e50:	84 c0                	test   %al,%al
  415e52:	74 10                	je     415e64 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xcc>
  415e54:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  415e58:	38 45 e7             	cmp    %al,-0x19(%rbp)
  415e5b:	75 07                	jne    415e64 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xcc>
  415e5d:	b8 01 00 00 00       	mov    $0x1,%eax
  415e62:	eb 05                	jmp    415e69 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0xd1>
  415e64:	b8 00 00 00 00       	mov    $0x0,%eax
  415e69:	84 c0                	test   %al,%al
  415e6b:	0f 85 77 01 00 00    	jne    415fe8 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x250>
	size_t __d = __str.find(__dot);
  415e71:	0f be 4d e7          	movsbl -0x19(%rbp),%ecx
  415e75:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415e7c:	ba 00 00 00 00       	mov    $0x0,%edx
  415e81:	89 ce                	mov    %ecx,%esi
  415e83:	48 89 c7             	mov    %rax,%rdi
  415e86:	e8 db 03 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  415e8b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	size_t __e = min(__d, __str.find(__exp));
  415e8f:	0f be 4d e6          	movsbl -0x1a(%rbp),%ecx
  415e93:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415e9a:	ba 00 00 00 00       	mov    $0x0,%edx
  415e9f:	89 ce                	mov    %ecx,%esi
  415ea1:	48 89 c7             	mov    %rax,%rdi
  415ea4:	e8 bd 03 ff ff       	call   406266 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEcm>
  415ea9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  415ead:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  415eb1:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  415eb5:	48 89 d6             	mov    %rdx,%rsi
  415eb8:	48 89 c7             	mov    %rax,%rdi
  415ebb:	e8 e8 49 ff ff       	call   40a8a8 <_ZSt3minImERKT_S2_S2_>
  415ec0:	48 8b 00             	mov    (%rax),%rax
  415ec3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	if (__e == __str.npos)
  415ec7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415ecb:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  415ecf:	75 13                	jne    415ee4 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x14c>
	  __e = __str.size();
  415ed1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415ed8:	48 89 c7             	mov    %rax,%rdi
  415edb:	e8 36 fe fe ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415ee0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	const size_t __r = __str.size() - __e;
  415ee4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415eeb:	48 89 c7             	mov    %rax,%rdi
  415eee:	e8 23 fe fe ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  415ef3:	48 89 c2             	mov    %rax,%rdx
  415ef6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415efa:	48 29 c2             	sub    %rax,%rdx
  415efd:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	auto __overwrite = [&](_CharT* __p, size_t) {
  415f01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  415f05:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  415f0c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415f10:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  415f17:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  415f1e:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  415f25:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  415f29:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  415f30:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  415f34:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  415f3b:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  415f3f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  415f46:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
  415f4a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	__lstr.__resize_and_overwrite(__e * 2 + __r, __overwrite);
  415f4e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  415f52:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  415f56:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  415f5a:	48 01 c2             	add    %rax,%rdx
  415f5d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  415f64:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  415f68:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  415f6c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  415f73:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  415f7a:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  415f81:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  415f88:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  415f8f:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  415f96:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  415f9d:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  415fa4:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  415fab:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  415fb2:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  415fb9:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  415fc0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  415fc4:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    { resize_and_overwrite<_Operation&>(__n, __op); }
  415fcb:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  415fd2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  415fd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  415fda:	48 89 ce             	mov    %rcx,%rsi
  415fdd:	48 89 c7             	mov    %rax,%rdi
  415fe0:	e8 23 30 00 00       	call   419008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_>
  415fe5:	90                   	nop
	return __lstr;
  415fe6:	eb 01                	jmp    415fe9 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x251>
	  return __lstr; // Locale uses '.' and no grouping.
  415fe8:	90                   	nop
      }
  415fe9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415fed:	48 89 c7             	mov    %rax,%rdi
  415ff0:	e8 7f 15 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  415ff5:	eb 2f                	jmp    416026 <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x28e>
  415ff7:	48 89 c3             	mov    %rax,%rbx
  415ffa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  415ffe:	48 89 c7             	mov    %rax,%rdi
  416001:	e8 6e 15 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  416006:	eb 03                	jmp    41600b <_ZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6locale+0x273>
  416008:	48 89 c3             	mov    %rax,%rbx
  41600b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  416012:	48 89 c7             	mov    %rax,%rdi
  416015:	e8 5a 15 ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41601a:	48 89 d8             	mov    %rbx,%rax
  41601d:	48 89 c7             	mov    %rax,%rdi
  416020:	e8 eb e3 fe ff       	call   404410 <_Unwind_Resume@plt>
	  return __lstr; // Nothing to do.
  416025:	90                   	nop
      }
  416026:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  41602d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416031:	c9                   	leave
  416032:	c3                   	ret
  416033:	90                   	nop

0000000000416034 <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_>:
	_M_get_width(_Context& __ctx) const
  416034:	55                   	push   %rbp
  416035:	48 89 e5             	mov    %rsp,%rbp
  416038:	48 83 ec 40          	sub    $0x40,%rsp
  41603c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  416040:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	  size_t __width = 0;
  416044:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  41604b:	00
	  if (_M_width_kind == _WP_value)
  41604c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416050:	0f b7 00             	movzwl (%rax),%eax
  416053:	66 25 80 01          	and    $0x180,%ax
  416057:	66 3d 80 00          	cmp    $0x80,%ax
  41605b:	75 11                	jne    41606e <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x3a>
	    __width = _M_width;
  41605d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416061:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  416065:	0f b7 c0             	movzwl %ax,%eax
  416068:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41606c:	eb 3f                	jmp    4160ad <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x79>
	  else if (_M_width_kind == _WP_from_arg)
  41606e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416072:	0f b7 00             	movzwl (%rax),%eax
  416075:	66 25 80 01          	and    $0x180,%ax
  416079:	66 3d 00 01          	cmp    $0x100,%ax
  41607d:	75 2e                	jne    4160ad <_ZNKSt8__format5_SpecIcE12_M_get_widthISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRT_+0x79>
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
  41607f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416083:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  416087:	0f b7 d0             	movzwl %ax,%edx
  41608a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  41608e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  416092:	48 89 ce             	mov    %rcx,%rsi
  416095:	48 89 c7             	mov    %rax,%rdi
  416098:	e8 57 88 ff ff       	call   40e8f4 <_ZNKSt20basic_format_contextINSt8__format10_Sink_iterIcEEcE3argEm>
  41609d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4160a1:	48 89 c7             	mov    %rax,%rdi
  4160a4:	e8 5a 18 00 00       	call   417903 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>
  4160a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return __width;
  4160ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  4160b1:	c9                   	leave
  4160b2:	c3                   	ret
  4160b3:	90                   	nop

00000000004160b4 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm>:
      remove_prefix(size_type __n) noexcept
  4160b4:	55                   	push   %rbp
  4160b5:	48 89 e5             	mov    %rsp,%rbp
  4160b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4160bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4160c0:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(this->_M_len >= __n);
  4160c5:	84 c0                	test   %al,%al
  4160c7:	74 14                	je     4160dd <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_prefixEm+0x29>
  4160c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4160cd:	48 8b 00             	mov    (%rax),%rax
  4160d0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4160d4:	0f 92 c0             	setb   %al
  4160d7:	0f b6 c0             	movzbl %al,%eax
  4160da:	48 85 c0             	test   %rax,%rax
	this->_M_str += __n;
  4160dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4160e1:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4160e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4160e9:	48 01 c2             	add    %rax,%rdx
  4160ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4160f0:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_len -= __n;
  4160f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4160f8:	48 8b 00             	mov    (%rax),%rax
  4160fb:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  4160ff:	48 89 c2             	mov    %rax,%rdx
  416102:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416106:	48 89 10             	mov    %rdx,(%rax)
      }
  416109:	90                   	nop
  41610a:	5d                   	pop    %rbp
  41610b:	c3                   	ret

000000000041610c <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>:
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  41610c:	55                   	push   %rbp
  41610d:	48 89 e5             	mov    %rsp,%rbp
  416110:	41 55                	push   %r13
  416112:	41 54                	push   %r12
  416114:	53                   	push   %rbx
  416115:	48 83 ec 28          	sub    $0x28,%rsp
  416119:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  41611d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  416121:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__n == 0)
  416125:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  41612a:	0f 84 b2 00 00 00    	je     4161e2 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd6>
	while (__n > __padding.size())
  416130:	eb 45                	jmp    416177 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0x6b>
	    __o = __format::__write(std::move(__o), __padding);
  416132:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416136:	48 8b 18             	mov    (%rax),%rbx
  416139:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41613d:	48 89 c7             	mov    %rax,%rdi
  416140:	e8 00 39 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416145:	48 8b 0b             	mov    (%rbx),%rcx
  416148:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  41614c:	48 8b 00             	mov    (%rax),%rax
  41614f:	48 89 ce             	mov    %rcx,%rsi
  416152:	48 89 c7             	mov    %rax,%rdi
  416155:	e8 06 87 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  41615a:	48 89 c2             	mov    %rax,%rdx
  41615d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416161:	48 89 10             	mov    %rdx,(%rax)
	    __n -= __padding.size();
  416164:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416168:	48 8b 00             	mov    (%rax),%rax
  41616b:	48 89 c7             	mov    %rax,%rdi
  41616e:	e8 a3 fb fe ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  416173:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
	while (__n > __padding.size())
  416177:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41617b:	48 8b 00             	mov    (%rax),%rax
  41617e:	48 89 c7             	mov    %rax,%rdi
  416181:	e8 90 fb fe ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  416186:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  41618a:	0f 92 c0             	setb   %al
  41618d:	84 c0                	test   %al,%al
  41618f:	75 a1                	jne    416132 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0x26>
	if (__n != 0)
  416191:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  416196:	74 4b                	je     4161e3 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd7>
	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
  416198:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41619c:	48 8b 00             	mov    (%rax),%rax
  41619f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4161a3:	be 00 00 00 00       	mov    $0x0,%esi
  4161a8:	48 89 c7             	mov    %rax,%rdi
  4161ab:	e8 88 59 ff ff       	call   40bb38 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm>
  4161b0:	49 89 c4             	mov    %rax,%r12
  4161b3:	49 89 d5             	mov    %rdx,%r13
  4161b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4161ba:	48 89 c7             	mov    %rax,%rdi
  4161bd:	e8 83 38 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4161c2:	4c 89 e1             	mov    %r12,%rcx
  4161c5:	4c 89 ea             	mov    %r13,%rdx
  4161c8:	48 8b 00             	mov    (%rax),%rax
  4161cb:	48 89 ce             	mov    %rcx,%rsi
  4161ce:	48 89 c7             	mov    %rax,%rdi
  4161d1:	e8 8a 86 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4161d6:	48 89 c2             	mov    %rax,%rdx
  4161d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4161dd:	48 89 10             	mov    %rdx,(%rax)
  4161e0:	eb 01                	jmp    4161e3 <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_+0xd7>
	  return;
  4161e2:	90                   	nop
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  4161e3:	48 83 c4 28          	add    $0x28,%rsp
  4161e7:	5b                   	pop    %rbx
  4161e8:	41 5c                	pop    %r12
  4161ea:	41 5d                	pop    %r13
  4161ec:	5d                   	pop    %rbp
  4161ed:	c3                   	ret

00000000004161ee <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  4161ee:	55                   	push   %rbp
  4161ef:	48 89 e5             	mov    %rsp,%rbp
  4161f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4161f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __t + 0;
  4161fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  4161fe:	5d                   	pop    %rbp
  4161ff:	c3                   	ret

0000000000416200 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  416200:	55                   	push   %rbp
  416201:	48 89 e5             	mov    %rsp,%rbp
  416204:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416208:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __t + extent_v<remove_reference_t<_Tp>>;
  41620c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416210:	48 83 c0 04          	add    $0x4,%rax
	}
  416214:	5d                   	pop    %rbp
  416215:	c3                   	ret

0000000000416216 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiEC1ES3_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  416216:	55                   	push   %rbp
  416217:	48 89 e5             	mov    %rsp,%rbp
  41621a:	48 83 ec 10          	sub    $0x10,%rsp
  41621e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416222:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  416226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41622a:	48 89 c7             	mov    %rax,%rdi
  41622d:	e8 0a 00 00 00       	call   41623c <_ZSt7forwardIRA1_KDiEOT_RNSt16remove_referenceIS3_E4typeE>
  416232:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  416236:	48 89 02             	mov    %rax,(%rdx)
  416239:	90                   	nop
  41623a:	c9                   	leave
  41623b:	c3                   	ret

000000000041623c <_ZSt7forwardIRA1_KDiEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  41623c:	55                   	push   %rbp
  41623d:	48 89 e5             	mov    %rsp,%rbp
  416240:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  416244:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416248:	5d                   	pop    %rbp
  416249:	c3                   	ret

000000000041624a <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE8_M_beginIPS1_S6_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  41624a:	55                   	push   %rbp
  41624b:	48 89 e5             	mov    %rsp,%rbp
  41624e:	48 83 ec 20          	sub    $0x20,%rsp
  416252:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416256:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  41625a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  41625e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  416262:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  416266:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41626a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  41626e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416272:	48 89 c7             	mov    %rax,%rdi
  416275:	e8 b6 18 00 00       	call   417b30 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  41627a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41627e:	c9                   	leave
  41627f:	c3                   	ret

0000000000416280 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv>:
      constexpr auto begin()
  416280:	55                   	push   %rbp
  416281:	48 89 e5             	mov    %rsp,%rbp
  416284:	53                   	push   %rbx
  416285:	48 83 ec 18          	sub    $0x18,%rsp
  416289:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  41628d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  416291:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416295:	48 8b 00             	mov    (%rax),%rax
  416298:	48 89 c6             	mov    %rax,%rsi
  41629b:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  4162a0:	e8 5b ff ff ff       	call   416200 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>
  4162a5:	48 89 c3             	mov    %rax,%rbx
  4162a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4162ac:	48 8b 00             	mov    (%rax),%rax
  4162af:	48 89 c6             	mov    %rax,%rsi
  4162b2:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  4162b7:	e8 32 ff ff ff       	call   4161ee <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>
  4162bc:	48 89 c2             	mov    %rax,%rdx
  4162bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4162c3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4162c7:	48 89 d9             	mov    %rbx,%rcx
  4162ca:	48 89 c7             	mov    %rax,%rdi
  4162cd:	e8 78 ff ff ff       	call   41624a <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE8_M_beginIPS1_S6_EEDaT_T0_>
  4162d2:	90                   	nop
  4162d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4162d7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4162db:	c9                   	leave
  4162dc:	c3                   	ret
  4162dd:	90                   	nop

00000000004162de <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE6_M_endIPS1_S6_EEDaT_T0_>:
	_M_end(_Iter __first, _Sent __last)
  4162de:	55                   	push   %rbp
  4162df:	48 89 e5             	mov    %rsp,%rbp
  4162e2:	48 83 ec 20          	sub    $0x20,%rsp
  4162e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4162ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4162ee:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4162f2:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __last, __last);
  4162f6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4162fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4162fe:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  416302:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416306:	48 89 c7             	mov    %rax,%rdi
  416309:	e8 22 18 00 00       	call   417b30 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  41630e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416312:	c9                   	leave
  416313:	c3                   	ret

0000000000416314 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE3endEv>:
      constexpr auto end()
  416314:	55                   	push   %rbp
  416315:	48 89 e5             	mov    %rsp,%rbp
  416318:	53                   	push   %rbx
  416319:	48 83 ec 18          	sub    $0x18,%rsp
  41631d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  416321:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_end(ranges::begin(_M_base), ranges::end(_M_base)); }
  416325:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416329:	48 8b 00             	mov    (%rax),%rax
  41632c:	48 89 c6             	mov    %rax,%rsi
  41632f:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  416334:	e8 c7 fe ff ff       	call   416200 <_ZNKSt6ranges8__access4_EndclIRA1_KDiEEDaOT_>
  416339:	48 89 c3             	mov    %rax,%rbx
  41633c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416340:	48 8b 00             	mov    (%rax),%rax
  416343:	48 89 c6             	mov    %rax,%rsi
  416346:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  41634b:	e8 9e fe ff ff       	call   4161ee <_ZNKSt6ranges8__access6_BeginclIRA1_KDiEEDaOT_>
  416350:	48 89 c2             	mov    %rax,%rdx
  416353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416357:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41635b:	48 89 d9             	mov    %rbx,%rcx
  41635e:	48 89 c7             	mov    %rax,%rdi
  416361:	e8 78 ff ff ff       	call   4162de <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE6_M_endIPS1_S6_EEDaT_T0_>
  416366:	90                   	nop
  416367:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41636b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41636f:	c9                   	leave
  416370:	c3                   	ret

0000000000416371 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi>:
    __write_padded(_Out __out, basic_string_view<_CharT> __str,
  416371:	55                   	push   %rbp
  416372:	48 89 e5             	mov    %rsp,%rbp
  416375:	53                   	push   %rbx
  416376:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  41637d:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  416384:	48 89 f0             	mov    %rsi,%rax
  416387:	48 89 d6             	mov    %rdx,%rsi
  41638a:	48 89 c0             	mov    %rax,%rax
  41638d:	ba 00 00 00 00       	mov    $0x0,%edx
  416392:	48 89 f2             	mov    %rsi,%rdx
  416395:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  41639c:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
  4163a3:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%rbp)
  4163a9:	4c 89 85 c8 fe ff ff 	mov    %r8,-0x138(%rbp)
  4163b0:	44 89 8d e0 fe ff ff 	mov    %r9d,-0x120(%rbp)
      const size_t __buflen = 0x20;
  4163b7:	48 c7 45 d0 20 00 00 	movq   $0x20,-0x30(%rbp)
  4163be:	00
      __padding_chars[0] = _CharT();
  4163bf:	c6 85 40 ff ff ff 00 	movb   $0x0,-0xc0(%rbp)
      basic_string_view<_CharT> __padding{__padding_chars, __buflen};
  4163c6:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
  4163cd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4163d4:	ba 20 00 00 00       	mov    $0x20,%edx
  4163d9:	48 89 ce             	mov    %rcx,%rsi
  4163dc:	48 89 c7             	mov    %rax,%rdi
  4163df:	e8 08 11 ff ff       	call   4074ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKcm>
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
  4163e4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  4163eb:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
      if (__align == _Align_centre)
  4163f2:	83 bd e4 fe ff ff 03 	cmpl   $0x3,-0x11c(%rbp)
  4163f9:	75 30                	jne    41642b <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xba>
	  __l = __nfill / 2;
  4163fb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  416402:	48 d1 e8             	shr    %rax
  416405:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __r = __l + (__nfill & 1);
  416409:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  416410:	83 e0 01             	and    $0x1,%eax
  416413:	48 89 c2             	mov    %rax,%rdx
  416416:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41641a:	48 01 d0             	add    %rdx,%rax
  41641d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __max = __r;
  416421:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416425:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  416429:	eb 41                	jmp    41646c <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xfb>
      else if (__align == _Align_right)
  41642b:	83 bd e4 fe ff ff 02 	cmpl   $0x2,-0x11c(%rbp)
  416432:	75 1d                	jne    416451 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xe0>
	  __l = __nfill;
  416434:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  41643b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __r = 0;
  41643f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  416446:	00
	  __max = __l;
  416447:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41644b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  41644f:	eb 1b                	jmp    41646c <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0xfb>
	  __l = 0;
  416451:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  416458:	00
	  __r = __nfill;
  416459:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  416460:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __max = __r;
  416464:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416468:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (!__is_single_code_unit<_CharT>(__fill_char)) [[unlikely]]
  41646c:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  416472:	89 c7                	mov    %eax,%edi
  416474:	e8 94 16 00 00       	call   417b0d <_ZNSt9__unicode21__is_single_code_unitIcEEbDi>
  416479:	83 f0 01             	xor    $0x1,%eax
  41647c:	84 c0                	test   %al,%al
  41647e:	0f 84 dc 01 00 00    	je     416660 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x2ef>
	    const char32_t __arr[1]{ __fill_char };
  416484:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  41648a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
	    _Utf_view<_CharT, const char32_t(&)[1]> __v(__arr);
  416490:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  416497:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  41649e:	48 89 d6             	mov    %rdx,%rsi
  4164a1:	48 89 c7             	mov    %rax,%rdi
  4164a4:	e8 6d fd ff ff       	call   416216 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiEC1ES3_>
  4164a9:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
  4164b0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4164b4:	90                   	nop
      allocator() _GLIBCXX_NOTHROW { }
  4164b5:	90                   	nop
	    basic_string<_CharT> __padstr(__v.begin(), __v.end());
  4164b6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  4164bd:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  4164c4:	48 89 d6             	mov    %rdx,%rsi
  4164c7:	48 89 c7             	mov    %rax,%rdi
  4164ca:	e8 45 fe ff ff       	call   416314 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE3endEv>
  4164cf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4164d3:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  4164da:	48 89 d6             	mov    %rdx,%rsi
  4164dd:	48 89 c7             	mov    %rax,%rdi
  4164e0:	e8 9b fd ff ff       	call   416280 <_ZNSt9__unicode9_Utf_viewIcRA1_KDiE5beginEv>
  4164e5:	48 8d b5 6f ff ff ff 	lea    -0x91(%rbp),%rsi
  4164ec:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  4164f3:	48 83 ec 28          	sub    $0x28,%rsp
  4164f7:	48 89 e0             	mov    %rsp,%rax
  4164fa:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  416501:	48 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%rbx
  416508:	48 89 08             	mov    %rcx,(%rax)
  41650b:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41650f:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  416513:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
  416517:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41651b:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41651f:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  416523:	48 89 48 20          	mov    %rcx,0x20(%rax)
  416527:	48 83 ec 28          	sub    $0x28,%rsp
  41652b:	48 89 e0             	mov    %rsp,%rax
  41652e:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  416532:	48 8b 5d a8          	mov    -0x58(%rbp),%rbx
  416536:	48 89 08             	mov    %rcx,(%rax)
  416539:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41653d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  416541:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  416545:	48 89 48 10          	mov    %rcx,0x10(%rax)
  416549:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41654d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  416551:	48 89 48 20          	mov    %rcx,0x20(%rax)
  416555:	48 89 d7             	mov    %rdx,%rdi
  416558:	e8 67 16 00 00       	call   417bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_>
  41655d:	48 83 c4 50          	add    $0x50,%rsp
      ~allocator() _GLIBCXX_NOTHROW { }
  416561:	90                   	nop
	    __padding = __padstr;
  416562:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  416569:	48 89 c7             	mov    %rax,%rdi
  41656c:	e8 b1 1a ff ff       	call   408022 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv>
  416571:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  416578:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	    while (__l-- > 0)
  41657f:	eb 32                	jmp    4165b3 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x242>
	      __out = __format::__write(std::move(__out), __padding);
  416581:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  416588:	48 89 c7             	mov    %rax,%rdi
  41658b:	e8 b5 34 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416590:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  416597:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  41659e:	48 8b 00             	mov    (%rax),%rax
  4165a1:	48 89 ce             	mov    %rcx,%rsi
  4165a4:	48 89 c7             	mov    %rax,%rdi
  4165a7:	e8 b4 82 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4165ac:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__l-- > 0)
  4165b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4165b7:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4165bb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4165bf:	48 85 c0             	test   %rax,%rax
  4165c2:	0f 95 c0             	setne  %al
  4165c5:	84 c0                	test   %al,%al
  4165c7:	75 b8                	jne    416581 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x210>
	    __out = __format::__write(std::move(__out), __str);
  4165c9:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  4165d0:	48 89 c7             	mov    %rax,%rdi
  4165d3:	e8 6d 34 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4165d8:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  4165df:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  4165e6:	48 8b 00             	mov    (%rax),%rax
  4165e9:	48 89 ce             	mov    %rcx,%rsi
  4165ec:	48 89 c7             	mov    %rax,%rdi
  4165ef:	e8 6c 82 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4165f4:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__r-- > 0)
  4165fb:	eb 32                	jmp    41662f <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x2be>
	      __out = __format::__write(std::move(__out), __padding);
  4165fd:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  416604:	48 89 c7             	mov    %rax,%rdi
  416607:	e8 39 34 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  41660c:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  416613:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  41661a:	48 8b 00             	mov    (%rax),%rax
  41661d:	48 89 ce             	mov    %rcx,%rsi
  416620:	48 89 c7             	mov    %rax,%rdi
  416623:	e8 38 82 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  416628:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
	    while (__r-- > 0)
  41662f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416633:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  416637:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  41663b:	48 85 c0             	test   %rax,%rax
  41663e:	0f 95 c0             	setne  %al
  416641:	84 c0                	test   %al,%al
  416643:	75 b8                	jne    4165fd <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x28c>
	    return __out;
  416645:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
	  }
  41664c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  416653:	48 89 c7             	mov    %rax,%rdi
  416656:	e8 19 0f ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  41665b:	e9 c1 00 00 00       	jmp    416721 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x3b0>
      if (__max < __buflen)
  416660:	48 83 7d d8 1f       	cmpq   $0x1f,-0x28(%rbp)
  416665:	77 20                	ja     416687 <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x316>
	__padding.remove_suffix(__buflen - __max);
  416667:	b8 20 00 00 00       	mov    $0x20,%eax
  41666c:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  416670:	48 89 c2             	mov    %rax,%rdx
  416673:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  41667a:	48 89 d6             	mov    %rdx,%rsi
  41667d:	48 89 c7             	mov    %rax,%rdi
  416680:	e8 f3 61 ff ff       	call   40c878 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE13remove_suffixEm>
  416685:	eb 08                	jmp    41668f <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x31e>
	__max = __buflen;
  416687:	48 c7 45 d8 20 00 00 	movq   $0x20,-0x28(%rbp)
  41668e:	00
      char_traits<_CharT>::assign(__padding_chars, __max, __fill_char);
  41668f:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  416695:	0f be d0             	movsbl %al,%edx
  416698:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  41669c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4166a3:	48 89 ce             	mov    %rcx,%rsi
  4166a6:	48 89 c7             	mov    %rax,%rdi
  4166a9:	e8 0b e3 fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
      __pad(__l, __out);
  4166ae:	48 8d 95 e8 fe ff ff 	lea    -0x118(%rbp),%rdx
  4166b5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4166b9:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  4166c0:	48 89 ce             	mov    %rcx,%rsi
  4166c3:	48 89 c7             	mov    %rax,%rdi
  4166c6:	e8 41 fa ff ff       	call   41610c <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>
      __out = __format::__write(std::move(__out), __str);
  4166cb:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
  4166d2:	48 89 c7             	mov    %rax,%rdi
  4166d5:	e8 6b 33 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4166da:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  4166e1:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  4166e8:	48 8b 00             	mov    (%rax),%rax
  4166eb:	48 89 ce             	mov    %rcx,%rsi
  4166ee:	48 89 c7             	mov    %rax,%rdi
  4166f1:	e8 6a 81 ff ff       	call   40e860 <_ZNSt8__format7__writeINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EE>
  4166f6:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
      __pad(__r, __out);
  4166fd:	48 8d 95 e8 fe ff ff 	lea    -0x118(%rbp),%rdx
  416704:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  416708:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  41670f:	48 89 ce             	mov    %rcx,%rsi
  416712:	48 89 c7             	mov    %rax,%rdi
  416715:	e8 f2 f9 ff ff       	call   41610c <_ZZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDiENKUlmRS2_E_clEmSA_>
      return __out;
  41671a:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
    }
  416721:	48 89 d8             	mov    %rbx,%rax
  416724:	eb 26                	jmp    41674c <_ZNSt8__format14__write_paddedINS_10_Sink_iterIcEEcEET_S3_St17basic_string_viewIT0_St11char_traitsIS5_EENS_6_AlignEmDi+0x3db>
  416726:	90                   	nop
  416727:	48 89 c7             	mov    %rax,%rdi
  41672a:	e8 e1 dc fe ff       	call   404410 <_Unwind_Resume@plt>
	  }
  41672f:	48 89 c3             	mov    %rax,%rbx
  416732:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  416739:	48 89 c7             	mov    %rax,%rdi
  41673c:	e8 33 0e ff ff       	call   407574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  416741:	48 89 d8             	mov    %rbx,%rax
  416744:	48 89 c7             	mov    %rax,%rdi
  416747:	e8 c4 dc fe ff       	call   404410 <_Unwind_Resume@plt>
    }
  41674c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416750:	c9                   	leave
  416751:	c3                   	ret

0000000000416752 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>:
      empty() const noexcept
  416752:	55                   	push   %rbp
  416753:	48 89 e5             	mov    %rsp,%rbp
  416756:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len == 0; }
  41675a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41675e:	48 8b 00             	mov    (%rax),%rax
  416761:	48 85 c0             	test   %rax,%rax
  416764:	0f 94 c0             	sete   %al
  416767:	5d                   	pop    %rbp
  416768:	c3                   	ret
  416769:	90                   	nop

000000000041676a <_ZNKSt6ranges8__access6_BeginclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  41676a:	55                   	push   %rbp
  41676b:	48 89 e5             	mov    %rsp,%rbp
  41676e:	48 83 ec 10          	sub    $0x10,%rsp
  416772:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416776:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.begin();
  41677a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41677e:	48 89 c7             	mov    %rax,%rdi
  416781:	e8 62 f5 fe ff       	call   405ce8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
	}
  416786:	c9                   	leave
  416787:	c3                   	ret

0000000000416788 <_ZNKSt6ranges8__access4_EndclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>:
	operator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
  416788:	55                   	push   %rbp
  416789:	48 89 e5             	mov    %rsp,%rbp
  41678c:	48 83 ec 10          	sub    $0x10,%rsp
  416790:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416794:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.end();
  416798:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41679c:	48 89 c7             	mov    %rax,%rdi
  41679f:	e8 56 f5 fe ff       	call   405cfa <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE3endEv>
	}
  4167a4:	c9                   	leave
  4167a5:	c3                   	ret

00000000004167a6 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE8_M_beginIPKcS8_EEDaT_T0_>:
	_M_begin(_Iter __first, _Sent __last)
  4167a6:	55                   	push   %rbp
  4167a7:	48 89 e5             	mov    %rsp,%rbp
  4167aa:	48 83 ec 20          	sub    $0x20,%rsp
  4167ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4167b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4167b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4167ba:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	    return _Iterator(__first, __first, __last);
  4167be:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4167c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4167c6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  4167ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4167ce:	48 89 c7             	mov    %rax,%rdi
  4167d1:	e8 f4 43 ff ff       	call   40abca <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEC1ES2_S2_S2_>
	}
  4167d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4167da:	c9                   	leave
  4167db:	c3                   	ret

00000000004167dc <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>:
      constexpr auto begin()
  4167dc:	55                   	push   %rbp
  4167dd:	48 89 e5             	mov    %rsp,%rbp
  4167e0:	53                   	push   %rbx
  4167e1:	48 83 ec 18          	sub    $0x18,%rsp
  4167e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4167e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_begin(ranges::begin(_M_base), ranges::end(_M_base)); }
  4167ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4167f1:	48 89 c6             	mov    %rax,%rsi
  4167f4:	bf 05 b0 41 00       	mov    $0x41b005,%edi
  4167f9:	e8 8a ff ff ff       	call   416788 <_ZNKSt6ranges8__access4_EndclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>
  4167fe:	48 89 c3             	mov    %rax,%rbx
  416801:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416805:	48 89 c6             	mov    %rax,%rsi
  416808:	bf 04 b0 41 00       	mov    $0x41b004,%edi
  41680d:	e8 58 ff ff ff       	call   41676a <_ZNKSt6ranges8__access6_BeginclIRSt17basic_string_viewIcSt11char_traitsIcEEEEDaOT_>
  416812:	48 89 c2             	mov    %rax,%rdx
  416815:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416819:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  41681d:	48 89 d9             	mov    %rbx,%rcx
  416820:	48 89 c7             	mov    %rax,%rdi
  416823:	e8 7e ff ff ff       	call   4167a6 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE8_M_beginIPKcS8_EEDaT_T0_>
  416828:	90                   	nop
  416829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41682d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416831:	c9                   	leave
  416832:	c3                   	ret
  416833:	90                   	nop

0000000000416834 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>:
      constexpr
      _Grapheme_cluster_view(_View __v)
      : _M_begin(_Utf32_view<_View>(std::move(__v)).begin())
      { }

      constexpr auto begin() const { return _M_begin; }
  416834:	55                   	push   %rbp
  416835:	48 89 e5             	mov    %rsp,%rbp
  416838:	53                   	push   %rbx
  416839:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  41683d:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  416841:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416845:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416849:	48 8b 0a             	mov    (%rdx),%rcx
  41684c:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
  416850:	48 89 08             	mov    %rcx,(%rax)
  416853:	48 89 58 08          	mov    %rbx,0x8(%rax)
  416857:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  41685b:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
  41685f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  416863:	48 89 58 18          	mov    %rbx,0x18(%rax)
  416867:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  41686b:	48 8b 5a 28          	mov    0x28(%rdx),%rbx
  41686f:	48 89 48 20          	mov    %rcx,0x20(%rax)
  416873:	48 89 58 28          	mov    %rbx,0x28(%rax)
  416877:	48 8b 52 30          	mov    0x30(%rdx),%rdx
  41687b:	48 89 50 30          	mov    %rdx,0x30(%rax)
  41687f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416883:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416887:	c9                   	leave
  416888:	c3                   	ret
  416889:	90                   	nop

000000000041688a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator3endEv>:

	// Iterator to the start of the current cluster.
	constexpr auto base() const { return _M_base.base(); }

	// The end of the underlying view (not the end of the current cluster!)
	constexpr auto end() const { return _M_base.end(); }
  41688a:	55                   	push   %rbp
  41688b:	48 89 e5             	mov    %rsp,%rbp
  41688e:	48 83 ec 10          	sub    $0x10,%rsp
  416892:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41689a:	48 83 c0 10          	add    $0x10,%rax
  41689e:	48 89 c7             	mov    %rax,%rdi
  4168a1:	e8 20 17 00 00       	call   417fc6 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  4168a6:	c9                   	leave
  4168a7:	c3                   	ret

00000000004168a8 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>:
      constexpr auto end() const { return _M_begin.end(); }
  4168a8:	55                   	push   %rbp
  4168a9:	48 89 e5             	mov    %rsp,%rbp
  4168ac:	48 83 ec 10          	sub    $0x10,%rsp
  4168b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4168b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4168b8:	48 89 c7             	mov    %rax,%rdi
  4168bb:	e8 ca ff ff ff       	call   41688a <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator3endEv>
  4168c0:	c9                   	leave
  4168c1:	c3                   	ret

00000000004168c2 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>:

	// Field width of the first code point in the cluster.
	constexpr int
	width() const noexcept
  4168c2:	55                   	push   %rbp
  4168c3:	48 89 e5             	mov    %rsp,%rbp
  4168c6:	48 83 ec 10          	sub    $0x10,%rsp
  4168ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __field_width(_M_c); }
  4168ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4168d2:	8b 00                	mov    (%rax),%eax
  4168d4:	89 c7                	mov    %eax,%edi
  4168d6:	e8 3a e5 fe ff       	call   404e15 <_ZNSt9__unicode9__v15_1_013__field_widthEDi>
  4168db:	c9                   	leave
  4168dc:	c3                   	ret
  4168dd:	90                   	nop

00000000004168de <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator4baseEv>:
	constexpr auto base() const { return _M_base.base(); }
  4168de:	55                   	push   %rbp
  4168df:	48 89 e5             	mov    %rsp,%rbp
  4168e2:	48 83 ec 10          	sub    $0x10,%rsp
  4168e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4168ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4168ee:	48 83 c0 10          	add    $0x10,%rax
  4168f2:	48 89 c7             	mov    %rax,%rdi
  4168f5:	e8 e8 43 ff ff       	call   40ace2 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE4baseEv>
  4168fa:	c9                   	leave
  4168fb:	c3                   	ret

00000000004168fc <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm>:

  // Truncate a string to at most `__max` field width units, and return the
  // resulting field width.
  template<typename _CharT>
    constexpr size_t
    __truncate(basic_string_view<_CharT>& __s, size_t __max)
  4168fc:	55                   	push   %rbp
  4168fd:	48 89 e5             	mov    %rsp,%rbp
  416900:	53                   	push   %rbx
  416901:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  416908:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  41690f:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
    {
      if (__s.empty()) [[unlikely]]
  416916:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  41691d:	48 89 c7             	mov    %rax,%rdi
  416920:	e8 2d fe ff ff       	call   416752 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>
  416925:	84 c0                	test   %al,%al
  416927:	74 0a                	je     416933 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x37>
	return 0;
  416929:	b8 00 00 00 00       	mov    $0x0,%eax
  41692e:	e9 4f 01 00 00       	jmp    416a82 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>

      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
  416933:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  41693a:	48 8b 08             	mov    (%rax),%rcx
  41693d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  416941:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  416945:	48 89 ce             	mov    %rcx,%rsi
  416948:	48 89 c7             	mov    %rax,%rdi
  41694b:	e8 d0 15 00 00       	call   417f20 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>
      auto __it = __gc.begin();
  416950:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416957:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  41695b:	48 89 d6             	mov    %rdx,%rsi
  41695e:	48 89 c7             	mov    %rax,%rdi
  416961:	e8 ce fe ff ff       	call   416834 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
      const auto __end = __gc.end();
  416966:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  41696a:	48 89 c7             	mov    %rax,%rdi
  41696d:	e8 36 ff ff ff       	call   4168a8 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>
  416972:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
      size_t __n = __it.width();
  416979:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416980:	48 89 c7             	mov    %rax,%rdi
  416983:	e8 3a ff ff ff       	call   4168c2 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  416988:	48 98                	cltq
  41698a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (__n > __max)
  41698e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416992:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
  416999:	0f 83 b0 00 00 00    	jae    416a4f <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x153>
	{
	  __s = {};
  41699f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4169a3:	48 89 c7             	mov    %rax,%rdi
  4169a6:	e8 77 84 ff ff       	call   40ee22 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1Ev>
  4169ab:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  4169b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4169b6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4169ba:	48 89 01             	mov    %rax,(%rcx)
  4169bd:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	  return 0;
  4169c1:	b8 00 00 00 00       	mov    $0x0,%eax
  4169c6:	e9 b7 00 00 00       	jmp    416a82 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>
	}
      while (++__it != __end)
	{
	  size_t __n2 = __n + __it.width();
  4169cb:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4169d2:	48 89 c7             	mov    %rax,%rdi
  4169d5:	e8 e8 fe ff ff       	call   4168c2 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  4169da:	48 63 d0             	movslq %eax,%rdx
  4169dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4169e1:	48 01 d0             	add    %rdx,%rax
  4169e4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__n2 > __max)
  4169e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4169ec:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
  4169f3:	73 52                	jae    416a47 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x14b>
	    {
	      __s = basic_string_view<_CharT>(__s.begin(), __it.base());
  4169f5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  4169fc:	48 89 c7             	mov    %rax,%rdi
  4169ff:	e8 da fe ff ff       	call   4168de <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator4baseEv>
  416a04:	48 89 c3             	mov    %rax,%rbx
  416a07:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  416a0e:	48 89 c7             	mov    %rax,%rdi
  416a11:	e8 d2 f2 fe ff       	call   405ce8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5beginEv>
  416a16:	48 89 c1             	mov    %rax,%rcx
  416a19:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  416a1d:	48 89 da             	mov    %rbx,%rdx
  416a20:	48 89 ce             	mov    %rcx,%rsi
  416a23:	48 89 c7             	mov    %rax,%rdi
  416a26:	e8 d5 f7 fe ff       	call   406200 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1IPKcS5_EET_T0_>
  416a2b:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  416a32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416a36:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416a3a:	48 89 01             	mov    %rax,(%rcx)
  416a3d:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	      return __n;
  416a41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416a45:	eb 3b                	jmp    416a82 <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0x186>
	    }
	  __n = __n2;
  416a47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416a4b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      while (++__it != __end)
  416a4f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  416a56:	48 89 c7             	mov    %rax,%rdi
  416a59:	e8 7a 15 00 00       	call   417fd8 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>
  416a5e:	48 89 c2             	mov    %rax,%rdx
  416a61:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
  416a68:	48 89 c6             	mov    %rax,%rsi
  416a6b:	48 89 d7             	mov    %rdx,%rdi
  416a6e:	e8 63 17 00 00       	call   4181d6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>
  416a73:	83 f0 01             	xor    $0x1,%eax
  416a76:	84 c0                	test   %al,%al
  416a78:	0f 85 4d ff ff ff    	jne    4169cb <_ZNSt9__unicode10__truncateIcEEmRSt17basic_string_viewIT_St11char_traitsIS2_EEm+0xcf>
	}
      return __n;
  416a7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  416a82:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416a86:	c9                   	leave
  416a87:	c3                   	ret

0000000000416a88 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE>:
    __field_width(basic_string_view<_CharT> __s)
  416a88:	55                   	push   %rbp
  416a89:	48 89 e5             	mov    %rsp,%rbp
  416a8c:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  416a93:	48 89 f8             	mov    %rdi,%rax
  416a96:	48 89 f1             	mov    %rsi,%rcx
  416a99:	48 89 c0             	mov    %rax,%rax
  416a9c:	ba 00 00 00 00       	mov    $0x0,%edx
  416aa1:	48 89 ca             	mov    %rcx,%rdx
  416aa4:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  416aab:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
      if (__s.empty()) [[unlikely]]
  416ab2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  416ab9:	48 89 c7             	mov    %rax,%rdi
  416abc:	e8 91 fc ff ff       	call   416752 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv>
  416ac1:	84 c0                	test   %al,%al
  416ac3:	74 0a                	je     416acf <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0x47>
	return 0;
  416ac5:	b8 00 00 00 00       	mov    $0x0,%eax
  416aca:	e9 95 00 00 00       	jmp    416b64 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0xdc>
      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
  416acf:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  416ad6:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  416add:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  416ae1:	48 89 ce             	mov    %rcx,%rsi
  416ae4:	48 89 c7             	mov    %rax,%rdi
  416ae7:	e8 34 14 00 00       	call   417f20 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>
      auto __it = __gc.begin();
  416aec:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  416af0:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  416af4:	48 89 d6             	mov    %rdx,%rsi
  416af7:	48 89 c7             	mov    %rax,%rdi
  416afa:	e8 35 fd ff ff       	call   416834 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
      const auto __end = __gc.end();
  416aff:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  416b03:	48 89 c7             	mov    %rax,%rdi
  416b06:	e8 9d fd ff ff       	call   4168a8 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE3endEv>
  416b0b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      size_t __n = __it.width();
  416b12:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  416b16:	48 89 c7             	mov    %rax,%rdi
  416b19:	e8 a4 fd ff ff       	call   4168c2 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  416b1e:	48 98                	cltq
  416b20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (++__it != __end)
  416b24:	eb 12                	jmp    416b38 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0xb0>
	__n += __it.width();
  416b26:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  416b2a:	48 89 c7             	mov    %rax,%rdi
  416b2d:	e8 90 fd ff ff       	call   4168c2 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator5widthEv>
  416b32:	48 98                	cltq
  416b34:	48 01 45 f8          	add    %rax,-0x8(%rbp)
      while (++__it != __end)
  416b38:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  416b3c:	48 89 c7             	mov    %rax,%rdi
  416b3f:	e8 94 14 00 00       	call   417fd8 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>
  416b44:	48 89 c2             	mov    %rax,%rdx
  416b47:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  416b4e:	48 89 c6             	mov    %rax,%rsi
  416b51:	48 89 d7             	mov    %rdx,%rdi
  416b54:	e8 7d 16 00 00       	call   4181d6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>
  416b59:	83 f0 01             	xor    $0x1,%eax
  416b5c:	84 c0                	test   %al,%al
  416b5e:	75 c6                	jne    416b26 <_ZNSt9__unicode13__field_widthIcEEmSt17basic_string_viewIT_St11char_traitsIS2_EE+0x9e>
      return __n;
  416b60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  416b64:	c9                   	leave
  416b65:	c3                   	ret

0000000000416b66 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_>:
	_S_to_character(_Int __i)
  416b66:	55                   	push   %rbp
  416b67:	48 89 e5             	mov    %rsp,%rbp
  416b6a:	48 83 ec 10          	sub    $0x10,%rsp
  416b6e:	48 89 f8             	mov    %rdi,%rax
  416b71:	48 89 f1             	mov    %rsi,%rcx
  416b74:	48 89 c0             	mov    %rax,%rax
  416b77:	ba 00 00 00 00       	mov    $0x0,%edx
  416b7c:	48 89 ca             	mov    %rcx,%rdx
  416b7f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  416b83:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  416b87:	ba 7f 00 00 00       	mov    $0x7f,%edx
  416b8c:	b8 00 00 00 00       	mov    $0x0,%eax
  416b91:	48 3b 55 f0          	cmp    -0x10(%rbp),%rdx
  416b95:	48 1b 45 f8          	sbb    -0x8(%rbp),%rax
  416b99:	7c 06                	jl     416ba1 <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_+0x3b>
	    return static_cast<_CharT>(__i);
  416b9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416b9f:	eb 0a                	jmp    416bab <_ZNSt8__format15__formatter_intIcE15_S_to_characterInEEcT_+0x45>
	  __throw_format_error("format error: integer not representable as "
  416ba1:	bf 18 b4 41 00       	mov    $0x41b418,%edi
  416ba6:	e8 ee e5 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	}
  416bab:	c9                   	leave
  416bac:	c3                   	ret

0000000000416bad <_ZNSt8__format15__formatter_intIcE8to_charsIoEESt15to_chars_resultPcS4_T_i>:
	to_chars(char* __first, char* __last, _Int __value, int __base)
  416bad:	55                   	push   %rbp
  416bae:	48 89 e5             	mov    %rsp,%rbp
  416bb1:	48 83 ec 30          	sub    $0x30,%rsp
  416bb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  416bb9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  416bbd:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  416bc1:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  416bc5:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
  416bc9:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  416bcc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416bd0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416bd4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  416bd8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  416bdc:	41 89 c8             	mov    %ecx,%r8d
  416bdf:	48 89 d1             	mov    %rdx,%rcx
  416be2:	48 89 c2             	mov    %rax,%rdx
  416be5:	e8 ac 03 00 00       	call   416f96 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i>
  416bea:	c9                   	leave
  416beb:	c3                   	ret

0000000000416bec <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_>:
	_S_to_character(_Int __i)
  416bec:	55                   	push   %rbp
  416bed:	48 89 e5             	mov    %rsp,%rbp
  416bf0:	48 83 ec 10          	sub    $0x10,%rsp
  416bf4:	48 89 f8             	mov    %rdi,%rax
  416bf7:	48 89 f1             	mov    %rsi,%rcx
  416bfa:	48 89 c0             	mov    %rax,%rax
  416bfd:	ba 00 00 00 00       	mov    $0x0,%edx
  416c02:	48 89 ca             	mov    %rcx,%rdx
  416c05:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  416c09:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
  416c0d:	ba 7f 00 00 00       	mov    $0x7f,%edx
  416c12:	b8 00 00 00 00       	mov    $0x0,%eax
  416c17:	48 3b 55 f0          	cmp    -0x10(%rbp),%rdx
  416c1b:	48 1b 45 f8          	sbb    -0x8(%rbp),%rax
  416c1f:	72 06                	jb     416c27 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_+0x3b>
	    return static_cast<_CharT>(__i);
  416c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  416c25:	eb 0a                	jmp    416c31 <_ZNSt8__format15__formatter_intIcE15_S_to_characterIoEEcT_+0x45>
	  __throw_format_error("format error: integer not representable as "
  416c27:	bf 18 b4 41 00       	mov    $0x41b418,%edi
  416c2c:	e8 68 e5 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
	}
  416c31:	c9                   	leave
  416c32:	c3                   	ret

0000000000416c33 <_ZSt4moveIRN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
  416c33:	55                   	push   %rbp
  416c34:	48 89 e5             	mov    %rsp,%rbp
  416c37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  416c3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416c3f:	5d                   	pop    %rbp
  416c40:	c3                   	ret

0000000000416c41 <_ZNSt6ranges14__copy_or_moveILb0EN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEES6_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESG_EESE_T1_SF_>:
    __copy_or_move(_Iter __first, _Sent __last, _Out __result)
  416c41:	55                   	push   %rbp
  416c42:	48 89 e5             	mov    %rsp,%rbp
  416c45:	41 54                	push   %r12
  416c47:	53                   	push   %rbx
  416c48:	48 83 ec 40          	sub    $0x40,%rsp
  416c4c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  416c50:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  416c54:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
					      std::move(__result));
  416c58:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  416c5c:	48 89 c7             	mov    %rax,%rdi
  416c5f:	e8 e1 2d ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416c64:	49 89 c4             	mov    %rax,%r12
	    = ranges::__copy_or_move<_IsMove>(__first.base(), __last.base(),
  416c67:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  416c6b:	48 89 c7             	mov    %rax,%rdi
  416c6e:	e8 ed 5c ff ff       	call   40c960 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  416c73:	48 8b 18             	mov    (%rax),%rbx
  416c76:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  416c7a:	48 89 c7             	mov    %rax,%rdi
  416c7d:	e8 de 5c ff ff       	call   40c960 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEE4baseEv>
  416c82:	48 8b 00             	mov    (%rax),%rax
  416c85:	49 8b 14 24          	mov    (%r12),%rdx
  416c89:	48 89 de             	mov    %rbx,%rsi
  416c8c:	48 89 c7             	mov    %rax,%rdi
  416c8f:	e8 ce 16 00 00       	call   418362 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_>
  416c94:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  416c98:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  return {decltype(__first){__in}, std::move(__out)};
  416c9c:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  416ca0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  416ca4:	48 89 d6             	mov    %rdx,%rsi
  416ca7:	48 89 c7             	mov    %rax,%rdi
  416caa:	e8 57 5c ff ff       	call   40c906 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  416caf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  416cb3:	48 83 c0 08          	add    $0x8,%rax
  416cb7:	48 89 c7             	mov    %rax,%rdi
  416cba:	e8 86 2d ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  416cbf:	48 8b 00             	mov    (%rax),%rax
  416cc2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  416cc6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416cca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  416cce:	48 83 c4 40          	add    $0x40,%rsp
  416cd2:	5b                   	pop    %rbx
  416cd3:	41 5c                	pop    %r12
  416cd5:	5d                   	pop    %rbp
  416cd6:	c3                   	ret

0000000000416cd7 <_ZSt4moveIRZNSt8__format9_Seq_sinkINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10_M_reserveEmEUlT_T0_E_EONSt16remove_referenceIS9_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
  416cd7:	55                   	push   %rbp
  416cd8:	48 89 e5             	mov    %rsp,%rbp
  416cdb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  416cdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  416ce3:	5d                   	pop    %rbp
  416ce4:	c3                   	ret

0000000000416ce5 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
  416ce5:	55                   	push   %rbp
  416ce6:	48 89 e5             	mov    %rsp,%rbp
  416ce9:	53                   	push   %rbx
  416cea:	48 83 ec 18          	sub    $0x18,%rsp
  416cee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  416cf2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const _CharT* __rhs)
    {
      return __lhs.size() == _Traits::length(__rhs)
  416cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416cfa:	48 89 c7             	mov    %rax,%rdi
  416cfd:	e8 8e e0 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416d02:	48 89 c3             	mov    %rax,%rbx
  416d05:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416d09:	48 89 c7             	mov    %rax,%rdi
  416d0c:	e8 53 db fe ff       	call   404864 <_ZNSt11char_traitsIcE6lengthEPKc>
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
  416d11:	48 39 c3             	cmp    %rax,%rbx
  416d14:	75 3b                	jne    416d51 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x6c>
  416d16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416d1a:	48 89 c7             	mov    %rax,%rdi
  416d1d:	e8 6e e0 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416d22:	48 89 c3             	mov    %rax,%rbx
  416d25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416d29:	48 89 c7             	mov    %rax,%rdi
  416d2c:	e8 dd 2a ff ff       	call   40980e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
  416d31:	48 89 c1             	mov    %rax,%rcx
  416d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  416d38:	48 89 da             	mov    %rbx,%rdx
  416d3b:	48 89 c6             	mov    %rax,%rsi
  416d3e:	48 89 cf             	mov    %rcx,%rdi
  416d41:	e8 5e da fe ff       	call   4047a4 <_ZNSt11char_traitsIcE7compareEPKcS2_m>
  416d46:	85 c0                	test   %eax,%eax
  416d48:	75 07                	jne    416d51 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x6c>
  416d4a:	b8 01 00 00 00       	mov    $0x1,%eax
  416d4f:	eb 05                	jmp    416d56 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x71>
  416d51:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  416d56:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416d5a:	c9                   	leave
  416d5b:	c3                   	ret

0000000000416d5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignISt17basic_string_viewIcS2_EEENSt9enable_ifIXsrSt6__and_IJSt14is_convertibleIRKT_S7_ESt6__not_ISA_IPSC_PKS4_EESF_ISA_ISD_PKcEEEE5valueERS4_E4typeESD_>:
	assign(const _Tp& __svt)
  416d5c:	55                   	push   %rbp
  416d5d:	48 89 e5             	mov    %rsp,%rbp
  416d60:	53                   	push   %rbx
  416d61:	48 83 ec 28          	sub    $0x28,%rsp
  416d65:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  416d69:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  __sv_type __sv = __svt;
  416d6d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416d71:	48 8b 50 08          	mov    0x8(%rax),%rdx
  416d75:	48 8b 00             	mov    (%rax),%rax
  416d78:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  416d7c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  return this->assign(__sv.data(), __sv.size());
  416d80:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  416d84:	48 89 c7             	mov    %rax,%rdi
  416d87:	e8 8a ef fe ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  416d8c:	48 89 c3             	mov    %rax,%rbx
  416d8f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  416d93:	48 89 c7             	mov    %rax,%rdi
  416d96:	e8 3f 07 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  416d9b:	48 89 c1             	mov    %rax,%rcx
  416d9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416da2:	48 89 da             	mov    %rbx,%rdx
  416da5:	48 89 ce             	mov    %rcx,%rsi
  416da8:	48 89 c7             	mov    %rax,%rdi
  416dab:	e8 d2 17 00 00       	call   418582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm>
	}
  416db0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416db4:	c9                   	leave
  416db5:	c3                   	ret

0000000000416db6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
      push_back(_CharT __c)
  416db6:	55                   	push   %rbp
  416db7:	48 89 e5             	mov    %rsp,%rbp
  416dba:	53                   	push   %rbx
  416dbb:	48 83 ec 28          	sub    $0x28,%rsp
  416dbf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  416dc3:	89 f0                	mov    %esi,%eax
  416dc5:	88 45 d4             	mov    %al,-0x2c(%rbp)
	const size_type __size = this->size();
  416dc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416dcc:	48 89 c7             	mov    %rax,%rdi
  416dcf:	e8 bc df fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416dd4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__size + 1 > this->capacity())
  416dd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416ddc:	48 8d 58 01          	lea    0x1(%rax),%rbx
  416de0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416de4:	48 89 c7             	mov    %rax,%rdi
  416de7:	e8 ca 45 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  416dec:	48 39 d8             	cmp    %rbx,%rax
  416def:	0f 92 c0             	setb   %al
  416df2:	84 c0                	test   %al,%al
  416df4:	74 20                	je     416e16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x60>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
  416df6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  416dfa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416dfe:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  416e04:	b9 00 00 00 00       	mov    $0x0,%ecx
  416e09:	ba 00 00 00 00       	mov    $0x0,%edx
  416e0e:	48 89 c7             	mov    %rax,%rdi
  416e11:	e8 32 63 ff ff       	call   40d148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
	traits_type::assign(this->_M_data()[__size], __c);
  416e16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416e1a:	48 89 c7             	mov    %rax,%rdi
  416e1d:	e8 f4 06 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416e22:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416e26:	48 01 c2             	add    %rax,%rdx
  416e29:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
  416e2d:	48 89 c6             	mov    %rax,%rsi
  416e30:	48 89 d7             	mov    %rdx,%rdi
  416e33:	e8 ea d8 fe ff       	call   404722 <_ZNSt11char_traitsIcE6assignERcRKc>
	this->_M_set_length(__size + 1);
  416e38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416e3c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  416e40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  416e44:	48 89 d6             	mov    %rdx,%rsi
  416e47:	48 89 c7             	mov    %rax,%rdi
  416e4a:	e8 d9 06 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  416e4f:	90                   	nop
  416e50:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416e54:	c9                   	leave
  416e55:	c3                   	ret

0000000000416e56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc>:
    basic_string<_CharT, _Traits, _Alloc>::
  416e56:	55                   	push   %rbp
  416e57:	48 89 e5             	mov    %rsp,%rbp
  416e5a:	53                   	push   %rbx
  416e5b:	48 83 ec 58          	sub    $0x58,%rsp
  416e5f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  416e63:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  416e67:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  416e6b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  416e6f:	44 89 c0             	mov    %r8d,%eax
  416e72:	88 45 ac             	mov    %al,-0x54(%rbp)
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
  416e75:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  416e79:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  416e7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e81:	b9 4f b4 41 00       	mov    $0x41b44f,%ecx
  416e86:	48 89 c7             	mov    %rax,%rdi
  416e89:	e8 e0 5a ff ff       	call   40c96e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
      const size_type __old_size = this->size();
  416e8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416e92:	48 89 c7             	mov    %rax,%rdi
  416e95:	e8 f6 de fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  416e9a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      const size_type __new_size = __old_size + __n2 - __n1;
  416e9e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  416ea2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  416ea6:	48 01 d0             	add    %rdx,%rax
  416ea9:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  416ead:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__new_size <= this->capacity())
  416eb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416eb5:	48 89 c7             	mov    %rax,%rdi
  416eb8:	e8 f9 44 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  416ebd:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  416ec1:	0f 93 c0             	setae  %al
  416ec4:	84 c0                	test   %al,%al
  416ec6:	74 61                	je     416f29 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xd3>
	  pointer __p = this->_M_data() + __pos1;
  416ec8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416ecc:	48 89 c7             	mov    %rax,%rdi
  416ecf:	e8 42 06 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416ed4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  416ed8:	48 01 d0             	add    %rdx,%rax
  416edb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  const size_type __how_much = __old_size - __pos1 - __n1;
  416edf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416ee3:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  416ee7:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  416eeb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	  if (__how_much && __n1 != __n2)
  416eef:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  416ef4:	74 53                	je     416f49 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
  416ef6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416efa:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  416efe:	74 49                	je     416f49 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
  416f00:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416f04:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  416f08:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  416f0c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416f10:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  416f14:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  416f18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416f1c:	48 89 c2             	mov    %rax,%rdx
  416f1f:	48 89 cf             	mov    %rcx,%rdi
  416f22:	e8 d6 61 ff ff       	call   40d0fd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
  416f27:	eb 20                	jmp    416f49 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0xf3>
	this->_M_mutate(__pos1, __n1, 0, __n2);
  416f29:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  416f2d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  416f31:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  416f35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416f39:	49 89 c8             	mov    %rcx,%r8
  416f3c:	b9 00 00 00 00       	mov    $0x0,%ecx
  416f41:	48 89 c7             	mov    %rax,%rdi
  416f44:	e8 ff 61 ff ff       	call   40d148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>
      if (__n2)
  416f49:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  416f4e:	74 29                	je     416f79 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc+0x123>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
  416f50:	0f be 5d ac          	movsbl -0x54(%rbp),%ebx
  416f54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416f58:	48 89 c7             	mov    %rax,%rdi
  416f5b:	e8 b6 05 ff ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  416f60:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  416f64:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  416f68:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  416f6c:	89 da                	mov    %ebx,%edx
  416f6e:	48 89 c6             	mov    %rax,%rsi
  416f71:	48 89 cf             	mov    %rcx,%rdi
  416f74:	e8 50 16 00 00       	call   4185c9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc>
      this->_M_set_length(__new_size);
  416f79:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  416f7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  416f81:	48 89 d6             	mov    %rdx,%rsi
  416f84:	48 89 c7             	mov    %rax,%rdi
  416f87:	e8 9c 05 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
  416f8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    }
  416f90:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  416f94:	c9                   	leave
  416f95:	c3                   	ret

0000000000416f96 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i>:
    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)
  416f96:	55                   	push   %rbp
  416f97:	48 89 e5             	mov    %rsp,%rbp
  416f9a:	48 83 ec 40          	sub    $0x40,%rsp
  416f9e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  416fa2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  416fa6:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  416faa:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  416fae:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
  416fb2:	b8 00 00 00 00       	mov    $0x0,%eax
      __glibcxx_assert(2 <= __base && __base <= 36);
  416fb7:	84 c0                	test   %al,%al
  416fb9:	74 30                	je     416feb <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x55>
  416fbb:	83 7d cc 01          	cmpl   $0x1,-0x34(%rbp)
  416fbf:	0f 9e c0             	setle  %al
  416fc2:	0f b6 c0             	movzbl %al,%eax
  416fc5:	48 85 c0             	test   %rax,%rax
  416fc8:	75 0f                	jne    416fd9 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x43>
  416fca:	83 7d cc 24          	cmpl   $0x24,-0x34(%rbp)
  416fce:	0f 9f c0             	setg   %al
  416fd1:	0f b6 c0             	movzbl %al,%eax
  416fd4:	48 85 c0             	test   %rax,%rax
  416fd7:	74 07                	je     416fe0 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x4a>
  416fd9:	b8 01 00 00 00       	mov    $0x1,%eax
  416fde:	eb 05                	jmp    416fe5 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x4f>
  416fe0:	b8 00 00 00 00       	mov    $0x0,%eax
  416fe5:	0f b6 c0             	movzbl %al,%eax
  416fe8:	48 85 c0             	test   %rax,%rax
      _Up __unsigned_val = __value;
  416feb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  416fef:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  416ff3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  416ff7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
      if (__first == __last) [[__unlikely__]]
  416ffb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  416fff:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  417003:	75 20                	jne    417025 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x8f>
	return { __last, errc::value_too_large };
  417005:	4c 8b 55 e0          	mov    -0x20(%rbp),%r10
  417009:	4c 89 da             	mov    %r11,%rdx
  41700c:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  417013:	ff ff ff
  417016:	48 21 d0             	and    %rdx,%rax
  417019:	48 83 c8 4b          	or     $0x4b,%rax
  41701d:	49 89 c3             	mov    %rax,%r11
  417020:	e9 1c 01 00 00       	jmp    417141 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
      if (__value == 0)
  417025:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417029:	48 0b 45 d8          	or     -0x28(%rbp),%rax
  41702d:	75 2a                	jne    417059 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0xc3>
	  *__first = '0';
  41702f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417033:	c6 00 30             	movb   $0x30,(%rax)
	  return { __first + 1, errc{} };
  417036:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41703a:	48 83 c0 01          	add    $0x1,%rax
  41703e:	49 89 c2             	mov    %rax,%r10
  417041:	4c 89 da             	mov    %r11,%rdx
  417044:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  41704b:	ff ff ff
  41704e:	48 21 d0             	and    %rdx,%rax
  417051:	49 89 c3             	mov    %rax,%r11
  417054:	e9 e8 00 00 00       	jmp    417141 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
      switch (__base)
  417059:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  41705d:	74 2b                	je     41708a <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0xf4>
  41705f:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  417063:	0f 8f b0 00 00 00    	jg     417119 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
  417069:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
  41706d:	74 41                	je     4170b0 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x11a>
  41706f:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
  417073:	0f 8f a0 00 00 00    	jg     417119 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
  417079:	83 7d cc 02          	cmpl   $0x2,-0x34(%rbp)
  41707d:	74 77                	je     4170f6 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x160>
  41707f:	83 7d cc 08          	cmpl   $0x8,-0x34(%rbp)
  417083:	74 4e                	je     4170d3 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x13d>
  417085:	e9 8f 00 00 00       	jmp    417119 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x183>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
  41708a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41708e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417092:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  417096:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  41709a:	48 89 d1             	mov    %rdx,%rcx
  41709d:	48 89 c2             	mov    %rax,%rdx
  4170a0:	e8 a8 15 00 00       	call   41864d <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_>
  4170a5:	49 89 c2             	mov    %rax,%r10
  4170a8:	49 89 d3             	mov    %rdx,%r11
  4170ab:	e9 91 00 00 00       	jmp    417141 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
  4170b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4170b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4170b8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4170bc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4170c0:	48 89 d1             	mov    %rdx,%rcx
  4170c3:	48 89 c2             	mov    %rax,%rdx
  4170c6:	e8 73 18 00 00       	call   41893e <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_>
  4170cb:	49 89 c2             	mov    %rax,%r10
  4170ce:	49 89 d3             	mov    %rdx,%r11
  4170d1:	eb 6e                	jmp    417141 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_8(__first, __last, __unsigned_val);
  4170d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4170d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4170db:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4170df:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  4170e3:	48 89 d1             	mov    %rdx,%rcx
  4170e6:	48 89 c2             	mov    %rax,%rdx
  4170e9:	e8 f1 18 00 00       	call   4189df <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_>
  4170ee:	49 89 c2             	mov    %rax,%r10
  4170f1:	49 89 d3             	mov    %rdx,%r11
  4170f4:	eb 4b                	jmp    417141 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars_2(__first, __last, __unsigned_val);
  4170f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4170fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4170fe:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  417102:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  417106:	48 89 d1             	mov    %rdx,%rcx
  417109:	48 89 c2             	mov    %rax,%rdx
  41710c:	e8 9d 1a 00 00       	call   418bae <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_>
  417111:	49 89 c2             	mov    %rax,%r10
  417114:	49 89 d3             	mov    %rdx,%r11
  417117:	eb 28                	jmp    417141 <_ZSt12__to_chars_iIoESt15to_chars_resultPcS1_T_i+0x1ab>
	return __detail::__to_chars(__first, __last, __unsigned_val, __base);
  417119:	8b 4d cc             	mov    -0x34(%rbp),%ecx
  41711c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417120:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417124:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  417128:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  41712c:	41 89 c8             	mov    %ecx,%r8d
  41712f:	48 89 d1             	mov    %rdx,%rcx
  417132:	48 89 c2             	mov    %rax,%rdx
  417135:	e8 47 1b 00 00       	call   418c81 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i>
  41713a:	49 89 c2             	mov    %rax,%r10
  41713d:	49 89 d3             	mov    %rdx,%r11
  417140:	90                   	nop
    }
  417141:	4c 89 d0             	mov    %r10,%rax
  417144:	4c 89 da             	mov    %r11,%rdx
  417147:	c9                   	leave
  417148:	c3                   	ret
  417149:	90                   	nop

000000000041714a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4copyEPcmm>:
      copy(_CharT* __str, size_type __n, size_type __pos = 0) const
  41714a:	55                   	push   %rbp
  41714b:	48 89 e5             	mov    %rsp,%rbp
  41714e:	48 83 ec 30          	sub    $0x30,%rsp
  417152:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417156:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  41715a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  41715e:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	__pos = std::__sv_check(size(), __pos, "basic_string_view::copy");
  417162:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417166:	48 89 c7             	mov    %rax,%rdi
  417169:	e8 a8 eb fe ff       	call   405d16 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
  41716e:	48 89 c1             	mov    %rax,%rcx
  417171:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  417175:	ba 6c b4 41 00       	mov    $0x41b46c,%edx
  41717a:	48 89 c6             	mov    %rax,%rsi
  41717d:	48 89 cf             	mov    %rcx,%rdi
  417180:	e8 91 d8 fe ff       	call   404a16 <_ZSt10__sv_checkmmPKc>
  417185:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
  417189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41718d:	48 8b 00             	mov    (%rax),%rax
  417190:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  417194:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  417198:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  41719c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  4171a0:	48 89 d6             	mov    %rdx,%rsi
  4171a3:	48 89 c7             	mov    %rax,%rdi
  4171a6:	e8 fd 36 ff ff       	call   40a8a8 <_ZSt3minImERKT_S2_S2_>
  4171ab:	48 8b 00             	mov    (%rax),%rax
  4171ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	traits_type::copy(__str, data() + __pos, __rlen);
  4171b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4171b6:	48 89 c7             	mov    %rax,%rdi
  4171b9:	e8 1c 03 ff ff       	call   4074da <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
  4171be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4171c2:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  4171c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4171ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4171ce:	48 89 ce             	mov    %rcx,%rsi
  4171d1:	48 89 c7             	mov    %rax,%rdi
  4171d4:	e8 7d d7 fe ff       	call   404956 <_ZNSt11char_traitsIcE4copyEPcPKcm>
	return __rlen;
  4171d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  4171dd:	c9                   	leave
  4171de:	c3                   	ret
  4171df:	90                   	nop

00000000004171e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>:
      assign(const basic_string& __str)
  4171e0:	55                   	push   %rbp
  4171e1:	48 89 e5             	mov    %rsp,%rbp
  4171e4:	53                   	push   %rbx
  4171e5:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  4171ec:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  4171f3:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    { return _Base_type::propagate_on_container_copy_assignment::value; }
  4171fa:	b8 00 00 00 00       	mov    $0x0,%eax
	if (_Alloc_traits::_S_propagate_on_copy_assign())
  4171ff:	84 c0                	test   %al,%al
  417201:	0f 84 03 02 00 00    	je     41740a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x22a>
    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }
  417207:	b8 01 00 00 00       	mov    $0x1,%eax
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  41720c:	83 f0 01             	xor    $0x1,%eax
		&& _M_get_allocator() != __str._M_get_allocator())
  41720f:	84 c0                	test   %al,%al
  417211:	74 52                	je     417265 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  417213:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41721a:	48 89 c7             	mov    %rax,%rdi
  41721d:	e8 2e 06 ff ff       	call   407850 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
  417222:	83 f0 01             	xor    $0x1,%eax
  417225:	84 c0                	test   %al,%al
  417227:	74 3c                	je     417265 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
		&& _M_get_allocator() != __str._M_get_allocator())
  417229:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  417230:	48 89 c7             	mov    %rax,%rdi
  417233:	e8 20 4e ff ff       	call   40c058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  417238:	48 89 c3             	mov    %rax,%rbx
  41723b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417242:	48 89 c7             	mov    %rax,%rdi
  417245:	e8 f8 05 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41724a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  41724e:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
#endif // C++20

      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
      bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }
  417252:	b8 01 00 00 00       	mov    $0x1,%eax
  417257:	83 f0 01             	xor    $0x1,%eax
  41725a:	84 c0                	test   %al,%al
  41725c:	74 07                	je     417265 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x85>
  41725e:	b8 01 00 00 00       	mov    $0x1,%eax
  417263:	eb 05                	jmp    41726a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x8a>
  417265:	b8 00 00 00 00       	mov    $0x0,%eax
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  41726a:	84 c0                	test   %al,%al
  41726c:	0f 84 6e 01 00 00    	je     4173e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x200>
		if (__str.size() <= _S_local_capacity)
  417272:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  417279:	48 89 c7             	mov    %rax,%rdi
  41727c:	e8 0f db fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417281:	48 83 f8 0f          	cmp    $0xf,%rax
  417285:	0f 96 c0             	setbe  %al
  417288:	84 c0                	test   %al,%al
  41728a:	0f 84 9d 00 00 00    	je     41732d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x14d>
		    _M_destroy(_M_allocated_capacity);
  417290:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417297:	48 8b 50 10          	mov    0x10(%rax),%rdx
  41729b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4172a2:	48 89 d6             	mov    %rdx,%rsi
  4172a5:	48 89 c7             	mov    %rax,%rdi
  4172a8:	e8 75 40 ff ff       	call   40b322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
  4172ad:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4172b4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4172b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4172bc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (std::is_constant_evaluated())
  4172c0:	e8 b7 d3 fe ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  4172c5:	84 c0                	test   %al,%al
  4172c7:	74 28                	je     4172f1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x111>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4172c9:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  4172d0:	00
  4172d1:	eb 17                	jmp    4172ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x10a>
	    _M_local_buf[__i] = _CharT();
  4172d3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4172d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4172db:	48 01 d0             	add    %rdx,%rax
  4172de:	48 83 c0 10          	add    $0x10,%rax
  4172e2:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  4172e5:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
  4172ea:	48 83 7d b8 0f       	cmpq   $0xf,-0x48(%rbp)
  4172ef:	76 e2                	jbe    4172d3 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0xf3>
      }
  4172f1:	90                   	nop
	return _M_local_data();
  4172f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4172f6:	48 89 c7             	mov    %rax,%rdi
  4172f9:	e8 5a d7 fe ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  4172fe:	48 89 c2             	mov    %rax,%rdx
  417301:	90                   	nop
		    _M_data(_M_use_local_data());
  417302:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417309:	48 89 d6             	mov    %rdx,%rsi
  41730c:	48 89 c7             	mov    %rax,%rdi
  41730f:	e8 c4 24 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_set_length(0);
  417314:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41731b:	be 00 00 00 00       	mov    $0x0,%esi
  417320:	48 89 c7             	mov    %rax,%rdi
  417323:	e8 00 02 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417328:	e9 b3 00 00 00       	jmp    4173e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x200>
		    const auto __len = __str.size();
  41732d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  417334:	48 89 c7             	mov    %rax,%rdi
  417337:	e8 54 da fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41733c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    auto __alloc = __str._M_get_allocator();
  417340:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  417347:	48 89 c7             	mov    %rax,%rdi
  41734a:	e8 09 4d ff ff       	call   40c058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  41734f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  417353:	48 8d 45 8f          	lea    -0x71(%rbp),%rax
  417357:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  41735b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  41735f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  417363:	90                   	nop
      : __allocator_base<_Tp>(__a) { }
  417364:	90                   	nop
		    auto __ptr = _S_allocate(__alloc, __len + 1);
  417365:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417369:	48 8d 50 01          	lea    0x1(%rax),%rdx
  41736d:	48 8d 45 8f          	lea    -0x71(%rbp),%rax
  417371:	48 89 d6             	mov    %rdx,%rsi
  417374:	48 89 c7             	mov    %rax,%rdi
  417377:	e8 16 4d ff ff       	call   40c092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_m>
  41737c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    _M_destroy(_M_allocated_capacity);
  417380:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417387:	48 8b 50 10          	mov    0x10(%rax),%rdx
  41738b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417392:	48 89 d6             	mov    %rdx,%rsi
  417395:	48 89 c7             	mov    %rax,%rdi
  417398:	e8 85 3f ff ff       	call   40b322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
		    _M_data(__ptr);
  41739d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4173a1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4173a8:	48 89 d6             	mov    %rdx,%rsi
  4173ab:	48 89 c7             	mov    %rax,%rdi
  4173ae:	e8 25 24 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_capacity(__len);
  4173b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4173b7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4173be:	48 89 d6             	mov    %rdx,%rsi
  4173c1:	48 89 c7             	mov    %rax,%rdi
  4173c4:	e8 29 24 ff ff       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
		    _M_set_length(__len);
  4173c9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4173cd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4173d4:	48 89 d6             	mov    %rdx,%rsi
  4173d7:	48 89 c7             	mov    %rax,%rdi
  4173da:	e8 49 01 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      ~allocator() _GLIBCXX_NOTHROW { }
  4173df:	90                   	nop
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
  4173e0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4173e7:	48 89 c7             	mov    %rax,%rdi
  4173ea:	e8 69 4c ff ff       	call   40c058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  4173ef:	48 89 c3             	mov    %rax,%rbx
  4173f2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4173f9:	48 89 c7             	mov    %rax,%rdi
  4173fc:	e8 41 04 ff ff       	call   407842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
  417401:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  417405:	48 89 5d 90          	mov    %rbx,-0x70(%rbp)
    }
  417409:	90                   	nop
	this->_M_assign(__str);
  41740a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  417411:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  417418:	48 89 d6             	mov    %rdx,%rsi
  41741b:	48 89 c7             	mov    %rax,%rdi
  41741e:	e8 49 1a 00 00       	call   418e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	return *this;
  417423:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  41742a:	eb 09                	jmp    417435 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x255>
  41742c:	90                   	nop
  41742d:	48 89 c7             	mov    %rax,%rdi
  417430:	e8 db cf fe ff       	call   404410 <_Unwind_Resume@plt>
      }
  417435:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417439:	c9                   	leave
  41743a:	c3                   	ret
  41743b:	90                   	nop

000000000041743c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
  41743c:	55                   	push   %rbp
  41743d:	48 89 e5             	mov    %rsp,%rbp
  417440:	48 83 ec 10          	sub    $0x10,%rsp
  417444:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_set_length(0); }
  417448:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41744c:	be 00 00 00 00       	mov    $0x0,%esi
  417451:	48 89 c7             	mov    %rax,%rdi
  417454:	e8 cf 00 ff ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417459:	90                   	nop
  41745a:	c9                   	leave
  41745b:	c3                   	ret

000000000041745c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
      assign(const _CharT* __s)
  41745c:	55                   	push   %rbp
  41745d:	48 89 e5             	mov    %rsp,%rbp
  417460:	53                   	push   %rbx
  417461:	48 83 ec 18          	sub    $0x18,%rsp
  417465:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417469:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	return _M_replace(size_type(0), this->size(), __s,
  41746d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417471:	48 89 c7             	mov    %rax,%rdi
  417474:	e8 eb d3 fe ff       	call   404864 <_ZNSt11char_traitsIcE6lengthEPKc>
  417479:	48 89 c3             	mov    %rax,%rbx
  41747c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417480:	48 89 c7             	mov    %rax,%rdi
  417483:	e8 08 d9 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417488:	48 89 c6             	mov    %rax,%rsi
  41748b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41748f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417493:	49 89 d8             	mov    %rbx,%r8
  417496:	48 89 d1             	mov    %rdx,%rcx
  417499:	48 89 f2             	mov    %rsi,%rdx
  41749c:	be 00 00 00 00       	mov    $0x0,%esi
  4174a1:	48 89 c7             	mov    %rax,%rdi
  4174a4:	e8 7b 50 ff ff       	call   40c524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
  4174a9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4174ad:	c9                   	leave
  4174ae:	c3                   	ret

00000000004174af <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_>:
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
  4174af:	55                   	push   %rbp
  4174b0:	48 89 e5             	mov    %rsp,%rbp
  4174b3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4174b7:	89 f0                	mov    %esi,%eax
  4174b9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4174bd:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4174c1:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  4174c5:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
  4174c9:	88 45 d4             	mov    %al,-0x2c(%rbp)
		   const char* __gbeg, size_t __gsize,
		   const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
  4174cc:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4174d3:	00
      size_t __ctr = 0;
  4174d4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  4174db:	00

      while (__last - __first > __gbeg[__idx]
  4174dc:	eb 33                	jmp    417511 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x62>
	     && static_cast<signed char>(__gbeg[__idx]) > 0
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
	{
	  __last -= __gbeg[__idx];
  4174de:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4174e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4174e6:	48 01 d0             	add    %rdx,%rax
  4174e9:	0f b6 00             	movzbl (%rax),%eax
  4174ec:	48 0f be c0          	movsbq %al,%rax
  4174f0:	48 f7 d8             	neg    %rax
  4174f3:	48 01 45 b0          	add    %rax,-0x50(%rbp)
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
  4174f7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4174fb:	48 83 e8 01          	sub    $0x1,%rax
  4174ff:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  417503:	73 07                	jae    41750c <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x5d>
  417505:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  41750a:	eb 05                	jmp    417511 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x62>
  41750c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
      while (__last - __first > __gbeg[__idx]
  417511:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  417515:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  417519:	48 89 c2             	mov    %rax,%rdx
  41751c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  417520:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417524:	48 01 c8             	add    %rcx,%rax
  417527:	0f b6 00             	movzbl (%rax),%eax
  41752a:	48 0f be c0          	movsbq %al,%rax
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
  41752e:	48 39 c2             	cmp    %rax,%rdx
  417531:	7e 43                	jle    417576 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	     && static_cast<signed char>(__gbeg[__idx]) > 0
  417533:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41753b:	48 01 d0             	add    %rdx,%rax
  41753e:	0f b6 00             	movzbl (%rax),%eax
  417541:	84 c0                	test   %al,%al
  417543:	7e 31                	jle    417576 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
  417545:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417549:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41754d:	48 01 d0             	add    %rdx,%rax
  417550:	0f b6 00             	movzbl (%rax),%eax
  417553:	3c 7f                	cmp    $0x7f,%al
  417555:	75 87                	jne    4174de <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x2f>
	}

      while (__first != __last)
  417557:	eb 1d                	jmp    417576 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xc7>
	*__s++ = *__first++;
  417559:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41755d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  417561:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  417565:	0f b6 10             	movzbl (%rax),%edx
  417568:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41756c:	48 8d 48 01          	lea    0x1(%rax),%rcx
  417570:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  417574:	88 10                	mov    %dl,(%rax)
      while (__first != __last)
  417576:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41757a:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  41757e:	75 d9                	jne    417559 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xaa>

      while (__ctr--)
  417580:	eb 52                	jmp    4175d4 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x125>
	{
	  *__s++ = __sep;
  417582:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  417586:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41758a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  41758e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  417592:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  417594:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417598:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41759c:	48 01 d0             	add    %rdx,%rax
  41759f:	0f b6 00             	movzbl (%rax),%eax
  4175a2:	88 45 ef             	mov    %al,-0x11(%rbp)
  4175a5:	eb 27                	jmp    4175ce <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x11f>
	    *__s++ = *__first++;
  4175a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4175ab:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4175af:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4175b3:	0f b6 10             	movzbl (%rax),%edx
  4175b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4175ba:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4175be:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  4175c2:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  4175c4:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  4175c8:	83 e8 01             	sub    $0x1,%eax
  4175cb:	88 45 ef             	mov    %al,-0x11(%rbp)
  4175ce:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  4175d2:	7f d3                	jg     4175a7 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xf8>
      while (__ctr--)
  4175d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4175d8:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4175dc:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  4175e0:	48 85 c0             	test   %rax,%rax
  4175e3:	0f 95 c0             	setne  %al
  4175e6:	84 c0                	test   %al,%al
  4175e8:	75 98                	jne    417582 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0xd3>
	}

      while (__idx--)
  4175ea:	eb 52                	jmp    41763e <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x18f>
	{
	  *__s++ = __sep;
  4175ec:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  4175f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4175f4:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4175f8:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  4175fc:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  4175fe:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  417602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417606:	48 01 d0             	add    %rdx,%rax
  417609:	0f b6 00             	movzbl (%rax),%eax
  41760c:	88 45 ee             	mov    %al,-0x12(%rbp)
  41760f:	eb 27                	jmp    417638 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x189>
	    *__s++ = *__first++;
  417611:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417615:	48 8d 50 01          	lea    0x1(%rax),%rdx
  417619:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  41761d:	0f b6 10             	movzbl (%rax),%edx
  417620:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417624:	48 8d 48 01          	lea    0x1(%rax),%rcx
  417628:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  41762c:	88 10                	mov    %dl,(%rax)
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
  41762e:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  417632:	83 e8 01             	sub    $0x1,%eax
  417635:	88 45 ee             	mov    %al,-0x12(%rbp)
  417638:	80 7d ee 00          	cmpb   $0x0,-0x12(%rbp)
  41763c:	7f d3                	jg     417611 <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x162>
      while (__idx--)
  41763e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417642:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  417646:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  41764a:	48 85 c0             	test   %rax,%rax
  41764d:	0f 95 c0             	setne  %al
  417650:	84 c0                	test   %al,%al
  417652:	75 98                	jne    4175ec <_ZSt14__add_groupingIcEPT_S1_S0_PKcmPKS0_S5_+0x13d>
	}

      return __s;
  417654:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
  417658:	5d                   	pop    %rbp
  417659:	c3                   	ret

000000000041765a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
  41765a:	55                   	push   %rbp
  41765b:	48 89 e5             	mov    %rsp,%rbp
  41765e:	48 83 ec 30          	sub    $0x30,%rsp
  417662:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417666:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  41766a:	89 d0                	mov    %edx,%eax
  41766c:	88 45 dc             	mov    %al,-0x24(%rbp)
	  switch (__type)
  41766f:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  417673:	89 c0                	mov    %eax,%eax
  417675:	48 8b 04 c5 48 e5 41 	mov    0x41e548(,%rax,8),%rax
  41767c:	00
  41767d:	ff e0                	jmp    *%rax
	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
  41767f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417683:	48 89 c7             	mov    %rax,%rdi
  417686:	e8 74 0d 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41768b:	48 89 c2             	mov    %rax,%rdx
  41768e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417692:	48 89 c6             	mov    %rax,%rsi
  417695:	48 89 d7             	mov    %rdx,%rdi
  417698:	e8 71 0d 00 00       	call   41840e <_ZNKSt8__format17_WidthPrecVisitorclISt9monostateEEmRT_>
  41769d:	e9 2b 02 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
  4176a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4176a6:	48 89 c7             	mov    %rax,%rdi
  4176a9:	e8 51 0d 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4176ae:	48 89 c2             	mov    %rax,%rdx
  4176b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4176b5:	48 89 c6             	mov    %rax,%rsi
  4176b8:	48 89 d7             	mov    %rdx,%rdi
  4176bb:	e8 64 0d 00 00       	call   418424 <_ZNKSt8__format17_WidthPrecVisitorclIbEEmRT_>
  4176c0:	e9 08 02 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
  4176c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4176c9:	48 89 c7             	mov    %rax,%rdi
  4176cc:	e8 2e 0d 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4176d1:	48 89 c2             	mov    %rax,%rdx
  4176d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4176d8:	48 89 c6             	mov    %rax,%rsi
  4176db:	48 89 d7             	mov    %rdx,%rdi
  4176de:	e8 85 18 00 00       	call   418f68 <_ZNKSt8__format17_WidthPrecVisitorclIcEEmRT_>
  4176e3:	e9 e5 01 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
  4176e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4176ec:	48 89 c7             	mov    %rax,%rdi
  4176ef:	e8 0b 0d 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4176f4:	48 89 c2             	mov    %rax,%rdx
  4176f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4176fb:	48 89 c6             	mov    %rax,%rsi
  4176fe:	48 89 d7             	mov    %rdx,%rdi
  417701:	e8 38 0d 00 00       	call   41843e <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_>
  417706:	e9 c2 01 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
  41770b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41770f:	48 89 c7             	mov    %rax,%rdi
  417712:	e8 e8 0c 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  417717:	48 89 c2             	mov    %rax,%rdx
  41771a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41771e:	48 89 c6             	mov    %rax,%rsi
  417721:	48 89 d7             	mov    %rdx,%rdi
  417724:	e8 45 0d 00 00       	call   41846e <_ZNKSt8__format17_WidthPrecVisitorclIjEEmRT_>
  417729:	e9 9f 01 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
  41772e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417732:	48 89 c7             	mov    %rax,%rdi
  417735:	e8 c5 0c 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41773a:	48 89 c2             	mov    %rax,%rdx
  41773d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417741:	48 89 c6             	mov    %rax,%rsi
  417744:	48 89 d7             	mov    %rdx,%rdi
  417747:	e8 38 0d 00 00       	call   418484 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_>
  41774c:	e9 7c 01 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
  417751:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417755:	48 89 c7             	mov    %rax,%rdi
  417758:	e8 a2 0c 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41775d:	48 89 c2             	mov    %rax,%rdx
  417760:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417764:	48 89 c6             	mov    %rax,%rsi
  417767:	48 89 d7             	mov    %rdx,%rdi
  41776a:	e8 47 0d 00 00       	call   4184b6 <_ZNKSt8__format17_WidthPrecVisitorclIyEEmRT_>
  41776f:	e9 59 01 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
  417774:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417778:	48 89 c7             	mov    %rax,%rdi
  41777b:	e8 7f 0c 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  417780:	48 89 c2             	mov    %rax,%rdx
  417783:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417787:	48 89 c6             	mov    %rax,%rsi
  41778a:	48 89 d7             	mov    %rdx,%rdi
  41778d:	e8 3a 0d 00 00       	call   4184cc <_ZNKSt8__format17_WidthPrecVisitorclIfEEmRT_>
  417792:	e9 36 01 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
  417797:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41779b:	48 89 c7             	mov    %rax,%rdi
  41779e:	e8 5c 0c 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4177a3:	48 89 c2             	mov    %rax,%rdx
  4177a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4177aa:	48 89 c6             	mov    %rax,%rsi
  4177ad:	48 89 d7             	mov    %rdx,%rdi
  4177b0:	e8 31 0d 00 00       	call   4184e6 <_ZNKSt8__format17_WidthPrecVisitorclIdEEmRT_>
  4177b5:	e9 13 01 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
  4177ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4177be:	48 89 c7             	mov    %rax,%rdi
  4177c1:	e8 39 0c 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4177c6:	48 89 c2             	mov    %rax,%rdx
  4177c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4177cd:	48 89 c6             	mov    %rax,%rsi
  4177d0:	48 89 d7             	mov    %rdx,%rdi
  4177d3:	e8 28 0d 00 00       	call   418500 <_ZNKSt8__format17_WidthPrecVisitorclIeEEmRT_>
  4177d8:	e9 f0 00 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
  4177dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4177e1:	48 89 c7             	mov    %rax,%rdi
  4177e4:	e8 16 0c 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4177e9:	48 89 c2             	mov    %rax,%rdx
  4177ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4177f0:	48 89 c6             	mov    %rax,%rsi
  4177f3:	48 89 d7             	mov    %rdx,%rdi
  4177f6:	e8 87 17 00 00       	call   418f82 <_ZNKSt8__format17_WidthPrecVisitorclIPKcEEmRT_>
  4177fb:	e9 cd 00 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
  417800:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417804:	48 89 c7             	mov    %rax,%rdi
  417807:	e8 f3 0b 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41780c:	48 89 c2             	mov    %rax,%rdx
  41780f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417813:	48 89 c6             	mov    %rax,%rsi
  417816:	48 89 d7             	mov    %rdx,%rdi
  417819:	e8 7e 17 00 00       	call   418f9c <_ZNKSt8__format17_WidthPrecVisitorclISt17basic_string_viewIcSt11char_traitsIcEEEEmRT_>
  41781e:	e9 aa 00 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
  417823:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417827:	48 89 c7             	mov    %rax,%rdi
  41782a:	e8 d0 0b 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41782f:	48 89 c2             	mov    %rax,%rdx
  417832:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417836:	48 89 c6             	mov    %rax,%rsi
  417839:	48 89 d7             	mov    %rdx,%rdi
  41783c:	e8 d9 0c 00 00       	call   41851a <_ZNKSt8__format17_WidthPrecVisitorclIPKvEEmRT_>
  417841:	e9 87 00 00 00       	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      auto& __h = static_cast<handle&>(_M_val._M_handle);
  417846:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41784a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      return std::forward<_Visitor>(__vis)(__h);
  41784e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417852:	48 89 c7             	mov    %rax,%rdi
  417855:	e8 a5 0b 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41785a:	48 89 c2             	mov    %rax,%rdx
  41785d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417861:	48 89 c6             	mov    %rax,%rsi
  417864:	48 89 d7             	mov    %rdx,%rdi
  417867:	e8 4a 17 00 00       	call   418fb6 <_ZNKSt8__format17_WidthPrecVisitorclINSt16basic_format_argISt20basic_format_contextINS_10_Sink_iterIcEEcEE6handleEEEmRT_>
  41786c:	eb 5f                	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
  41786e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417872:	48 89 c7             	mov    %rax,%rdi
  417875:	e8 85 0b 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41787a:	48 89 c2             	mov    %rax,%rdx
  41787d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417881:	48 89 c6             	mov    %rax,%rsi
  417884:	48 89 d7             	mov    %rdx,%rdi
  417887:	e8 a8 0c 00 00       	call   418534 <_ZNKSt8__format17_WidthPrecVisitorclInEEmRT_>
  41788c:	eb 3f                	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
  41788e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417892:	48 89 c7             	mov    %rax,%rdi
  417895:	e8 65 0b 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  41789a:	48 89 c2             	mov    %rax,%rdx
  41789d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4178a1:	48 89 c6             	mov    %rax,%rsi
  4178a4:	48 89 d7             	mov    %rdx,%rdi
  4178a7:	e8 a2 0c 00 00       	call   41854e <_ZNKSt8__format17_WidthPrecVisitorclIoEEmRT_>
  4178ac:	eb 1f                	jmp    4178cd <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE+0x273>
	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
  4178ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4178b2:	48 89 c7             	mov    %rax,%rdi
  4178b5:	e8 45 0b 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4178ba:	48 89 c2             	mov    %rax,%rdx
  4178bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4178c1:	48 89 c6             	mov    %rax,%rsi
  4178c4:	48 89 d7             	mov    %rdx,%rdi
  4178c7:	e8 9c 0c 00 00       	call   418568 <_ZNKSt8__format17_WidthPrecVisitorclIDF128_EEmRT_>
  4178cc:	90                   	nop
	}
  4178cd:	c9                   	leave
  4178ce:	c3                   	ret

00000000004178cf <_ZSt16visit_format_argINSt8__format17_WidthPrecVisitorESt20basic_format_contextINS0_10_Sink_iterIcEEcEEDcOT_St16basic_format_argIT0_E>:
    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
  4178cf:	55                   	push   %rbp
  4178d0:	48 89 e5             	mov    %rsp,%rbp
  4178d3:	53                   	push   %rbx
  4178d4:	48 83 ec 18          	sub    $0x18,%rsp
  4178d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
  4178dc:	0f b6 45 20          	movzbl 0x20(%rbp),%eax
  4178e0:	0f b6 d8             	movzbl %al,%ebx
  4178e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4178e7:	48 89 c7             	mov    %rax,%rdi
  4178ea:	e8 10 0b 00 00       	call   4183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>
  4178ef:	89 da                	mov    %ebx,%edx
  4178f1:	48 89 c6             	mov    %rax,%rsi
  4178f4:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4178f8:	e8 5d fd ff ff       	call   41765a <_ZNSt16basic_format_argISt20basic_format_contextINSt8__format10_Sink_iterIcEEcEE8_M_visitINS1_17_WidthPrecVisitorEEEDcOT_NS1_6_Arg_tE>
    }
  4178fd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417901:	c9                   	leave
  417902:	c3                   	ret

0000000000417903 <_ZNSt8__format14__int_from_argISt20basic_format_contextINS_10_Sink_iterIcEEcEEEmRKSt16basic_format_argIT_E>:
    __int_from_arg(const basic_format_arg<_Context>& __arg)
  417903:	55                   	push   %rbp
  417904:	48 89 e5             	mov    %rsp,%rbp
  417907:	48 83 ec 20          	sub    $0x20,%rsp
  41790b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return std::visit_format_arg(_WidthPrecVisitor(), __arg); }
  41790f:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
  417913:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  417917:	48 83 ec 20          	sub    $0x20,%rsp
  41791b:	48 89 e6             	mov    %rsp,%rsi
  41791e:	48 8b 01             	mov    (%rcx),%rax
  417921:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  417925:	48 89 06             	mov    %rax,(%rsi)
  417928:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  41792c:	48 8b 41 10          	mov    0x10(%rcx),%rax
  417930:	48 8b 51 18          	mov    0x18(%rcx),%rdx
  417934:	48 89 46 10          	mov    %rax,0x10(%rsi)
  417938:	48 89 56 18          	mov    %rdx,0x18(%rsi)
  41793c:	e8 8e ff ff ff       	call   4178cf <_ZSt16visit_format_argINSt8__format17_WidthPrecVisitorESt20basic_format_contextINS0_10_Sink_iterIcEEcEEDcOT_St16basic_format_argIT0_E>
  417941:	48 83 c4 20          	add    $0x20,%rsp
  417945:	c9                   	leave
  417946:	c3                   	ret
  417947:	90                   	nop

0000000000417948 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  417948:	55                   	push   %rbp
  417949:	48 89 e5             	mov    %rsp,%rbp
  41794c:	48 83 ec 10          	sub    $0x10,%rsp
  417950:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417958:	48 8b 00             	mov    (%rax),%rax
  41795b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41795f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417963:	48 89 d6             	mov    %rdx,%rsi
  417966:	48 89 c7             	mov    %rax,%rdi
  417969:	e8 ba fb fe ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  41796e:	90                   	nop
  41796f:	c9                   	leave
  417970:	c3                   	ret
  417971:	90                   	nop

0000000000417972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417972:	55                   	push   %rbp
  417973:	48 89 e5             	mov    %rsp,%rbp
  417976:	53                   	push   %rbx
  417977:	48 83 ec 48          	sub    $0x48,%rsp
  41797b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  41797f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417983:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417987:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41798b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41798f:	48 89 d6             	mov    %rdx,%rsi
  417992:	48 89 c7             	mov    %rax,%rdi
  417995:	e8 4a 3a ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  41799a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41799e:	48 89 c7             	mov    %rax,%rdi
  4179a1:	e8 70 fb fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4179a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4179aa:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  4179af:	84 c0                	test   %al,%al
  4179b1:	74 19                	je     4179cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  4179b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4179b7:	48 89 c7             	mov    %rax,%rdi
  4179ba:	e8 d1 d3 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4179bf:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  4179c3:	73 07                	jae    4179cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  4179c5:	b8 01 00 00 00       	mov    $0x1,%eax
  4179ca:	eb 05                	jmp    4179d1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  4179cc:	b8 00 00 00 00       	mov    $0x0,%eax
  4179d1:	84 c0                	test   %al,%al
  4179d3:	74 39                	je     417a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  4179d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4179d9:	48 89 c7             	mov    %rax,%rdi
  4179dc:	e8 af d3 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4179e1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4179e5:	48 89 d3             	mov    %rdx,%rbx
  4179e8:	48 29 c3             	sub    %rax,%rbx
  4179eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4179ef:	48 89 c7             	mov    %rax,%rdi
  4179f2:	e8 99 d3 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4179f7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4179fb:	48 01 d0             	add    %rdx,%rax
  4179fe:	ba 00 00 00 00       	mov    $0x0,%edx
  417a03:	48 89 de             	mov    %rbx,%rsi
  417a06:	48 89 c7             	mov    %rax,%rdi
  417a09:	e8 ab cf fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  417a0e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  417a12:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  417a16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417a1a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  417a1e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417a22:	48 89 c7             	mov    %rax,%rdi
  417a25:	e8 a6 15 00 00       	call   418fd0 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIfNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  417a2a:	48 89 c1             	mov    %rax,%rcx
  417a2d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417a31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417a35:	48 89 c6             	mov    %rax,%rsi
  417a38:	48 89 cf             	mov    %rcx,%rdi
  417a3b:	e8 ee 91 ff ff       	call   410c2e <_ZZNKSt8__format14__formatter_fpIcE6formatIfNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417a40:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417a44:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417a48:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  417a4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417a50:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417a54:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  417a58:	48 89 c7             	mov    %rax,%rdi
  417a5b:	e8 e8 fe ff ff       	call   417948 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIfNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417a60:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417a64:	c9                   	leave
  417a65:	c3                   	ret

0000000000417a66 <_ZNSt8__format5_SinkIcE8_M_writeEc>:
      _M_write(_CharT __c)
  417a66:	55                   	push   %rbp
  417a67:	48 89 e5             	mov    %rsp,%rbp
  417a6a:	53                   	push   %rbx
  417a6b:	48 83 ec 38          	sub    $0x38,%rsp
  417a6f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417a73:	89 f0                	mov    %esi,%eax
  417a75:	88 45 c4             	mov    %al,-0x3c(%rbp)
	*_M_next++ = __c;
  417a78:	0f b6 5d c4          	movzbl -0x3c(%rbp),%ebx
  417a7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417a80:	48 83 c0 18          	add    $0x18,%rax
  417a84:	be 00 00 00 00       	mov    $0x0,%esi
  417a89:	48 89 c7             	mov    %rax,%rdi
  417a8c:	e8 87 16 00 00       	call   419118 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEppEi>
  417a91:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  417a95:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  417a99:	48 89 c7             	mov    %rax,%rdi
  417a9c:	e8 b5 16 00 00       	call   419156 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEdeEv>
  417aa1:	88 18                	mov    %bl,(%rax)
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
  417aa3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417aa7:	48 83 c0 08          	add    $0x8,%rax
  417aab:	48 89 c7             	mov    %rax,%rdi
  417aae:	e8 75 3f ff ff       	call   40ba28 <_ZNKSt4spanIcLm18446744073709551615EE5beginEv>
  417ab3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  417ab7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417abb:	48 8d 50 18          	lea    0x18(%rax),%rdx
  417abf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  417ac3:	48 89 c6             	mov    %rax,%rsi
  417ac6:	48 89 d7             	mov    %rdx,%rdi
  417ac9:	e8 7f 3f ff ff       	call   40ba4d <_ZN9__gnu_cxxmiIPcSt4spanIcLm18446744073709551615EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS7_SA_>
  417ace:	48 89 c3             	mov    %rax,%rbx
  417ad1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417ad5:	48 83 c0 08          	add    $0x8,%rax
  417ad9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ssize(const _Container& __cont)
    noexcept(noexcept(__cont.size()))
    -> common_type_t<ptrdiff_t, make_signed_t<decltype(__cont.size())>>
    {
      using type = make_signed_t<decltype(__cont.size())>;
      return static_cast<common_type_t<ptrdiff_t, type>>(__cont.size());
  417add:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417ae1:	48 89 c7             	mov    %rax,%rdi
  417ae4:	e8 4b da fe ff       	call   405534 <_ZNKSt4spanIcLm18446744073709551615EE4sizeEv>
  417ae9:	48 39 c3             	cmp    %rax,%rbx
  417aec:	0f 94 c0             	sete   %al
  417aef:	84 c0                	test   %al,%al
  417af1:	74 13                	je     417b06 <_ZNSt8__format5_SinkIcE8_M_writeEc+0xa0>
	  _M_overflow();
  417af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417af7:	48 8b 00             	mov    (%rax),%rax
  417afa:	48 8b 10             	mov    (%rax),%rdx
  417afd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417b01:	48 89 c7             	mov    %rax,%rdi
  417b04:	ff d2                	call   *%rdx
      }
  417b06:	90                   	nop
  417b07:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417b0b:	c9                   	leave
  417b0c:	c3                   	ret

0000000000417b0d <_ZNSt9__unicode21__is_single_code_unitIcEEbDi>:
    __is_single_code_unit(char32_t __c)
  417b0d:	55                   	push   %rbp
  417b0e:	48 89 e5             	mov    %rsp,%rbp
  417b11:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return __c < 0x7F; // ASCII character
  417b14:	83 7d fc 7e          	cmpl   $0x7e,-0x4(%rbp)
  417b18:	0f 96 c0             	setbe  %al
    }
  417b1b:	5d                   	pop    %rbp
  417b1c:	c3                   	ret
  417b1d:	90                   	nop

0000000000417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>:
      _M_curr() { return _M_first_and_curr._M_curr; }
  417b1e:	55                   	push   %rbp
  417b1f:	48 89 e5             	mov    %rsp,%rbp
  417b22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b2a:	48 83 c0 10          	add    $0x10,%rax
  417b2e:	5d                   	pop    %rbp
  417b2f:	c3                   	ret

0000000000417b30 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_>:
      _Utf_iterator(_Iter __first, _Iter __it, _Sent __last)
  417b30:	55                   	push   %rbp
  417b31:	48 89 e5             	mov    %rsp,%rbp
  417b34:	48 83 ec 20          	sub    $0x20,%rsp
  417b38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417b3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  417b40:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  417b44:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      : _M_first_and_curr{__first, __it}, _M_last(__last)
  417b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b4c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  417b50:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417b54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417b58:	48 89 c6             	mov    %rax,%rsi
  417b5b:	48 89 cf             	mov    %rcx,%rdi
  417b5e:	e8 05 16 00 00       	call   419168 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>
  417b63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b67:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  417b6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b6f:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  417b73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b77:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
  417b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b7f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  417b83:	48 89 50 20          	mov    %rdx,0x20(%rax)
	if (_M_curr() != _M_last)
  417b87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b8b:	48 89 c7             	mov    %rax,%rdi
  417b8e:	e8 8b ff ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  417b93:	48 8b 10             	mov    (%rax),%rdx
  417b96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417b9a:	48 8b 40 20          	mov    0x20(%rax),%rax
  417b9e:	48 39 c2             	cmp    %rax,%rdx
  417ba1:	0f 95 c0             	setne  %al
  417ba4:	84 c0                	test   %al,%al
  417ba6:	74 0e                	je     417bb6 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_+0x86>
	  _M_read();
  417ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417bac:	48 89 c7             	mov    %rax,%rdi
  417baf:	e8 de 15 00 00       	call   419192 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>
      }
  417bb4:	eb 0a                	jmp    417bc0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEC1ES2_S2_S2_+0x90>
	  _M_buf = {};
  417bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417bba:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      }
  417bc0:	90                   	nop
  417bc1:	c9                   	leave
  417bc2:	c3                   	ret
  417bc3:	90                   	nop

0000000000417bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
  417bc4:	55                   	push   %rbp
  417bc5:	48 89 e5             	mov    %rsp,%rbp
  417bc8:	53                   	push   %rbx
  417bc9:	48 83 ec 18          	sub    $0x18,%rsp
  417bcd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  417bd1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
  417bd5:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  417bd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417bdd:	48 89 c7             	mov    %rax,%rdi
  417be0:	e8 73 ce fe ff       	call   404a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
  417be5:	48 89 c1             	mov    %rax,%rcx
  417be8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417bec:	48 89 c2             	mov    %rax,%rdx
  417bef:	48 89 ce             	mov    %rcx,%rsi
  417bf2:	48 89 df             	mov    %rbx,%rdi
  417bf5:	e8 5a ec fe ff       	call   406854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
  417bfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417bfe:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  417c05:	00
  417c06:	90                   	nop
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
  417c07:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417c0b:	48 83 ec 28          	sub    $0x28,%rsp
  417c0f:	48 89 e0             	mov    %rsp,%rax
  417c12:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  417c16:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  417c1a:	48 89 08             	mov    %rcx,(%rax)
  417c1d:	48 89 58 08          	mov    %rbx,0x8(%rax)
  417c21:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  417c25:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  417c29:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417c2d:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417c31:	48 8b 4d 58          	mov    0x58(%rbp),%rcx
  417c35:	48 89 48 20          	mov    %rcx,0x20(%rax)
  417c39:	48 83 ec 28          	sub    $0x28,%rsp
  417c3d:	48 89 e0             	mov    %rsp,%rax
  417c40:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  417c44:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  417c48:	48 89 08             	mov    %rcx,(%rax)
  417c4b:	48 89 58 08          	mov    %rbx,0x8(%rax)
  417c4f:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  417c53:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  417c57:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417c5b:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417c5f:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  417c63:	48 89 48 20          	mov    %rcx,0x20(%rax)
  417c67:	48 89 d7             	mov    %rdx,%rdi
  417c6a:	e8 83 15 00 00       	call   4191f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag>
  417c6f:	48 83 c4 50          	add    $0x50,%rsp
	}
  417c73:	eb 1a                	jmp    417c8f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1INSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEvEET_SC_RKS3_+0xcb>
  417c75:	48 89 c3             	mov    %rax,%rbx
  417c78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417c7c:	48 89 c7             	mov    %rax,%rdi
  417c7f:	e8 8e ce fe ff       	call   404b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
  417c84:	48 89 d8             	mov    %rbx,%rax
  417c87:	48 89 c7             	mov    %rax,%rdi
  417c8a:	e8 81 c7 fe ff       	call   404410 <_Unwind_Resume@plt>
  417c8f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417c93:	c9                   	leave
  417c94:	c3                   	ret
  417c95:	90                   	nop

0000000000417c96 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  417c96:	55                   	push   %rbp
  417c97:	48 89 e5             	mov    %rsp,%rbp
  417c9a:	48 83 ec 10          	sub    $0x10,%rsp
  417c9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417ca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417ca6:	48 8b 00             	mov    (%rax),%rax
  417ca9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417cad:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417cb1:	48 89 d6             	mov    %rdx,%rsi
  417cb4:	48 89 c7             	mov    %rax,%rdi
  417cb7:	e8 6c f8 fe ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417cbc:	90                   	nop
  417cbd:	c9                   	leave
  417cbe:	c3                   	ret
  417cbf:	90                   	nop

0000000000417cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417cc0:	55                   	push   %rbp
  417cc1:	48 89 e5             	mov    %rsp,%rbp
  417cc4:	53                   	push   %rbx
  417cc5:	48 83 ec 48          	sub    $0x48,%rsp
  417cc9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417ccd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417cd1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417cd5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417cd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417cdd:	48 89 d6             	mov    %rdx,%rsi
  417ce0:	48 89 c7             	mov    %rax,%rdi
  417ce3:	e8 fc 36 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  417ce8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417cec:	48 89 c7             	mov    %rax,%rdi
  417cef:	e8 22 f8 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  417cf4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  417cf8:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  417cfd:	84 c0                	test   %al,%al
  417cff:	74 19                	je     417d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417d01:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417d05:	48 89 c7             	mov    %rax,%rdi
  417d08:	e8 83 d0 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417d0d:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  417d11:	73 07                	jae    417d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417d13:	b8 01 00 00 00       	mov    $0x1,%eax
  417d18:	eb 05                	jmp    417d1f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  417d1a:	b8 00 00 00 00       	mov    $0x0,%eax
  417d1f:	84 c0                	test   %al,%al
  417d21:	74 39                	je     417d5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  417d23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417d27:	48 89 c7             	mov    %rax,%rdi
  417d2a:	e8 61 d0 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417d2f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417d33:	48 89 d3             	mov    %rdx,%rbx
  417d36:	48 29 c3             	sub    %rax,%rbx
  417d39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417d3d:	48 89 c7             	mov    %rax,%rdi
  417d40:	e8 4b d0 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417d45:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417d49:	48 01 d0             	add    %rdx,%rax
  417d4c:	ba 00 00 00 00       	mov    $0x0,%edx
  417d51:	48 89 de             	mov    %rbx,%rsi
  417d54:	48 89 c7             	mov    %rax,%rdi
  417d57:	e8 5d cc fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  417d5c:	66 0f ef c0          	pxor   %xmm0,%xmm0
  417d60:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  417d64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417d68:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  417d6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417d70:	48 89 c7             	mov    %rax,%rdi
  417d73:	e8 1d 17 00 00       	call   419495 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIdNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  417d78:	48 89 c1             	mov    %rax,%rcx
  417d7b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417d7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417d83:	48 89 c6             	mov    %rax,%rsi
  417d86:	48 89 cf             	mov    %rcx,%rdi
  417d89:	e8 c8 9b ff ff       	call   411956 <_ZZNKSt8__format14__formatter_fpIcE6formatIdNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417d8e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417d92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417d96:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  417d9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417d9e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417da2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  417da6:	48 89 c7             	mov    %rax,%rdi
  417da9:	e8 e8 fe ff ff       	call   417c96 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIdNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417dae:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417db2:	c9                   	leave
  417db3:	c3                   	ret

0000000000417db4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  417db4:	55                   	push   %rbp
  417db5:	48 89 e5             	mov    %rsp,%rbp
  417db8:	48 83 ec 10          	sub    $0x10,%rsp
  417dbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417dc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417dc4:	48 8b 00             	mov    (%rax),%rax
  417dc7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  417dcb:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  417dcf:	48 89 d6             	mov    %rdx,%rsi
  417dd2:	48 89 c7             	mov    %rax,%rdi
  417dd5:	e8 4e f7 fe ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  417dda:	90                   	nop
  417ddb:	c9                   	leave
  417ddc:	c3                   	ret
  417ddd:	90                   	nop

0000000000417dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  417dde:	55                   	push   %rbp
  417ddf:	48 89 e5             	mov    %rsp,%rbp
  417de2:	53                   	push   %rbx
  417de3:	48 83 ec 48          	sub    $0x48,%rsp
  417de7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  417deb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  417def:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  417df3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417df7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417dfb:	48 89 d6             	mov    %rdx,%rsi
  417dfe:	48 89 c7             	mov    %rax,%rdi
  417e01:	e8 de 35 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  417e06:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417e0a:	48 89 c7             	mov    %rax,%rdi
  417e0d:	e8 04 f7 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  417e12:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  417e16:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  417e1b:	84 c0                	test   %al,%al
  417e1d:	74 19                	je     417e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417e1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417e23:	48 89 c7             	mov    %rax,%rdi
  417e26:	e8 65 cf fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417e2b:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  417e2f:	73 07                	jae    417e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  417e31:	b8 01 00 00 00       	mov    $0x1,%eax
  417e36:	eb 05                	jmp    417e3d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  417e38:	b8 00 00 00 00       	mov    $0x0,%eax
  417e3d:	84 c0                	test   %al,%al
  417e3f:	74 39                	je     417e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  417e41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417e45:	48 89 c7             	mov    %rax,%rdi
  417e48:	e8 43 cf fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417e4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417e51:	48 89 d3             	mov    %rdx,%rbx
  417e54:	48 29 c3             	sub    %rax,%rbx
  417e57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417e5b:	48 89 c7             	mov    %rax,%rdi
  417e5e:	e8 2d cf fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  417e63:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  417e67:	48 01 d0             	add    %rdx,%rax
  417e6a:	ba 00 00 00 00       	mov    $0x0,%edx
  417e6f:	48 89 de             	mov    %rbx,%rsi
  417e72:	48 89 c7             	mov    %rax,%rdi
  417e75:	e8 3f cb fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  417e7a:	66 0f ef c0          	pxor   %xmm0,%xmm0
  417e7e:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  417e82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  417e86:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  417e8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  417e8e:	48 89 c7             	mov    %rax,%rdi
  417e91:	e8 0d 16 00 00       	call   4194a3 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIeNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  417e96:	48 89 c1             	mov    %rax,%rcx
  417e99:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  417e9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  417ea1:	48 89 c6             	mov    %rax,%rsi
  417ea4:	48 89 cf             	mov    %rcx,%rdi
  417ea7:	e8 f0 a7 ff ff       	call   41269c <_ZZNKSt8__format14__formatter_fpIcE6formatIeNS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  417eac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  417eb0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  417eb4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  417eb8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  417ebc:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  417ec0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  417ec4:	48 89 c7             	mov    %rax,%rdi
  417ec7:	e8 e8 fe ff ff       	call   417db4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIeNS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  417ecc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  417ed0:	c9                   	leave
  417ed1:	c3                   	ret

0000000000417ed2 <_ZSt4moveIRSt17basic_string_viewIcSt11char_traitsIcEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
  417ed2:	55                   	push   %rbp
  417ed3:	48 89 e5             	mov    %rsp,%rbp
  417ed6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  417eda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417ede:	5d                   	pop    %rbp
  417edf:	c3                   	ret

0000000000417ee0 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEEC1EOS4_>:
      _Utf_view(_Range&& __r) : _M_base(std::forward<_Range>(__r)) { }
  417ee0:	55                   	push   %rbp
  417ee1:	48 89 e5             	mov    %rsp,%rbp
  417ee4:	48 83 ec 10          	sub    $0x10,%rsp
  417ee8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417eec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  417ef0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  417ef4:	48 89 c7             	mov    %rax,%rdi
  417ef7:	e8 15 00 00 00       	call   417f11 <_ZSt7forwardISt17basic_string_viewIcSt11char_traitsIcEEEOT_RNSt16remove_referenceIS4_E4typeE>
  417efc:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  417f00:	48 8b 50 08          	mov    0x8(%rax),%rdx
  417f04:	48 8b 00             	mov    (%rax),%rax
  417f07:	48 89 01             	mov    %rax,(%rcx)
  417f0a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  417f0e:	90                   	nop
  417f0f:	c9                   	leave
  417f10:	c3                   	ret

0000000000417f11 <_ZSt7forwardISt17basic_string_viewIcSt11char_traitsIcEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  417f11:	55                   	push   %rbp
  417f12:	48 89 e5             	mov    %rsp,%rbp
  417f15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  417f19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417f1d:	5d                   	pop    %rbp
  417f1e:	c3                   	ret
  417f1f:	90                   	nop

0000000000417f20 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEEC1ES5_>:
      _Grapheme_cluster_view(_View __v)
  417f20:	55                   	push   %rbp
  417f21:	48 89 e5             	mov    %rsp,%rbp
  417f24:	41 54                	push   %r12
  417f26:	53                   	push   %rbx
  417f27:	48 83 ec 60          	sub    $0x60,%rsp
  417f2b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  417f2f:	48 89 f0             	mov    %rsi,%rax
  417f32:	48 89 d1             	mov    %rdx,%rcx
  417f35:	48 89 c0             	mov    %rax,%rax
  417f38:	ba 00 00 00 00       	mov    $0x0,%edx
  417f3d:	48 89 ca             	mov    %rcx,%rdx
  417f40:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  417f44:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
      : _M_begin(_Utf32_view<_View>(std::move(__v)).begin())
  417f48:	4c 8b 65 a8          	mov    -0x58(%rbp),%r12
  417f4c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  417f50:	48 89 c7             	mov    %rax,%rdi
  417f53:	e8 7a ff ff ff       	call   417ed2 <_ZSt4moveIRSt17basic_string_viewIcSt11char_traitsIcEEEONSt16remove_referenceIT_E4typeEOS6_>
  417f58:	48 89 c2             	mov    %rax,%rdx
  417f5b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  417f5f:	48 89 d6             	mov    %rdx,%rsi
  417f62:	48 89 c7             	mov    %rax,%rdi
  417f65:	e8 76 ff ff ff       	call   417ee0 <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEEC1EOS4_>
  417f6a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  417f6e:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  417f72:	48 89 d6             	mov    %rdx,%rsi
  417f75:	48 89 c7             	mov    %rax,%rdi
  417f78:	e8 5f e8 ff ff       	call   4167dc <_ZNSt9__unicode9_Utf_viewIDiSt17basic_string_viewIcSt11char_traitsIcEEE5beginEv>
  417f7d:	48 83 ec 08          	sub    $0x8,%rsp
  417f81:	48 83 ec 28          	sub    $0x28,%rsp
  417f85:	48 89 e0             	mov    %rsp,%rax
  417f88:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  417f8c:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  417f90:	48 89 08             	mov    %rcx,(%rax)
  417f93:	48 89 58 08          	mov    %rbx,0x8(%rax)
  417f97:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  417f9b:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  417f9f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  417fa3:	48 89 58 18          	mov    %rbx,0x18(%rax)
  417fa7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  417fab:	48 89 50 20          	mov    %rdx,0x20(%rax)
  417faf:	4c 89 e7             	mov    %r12,%rdi
  417fb2:	e8 1f 15 00 00       	call   4194d6 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE>
  417fb7:	48 83 c4 30          	add    $0x30,%rsp
      { }
  417fbb:	90                   	nop
  417fbc:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  417fc0:	5b                   	pop    %rbx
  417fc1:	41 5c                	pop    %r12
  417fc3:	5d                   	pop    %rbp
  417fc4:	c3                   	ret
  417fc5:	90                   	nop

0000000000417fc6 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>:
      end() const { return _M_last; }
  417fc6:	55                   	push   %rbp
  417fc7:	48 89 e5             	mov    %rsp,%rbp
  417fca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  417fce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  417fd2:	48 8b 40 20          	mov    0x20(%rax),%rax
  417fd6:	5d                   	pop    %rbp
  417fd7:	c3                   	ret

0000000000417fd8 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv>:
	operator++()
  417fd8:	55                   	push   %rbp
  417fd9:	48 89 e5             	mov    %rsp,%rbp
  417fdc:	53                   	push   %rbx
  417fdd:	48 83 ec 58          	sub    $0x58,%rsp
  417fe1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
	  const auto __end = _M_base.end();
  417fe5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  417fe9:	48 83 c0 10          	add    $0x10,%rax
  417fed:	48 89 c7             	mov    %rax,%rdi
  417ff0:	e8 d1 ff ff ff       	call   417fc6 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  417ff5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (_M_base != __end)
  417ff9:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  417ffd:	48 83 ec 08          	sub    $0x8,%rsp
  418001:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418005:	48 83 ec 28          	sub    $0x28,%rsp
  418009:	48 89 e2             	mov    %rsp,%rdx
  41800c:	48 8b 48 10          	mov    0x10(%rax),%rcx
  418010:	48 8b 58 18          	mov    0x18(%rax),%rbx
  418014:	48 89 0a             	mov    %rcx,(%rdx)
  418017:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  41801b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  41801f:	48 8b 58 28          	mov    0x28(%rax),%rbx
  418023:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  418027:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  41802b:	48 8b 40 30          	mov    0x30(%rax),%rax
  41802f:	48 89 42 20          	mov    %rax,0x20(%rdx)
  418033:	48 89 f7             	mov    %rsi,%rdi
  418036:	e8 5b 15 00 00       	call   419596 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  41803b:	48 83 c4 30          	add    $0x30,%rsp
  41803f:	83 f0 01             	xor    $0x1,%eax
  418042:	84 c0                	test   %al,%al
  418044:	0f 84 82 01 00 00    	je     4181cc <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x1f4>
	      auto __p_prev = _M_prop;
  41804a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41804e:	8b 40 04             	mov    0x4(%rax),%eax
  418051:	89 45 ec             	mov    %eax,-0x14(%rbp)
	      auto __it = _M_base;
  418054:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418058:	48 8b 48 10          	mov    0x10(%rax),%rcx
  41805c:	48 8b 58 18          	mov    0x18(%rax),%rbx
  418060:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  418064:	48 89 5d b8          	mov    %rbx,-0x48(%rbp)
  418068:	48 8b 48 20          	mov    0x20(%rax),%rcx
  41806c:	48 8b 58 28          	mov    0x28(%rax),%rbx
  418070:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  418074:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  418078:	48 8b 40 30          	mov    0x30(%rax),%rax
  41807c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      while (++__it != __end)
  418080:	e9 c3 00 00 00       	jmp    418148 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x170>
		  char32_t __c = *__it;
  418085:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  418089:	48 89 c7             	mov    %rax,%rdi
  41808c:	e8 27 2c ff ff       	call   40acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  418091:	89 45 dc             	mov    %eax,-0x24(%rbp)
		  auto __p = __grapheme_cluster_break_property(*__it);
  418094:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  418098:	48 89 c7             	mov    %rax,%rdi
  41809b:	e8 18 2c ff ff       	call   40acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  4180a0:	89 c7                	mov    %eax,%edi
  4180a2:	e8 d6 cd fe ff       	call   404e7d <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>
  4180a7:	89 45 d8             	mov    %eax,-0x28(%rbp)
		  _M_update_xpicto_seq_state(__c, __p);
  4180aa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4180ae:	8b 55 d8             	mov    -0x28(%rbp),%edx
  4180b1:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  4180b4:	89 ce                	mov    %ecx,%esi
  4180b6:	48 89 c7             	mov    %rax,%rdi
  4180b9:	e8 36 cf fe ff       	call   404ff4 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base26_M_update_xpicto_seq_stateEDiNS0_13_Gcb_propertyE>
		  _M_update_ri_count(__p);
  4180be:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4180c2:	8b 55 d8             	mov    -0x28(%rbp),%edx
  4180c5:	89 d6                	mov    %edx,%esi
  4180c7:	48 89 c7             	mov    %rax,%rdi
  4180ca:	e8 d1 cf fe ff       	call   4050a0 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base18_M_update_ri_countENS0_13_Gcb_propertyE>
		  _M_update_incb_state(__c, __p);
  4180cf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4180d3:	8b 55 d8             	mov    -0x28(%rbp),%edx
  4180d6:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  4180d9:	89 ce                	mov    %ecx,%esi
  4180db:	48 89 c7             	mov    %rax,%rdi
  4180de:	e8 ed cf fe ff       	call   4050d0 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base20_M_update_incb_stateEDiNS0_13_Gcb_propertyE>
		  if (_M_is_break(__p_prev, __p, __it))
  4180e3:	8b 55 d8             	mov    -0x28(%rbp),%edx
  4180e6:	8b 75 ec             	mov    -0x14(%rbp),%esi
  4180e9:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  4180ed:	48 83 ec 08          	sub    $0x8,%rsp
  4180f1:	48 83 ec 28          	sub    $0x28,%rsp
  4180f5:	48 89 e0             	mov    %rsp,%rax
  4180f8:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4180fc:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  418100:	48 89 08             	mov    %rcx,(%rax)
  418103:	48 89 58 08          	mov    %rbx,0x8(%rax)
  418107:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  41810b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  41810f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  418113:	48 89 58 18          	mov    %rbx,0x18(%rax)
  418117:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  41811b:	48 89 48 20          	mov    %rcx,0x20(%rax)
  41811f:	e8 94 14 00 00       	call   4195b8 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE>
  418124:	48 83 c4 30          	add    $0x30,%rsp
  418128:	84 c0                	test   %al,%al
  41812a:	74 16                	je     418142 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x16a>
		      _M_reset(__c, __p);
  41812c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418130:	8b 55 d8             	mov    -0x28(%rbp),%edx
  418133:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  418136:	89 ce                	mov    %ecx,%esi
  418138:	48 89 c7             	mov    %rax,%rdi
  41813b:	e8 78 ce fe ff       	call   404fb8 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_base8_M_resetEDiNS0_13_Gcb_propertyE>
		      break;
  418140:	eb 5e                	jmp    4181a0 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0x1c8>
		  __p_prev = __p;
  418142:	8b 45 d8             	mov    -0x28(%rbp),%eax
  418145:	89 45 ec             	mov    %eax,-0x14(%rbp)
	      while (++__it != __end)
  418148:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  41814c:	48 89 c7             	mov    %rax,%rdi
  41814f:	e8 c4 3d ff ff       	call   40bf18 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
  418154:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  418158:	48 83 ec 08          	sub    $0x8,%rsp
  41815c:	48 83 ec 28          	sub    $0x28,%rsp
  418160:	48 89 e2             	mov    %rsp,%rdx
  418163:	48 8b 08             	mov    (%rax),%rcx
  418166:	48 8b 58 08          	mov    0x8(%rax),%rbx
  41816a:	48 89 0a             	mov    %rcx,(%rdx)
  41816d:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  418171:	48 8b 48 10          	mov    0x10(%rax),%rcx
  418175:	48 8b 58 18          	mov    0x18(%rax),%rbx
  418179:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  41817d:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  418181:	48 8b 40 20          	mov    0x20(%rax),%rax
  418185:	48 89 42 20          	mov    %rax,0x20(%rdx)
  418189:	48 89 f7             	mov    %rsi,%rdi
  41818c:	e8 05 14 00 00       	call   419596 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  418191:	48 83 c4 30          	add    $0x30,%rsp
  418195:	83 f0 01             	xor    $0x1,%eax
  418198:	84 c0                	test   %al,%al
  41819a:	0f 85 e5 fe ff ff    	jne    418085 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorppEv+0xad>
	      _M_base = __it;
  4181a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4181a4:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  4181a8:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
  4181ac:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4181b0:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4181b4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  4181b8:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  4181bc:	48 89 48 20          	mov    %rcx,0x20(%rax)
  4181c0:	48 89 58 28          	mov    %rbx,0x28(%rax)
  4181c4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4181c8:	48 89 50 30          	mov    %rdx,0x30(%rax)
	  return *this;
  4181cc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
	}
  4181d0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4181d4:	c9                   	leave
  4181d5:	c3                   	ret

00000000004181d6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratoreqERKPKc>:
	operator==(const ranges::sentinel_t<_View>& __i) const
  4181d6:	55                   	push   %rbp
  4181d7:	48 89 e5             	mov    %rsp,%rbp
  4181da:	53                   	push   %rbx
  4181db:	48 83 ec 18          	sub    $0x18,%rsp
  4181df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4181e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{ return _M_base == __i; }
  4181e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4181eb:	48 8b 30             	mov    (%rax),%rsi
  4181ee:	48 83 ec 08          	sub    $0x8,%rsp
  4181f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4181f6:	48 83 ec 28          	sub    $0x28,%rsp
  4181fa:	48 89 e2             	mov    %rsp,%rdx
  4181fd:	48 8b 48 10          	mov    0x10(%rax),%rcx
  418201:	48 8b 58 18          	mov    0x18(%rax),%rbx
  418205:	48 89 0a             	mov    %rcx,(%rdx)
  418208:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  41820c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  418210:	48 8b 58 28          	mov    0x28(%rax),%rbx
  418214:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  418218:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  41821c:	48 8b 40 30          	mov    0x30(%rax),%rax
  418220:	48 89 42 20          	mov    %rax,0x20(%rdx)
  418224:	48 89 f7             	mov    %rsi,%rdi
  418227:	e8 6a 13 00 00       	call   419596 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  41822c:	48 83 c4 30          	add    $0x30,%rsp
  418230:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418234:	c9                   	leave
  418235:	c3                   	ret

0000000000418236 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  418236:	55                   	push   %rbp
  418237:	48 89 e5             	mov    %rsp,%rbp
  41823a:	48 83 ec 10          	sub    $0x10,%rsp
  41823e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418242:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418246:	48 8b 00             	mov    (%rax),%rax
  418249:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41824d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  418251:	48 89 d6             	mov    %rdx,%rsi
  418254:	48 89 c7             	mov    %rax,%rdi
  418257:	e8 cc f2 fe ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  41825c:	90                   	nop
  41825d:	c9                   	leave
  41825e:	c3                   	ret
  41825f:	90                   	nop

0000000000418260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_>:
    basic_string<_CharT, _Traits, _Alloc>::
  418260:	55                   	push   %rbp
  418261:	48 89 e5             	mov    %rsp,%rbp
  418264:	53                   	push   %rbx
  418265:	48 83 ec 48          	sub    $0x48,%rsp
  418269:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  41826d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  418271:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  418275:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418279:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41827d:	48 89 d6             	mov    %rdx,%rsi
  418280:	48 89 c7             	mov    %rax,%rdi
  418283:	e8 5c 31 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  418288:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41828c:	48 89 c7             	mov    %rax,%rdi
  41828f:	e8 82 f2 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418294:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  418298:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  41829d:	84 c0                	test   %al,%al
  41829f:	74 19                	je     4182ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  4182a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4182a5:	48 89 c7             	mov    %rax,%rdi
  4182a8:	e8 e3 ca fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4182ad:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  4182b1:	73 07                	jae    4182ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5a>
  4182b3:	b8 01 00 00 00       	mov    $0x1,%eax
  4182b8:	eb 05                	jmp    4182bf <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x5f>
  4182ba:	b8 00 00 00 00       	mov    $0x0,%eax
  4182bf:	84 c0                	test   %al,%al
  4182c1:	74 39                	je     4182fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  4182c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4182c7:	48 89 c7             	mov    %rax,%rdi
  4182ca:	e8 c1 ca fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4182cf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4182d3:	48 89 d3             	mov    %rdx,%rbx
  4182d6:	48 29 c3             	sub    %rax,%rbx
  4182d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4182dd:	48 89 c7             	mov    %rax,%rdi
  4182e0:	e8 ab ca fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4182e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4182e9:	48 01 d0             	add    %rdx,%rax
  4182ec:	ba 00 00 00 00       	mov    $0x0,%edx
  4182f1:	48 89 de             	mov    %rbx,%rsi
  4182f4:	48 89 c7             	mov    %rax,%rdi
  4182f7:	e8 bd c6 fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  4182fc:	66 0f ef c0          	pxor   %xmm0,%xmm0
  418300:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  418304:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418308:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  41830c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418310:	48 89 c7             	mov    %rax,%rdi
  418313:	e8 ac 15 00 00       	call   4198c4 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>
  418318:	48 89 c1             	mov    %rax,%rcx
  41831b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41831f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418323:	48 89 c6             	mov    %rax,%rsi
  418326:	48 89 cf             	mov    %rcx,%rdi
  418329:	e8 fa ba ff ff       	call   413e28 <_ZZNKSt8__format14__formatter_fpIcE6formatIDF128_NS_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS7_ENKUlPcmE0_clESB_m>
  41832e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  418332:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418336:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  41833a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41833e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  418342:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  418346:	48 89 c7             	mov    %rax,%rdi
  418349:	e8 e8 fe ff ff       	call   418236 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS6_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RSE_EUlPcmE0_EEvmSG_EN11_TerminatorD1Ev>
  41834e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418352:	c9                   	leave
  418353:	c3                   	ret

0000000000418354 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
  418354:	55                   	push   %rbp
  418355:	48 89 e5             	mov    %rsp,%rbp
  418358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41835c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418360:	5d                   	pop    %rbp
  418361:	c3                   	ret

0000000000418362 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_>:
    __copy_or_move(_Iter __first, _Sent __last, _Out __result)
  418362:	55                   	push   %rbp
  418363:	48 89 e5             	mov    %rsp,%rbp
  418366:	41 55                	push   %r13
  418368:	41 54                	push   %r12
  41836a:	48 83 ec 40          	sub    $0x40,%rsp
  41836e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  418372:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  418376:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	  for (auto __n = __last - __first; __n > 0; --__n)
  41837a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41837e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418382:	48 29 c2             	sub    %rax,%rdx
  418385:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  418389:	eb 3c                	jmp    4183c7 <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_+0x65>
		*__result = *__first;
  41838b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41838f:	0f b6 00             	movzbl (%rax),%eax
  418392:	0f be c0             	movsbl %al,%eax
      operator*() { return *this; }
  418395:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  418399:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  41839d:	88 45 df             	mov    %al,-0x21(%rbp)
	_M_sink->_M_write(__c);
  4183a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4183a4:	48 8b 00             	mov    (%rax),%rax
  4183a7:	0f be 55 df          	movsbl -0x21(%rbp),%edx
  4183ab:	89 d6                	mov    %edx,%esi
  4183ad:	48 89 c7             	mov    %rax,%rdi
  4183b0:	e8 b1 f6 ff ff       	call   417a66 <_ZNSt8__format5_SinkIcE8_M_writeEc>
	      ++__first;
  4183b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4183b9:	48 83 c0 01          	add    $0x1,%rax
  4183bd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      operator++() { return *this; }
  4183c1:	90                   	nop
	  for (auto __n = __last - __first; __n > 0; --__n)
  4183c2:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  4183c7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4183cc:	7f bd                	jg     41838b <_ZNSt6ranges14__copy_or_moveILb0EPcS1_NSt8__format10_Sink_iterIcEEEENSt13__conditionalIXT_EE4typeINS_13in_out_resultIT0_T2_EESB_EES9_T1_SA_+0x29>
	  return {std::move(__first), std::move(__result)};
  4183ce:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  4183d2:	48 89 c7             	mov    %rax,%rdi
  4183d5:	e8 7a ff ff ff       	call   418354 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
  4183da:	48 8b 00             	mov    (%rax),%rax
  4183dd:	49 89 c4             	mov    %rax,%r12
  4183e0:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  4183e4:	48 89 c7             	mov    %rax,%rdi
  4183e7:	e8 59 16 ff ff       	call   409a45 <_ZSt4moveIRNSt8__format10_Sink_iterIcEEEONSt16remove_referenceIT_E4typeEOS5_>
  4183ec:	4c 8b 28             	mov    (%rax),%r13
  4183ef:	4c 89 e0             	mov    %r12,%rax
  4183f2:	4c 89 ea             	mov    %r13,%rdx
    }
  4183f5:	48 83 c4 40          	add    $0x40,%rsp
  4183f9:	41 5c                	pop    %r12
  4183fb:	41 5d                	pop    %r13
  4183fd:	5d                   	pop    %rbp
  4183fe:	c3                   	ret

00000000004183ff <_ZSt7forwardINSt8__format17_WidthPrecVisitorEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  4183ff:	55                   	push   %rbp
  418400:	48 89 e5             	mov    %rsp,%rbp
  418403:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  418407:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41840b:	5d                   	pop    %rbp
  41840c:	c3                   	ret
  41840d:	90                   	nop

000000000041840e <_ZNKSt8__format17_WidthPrecVisitorclISt9monostateEEmRT_>:
      operator()(_Tp& __arg) const
  41840e:	55                   	push   %rbp
  41840f:	48 89 e5             	mov    %rsp,%rbp
  418412:	48 83 ec 10          	sub    $0x10,%rsp
  418416:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41841a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  __format::__invalid_arg_id_in_format_string();
  41841e:	e8 f3 cd fe ff       	call   405216 <_ZNSt8__format33__invalid_arg_id_in_format_stringEv>
  418423:	90                   	nop

0000000000418424 <_ZNKSt8__format17_WidthPrecVisitorclIbEEmRT_>:
      operator()(_Tp& __arg) const
  418424:	55                   	push   %rbp
  418425:	48 89 e5             	mov    %rsp,%rbp
  418428:	48 83 ec 10          	sub    $0x10,%rsp
  41842c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418430:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418434:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418439:	e8 5b cd fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

000000000041843e <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_>:
      operator()(_Tp& __arg) const
  41843e:	55                   	push   %rbp
  41843f:	48 89 e5             	mov    %rsp,%rbp
  418442:	48 83 ec 10          	sub    $0x10,%rsp
  418446:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41844a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      if (__arg >= 0)
  41844e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  418452:	8b 00                	mov    (%rax),%eax
  418454:	85 c0                	test   %eax,%eax
  418456:	78 0a                	js     418462 <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_+0x24>
		return __arg;
  418458:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41845c:	8b 00                	mov    (%rax),%eax
  41845e:	48 98                	cltq
  418460:	eb 0a                	jmp    41846c <_ZNKSt8__format17_WidthPrecVisitorclIiEEmRT_+0x2e>
	__throw_format_error("format error: argument used for width or "
  418462:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418467:	e8 2d cd fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
      }
  41846c:	c9                   	leave
  41846d:	c3                   	ret

000000000041846e <_ZNKSt8__format17_WidthPrecVisitorclIjEEmRT_>:
      operator()(_Tp& __arg) const
  41846e:	55                   	push   %rbp
  41846f:	48 89 e5             	mov    %rsp,%rbp
  418472:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418476:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __arg;
  41847a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41847e:	8b 00                	mov    (%rax),%eax
  418480:	89 c0                	mov    %eax,%eax
      }
  418482:	5d                   	pop    %rbp
  418483:	c3                   	ret

0000000000418484 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_>:
      operator()(_Tp& __arg) const
  418484:	55                   	push   %rbp
  418485:	48 89 e5             	mov    %rsp,%rbp
  418488:	48 83 ec 10          	sub    $0x10,%rsp
  41848c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418490:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      if (__arg >= 0)
  418494:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  418498:	48 8b 00             	mov    (%rax),%rax
  41849b:	48 85 c0             	test   %rax,%rax
  41849e:	78 09                	js     4184a9 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_+0x25>
		return __arg;
  4184a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4184a4:	48 8b 00             	mov    (%rax),%rax
  4184a7:	eb 0a                	jmp    4184b3 <_ZNKSt8__format17_WidthPrecVisitorclIxEEmRT_+0x2f>
	__throw_format_error("format error: argument used for width or "
  4184a9:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  4184ae:	e8 e6 cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>
      }
  4184b3:	c9                   	leave
  4184b4:	c3                   	ret
  4184b5:	90                   	nop

00000000004184b6 <_ZNKSt8__format17_WidthPrecVisitorclIyEEmRT_>:
      operator()(_Tp& __arg) const
  4184b6:	55                   	push   %rbp
  4184b7:	48 89 e5             	mov    %rsp,%rbp
  4184ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4184be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      return __arg;
  4184c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4184c6:	48 8b 00             	mov    (%rax),%rax
      }
  4184c9:	5d                   	pop    %rbp
  4184ca:	c3                   	ret
  4184cb:	90                   	nop

00000000004184cc <_ZNKSt8__format17_WidthPrecVisitorclIfEEmRT_>:
      operator()(_Tp& __arg) const
  4184cc:	55                   	push   %rbp
  4184cd:	48 89 e5             	mov    %rsp,%rbp
  4184d0:	48 83 ec 10          	sub    $0x10,%rsp
  4184d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4184d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4184dc:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  4184e1:	e8 b3 cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

00000000004184e6 <_ZNKSt8__format17_WidthPrecVisitorclIdEEmRT_>:
      operator()(_Tp& __arg) const
  4184e6:	55                   	push   %rbp
  4184e7:	48 89 e5             	mov    %rsp,%rbp
  4184ea:	48 83 ec 10          	sub    $0x10,%rsp
  4184ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4184f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  4184f6:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  4184fb:	e8 99 cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418500 <_ZNKSt8__format17_WidthPrecVisitorclIeEEmRT_>:
      operator()(_Tp& __arg) const
  418500:	55                   	push   %rbp
  418501:	48 89 e5             	mov    %rsp,%rbp
  418504:	48 83 ec 10          	sub    $0x10,%rsp
  418508:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41850c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418510:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418515:	e8 7f cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

000000000041851a <_ZNKSt8__format17_WidthPrecVisitorclIPKvEEmRT_>:
      operator()(_Tp& __arg) const
  41851a:	55                   	push   %rbp
  41851b:	48 89 e5             	mov    %rsp,%rbp
  41851e:	48 83 ec 10          	sub    $0x10,%rsp
  418522:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418526:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41852a:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  41852f:	e8 65 cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418534 <_ZNKSt8__format17_WidthPrecVisitorclInEEmRT_>:
      operator()(_Tp& __arg) const
  418534:	55                   	push   %rbp
  418535:	48 89 e5             	mov    %rsp,%rbp
  418538:	48 83 ec 10          	sub    $0x10,%rsp
  41853c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418540:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418544:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418549:	e8 4b cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

000000000041854e <_ZNKSt8__format17_WidthPrecVisitorclIoEEmRT_>:
      operator()(_Tp& __arg) const
  41854e:	55                   	push   %rbp
  41854f:	48 89 e5             	mov    %rsp,%rbp
  418552:	48 83 ec 10          	sub    $0x10,%rsp
  418556:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41855a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  41855e:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418563:	e8 31 cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418568 <_ZNKSt8__format17_WidthPrecVisitorclIDF128_EEmRT_>:
      operator()(_Tp& __arg) const
  418568:	55                   	push   %rbp
  418569:	48 89 e5             	mov    %rsp,%rbp
  41856c:	48 83 ec 10          	sub    $0x10,%rsp
  418570:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418574:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418578:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  41857d:	e8 17 cc fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm>:
      assign(const _CharT* __s, size_type __n)
  418582:	55                   	push   %rbp
  418583:	48 89 e5             	mov    %rsp,%rbp
  418586:	48 83 ec 20          	sub    $0x20,%rsp
  41858a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41858e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  418592:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	return _M_replace(size_type(0), this->size(), __s, __n);
  418596:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41859a:	48 89 c7             	mov    %rax,%rdi
  41859d:	e8 ee c7 fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  4185a2:	48 89 c6             	mov    %rax,%rsi
  4185a5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4185a9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4185ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4185b1:	49 89 c8             	mov    %rcx,%r8
  4185b4:	48 89 d1             	mov    %rdx,%rcx
  4185b7:	48 89 f2             	mov    %rsi,%rdx
  4185ba:	be 00 00 00 00       	mov    $0x0,%esi
  4185bf:	48 89 c7             	mov    %rax,%rdi
  4185c2:	e8 5d 3f ff ff       	call   40c524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
  4185c7:	c9                   	leave
  4185c8:	c3                   	ret

00000000004185c9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc>:
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
  4185c9:	55                   	push   %rbp
  4185ca:	48 89 e5             	mov    %rsp,%rbp
  4185cd:	48 83 ec 20          	sub    $0x20,%rsp
  4185d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4185d5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4185d9:	89 d0                	mov    %edx,%eax
  4185db:	88 45 ec             	mov    %al,-0x14(%rbp)
	if (__n == 1)
  4185de:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  4185e3:	75 15                	jne    4185fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc+0x31>
	  traits_type::assign(*__d, __c);
  4185e5:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  4185e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4185ed:	48 89 d6             	mov    %rdx,%rsi
  4185f0:	48 89 c7             	mov    %rax,%rdi
  4185f3:	e8 2a c1 fe ff       	call   404722 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
  4185f8:	eb 1a                	jmp    418614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc+0x4b>
	  traits_type::assign(__d, __n, __c);
  4185fa:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  4185fe:	0f be d0             	movsbl %al,%edx
  418601:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  418605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418609:	48 89 ce             	mov    %rcx,%rsi
  41860c:	48 89 c7             	mov    %rax,%rdi
  41860f:	e8 a5 c3 fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
      }
  418614:	90                   	nop
  418615:	c9                   	leave
  418616:	c3                   	ret

0000000000418617 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>:
    __to_chars_len_2(_Tp __value) noexcept
  418617:	55                   	push   %rbp
  418618:	48 89 e5             	mov    %rsp,%rbp
  41861b:	48 83 ec 10          	sub    $0x10,%rsp
  41861f:	48 89 f8             	mov    %rdi,%rax
  418622:	48 89 f1             	mov    %rsi,%rcx
  418625:	48 89 c0             	mov    %rax,%rax
  418628:	ba 00 00 00 00       	mov    $0x0,%edx
  41862d:	48 89 ca             	mov    %rcx,%rdx
  418630:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  418634:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    { return std::__bit_width(__value); }
  418638:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  41863c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418640:	48 89 d7             	mov    %rdx,%rdi
  418643:	48 89 c6             	mov    %rax,%rsi
  418646:	e8 87 12 00 00       	call   4198d2 <_ZSt11__bit_widthIoEiT_>
  41864b:	c9                   	leave
  41864c:	c3                   	ret

000000000041864d <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_16(char* __first, char* __last, _Tp __val) noexcept
  41864d:	55                   	push   %rbp
  41864e:	48 89 e5             	mov    %rsp,%rbp
  418651:	48 83 ec 70          	sub    $0x70,%rsp
  418655:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  418659:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  41865d:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  418661:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
  418665:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  418669:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  41866d:	48 89 d7             	mov    %rdx,%rdi
  418670:	48 89 c6             	mov    %rax,%rsi
  418673:	e8 9f ff ff ff       	call   418617 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  418678:	83 c0 03             	add    $0x3,%eax
  41867b:	c1 e8 02             	shr    $0x2,%eax
  41867e:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418681:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418685:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
  418689:	48 89 c2             	mov    %rax,%rdx
  41868c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  41868f:	48 39 c2             	cmp    %rax,%rdx
  418692:	0f 9c c0             	setl   %al
  418695:	0f b6 c0             	movzbl %al,%eax
  418698:	48 85 c0             	test   %rax,%rax
  41869b:	74 1c                	je     4186b9 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x6c>
	  __res.ptr = __last;
  41869d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4186a1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  __res.ec = errc::value_too_large;
  4186a5:	c7 45 c8 4b 00 00 00 	movl   $0x4b,-0x38(%rbp)
	  return __res;
  4186ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4186b0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4186b4:	e9 85 01 00 00       	jmp    41883e <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1f1>
      constexpr char __digits[] = {
  4186b9:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  4186c0:	35 36 37
  4186c3:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  4186ca:	64 65 66
  4186cd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4186d1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      unsigned __pos = __len - 1;
  4186d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4186d8:	83 e8 01             	sub    $0x1,%eax
  4186db:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0x100)
  4186de:	e9 9f 00 00 00       	jmp    418782 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x135>
	  auto __num = __val & 0xF;
  4186e3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4186e7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4186eb:	83 e0 0f             	and    $0xf,%eax
  4186ee:	ba 00 00 00 00       	mov    $0x0,%edx
  4186f3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  4186f7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 4;
  4186fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4186ff:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  418703:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  418708:	48 c1 ea 04          	shr    $0x4,%rdx
  41870c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  418710:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[__pos] = __digits[__num];
  418714:	8b 55 fc             	mov    -0x4(%rbp),%edx
  418717:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41871b:	48 01 c2             	add    %rax,%rdx
  41871e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  418722:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418726:	48 01 c8             	add    %rcx,%rax
  418729:	0f b6 00             	movzbl (%rax),%eax
  41872c:	88 02                	mov    %al,(%rdx)
	  __num = __val & 0xF;
  41872e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  418732:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  418736:	83 e0 0f             	and    $0xf,%eax
  418739:	ba 00 00 00 00       	mov    $0x0,%edx
  41873e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418742:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 4;
  418746:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  41874a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  41874e:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  418753:	48 c1 ea 04          	shr    $0x4,%rdx
  418757:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  41875b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[__pos - 1] = __digits[__num];
  41875f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  418762:	83 e8 01             	sub    $0x1,%eax
  418765:	89 c2                	mov    %eax,%edx
  418767:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41876b:	48 01 c2             	add    %rax,%rdx
  41876e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  418772:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418776:	48 01 c8             	add    %rcx,%rax
  418779:	0f b6 00             	movzbl (%rax),%eax
  41877c:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  41877e:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0x100)
  418782:	ba ff 00 00 00       	mov    $0xff,%edx
  418787:	b8 00 00 00 00       	mov    $0x0,%eax
  41878c:	48 3b 55 90          	cmp    -0x70(%rbp),%rdx
  418790:	48 1b 45 98          	sbb    -0x68(%rbp),%rax
  418794:	0f 82 49 ff ff ff    	jb     4186e3 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x96>
      if (__val >= 0x10)
  41879a:	ba 0f 00 00 00       	mov    $0xf,%edx
  41879f:	b8 00 00 00 00       	mov    $0x0,%eax
  4187a4:	48 3b 55 90          	cmp    -0x70(%rbp),%rdx
  4187a8:	48 1b 45 98          	sbb    -0x68(%rbp),%rax
  4187ac:	73 5f                	jae    41880d <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1c0>
	  const auto __num = __val & 0xF;
  4187ae:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4187b2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4187b6:	83 e0 0f             	and    $0xf,%eax
  4187b9:	ba 00 00 00 00       	mov    $0x0,%edx
  4187be:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4187c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __val >>= 4;
  4187c6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4187ca:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4187ce:	48 0f ac d0 04       	shrd   $0x4,%rdx,%rax
  4187d3:	48 c1 ea 04          	shr    $0x4,%rdx
  4187d7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4187db:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	  __first[1] = __digits[__num];
  4187df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4187e3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4187e7:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  4187eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4187ef:	48 01 c8             	add    %rcx,%rax
  4187f2:	0f b6 00             	movzbl (%rax),%eax
  4187f5:	88 02                	mov    %al,(%rdx)
	  __first[0] = __digits[__val];
  4187f7:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  4187fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4187ff:	48 01 d0             	add    %rdx,%rax
  418802:	0f b6 10             	movzbl (%rax),%edx
  418805:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418809:	88 10                	mov    %dl,(%rax)
  41880b:	eb 14                	jmp    418821 <_ZNSt8__detail13__to_chars_16IoEESt15to_chars_resultPcS2_T_+0x1d4>
	__first[0] = __digits[__val];
  41880d:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  418811:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  418815:	48 01 d0             	add    %rdx,%rax
  418818:	0f b6 10             	movzbl (%rax),%edx
  41881b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41881f:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  418821:	8b 55 f8             	mov    -0x8(%rbp),%edx
  418824:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418828:	48 01 d0             	add    %rdx,%rax
  41882b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __res.ec = {};
  41882f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
      return __res;
  418836:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  41883a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    }
  41883e:	c9                   	leave
  41883f:	c3                   	ret

0000000000418840 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
  418840:	55                   	push   %rbp
  418841:	48 89 e5             	mov    %rsp,%rbp
  418844:	53                   	push   %rbx
  418845:	48 83 ec 48          	sub    $0x48,%rsp
  418849:	48 89 f8             	mov    %rdi,%rax
  41884c:	48 89 c1             	mov    %rax,%rcx
  41884f:	bb 00 00 00 00       	mov    $0x0,%ebx
  418854:	48 89 f3             	mov    %rsi,%rbx
  418857:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  41885b:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  41885f:	89 55 bc             	mov    %edx,-0x44(%rbp)
      unsigned __n = 1;
  418862:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
      const unsigned __b2 = __base  * __base;
  418869:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41886c:	0f af c0             	imul   %eax,%eax
  41886f:	89 45 e8             	mov    %eax,-0x18(%rbp)
      const unsigned __b3 = __b2 * __base;
  418872:	8b 45 bc             	mov    -0x44(%rbp),%eax
  418875:	8b 55 e8             	mov    -0x18(%rbp),%edx
  418878:	0f af c2             	imul   %edx,%eax
  41887b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
      const unsigned long __b4 = __b3 * __base;
  41887e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  418881:	0f af 45 e4          	imul   -0x1c(%rbp),%eax
  418885:	89 c0                	mov    %eax,%eax
  418887:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  if (__value < (unsigned)__base) return __n;
  41888b:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  41888e:	89 c8                	mov    %ecx,%eax
  418890:	48 89 c0             	mov    %rax,%rax
  418893:	ba 00 00 00 00       	mov    $0x0,%edx
  418898:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  41889c:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4188a0:	48 19 d1             	sbb    %rdx,%rcx
  4188a3:	73 08                	jae    4188ad <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x6d>
  4188a5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4188a8:	e9 8b 00 00 00       	jmp    418938 <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b2) return __n + 1;
  4188ad:	8b 45 e8             	mov    -0x18(%rbp),%eax
  4188b0:	48 89 c0             	mov    %rax,%rax
  4188b3:	ba 00 00 00 00       	mov    $0x0,%edx
  4188b8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  4188bc:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4188c0:	48 19 d1             	sbb    %rdx,%rcx
  4188c3:	73 08                	jae    4188cd <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x8d>
  4188c5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4188c8:	83 c0 01             	add    $0x1,%eax
  4188cb:	eb 6b                	jmp    418938 <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b3) return __n + 2;
  4188cd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4188d0:	48 89 c0             	mov    %rax,%rax
  4188d3:	ba 00 00 00 00       	mov    $0x0,%edx
  4188d8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  4188dc:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4188e0:	48 19 d1             	sbb    %rdx,%rcx
  4188e3:	73 08                	jae    4188ed <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xad>
  4188e5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4188e8:	83 c0 02             	add    $0x2,%eax
  4188eb:	eb 4b                	jmp    418938 <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  if (__value < __b4) return __n + 3;
  4188ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4188f1:	ba 00 00 00 00       	mov    $0x0,%edx
  4188f6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  4188fa:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  4188fe:	48 19 d1             	sbb    %rdx,%rcx
  418901:	73 08                	jae    41890b <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xcb>
  418903:	8b 45 ec             	mov    -0x14(%rbp),%eax
  418906:	83 c0 03             	add    $0x3,%eax
  418909:	eb 2d                	jmp    418938 <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0xf8>
	  __value /= __b4;
  41890b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41890f:	ba 00 00 00 00       	mov    $0x0,%edx
  418914:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  418918:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  41891c:	48 89 d1             	mov    %rdx,%rcx
  41891f:	48 89 c2             	mov    %rax,%rdx
  418922:	e8 59 b7 fe ff       	call   404080 <__udivti3@plt>
  418927:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  41892b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  __n += 4;
  41892f:	83 45 ec 04          	addl   $0x4,-0x14(%rbp)
	  if (__value < (unsigned)__base) return __n;
  418933:	e9 53 ff ff ff       	jmp    41888b <_ZNSt8__detail14__to_chars_lenIoEEjT_i+0x4b>
    }
  418938:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41893c:	c9                   	leave
  41893d:	c3                   	ret

000000000041893e <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
  41893e:	55                   	push   %rbp
  41893f:	48 89 e5             	mov    %rsp,%rbp
  418942:	48 83 ec 40          	sub    $0x40,%rsp
  418946:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  41894a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  41894e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  418952:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
      const unsigned __len = __to_chars_len(__val, 10);
  418956:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  41895a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41895e:	ba 0a 00 00 00       	mov    $0xa,%edx
  418963:	48 89 cf             	mov    %rcx,%rdi
  418966:	48 89 c6             	mov    %rax,%rsi
  418969:	e8 d2 fe ff ff       	call   418840 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>
  41896e:	89 45 fc             	mov    %eax,-0x4(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418971:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418975:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  418979:	48 89 c2             	mov    %rax,%rdx
  41897c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  41897f:	48 39 c2             	cmp    %rax,%rdx
  418982:	0f 9c c0             	setl   %al
  418985:	0f b6 c0             	movzbl %al,%eax
  418988:	48 85 c0             	test   %rax,%rax
  41898b:	74 19                	je     4189a6 <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_+0x68>
	  __res.ptr = __last;
  41898d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418991:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  418995:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  41899c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4189a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4189a4:	eb 37                	jmp    4189dd <_ZNSt8__detail13__to_chars_10IoEESt15to_chars_resultPcS2_T_+0x9f>
      __detail::__to_chars_10_impl(__first, __len, __val);
  4189a6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4189aa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4189ae:	8b 75 fc             	mov    -0x4(%rbp),%esi
  4189b1:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  4189b5:	48 89 d1             	mov    %rdx,%rcx
  4189b8:	48 89 c2             	mov    %rax,%rdx
  4189bb:	e8 58 0f 00 00       	call   419918 <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_>
      __res.ptr = __first + __len;
  4189c0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4189c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4189c7:	48 01 d0             	add    %rdx,%rax
  4189ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  4189ce:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  4189d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4189d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  4189dd:	c9                   	leave
  4189de:	c3                   	ret

00000000004189df <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_8(char* __first, char* __last, _Tp __val) noexcept
  4189df:	55                   	push   %rbp
  4189e0:	48 89 e5             	mov    %rsp,%rbp
  4189e3:	48 83 ec 60          	sub    $0x60,%rsp
  4189e7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4189eb:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4189ef:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  4189f3:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
      unsigned __len = 0;
  4189f7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	__len = (__to_chars_len_2(__val) + 2) / 3;
  4189fe:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  418a02:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  418a06:	48 89 d7             	mov    %rdx,%rdi
  418a09:	48 89 c6             	mov    %rax,%rsi
  418a0c:	e8 06 fc ff ff       	call   418617 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  418a11:	83 c0 02             	add    $0x2,%eax
  418a14:	89 c2                	mov    %eax,%edx
  418a16:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  418a1b:	48 0f af c2          	imul   %rdx,%rax
  418a1f:	48 c1 e8 20          	shr    $0x20,%rax
  418a23:	d1 e8                	shr    %eax
  418a25:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418a28:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  418a2c:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
  418a30:	48 89 c2             	mov    %rax,%rdx
  418a33:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418a36:	48 39 c2             	cmp    %rax,%rdx
  418a39:	0f 9c c0             	setl   %al
  418a3c:	0f b6 c0             	movzbl %al,%eax
  418a3f:	48 85 c0             	test   %rax,%rax
  418a42:	74 1c                	je     418a60 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x81>
	  __res.ptr = __last;
  418a44:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  418a48:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  __res.ec = errc::value_too_large;
  418a4c:	c7 45 c8 4b 00 00 00 	movl   $0x4b,-0x38(%rbp)
	  return __res;
  418a53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418a57:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  418a5b:	e9 4c 01 00 00       	jmp    418bac <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1cd>
      unsigned __pos = __len - 1;
  418a60:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418a63:	83 e8 01             	sub    $0x1,%eax
  418a66:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 0100)
  418a69:	e9 93 00 00 00       	jmp    418b01 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x122>
	  auto __num = __val & 7;
  418a6e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418a72:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418a76:	83 e0 07             	and    $0x7,%eax
  418a79:	ba 00 00 00 00       	mov    $0x0,%edx
  418a7e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418a82:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 3;
  418a86:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418a8a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418a8e:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  418a93:	48 c1 ea 03          	shr    $0x3,%rdx
  418a97:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  418a9b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[__pos] = '0' + __num;
  418a9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418aa3:	8d 48 30             	lea    0x30(%rax),%ecx
  418aa6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  418aa9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418aad:	48 01 d0             	add    %rdx,%rax
  418ab0:	89 ca                	mov    %ecx,%edx
  418ab2:	88 10                	mov    %dl,(%rax)
	  __num = __val & 7;
  418ab4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418ab8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418abc:	83 e0 07             	and    $0x7,%eax
  418abf:	ba 00 00 00 00       	mov    $0x0,%edx
  418ac4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418ac8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val >>= 3;
  418acc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418ad0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418ad4:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  418ad9:	48 c1 ea 03          	shr    $0x3,%rdx
  418add:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  418ae1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[__pos - 1] = '0' + __num;
  418ae5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418ae9:	8d 50 30             	lea    0x30(%rax),%edx
  418aec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  418aef:	83 e8 01             	sub    $0x1,%eax
  418af2:	89 c1                	mov    %eax,%ecx
  418af4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418af8:	48 01 c8             	add    %rcx,%rax
  418afb:	88 10                	mov    %dl,(%rax)
	  __pos -= 2;
  418afd:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 0100)
  418b01:	ba 3f 00 00 00       	mov    $0x3f,%edx
  418b06:	b8 00 00 00 00       	mov    $0x0,%eax
  418b0b:	48 3b 55 a0          	cmp    -0x60(%rbp),%rdx
  418b0f:	48 1b 45 a8          	sbb    -0x58(%rbp),%rax
  418b13:	0f 82 55 ff ff ff    	jb     418a6e <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x8f>
      if (__val >= 010)
  418b19:	ba 07 00 00 00       	mov    $0x7,%edx
  418b1e:	b8 00 00 00 00       	mov    $0x0,%eax
  418b23:	48 3b 55 a0          	cmp    -0x60(%rbp),%rdx
  418b27:	48 1b 45 a8          	sbb    -0x58(%rbp),%rax
  418b2b:	73 53                	jae    418b80 <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1a1>
	  auto const __num = __val & 7;
  418b2d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418b31:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418b35:	83 e0 07             	and    $0x7,%eax
  418b38:	ba 00 00 00 00       	mov    $0x0,%edx
  418b3d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  418b41:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __val >>= 3;
  418b45:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418b49:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  418b4d:	48 0f ac d0 03       	shrd   $0x3,%rdx,%rax
  418b52:	48 c1 ea 03          	shr    $0x3,%rdx
  418b56:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  418b5a:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	  __first[1] = '0' + __num;
  418b5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418b62:	8d 50 30             	lea    0x30(%rax),%edx
  418b65:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418b69:	48 83 c0 01          	add    $0x1,%rax
  418b6d:	88 10                	mov    %dl,(%rax)
	  __first[0] = '0' + __val;
  418b6f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418b73:	83 c0 30             	add    $0x30,%eax
  418b76:	89 c2                	mov    %eax,%edx
  418b78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418b7c:	88 10                	mov    %dl,(%rax)
  418b7e:	eb 0f                	jmp    418b8f <_ZNSt8__detail12__to_chars_8IoEESt15to_chars_resultPcS2_T_+0x1b0>
	__first[0] = '0' + __val;
  418b80:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  418b84:	83 c0 30             	add    $0x30,%eax
  418b87:	89 c2                	mov    %eax,%edx
  418b89:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418b8d:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  418b8f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  418b92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  418b96:	48 01 d0             	add    %rdx,%rax
  418b99:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __res.ec = {};
  418b9d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
      return __res;
  418ba4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418ba8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    }
  418bac:	c9                   	leave
  418bad:	c3                   	ret

0000000000418bae <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_>:
    __to_chars_2(char* __first, char* __last, _Tp __val) noexcept
  418bae:	55                   	push   %rbp
  418baf:	48 89 e5             	mov    %rsp,%rbp
  418bb2:	48 83 ec 40          	sub    $0x40,%rsp
  418bb6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  418bba:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  418bbe:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  418bc2:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
      const unsigned __len = __to_chars_len_2(__val);
  418bc6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  418bca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418bce:	48 89 d7             	mov    %rdx,%rdi
  418bd1:	48 89 c6             	mov    %rax,%rsi
  418bd4:	e8 3e fa ff ff       	call   418617 <_ZNSt8__detail16__to_chars_len_2IoEEjT_>
  418bd9:	89 45 f8             	mov    %eax,-0x8(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418bdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418be0:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  418be4:	48 89 c2             	mov    %rax,%rdx
  418be7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418bea:	48 39 c2             	cmp    %rax,%rdx
  418bed:	0f 9c c0             	setl   %al
  418bf0:	0f b6 c0             	movzbl %al,%eax
  418bf3:	48 85 c0             	test   %rax,%rax
  418bf6:	74 19                	je     418c11 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0x63>
	  __res.ptr = __last;
  418bf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418bfc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __res.ec = errc::value_too_large;
  418c00:	c7 45 e8 4b 00 00 00 	movl   $0x4b,-0x18(%rbp)
	  return __res;
  418c07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418c0b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418c0f:	eb 6e                	jmp    418c7f <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0xd1>
      unsigned __pos = __len - 1;
  418c11:	8b 45 f8             	mov    -0x8(%rbp),%eax
  418c14:	83 e8 01             	sub    $0x1,%eax
  418c17:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__pos)
  418c1a:	eb 39                	jmp    418c55 <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0xa7>
	  __first[__pos--] = '0' + (__val & 1);
  418c1c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418c20:	83 e0 01             	and    $0x1,%eax
  418c23:	83 c0 30             	add    $0x30,%eax
  418c26:	89 c6                	mov    %eax,%esi
  418c28:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  418c2c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  418c2f:	8d 50 ff             	lea    -0x1(%rax),%edx
  418c32:	89 55 fc             	mov    %edx,-0x4(%rbp)
  418c35:	89 c0                	mov    %eax,%eax
  418c37:	48 01 c8             	add    %rcx,%rax
  418c3a:	40 88 30             	mov    %sil,(%rax)
	  __val >>= 1;
  418c3d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418c41:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  418c45:	48 0f ac d0 01       	shrd   $0x1,%rdx,%rax
  418c4a:	48 d1 ea             	shr    %rdx
  418c4d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  418c51:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      while (__pos)
  418c55:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  418c59:	75 c1                	jne    418c1c <_ZNSt8__detail12__to_chars_2IoEESt15to_chars_resultPcS2_T_+0x6e>
      __first[0] = '1';
  418c5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  418c5f:	c6 00 31             	movb   $0x31,(%rax)
      __res.ptr = __first + __len;
  418c62:	8b 55 f8             	mov    -0x8(%rbp),%edx
  418c65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  418c69:	48 01 d0             	add    %rdx,%rax
  418c6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __res.ec = {};
  418c70:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      return __res;
  418c77:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  418c7b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    }
  418c7f:	c9                   	leave
  418c80:	c3                   	ret

0000000000418c81 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i>:
    __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept
  418c81:	55                   	push   %rbp
  418c82:	48 89 e5             	mov    %rsp,%rbp
  418c85:	53                   	push   %rbx
  418c86:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  418c8d:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  418c94:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  418c9b:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  418ca2:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  418ca9:	44 89 85 5c ff ff ff 	mov    %r8d,-0xa4(%rbp)
      const unsigned __len = __to_chars_len(__val, __base);
  418cb0:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
  418cb6:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  418cbd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  418cc4:	48 89 cf             	mov    %rcx,%rdi
  418cc7:	48 89 c6             	mov    %rax,%rsi
  418cca:	e8 71 fb ff ff       	call   418840 <_ZNSt8__detail14__to_chars_lenIoEEjT_i>
  418ccf:	89 45 e8             	mov    %eax,-0x18(%rbp)
      if (__builtin_expect((__last - __first) < __len, 0))
  418cd2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  418cd9:	48 2b 85 78 ff ff ff 	sub    -0x88(%rbp),%rax
  418ce0:	48 89 c2             	mov    %rax,%rdx
  418ce3:	8b 45 e8             	mov    -0x18(%rbp),%eax
  418ce6:	48 39 c2             	cmp    %rax,%rdx
  418ce9:	0f 9c c0             	setl   %al
  418cec:	0f b6 c0             	movzbl %al,%eax
  418cef:	48 85 c0             	test   %rax,%rax
  418cf2:	74 1f                	je     418d13 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x92>
	  __res.ptr = __last;
  418cf4:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  418cfb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	  __res.ec = errc::value_too_large;
  418cff:	c7 45 b8 4b 00 00 00 	movl   $0x4b,-0x48(%rbp)
	  return __res;
  418d06:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  418d0a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  418d0e:	e9 45 01 00 00       	jmp    418e58 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x1d7>
      unsigned __pos = __len - 1;
  418d13:	8b 45 e8             	mov    -0x18(%rbp),%eax
  418d16:	83 e8 01             	sub    $0x1,%eax
  418d19:	89 45 ec             	mov    %eax,-0x14(%rbp)
      constexpr char __digits[] = {
  418d1c:	48 b8 30 31 32 33 34 	movabs $0x3736353433323130,%rax
  418d23:	35 36 37
  418d26:	48 ba 38 39 61 62 63 	movabs $0x6665646362613938,%rdx
  418d2d:	64 65 66
  418d30:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  418d34:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  418d38:	48 b8 67 68 69 6a 6b 	movabs $0x6e6d6c6b6a696867,%rax
  418d3f:	6c 6d 6e
  418d42:	48 ba 6f 70 71 72 73 	movabs $0x767574737271706f,%rdx
  418d49:	74 75 76
  418d4c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  418d50:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  418d54:	c7 45 a0 77 78 79 7a 	movl   $0x7a797877,-0x60(%rbp)
      while (__val >= (unsigned)__base)
  418d5b:	e9 97 00 00 00       	jmp    418df7 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0x176>
	  auto const __quo = __val / __base;
  418d60:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  418d66:	48 98                	cltq
  418d68:	48 99                	cqto
  418d6a:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
  418d71:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  418d78:	48 89 d1             	mov    %rdx,%rcx
  418d7b:	48 89 c2             	mov    %rax,%rdx
  418d7e:	e8 fd b2 fe ff       	call   404080 <__udivti3@plt>
  418d83:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  418d87:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto const __rem = __val % __base;
  418d8b:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  418d91:	48 98                	cltq
  418d93:	48 99                	cqto
  418d95:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  418d9c:	48 8b 9d 68 ff ff ff 	mov    -0x98(%rbp),%rbx
  418da3:	48 89 cf             	mov    %rcx,%rdi
  418da6:	48 89 de             	mov    %rbx,%rsi
  418da9:	48 89 d1             	mov    %rdx,%rcx
  418dac:	48 89 c2             	mov    %rax,%rdx
  418daf:	e8 dc b5 fe ff       	call   404390 <__umodti3@plt>
  418db4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  418db8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  __first[__pos--] = __digits[__rem];
  418dbc:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  418dc0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418dc4:	48 01 d0             	add    %rdx,%rax
  418dc7:	0f b6 10             	movzbl (%rax),%edx
  418dca:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  418dd1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  418dd4:	8d 48 ff             	lea    -0x1(%rax),%ecx
  418dd7:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  418dda:	89 c0                	mov    %eax,%eax
  418ddc:	48 01 f0             	add    %rsi,%rax
  418ddf:	88 10                	mov    %dl,(%rax)
	  __val = __quo;
  418de1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  418de5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  418de9:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  418df0:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
      while (__val >= (unsigned)__base)
  418df7:	8b 8d 5c ff ff ff    	mov    -0xa4(%rbp),%ecx
  418dfd:	89 c8                	mov    %ecx,%eax
  418dff:	48 89 c0             	mov    %rax,%rax
  418e02:	ba 00 00 00 00       	mov    $0x0,%edx
  418e07:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  418e0e:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  418e15:	48 19 d1             	sbb    %rdx,%rcx
  418e18:	0f 83 42 ff ff ff    	jae    418d60 <_ZNSt8__detail10__to_charsIoEESt15to_chars_resultPcS2_T_i+0xdf>
      *__first = __digits[__val];
  418e1e:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  418e22:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  418e29:	48 01 d0             	add    %rdx,%rax
  418e2c:	0f b6 10             	movzbl (%rax),%edx
  418e2f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  418e36:	88 10                	mov    %dl,(%rax)
      __res.ptr = __first + __len;
  418e38:	8b 55 e8             	mov    -0x18(%rbp),%edx
  418e3b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  418e42:	48 01 d0             	add    %rdx,%rax
  418e45:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      __res.ec = {};
  418e49:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
      return __res;
  418e50:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  418e54:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    }
  418e58:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418e5c:	c9                   	leave
  418e5d:	c3                   	ret

0000000000418e5e <_ZSt11__addressofIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  418e5e:	55                   	push   %rbp
  418e5f:	48 89 e5             	mov    %rsp,%rbp
  418e62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
  418e66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418e6a:	5d                   	pop    %rbp
  418e6b:	c3                   	ret

0000000000418e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
    basic_string<_CharT, _Traits, _Alloc>::
  418e6c:	55                   	push   %rbp
  418e6d:	48 89 e5             	mov    %rsp,%rbp
  418e70:	53                   	push   %rbx
  418e71:	48 83 ec 38          	sub    $0x38,%rsp
  418e75:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  418e79:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (this != std::__addressof(__str))
  418e7d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418e81:	48 89 c7             	mov    %rax,%rdi
  418e84:	e8 d5 ff ff ff       	call   418e5e <_ZSt11__addressofIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS7_>
  418e89:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  418e8d:	0f 95 c0             	setne  %al
  418e90:	84 c0                	test   %al,%al
  418e92:	0f 84 c9 00 00 00    	je     418f61 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xf5>
	  const size_type __rsize = __str.length();
  418e98:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418e9c:	48 89 c7             	mov    %rax,%rdi
  418e9f:	e8 fc e9 fe ff       	call   4078a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
  418ea4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  const size_type __capacity = capacity();
  418ea8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418eac:	48 89 c7             	mov    %rax,%rdi
  418eaf:	e8 02 25 ff ff       	call   40b3b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
  418eb4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__rsize > __capacity)
  418eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418ebc:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  418ec0:	73 55                	jae    418f17 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xab>
	      size_type __new_capacity = __rsize;
  418ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418ec6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	      pointer __tmp = _M_create(__new_capacity, __capacity);
  418eca:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  418ece:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  418ed2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418ed6:	48 89 ce             	mov    %rcx,%rsi
  418ed9:	48 89 c7             	mov    %rax,%rdi
  418edc:	e8 f5 1f ff ff       	call   40aed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  418ee1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      _M_dispose();
  418ee5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418ee9:	48 89 c7             	mov    %rax,%rdi
  418eec:	e8 8f 08 ff ff       	call   409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	      _M_data(__tmp);
  418ef1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  418ef5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418ef9:	48 89 d6             	mov    %rdx,%rsi
  418efc:	48 89 c7             	mov    %rax,%rdi
  418eff:	e8 d4 08 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	      _M_capacity(__new_capacity);
  418f04:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  418f08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418f0c:	48 89 d6             	mov    %rdx,%rsi
  418f0f:	48 89 c7             	mov    %rax,%rdi
  418f12:	e8 db 08 ff ff       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	  if (__rsize)
  418f17:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  418f1c:	74 30                	je     418f4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0xe2>
	    this->_S_copy(_M_data(), __str._M_data(), __rsize);
  418f1e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  418f22:	48 89 c7             	mov    %rax,%rdi
  418f25:	e8 ec e5 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418f2a:	48 89 c3             	mov    %rax,%rbx
  418f2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418f31:	48 89 c7             	mov    %rax,%rdi
  418f34:	e8 dd e5 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  418f39:	48 89 c1             	mov    %rax,%rcx
  418f3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  418f40:	48 89 c2             	mov    %rax,%rdx
  418f43:	48 89 de             	mov    %rbx,%rsi
  418f46:	48 89 cf             	mov    %rcx,%rdi
  418f49:	e8 c8 31 ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	  _M_set_length(__rsize);
  418f4e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  418f52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  418f56:	48 89 d6             	mov    %rdx,%rsi
  418f59:	48 89 c7             	mov    %rax,%rdi
  418f5c:	e8 c7 e5 fe ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
    }
  418f61:	90                   	nop
  418f62:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  418f66:	c9                   	leave
  418f67:	c3                   	ret

0000000000418f68 <_ZNKSt8__format17_WidthPrecVisitorclIcEEmRT_>:
      operator()(_Tp& __arg) const
  418f68:	55                   	push   %rbp
  418f69:	48 89 e5             	mov    %rsp,%rbp
  418f6c:	48 83 ec 10          	sub    $0x10,%rsp
  418f70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418f74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418f78:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418f7d:	e8 17 c2 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418f82 <_ZNKSt8__format17_WidthPrecVisitorclIPKcEEmRT_>:
      operator()(_Tp& __arg) const
  418f82:	55                   	push   %rbp
  418f83:	48 89 e5             	mov    %rsp,%rbp
  418f86:	48 83 ec 10          	sub    $0x10,%rsp
  418f8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418f8e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418f92:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418f97:	e8 fd c1 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418f9c <_ZNKSt8__format17_WidthPrecVisitorclISt17basic_string_viewIcSt11char_traitsIcEEEEmRT_>:
      operator()(_Tp& __arg) const
  418f9c:	55                   	push   %rbp
  418f9d:	48 89 e5             	mov    %rsp,%rbp
  418fa0:	48 83 ec 10          	sub    $0x10,%rsp
  418fa4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418fa8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418fac:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418fb1:	e8 e3 c1 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418fb6 <_ZNKSt8__format17_WidthPrecVisitorclINSt16basic_format_argISt20basic_format_contextINS_10_Sink_iterIcEEcEE6handleEEEmRT_>:
      operator()(_Tp& __arg) const
  418fb6:	55                   	push   %rbp
  418fb7:	48 89 e5             	mov    %rsp,%rbp
  418fba:	48 83 ec 10          	sub    $0x10,%rsp
  418fbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418fc2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__throw_format_error("format error: argument used for width or "
  418fc6:	bf 88 b4 41 00       	mov    $0x41b488,%edi
  418fcb:	e8 c9 c1 fe ff       	call   405199 <_ZSt20__throw_format_errorPKc>

0000000000418fd0 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIfNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  418fd0:	55                   	push   %rbp
  418fd1:	48 89 e5             	mov    %rsp,%rbp
  418fd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  418fd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418fdc:	5d                   	pop    %rbp
  418fdd:	c3                   	ret

0000000000418fde <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>:
	_GLIBCXX20_CONSTEXPR ~_Terminator() { _M_this->_M_set_length(_M_r); }
  418fde:	55                   	push   %rbp
  418fdf:	48 89 e5             	mov    %rsp,%rbp
  418fe2:	48 83 ec 10          	sub    $0x10,%rsp
  418fe6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  418fea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  418fee:	48 8b 00             	mov    (%rax),%rax
  418ff1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  418ff5:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  418ff9:	48 89 d6             	mov    %rdx,%rsi
  418ffc:	48 89 c7             	mov    %rax,%rdi
  418fff:	e8 24 e5 fe ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
  419004:	90                   	nop
  419005:	c9                   	leave
  419006:	c3                   	ret
  419007:	90                   	nop

0000000000419008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_>:
    basic_string<_CharT, _Traits, _Alloc>::
  419008:	55                   	push   %rbp
  419009:	48 89 e5             	mov    %rsp,%rbp
  41900c:	53                   	push   %rbx
  41900d:	48 83 ec 48          	sub    $0x48,%rsp
  419011:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  419015:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  419019:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      reserve(__n);
  41901d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  419021:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419025:	48 89 d6             	mov    %rdx,%rsi
  419028:	48 89 c7             	mov    %rax,%rdi
  41902b:	e8 b4 23 ff ff       	call   40b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm>
      _CharT* const __p = _M_data();
  419030:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419034:	48 89 c7             	mov    %rax,%rdi
  419037:	e8 da e4 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  41903c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  419040:	b8 00 00 00 00       	mov    $0x0,%eax
      if (std::__is_constant_evaluated() && __n > size())
  419045:	84 c0                	test   %al,%al
  419047:	74 19                	je     419062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5a>
  419049:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41904d:	48 89 c7             	mov    %rax,%rdi
  419050:	e8 3b bd fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  419055:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  419059:	73 07                	jae    419062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5a>
  41905b:	b8 01 00 00 00       	mov    $0x1,%eax
  419060:	eb 05                	jmp    419067 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x5f>
  419062:	b8 00 00 00 00       	mov    $0x0,%eax
  419067:	84 c0                	test   %al,%al
  419069:	74 39                	je     4190a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x9c>
	traits_type::assign(__p + size(), __n - size(), _CharT());
  41906b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41906f:	48 89 c7             	mov    %rax,%rdi
  419072:	e8 19 bd fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  419077:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41907b:	48 89 d3             	mov    %rdx,%rbx
  41907e:	48 29 c3             	sub    %rax,%rbx
  419081:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419085:	48 89 c7             	mov    %rax,%rdi
  419088:	e8 03 bd fe ff       	call   404d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
  41908d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  419091:	48 01 d0             	add    %rdx,%rax
  419094:	ba 00 00 00 00       	mov    $0x0,%edx
  419099:	48 89 de             	mov    %rbx,%rsi
  41909c:	48 89 c7             	mov    %rax,%rdi
  41909f:	e8 15 b9 fe ff       	call   4049b9 <_ZNSt11char_traitsIcE6assignEPcmc>
      _Terminator __term{this, 0};
  4190a4:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4190a8:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  4190ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4190b0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      auto __r = std::move(__op)(__p + 0, __n + 0);
  4190b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4190b8:	48 89 c7             	mov    %rax,%rdi
  4190bb:	e8 a0 0b 00 00       	call   419c60 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeEUlPcmE_EONSt16remove_referenceIT_E4typeEOSE_>
  4190c0:	48 89 c1             	mov    %rax,%rcx
  4190c3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4190c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4190cb:	48 89 c6             	mov    %rax,%rsi
  4190ce:	48 89 cf             	mov    %rcx,%rdi
  4190d1:	e8 84 cb ff ff       	call   415c5a <_ZZNKSt8__format14__formatter_fpIcE11_M_localizeB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeENKUlPcmE_clES9_m>
  4190d6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      __term._M_r = size_type(__r);
  4190da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4190de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__term._M_r > __n)
  4190e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4190e6:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    }
  4190ea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4190ee:	48 89 c7             	mov    %rax,%rdi
  4190f1:	e8 e8 fe ff ff       	call   418fde <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>
  4190f6:	eb 1a                	jmp    419112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_+0x10a>
  4190f8:	48 89 c3             	mov    %rax,%rbx
  4190fb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4190ff:	48 89 c7             	mov    %rax,%rdi
  419102:	e8 d7 fe ff ff       	call   418fde <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE20resize_and_overwriteIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcS2_EcRKSt6localeEUlPcmE_EEvmT_EN11_TerminatorD1Ev>
  419107:	48 89 d8             	mov    %rbx,%rax
  41910a:	48 89 c7             	mov    %rax,%rdi
  41910d:	e8 fe b2 fe ff       	call   404410 <_Unwind_Resume@plt>
  419112:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419116:	c9                   	leave
  419117:	c3                   	ret

0000000000419118 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
  419118:	55                   	push   %rbp
  419119:	48 89 e5             	mov    %rsp,%rbp
  41911c:	48 83 ec 20          	sub    $0x20,%rsp
  419120:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  419124:	89 75 e4             	mov    %esi,-0x1c(%rbp)
      { return __normal_iterator(_M_current++); }
  419127:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41912b:	48 8b 00             	mov    (%rax),%rax
  41912e:	48 8d 48 01          	lea    0x1(%rax),%rcx
  419132:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  419136:	48 89 0a             	mov    %rcx,(%rdx)
  419139:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41913d:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  419141:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  419145:	48 89 d6             	mov    %rdx,%rsi
  419148:	48 89 c7             	mov    %rax,%rdi
  41914b:	e8 b6 37 ff ff       	call   40c906 <_ZN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEC1ERKS1_>
  419150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  419154:	c9                   	leave
  419155:	c3                   	ret

0000000000419156 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt4spanIcLm18446744073709551615EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
  419156:	55                   	push   %rbp
  419157:	48 89 e5             	mov    %rsp,%rbp
  41915a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  41915e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419162:	48 8b 00             	mov    (%rax),%rax
  419165:	5d                   	pop    %rbp
  419166:	c3                   	ret
  419167:	90                   	nop

0000000000419168 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE15_First_and_currIS2_EC1ES2_S2_>:
	  _First_and_curr(_It __first, _It __curr)
  419168:	55                   	push   %rbp
  419169:	48 89 e5             	mov    %rsp,%rbp
  41916c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  419170:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  419174:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  : _M_first(__first), _M_curr(__curr) { }
  419178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41917c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  419180:	48 89 10             	mov    %rdx,(%rax)
  419183:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419187:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41918b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41918f:	90                   	nop
  419190:	5d                   	pop    %rbp
  419191:	c3                   	ret

0000000000419192 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>:
      _M_read()
  419192:	55                   	push   %rbp
  419193:	48 89 e5             	mov    %rsp,%rbp
  419196:	48 83 ec 10          	sub    $0x10,%rsp
  41919a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	    _M_read_utf32();
  41919e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4191a2:	48 89 c7             	mov    %rax,%rdi
  4191a5:	e8 c4 0a 00 00       	call   419c6e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev>
      }
  4191aa:	90                   	nop
  4191ab:	c9                   	leave
  4191ac:	c3                   	ret
  4191ad:	90                   	nop

00000000004191ae <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardC1EPS4_>:
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
  4191ae:	55                   	push   %rbp
  4191af:	48 89 e5             	mov    %rsp,%rbp
  4191b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4191b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4191ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4191be:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4191c2:	48 89 10             	mov    %rdx,(%rax)
  4191c5:	90                   	nop
  4191c6:	5d                   	pop    %rbp
  4191c7:	c3                   	ret

00000000004191c8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>:
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
  4191c8:	55                   	push   %rbp
  4191c9:	48 89 e5             	mov    %rsp,%rbp
  4191cc:	48 83 ec 10          	sub    $0x10,%rsp
  4191d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4191d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4191d8:	48 8b 00             	mov    (%rax),%rax
  4191db:	48 85 c0             	test   %rax,%rax
  4191de:	74 0f                	je     4191ef <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev+0x27>
  4191e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4191e4:	48 8b 00             	mov    (%rax),%rax
  4191e7:	48 89 c7             	mov    %rax,%rdi
  4191ea:	e8 91 05 ff ff       	call   409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  4191ef:	90                   	nop
  4191f0:	c9                   	leave
  4191f1:	c3                   	ret

00000000004191f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
  4191f2:	55                   	push   %rbp
  4191f3:	48 89 e5             	mov    %rsp,%rbp
  4191f6:	53                   	push   %rbx
  4191f7:	48 83 ec 58          	sub    $0x58,%rsp
  4191fb:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
	size_type __len = 0;
  4191ff:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  419206:	00
	size_type __capacity = size_type(_S_local_capacity);
  419207:	48 c7 45 c0 0f 00 00 	movq   $0xf,-0x40(%rbp)
  41920e:	00
  41920f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  419213:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (std::is_constant_evaluated())
  419217:	e8 60 b4 fe ff       	call   40467c <_ZSt21is_constant_evaluatedv>
  41921c:	84 c0                	test   %al,%al
  41921e:	74 28                	je     419248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x56>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  419220:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  419227:	00
  419228:	eb 17                	jmp    419241 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x4f>
	    _M_local_buf[__i] = _CharT();
  41922a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41922e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  419232:	48 01 d0             	add    %rdx,%rax
  419235:	48 83 c0 10          	add    $0x10,%rax
  419239:	c6 00 00             	movb   $0x0,(%rax)
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
  41923c:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
  419241:	48 83 7d d0 0f       	cmpq   $0xf,-0x30(%rbp)
  419246:	76 e2                	jbe    41922a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x38>
      }
  419248:	90                   	nop
	while (__beg != __end && __len < __capacity)
  419249:	eb 28                	jmp    419273 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x81>
	    _M_local_buf[__len++] = *__beg;
  41924b:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  41924f:	e8 e8 0a 00 00       	call   419d3c <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>
  419254:	89 c2                	mov    %eax,%edx
  419256:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41925a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  41925e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  419262:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  419266:	88 54 01 10          	mov    %dl,0x10(%rcx,%rax,1)
	    ++__beg;
  41926a:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  41926e:	e8 f5 0a 00 00       	call   419d68 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>
	while (__beg != __end && __len < __capacity)
  419273:	48 83 ec 28          	sub    $0x28,%rsp
  419277:	48 89 e0             	mov    %rsp,%rax
  41927a:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  41927e:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  419282:	48 89 08             	mov    %rcx,(%rax)
  419285:	48 89 58 08          	mov    %rbx,0x8(%rax)
  419289:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  41928d:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  419291:	48 89 48 10          	mov    %rcx,0x10(%rax)
  419295:	48 89 58 18          	mov    %rbx,0x18(%rax)
  419299:	48 8b 55 58          	mov    0x58(%rbp),%rdx
  41929d:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4192a1:	48 83 ec 28          	sub    $0x28,%rsp
  4192a5:	48 89 e0             	mov    %rsp,%rax
  4192a8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4192ac:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4192b0:	48 89 08             	mov    %rcx,(%rax)
  4192b3:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4192b7:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  4192bb:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  4192bf:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4192c3:	48 89 58 18          	mov    %rbx,0x18(%rax)
  4192c7:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  4192cb:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4192cf:	e8 20 0a 00 00       	call   419cf4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>
  4192d4:	48 83 c4 50          	add    $0x50,%rsp
  4192d8:	83 f0 01             	xor    $0x1,%eax
  4192db:	84 c0                	test   %al,%al
  4192dd:	74 11                	je     4192f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0xfe>
  4192df:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4192e3:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  4192e7:	73 07                	jae    4192f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0xfe>
  4192e9:	b8 01 00 00 00       	mov    $0x1,%eax
  4192ee:	eb 05                	jmp    4192f5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x103>
  4192f0:	b8 00 00 00 00       	mov    $0x0,%eax
  4192f5:	84 c0                	test   %al,%al
  4192f7:	0f 85 4e ff ff ff    	jne    41924b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x59>
	} __guard(this);
  4192fd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  419301:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  419305:	48 89 d6             	mov    %rdx,%rsi
  419308:	48 89 c7             	mov    %rax,%rdi
  41930b:	e8 9e fe ff ff       	call   4191ae <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardC1EPS4_>
	while (__beg != __end)
  419310:	e9 c7 00 00 00       	jmp    4193dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x1ea>
	    if (__len == __capacity)
  419315:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419319:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  41931d:	75 7b                	jne    41939a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x1a8>
		__capacity = __len + 1;
  41931f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419323:	48 83 c0 01          	add    $0x1,%rax
  419327:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		pointer __another = _M_create(__capacity, __len);
  41932b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41932f:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  419333:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  419337:	48 89 ce             	mov    %rcx,%rsi
  41933a:	48 89 c7             	mov    %rax,%rdi
  41933d:	e8 94 1b ff ff       	call   40aed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
  419342:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		this->_S_copy(__another, _M_data(), __len);
  419346:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41934a:	48 89 c7             	mov    %rax,%rdi
  41934d:	e8 c4 e1 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  419352:	48 89 c1             	mov    %rax,%rcx
  419355:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  419359:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  41935d:	48 89 ce             	mov    %rcx,%rsi
  419360:	48 89 c7             	mov    %rax,%rdi
  419363:	e8 ae 2d ff ff       	call   40c116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
		_M_dispose();
  419368:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41936c:	48 89 c7             	mov    %rax,%rdi
  41936f:	e8 0c 04 ff ff       	call   409780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
		_M_data(__another);
  419374:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  419378:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41937c:	48 89 d6             	mov    %rdx,%rsi
  41937f:	48 89 c7             	mov    %rax,%rdi
  419382:	e8 51 04 ff ff       	call   4097d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		_M_capacity(__capacity);
  419387:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  41938b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41938f:	48 89 d6             	mov    %rdx,%rsi
  419392:	48 89 c7             	mov    %rax,%rdi
  419395:	e8 58 04 ff ff       	call   4097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	    traits_type::assign(_M_data()[__len++], *__beg);
  41939a:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  41939e:	e8 99 09 00 00       	call   419d3c <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>
  4193a3:	88 45 cf             	mov    %al,-0x31(%rbp)
  4193a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4193aa:	48 89 c7             	mov    %rax,%rdi
  4193ad:	e8 64 e1 fe ff       	call   407516 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
  4193b2:	48 89 c2             	mov    %rax,%rdx
  4193b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4193b9:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4193bd:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  4193c1:	48 01 c2             	add    %rax,%rdx
  4193c4:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
  4193c8:	48 89 c6             	mov    %rax,%rsi
  4193cb:	48 89 d7             	mov    %rdx,%rdi
  4193ce:	e8 4f b3 fe ff       	call   404722 <_ZNSt11char_traitsIcE6assignERcRKc>
	    ++__beg;
  4193d3:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4193d7:	e8 8c 09 00 00       	call   419d68 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>
	while (__beg != __end)
  4193dc:	48 83 ec 28          	sub    $0x28,%rsp
  4193e0:	48 89 e0             	mov    %rsp,%rax
  4193e3:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  4193e7:	48 8b 5d 40          	mov    0x40(%rbp),%rbx
  4193eb:	48 89 08             	mov    %rcx,(%rax)
  4193ee:	48 89 58 08          	mov    %rbx,0x8(%rax)
  4193f2:	48 8b 4d 48          	mov    0x48(%rbp),%rcx
  4193f6:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  4193fa:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4193fe:	48 89 58 18          	mov    %rbx,0x18(%rax)
  419402:	48 8b 55 58          	mov    0x58(%rbp),%rdx
  419406:	48 89 50 20          	mov    %rdx,0x20(%rax)
  41940a:	48 83 ec 28          	sub    $0x28,%rsp
  41940e:	48 89 e0             	mov    %rsp,%rax
  419411:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  419415:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  419419:	48 89 08             	mov    %rcx,(%rax)
  41941c:	48 89 58 08          	mov    %rbx,0x8(%rax)
  419420:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  419424:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  419428:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41942c:	48 89 58 18          	mov    %rbx,0x18(%rax)
  419430:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  419434:	48 89 50 20          	mov    %rdx,0x20(%rax)
  419438:	e8 b7 08 00 00       	call   419cf4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>
  41943d:	48 83 c4 50          	add    $0x50,%rsp
  419441:	83 f0 01             	xor    $0x1,%eax
  419444:	84 c0                	test   %al,%al
  419446:	0f 85 c9 fe ff ff    	jne    419315 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x123>
	__guard._M_guarded = 0;
  41944c:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  419453:	00
	_M_set_length(__len);
  419454:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  419458:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  41945c:	48 89 d6             	mov    %rdx,%rsi
  41945f:	48 89 c7             	mov    %rax,%rdi
  419462:	e8 c1 e0 fe ff       	call   407528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
  419467:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  41946b:	48 89 c7             	mov    %rax,%rdi
  41946e:	e8 55 fd ff ff       	call   4191c8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>
  419473:	eb 1a                	jmp    41948f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tag+0x29d>
  419475:	48 89 c3             	mov    %rax,%rbx
  419478:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  41947c:	48 89 c7             	mov    %rax,%rdi
  41947f:	e8 44 fd ff ff       	call   4191c8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructINSt9__unicode13_Utf_iteratorIDicPKDiS9_NS6_5_ReplEEEEEvT_SC_St18input_iterator_tagEN6_GuardD1Ev>
  419484:	48 89 d8             	mov    %rbx,%rax
  419487:	48 89 c7             	mov    %rax,%rdi
  41948a:	e8 81 af fe ff       	call   404410 <_Unwind_Resume@plt>
  41948f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419493:	c9                   	leave
  419494:	c3                   	ret

0000000000419495 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIdNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  419495:	55                   	push   %rbp
  419496:	48 89 e5             	mov    %rsp,%rbp
  419499:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41949d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4194a1:	5d                   	pop    %rbp
  4194a2:	c3                   	ret

00000000004194a3 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIeNS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  4194a3:	55                   	push   %rbp
  4194a4:	48 89 e5             	mov    %rsp,%rbp
  4194a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4194ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4194af:	5d                   	pop    %rbp
  4194b0:	c3                   	ret
  4194b1:	90                   	nop

00000000004194b2 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_baseC1Ev>:
  struct _Grapheme_cluster_iterator_base
  4194b2:	55                   	push   %rbp
  4194b3:	48 89 e5             	mov    %rsp,%rbp
  4194b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4194ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4194be:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  4194c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4194c6:	c6 40 09 00          	movb   $0x0,0x9(%rax)
  4194ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4194ce:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
  4194d2:	90                   	nop
  4194d3:	5d                   	pop    %rbp
  4194d4:	c3                   	ret
  4194d5:	90                   	nop

00000000004194d6 <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE>:
	_Iterator(_U32_iterator __i)
  4194d6:	55                   	push   %rbp
  4194d7:	48 89 e5             	mov    %rsp,%rbp
  4194da:	53                   	push   %rbx
  4194db:	48 83 ec 18          	sub    $0x18,%rsp
  4194df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	: _M_base(__i)
  4194e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4194e7:	48 89 c7             	mov    %rax,%rdi
  4194ea:	e8 c3 ff ff ff       	call   4194b2 <_ZNSt9__unicode9__v15_1_031_Grapheme_cluster_iterator_baseC1Ev>
  4194ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4194f3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  4194f7:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  4194fb:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4194ff:	48 89 58 18          	mov    %rbx,0x18(%rax)
  419503:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  419507:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  41950b:	48 89 48 20          	mov    %rcx,0x20(%rax)
  41950f:	48 89 58 28          	mov    %rbx,0x28(%rax)
  419513:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  419517:	48 89 50 30          	mov    %rdx,0x30(%rax)
	  if (__i != __i.end())
  41951b:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  41951f:	e8 a2 ea ff ff       	call   417fc6 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE3endEv>
  419524:	48 89 c6             	mov    %rax,%rsi
  419527:	48 83 ec 08          	sub    $0x8,%rsp
  41952b:	48 83 ec 28          	sub    $0x28,%rsp
  41952f:	48 89 e0             	mov    %rsp,%rax
  419532:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  419536:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  41953a:	48 89 08             	mov    %rcx,(%rax)
  41953d:	48 89 58 08          	mov    %rbx,0x8(%rax)
  419541:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  419545:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  419549:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41954d:	48 89 58 18          	mov    %rbx,0x18(%rax)
  419551:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  419555:	48 89 50 20          	mov    %rdx,0x20(%rax)
  419559:	48 89 f7             	mov    %rsi,%rdi
  41955c:	e8 35 00 00 00       	call   419596 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>
  419561:	48 83 c4 30          	add    $0x30,%rsp
  419565:	83 f0 01             	xor    $0x1,%eax
  419568:	84 c0                	test   %al,%al
  41956a:	74 23                	je     41958f <_ZNSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_IteratorC1ENS_13_Utf_iteratorIcDiPKcSA_NS_5_ReplEEE+0xb9>
	      _M_c = *__i;
  41956c:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419570:	e8 43 17 ff ff       	call   40acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  419575:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  419579:	89 02                	mov    %eax,(%rdx)
	      _M_prop = __grapheme_cluster_break_property(_M_c);
  41957b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41957f:	8b 00                	mov    (%rax),%eax
  419581:	89 c7                	mov    %eax,%edi
  419583:	e8 f5 b8 fe ff       	call   404e7d <_ZNSt9__unicode9__v15_1_033__grapheme_cluster_break_propertyEDi>
  419588:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41958c:	89 42 04             	mov    %eax,0x4(%rdx)
	}
  41958f:	90                   	nop
  419590:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419594:	c9                   	leave
  419595:	c3                   	ret

0000000000419596 <_ZNSt9__unicodeeqENS_13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEES2_>:
      operator==(_Utf_iterator __lhs, _Sent __rhs)
  419596:	55                   	push   %rbp
  419597:	48 89 e5             	mov    %rsp,%rbp
  41959a:	48 83 ec 10          	sub    $0x10,%rsp
  41959e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  return __lhs._M_curr() == __rhs;
  4195a2:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4195a6:	e8 0d 16 ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  4195ab:	48 8b 00             	mov    (%rax),%rax
  4195ae:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4195b2:	0f 94 c0             	sete   %al
      }
  4195b5:	c9                   	leave
  4195b6:	c3                   	ret
  4195b7:	90                   	nop

00000000004195b8 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE>:
	_M_is_break(_Gcb_property __p1, _Gcb_property __p2,
  4195b8:	55                   	push   %rbp
  4195b9:	48 89 e5             	mov    %rsp,%rbp
  4195bc:	53                   	push   %rbx
  4195bd:	48 83 ec 48          	sub    $0x48,%rsp
  4195c1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4195c5:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  4195c8:	89 55 b0             	mov    %edx,-0x50(%rbp)
	  if (__p1 == _Gcb_Control || __p1 == _Gcb_LF)
  4195cb:	83 7d b4 01          	cmpl   $0x1,-0x4c(%rbp)
  4195cf:	74 06                	je     4195d7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1f>
  4195d1:	83 7d b4 02          	cmpl   $0x2,-0x4c(%rbp)
  4195d5:	75 0a                	jne    4195e1 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x29>
	    return true; // Break after Control or LF.
  4195d7:	b8 01 00 00 00       	mov    $0x1,%eax
  4195dc:	e9 dd 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_CR)
  4195e1:	83 7d b4 03          	cmpl   $0x3,-0x4c(%rbp)
  4195e5:	75 0c                	jne    4195f3 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x3b>
	    return __p2 != _Gcb_LF; // Do not break between a CR and LF.
  4195e7:	83 7d b0 02          	cmpl   $0x2,-0x50(%rbp)
  4195eb:	0f 95 c0             	setne  %al
  4195ee:	e9 cb 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_Control || __p2 == _Gcb_CR || __p2 == _Gcb_LF)
  4195f3:	83 7d b0 01          	cmpl   $0x1,-0x50(%rbp)
  4195f7:	74 0c                	je     419605 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x4d>
  4195f9:	83 7d b0 03          	cmpl   $0x3,-0x50(%rbp)
  4195fd:	74 06                	je     419605 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x4d>
  4195ff:	83 7d b0 02          	cmpl   $0x2,-0x50(%rbp)
  419603:	75 0a                	jne    41960f <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x57>
	    return true; // Break before Control, CR or LF.
  419605:	b8 01 00 00 00       	mov    $0x1,%eax
  41960a:	e9 af 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_L)
  41960f:	83 7d b4 07          	cmpl   $0x7,-0x4c(%rbp)
  419613:	75 2d                	jne    419642 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x8a>
	    switch (__p2)
  419615:	83 7d b0 08          	cmpl   $0x8,-0x50(%rbp)
  419619:	7f 08                	jg     419623 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x6b>
  41961b:	83 7d b0 07          	cmpl   $0x7,-0x50(%rbp)
  41961f:	7d 0d                	jge    41962e <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x76>
  419621:	eb 15                	jmp    419638 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x80>
  419623:	8b 45 b0             	mov    -0x50(%rbp),%eax
  419626:	83 e8 0b             	sub    $0xb,%eax
  419629:	83 f8 01             	cmp    $0x1,%eax
  41962c:	77 0a                	ja     419638 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x80>
		return false; // Do not break Hangul syllable sequences.
  41962e:	b8 00 00 00 00       	mov    $0x0,%eax
  419633:	e9 86 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
		return true;
  419638:	b8 01 00 00 00       	mov    $0x1,%eax
  41963d:	e9 7c 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_LV || __p1 == _Gcb_V)
  419642:	83 7d b4 0b          	cmpl   $0xb,-0x4c(%rbp)
  419646:	74 06                	je     41964e <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x96>
  419648:	83 7d b4 08          	cmpl   $0x8,-0x4c(%rbp)
  41964c:	75 1f                	jne    41966d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xb5>
  41964e:	8b 45 b0             	mov    -0x50(%rbp),%eax
  419651:	83 e8 08             	sub    $0x8,%eax
	    switch (__p2)
  419654:	83 f8 01             	cmp    $0x1,%eax
  419657:	77 0a                	ja     419663 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xab>
		return false; // Do not break Hangul syllable sequences.
  419659:	b8 00 00 00 00       	mov    $0x0,%eax
  41965e:	e9 5b 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
		return true;
  419663:	b8 01 00 00 00       	mov    $0x1,%eax
  419668:	e9 51 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_LVT || __p1 == _Gcb_T)
  41966d:	83 7d b4 0c          	cmpl   $0xc,-0x4c(%rbp)
  419671:	74 06                	je     419679 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xc1>
  419673:	83 7d b4 09          	cmpl   $0x9,-0x4c(%rbp)
  419677:	75 0c                	jne    419685 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xcd>
	    return __p2 != _Gcb_T; // Do not break Hangul syllable sequences.
  419679:	83 7d b0 09          	cmpl   $0x9,-0x50(%rbp)
  41967d:	0f 95 c0             	setne  %al
  419680:	e9 39 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_Extend || __p2 == _Gcb_ZWJ)
  419685:	83 7d b0 04          	cmpl   $0x4,-0x50(%rbp)
  419689:	74 06                	je     419691 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xd9>
  41968b:	83 7d b0 0a          	cmpl   $0xa,-0x50(%rbp)
  41968f:	75 0a                	jne    41969b <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xe3>
	    return false; // Do not break before extending characters or ZWJ.
  419691:	b8 00 00 00 00       	mov    $0x0,%eax
  419696:	e9 23 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p2 == _Gcb_SpacingMark)
  41969b:	83 7d b0 06          	cmpl   $0x6,-0x50(%rbp)
  41969f:	75 0a                	jne    4196ab <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0xf3>
	    return false; // Do not break before SpacingMarks,
  4196a1:	b8 00 00 00 00       	mov    $0x0,%eax
  4196a6:	e9 13 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_Prepend)
  4196ab:	83 7d b4 05          	cmpl   $0x5,-0x4c(%rbp)
  4196af:	75 0a                	jne    4196bb <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x103>
	    return false; // or after Prepend characters.
  4196b1:	b8 00 00 00 00       	mov    $0x0,%eax
  4196b6:	e9 03 02 00 00       	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (_M_incb_linker_seen
  4196bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4196bf:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
		&& __incb_property(*__curr) == _InCB::_Consonant)
  4196c3:	84 c0                	test   %al,%al
  4196c5:	74 2e                	je     4196f5 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
		&& __incb_property(_M_c) == _InCB::_Consonant
  4196c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4196cb:	8b 00                	mov    (%rax),%eax
  4196cd:	89 c7                	mov    %eax,%edi
  4196cf:	e8 2a b8 fe ff       	call   404efe <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  4196d4:	83 f8 01             	cmp    $0x1,%eax
  4196d7:	75 1c                	jne    4196f5 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
		&& __incb_property(*__curr) == _InCB::_Consonant)
  4196d9:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  4196dd:	e8 d6 15 ff ff       	call   40acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  4196e2:	89 c7                	mov    %eax,%edi
  4196e4:	e8 15 b8 fe ff       	call   404efe <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  4196e9:	83 f8 01             	cmp    $0x1,%eax
  4196ec:	75 07                	jne    4196f5 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x13d>
  4196ee:	b8 01 00 00 00       	mov    $0x1,%eax
  4196f3:	eb 05                	jmp    4196fa <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x142>
  4196f5:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (_M_incb_linker_seen
  4196fa:	84 c0                	test   %al,%al
  4196fc:	0f 84 7b 01 00 00    	je     41987d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2c5>
	      bool __have_linker = false;
  419702:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
	      auto __it = _M_base;
  419706:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  41970a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  41970e:	48 8b 58 18          	mov    0x18(%rax),%rbx
  419712:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  419716:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
  41971a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  41971e:	48 8b 58 28          	mov    0x28(%rax),%rbx
  419722:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  419726:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  41972a:	48 8b 40 30          	mov    0x30(%rax),%rax
  41972e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      while (++__it != __curr)
  419732:	eb 45                	jmp    419779 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		  if (__is_incb_linker(*__it))
  419734:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  419738:	48 89 c7             	mov    %rax,%rdi
  41973b:	e8 78 15 ff ff       	call   40acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  419740:	89 c7                	mov    %eax,%edi
  419742:	e8 85 b7 fe ff       	call   404ecc <_ZNSt9__unicode9__v15_1_016__is_incb_linkerEDi>
  419747:	84 c0                	test   %al,%al
  419749:	74 06                	je     419751 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x199>
		    __have_linker = true;
  41974b:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  41974f:	eb 28                	jmp    419779 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		      auto __incb = __incb_property(*__it);
  419751:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  419755:	48 89 c7             	mov    %rax,%rdi
  419758:	e8 5b 15 ff ff       	call   40acb8 <_ZNKSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEdeEv>
  41975d:	89 c7                	mov    %eax,%edi
  41975f:	e8 9a b7 fe ff       	call   404efe <_ZNSt9__unicode9__v15_1_015__incb_propertyEDi>
  419764:	89 45 e8             	mov    %eax,-0x18(%rbp)
		      if (__incb == _InCB::_Consonant)
  419767:	83 7d e8 01          	cmpl   $0x1,-0x18(%rbp)
  41976b:	75 06                	jne    419773 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1bb>
			__have_linker = false;
  41976d:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  419771:	eb 06                	jmp    419779 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x1c1>
		      else if (__incb != _InCB::_Extend)
  419773:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  419777:	75 7d                	jne    4197f6 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x23e>
	      while (++__it != __curr)
  419779:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  41977d:	48 89 c7             	mov    %rax,%rdi
  419780:	e8 93 27 ff ff       	call   40bf18 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEppEv>
  419785:	48 83 ec 28          	sub    $0x28,%rsp
  419789:	48 89 e2             	mov    %rsp,%rdx
  41978c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  419790:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  419794:	48 89 0a             	mov    %rcx,(%rdx)
  419797:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  41979b:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  41979f:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  4197a3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  4197a7:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  4197ab:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  4197af:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
  4197b3:	48 83 ec 28          	sub    $0x28,%rsp
  4197b7:	48 89 e2             	mov    %rsp,%rdx
  4197ba:	48 8b 08             	mov    (%rax),%rcx
  4197bd:	48 8b 58 08          	mov    0x8(%rax),%rbx
  4197c1:	48 89 0a             	mov    %rcx,(%rdx)
  4197c4:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  4197c8:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4197cc:	48 8b 58 18          	mov    0x18(%rax),%rbx
  4197d0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  4197d4:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  4197d8:	48 8b 40 20          	mov    0x20(%rax),%rax
  4197dc:	48 89 42 20          	mov    %rax,0x20(%rdx)
  4197e0:	e8 8e 06 00 00       	call   419e73 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>
  4197e5:	48 83 c4 50          	add    $0x50,%rsp
  4197e9:	83 f0 01             	xor    $0x1,%eax
  4197ec:	84 c0                	test   %al,%al
  4197ee:	0f 85 40 ff ff ff    	jne    419734 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x17c>
  4197f4:	eb 01                	jmp    4197f7 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x23f>
			break;
  4197f6:	90                   	nop
	      if (__it == __curr && __have_linker)
  4197f7:	48 83 ec 28          	sub    $0x28,%rsp
  4197fb:	48 89 e0             	mov    %rsp,%rax
  4197fe:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  419802:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  419806:	48 89 08             	mov    %rcx,(%rax)
  419809:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41980d:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  419811:	48 8b 5d 28          	mov    0x28(%rbp),%rbx
  419815:	48 89 48 10          	mov    %rcx,0x10(%rax)
  419819:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41981d:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  419821:	48 89 50 20          	mov    %rdx,0x20(%rax)
  419825:	48 83 ec 28          	sub    $0x28,%rsp
  419829:	48 89 e0             	mov    %rsp,%rax
  41982c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  419830:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  419834:	48 89 08             	mov    %rcx,(%rax)
  419837:	48 89 58 08          	mov    %rbx,0x8(%rax)
  41983b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  41983f:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  419843:	48 89 48 10          	mov    %rcx,0x10(%rax)
  419847:	48 89 58 18          	mov    %rbx,0x18(%rax)
  41984b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  41984f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  419853:	e8 1b 06 00 00       	call   419e73 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>
  419858:	48 83 c4 50          	add    $0x50,%rsp
  41985c:	84 c0                	test   %al,%al
  41985e:	74 0d                	je     41986d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2b5>
  419860:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  419864:	74 07                	je     41986d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2b5>
  419866:	b8 01 00 00 00       	mov    $0x1,%eax
  41986b:	eb 05                	jmp    419872 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2ba>
  41986d:	b8 00 00 00 00       	mov    $0x0,%eax
  419872:	84 c0                	test   %al,%al
  419874:	74 07                	je     41987d <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2c5>
		return false;
  419876:	b8 00 00 00 00       	mov    $0x0,%eax
  41987b:	eb 41                	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_ZWJ && _M_xpicto_seq_state == _XPicto::_Matched)
  41987d:	83 7d b4 0a          	cmpl   $0xa,-0x4c(%rbp)
  419881:	75 13                	jne    419896 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2de>
  419883:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  419887:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  41988b:	3c 02                	cmp    $0x2,%al
  41988d:	75 07                	jne    419896 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x2de>
	    return false;
  41988f:	b8 00 00 00 00       	mov    $0x0,%eax
  419894:	eb 28                	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  if (__p1 == _Gcb_property::_Gcb_Regional_Indicator && __p1 == __p2)
  419896:	83 7d b4 0d          	cmpl   $0xd,-0x4c(%rbp)
  41989a:	75 1d                	jne    4198b9 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x301>
  41989c:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  41989f:	3b 45 b0             	cmp    -0x50(%rbp),%eax
  4198a2:	75 15                	jne    4198b9 <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x301>
	    return (_M_RI_count & 1) == 0;
  4198a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4198a8:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  4198ac:	0f b6 c0             	movzbl %al,%eax
  4198af:	83 e0 01             	and    $0x1,%eax
  4198b2:	85 c0                	test   %eax,%eax
  4198b4:	0f 94 c0             	sete   %al
  4198b7:	eb 05                	jmp    4198be <_ZNKSt9__unicode9__v15_1_022_Grapheme_cluster_viewISt17basic_string_viewIcSt11char_traitsIcEEE9_Iterator11_M_is_breakENS0_13_Gcb_propertyES8_NS_13_Utf_iteratorIcDiPKcSB_NS_5_ReplEEE+0x306>
	  return true; // Otherwise, break everywhere.
  4198b9:	b8 01 00 00 00       	mov    $0x1,%eax
	}
  4198be:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4198c2:	c9                   	leave
  4198c3:	c3                   	ret

00000000004198c4 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE6formatIDF128_NS0_10_Sink_iterIcEEEENSt20basic_format_contextIT0_cE8iteratorET_RS8_EUlPcmE0_EONSt16remove_referenceISA_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
  4198c4:	55                   	push   %rbp
  4198c5:	48 89 e5             	mov    %rsp,%rbp
  4198c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  4198cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4198d0:	5d                   	pop    %rbp
  4198d1:	c3                   	ret

00000000004198d2 <_ZSt11__bit_widthIoEiT_>:
    __bit_width(_Tp __x) noexcept
  4198d2:	55                   	push   %rbp
  4198d3:	48 89 e5             	mov    %rsp,%rbp
  4198d6:	48 83 ec 20          	sub    $0x20,%rsp
  4198da:	48 89 f8             	mov    %rdi,%rax
  4198dd:	48 89 f1             	mov    %rsi,%rcx
  4198e0:	48 89 c0             	mov    %rax,%rax
  4198e3:	ba 00 00 00 00       	mov    $0x0,%edx
  4198e8:	48 89 ca             	mov    %rcx,%rdx
  4198eb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4198ef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
  4198f3:	c7 45 fc 80 00 00 00 	movl   $0x80,-0x4(%rbp)
      return _Nd - std::__countl_zero(__x);
  4198fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4198fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419902:	48 89 d7             	mov    %rdx,%rdi
  419905:	48 89 c6             	mov    %rax,%rsi
  419908:	e8 ad 05 00 00       	call   419eba <_ZSt13__countl_zeroIoEiT_>
  41990d:	ba 80 00 00 00       	mov    $0x80,%edx
  419912:	29 c2                	sub    %eax,%edx
  419914:	89 d0                	mov    %edx,%eax
    }
  419916:	c9                   	leave
  419917:	c3                   	ret

0000000000419918 <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  419918:	55                   	push   %rbp
  419919:	48 89 e5             	mov    %rsp,%rbp
  41991c:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  419923:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  41992a:	89 b5 f4 fe ff ff    	mov    %esi,-0x10c(%rbp)
  419930:	48 89 95 e0 fe ff ff 	mov    %rdx,-0x120(%rbp)
  419937:	48 89 8d e8 fe ff ff 	mov    %rcx,-0x118(%rbp)
      constexpr char __digits[201] =
  41993e:	48 b8 30 30 30 31 30 	movabs $0x3330323031303030,%rax
  419945:	32 30 33
  419948:	48 ba 30 34 30 35 30 	movabs $0x3730363035303430,%rdx
  41994f:	36 30 37
  419952:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  419959:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  419960:	48 b8 30 38 30 39 31 	movabs $0x3131303139303830,%rax
  419967:	30 31 31
  41996a:	48 ba 31 32 31 33 31 	movabs $0x3531343133313231,%rdx
  419971:	34 31 35
  419974:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  41997b:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  419982:	48 b8 31 36 31 37 31 	movabs $0x3931383137313631,%rax
  419989:	38 31 39
  41998c:	48 ba 32 30 32 31 32 	movabs $0x3332323231323032,%rdx
  419993:	32 32 33
  419996:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  41999d:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  4199a4:	48 b8 32 34 32 35 32 	movabs $0x3732363235323432,%rax
  4199ab:	36 32 37
  4199ae:	48 ba 32 38 32 39 33 	movabs $0x3133303339323832,%rdx
  4199b5:	30 33 31
  4199b8:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4199bf:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
  4199c6:	48 b8 33 32 33 33 33 	movabs $0x3533343333333233,%rax
  4199cd:	34 33 35
  4199d0:	48 ba 33 36 33 37 33 	movabs $0x3933383337333633,%rdx
  4199d7:	38 33 39
  4199da:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4199e1:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  4199e8:	48 b8 34 30 34 31 34 	movabs $0x3334323431343034,%rax
  4199ef:	32 34 33
  4199f2:	48 ba 34 34 34 35 34 	movabs $0x3734363435343434,%rdx
  4199f9:	36 34 37
  4199fc:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  419a03:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  419a0a:	48 b8 34 38 34 39 35 	movabs $0x3135303539343834,%rax
  419a11:	30 35 31
  419a14:	48 ba 35 32 35 33 35 	movabs $0x3535343533353235,%rdx
  419a1b:	34 35 35
  419a1e:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  419a25:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  419a2c:	48 b8 35 36 35 37 35 	movabs $0x3935383537353635,%rax
  419a33:	38 35 39
  419a36:	48 ba 36 30 36 31 36 	movabs $0x3336323631363036,%rdx
  419a3d:	32 36 33
  419a40:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  419a47:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  419a4e:	48 b8 36 34 36 35 36 	movabs $0x3736363635363436,%rax
  419a55:	36 36 37
  419a58:	48 ba 36 38 36 39 37 	movabs $0x3137303739363836,%rdx
  419a5f:	30 37 31
  419a62:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  419a66:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  419a6a:	48 b8 37 32 37 33 37 	movabs $0x3537343733373237,%rax
  419a71:	34 37 35
  419a74:	48 ba 37 36 37 37 37 	movabs $0x3937383737373637,%rdx
  419a7b:	38 37 39
  419a7e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  419a82:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  419a86:	48 b8 38 30 38 31 38 	movabs $0x3338323831383038,%rax
  419a8d:	32 38 33
  419a90:	48 ba 38 34 38 35 38 	movabs $0x3738363835383438,%rdx
  419a97:	36 38 37
  419a9a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  419a9e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  419aa2:	48 b8 38 38 38 39 39 	movabs $0x3139303939383838,%rax
  419aa9:	30 39 31
  419aac:	48 ba 39 32 39 33 39 	movabs $0x3539343933393239,%rdx
  419ab3:	34 39 35
  419ab6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  419aba:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  419abe:	48 b8 32 39 33 39 34 	movabs $0x3935393439333932,%rax
  419ac5:	39 35 39
  419ac8:	48 ba 36 39 37 39 38 	movabs $0x39393839373936,%rdx
  419acf:	39 39 00
  419ad2:	48 89 45 b9          	mov    %rax,-0x47(%rbp)
  419ad6:	48 89 55 c1          	mov    %rdx,-0x3f(%rbp)
      unsigned __pos = __len - 1;
  419ada:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  419ae0:	83 e8 01             	sub    $0x1,%eax
  419ae3:	89 45 fc             	mov    %eax,-0x4(%rbp)
      while (__val >= 100)
  419ae6:	e9 c3 00 00 00       	jmp    419bae <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x296>
	  auto const __num = (__val % 100) * 2;
  419aeb:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  419af2:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  419af9:	48 89 c6             	mov    %rax,%rsi
  419afc:	48 89 d0             	mov    %rdx,%rax
  419aff:	ba 64 00 00 00       	mov    $0x64,%edx
  419b04:	b9 00 00 00 00       	mov    $0x0,%ecx
  419b09:	48 89 f7             	mov    %rsi,%rdi
  419b0c:	48 89 c6             	mov    %rax,%rsi
  419b0f:	e8 7c a8 fe ff       	call   404390 <__umodti3@plt>
  419b14:	48 01 c0             	add    %rax,%rax
  419b17:	48 11 d2             	adc    %rdx,%rdx
  419b1a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  419b1e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  __val /= 100;
  419b22:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  419b29:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  419b30:	48 89 c6             	mov    %rax,%rsi
  419b33:	48 89 d0             	mov    %rdx,%rax
  419b36:	ba 64 00 00 00       	mov    $0x64,%edx
  419b3b:	b9 00 00 00 00       	mov    $0x0,%ecx
  419b40:	48 89 f7             	mov    %rsi,%rdi
  419b43:	48 89 c6             	mov    %rax,%rsi
  419b46:	e8 35 a5 fe ff       	call   404080 <__udivti3@plt>
  419b4b:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  419b52:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	  __first[__pos] = __digits[__num + 1];
  419b59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  419b5d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  419b61:	48 83 c0 01          	add    $0x1,%rax
  419b65:	48 83 d2 00          	adc    $0x0,%rdx
  419b69:	8b 75 fc             	mov    -0x4(%rbp),%esi
  419b6c:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  419b73:	48 01 f1             	add    %rsi,%rcx
  419b76:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
  419b7d:	48 01 f0             	add    %rsi,%rax
  419b80:	0f b6 00             	movzbl (%rax),%eax
  419b83:	88 01                	mov    %al,(%rcx)
	  __first[__pos - 1] = __digits[__num];
  419b85:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419b88:	83 e8 01             	sub    $0x1,%eax
  419b8b:	89 c2                	mov    %eax,%edx
  419b8d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  419b94:	48 01 c2             	add    %rax,%rdx
  419b97:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
  419b9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  419ba2:	48 01 c8             	add    %rcx,%rax
  419ba5:	0f b6 00             	movzbl (%rax),%eax
  419ba8:	88 02                	mov    %al,(%rdx)
	  __pos -= 2;
  419baa:	83 6d fc 02          	subl   $0x2,-0x4(%rbp)
      while (__val >= 100)
  419bae:	ba 63 00 00 00       	mov    $0x63,%edx
  419bb3:	b8 00 00 00 00       	mov    $0x0,%eax
  419bb8:	48 3b 95 e0 fe ff ff 	cmp    -0x120(%rbp),%rdx
  419bbf:	48 1b 85 e8 fe ff ff 	sbb    -0x118(%rbp),%rax
  419bc6:	0f 82 1f ff ff ff    	jb     419aeb <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x1d3>
      if (__val >= 10)
  419bcc:	ba 09 00 00 00       	mov    $0x9,%edx
  419bd1:	b8 00 00 00 00       	mov    $0x0,%eax
  419bd6:	48 3b 95 e0 fe ff ff 	cmp    -0x120(%rbp),%rdx
  419bdd:	48 1b 85 e8 fe ff ff 	sbb    -0x118(%rbp),%rax
  419be4:	73 62                	jae    419c48 <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x330>
	  auto const __num = __val * 2;
  419be6:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  419bed:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  419bf4:	48 01 c0             	add    %rax,%rax
  419bf7:	48 11 d2             	adc    %rdx,%rdx
  419bfa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  419bfe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __first[1] = __digits[__num + 1];
  419c02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  419c06:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  419c0a:	48 83 c0 01          	add    $0x1,%rax
  419c0e:	48 83 d2 00          	adc    $0x0,%rdx
  419c12:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  419c19:	48 83 c1 01          	add    $0x1,%rcx
  419c1d:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
  419c24:	48 01 f0             	add    %rsi,%rax
  419c27:	0f b6 00             	movzbl (%rax),%eax
  419c2a:	88 01                	mov    %al,(%rcx)
	  __first[0] = __digits[__num];
  419c2c:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
  419c33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  419c37:	48 01 d0             	add    %rdx,%rax
  419c3a:	0f b6 10             	movzbl (%rax),%edx
  419c3d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  419c44:	88 10                	mov    %dl,(%rax)
    }
  419c46:	eb 15                	jmp    419c5d <_ZNSt8__detail18__to_chars_10_implIoEEvPcjT_+0x345>
	__first[0] = '0' + __val;
  419c48:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  419c4f:	83 c0 30             	add    $0x30,%eax
  419c52:	89 c2                	mov    %eax,%edx
  419c54:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  419c5b:	88 10                	mov    %dl,(%rax)
    }
  419c5d:	90                   	nop
  419c5e:	c9                   	leave
  419c5f:	c3                   	ret

0000000000419c60 <_ZSt4moveIRZNKSt8__format14__formatter_fpIcE11_M_localizeESt17basic_string_viewIcSt11char_traitsIcEEcRKSt6localeEUlPcmE_EONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
  419c60:	55                   	push   %rbp
  419c61:	48 89 e5             	mov    %rsp,%rbp
  419c64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  419c68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419c6c:	5d                   	pop    %rbp
  419c6d:	c3                   	ret

0000000000419c6e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev>:
      _M_read_utf32()
  419c6e:	55                   	push   %rbp
  419c6f:	48 89 e5             	mov    %rsp,%rbp
  419c72:	48 83 ec 30          	sub    $0x30,%rsp
  419c76:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	_Guard<_Iter> __g{this, _M_curr()};
  419c7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419c7e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  419c82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419c86:	48 89 c7             	mov    %rax,%rdi
  419c89:	e8 90 de ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419c8e:	48 8b 00             	mov    (%rax),%rax
  419c91:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	char32_t __c = *_M_curr()++;
  419c95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419c99:	48 89 c7             	mov    %rax,%rdi
  419c9c:	e8 7d de ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419ca1:	48 8b 10             	mov    (%rax),%rdx
  419ca4:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  419ca8:	48 89 08             	mov    %rcx,(%rax)
  419cab:	8b 02                	mov    (%rdx),%eax
  419cad:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (!__is_scalar_value(__c)) [[unlikely]]
  419cb0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419cb3:	89 c7                	mov    %eax,%edi
  419cb5:	e8 13 b1 fe ff       	call   404dcd <_ZNSt9__unicode17__is_scalar_valueEDi>
  419cba:	83 f0 01             	xor    $0x1,%eax
  419cbd:	84 c0                	test   %al,%al
  419cbf:	74 0f                	je     419cd0 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE13_M_read_utf32Ev+0x62>
	  __c = _S_error();
  419cc1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419cc5:	48 89 c7             	mov    %rax,%rdi
  419cc8:	e8 b9 02 00 00       	call   419f86 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv>
  419ccd:	89 45 fc             	mov    %eax,-0x4(%rbp)
	_M_update(__c, 1);
  419cd0:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  419cd3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419cd7:	ba 01 00 00 00       	mov    $0x1,%edx
  419cdc:	89 ce                	mov    %ecx,%esi
  419cde:	48 89 c7             	mov    %rax,%rdi
  419ce1:	e8 e2 02 00 00       	call   419fc8 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih>
      }
  419ce6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  419cea:	48 89 c7             	mov    %rax,%rdi
  419ced:	e8 5a 02 00 00       	call   419f4c <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE6_GuardIS2_ED1Ev>
  419cf2:	c9                   	leave
  419cf3:	c3                   	ret

0000000000419cf4 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_>:
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
  419cf4:	55                   	push   %rbp
  419cf5:	48 89 e5             	mov    %rsp,%rbp
  419cf8:	53                   	push   %rbx
  419cf9:	48 83 ec 08          	sub    $0x8,%rsp
	  return __lhs._M_curr() == __rhs._M_curr()
  419cfd:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419d01:	e8 18 de ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419d06:	48 8b 18             	mov    (%rax),%rbx
  419d09:	48 8d 45 38          	lea    0x38(%rbp),%rax
  419d0d:	48 89 c7             	mov    %rax,%rdi
  419d10:	e8 09 de ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419d15:	48 8b 00             	mov    (%rax),%rax
		   && __lhs._M_buf_index == __rhs._M_buf_index;
  419d18:	48 39 c3             	cmp    %rax,%rbx
  419d1b:	75 13                	jne    419d30 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419d1d:	0f b6 55 28          	movzbl 0x28(%rbp),%edx
  419d21:	0f b6 45 50          	movzbl 0x50(%rbp),%eax
  419d25:	38 c2                	cmp    %al,%dl
  419d27:	75 07                	jne    419d30 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419d29:	b8 01 00 00 00       	mov    $0x1,%eax
  419d2e:	eb 05                	jmp    419d35 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEFeqES4_S4_+0x41>
  419d30:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  419d35:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419d39:	c9                   	leave
  419d3a:	c3                   	ret
  419d3b:	90                   	nop

0000000000419d3c <_ZNKSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEdeEv>:
      operator*() const { return _M_buf[_M_buf_index]; }
  419d3c:	55                   	push   %rbp
  419d3d:	48 89 e5             	mov    %rsp,%rbp
  419d40:	48 83 ec 10          	sub    $0x10,%rsp
  419d44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  419d48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  419d4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  419d50:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
  419d54:	0f b6 d2             	movzbl %dl,%edx
  419d57:	48 89 d6             	mov    %rdx,%rsi
  419d5a:	48 89 c7             	mov    %rax,%rdi
  419d5d:	e8 94 04 00 00       	call   41a1f6 <_ZNKSt5arrayIcLm4EEixEm>
  419d62:	0f b6 00             	movzbl (%rax),%eax
  419d65:	c9                   	leave
  419d66:	c3                   	ret
  419d67:	90                   	nop

0000000000419d68 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv>:
      operator++()
  419d68:	55                   	push   %rbp
  419d69:	48 89 e5             	mov    %rsp,%rbp
  419d6c:	53                   	push   %rbx
  419d6d:	48 83 ec 38          	sub    $0x38,%rsp
  419d71:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
  419d75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419d79:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  419d7d:	0f b6 c0             	movzbl %al,%eax
  419d80:	8d 50 01             	lea    0x1(%rax),%edx
  419d83:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419d87:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  419d8b:	0f b6 c0             	movzbl %al,%eax
  419d8e:	39 c2                	cmp    %eax,%edx
  419d90:	75 23                	jne    419db5 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x4d>
  419d92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419d96:	48 89 c7             	mov    %rax,%rdi
  419d99:	e8 80 dd ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419d9e:	48 8b 10             	mov    (%rax),%rdx
  419da1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419da5:	48 8b 40 20          	mov    0x20(%rax),%rax
  419da9:	48 39 c2             	cmp    %rax,%rdx
  419dac:	74 07                	je     419db5 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x4d>
  419dae:	b8 01 00 00 00       	mov    $0x1,%eax
  419db3:	eb 05                	jmp    419dba <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x52>
  419db5:	b8 00 00 00 00       	mov    $0x0,%eax
  419dba:	84 c0                	test   %al,%al
  419dbc:	74 7c                	je     419e3a <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0xd2>
	      std::advance(_M_curr(), _M_to_increment);
  419dbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419dc2:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  419dc6:	0f b6 d8             	movzbl %al,%ebx
  419dc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419dcd:	48 89 c7             	mov    %rax,%rdi
  419dd0:	e8 49 dd ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419dd5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  419dd9:	88 5d e7             	mov    %bl,-0x19(%rbp)
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
  419ddc:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  419de0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  419de4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419de8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  419dec:	90                   	nop
      std::__advance(__i, __d, std::__iterator_category(__i));
  419ded:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  419df1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419df5:	48 89 d6             	mov    %rdx,%rsi
  419df8:	48 89 c7             	mov    %rax,%rdi
  419dfb:	e8 06 2a ff ff       	call   40c806 <_ZSt9__advanceIPKDilEvRT_T0_St26random_access_iterator_tag>
    }
  419e00:	90                   	nop
	    if (_M_curr() == _M_last)
  419e01:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e05:	48 89 c7             	mov    %rax,%rdi
  419e08:	e8 11 dd ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419e0d:	48 8b 10             	mov    (%rax),%rdx
  419e10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e14:	48 8b 40 20          	mov    0x20(%rax),%rax
  419e18:	48 39 c2             	cmp    %rax,%rdx
  419e1b:	0f 94 c0             	sete   %al
  419e1e:	84 c0                	test   %al,%al
  419e20:	74 0a                	je     419e2c <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0xc4>
	      _M_buf_index = 0;
  419e22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e26:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  419e2a:	eb 3d                	jmp    419e69 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	      _M_read();
  419e2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e30:	48 89 c7             	mov    %rax,%rdi
  419e33:	e8 5a f3 ff ff       	call   419192 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_readEv>
  419e38:	eb 2f                	jmp    419e69 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	else if (_M_buf_index + 1 < _M_buf_last)
  419e3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e3e:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  419e42:	0f b6 c0             	movzbl %al,%eax
  419e45:	8d 50 01             	lea    0x1(%rax),%edx
  419e48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e4c:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  419e50:	0f b6 c0             	movzbl %al,%eax
  419e53:	39 c2                	cmp    %eax,%edx
  419e55:	7d 12                	jge    419e69 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEEppEv+0x101>
	  ++_M_buf_index;
  419e57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e5b:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  419e5f:	8d 50 01             	lea    0x1(%rax),%edx
  419e62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  419e66:	88 50 18             	mov    %dl,0x18(%rax)
	return *this;
  419e69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      }
  419e6d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419e71:	c9                   	leave
  419e72:	c3                   	ret

0000000000419e73 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_>:
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
  419e73:	55                   	push   %rbp
  419e74:	48 89 e5             	mov    %rsp,%rbp
  419e77:	53                   	push   %rbx
  419e78:	48 83 ec 08          	sub    $0x8,%rsp
	  return __lhs._M_curr() == __rhs._M_curr()
  419e7c:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  419e80:	e8 33 0d ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  419e85:	48 8b 18             	mov    (%rax),%rbx
  419e88:	48 8d 45 38          	lea    0x38(%rbp),%rax
  419e8c:	48 89 c7             	mov    %rax,%rdi
  419e8f:	e8 24 0d ff ff       	call   40abb8 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEE7_M_currEv>
  419e94:	48 8b 00             	mov    (%rax),%rax
		   && __lhs._M_buf_index == __rhs._M_buf_index;
  419e97:	48 39 c3             	cmp    %rax,%rbx
  419e9a:	75 13                	jne    419eaf <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419e9c:	0f b6 55 28          	movzbl 0x28(%rbp),%edx
  419ea0:	0f b6 45 50          	movzbl 0x50(%rbp),%eax
  419ea4:	38 c2                	cmp    %al,%dl
  419ea6:	75 07                	jne    419eaf <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x3c>
  419ea8:	b8 01 00 00 00       	mov    $0x1,%eax
  419ead:	eb 05                	jmp    419eb4 <_ZNSt9__unicode13_Utf_iteratorIcDiPKcS2_NS_5_ReplEEFeqES4_S4_+0x41>
  419eaf:	b8 00 00 00 00       	mov    $0x0,%eax
      }
  419eb4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419eb8:	c9                   	leave
  419eb9:	c3                   	ret

0000000000419eba <_ZSt13__countl_zeroIoEiT_>:
    __countl_zero(_Tp __x) noexcept
  419eba:	55                   	push   %rbp
  419ebb:	48 89 e5             	mov    %rsp,%rbp
  419ebe:	48 89 f8             	mov    %rdi,%rax
  419ec1:	48 89 f1             	mov    %rsi,%rcx
  419ec4:	48 89 c0             	mov    %rax,%rax
  419ec7:	ba 00 00 00 00       	mov    $0x0,%edx
  419ecc:	48 89 ca             	mov    %rcx,%rdx
  419ecf:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  419ed3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
  419ed7:	c7 45 fc 80 00 00 00 	movl   $0x80,-0x4(%rbp)
      if (__x == 0)
  419ede:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419ee2:	48 0b 45 c8          	or     -0x38(%rbp),%rax
  419ee6:	75 07                	jne    419eef <_ZSt13__countl_zeroIoEiT_+0x35>
        return _Nd;
  419ee8:	b8 80 00 00 00       	mov    $0x80,%eax
  419eed:	eb 5b                	jmp    419f4a <_ZSt13__countl_zeroIoEiT_+0x90>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
  419eef:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%rbp)
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
  419ef6:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
  419efd:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
	  unsigned long long __high = __x >> _Nd_ull;
  419f04:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419f08:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  419f0c:	48 89 d0             	mov    %rdx,%rax
  419f0f:	31 d2                	xor    %edx,%edx
  419f11:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  if (__high != 0)
  419f15:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  419f1a:	74 12                	je     419f2e <_ZSt13__countl_zeroIoEiT_+0x74>
	      constexpr int __diff = (2 * _Nd_ull) - _Nd;
  419f1c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
	      return __builtin_clzll(__high) - __diff;
  419f23:	48 0f bd 45 e8       	bsr    -0x18(%rbp),%rax
  419f28:	48 83 f0 3f          	xor    $0x3f,%rax
  419f2c:	eb 1c                	jmp    419f4a <_ZSt13__countl_zeroIoEiT_+0x90>
	  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;
  419f2e:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  419f35:	ff
	  unsigned long long __low = __x & __max_ull;
  419f36:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  419f3a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
  419f3e:	48 0f bd 45 d8       	bsr    -0x28(%rbp),%rax
  419f43:	48 83 f0 3f          	xor    $0x3f,%rax
  419f47:	83 c0 40             	add    $0x40,%eax
    }
  419f4a:	5d                   	pop    %rbp
  419f4b:	c3                   	ret

0000000000419f4c <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE6_GuardIS2_ED1Ev>:
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
  419f4c:	55                   	push   %rbp
  419f4d:	48 89 e5             	mov    %rsp,%rbp
  419f50:	53                   	push   %rbx
  419f51:	48 83 ec 18          	sub    $0x18,%rsp
  419f55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  419f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419f5d:	48 83 c0 08          	add    $0x8,%rax
  419f61:	48 89 c7             	mov    %rax,%rdi
  419f64:	e8 a6 02 00 00       	call   41a20f <_ZSt4moveIRPKDiEONSt16remove_referenceIT_E4typeEOS4_>
  419f69:	48 8b 18             	mov    (%rax),%rbx
  419f6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  419f70:	48 8b 00             	mov    (%rax),%rax
  419f73:	48 89 c7             	mov    %rax,%rdi
  419f76:	e8 a3 db ff ff       	call   417b1e <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE7_M_currEv>
  419f7b:	48 89 18             	mov    %rbx,(%rax)
  419f7e:	90                   	nop
  419f7f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  419f83:	c9                   	leave
  419f84:	c3                   	ret
  419f85:	90                   	nop

0000000000419f86 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv>:
      _S_error()
  419f86:	55                   	push   %rbp
  419f87:	48 89 e5             	mov    %rsp,%rbp
  419f8a:	48 83 ec 20          	sub    $0x20,%rsp
  419f8e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char32_t __c = _ErrorHandler()();
  419f92:	48 8d 45 fb          	lea    -0x5(%rbp),%rax
  419f96:	48 89 c7             	mov    %rax,%rdi
  419f99:	e8 68 ae fe ff       	call   404e06 <_ZNKSt9__unicode5_ReplclEv>
  419f9e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  419fa1:	b8 00 00 00 00       	mov    $0x0,%eax
	__glibcxx_assert(__is_scalar_value(__c));
  419fa6:	84 c0                	test   %al,%al
  419fa8:	74 18                	je     419fc2 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE8_S_errorEv+0x3c>
  419faa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  419fad:	89 c7                	mov    %eax,%edi
  419faf:	e8 19 ae fe ff       	call   404dcd <_ZNSt9__unicode17__is_scalar_valueEDi>
  419fb4:	83 f0 01             	xor    $0x1,%eax
  419fb7:	0f b6 c0             	movzbl %al,%eax
  419fba:	48 85 c0             	test   %rax,%rax
  419fbd:	0f 95 c0             	setne  %al
  419fc0:	84 c0                	test   %al,%al
	return __c;
  419fc2:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
  419fc5:	c9                   	leave
  419fc6:	c3                   	ret
  419fc7:	90                   	nop

0000000000419fc8 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih>:
      _M_update(char32_t __c, uint8_t __to_incr)
  419fc8:	55                   	push   %rbp
  419fc9:	48 89 e5             	mov    %rsp,%rbp
  419fcc:	53                   	push   %rbx
  419fcd:	48 83 ec 28          	sub    $0x28,%rsp
  419fd1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  419fd5:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  419fd8:	89 d0                	mov    %edx,%eax
  419fda:	88 45 d0             	mov    %al,-0x30(%rbp)
	_M_to_increment = __to_incr;
  419fdd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419fe1:	0f b6 55 d0          	movzbl -0x30(%rbp),%edx
  419fe5:	88 50 1a             	mov    %dl,0x1a(%rax)
	_M_buf_index = 0;
  419fe8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  419fec:	c6 40 18 00          	movb   $0x0,0x18(%rax)
	    int __bits = std::bit_width((uint32_t)__c);
  419ff0:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  419ff3:	89 c7                	mov    %eax,%edi
  419ff5:	e8 23 02 00 00       	call   41a21d <_ZSt9bit_widthITkSt18__unsigned_integerjEiT_>
  419ffa:	89 45 ec             	mov    %eax,-0x14(%rbp)
	    if (__bits <= 7) [[likely]]
  419ffd:	83 7d ec 07          	cmpl   $0x7,-0x14(%rbp)
  41a001:	7f 65                	jg     41a068 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0xa0>
		_M_buf[0] = __c;
  41a003:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a006:	89 c3                	mov    %eax,%ebx
  41a008:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a00c:	be 00 00 00 00       	mov    $0x0,%esi
  41a011:	48 89 c7             	mov    %rax,%rdi
  41a014:	e8 1b 02 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a019:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
  41a01b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a01f:	be 03 00 00 00       	mov    $0x3,%esi
  41a024:	48 89 c7             	mov    %rax,%rdi
  41a027:	e8 08 02 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a02c:	c6 00 00             	movb   $0x0,(%rax)
  41a02f:	0f b6 18             	movzbl (%rax),%ebx
  41a032:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a036:	be 02 00 00 00       	mov    $0x2,%esi
  41a03b:	48 89 c7             	mov    %rax,%rdi
  41a03e:	e8 f1 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a043:	88 18                	mov    %bl,(%rax)
  41a045:	0f b6 18             	movzbl (%rax),%ebx
  41a048:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a04c:	be 01 00 00 00       	mov    $0x1,%esi
  41a051:	48 89 c7             	mov    %rax,%rdi
  41a054:	e8 db 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a059:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 1;
  41a05b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a05f:	c6 40 19 01          	movb   $0x1,0x19(%rax)
      }
  41a063:	e9 86 01 00 00       	jmp    41a1ee <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
	    else if (__bits <= 11)
  41a068:	83 7d ec 0b          	cmpl   $0xb,-0x14(%rbp)
  41a06c:	7f 73                	jg     41a0e1 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x119>
		_M_buf[0] = 0xC0 | (__c >> 6);
  41a06e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a071:	c1 e8 06             	shr    $0x6,%eax
  41a074:	83 c8 c0             	or     $0xffffffc0,%eax
  41a077:	89 c3                	mov    %eax,%ebx
  41a079:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a07d:	be 00 00 00 00       	mov    $0x0,%esi
  41a082:	48 89 c7             	mov    %rax,%rdi
  41a085:	e8 aa 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a08a:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | (__c & 0x3F);
  41a08c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a08f:	83 e0 3f             	and    $0x3f,%eax
  41a092:	83 c8 80             	or     $0xffffff80,%eax
  41a095:	89 c3                	mov    %eax,%ebx
  41a097:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a09b:	be 01 00 00 00       	mov    $0x1,%esi
  41a0a0:	48 89 c7             	mov    %rax,%rdi
  41a0a3:	e8 8c 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a0a8:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = _M_buf[3] = 0;
  41a0aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a0ae:	be 03 00 00 00       	mov    $0x3,%esi
  41a0b3:	48 89 c7             	mov    %rax,%rdi
  41a0b6:	e8 79 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a0bb:	c6 00 00             	movb   $0x0,(%rax)
  41a0be:	0f b6 18             	movzbl (%rax),%ebx
  41a0c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a0c5:	be 02 00 00 00       	mov    $0x2,%esi
  41a0ca:	48 89 c7             	mov    %rax,%rdi
  41a0cd:	e8 62 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a0d2:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 2;
  41a0d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a0d8:	c6 40 19 02          	movb   $0x2,0x19(%rax)
      }
  41a0dc:	e9 0d 01 00 00       	jmp    41a1ee <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
	    else if (__bits <= 16)
  41a0e1:	83 7d ec 10          	cmpl   $0x10,-0x14(%rbp)
  41a0e5:	7f 7e                	jg     41a165 <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x19d>
		_M_buf[0] = 0xE0 | (__c >> 12);
  41a0e7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a0ea:	c1 e8 0c             	shr    $0xc,%eax
  41a0ed:	83 c8 e0             	or     $0xffffffe0,%eax
  41a0f0:	89 c3                	mov    %eax,%ebx
  41a0f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a0f6:	be 00 00 00 00       	mov    $0x0,%esi
  41a0fb:	48 89 c7             	mov    %rax,%rdi
  41a0fe:	e8 31 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a103:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
  41a105:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a108:	c1 e8 06             	shr    $0x6,%eax
  41a10b:	83 e0 3f             	and    $0x3f,%eax
  41a10e:	83 c8 80             	or     $0xffffff80,%eax
  41a111:	89 c3                	mov    %eax,%ebx
  41a113:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a117:	be 01 00 00 00       	mov    $0x1,%esi
  41a11c:	48 89 c7             	mov    %rax,%rdi
  41a11f:	e8 10 01 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a124:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = 0x80 | (__c & 0x3F);
  41a126:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a129:	83 e0 3f             	and    $0x3f,%eax
  41a12c:	83 c8 80             	or     $0xffffff80,%eax
  41a12f:	89 c3                	mov    %eax,%ebx
  41a131:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a135:	be 02 00 00 00       	mov    $0x2,%esi
  41a13a:	48 89 c7             	mov    %rax,%rdi
  41a13d:	e8 f2 00 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a142:	88 18                	mov    %bl,(%rax)
		_M_buf[3] = 0;
  41a144:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a148:	be 03 00 00 00       	mov    $0x3,%esi
  41a14d:	48 89 c7             	mov    %rax,%rdi
  41a150:	e8 df 00 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a155:	c6 00 00             	movb   $0x0,(%rax)
		_M_buf_last = 3;
  41a158:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a15c:	c6 40 19 03          	movb   $0x3,0x19(%rax)
      }
  41a160:	e9 89 00 00 00       	jmp    41a1ee <_ZNSt9__unicode13_Utf_iteratorIDicPKDiS2_NS_5_ReplEE9_M_updateEDih+0x226>
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
  41a165:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a168:	c1 e8 12             	shr    $0x12,%eax
  41a16b:	83 e0 07             	and    $0x7,%eax
  41a16e:	83 c8 f0             	or     $0xfffffff0,%eax
  41a171:	89 c3                	mov    %eax,%ebx
  41a173:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a177:	be 00 00 00 00       	mov    $0x0,%esi
  41a17c:	48 89 c7             	mov    %rax,%rdi
  41a17f:	e8 b0 00 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a184:	88 18                	mov    %bl,(%rax)
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
  41a186:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a189:	c1 e8 0c             	shr    $0xc,%eax
  41a18c:	83 e0 3f             	and    $0x3f,%eax
  41a18f:	83 c8 80             	or     $0xffffff80,%eax
  41a192:	89 c3                	mov    %eax,%ebx
  41a194:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a198:	be 01 00 00 00       	mov    $0x1,%esi
  41a19d:	48 89 c7             	mov    %rax,%rdi
  41a1a0:	e8 8f 00 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a1a5:	88 18                	mov    %bl,(%rax)
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
  41a1a7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a1aa:	c1 e8 06             	shr    $0x6,%eax
  41a1ad:	83 e0 3f             	and    $0x3f,%eax
  41a1b0:	83 c8 80             	or     $0xffffff80,%eax
  41a1b3:	89 c3                	mov    %eax,%ebx
  41a1b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a1b9:	be 02 00 00 00       	mov    $0x2,%esi
  41a1be:	48 89 c7             	mov    %rax,%rdi
  41a1c1:	e8 6e 00 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a1c6:	88 18                	mov    %bl,(%rax)
		_M_buf[3] = 0x80 | (__c & 0x3F);
  41a1c8:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41a1cb:	83 e0 3f             	and    $0x3f,%eax
  41a1ce:	83 c8 80             	or     $0xffffff80,%eax
  41a1d1:	89 c3                	mov    %eax,%ebx
  41a1d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a1d7:	be 03 00 00 00       	mov    $0x3,%esi
  41a1dc:	48 89 c7             	mov    %rax,%rdi
  41a1df:	e8 50 00 00 00       	call   41a234 <_ZNSt5arrayIcLm4EEixEm>
  41a1e4:	88 18                	mov    %bl,(%rax)
		_M_buf_last = 4;
  41a1e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41a1ea:	c6 40 19 04          	movb   $0x4,0x19(%rax)
      }
  41a1ee:	90                   	nop
  41a1ef:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  41a1f3:	c9                   	leave
  41a1f4:	c3                   	ret
  41a1f5:	90                   	nop

000000000041a1f6 <_ZNKSt5arrayIcLm4EEixEm>:
      operator[](size_type __n) const noexcept
  41a1f6:	55                   	push   %rbp
  41a1f7:	48 89 e5             	mov    %rsp,%rbp
  41a1fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41a1fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  41a202:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41a206:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41a20a:	48 01 d0             	add    %rdx,%rax
      }
  41a20d:	5d                   	pop    %rbp
  41a20e:	c3                   	ret

000000000041a20f <_ZSt4moveIRPKDiEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
  41a20f:	55                   	push   %rbp
  41a210:	48 89 e5             	mov    %rsp,%rbp
  41a213:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  41a217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41a21b:	5d                   	pop    %rbp
  41a21c:	c3                   	ret

000000000041a21d <_ZSt9bit_widthITkSt18__unsigned_integerjEiT_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 3656. Inconsistent bit operations returning a count
  /// The smallest integer greater than the base-2 logarithm of `x`.
  template<__unsigned_integer _Tp>
    constexpr int
    bit_width(_Tp __x) noexcept
  41a21d:	55                   	push   %rbp
  41a21e:	48 89 e5             	mov    %rsp,%rbp
  41a221:	48 83 ec 10          	sub    $0x10,%rsp
  41a225:	89 7d fc             	mov    %edi,-0x4(%rbp)
    { return std::__bit_width(__x); }
  41a228:	8b 45 fc             	mov    -0x4(%rbp),%eax
  41a22b:	89 c7                	mov    %eax,%edi
  41a22d:	e8 c9 a4 fe ff       	call   4046fb <_ZSt11__bit_widthIjEiT_>
  41a232:	c9                   	leave
  41a233:	c3                   	ret

000000000041a234 <_ZNSt5arrayIcLm4EEixEm>:
      operator[](size_type __n) noexcept
  41a234:	55                   	push   %rbp
  41a235:	48 89 e5             	mov    %rsp,%rbp
  41a238:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  41a23c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _M_elems[__n];
  41a240:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41a244:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41a248:	48 01 d0             	add    %rdx,%rax
      }
  41a24b:	5d                   	pop    %rbp
  41a24c:	c3                   	ret

Disassembly of section .fini:

000000000041a250 <_fini>:
  41a250:	48 83 ec 08          	sub    $0x8,%rsp
  41a254:	48 83 c4 08          	add    $0x8,%rsp
  41a258:	c3                   	ret
